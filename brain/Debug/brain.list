
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6e4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800c97c  0800c97c  0001c97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9a4  0800c9a4  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9a4  0800c9a4  0001c9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9ac  0800c9ac  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9ac  0800c9ac  0001c9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9b0  0800c9b0  0001c9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  24000000  0800c9b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000079c  24000028  0800c9dc  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240007c4  0800c9dc  000207c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000209ff  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f25  00000000  00000000  00040a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001618  00000000  00000000  00043980  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001500  00000000  00000000  00044f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003867a  00000000  00000000  00046498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001234b  00000000  00000000  0007eb12  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0017394d  00000000  00000000  00090e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002047aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f44  00000000  00000000  00204828  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000028 	.word	0x24000028
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c964 	.word	0x0800c964

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400002c 	.word	0x2400002c
 80002d4:	0800c964 	.word	0x0800c964

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayUs_Init+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <delayUs_Init+0x38>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <delayUs_Init+0x38>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delayUs_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delayUs_Init+0x3c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <delayUs_Init+0x3c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
    }
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000

08000618 <peripheralUART_Init>:
int trackingWait4CompassTx;
int trackingWait4CompassRx;
int trackingWait4SpinalCordTx;
int trackingWait4SpinalCordRx;
void peripheralUART_Init()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	spinalCordTxPacket[0] = 0xAA;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <peripheralUART_Init+0x44>)
 800061e:	22aa      	movs	r2, #170	; 0xaa
 8000620:	701a      	strb	r2, [r3, #0]
	spinalCordTxPacket[1] = 0xAA;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <peripheralUART_Init+0x44>)
 8000624:	22aa      	movs	r2, #170	; 0xaa
 8000626:	705a      	strb	r2, [r3, #1]
	spinalCordTxPacket[2] = 0xAA;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <peripheralUART_Init+0x44>)
 800062a:	22aa      	movs	r2, #170	; 0xaa
 800062c:	709a      	strb	r2, [r3, #2]
	spinalCordTxPacket[3] = 0xAA;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <peripheralUART_Init+0x44>)
 8000630:	22aa      	movs	r2, #170	; 0xaa
 8000632:	70da      	strb	r2, [r3, #3]
	spinalCordTxPacket[motorDir] = 0x00;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <peripheralUART_Init+0x44>)
 8000636:	2200      	movs	r2, #0
 8000638:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800063a:	2201      	movs	r2, #1
 800063c:	4908      	ldr	r1, [pc, #32]	; (8000660 <peripheralUART_Init+0x48>)
 800063e:	4809      	ldr	r0, [pc, #36]	; (8000664 <peripheralUART_Init+0x4c>)
 8000640:	f008 fe8c 	bl	800935c <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000644:	2201      	movs	r2, #1
 8000646:	4908      	ldr	r1, [pc, #32]	; (8000668 <peripheralUART_Init+0x50>)
 8000648:	4808      	ldr	r0, [pc, #32]	; (800066c <peripheralUART_Init+0x54>)
 800064a:	f008 ff5f 	bl	800950c <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 800064e:	2202      	movs	r2, #2
 8000650:	4907      	ldr	r1, [pc, #28]	; (8000670 <peripheralUART_Init+0x58>)
 8000652:	4808      	ldr	r0, [pc, #32]	; (8000674 <peripheralUART_Init+0x5c>)
 8000654:	f008 ff5a 	bl	800950c <HAL_UART_Receive_DMA>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2400000c 	.word	0x2400000c
 8000660:	24000704 	.word	0x24000704
 8000664:	24000650 	.word	0x24000650
 8000668:	240006dc 	.word	0x240006dc
 800066c:	2400019c 	.word	0x2400019c
 8000670:	24000290 	.word	0x24000290
 8000674:	240004d8 	.word	0x240004d8

08000678 <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <compassReset+0x24>)
 800067e:	2261      	movs	r2, #97	; 0x61
 8000680:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	4905      	ldr	r1, [pc, #20]	; (800069c <compassReset+0x24>)
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <compassReset+0x28>)
 8000688:	f008 fde4 	bl	8009254 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 800068c:	f000 f818 	bl	80006c0 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 8000690:	4b02      	ldr	r3, [pc, #8]	; (800069c <compassReset+0x24>)
 8000692:	227a      	movs	r2, #122	; 0x7a
 8000694:	701a      	strb	r2, [r3, #0]
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	24000000 	.word	0x24000000
 80006a0:	240004d8 	.word	0x240004d8

080006a4 <compassRequest>:
void compassRequest(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80006a8:	2201      	movs	r2, #1
 80006aa:	4903      	ldr	r1, [pc, #12]	; (80006b8 <compassRequest+0x14>)
 80006ac:	4803      	ldr	r0, [pc, #12]	; (80006bc <compassRequest+0x18>)
 80006ae:	f008 fdd1 	bl	8009254 <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	24000000 	.word	0x24000000
 80006bc:	240004d8 	.word	0x240004d8

080006c0 <wait4CompassTx>:

	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
	while(compassTxCplt == 0)
 80006c4:	e004      	b.n	80006d0 <wait4CompassTx+0x10>
	{
		trackingWait4CompassTx++;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <wait4CompassTx+0x28>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	3301      	adds	r3, #1
 80006cc:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <wait4CompassTx+0x28>)
 80006ce:	6013      	str	r3, [r2, #0]
	while(compassTxCplt == 0)
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <wait4CompassTx+0x2c>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0f6      	beq.n	80006c6 <wait4CompassTx+0x6>
	}
	compassTxCplt = 0;
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <wait4CompassTx+0x2c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	240007bc 	.word	0x240007bc
 80006ec:	24000700 	.word	0x24000700

080006f0 <spinalCordTrans>:
{
	HAL_UART_Init(&spinalCord);
}

void spinalCordTrans(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&spinalCord, (uint8_t*)spinalCordTxPacket, 9);
 80006f4:	2209      	movs	r2, #9
 80006f6:	4904      	ldr	r1, [pc, #16]	; (8000708 <spinalCordTrans+0x18>)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <spinalCordTrans+0x1c>)
 80006fa:	f008 fdab 	bl	8009254 <HAL_UART_Transmit_IT>
	wait4SpinalCordTx();
 80006fe:	f000 f807 	bl	8000710 <wait4SpinalCordTx>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2400000c 	.word	0x2400000c
 800070c:	24000650 	.word	0x24000650

08000710 <wait4SpinalCordTx>:
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 2);
	wait4SpinalCordRx();
}

void wait4SpinalCordTx(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
	while(spinalCordTxCplt == 0)
 8000714:	e004      	b.n	8000720 <wait4SpinalCordTx+0x10>
	{
		trackingWait4SpinalCordTx++;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <wait4SpinalCordTx+0x28>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	4a06      	ldr	r2, [pc, #24]	; (8000738 <wait4SpinalCordTx+0x28>)
 800071e:	6013      	str	r3, [r2, #0]
	while(spinalCordTxCplt == 0)
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <wait4SpinalCordTx+0x2c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d0f6      	beq.n	8000716 <wait4SpinalCordTx+0x6>
	}
	spinalCordTxCplt = 0;
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <wait4SpinalCordTx+0x2c>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	24000638 	.word	0x24000638
 800073c:	24000576 	.word	0x24000576

08000740 <controlMotor1>:
int trackingControlMotor4;

#define BRAKE_SPEED 1

void controlMotor1(int _speed)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor1Dir_Pin, motor1Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor1Speed] = abs(_speed);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	bfb8      	it	lt
 800074e:	425b      	neglt	r3, r3
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <controlMotor1+0x48>)
 8000754:	711a      	strb	r2, [r3, #4]
	if(_speed>=0)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db07      	blt.n	800076c <controlMotor1+0x2c>
//	(spinalCordTxPacket[motor1Dir] = ccw) : (spinalCordTxPacket[motor1Dir] = fcw);
		spinalCordTxPacket[motorDir] &= ~(1UL << 0);
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <controlMotor1+0x48>)
 800075e:	7a1b      	ldrb	r3, [r3, #8]
 8000760:	f023 0301 	bic.w	r3, r3, #1
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <controlMotor1+0x48>)
 8000768:	721a      	strb	r2, [r3, #8]
	else
		spinalCordTxPacket[motorDir] |= (1UL << 0);
//	trackingControlMotor1++;
}
 800076a:	e006      	b.n	800077a <controlMotor1+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 0);
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <controlMotor1+0x48>)
 800076e:	7a1b      	ldrb	r3, [r3, #8]
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <controlMotor1+0x48>)
 8000778:	721a      	strb	r2, [r3, #8]
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	2400000c 	.word	0x2400000c

0800078c <controlMotor2>:
void controlMotor2(int _speed)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor2Dir_Pin, motor2Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor2Speed] = abs(_speed);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	bfb8      	it	lt
 800079a:	425b      	neglt	r3, r3
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <controlMotor2+0x48>)
 80007a0:	715a      	strb	r2, [r3, #5]
	if(_speed>=0)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	db07      	blt.n	80007b8 <controlMotor2+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 1);
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <controlMotor2+0x48>)
 80007aa:	7a1b      	ldrb	r3, [r3, #8]
 80007ac:	f023 0302 	bic.w	r3, r3, #2
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <controlMotor2+0x48>)
 80007b4:	721a      	strb	r2, [r3, #8]
	else
		spinalCordTxPacket[motorDir] |= (1UL << 1);
//	trackingControlMotor2++;
}
 80007b6:	e006      	b.n	80007c6 <controlMotor2+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 1);
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <controlMotor2+0x48>)
 80007ba:	7a1b      	ldrb	r3, [r3, #8]
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <controlMotor2+0x48>)
 80007c4:	721a      	strb	r2, [r3, #8]
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	2400000c 	.word	0x2400000c

080007d8 <controlMotor3>:
void controlMotor3(int _speed)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor3Dir_Pin, motor3Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor3Speed] = abs(_speed);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	bfb8      	it	lt
 80007e6:	425b      	neglt	r3, r3
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <controlMotor3+0x48>)
 80007ec:	719a      	strb	r2, [r3, #6]
	if(_speed>=0)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	db07      	blt.n	8000804 <controlMotor3+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 2);
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <controlMotor3+0x48>)
 80007f6:	7a1b      	ldrb	r3, [r3, #8]
 80007f8:	f023 0304 	bic.w	r3, r3, #4
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <controlMotor3+0x48>)
 8000800:	721a      	strb	r2, [r3, #8]
	else
		spinalCordTxPacket[motorDir] |= (1UL << 2);
//	trackingControlMotor3++;
}
 8000802:	e006      	b.n	8000812 <controlMotor3+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 2);
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <controlMotor3+0x48>)
 8000806:	7a1b      	ldrb	r3, [r3, #8]
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b04      	ldr	r3, [pc, #16]	; (8000820 <controlMotor3+0x48>)
 8000810:	721a      	strb	r2, [r3, #8]
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	2400000c 	.word	0x2400000c

08000824 <controlMotor4>:
void controlMotor4(int _speed)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor3Dir_Pin, motor3Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor4Speed] = abs(_speed);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	bfb8      	it	lt
 8000832:	425b      	neglt	r3, r3
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <controlMotor4+0x48>)
 8000838:	71da      	strb	r2, [r3, #7]
	if(_speed>=0)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	db07      	blt.n	8000850 <controlMotor4+0x2c>
		spinalCordTxPacket[motorDir] &= ~(1UL << 3);
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <controlMotor4+0x48>)
 8000842:	7a1b      	ldrb	r3, [r3, #8]
 8000844:	f023 0308 	bic.w	r3, r3, #8
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <controlMotor4+0x48>)
 800084c:	721a      	strb	r2, [r3, #8]
	else
		spinalCordTxPacket[motorDir] |= (1UL << 3);
//	trackingControlMotor4++;
}
 800084e:	e006      	b.n	800085e <controlMotor4+0x3a>
		spinalCordTxPacket[motorDir] |= (1UL << 3);
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <controlMotor4+0x48>)
 8000852:	7a1b      	ldrb	r3, [r3, #8]
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <controlMotor4+0x48>)
 800085c:	721a      	strb	r2, [r3, #8]
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	2400000c 	.word	0x2400000c

08000870 <brake>:
			controlMotor4(-30);
		}
}

void brake(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	controlMotor1(BRAKE_SPEED);
 8000874:	2001      	movs	r0, #1
 8000876:	f7ff ff63 	bl	8000740 <controlMotor1>
	controlMotor2(-BRAKE_SPEED);
 800087a:	f04f 30ff 	mov.w	r0, #4294967295
 800087e:	f7ff ff85 	bl	800078c <controlMotor2>
	controlMotor3(BRAKE_SPEED);
 8000882:	2001      	movs	r0, #1
 8000884:	f7ff ffa8 	bl	80007d8 <controlMotor3>
	controlMotor4(-BRAKE_SPEED);
 8000888:	f04f 30ff 	mov.w	r0, #4294967295
 800088c:	f7ff ffca 	bl	8000824 <controlMotor4>
	spinalCordTrans();
 8000890:	f7ff ff2e 	bl	80006f0 <spinalCordTrans>
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <positionControl_Init+0x1c>)
 800089e:	f008 f869 	bl	8008974 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&leftArm);
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <positionControl_Init+0x20>)
 80008a4:	f008 f866 	bl	8008974 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&rigtArm);
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <positionControl_Init+0x24>)
 80008aa:	f008 f863 	bl	8008974 <HAL_TIM_Base_Start_IT>
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	24000760 	.word	0x24000760
 80008b8:	24000230 	.word	0x24000230
 80008bc:	24000718 	.word	0x24000718

080008c0 <HAL_UART_TxCpltCallback>:
//include cuối "USER CODE BEGIN 0"
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <HAL_UART_TxCpltCallback+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d103      	bne.n	80008dc <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt = 1;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <HAL_UART_TxCpltCallback+0x68>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == manualRobot.Instance)
	{
		manualRobotTxCplt = 1;
	}
}
 80008da:	e01c      	b.n	8000916 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_UART_TxCpltCallback+0x6c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d103      	bne.n	80008f0 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt = 1;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <HAL_UART_TxCpltCallback+0x70>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]
}
 80008ee:	e012      	b.n	8000916 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_UART_TxCpltCallback+0x74>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d103      	bne.n	8000904 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt = 1;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_UART_TxCpltCallback+0x78>)
 80008fe:	2201      	movs	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
}
 8000902:	e008      	b.n	8000916 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == manualRobot.Instance)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <HAL_UART_TxCpltCallback+0x7c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	429a      	cmp	r2, r3
 800090e:	d102      	bne.n	8000916 <HAL_UART_TxCpltCallback+0x56>
		manualRobotTxCplt = 1;
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <HAL_UART_TxCpltCallback+0x80>)
 8000912:	2201      	movs	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	240004d8 	.word	0x240004d8
 8000928:	24000700 	.word	0x24000700
 800092c:	2400019c 	.word	0x2400019c
 8000930:	240002a8 	.word	0x240002a8
 8000934:	24000650 	.word	0x24000650
 8000938:	24000576 	.word	0x24000576
 800093c:	24000070 	.word	0x24000070
 8000940:	2400061c 	.word	0x2400061c

08000944 <HAL_UART_RxCpltCallback>:
int trackingReceiSpinalCord;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_UART_RxCpltCallback+0x64>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	429a      	cmp	r2, r3
 8000956:	d103      	bne.n	8000960 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt = 1;
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <HAL_UART_RxCpltCallback+0x68>)
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == manualRobot.Instance)
	{
		manualRobotRxCplt = 1;
	}
}
 800095e:	e01c      	b.n	800099a <HAL_UART_RxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_UART_RxCpltCallback+0x6c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	429a      	cmp	r2, r3
 800096a:	d103      	bne.n	8000974 <HAL_UART_RxCpltCallback+0x30>
		PS2RxCplt = 1;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_UART_RxCpltCallback+0x70>)
 800096e:	2201      	movs	r2, #1
 8000970:	701a      	strb	r2, [r3, #0]
}
 8000972:	e012      	b.n	800099a <HAL_UART_RxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_UART_RxCpltCallback+0x74>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	429a      	cmp	r2, r3
 800097e:	d103      	bne.n	8000988 <HAL_UART_RxCpltCallback+0x44>
		spinalCordRxCplt = 1;
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_UART_RxCpltCallback+0x78>)
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
}
 8000986:	e008      	b.n	800099a <HAL_UART_RxCpltCallback+0x56>
	else if(huart->Instance == manualRobot.Instance)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_UART_RxCpltCallback+0x7c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	429a      	cmp	r2, r3
 8000992:	d102      	bne.n	800099a <HAL_UART_RxCpltCallback+0x56>
		manualRobotRxCplt = 1;
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <HAL_UART_RxCpltCallback+0x80>)
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	240004d8 	.word	0x240004d8
 80009ac:	24000360 	.word	0x24000360
 80009b0:	2400019c 	.word	0x2400019c
 80009b4:	2400057a 	.word	0x2400057a
 80009b8:	24000650 	.word	0x24000650
 80009bc:	24000758 	.word	0x24000758
 80009c0:	24000070 	.word	0x24000070
 80009c4:	240003d1 	.word	0x240003d1

080009c8 <HAL_TIM_PeriodElapsedCallback>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d16f      	bne.n	8000abc <HAL_TIM_PeriodElapsedCallback+0xf4>
	{
		if(legEn == 1)
 80009dc:	4b3a      	ldr	r3, [pc, #232]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d16b      	bne.n	8000abc <HAL_TIM_PeriodElapsedCallback+0xf4>
		{
			if(legStatus == legInitShoot)
 80009e4:	4b39      	ldr	r3, [pc, #228]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x104>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d11f      	bne.n	8000a2c <HAL_TIM_PeriodElapsedCallback+0x64>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình legDir để lùi
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f2:	4837      	ldr	r0, [pc, #220]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80009f4:	f005 f914 	bl	8005c20 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 80009f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009fc:	4834      	ldr	r0, [pc, #208]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80009fe:	f005 f928 	bl	8005c52 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000a02:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	3301      	adds	r3, #1
 8000a08:	4a32      	ldr	r2, [pc, #200]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000a0a:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;												//đếm số xung
 8000a0c:	4b32      	ldr	r3, [pc, #200]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4a31      	ldr	r2, [pc, #196]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a14:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legInitShootPulse)
 8000a16:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000a1e:	db05      	blt.n	8000a2c <HAL_TIM_PeriodElapsedCallback+0x64>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000a20:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000a26:	4b2c      	ldr	r3, [pc, #176]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legReInitShoot)
 8000a2c:	4b27      	ldr	r3, [pc, #156]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d11f      	bne.n	8000a74 <HAL_TIM_PeriodElapsedCallback+0xac>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình chân legDir để lùi
 8000a34:	2201      	movs	r2, #1
 8000a36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a3a:	4825      	ldr	r0, [pc, #148]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000a3c:	f005 f8f0 	bl	8005c20 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000a40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a44:	4822      	ldr	r0, [pc, #136]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000a46:	f005 f904 	bl	8005c52 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000a4a:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	4a20      	ldr	r2, [pc, #128]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000a52:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;												//đếm số xung
 8000a54:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a5c:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legReInitShootPulse)
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8000a66:	db05      	blt.n	8000a74 <HAL_TIM_PeriodElapsedCallback+0xac>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d11f      	bne.n	8000abc <HAL_TIM_PeriodElapsedCallback+0xf4>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a82:	4813      	ldr	r0, [pc, #76]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000a84:	f005 f8cc 	bl	8005c20 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000a88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a8c:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000a8e:	f005 f8e0 	bl	8005c52 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	3301      	adds	r3, #1
 8000a98:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000a9a:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;												//đếm số xung
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000aa4:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legEndPulse)
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000aae:	db05      	blt.n	8000abc <HAL_TIM_PeriodElapsedCallback+0xf4>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	24000760 	.word	0x24000760
 8000ac8:	24000570 	.word	0x24000570
 8000acc:	240006e4 	.word	0x240006e4
 8000ad0:	58020c00 	.word	0x58020c00
 8000ad4:	24000568 	.word	0x24000568
 8000ad8:	24000628 	.word	0x24000628

08000adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae0:	f001 f9c0 	bl	8001e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae4:	f000 f846 	bl	8000b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae8:	f000 fc22 	bl	8001330 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aec:	f000 fbd8 	bl	80012a0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000af0:	f000 f8f6 	bl	8000ce0 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000af4:	f000 f97c 	bl	8000df0 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8000af8:	f000 faee 	bl	80010d8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000afc:	f000 fb38 	bl	8001170 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000b00:	f000 f9da 	bl	8000eb8 <MX_TIM7_Init>
  MX_TIM12_Init();
 8000b04:	f000 fa10 	bl	8000f28 <MX_TIM12_Init>
  MX_TIM15_Init();
 8000b08:	f000 fa48 	bl	8000f9c <MX_TIM15_Init>
  MX_UART7_Init();
 8000b0c:	f000 fa98 	bl	8001040 <MX_UART7_Init>
  MX_USART6_UART_Init();
 8000b10:	f000 fb7a 	bl	8001208 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  peripheralUART_Init();
 8000b14:	f7ff fd80 	bl	8000618 <peripheralUART_Init>
  compassReset();
 8000b18:	f7ff fdae 	bl	8000678 <compassReset>
  delayUs_Init();
 8000b1c:	f7ff fd5c 	bl	80005d8 <delayUs_Init>
  positionControl_Init();
 8000b20:	f7ff feba 	bl	8000898 <positionControl_Init>
  brake();
 8000b24:	f7ff fea4 	bl	8000870 <brake>

//  legEn = 1;
//  legStatus = legInitShoot;
//  leftArmEn = 1;
//  leftArmStatus = leftArmInit;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	480e      	ldr	r0, [pc, #56]	; (8000b68 <main+0x8c>)
 8000b2e:	f005 f877 	bl	8005c20 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000b32:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b36:	f001 fa27 	bl	8001f88 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_0);
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <main+0x90>)
 8000b3e:	f005 f888 	bl	8005c52 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_2);
 8000b42:	2104      	movs	r1, #4
 8000b44:	4809      	ldr	r0, [pc, #36]	; (8000b6c <main+0x90>)
 8000b46:	f005 f884 	bl	8005c52 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_3);
 8000b4a:	2108      	movs	r1, #8
 8000b4c:	4807      	ldr	r0, [pc, #28]	; (8000b6c <main+0x90>)
 8000b4e:	f005 f880 	bl	8005c52 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000b52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b56:	f001 fa17 	bl	8001f88 <HAL_Delay>
	  tracking++;
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <main+0x94>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	4a03      	ldr	r2, [pc, #12]	; (8000b70 <main+0x94>)
 8000b62:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_0);
 8000b64:	e7e9      	b.n	8000b3a <main+0x5e>
 8000b66:	bf00      	nop
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	58021800 	.word	0x58021800
 8000b70:	240005f8 	.word	0x240005f8

08000b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b0cc      	sub	sp, #304	; 0x130
 8000b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b7e:	224c      	movs	r2, #76	; 0x4c
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f00b fee6 	bl	800c954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b88:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b8c:	2220      	movs	r2, #32
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f00b fedf 	bl	800c954 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	23bc      	movs	r3, #188	; 0xbc
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	f00b fed7 	bl	800c954 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	f005 f86e 	bl	8005c88 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	4b49      	ldr	r3, [pc, #292]	; (8000cd8 <SystemClock_Config+0x164>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	4a48      	ldr	r2, [pc, #288]	; (8000cd8 <SystemClock_Config+0x164>)
 8000bb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bbc:	6193      	str	r3, [r2, #24]
 8000bbe:	4b46      	ldr	r3, [pc, #280]	; (8000cd8 <SystemClock_Config+0x164>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	4b44      	ldr	r3, [pc, #272]	; (8000cdc <SystemClock_Config+0x168>)
 8000bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bce:	4a43      	ldr	r2, [pc, #268]	; (8000cdc <SystemClock_Config+0x168>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bd6:	4b41      	ldr	r3, [pc, #260]	; (8000cdc <SystemClock_Config+0x168>)
 8000bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bda:	f003 0201 	and.w	r2, r3, #1
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000be6:	bf00      	nop
 8000be8:	4b3b      	ldr	r3, [pc, #236]	; (8000cd8 <SystemClock_Config+0x164>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bf4:	d1f8      	bne.n	8000be8 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c02:	2340      	movs	r3, #64	; 0x40
 8000c04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c14:	2304      	movs	r3, #4
 8000c16:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000c1a:	233c      	movs	r3, #60	; 0x3c
 8000c1c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c32:	230c      	movs	r3, #12
 8000c34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c44:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f005 f857 	bl	8005cfc <HAL_RCC_OscConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000c54:	f000 fc82 	bl	800155c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c58:	233f      	movs	r3, #63	; 0x3f
 8000c5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c70:	2340      	movs	r3, #64	; 0x40
 8000c72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c76:	2340      	movs	r3, #64	; 0x40
 8000c78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c84:	2340      	movs	r3, #64	; 0x40
 8000c86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c8a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c8e:	2104      	movs	r1, #4
 8000c90:	4618      	mov	r0, r3
 8000c92:	f005 fc0b 	bl	80064ac <HAL_RCC_ClockConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000c9c:	f000 fc5e 	bl	800155c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ca8:	f107 0308 	add.w	r3, r7, #8
 8000cac:	2200      	movs	r2, #0
 8000cae:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f005 ff79 	bl	8006bb4 <HAL_RCCEx_PeriphCLKConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0x158>
  {
    Error_Handler();
 8000cc8:	f000 fc48 	bl	800155c <Error_Handler>
  }
}
 8000ccc:	bf00      	nop
 8000cce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	58024800 	.word	0x58024800
 8000cdc:	58000400 	.word	0x58000400

08000ce0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
 8000d00:	615a      	str	r2, [r3, #20]
 8000d02:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000d04:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <MX_ADC1_Init+0x100>)
 8000d06:	4a37      	ldr	r2, [pc, #220]	; (8000de4 <MX_ADC1_Init+0x104>)
 8000d08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d0a:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <MX_ADC1_Init+0x100>)
 8000d0c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d10:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d12:	4b33      	ldr	r3, [pc, #204]	; (8000de0 <MX_ADC1_Init+0x100>)
 8000d14:	2208      	movs	r2, #8
 8000d16:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d18:	4b31      	ldr	r3, [pc, #196]	; (8000de0 <MX_ADC1_Init+0x100>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d1e:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <MX_ADC1_Init+0x100>)
 8000d20:	2204      	movs	r2, #4
 8000d22:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d24:	4b2e      	ldr	r3, [pc, #184]	; (8000de0 <MX_ADC1_Init+0x100>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d2a:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <MX_ADC1_Init+0x100>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <MX_ADC1_Init+0x100>)
 8000d32:	2202      	movs	r2, #2
 8000d34:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d36:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <MX_ADC1_Init+0x100>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d3c:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <MX_ADC1_Init+0x100>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d42:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <MX_ADC1_Init+0x100>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000d48:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <MX_ADC1_Init+0x100>)
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d4e:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <MX_ADC1_Init+0x100>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d54:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <MX_ADC1_Init+0x100>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d5a:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <MX_ADC1_Init+0x100>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d62:	481f      	ldr	r0, [pc, #124]	; (8000de0 <MX_ADC1_Init+0x100>)
 8000d64:	f001 fad4 	bl	8002310 <HAL_ADC_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000d6e:	f000 fbf5 	bl	800155c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4818      	ldr	r0, [pc, #96]	; (8000de0 <MX_ADC1_Init+0x100>)
 8000d7e:	f002 f899 	bl	8002eb4 <HAL_ADCEx_MultiModeConfigChannel>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d88:	f000 fbe8 	bl	800155c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <MX_ADC1_Init+0x108>)
 8000d8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d90:	2306      	movs	r3, #6
 8000d92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d98:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d9c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d9e:	2304      	movs	r3, #4
 8000da0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da6:	463b      	mov	r3, r7
 8000da8:	4619      	mov	r1, r3
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <MX_ADC1_Init+0x100>)
 8000dac:	f001 fc50 	bl	8002650 <HAL_ADC_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000db6:	f000 fbd1 	bl	800155c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_ADC1_Init+0x10c>)
 8000dbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000dbe:	230c      	movs	r3, #12
 8000dc0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <MX_ADC1_Init+0x100>)
 8000dc8:	f001 fc42 	bl	8002650 <HAL_ADC_ConfigChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000dd2:	f000 fbc3 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2400036c 	.word	0x2400036c
 8000de4:	40022000 	.word	0x40022000
 8000de8:	2a000400 	.word	0x2a000400
 8000dec:	3ef08000 	.word	0x3ef08000

08000df0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	615a      	str	r2, [r3, #20]
 8000e06:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8000e08:	4b28      	ldr	r3, [pc, #160]	; (8000eac <MX_ADC3_Init+0xbc>)
 8000e0a:	4a29      	ldr	r2, [pc, #164]	; (8000eb0 <MX_ADC3_Init+0xc0>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e0e:	4b27      	ldr	r3, [pc, #156]	; (8000eac <MX_ADC3_Init+0xbc>)
 8000e10:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e14:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e16:	4b25      	ldr	r3, [pc, #148]	; (8000eac <MX_ADC3_Init+0xbc>)
 8000e18:	2208      	movs	r2, #8
 8000e1a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e1c:	4b23      	ldr	r3, [pc, #140]	; (8000eac <MX_ADC3_Init+0xbc>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e22:	4b22      	ldr	r3, [pc, #136]	; (8000eac <MX_ADC3_Init+0xbc>)
 8000e24:	2204      	movs	r2, #4
 8000e26:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e28:	4b20      	ldr	r3, [pc, #128]	; (8000eac <MX_ADC3_Init+0xbc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <MX_ADC3_Init+0xbc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <MX_ADC3_Init+0xbc>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <MX_ADC3_Init+0xbc>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <MX_ADC3_Init+0xbc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e46:	4b19      	ldr	r3, [pc, #100]	; (8000eac <MX_ADC3_Init+0xbc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <MX_ADC3_Init+0xbc>)
 8000e4e:	2203      	movs	r2, #3
 8000e50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <MX_ADC3_Init+0xbc>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_ADC3_Init+0xbc>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <MX_ADC3_Init+0xbc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e66:	4811      	ldr	r0, [pc, #68]	; (8000eac <MX_ADC3_Init+0xbc>)
 8000e68:	f001 fa52 	bl	8002310 <HAL_ADC_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000e72:	f000 fb73 	bl	800155c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_ADC3_Init+0xc4>)
 8000e78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e82:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e86:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_ADC3_Init+0xbc>)
 8000e96:	f001 fbdb 	bl	8002650 <HAL_ADC_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000ea0:	f000 fb5c 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	3720      	adds	r7, #32
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	240003d8 	.word	0x240003d8
 8000eb0:	58026000 	.word	0x58026000
 8000eb4:	04300002 	.word	0x04300002

08000eb8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <MX_TIM7_Init+0x68>)
 8000eca:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <MX_TIM7_Init+0x6c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_TIM7_Init+0x68>)
 8000ed0:	f640 125f 	movw	r2, #2399	; 0x95f
 8000ed4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <MX_TIM7_Init+0x68>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000edc:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <MX_TIM7_Init+0x68>)
 8000ede:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ee2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_TIM7_Init+0x68>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <MX_TIM7_Init+0x68>)
 8000eec:	f007 fd16 	bl	800891c <HAL_TIM_Base_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000ef6:	f000 fb31 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	4619      	mov	r1, r3
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <MX_TIM7_Init+0x68>)
 8000f08:	f008 f8ae 	bl	8009068 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000f12:	f000 fb23 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	24000760 	.word	0x24000760
 8000f24:	40001400 	.word	0x40001400

08000f28 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <MX_TIM12_Init+0x6c>)
 8000f3c:	4a16      	ldr	r2, [pc, #88]	; (8000f98 <MX_TIM12_Init+0x70>)
 8000f3e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2399;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_TIM12_Init+0x6c>)
 8000f42:	f640 125f 	movw	r2, #2399	; 0x95f
 8000f46:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_TIM12_Init+0x6c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_TIM12_Init+0x6c>)
 8000f50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f54:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_TIM12_Init+0x6c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <MX_TIM12_Init+0x6c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000f62:	480c      	ldr	r0, [pc, #48]	; (8000f94 <MX_TIM12_Init+0x6c>)
 8000f64:	f007 fcda 	bl	800891c <HAL_TIM_Base_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 8000f6e:	f000 faf5 	bl	800155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f76:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_TIM12_Init+0x6c>)
 8000f7e:	f007 fe43 	bl	8008c08 <HAL_TIM_ConfigClockSource>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8000f88:	f000 fae8 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	24000718 	.word	0x24000718
 8000f98:	40001800 	.word	0x40001800

08000f9c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa2:	f107 0310 	add.w	r3, r7, #16
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <MX_TIM15_Init+0x9c>)
 8000fbc:	4a1f      	ldr	r2, [pc, #124]	; (800103c <MX_TIM15_Init+0xa0>)
 8000fbe:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2399;
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <MX_TIM15_Init+0x9c>)
 8000fc2:	f640 125f 	movw	r2, #2399	; 0x95f
 8000fc6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_TIM15_Init+0x9c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <MX_TIM15_Init+0x9c>)
 8000fd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fd4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <MX_TIM15_Init+0x9c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_TIM15_Init+0x9c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <MX_TIM15_Init+0x9c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000fe8:	4813      	ldr	r0, [pc, #76]	; (8001038 <MX_TIM15_Init+0x9c>)
 8000fea:	f007 fc97 	bl	800891c <HAL_TIM_Base_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8000ff4:	f000 fab2 	bl	800155c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4619      	mov	r1, r3
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <MX_TIM15_Init+0x9c>)
 8001006:	f007 fdff 	bl	8008c08 <HAL_TIM_ConfigClockSource>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001010:	f000 faa4 	bl	800155c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_TIM15_Init+0x9c>)
 8001022:	f008 f821 	bl	8009068 <HAL_TIMEx_MasterConfigSynchronization>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 800102c:	f000 fa96 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	24000230 	.word	0x24000230
 800103c:	40014000 	.word	0x40014000

08001040 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <MX_UART7_Init+0x90>)
 8001046:	4a23      	ldr	r2, [pc, #140]	; (80010d4 <MX_UART7_Init+0x94>)
 8001048:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_UART7_Init+0x90>)
 800104c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001050:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_UART7_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_UART7_Init+0x90>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_UART7_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <MX_UART7_Init+0x90>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_UART7_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_UART7_Init+0x90>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_UART7_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_UART7_Init+0x90>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_UART7_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001088:	4811      	ldr	r0, [pc, #68]	; (80010d0 <MX_UART7_Init+0x90>)
 800108a:	f008 f893 	bl	80091b4 <HAL_UART_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001094:	f000 fa62 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001098:	2100      	movs	r1, #0
 800109a:	480d      	ldr	r0, [pc, #52]	; (80010d0 <MX_UART7_Init+0x90>)
 800109c:	f00b fb51 	bl	800c742 <HAL_UARTEx_SetTxFifoThreshold>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80010a6:	f000 fa59 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010aa:	2100      	movs	r1, #0
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <MX_UART7_Init+0x90>)
 80010ae:	f00b fb86 	bl	800c7be <HAL_UARTEx_SetRxFifoThreshold>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80010b8:	f000 fa50 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_UART7_Init+0x90>)
 80010be:	f00b fb07 	bl	800c6d0 <HAL_UARTEx_DisableFifoMode>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80010c8:	f000 fa48 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	24000070 	.word	0x24000070
 80010d4:	40007800 	.word	0x40007800

080010d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <MX_USART1_UART_Init+0x90>)
 80010de:	4a23      	ldr	r2, [pc, #140]	; (800116c <MX_USART1_UART_Init+0x94>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <MX_USART1_UART_Init+0x90>)
 80010e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <MX_USART1_UART_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_USART1_UART_Init+0x90>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <MX_USART1_UART_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_USART1_UART_Init+0x90>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_USART1_UART_Init+0x90>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_USART1_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001120:	4811      	ldr	r0, [pc, #68]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001122:	f008 f847 	bl	80091b4 <HAL_UART_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800112c:	f000 fa16 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001130:	2100      	movs	r1, #0
 8001132:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001134:	f00b fb05 	bl	800c742 <HAL_UARTEx_SetTxFifoThreshold>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800113e:	f000 fa0d 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001142:	2100      	movs	r1, #0
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001146:	f00b fb3a 	bl	800c7be <HAL_UARTEx_SetRxFifoThreshold>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001150:	f000 fa04 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_USART1_UART_Init+0x90>)
 8001156:	f00b fabb 	bl	800c6d0 <HAL_UARTEx_DisableFifoMode>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001160:	f000 f9fc 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	240004d8 	.word	0x240004d8
 800116c:	40011000 	.word	0x40011000

08001170 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001174:	4b22      	ldr	r3, [pc, #136]	; (8001200 <MX_USART3_UART_Init+0x90>)
 8001176:	4a23      	ldr	r2, [pc, #140]	; (8001204 <MX_USART3_UART_Init+0x94>)
 8001178:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 800117a:	4b21      	ldr	r3, [pc, #132]	; (8001200 <MX_USART3_UART_Init+0x90>)
 800117c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001180:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <MX_USART3_UART_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <MX_USART3_UART_Init+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <MX_USART3_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_USART3_UART_Init+0x90>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <MX_USART3_UART_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_USART3_UART_Init+0x90>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_USART3_UART_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_USART3_UART_Init+0x90>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <MX_USART3_UART_Init+0x90>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011b8:	4811      	ldr	r0, [pc, #68]	; (8001200 <MX_USART3_UART_Init+0x90>)
 80011ba:	f007 fffb 	bl	80091b4 <HAL_UART_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011c4:	f000 f9ca 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c8:	2100      	movs	r1, #0
 80011ca:	480d      	ldr	r0, [pc, #52]	; (8001200 <MX_USART3_UART_Init+0x90>)
 80011cc:	f00b fab9 	bl	800c742 <HAL_UARTEx_SetTxFifoThreshold>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011d6:	f000 f9c1 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011da:	2100      	movs	r1, #0
 80011dc:	4808      	ldr	r0, [pc, #32]	; (8001200 <MX_USART3_UART_Init+0x90>)
 80011de:	f00b faee 	bl	800c7be <HAL_UARTEx_SetRxFifoThreshold>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011e8:	f000 f9b8 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_USART3_UART_Init+0x90>)
 80011ee:	f00b fa6f 	bl	800c6d0 <HAL_UARTEx_DisableFifoMode>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011f8:	f000 f9b0 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2400019c 	.word	0x2400019c
 8001204:	40004800 	.word	0x40004800

08001208 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800120c:	4b22      	ldr	r3, [pc, #136]	; (8001298 <MX_USART6_UART_Init+0x90>)
 800120e:	4a23      	ldr	r2, [pc, #140]	; (800129c <MX_USART6_UART_Init+0x94>)
 8001210:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <MX_USART6_UART_Init+0x90>)
 8001214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001218:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <MX_USART6_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <MX_USART6_UART_Init+0x90>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_USART6_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_USART6_UART_Init+0x90>)
 800122e:	220c      	movs	r2, #12
 8001230:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_USART6_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001238:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_USART6_UART_Init+0x90>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <MX_USART6_UART_Init+0x90>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_USART6_UART_Init+0x90>)
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <MX_USART6_UART_Init+0x90>)
 800124c:	2200      	movs	r2, #0
 800124e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001250:	4811      	ldr	r0, [pc, #68]	; (8001298 <MX_USART6_UART_Init+0x90>)
 8001252:	f007 ffaf 	bl	80091b4 <HAL_UART_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800125c:	f000 f97e 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001260:	2100      	movs	r1, #0
 8001262:	480d      	ldr	r0, [pc, #52]	; (8001298 <MX_USART6_UART_Init+0x90>)
 8001264:	f00b fa6d 	bl	800c742 <HAL_UARTEx_SetTxFifoThreshold>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800126e:	f000 f975 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001272:	2100      	movs	r1, #0
 8001274:	4808      	ldr	r0, [pc, #32]	; (8001298 <MX_USART6_UART_Init+0x90>)
 8001276:	f00b faa2 	bl	800c7be <HAL_UARTEx_SetRxFifoThreshold>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001280:	f000 f96c 	bl	800155c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <MX_USART6_UART_Init+0x90>)
 8001286:	f00b fa23 	bl	800c6d0 <HAL_UARTEx_DisableFifoMode>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001290:	f000 f964 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	24000650 	.word	0x24000650
 800129c:	40011400 	.word	0x40011400

080012a0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012a6:	4b21      	ldr	r3, [pc, #132]	; (800132c <MX_DMA_Init+0x8c>)
 80012a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012ac:	4a1f      	ldr	r2, [pc, #124]	; (800132c <MX_DMA_Init+0x8c>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012b6:	4b1d      	ldr	r3, [pc, #116]	; (800132c <MX_DMA_Init+0x8c>)
 80012b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <MX_DMA_Init+0x8c>)
 80012c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012ca:	4a18      	ldr	r2, [pc, #96]	; (800132c <MX_DMA_Init+0x8c>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <MX_DMA_Init+0x8c>)
 80012d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	200b      	movs	r0, #11
 80012e8:	f001 ff99 	bl	800321e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012ec:	200b      	movs	r0, #11
 80012ee:	f001 ffb0 	bl	8003252 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	200c      	movs	r0, #12
 80012f8:	f001 ff91 	bl	800321e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012fc:	200c      	movs	r0, #12
 80012fe:	f001 ffa8 	bl	8003252 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	200d      	movs	r0, #13
 8001308:	f001 ff89 	bl	800321e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800130c:	200d      	movs	r0, #13
 800130e:	f001 ffa0 	bl	8003252 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	203a      	movs	r0, #58	; 0x3a
 8001318:	f001 ff81 	bl	800321e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800131c:	203a      	movs	r0, #58	; 0x3a
 800131e:	f001 ff98 	bl	8003252 <HAL_NVIC_EnableIRQ>

}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	58024400 	.word	0x58024400

08001330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	; 0x30
 8001334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001346:	4b7f      	ldr	r3, [pc, #508]	; (8001544 <MX_GPIO_Init+0x214>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134c:	4a7d      	ldr	r2, [pc, #500]	; (8001544 <MX_GPIO_Init+0x214>)
 800134e:	f043 0320 	orr.w	r3, r3, #32
 8001352:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001356:	4b7b      	ldr	r3, [pc, #492]	; (8001544 <MX_GPIO_Init+0x214>)
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135c:	f003 0320 	and.w	r3, r3, #32
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001364:	4b77      	ldr	r3, [pc, #476]	; (8001544 <MX_GPIO_Init+0x214>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136a:	4a76      	ldr	r2, [pc, #472]	; (8001544 <MX_GPIO_Init+0x214>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001374:	4b73      	ldr	r3, [pc, #460]	; (8001544 <MX_GPIO_Init+0x214>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	4b70      	ldr	r3, [pc, #448]	; (8001544 <MX_GPIO_Init+0x214>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001388:	4a6e      	ldr	r2, [pc, #440]	; (8001544 <MX_GPIO_Init+0x214>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001392:	4b6c      	ldr	r3, [pc, #432]	; (8001544 <MX_GPIO_Init+0x214>)
 8001394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a0:	4b68      	ldr	r3, [pc, #416]	; (8001544 <MX_GPIO_Init+0x214>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a6:	4a67      	ldr	r2, [pc, #412]	; (8001544 <MX_GPIO_Init+0x214>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b0:	4b64      	ldr	r3, [pc, #400]	; (8001544 <MX_GPIO_Init+0x214>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013be:	4b61      	ldr	r3, [pc, #388]	; (8001544 <MX_GPIO_Init+0x214>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c4:	4a5f      	ldr	r2, [pc, #380]	; (8001544 <MX_GPIO_Init+0x214>)
 80013c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ce:	4b5d      	ldr	r3, [pc, #372]	; (8001544 <MX_GPIO_Init+0x214>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013dc:	4b59      	ldr	r3, [pc, #356]	; (8001544 <MX_GPIO_Init+0x214>)
 80013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e2:	4a58      	ldr	r2, [pc, #352]	; (8001544 <MX_GPIO_Init+0x214>)
 80013e4:	f043 0310 	orr.w	r3, r3, #16
 80013e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ec:	4b55      	ldr	r3, [pc, #340]	; (8001544 <MX_GPIO_Init+0x214>)
 80013ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fa:	4b52      	ldr	r3, [pc, #328]	; (8001544 <MX_GPIO_Init+0x214>)
 80013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001400:	4a50      	ldr	r2, [pc, #320]	; (8001544 <MX_GPIO_Init+0x214>)
 8001402:	f043 0308 	orr.w	r3, r3, #8
 8001406:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800140a:	4b4e      	ldr	r3, [pc, #312]	; (8001544 <MX_GPIO_Init+0x214>)
 800140c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	f240 7104 	movw	r1, #1796	; 0x704
 800141e:	484a      	ldr	r0, [pc, #296]	; (8001548 <MX_GPIO_Init+0x218>)
 8001420:	f004 fbfe 	bl	8005c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 8001424:	2200      	movs	r2, #0
 8001426:	f242 0167 	movw	r1, #8295	; 0x2067
 800142a:	4848      	ldr	r0, [pc, #288]	; (800154c <MX_GPIO_Init+0x21c>)
 800142c:	f004 fbf8 	bl	8005c20 <HAL_GPIO_WritePin>
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|leftArmDir_Pin 
 8001430:	2200      	movs	r2, #0
 8001432:	f643 610d 	movw	r1, #15885	; 0x3e0d
 8001436:	4846      	ldr	r0, [pc, #280]	; (8001550 <MX_GPIO_Init+0x220>)
 8001438:	f004 fbf2 	bl	8005c20 <HAL_GPIO_WritePin>
                          |rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin|rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	2182      	movs	r1, #130	; 0x82
 8001440:	4844      	ldr	r0, [pc, #272]	; (8001554 <MX_GPIO_Init+0x224>)
 8001442:	f004 fbed 	bl	8005c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800144c:	4842      	ldr	r0, [pc, #264]	; (8001558 <MX_GPIO_Init+0x228>)
 800144e:	f004 fbe7 	bl	8005c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : cylinder_SetTee_Pin cylinder_RigtArmHoldBallTop_Pin cylinder_HoldBall_Pin cylinder_LeftArmHoldBall_Pin */
  GPIO_InitStruct.Pin = cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin;
 8001452:	f240 7304 	movw	r3, #1796	; 0x704
 8001456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	4619      	mov	r1, r3
 800146a:	4837      	ldr	r0, [pc, #220]	; (8001548 <MX_GPIO_Init+0x218>)
 800146c:	f004 fa28 	bl	80058c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 cylinder_RigtArmTrans_Pin cylinder_PassBall_Pin cylinder_LeftArmTrans_Pin 
                           cylinder_RigtArmHoldBallBot_Pin cylinder_LiftBall_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 8001470:	f242 0367 	movw	r3, #8295	; 0x2067
 8001474:	61fb      	str	r3, [r7, #28]
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	4830      	ldr	r0, [pc, #192]	; (800154c <MX_GPIO_Init+0x21c>)
 800148a:	f004 fa19 	bl	80058c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800148e:	230d      	movs	r3, #13
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001496:	2301      	movs	r3, #1
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	482a      	ldr	r0, [pc, #168]	; (8001550 <MX_GPIO_Init+0x220>)
 80014a6:	f004 fa0b 	bl	80058c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	4824      	ldr	r0, [pc, #144]	; (8001554 <MX_GPIO_Init+0x224>)
 80014c2:	f004 f9fd 	bl	80058c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : legDir_Pin */
  GPIO_InitStruct.Pin = legDir_Pin;
 80014c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legDir_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4619      	mov	r1, r3
 80014de:	481e      	ldr	r0, [pc, #120]	; (8001558 <MX_GPIO_Init+0x228>)
 80014e0:	f004 f9ee 	bl	80058c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 80014e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 80014f6:	f107 031c 	add.w	r3, r7, #28
 80014fa:	4619      	mov	r1, r3
 80014fc:	4816      	ldr	r0, [pc, #88]	; (8001558 <MX_GPIO_Init+0x228>)
 80014fe:	f004 f9df 	bl	80058c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8001502:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 8001506:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	480d      	ldr	r0, [pc, #52]	; (8001550 <MX_GPIO_Init+0x220>)
 800151c:	f004 f9d0 	bl	80058c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 8001520:	2302      	movs	r3, #2
 8001522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <MX_GPIO_Init+0x224>)
 8001538:	f004 f9c2 	bl	80058c0 <HAL_GPIO_Init>

}
 800153c:	bf00      	nop
 800153e:	3730      	adds	r7, #48	; 0x30
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	58024400 	.word	0x58024400
 8001548:	58020000 	.word	0x58020000
 800154c:	58020400 	.word	0x58020400
 8001550:	58021800 	.word	0x58021800
 8001554:	58021000 	.word	0x58021000
 8001558:	58020c00 	.word	0x58020c00

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_MspInit+0x30>)
 8001574:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001578:	4a08      	ldr	r2, [pc, #32]	; (800159c <HAL_MspInit+0x30>)
 800157a:	f043 0302 	orr.w	r3, r3, #2
 800157e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_MspInit+0x30>)
 8001584:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	58024400 	.word	0x58024400

080015a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08c      	sub	sp, #48	; 0x30
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a6a      	ldr	r2, [pc, #424]	; (8001768 <HAL_ADC_MspInit+0x1c8>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d175      	bne.n	80016ae <HAL_ADC_MspInit+0x10e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015c2:	4b6a      	ldr	r3, [pc, #424]	; (800176c <HAL_ADC_MspInit+0x1cc>)
 80015c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015c8:	4a68      	ldr	r2, [pc, #416]	; (800176c <HAL_ADC_MspInit+0x1cc>)
 80015ca:	f043 0320 	orr.w	r3, r3, #32
 80015ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015d2:	4b66      	ldr	r3, [pc, #408]	; (800176c <HAL_ADC_MspInit+0x1cc>)
 80015d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015d8:	f003 0320 	and.w	r3, r3, #32
 80015dc:	61bb      	str	r3, [r7, #24]
 80015de:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e0:	4b62      	ldr	r3, [pc, #392]	; (800176c <HAL_ADC_MspInit+0x1cc>)
 80015e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e6:	4a61      	ldr	r2, [pc, #388]	; (800176c <HAL_ADC_MspInit+0x1cc>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f0:	4b5e      	ldr	r3, [pc, #376]	; (800176c <HAL_ADC_MspInit+0x1cc>)
 80015f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	4b5b      	ldr	r3, [pc, #364]	; (800176c <HAL_ADC_MspInit+0x1cc>)
 8001600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001604:	4a59      	ldr	r2, [pc, #356]	; (800176c <HAL_ADC_MspInit+0x1cc>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800160e:	4b57      	ldr	r3, [pc, #348]	; (800176c <HAL_ADC_MspInit+0x1cc>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_INP10
    PA3     ------> ADC1_INP15 
    */
    GPIO_InitStruct.Pin = RollRigt_Pin;
 800161c:	2301      	movs	r3, #1
 800161e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001620:	2303      	movs	r3, #3
 8001622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RollRigt_GPIO_Port, &GPIO_InitStruct);
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	4850      	ldr	r0, [pc, #320]	; (8001770 <HAL_ADC_MspInit+0x1d0>)
 8001630:	f004 f946 	bl	80058c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RollLeft_Pin;
 8001634:	2308      	movs	r3, #8
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001638:	2303      	movs	r3, #3
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RollLeft_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4619      	mov	r1, r3
 8001646:	484b      	ldr	r0, [pc, #300]	; (8001774 <HAL_ADC_MspInit+0x1d4>)
 8001648:	f004 f93a 	bl	80058c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800164c:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <HAL_ADC_MspInit+0x1d8>)
 800164e:	4a4b      	ldr	r2, [pc, #300]	; (800177c <HAL_ADC_MspInit+0x1dc>)
 8001650:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001652:	4b49      	ldr	r3, [pc, #292]	; (8001778 <HAL_ADC_MspInit+0x1d8>)
 8001654:	2209      	movs	r2, #9
 8001656:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001658:	4b47      	ldr	r3, [pc, #284]	; (8001778 <HAL_ADC_MspInit+0x1d8>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800165e:	4b46      	ldr	r3, [pc, #280]	; (8001778 <HAL_ADC_MspInit+0x1d8>)
 8001660:	2200      	movs	r2, #0
 8001662:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001664:	4b44      	ldr	r3, [pc, #272]	; (8001778 <HAL_ADC_MspInit+0x1d8>)
 8001666:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800166a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800166c:	4b42      	ldr	r3, [pc, #264]	; (8001778 <HAL_ADC_MspInit+0x1d8>)
 800166e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001672:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001674:	4b40      	ldr	r3, [pc, #256]	; (8001778 <HAL_ADC_MspInit+0x1d8>)
 8001676:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800167a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800167c:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <HAL_ADC_MspInit+0x1d8>)
 800167e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001682:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001684:	4b3c      	ldr	r3, [pc, #240]	; (8001778 <HAL_ADC_MspInit+0x1d8>)
 8001686:	2200      	movs	r2, #0
 8001688:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800168a:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <HAL_ADC_MspInit+0x1d8>)
 800168c:	2200      	movs	r2, #0
 800168e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001690:	4839      	ldr	r0, [pc, #228]	; (8001778 <HAL_ADC_MspInit+0x1d8>)
 8001692:	f001 fdf9 	bl	8003288 <HAL_DMA_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 800169c:	f7ff ff5e 	bl	800155c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a35      	ldr	r2, [pc, #212]	; (8001778 <HAL_ADC_MspInit+0x1d8>)
 80016a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80016a6:	4a34      	ldr	r2, [pc, #208]	; (8001778 <HAL_ADC_MspInit+0x1d8>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80016ac:	e058      	b.n	8001760 <HAL_ADC_MspInit+0x1c0>
  else if(hadc->Instance==ADC3)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a33      	ldr	r2, [pc, #204]	; (8001780 <HAL_ADC_MspInit+0x1e0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d153      	bne.n	8001760 <HAL_ADC_MspInit+0x1c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80016b8:	4b2c      	ldr	r3, [pc, #176]	; (800176c <HAL_ADC_MspInit+0x1cc>)
 80016ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016be:	4a2b      	ldr	r2, [pc, #172]	; (800176c <HAL_ADC_MspInit+0x1cc>)
 80016c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c8:	4b28      	ldr	r3, [pc, #160]	; (800176c <HAL_ADC_MspInit+0x1cc>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	4b25      	ldr	r3, [pc, #148]	; (800176c <HAL_ADC_MspInit+0x1cc>)
 80016d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016dc:	4a23      	ldr	r2, [pc, #140]	; (800176c <HAL_ADC_MspInit+0x1cc>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e6:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_ADC_MspInit+0x1cc>)
 80016e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80016f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80016f8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80016fc:	f000 fc72 	bl	8001fe4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001700:	4b20      	ldr	r3, [pc, #128]	; (8001784 <HAL_ADC_MspInit+0x1e4>)
 8001702:	4a21      	ldr	r2, [pc, #132]	; (8001788 <HAL_ADC_MspInit+0x1e8>)
 8001704:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001706:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <HAL_ADC_MspInit+0x1e4>)
 8001708:	2273      	movs	r2, #115	; 0x73
 800170a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_ADC_MspInit+0x1e4>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <HAL_ADC_MspInit+0x1e4>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_ADC_MspInit+0x1e4>)
 800171a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800171e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <HAL_ADC_MspInit+0x1e4>)
 8001722:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001726:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <HAL_ADC_MspInit+0x1e4>)
 800172a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800172e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <HAL_ADC_MspInit+0x1e4>)
 8001732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001736:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_ADC_MspInit+0x1e4>)
 800173a:	2200      	movs	r2, #0
 800173c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_ADC_MspInit+0x1e4>)
 8001740:	2200      	movs	r2, #0
 8001742:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001744:	480f      	ldr	r0, [pc, #60]	; (8001784 <HAL_ADC_MspInit+0x1e4>)
 8001746:	f001 fd9f 	bl	8003288 <HAL_DMA_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_ADC_MspInit+0x1b4>
      Error_Handler();
 8001750:	f7ff ff04 	bl	800155c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <HAL_ADC_MspInit+0x1e4>)
 8001758:	64da      	str	r2, [r3, #76]	; 0x4c
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <HAL_ADC_MspInit+0x1e4>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001760:	bf00      	nop
 8001762:	3730      	adds	r7, #48	; 0x30
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40022000 	.word	0x40022000
 800176c:	58024400 	.word	0x58024400
 8001770:	58020800 	.word	0x58020800
 8001774:	58020000 	.word	0x58020000
 8001778:	2400057c 	.word	0x2400057c
 800177c:	40020010 	.word	0x40020010
 8001780:	58026000 	.word	0x58026000
 8001784:	240002b8 	.word	0x240002b8
 8001788:	40020028 	.word	0x40020028

0800178c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a2b      	ldr	r2, [pc, #172]	; (8001848 <HAL_TIM_Base_MspInit+0xbc>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d117      	bne.n	80017ce <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800179e:	4b2b      	ldr	r3, [pc, #172]	; (800184c <HAL_TIM_Base_MspInit+0xc0>)
 80017a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017a4:	4a29      	ldr	r2, [pc, #164]	; (800184c <HAL_TIM_Base_MspInit+0xc0>)
 80017a6:	f043 0320 	orr.w	r3, r3, #32
 80017aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017ae:	4b27      	ldr	r3, [pc, #156]	; (800184c <HAL_TIM_Base_MspInit+0xc0>)
 80017b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017b4:	f003 0320 	and.w	r3, r3, #32
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	2100      	movs	r1, #0
 80017c0:	2037      	movs	r0, #55	; 0x37
 80017c2:	f001 fd2c 	bl	800321e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80017c6:	2037      	movs	r0, #55	; 0x37
 80017c8:	f001 fd43 	bl	8003252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80017cc:	e038      	b.n	8001840 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM12)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a1f      	ldr	r2, [pc, #124]	; (8001850 <HAL_TIM_Base_MspInit+0xc4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d117      	bne.n	8001808 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80017d8:	4b1c      	ldr	r3, [pc, #112]	; (800184c <HAL_TIM_Base_MspInit+0xc0>)
 80017da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017de:	4a1b      	ldr	r2, [pc, #108]	; (800184c <HAL_TIM_Base_MspInit+0xc0>)
 80017e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_TIM_Base_MspInit+0xc0>)
 80017ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2100      	movs	r1, #0
 80017fa:	202b      	movs	r0, #43	; 0x2b
 80017fc:	f001 fd0f 	bl	800321e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001800:	202b      	movs	r0, #43	; 0x2b
 8001802:	f001 fd26 	bl	8003252 <HAL_NVIC_EnableIRQ>
}
 8001806:	e01b      	b.n	8001840 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM15)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a11      	ldr	r2, [pc, #68]	; (8001854 <HAL_TIM_Base_MspInit+0xc8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d116      	bne.n	8001840 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_TIM_Base_MspInit+0xc0>)
 8001814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001818:	4a0c      	ldr	r2, [pc, #48]	; (800184c <HAL_TIM_Base_MspInit+0xc0>)
 800181a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_TIM_Base_MspInit+0xc0>)
 8001824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2100      	movs	r1, #0
 8001834:	2074      	movs	r0, #116	; 0x74
 8001836:	f001 fcf2 	bl	800321e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800183a:	2074      	movs	r0, #116	; 0x74
 800183c:	f001 fd09 	bl	8003252 <HAL_NVIC_EnableIRQ>
}
 8001840:	bf00      	nop
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40001400 	.word	0x40001400
 800184c:	58024400 	.word	0x58024400
 8001850:	40001800 	.word	0x40001800
 8001854:	40014000 	.word	0x40014000

08001858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b090      	sub	sp, #64	; 0x40
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4aa3      	ldr	r2, [pc, #652]	; (8001b04 <HAL_UART_MspInit+0x2ac>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d136      	bne.n	80018e8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800187a:	4ba3      	ldr	r3, [pc, #652]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 800187c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001880:	4aa1      	ldr	r2, [pc, #644]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 8001882:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001886:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800188a:	4b9f      	ldr	r3, [pc, #636]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 800188c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001890:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
 8001896:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001898:	4b9b      	ldr	r3, [pc, #620]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 800189a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189e:	4a9a      	ldr	r2, [pc, #616]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 80018a0:	f043 0320 	orr.w	r3, r3, #32
 80018a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a8:	4b97      	ldr	r3, [pc, #604]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 80018aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ae:	f003 0320 	and.w	r3, r3, #32
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 80018b6:	23c0      	movs	r3, #192	; 0xc0
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80018c6:	2307      	movs	r3, #7
 80018c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ce:	4619      	mov	r1, r3
 80018d0:	488e      	ldr	r0, [pc, #568]	; (8001b0c <HAL_UART_MspInit+0x2b4>)
 80018d2:	f003 fff5 	bl	80058c0 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2104      	movs	r1, #4
 80018da:	2052      	movs	r0, #82	; 0x52
 80018dc:	f001 fc9f 	bl	800321e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80018e0:	2052      	movs	r0, #82	; 0x52
 80018e2:	f001 fcb6 	bl	8003252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80018e6:	e108      	b.n	8001afa <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a88      	ldr	r2, [pc, #544]	; (8001b10 <HAL_UART_MspInit+0x2b8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d165      	bne.n	80019be <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART1_CLK_ENABLE();
 80018f2:	4b85      	ldr	r3, [pc, #532]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 80018f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018f8:	4a83      	ldr	r2, [pc, #524]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 80018fa:	f043 0310 	orr.w	r3, r3, #16
 80018fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001902:	4b81      	ldr	r3, [pc, #516]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 8001904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	623b      	str	r3, [r7, #32]
 800190e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001910:	4b7d      	ldr	r3, [pc, #500]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 8001912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001916:	4a7c      	ldr	r2, [pc, #496]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001920:	4b79      	ldr	r3, [pc, #484]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 8001922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	61fb      	str	r3, [r7, #28]
 800192c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 800192e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001940:	2304      	movs	r3, #4
 8001942:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001948:	4619      	mov	r1, r3
 800194a:	4872      	ldr	r0, [pc, #456]	; (8001b14 <HAL_UART_MspInit+0x2bc>)
 800194c:	f003 ffb8 	bl	80058c0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream2;
 8001950:	4b71      	ldr	r3, [pc, #452]	; (8001b18 <HAL_UART_MspInit+0x2c0>)
 8001952:	4a72      	ldr	r2, [pc, #456]	; (8001b1c <HAL_UART_MspInit+0x2c4>)
 8001954:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001956:	4b70      	ldr	r3, [pc, #448]	; (8001b18 <HAL_UART_MspInit+0x2c0>)
 8001958:	2229      	movs	r2, #41	; 0x29
 800195a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800195c:	4b6e      	ldr	r3, [pc, #440]	; (8001b18 <HAL_UART_MspInit+0x2c0>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001962:	4b6d      	ldr	r3, [pc, #436]	; (8001b18 <HAL_UART_MspInit+0x2c0>)
 8001964:	2200      	movs	r2, #0
 8001966:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001968:	4b6b      	ldr	r3, [pc, #428]	; (8001b18 <HAL_UART_MspInit+0x2c0>)
 800196a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800196e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001970:	4b69      	ldr	r3, [pc, #420]	; (8001b18 <HAL_UART_MspInit+0x2c0>)
 8001972:	2200      	movs	r2, #0
 8001974:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001976:	4b68      	ldr	r3, [pc, #416]	; (8001b18 <HAL_UART_MspInit+0x2c0>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800197c:	4b66      	ldr	r3, [pc, #408]	; (8001b18 <HAL_UART_MspInit+0x2c0>)
 800197e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001982:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001984:	4b64      	ldr	r3, [pc, #400]	; (8001b18 <HAL_UART_MspInit+0x2c0>)
 8001986:	2200      	movs	r2, #0
 8001988:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800198a:	4b63      	ldr	r3, [pc, #396]	; (8001b18 <HAL_UART_MspInit+0x2c0>)
 800198c:	2200      	movs	r2, #0
 800198e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001990:	4861      	ldr	r0, [pc, #388]	; (8001b18 <HAL_UART_MspInit+0x2c0>)
 8001992:	f001 fc79 	bl	8003288 <HAL_DMA_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_UART_MspInit+0x148>
      Error_Handler();
 800199c:	f7ff fdde 	bl	800155c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a5d      	ldr	r2, [pc, #372]	; (8001b18 <HAL_UART_MspInit+0x2c0>)
 80019a4:	679a      	str	r2, [r3, #120]	; 0x78
 80019a6:	4a5c      	ldr	r2, [pc, #368]	; (8001b18 <HAL_UART_MspInit+0x2c0>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2101      	movs	r1, #1
 80019b0:	2025      	movs	r0, #37	; 0x25
 80019b2:	f001 fc34 	bl	800321e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019b6:	2025      	movs	r0, #37	; 0x25
 80019b8:	f001 fc4b 	bl	8003252 <HAL_NVIC_EnableIRQ>
}
 80019bc:	e09d      	b.n	8001afa <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART3)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a57      	ldr	r2, [pc, #348]	; (8001b20 <HAL_UART_MspInit+0x2c8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d15d      	bne.n	8001a84 <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019c8:	4b4f      	ldr	r3, [pc, #316]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 80019ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019ce:	4a4e      	ldr	r2, [pc, #312]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019d8:	4b4b      	ldr	r3, [pc, #300]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 80019da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019e2:	61bb      	str	r3, [r7, #24]
 80019e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e6:	4b48      	ldr	r3, [pc, #288]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 80019e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ec:	4a46      	ldr	r2, [pc, #280]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 80019ee:	f043 0302 	orr.w	r3, r3, #2
 80019f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f6:	4b44      	ldr	r3, [pc, #272]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 8001a04:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a16:	2307      	movs	r3, #7
 8001a18:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	483c      	ldr	r0, [pc, #240]	; (8001b14 <HAL_UART_MspInit+0x2bc>)
 8001a22:	f003 ff4d 	bl	80058c0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8001a26:	4b3f      	ldr	r3, [pc, #252]	; (8001b24 <HAL_UART_MspInit+0x2cc>)
 8001a28:	4a3f      	ldr	r2, [pc, #252]	; (8001b28 <HAL_UART_MspInit+0x2d0>)
 8001a2a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001a2c:	4b3d      	ldr	r3, [pc, #244]	; (8001b24 <HAL_UART_MspInit+0x2cc>)
 8001a2e:	222d      	movs	r2, #45	; 0x2d
 8001a30:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a32:	4b3c      	ldr	r3, [pc, #240]	; (8001b24 <HAL_UART_MspInit+0x2cc>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a38:	4b3a      	ldr	r3, [pc, #232]	; (8001b24 <HAL_UART_MspInit+0x2cc>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a3e:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <HAL_UART_MspInit+0x2cc>)
 8001a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a44:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a46:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <HAL_UART_MspInit+0x2cc>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a4c:	4b35      	ldr	r3, [pc, #212]	; (8001b24 <HAL_UART_MspInit+0x2cc>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001a52:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <HAL_UART_MspInit+0x2cc>)
 8001a54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a58:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a5a:	4b32      	ldr	r3, [pc, #200]	; (8001b24 <HAL_UART_MspInit+0x2cc>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a60:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <HAL_UART_MspInit+0x2cc>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001a66:	482f      	ldr	r0, [pc, #188]	; (8001b24 <HAL_UART_MspInit+0x2cc>)
 8001a68:	f001 fc0e 	bl	8003288 <HAL_DMA_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001a72:	f7ff fd73 	bl	800155c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a2a      	ldr	r2, [pc, #168]	; (8001b24 <HAL_UART_MspInit+0x2cc>)
 8001a7a:	679a      	str	r2, [r3, #120]	; 0x78
 8001a7c:	4a29      	ldr	r2, [pc, #164]	; (8001b24 <HAL_UART_MspInit+0x2cc>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a82:	e03a      	b.n	8001afa <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART6)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a28      	ldr	r2, [pc, #160]	; (8001b2c <HAL_UART_MspInit+0x2d4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d135      	bne.n	8001afa <HAL_UART_MspInit+0x2a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 8001a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a94:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 8001a96:	f043 0320 	orr.w	r3, r3, #32
 8001a9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 8001aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aa4:	f003 0320 	and.w	r3, r3, #32
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 8001aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab2:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 8001ab4:	f043 0304 	orr.w	r3, r3, #4
 8001ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_UART_MspInit+0x2b0>)
 8001abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 8001aca:	23c0      	movs	r3, #192	; 0xc0
 8001acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001ada:	2307      	movs	r3, #7
 8001adc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4812      	ldr	r0, [pc, #72]	; (8001b30 <HAL_UART_MspInit+0x2d8>)
 8001ae6:	f003 feeb 	bl	80058c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2102      	movs	r1, #2
 8001aee:	2047      	movs	r0, #71	; 0x47
 8001af0:	f001 fb95 	bl	800321e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001af4:	2047      	movs	r0, #71	; 0x47
 8001af6:	f001 fbac 	bl	8003252 <HAL_NVIC_EnableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3740      	adds	r7, #64	; 0x40
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40007800 	.word	0x40007800
 8001b08:	58024400 	.word	0x58024400
 8001b0c:	58021400 	.word	0x58021400
 8001b10:	40011000 	.word	0x40011000
 8001b14:	58020400 	.word	0x58020400
 8001b18:	24000440 	.word	0x24000440
 8001b1c:	40020040 	.word	0x40020040
 8001b20:	40004800 	.word	0x40004800
 8001b24:	24000114 	.word	0x24000114
 8001b28:	40020440 	.word	0x40020440
 8001b2c:	40011400 	.word	0x40011400
 8001b30:	58020800 	.word	0x58020800

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <MemManage_Handler+0x4>

08001b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <BusFault_Handler+0x4>

08001b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <UsageFault_Handler+0x4>

08001b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  compassGetDataPeriod++;
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <SysTick_Handler+0x2c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <SysTick_Handler+0x2c>)
 8001b92:	701a      	strb	r2, [r3, #0]
  if(compassGetDataPeriod > 5)
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <SysTick_Handler+0x2c>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	d904      	bls.n	8001ba6 <SysTick_Handler+0x22>
  {
	  compassGetDataPeriod = 0;
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <SysTick_Handler+0x2c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
	  compassRequest();
 8001ba2:	f7fe fd7f 	bl	80006a4 <compassRequest>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba6:	f000 f9cf 	bl	8001f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	240004c4 	.word	0x240004c4

08001bb4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <DMA1_Stream0_IRQHandler+0x10>)
 8001bba:	f002 fb6f 	bl	800429c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	2400057c 	.word	0x2400057c

08001bc8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <DMA1_Stream1_IRQHandler+0x10>)
 8001bce:	f002 fb65 	bl	800429c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	240002b8 	.word	0x240002b8

08001bdc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
  compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <DMA1_Stream2_IRQHandler+0x24>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	b21a      	sxth	r2, r3
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <DMA1_Stream2_IRQHandler+0x24>)
 8001bea:	785b      	ldrb	r3, [r3, #1]
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <DMA1_Stream2_IRQHandler+0x28>)
 8001bf4:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001bf6:	4804      	ldr	r0, [pc, #16]	; (8001c08 <DMA1_Stream2_IRQHandler+0x2c>)
 8001bf8:	f002 fb50 	bl	800429c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	24000290 	.word	0x24000290
 8001c04:	24000344 	.word	0x24000344
 8001c08:	24000440 	.word	0x24000440

08001c0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <USART1_IRQHandler+0x10>)
 8001c12:	f007 fd03 	bl	800961c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	240004d8 	.word	0x240004d8

08001c20 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001c26:	f006 fecf 	bl	80089c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	24000718 	.word	0x24000718

08001c34 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <TIM7_IRQHandler+0x10>)
 8001c3a:	f006 fec5 	bl	80089c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	24000760 	.word	0x24000760

08001c48 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 8001c4c:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <DMA2_Stream2_IRQHandler+0xa8>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d135      	bne.n	8001cc0 <DMA2_Stream2_IRQHandler+0x78>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 8001c54:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <DMA2_Stream2_IRQHandler+0xac>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	b2d1      	uxtb	r1, r2
 8001c5c:	4a25      	ldr	r2, [pc, #148]	; (8001cf4 <DMA2_Stream2_IRQHandler+0xac>)
 8001c5e:	7011      	strb	r1, [r2, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <DMA2_Stream2_IRQHandler+0xb0>)
 8001c64:	7819      	ldrb	r1, [r3, #0]
 8001c66:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <DMA2_Stream2_IRQHandler+0xb4>)
 8001c68:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 8001c6a:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <DMA2_Stream2_IRQHandler+0xac>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d926      	bls.n	8001cc0 <DMA2_Stream2_IRQHandler+0x78>
		{
			PS2DataIndex = 0;
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <DMA2_Stream2_IRQHandler+0xac>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <DMA2_Stream2_IRQHandler+0xa8>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <DMA2_Stream2_IRQHandler+0xb4>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	b21a      	sxth	r2, r3
 8001c86:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <DMA2_Stream2_IRQHandler+0xb4>)
 8001c88:	785b      	ldrb	r3, [r3, #1]
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <DMA2_Stream2_IRQHandler+0xb8>)
 8001c92:	801a      	strh	r2, [r3, #0]
			PS2JoyRigt = (PS2Data[2]<<8) | PS2Data[3];
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <DMA2_Stream2_IRQHandler+0xb4>)
 8001c96:	789b      	ldrb	r3, [r3, #2]
 8001c98:	021b      	lsls	r3, r3, #8
 8001c9a:	b21a      	sxth	r2, r3
 8001c9c:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <DMA2_Stream2_IRQHandler+0xb4>)
 8001c9e:	78db      	ldrb	r3, [r3, #3]
 8001ca0:	b21b      	sxth	r3, r3
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	b21a      	sxth	r2, r3
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <DMA2_Stream2_IRQHandler+0xbc>)
 8001ca8:	801a      	strh	r2, [r3, #0]
			PS2JoyLeft = (PS2Data[4]<<8) | PS2Data[5];
 8001caa:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <DMA2_Stream2_IRQHandler+0xb4>)
 8001cac:	791b      	ldrb	r3, [r3, #4]
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	b21a      	sxth	r2, r3
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <DMA2_Stream2_IRQHandler+0xb4>)
 8001cb4:	795b      	ldrb	r3, [r3, #5]
 8001cb6:	b21b      	sxth	r3, r3
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	b21a      	sxth	r2, r3
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <DMA2_Stream2_IRQHandler+0xc0>)
 8001cbe:	801a      	strh	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <DMA2_Stream2_IRQHandler+0xb0>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2baa      	cmp	r3, #170	; 0xaa
 8001cc6:	d106      	bne.n	8001cd6 <DMA2_Stream2_IRQHandler+0x8e>
		PS2CheckbyteCount++;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <DMA2_Stream2_IRQHandler+0xa8>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <DMA2_Stream2_IRQHandler+0xa8>)
 8001cd2:	701a      	strb	r2, [r3, #0]
 8001cd4:	e006      	b.n	8001ce4 <DMA2_Stream2_IRQHandler+0x9c>
	else
		if(PS2CheckbyteCount != 4)
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <DMA2_Stream2_IRQHandler+0xa8>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d002      	beq.n	8001ce4 <DMA2_Stream2_IRQHandler+0x9c>
			PS2CheckbyteCount = 0;
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <DMA2_Stream2_IRQHandler+0xa8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ce4:	4809      	ldr	r0, [pc, #36]	; (8001d0c <DMA2_Stream2_IRQHandler+0xc4>)
 8001ce6:	f002 fad9 	bl	800429c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	24000044 	.word	0x24000044
 8001cf4:	240003d0 	.word	0x240003d0
 8001cf8:	240006dc 	.word	0x240006dc
 8001cfc:	24000288 	.word	0x24000288
 8001d00:	24000574 	.word	0x24000574
 8001d04:	24000578 	.word	0x24000578
 8001d08:	240006f0 	.word	0x240006f0
 8001d0c:	24000114 	.word	0x24000114

08001d10 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <USART6_IRQHandler+0x10>)
 8001d16:	f007 fc81 	bl	800961c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	24000650 	.word	0x24000650

08001d24 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <UART7_IRQHandler+0x10>)
 8001d2a:	f007 fc77 	bl	800961c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	24000070 	.word	0x24000070

08001d38 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <TIM15_IRQHandler+0x10>)
 8001d3e:	f006 fe43 	bl	80089c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	24000230 	.word	0x24000230

08001d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d50:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <SystemInit+0xac>)
 8001d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d56:	4a28      	ldr	r2, [pc, #160]	; (8001df8 <SystemInit+0xac>)
 8001d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d60:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <SystemInit+0xb0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a25      	ldr	r2, [pc, #148]	; (8001dfc <SystemInit+0xb0>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d6c:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <SystemInit+0xb0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d72:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <SystemInit+0xb0>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4921      	ldr	r1, [pc, #132]	; (8001dfc <SystemInit+0xb0>)
 8001d78:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <SystemInit+0xb4>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <SystemInit+0xb0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d84:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <SystemInit+0xb0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <SystemInit+0xb0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <SystemInit+0xb0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <SystemInit+0xb0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <SystemInit+0xb0>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001da2:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <SystemInit+0xb0>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <SystemInit+0xb0>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <SystemInit+0xb0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <SystemInit+0xb0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <SystemInit+0xb0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <SystemInit+0xb0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0d      	ldr	r2, [pc, #52]	; (8001dfc <SystemInit+0xb0>)
 8001dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <SystemInit+0xb0>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <SystemInit+0xb8>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <SystemInit+0xbc>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dde:	d202      	bcs.n	8001de6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <SystemInit+0xc0>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <SystemInit+0xac>)
 8001de8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dec:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00
 8001dfc:	58024400 	.word	0x58024400
 8001e00:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e04:	5c001000 	.word	0x5c001000
 8001e08:	ffff0000 	.word	0xffff0000
 8001e0c:	51008108 	.word	0x51008108

08001e10 <Reset_Handler>:
 8001e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e48 <LoopFillZerobss+0x14>
 8001e14:	2100      	movs	r1, #0
 8001e16:	e003      	b.n	8001e20 <LoopCopyDataInit>

08001e18 <CopyDataInit>:
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <LoopFillZerobss+0x18>)
 8001e1a:	585b      	ldr	r3, [r3, r1]
 8001e1c:	5043      	str	r3, [r0, r1]
 8001e1e:	3104      	adds	r1, #4

08001e20 <LoopCopyDataInit>:
 8001e20:	480b      	ldr	r0, [pc, #44]	; (8001e50 <LoopFillZerobss+0x1c>)
 8001e22:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <LoopFillZerobss+0x20>)
 8001e24:	1842      	adds	r2, r0, r1
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d3f6      	bcc.n	8001e18 <CopyDataInit>
 8001e2a:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <LoopFillZerobss+0x24>)
 8001e2c:	e002      	b.n	8001e34 <LoopFillZerobss>

08001e2e <FillZerobss>:
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f842 3b04 	str.w	r3, [r2], #4

08001e34 <LoopFillZerobss>:
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <LoopFillZerobss+0x28>)
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d3f9      	bcc.n	8001e2e <FillZerobss>
 8001e3a:	f7ff ff87 	bl	8001d4c <SystemInit>
 8001e3e:	f00a fd65 	bl	800c90c <__libc_init_array>
 8001e42:	f7fe fe4b 	bl	8000adc <main>
 8001e46:	4770      	bx	lr
 8001e48:	24080000 	.word	0x24080000
 8001e4c:	0800c9b4 	.word	0x0800c9b4
 8001e50:	24000000 	.word	0x24000000
 8001e54:	24000028 	.word	0x24000028
 8001e58:	24000028 	.word	0x24000028
 8001e5c:	240007c4 	.word	0x240007c4

08001e60 <ADC3_IRQHandler>:
 8001e60:	e7fe      	b.n	8001e60 <ADC3_IRQHandler>
	...

08001e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e6a:	2003      	movs	r0, #3
 8001e6c:	f001 f9cc 	bl	8003208 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e70:	f004 fcd2 	bl	8006818 <HAL_RCC_GetSysClockFreq>
 8001e74:	4601      	mov	r1, r0
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_Init+0x68>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	4a13      	ldr	r2, [pc, #76]	; (8001ed0 <HAL_Init+0x6c>)
 8001e82:	5cd3      	ldrb	r3, [r2, r3]
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	fa21 f303 	lsr.w	r3, r1, r3
 8001e8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_Init+0x68>)
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <HAL_Init+0x6c>)
 8001e98:	5cd3      	ldrb	r3, [r2, r3]
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea4:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <HAL_Init+0x70>)
 8001ea6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ea8:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <HAL_Init+0x74>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f000 f814 	bl	8001edc <HAL_InitTick>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e002      	b.n	8001ec4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ebe:	f7ff fb55 	bl	800156c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	58024400 	.word	0x58024400
 8001ed0:	0800c98c 	.word	0x0800c98c
 8001ed4:	2400001c 	.word	0x2400001c
 8001ed8:	24000018 	.word	0x24000018

08001edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ee4:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_InitTick+0x60>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e021      	b.n	8001f34 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_InitTick+0x64>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <HAL_InitTick+0x60>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f001 f9b1 	bl	800326e <HAL_SYSTICK_Config>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00e      	b.n	8001f34 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b0f      	cmp	r3, #15
 8001f1a:	d80a      	bhi.n	8001f32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	f001 f97b 	bl	800321e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f28:	4a06      	ldr	r2, [pc, #24]	; (8001f44 <HAL_InitTick+0x68>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e000      	b.n	8001f34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	24000024 	.word	0x24000024
 8001f40:	24000018 	.word	0x24000018
 8001f44:	24000020 	.word	0x24000020

08001f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_IncTick+0x20>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_IncTick+0x24>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <HAL_IncTick+0x24>)
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	24000024 	.word	0x24000024
 8001f6c:	240007c0 	.word	0x240007c0

08001f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return uwTick;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_GetTick+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	240007c0 	.word	0x240007c0

08001f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f90:	f7ff ffee 	bl	8001f70 <HAL_GetTick>
 8001f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d005      	beq.n	8001fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_Delay+0x40>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fae:	bf00      	nop
 8001fb0:	f7ff ffde 	bl	8001f70 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d8f7      	bhi.n	8001fb0 <HAL_Delay+0x28>
  {
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	24000024 	.word	0x24000024

08001fcc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_GetREVID+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	0c1b      	lsrs	r3, r3, #16
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	5c001000 	.word	0x5c001000

08001fe4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	4904      	ldr	r1, [pc, #16]	; (800200c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	58000400 	.word	0x58000400

08002010 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	609a      	str	r2, [r3, #8]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	609a      	str	r2, [r3, #8]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002078:	b490      	push	{r4, r7}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	3360      	adds	r3, #96	; 0x60
 800208a:	461a      	mov	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	430b      	orrs	r3, r1
 80020a4:	4313      	orrs	r3, r2
 80020a6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc90      	pop	{r4, r7}
 80020b0:	4770      	bx	lr

080020b2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	431a      	orrs	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	611a      	str	r2, [r3, #16]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80020e4:	b490      	push	{r4, r7}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3360      	adds	r3, #96	; 0x60
 80020f4:	461a      	mov	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4313      	orrs	r3, r2
 8002108:	6023      	str	r3, [r4, #0]
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bc90      	pop	{r4, r7}
 8002112:	4770      	bx	lr

08002114 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002114:	b490      	push	{r4, r7}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3330      	adds	r3, #48	; 0x30
 8002124:	461a      	mov	r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	4413      	add	r3, r2
 8002132:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002134:	6822      	ldr	r2, [r4, #0]
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	211f      	movs	r1, #31
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	401a      	ands	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	0e9b      	lsrs	r3, r3, #26
 800214a:	f003 011f 	and.w	r1, r3, #31
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	fa01 f303 	lsl.w	r3, r1, r3
 8002158:	4313      	orrs	r3, r2
 800215a:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bc90      	pop	{r4, r7}
 8002164:	4770      	bx	lr

08002166 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002166:	b490      	push	{r4, r7}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	3314      	adds	r3, #20
 8002176:	461a      	mov	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	0e5b      	lsrs	r3, r3, #25
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	4413      	add	r3, r2
 8002184:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002186:	6822      	ldr	r2, [r4, #0]
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	0d1b      	lsrs	r3, r3, #20
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	2107      	movs	r1, #7
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	401a      	ands	r2, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	0d1b      	lsrs	r3, r3, #20
 800219e:	f003 031f 	and.w	r3, r3, #31
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	fa01 f303 	lsl.w	r3, r1, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc90      	pop	{r4, r7}
 80021b4:	4770      	bx	lr
	...

080021b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021d0:	43db      	mvns	r3, r3
 80021d2:	401a      	ands	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f003 0318 	and.w	r3, r3, #24
 80021da:	4908      	ldr	r1, [pc, #32]	; (80021fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80021dc:	40d9      	lsrs	r1, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	400b      	ands	r3, r1
 80021e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021e6:	431a      	orrs	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	000fffff 	.word	0x000fffff

08002200 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <LL_ADC_DisableDeepPowerDown+0x20>)
 800220e:	4013      	ands	r3, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6093      	str	r3, [r2, #8]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	5fffffc0 	.word	0x5fffffc0

08002224 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002238:	d101      	bne.n	800223e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <LL_ADC_EnableInternalRegulator+0x24>)
 800225a:	4013      	ands	r3, r2
 800225c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	6fffffc0 	.word	0x6fffffc0

08002274 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002288:	d101      	bne.n	800228e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <LL_ADC_IsEnabled+0x18>
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <LL_ADC_IsEnabled+0x1a>
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d101      	bne.n	80022da <LL_ADC_REG_IsConversionOngoing+0x18>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d101      	bne.n	8002300 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e18e      	b.n	8002648 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002334:	2b00      	cmp	r3, #0
 8002336:	d109      	bne.n	800234c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff f931 	bl	80015a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff67 	bl	8002224 <LL_ADC_IsDeepPowerDownEnabled>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d004      	beq.n	8002366 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff4d 	bl	8002200 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff82 	bl	8002274 <LL_ADC_IsInternalRegulatorEnabled>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d113      	bne.n	800239e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ff66 	bl	800224c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002380:	4b9a      	ldr	r3, [pc, #616]	; (80025ec <HAL_ADC_Init+0x2dc>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	099b      	lsrs	r3, r3, #6
 8002386:	4a9a      	ldr	r2, [pc, #616]	; (80025f0 <HAL_ADC_Init+0x2e0>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	099b      	lsrs	r3, r3, #6
 800238e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002390:	e002      	b.n	8002398 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	3b01      	subs	r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f9      	bne.n	8002392 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ff66 	bl	8002274 <LL_ADC_IsInternalRegulatorEnabled>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10d      	bne.n	80023ca <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b2:	f043 0210 	orr.w	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	f043 0201 	orr.w	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ff77 	bl	80022c2 <LL_ADC_REG_IsConversionOngoing>
 80023d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f040 8129 	bne.w	8002636 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f040 8125 	bne.w	8002636 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023f4:	f043 0202 	orr.w	r2, r3, #2
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ff4b 	bl	800229c <LL_ADC_IsEnabled>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d136      	bne.n	800247a <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a78      	ldr	r2, [pc, #480]	; (80025f4 <HAL_ADC_Init+0x2e4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d004      	beq.n	8002420 <HAL_ADC_Init+0x110>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a77      	ldr	r2, [pc, #476]	; (80025f8 <HAL_ADC_Init+0x2e8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d10e      	bne.n	800243e <HAL_ADC_Init+0x12e>
 8002420:	4874      	ldr	r0, [pc, #464]	; (80025f4 <HAL_ADC_Init+0x2e4>)
 8002422:	f7ff ff3b 	bl	800229c <LL_ADC_IsEnabled>
 8002426:	4604      	mov	r4, r0
 8002428:	4873      	ldr	r0, [pc, #460]	; (80025f8 <HAL_ADC_Init+0x2e8>)
 800242a:	f7ff ff37 	bl	800229c <LL_ADC_IsEnabled>
 800242e:	4603      	mov	r3, r0
 8002430:	4323      	orrs	r3, r4
 8002432:	2b00      	cmp	r3, #0
 8002434:	bf0c      	ite	eq
 8002436:	2301      	moveq	r3, #1
 8002438:	2300      	movne	r3, #0
 800243a:	b2db      	uxtb	r3, r3
 800243c:	e008      	b.n	8002450 <HAL_ADC_Init+0x140>
 800243e:	486f      	ldr	r0, [pc, #444]	; (80025fc <HAL_ADC_Init+0x2ec>)
 8002440:	f7ff ff2c 	bl	800229c <LL_ADC_IsEnabled>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	bf0c      	ite	eq
 800244a:	2301      	moveq	r3, #1
 800244c:	2300      	movne	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d012      	beq.n	800247a <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a66      	ldr	r2, [pc, #408]	; (80025f4 <HAL_ADC_Init+0x2e4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d004      	beq.n	8002468 <HAL_ADC_Init+0x158>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a65      	ldr	r2, [pc, #404]	; (80025f8 <HAL_ADC_Init+0x2e8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d101      	bne.n	800246c <HAL_ADC_Init+0x15c>
 8002468:	4a65      	ldr	r2, [pc, #404]	; (8002600 <HAL_ADC_Init+0x2f0>)
 800246a:	e000      	b.n	800246e <HAL_ADC_Init+0x15e>
 800246c:	4a65      	ldr	r2, [pc, #404]	; (8002604 <HAL_ADC_Init+0x2f4>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4619      	mov	r1, r3
 8002474:	4610      	mov	r0, r2
 8002476:	f7ff fdcb 	bl	8002010 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800247a:	f7ff fda7 	bl	8001fcc <HAL_GetREVID>
 800247e:	4602      	mov	r2, r0
 8002480:	f241 0303 	movw	r3, #4099	; 0x1003
 8002484:	429a      	cmp	r2, r3
 8002486:	d914      	bls.n	80024b2 <HAL_ADC_Init+0x1a2>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2b10      	cmp	r3, #16
 800248e:	d110      	bne.n	80024b2 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	7d5b      	ldrb	r3, [r3, #21]
 8002494:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800249a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80024a0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	7f1b      	ldrb	r3, [r3, #28]
 80024a6:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80024a8:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024aa:	f043 030c 	orr.w	r3, r3, #12
 80024ae:	61bb      	str	r3, [r7, #24]
 80024b0:	e00d      	b.n	80024ce <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	7d5b      	ldrb	r3, [r3, #21]
 80024b6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024bc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80024c2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	7f1b      	ldrb	r3, [r3, #28]
 80024c8:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	7f1b      	ldrb	r3, [r3, #28]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d106      	bne.n	80024e4 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	3b01      	subs	r3, #1
 80024dc:	045b      	lsls	r3, r3, #17
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d009      	beq.n	8002500 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	4b40      	ldr	r3, [pc, #256]	; (8002608 <HAL_ADC_Init+0x2f8>)
 8002508:	4013      	ands	r3, r2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	69b9      	ldr	r1, [r7, #24]
 8002510:	430b      	orrs	r3, r1
 8002512:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fed2 	bl	80022c2 <LL_ADC_REG_IsConversionOngoing>
 800251e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fedf 	bl	80022e8 <LL_ADC_INJ_IsConversionOngoing>
 800252a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d14a      	bne.n	80025c8 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d147      	bne.n	80025c8 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	7d1b      	ldrb	r3, [r3, #20]
 800253c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	4b2f      	ldr	r3, [pc, #188]	; (800260c <HAL_ADC_Init+0x2fc>)
 800254e:	4013      	ands	r3, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	69b9      	ldr	r1, [r7, #24]
 8002556:	430b      	orrs	r3, r1
 8002558:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002560:	2b01      	cmp	r3, #1
 8002562:	d11b      	bne.n	800259c <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	4b27      	ldr	r3, [pc, #156]	; (8002610 <HAL_ADC_Init+0x300>)
 8002572:	4013      	ands	r3, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002578:	3a01      	subs	r2, #1
 800257a:	0411      	lsls	r1, r2, #16
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002580:	4311      	orrs	r1, r2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002586:	4311      	orrs	r1, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800258c:	430a      	orrs	r2, r1
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 0201 	orr.w	r2, r2, #1
 8002598:	611a      	str	r2, [r3, #16]
 800259a:	e007      	b.n	80025ac <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691a      	ldr	r2, [r3, #16]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fb58 	bl	8002c78 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d121      	bne.n	8002614 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f023 010f 	bic.w	r1, r3, #15
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	1e5a      	subs	r2, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
 80025e8:	e01c      	b.n	8002624 <HAL_ADC_Init+0x314>
 80025ea:	bf00      	nop
 80025ec:	24000018 	.word	0x24000018
 80025f0:	053e2d63 	.word	0x053e2d63
 80025f4:	40022000 	.word	0x40022000
 80025f8:	40022100 	.word	0x40022100
 80025fc:	58026000 	.word	0x58026000
 8002600:	40022300 	.word	0x40022300
 8002604:	58026300 	.word	0x58026300
 8002608:	fff0c003 	.word	0xfff0c003
 800260c:	ffffbffc 	.word	0xffffbffc
 8002610:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 020f 	bic.w	r2, r2, #15
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	f023 0303 	bic.w	r3, r3, #3
 800262c:	f043 0201 	orr.w	r2, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	655a      	str	r2, [r3, #84]	; 0x54
 8002634:	e007      	b.n	8002646 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	f043 0210 	orr.w	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002646:	7ffb      	ldrb	r3, [r7, #31]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3724      	adds	r7, #36	; 0x24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd90      	pop	{r4, r7, pc}

08002650 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b099      	sub	sp, #100	; 0x64
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4a99      	ldr	r2, [pc, #612]	; (80028d0 <HAL_ADC_ConfigChannel+0x280>)
 800266a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_ADC_ConfigChannel+0x2a>
 8002676:	2302      	movs	r3, #2
 8002678:	e2e6      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x5f8>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fe1b 	bl	80022c2 <LL_ADC_REG_IsConversionOngoing>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 82cb 	bne.w	8002c2a <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800269c:	2b00      	cmp	r3, #0
 800269e:	d108      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x62>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	0e9b      	lsrs	r3, r3, #26
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	2201      	movs	r2, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	e00f      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x82>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	2201      	movs	r2, #1
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	69d1      	ldr	r1, [r2, #28]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	430b      	orrs	r3, r1
 80026de:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	f7ff fd11 	bl	8002114 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fde3 	bl	80022c2 <LL_ADC_REG_IsConversionOngoing>
 80026fc:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fdf0 	bl	80022e8 <LL_ADC_INJ_IsConversionOngoing>
 8002708:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800270a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800270c:	2b00      	cmp	r3, #0
 800270e:	f040 80b3 	bne.w	8002878 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002714:	2b00      	cmp	r3, #0
 8002716:	f040 80af 	bne.w	8002878 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6819      	ldr	r1, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	461a      	mov	r2, r3
 8002728:	f7ff fd1d 	bl	8002166 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800272c:	4b69      	ldr	r3, [pc, #420]	; (80028d4 <HAL_ADC_ConfigChannel+0x284>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002734:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002738:	d10b      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x102>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	089b      	lsrs	r3, r3, #2
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	e01d      	b.n	800278e <HAL_ADC_ConfigChannel+0x13e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10b      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x128>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	089b      	lsrs	r3, r3, #2
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	e00a      	b.n	800278e <HAL_ADC_ConfigChannel+0x13e>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	089b      	lsrs	r3, r3, #2
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	2b04      	cmp	r3, #4
 8002796:	d027      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6919      	ldr	r1, [r3, #16]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a6:	f7ff fc67 	bl	8002078 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	6919      	ldr	r1, [r3, #16]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	7e5b      	ldrb	r3, [r3, #25]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d102      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x170>
 80027ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80027be:	e000      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x172>
 80027c0:	2300      	movs	r3, #0
 80027c2:	461a      	mov	r2, r3
 80027c4:	f7ff fc8e 	bl	80020e4 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	6919      	ldr	r1, [r3, #16]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	7e1b      	ldrb	r3, [r3, #24]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d102      	bne.n	80027de <HAL_ADC_ConfigChannel+0x18e>
 80027d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027dc:	e000      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x190>
 80027de:	2300      	movs	r3, #0
 80027e0:	461a      	mov	r2, r3
 80027e2:	f7ff fc66 	bl	80020b2 <LL_ADC_SetDataRightShift>
 80027e6:	e047      	b.n	8002878 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	069b      	lsls	r3, r3, #26
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d107      	bne.n	800280c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800280a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002812:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	069b      	lsls	r3, r3, #26
 800281c:	429a      	cmp	r2, r3
 800281e:	d107      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800282e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002836:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	069b      	lsls	r3, r3, #26
 8002840:	429a      	cmp	r2, r3
 8002842:	d107      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002852:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800285a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	069b      	lsls	r3, r3, #26
 8002864:	429a      	cmp	r2, r3
 8002866:	d107      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002876:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fd0d 	bl	800229c <LL_ADC_IsEnabled>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	f040 81d9 	bne.w	8002c3c <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6819      	ldr	r1, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	461a      	mov	r2, r3
 8002898:	f7ff fc8e 	bl	80021b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4a0b      	ldr	r2, [pc, #44]	; (80028d0 <HAL_ADC_ConfigChannel+0x280>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	f040 8101 	bne.w	8002aaa <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10f      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x288>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	3301      	adds	r3, #1
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	2b09      	cmp	r3, #9
 80028c6:	bf94      	ite	ls
 80028c8:	2301      	movls	r3, #1
 80028ca:	2300      	movhi	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	e016      	b.n	80028fe <HAL_ADC_ConfigChannel+0x2ae>
 80028d0:	47ff0000 	.word	0x47ff0000
 80028d4:	5c001000 	.word	0x5c001000
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80028e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e8:	fab3 f383 	clz	r3, r3
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	2b09      	cmp	r3, #9
 80028f6:	bf94      	ite	ls
 80028f8:	2301      	movls	r3, #1
 80028fa:	2300      	movhi	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d064      	beq.n	80029cc <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800290a:	2b00      	cmp	r3, #0
 800290c:	d107      	bne.n	800291e <HAL_ADC_ConfigChannel+0x2ce>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	0e9b      	lsrs	r3, r3, #26
 8002914:	3301      	adds	r3, #1
 8002916:	069b      	lsls	r3, r3, #26
 8002918:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800291c:	e00e      	b.n	800293c <HAL_ADC_ConfigChannel+0x2ec>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800292c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	3301      	adds	r3, #1
 8002936:	069b      	lsls	r3, r3, #26
 8002938:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002944:	2b00      	cmp	r3, #0
 8002946:	d109      	bne.n	800295c <HAL_ADC_ConfigChannel+0x30c>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0e9b      	lsrs	r3, r3, #26
 800294e:	3301      	adds	r3, #1
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	2101      	movs	r1, #1
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	e010      	b.n	800297e <HAL_ADC_ConfigChannel+0x32e>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800296a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	3301      	adds	r3, #1
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	2101      	movs	r1, #1
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
 800297e:	ea42 0103 	orr.w	r1, r2, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10a      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x354>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	0e9b      	lsrs	r3, r3, #26
 8002994:	3301      	adds	r3, #1
 8002996:	f003 021f 	and.w	r2, r3, #31
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	051b      	lsls	r3, r3, #20
 80029a2:	e011      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x378>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	fab3 f383 	clz	r3, r3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	3301      	adds	r3, #1
 80029bc:	f003 021f 	and.w	r2, r3, #31
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c8:	430b      	orrs	r3, r1
 80029ca:	e069      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d107      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x398>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	0e9b      	lsrs	r3, r3, #26
 80029de:	3301      	adds	r3, #1
 80029e0:	069b      	lsls	r3, r3, #26
 80029e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029e6:	e00e      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x3b6>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	61fb      	str	r3, [r7, #28]
  return result;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	fab3 f383 	clz	r3, r3
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	3301      	adds	r3, #1
 8002a00:	069b      	lsls	r3, r3, #26
 8002a02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x3d6>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	0e9b      	lsrs	r3, r3, #26
 8002a18:	3301      	adds	r3, #1
 8002a1a:	f003 031f 	and.w	r3, r3, #31
 8002a1e:	2101      	movs	r1, #1
 8002a20:	fa01 f303 	lsl.w	r3, r1, r3
 8002a24:	e010      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x3f8>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	617b      	str	r3, [r7, #20]
  return result;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	2101      	movs	r1, #1
 8002a44:	fa01 f303 	lsl.w	r3, r1, r3
 8002a48:	ea42 0103 	orr.w	r1, r2, r3
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10d      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x424>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	0e9b      	lsrs	r3, r3, #26
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	3b1e      	subs	r3, #30
 8002a6c:	051b      	lsls	r3, r3, #20
 8002a6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a72:	e014      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x44e>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	60fb      	str	r3, [r7, #12]
  return result;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	f003 021f 	and.w	r2, r3, #31
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	3b1e      	subs	r3, #30
 8002a98:	051b      	lsls	r3, r3, #20
 8002a9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a9e:	430b      	orrs	r3, r1
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	6892      	ldr	r2, [r2, #8]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f7ff fb5e 	bl	8002166 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f280 80c4 	bge.w	8002c3c <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a65      	ldr	r2, [pc, #404]	; (8002c50 <HAL_ADC_ConfigChannel+0x600>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d004      	beq.n	8002ac8 <HAL_ADC_ConfigChannel+0x478>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a64      	ldr	r2, [pc, #400]	; (8002c54 <HAL_ADC_ConfigChannel+0x604>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d101      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x47c>
 8002ac8:	4b63      	ldr	r3, [pc, #396]	; (8002c58 <HAL_ADC_ConfigChannel+0x608>)
 8002aca:	e000      	b.n	8002ace <HAL_ADC_ConfigChannel+0x47e>
 8002acc:	4b63      	ldr	r3, [pc, #396]	; (8002c5c <HAL_ADC_ConfigChannel+0x60c>)
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fac4 	bl	800205c <LL_ADC_GetCommonPathInternalCh>
 8002ad4:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a5d      	ldr	r2, [pc, #372]	; (8002c50 <HAL_ADC_ConfigChannel+0x600>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d004      	beq.n	8002aea <HAL_ADC_ConfigChannel+0x49a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a5b      	ldr	r2, [pc, #364]	; (8002c54 <HAL_ADC_ConfigChannel+0x604>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10e      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x4b8>
 8002aea:	4859      	ldr	r0, [pc, #356]	; (8002c50 <HAL_ADC_ConfigChannel+0x600>)
 8002aec:	f7ff fbd6 	bl	800229c <LL_ADC_IsEnabled>
 8002af0:	4604      	mov	r4, r0
 8002af2:	4858      	ldr	r0, [pc, #352]	; (8002c54 <HAL_ADC_ConfigChannel+0x604>)
 8002af4:	f7ff fbd2 	bl	800229c <LL_ADC_IsEnabled>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4323      	orrs	r3, r4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	e008      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x4ca>
 8002b08:	4855      	ldr	r0, [pc, #340]	; (8002c60 <HAL_ADC_ConfigChannel+0x610>)
 8002b0a:	f7ff fbc7 	bl	800229c <LL_ADC_IsEnabled>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d07b      	beq.n	8002c16 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a50      	ldr	r2, [pc, #320]	; (8002c64 <HAL_ADC_ConfigChannel+0x614>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d12e      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x536>
 8002b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d129      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a4a      	ldr	r2, [pc, #296]	; (8002c60 <HAL_ADC_ConfigChannel+0x610>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d17f      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a43      	ldr	r2, [pc, #268]	; (8002c50 <HAL_ADC_ConfigChannel+0x600>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d004      	beq.n	8002b50 <HAL_ADC_ConfigChannel+0x500>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a42      	ldr	r2, [pc, #264]	; (8002c54 <HAL_ADC_ConfigChannel+0x604>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d101      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x504>
 8002b50:	4a41      	ldr	r2, [pc, #260]	; (8002c58 <HAL_ADC_ConfigChannel+0x608>)
 8002b52:	e000      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x506>
 8002b54:	4a41      	ldr	r2, [pc, #260]	; (8002c5c <HAL_ADC_ConfigChannel+0x60c>)
 8002b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4610      	mov	r0, r2
 8002b60:	f7ff fa69 	bl	8002036 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002b64:	4b40      	ldr	r3, [pc, #256]	; (8002c68 <HAL_ADC_ConfigChannel+0x618>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	099b      	lsrs	r3, r3, #6
 8002b6a:	4a40      	ldr	r2, [pc, #256]	; (8002c6c <HAL_ADC_ConfigChannel+0x61c>)
 8002b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b70:	099b      	lsrs	r3, r3, #6
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002b76:	e002      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1f9      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b84:	e05a      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a39      	ldr	r2, [pc, #228]	; (8002c70 <HAL_ADC_ConfigChannel+0x620>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d11e      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x57e>
 8002b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d119      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a30      	ldr	r2, [pc, #192]	; (8002c60 <HAL_ADC_ConfigChannel+0x610>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d14b      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a29      	ldr	r2, [pc, #164]	; (8002c50 <HAL_ADC_ConfigChannel+0x600>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d004      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x568>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a28      	ldr	r2, [pc, #160]	; (8002c54 <HAL_ADC_ConfigChannel+0x604>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d101      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x56c>
 8002bb8:	4a27      	ldr	r2, [pc, #156]	; (8002c58 <HAL_ADC_ConfigChannel+0x608>)
 8002bba:	e000      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x56e>
 8002bbc:	4a27      	ldr	r2, [pc, #156]	; (8002c5c <HAL_ADC_ConfigChannel+0x60c>)
 8002bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	f7ff fa35 	bl	8002036 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bcc:	e036      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a28      	ldr	r2, [pc, #160]	; (8002c74 <HAL_ADC_ConfigChannel+0x624>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d131      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x5ec>
 8002bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d12c      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <HAL_ADC_ConfigChannel+0x610>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d127      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a17      	ldr	r2, [pc, #92]	; (8002c50 <HAL_ADC_ConfigChannel+0x600>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d004      	beq.n	8002c00 <HAL_ADC_ConfigChannel+0x5b0>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a16      	ldr	r2, [pc, #88]	; (8002c54 <HAL_ADC_ConfigChannel+0x604>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x5b4>
 8002c00:	4a15      	ldr	r2, [pc, #84]	; (8002c58 <HAL_ADC_ConfigChannel+0x608>)
 8002c02:	e000      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x5b6>
 8002c04:	4a15      	ldr	r2, [pc, #84]	; (8002c5c <HAL_ADC_ConfigChannel+0x60c>)
 8002c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4610      	mov	r0, r2
 8002c10:	f7ff fa11 	bl	8002036 <LL_ADC_SetCommonPathInternalCh>
 8002c14:	e012      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1a:	f043 0220 	orr.w	r2, r3, #32
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002c28:	e008      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	f043 0220 	orr.w	r2, r3, #32
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3764      	adds	r7, #100	; 0x64
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd90      	pop	{r4, r7, pc}
 8002c50:	40022000 	.word	0x40022000
 8002c54:	40022100 	.word	0x40022100
 8002c58:	40022300 	.word	0x40022300
 8002c5c:	58026300 	.word	0x58026300
 8002c60:	58026000 	.word	0x58026000
 8002c64:	cb840000 	.word	0xcb840000
 8002c68:	24000018 	.word	0x24000018
 8002c6c:	053e2d63 	.word	0x053e2d63
 8002c70:	c7520000 	.word	0xc7520000
 8002c74:	cfb80000 	.word	0xcfb80000

08002c78 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a70      	ldr	r2, [pc, #448]	; (8002e48 <ADC_ConfigureBoostMode+0x1d0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d004      	beq.n	8002c94 <ADC_ConfigureBoostMode+0x1c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a6f      	ldr	r2, [pc, #444]	; (8002e4c <ADC_ConfigureBoostMode+0x1d4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d109      	bne.n	8002ca8 <ADC_ConfigureBoostMode+0x30>
 8002c94:	4b6e      	ldr	r3, [pc, #440]	; (8002e50 <ADC_ConfigureBoostMode+0x1d8>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	e008      	b.n	8002cba <ADC_ConfigureBoostMode+0x42>
 8002ca8:	4b6a      	ldr	r3, [pc, #424]	; (8002e54 <ADC_ConfigureBoostMode+0x1dc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bf14      	ite	ne
 8002cb4:	2301      	movne	r3, #1
 8002cb6:	2300      	moveq	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d01a      	beq.n	8002cf4 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002cbe:	f003 ff1d 	bl	8006afc <HAL_RCC_GetHCLKFreq>
 8002cc2:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ccc:	d006      	beq.n	8002cdc <ADC_ConfigureBoostMode+0x64>
 8002cce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cd2:	d00b      	beq.n	8002cec <ADC_ConfigureBoostMode+0x74>
 8002cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd8:	d000      	beq.n	8002cdc <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002cda:	e05d      	b.n	8002d98 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	0c1b      	lsrs	r3, r3, #16
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce8:	60fb      	str	r3, [r7, #12]
        break;
 8002cea:	e055      	b.n	8002d98 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	089b      	lsrs	r3, r3, #2
 8002cf0:	60fb      	str	r3, [r7, #12]
        break;
 8002cf2:	e051      	b.n	8002d98 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002cf4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002cf8:	f004 fe3a 	bl	8007970 <HAL_RCCEx_GetPeriphCLKFreq>
 8002cfc:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002d06:	d02a      	beq.n	8002d5e <ADC_ConfigureBoostMode+0xe6>
 8002d08:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002d0c:	d813      	bhi.n	8002d36 <ADC_ConfigureBoostMode+0xbe>
 8002d0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d12:	d024      	beq.n	8002d5e <ADC_ConfigureBoostMode+0xe6>
 8002d14:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d18:	d806      	bhi.n	8002d28 <ADC_ConfigureBoostMode+0xb0>
 8002d1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d1e:	d01e      	beq.n	8002d5e <ADC_ConfigureBoostMode+0xe6>
 8002d20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d24:	d01b      	beq.n	8002d5e <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002d26:	e037      	b.n	8002d98 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d2c:	d017      	beq.n	8002d5e <ADC_ConfigureBoostMode+0xe6>
 8002d2e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002d32:	d014      	beq.n	8002d5e <ADC_ConfigureBoostMode+0xe6>
        break;
 8002d34:	e030      	b.n	8002d98 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002d36:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002d3a:	d021      	beq.n	8002d80 <ADC_ConfigureBoostMode+0x108>
 8002d3c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002d40:	d806      	bhi.n	8002d50 <ADC_ConfigureBoostMode+0xd8>
 8002d42:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002d46:	d013      	beq.n	8002d70 <ADC_ConfigureBoostMode+0xf8>
 8002d48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d4c:	d014      	beq.n	8002d78 <ADC_ConfigureBoostMode+0x100>
        break;
 8002d4e:	e023      	b.n	8002d98 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002d50:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002d54:	d018      	beq.n	8002d88 <ADC_ConfigureBoostMode+0x110>
 8002d56:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002d5a:	d019      	beq.n	8002d90 <ADC_ConfigureBoostMode+0x118>
        break;
 8002d5c:	e01c      	b.n	8002d98 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	0c9b      	lsrs	r3, r3, #18
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	60fb      	str	r3, [r7, #12]
        break;
 8002d6e:	e013      	b.n	8002d98 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	60fb      	str	r3, [r7, #12]
      break;
 8002d76:	e00f      	b.n	8002d98 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	60fb      	str	r3, [r7, #12]
        break;
 8002d7e:	e00b      	b.n	8002d98 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	099b      	lsrs	r3, r3, #6
 8002d84:	60fb      	str	r3, [r7, #12]
        break;
 8002d86:	e007      	b.n	8002d98 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	09db      	lsrs	r3, r3, #7
 8002d8c:	60fb      	str	r3, [r7, #12]
        break;
 8002d8e:	e003      	b.n	8002d98 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	0a1b      	lsrs	r3, r3, #8
 8002d94:	60fb      	str	r3, [r7, #12]
        break;
 8002d96:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002d98:	f7ff f918 	bl	8001fcc <HAL_GetREVID>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d815      	bhi.n	8002dd2 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4a2b      	ldr	r2, [pc, #172]	; (8002e58 <ADC_ConfigureBoostMode+0x1e0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d908      	bls.n	8002dc0 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dbc:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002dbe:	e03e      	b.n	8002e3e <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dce:	609a      	str	r2, [r3, #8]
}
 8002dd0:	e035      	b.n	8002e3e <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	085b      	lsrs	r3, r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4a20      	ldr	r2, [pc, #128]	; (8002e5c <ADC_ConfigureBoostMode+0x1e4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d808      	bhi.n	8002df2 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002dee:	609a      	str	r2, [r3, #8]
}
 8002df0:	e025      	b.n	8002e3e <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4a1a      	ldr	r2, [pc, #104]	; (8002e60 <ADC_ConfigureBoostMode+0x1e8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d80a      	bhi.n	8002e10 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e0c:	609a      	str	r2, [r3, #8]
}
 8002e0e:	e016      	b.n	8002e3e <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <ADC_ConfigureBoostMode+0x1ec>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d80a      	bhi.n	8002e2e <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2a:	609a      	str	r2, [r3, #8]
}
 8002e2c:	e007      	b.n	8002e3e <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002e3c:	609a      	str	r2, [r3, #8]
}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40022000 	.word	0x40022000
 8002e4c:	40022100 	.word	0x40022100
 8002e50:	40022300 	.word	0x40022300
 8002e54:	58026300 	.word	0x58026300
 8002e58:	01312d00 	.word	0x01312d00
 8002e5c:	005f5e10 	.word	0x005f5e10
 8002e60:	00bebc20 	.word	0x00bebc20
 8002e64:	017d7840 	.word	0x017d7840

08002e68 <LL_ADC_IsEnabled>:
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <LL_ADC_IsEnabled+0x18>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <LL_ADC_IsEnabled+0x1a>
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <LL_ADC_REG_IsConversionOngoing>:
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d101      	bne.n	8002ea6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b09f      	sub	sp, #124	; 0x7c
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e0ba      	b.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a5c      	ldr	r2, [pc, #368]	; (8003050 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d102      	bne.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002ee4:	4b5b      	ldr	r3, [pc, #364]	; (8003054 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	e001      	b.n	8002eee <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002eea:	2300      	movs	r3, #0
 8002eec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10b      	bne.n	8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e09d      	b.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff ffbd 	bl	8002e8e <LL_ADC_REG_IsConversionOngoing>
 8002f14:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff ffb7 	bl	8002e8e <LL_ADC_REG_IsConversionOngoing>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d17f      	bne.n	8003026 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d17c      	bne.n	8003026 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a47      	ldr	r2, [pc, #284]	; (8003050 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d004      	beq.n	8002f40 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a46      	ldr	r2, [pc, #280]	; (8003054 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8002f40:	4b45      	ldr	r3, [pc, #276]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f42:	e000      	b.n	8002f46 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002f44:	4b45      	ldr	r3, [pc, #276]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f46:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d039      	beq.n	8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f60:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a3a      	ldr	r2, [pc, #232]	; (8003050 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d004      	beq.n	8002f76 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a38      	ldr	r2, [pc, #224]	; (8003054 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d10e      	bne.n	8002f94 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002f76:	4836      	ldr	r0, [pc, #216]	; (8003050 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002f78:	f7ff ff76 	bl	8002e68 <LL_ADC_IsEnabled>
 8002f7c:	4604      	mov	r4, r0
 8002f7e:	4835      	ldr	r0, [pc, #212]	; (8003054 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002f80:	f7ff ff72 	bl	8002e68 <LL_ADC_IsEnabled>
 8002f84:	4603      	mov	r3, r0
 8002f86:	4323      	orrs	r3, r4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	e008      	b.n	8002fa6 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002f94:	4832      	ldr	r0, [pc, #200]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002f96:	f7ff ff67 	bl	8002e68 <LL_ADC_IsEnabled>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d047      	beq.n	800303a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	4b2d      	ldr	r3, [pc, #180]	; (8003064 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	6811      	ldr	r1, [r2, #0]
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	6892      	ldr	r2, [r2, #8]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fc2:	e03a      	b.n	800303a <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a1e      	ldr	r2, [pc, #120]	; (8003050 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d004      	beq.n	8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1d      	ldr	r2, [pc, #116]	; (8003054 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d10e      	bne.n	8003002 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8002fe4:	481a      	ldr	r0, [pc, #104]	; (8003050 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002fe6:	f7ff ff3f 	bl	8002e68 <LL_ADC_IsEnabled>
 8002fea:	4604      	mov	r4, r0
 8002fec:	4819      	ldr	r0, [pc, #100]	; (8003054 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002fee:	f7ff ff3b 	bl	8002e68 <LL_ADC_IsEnabled>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4323      	orrs	r3, r4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf0c      	ite	eq
 8002ffa:	2301      	moveq	r3, #1
 8002ffc:	2300      	movne	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	e008      	b.n	8003014 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8003002:	4817      	ldr	r0, [pc, #92]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003004:	f7ff ff30 	bl	8002e68 <LL_ADC_IsEnabled>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf0c      	ite	eq
 800300e:	2301      	moveq	r3, #1
 8003010:	2300      	movne	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	4b11      	ldr	r3, [pc, #68]	; (8003064 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800301e:	4013      	ands	r3, r2
 8003020:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003022:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003024:	e009      	b.n	800303a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302a:	f043 0220 	orr.w	r2, r3, #32
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003038:	e000      	b.n	800303c <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800303a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003044:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003048:	4618      	mov	r0, r3
 800304a:	377c      	adds	r7, #124	; 0x7c
 800304c:	46bd      	mov	sp, r7
 800304e:	bd90      	pop	{r4, r7, pc}
 8003050:	40022000 	.word	0x40022000
 8003054:	40022100 	.word	0x40022100
 8003058:	40022300 	.word	0x40022300
 800305c:	58026300 	.word	0x58026300
 8003060:	58026000 	.word	0x58026000
 8003064:	fffff0e0 	.word	0xfffff0e0

08003068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <__NVIC_SetPriorityGrouping+0x40>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003084:	4013      	ands	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <__NVIC_SetPriorityGrouping+0x44>)
 8003092:	4313      	orrs	r3, r2
 8003094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003096:	4a04      	ldr	r2, [pc, #16]	; (80030a8 <__NVIC_SetPriorityGrouping+0x40>)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	60d3      	str	r3, [r2, #12]
}
 800309c:	bf00      	nop
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	e000ed00 	.word	0xe000ed00
 80030ac:	05fa0000 	.word	0x05fa0000

080030b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030b4:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <__NVIC_GetPriorityGrouping+0x18>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	0a1b      	lsrs	r3, r3, #8
 80030ba:	f003 0307 	and.w	r3, r3, #7
}
 80030be:	4618      	mov	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	e000ed00 	.word	0xe000ed00

080030cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	db0b      	blt.n	80030f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	f003 021f 	and.w	r2, r3, #31
 80030e4:	4907      	ldr	r1, [pc, #28]	; (8003104 <__NVIC_EnableIRQ+0x38>)
 80030e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	2001      	movs	r0, #1
 80030ee:	fa00 f202 	lsl.w	r2, r0, r2
 80030f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000e100 	.word	0xe000e100

08003108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	6039      	str	r1, [r7, #0]
 8003112:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003118:	2b00      	cmp	r3, #0
 800311a:	db0a      	blt.n	8003132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	b2da      	uxtb	r2, r3
 8003120:	490c      	ldr	r1, [pc, #48]	; (8003154 <__NVIC_SetPriority+0x4c>)
 8003122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003126:	0112      	lsls	r2, r2, #4
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	440b      	add	r3, r1
 800312c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003130:	e00a      	b.n	8003148 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	4908      	ldr	r1, [pc, #32]	; (8003158 <__NVIC_SetPriority+0x50>)
 8003138:	88fb      	ldrh	r3, [r7, #6]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	3b04      	subs	r3, #4
 8003140:	0112      	lsls	r2, r2, #4
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	440b      	add	r3, r1
 8003146:	761a      	strb	r2, [r3, #24]
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000e100 	.word	0xe000e100
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800315c:	b480      	push	{r7}
 800315e:	b089      	sub	sp, #36	; 0x24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f1c3 0307 	rsb	r3, r3, #7
 8003176:	2b04      	cmp	r3, #4
 8003178:	bf28      	it	cs
 800317a:	2304      	movcs	r3, #4
 800317c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3304      	adds	r3, #4
 8003182:	2b06      	cmp	r3, #6
 8003184:	d902      	bls.n	800318c <NVIC_EncodePriority+0x30>
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3b03      	subs	r3, #3
 800318a:	e000      	b.n	800318e <NVIC_EncodePriority+0x32>
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003190:	f04f 32ff 	mov.w	r2, #4294967295
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43da      	mvns	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	401a      	ands	r2, r3
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031a4:	f04f 31ff 	mov.w	r1, #4294967295
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	43d9      	mvns	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b4:	4313      	orrs	r3, r2
         );
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3724      	adds	r7, #36	; 0x24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031d4:	d301      	bcc.n	80031da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031d6:	2301      	movs	r3, #1
 80031d8:	e00f      	b.n	80031fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031da:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <SysTick_Config+0x40>)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3b01      	subs	r3, #1
 80031e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031e2:	210f      	movs	r1, #15
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295
 80031e8:	f7ff ff8e 	bl	8003108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <SysTick_Config+0x40>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031f2:	4b04      	ldr	r3, [pc, #16]	; (8003204 <SysTick_Config+0x40>)
 80031f4:	2207      	movs	r2, #7
 80031f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	e000e010 	.word	0xe000e010

08003208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff ff29 	bl	8003068 <__NVIC_SetPriorityGrouping>
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b086      	sub	sp, #24
 8003222:	af00      	add	r7, sp, #0
 8003224:	4603      	mov	r3, r0
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800322c:	f7ff ff40 	bl	80030b0 <__NVIC_GetPriorityGrouping>
 8003230:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	68b9      	ldr	r1, [r7, #8]
 8003236:	6978      	ldr	r0, [r7, #20]
 8003238:	f7ff ff90 	bl	800315c <NVIC_EncodePriority>
 800323c:	4602      	mov	r2, r0
 800323e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff ff5f 	bl	8003108 <__NVIC_SetPriority>
}
 800324a:	bf00      	nop
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	4603      	mov	r3, r0
 800325a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800325c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ff33 	bl	80030cc <__NVIC_EnableIRQ>
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff ffa4 	bl	80031c4 <SysTick_Config>
 800327c:	4603      	mov	r3, r0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003290:	f7fe fe6e 	bl	8001f70 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e316      	b.n	80038ce <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a66      	ldr	r2, [pc, #408]	; (8003440 <HAL_DMA_Init+0x1b8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d04a      	beq.n	8003340 <HAL_DMA_Init+0xb8>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a65      	ldr	r2, [pc, #404]	; (8003444 <HAL_DMA_Init+0x1bc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d045      	beq.n	8003340 <HAL_DMA_Init+0xb8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a63      	ldr	r2, [pc, #396]	; (8003448 <HAL_DMA_Init+0x1c0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d040      	beq.n	8003340 <HAL_DMA_Init+0xb8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a62      	ldr	r2, [pc, #392]	; (800344c <HAL_DMA_Init+0x1c4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d03b      	beq.n	8003340 <HAL_DMA_Init+0xb8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a60      	ldr	r2, [pc, #384]	; (8003450 <HAL_DMA_Init+0x1c8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d036      	beq.n	8003340 <HAL_DMA_Init+0xb8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a5f      	ldr	r2, [pc, #380]	; (8003454 <HAL_DMA_Init+0x1cc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d031      	beq.n	8003340 <HAL_DMA_Init+0xb8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a5d      	ldr	r2, [pc, #372]	; (8003458 <HAL_DMA_Init+0x1d0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d02c      	beq.n	8003340 <HAL_DMA_Init+0xb8>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a5c      	ldr	r2, [pc, #368]	; (800345c <HAL_DMA_Init+0x1d4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d027      	beq.n	8003340 <HAL_DMA_Init+0xb8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a5a      	ldr	r2, [pc, #360]	; (8003460 <HAL_DMA_Init+0x1d8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d022      	beq.n	8003340 <HAL_DMA_Init+0xb8>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a59      	ldr	r2, [pc, #356]	; (8003464 <HAL_DMA_Init+0x1dc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d01d      	beq.n	8003340 <HAL_DMA_Init+0xb8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a57      	ldr	r2, [pc, #348]	; (8003468 <HAL_DMA_Init+0x1e0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d018      	beq.n	8003340 <HAL_DMA_Init+0xb8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a56      	ldr	r2, [pc, #344]	; (800346c <HAL_DMA_Init+0x1e4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d013      	beq.n	8003340 <HAL_DMA_Init+0xb8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a54      	ldr	r2, [pc, #336]	; (8003470 <HAL_DMA_Init+0x1e8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00e      	beq.n	8003340 <HAL_DMA_Init+0xb8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a53      	ldr	r2, [pc, #332]	; (8003474 <HAL_DMA_Init+0x1ec>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d009      	beq.n	8003340 <HAL_DMA_Init+0xb8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a51      	ldr	r2, [pc, #324]	; (8003478 <HAL_DMA_Init+0x1f0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d004      	beq.n	8003340 <HAL_DMA_Init+0xb8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a50      	ldr	r2, [pc, #320]	; (800347c <HAL_DMA_Init+0x1f4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d101      	bne.n	8003344 <HAL_DMA_Init+0xbc>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <HAL_DMA_Init+0xbe>
 8003344:	2300      	movs	r3, #0
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 813b 	beq.w	80035c2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a37      	ldr	r2, [pc, #220]	; (8003440 <HAL_DMA_Init+0x1b8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d04a      	beq.n	80033fc <HAL_DMA_Init+0x174>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a36      	ldr	r2, [pc, #216]	; (8003444 <HAL_DMA_Init+0x1bc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d045      	beq.n	80033fc <HAL_DMA_Init+0x174>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a34      	ldr	r2, [pc, #208]	; (8003448 <HAL_DMA_Init+0x1c0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d040      	beq.n	80033fc <HAL_DMA_Init+0x174>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a33      	ldr	r2, [pc, #204]	; (800344c <HAL_DMA_Init+0x1c4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d03b      	beq.n	80033fc <HAL_DMA_Init+0x174>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a31      	ldr	r2, [pc, #196]	; (8003450 <HAL_DMA_Init+0x1c8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d036      	beq.n	80033fc <HAL_DMA_Init+0x174>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a30      	ldr	r2, [pc, #192]	; (8003454 <HAL_DMA_Init+0x1cc>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d031      	beq.n	80033fc <HAL_DMA_Init+0x174>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a2e      	ldr	r2, [pc, #184]	; (8003458 <HAL_DMA_Init+0x1d0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d02c      	beq.n	80033fc <HAL_DMA_Init+0x174>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a2d      	ldr	r2, [pc, #180]	; (800345c <HAL_DMA_Init+0x1d4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d027      	beq.n	80033fc <HAL_DMA_Init+0x174>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a2b      	ldr	r2, [pc, #172]	; (8003460 <HAL_DMA_Init+0x1d8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d022      	beq.n	80033fc <HAL_DMA_Init+0x174>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a2a      	ldr	r2, [pc, #168]	; (8003464 <HAL_DMA_Init+0x1dc>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d01d      	beq.n	80033fc <HAL_DMA_Init+0x174>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a28      	ldr	r2, [pc, #160]	; (8003468 <HAL_DMA_Init+0x1e0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d018      	beq.n	80033fc <HAL_DMA_Init+0x174>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a27      	ldr	r2, [pc, #156]	; (800346c <HAL_DMA_Init+0x1e4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d013      	beq.n	80033fc <HAL_DMA_Init+0x174>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a25      	ldr	r2, [pc, #148]	; (8003470 <HAL_DMA_Init+0x1e8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00e      	beq.n	80033fc <HAL_DMA_Init+0x174>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a24      	ldr	r2, [pc, #144]	; (8003474 <HAL_DMA_Init+0x1ec>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d009      	beq.n	80033fc <HAL_DMA_Init+0x174>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a22      	ldr	r2, [pc, #136]	; (8003478 <HAL_DMA_Init+0x1f0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d004      	beq.n	80033fc <HAL_DMA_Init+0x174>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a21      	ldr	r2, [pc, #132]	; (800347c <HAL_DMA_Init+0x1f4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d108      	bne.n	800340e <HAL_DMA_Init+0x186>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0201 	bic.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	e007      	b.n	800341e <HAL_DMA_Init+0x196>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0201 	bic.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800341e:	e02f      	b.n	8003480 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003420:	f7fe fda6 	bl	8001f70 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b05      	cmp	r3, #5
 800342c:	d928      	bls.n	8003480 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2203      	movs	r2, #3
 8003438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e246      	b.n	80038ce <HAL_DMA_Init+0x646>
 8003440:	40020010 	.word	0x40020010
 8003444:	40020028 	.word	0x40020028
 8003448:	40020040 	.word	0x40020040
 800344c:	40020058 	.word	0x40020058
 8003450:	40020070 	.word	0x40020070
 8003454:	40020088 	.word	0x40020088
 8003458:	400200a0 	.word	0x400200a0
 800345c:	400200b8 	.word	0x400200b8
 8003460:	40020410 	.word	0x40020410
 8003464:	40020428 	.word	0x40020428
 8003468:	40020440 	.word	0x40020440
 800346c:	40020458 	.word	0x40020458
 8003470:	40020470 	.word	0x40020470
 8003474:	40020488 	.word	0x40020488
 8003478:	400204a0 	.word	0x400204a0
 800347c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1c8      	bne.n	8003420 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4b83      	ldr	r3, [pc, #524]	; (80036a8 <HAL_DMA_Init+0x420>)
 800349a:	4013      	ands	r3, r2
 800349c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80034a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034be:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d107      	bne.n	80034e4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	4313      	orrs	r3, r2
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80034e4:	4b71      	ldr	r3, [pc, #452]	; (80036ac <HAL_DMA_Init+0x424>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	4b71      	ldr	r3, [pc, #452]	; (80036b0 <HAL_DMA_Init+0x428>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034f0:	d328      	bcc.n	8003544 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b28      	cmp	r3, #40	; 0x28
 80034f8:	d903      	bls.n	8003502 <HAL_DMA_Init+0x27a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b2e      	cmp	r3, #46	; 0x2e
 8003500:	d917      	bls.n	8003532 <HAL_DMA_Init+0x2aa>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b3e      	cmp	r3, #62	; 0x3e
 8003508:	d903      	bls.n	8003512 <HAL_DMA_Init+0x28a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b42      	cmp	r3, #66	; 0x42
 8003510:	d90f      	bls.n	8003532 <HAL_DMA_Init+0x2aa>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b46      	cmp	r3, #70	; 0x46
 8003518:	d903      	bls.n	8003522 <HAL_DMA_Init+0x29a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b48      	cmp	r3, #72	; 0x48
 8003520:	d907      	bls.n	8003532 <HAL_DMA_Init+0x2aa>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b4e      	cmp	r3, #78	; 0x4e
 8003528:	d905      	bls.n	8003536 <HAL_DMA_Init+0x2ae>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b52      	cmp	r3, #82	; 0x52
 8003530:	d801      	bhi.n	8003536 <HAL_DMA_Init+0x2ae>
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <HAL_DMA_Init+0x2b0>
 8003536:	2300      	movs	r3, #0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003542:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f023 0307 	bic.w	r3, r3, #7
 800355a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	2b04      	cmp	r3, #4
 800356c:	d117      	bne.n	800359e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00e      	beq.n	800359e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f002 f813 	bl	80055ac <DMA_CheckFifoParam>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2240      	movs	r2, #64	; 0x40
 8003590:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e197      	b.n	80038ce <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f001 ff4e 	bl	8005448 <DMA_CalcBaseAndBitshift>
 80035ac:	4603      	mov	r3, r0
 80035ae:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	223f      	movs	r2, #63	; 0x3f
 80035ba:	409a      	lsls	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	e0cd      	b.n	800375e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a3b      	ldr	r2, [pc, #236]	; (80036b4 <HAL_DMA_Init+0x42c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d022      	beq.n	8003612 <HAL_DMA_Init+0x38a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a39      	ldr	r2, [pc, #228]	; (80036b8 <HAL_DMA_Init+0x430>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01d      	beq.n	8003612 <HAL_DMA_Init+0x38a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a38      	ldr	r2, [pc, #224]	; (80036bc <HAL_DMA_Init+0x434>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d018      	beq.n	8003612 <HAL_DMA_Init+0x38a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a36      	ldr	r2, [pc, #216]	; (80036c0 <HAL_DMA_Init+0x438>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <HAL_DMA_Init+0x38a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a35      	ldr	r2, [pc, #212]	; (80036c4 <HAL_DMA_Init+0x43c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00e      	beq.n	8003612 <HAL_DMA_Init+0x38a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a33      	ldr	r2, [pc, #204]	; (80036c8 <HAL_DMA_Init+0x440>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d009      	beq.n	8003612 <HAL_DMA_Init+0x38a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a32      	ldr	r2, [pc, #200]	; (80036cc <HAL_DMA_Init+0x444>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d004      	beq.n	8003612 <HAL_DMA_Init+0x38a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a30      	ldr	r2, [pc, #192]	; (80036d0 <HAL_DMA_Init+0x448>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d101      	bne.n	8003616 <HAL_DMA_Init+0x38e>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <HAL_DMA_Init+0x390>
 8003616:	2300      	movs	r3, #0
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8097 	beq.w	800374c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a24      	ldr	r2, [pc, #144]	; (80036b4 <HAL_DMA_Init+0x42c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d021      	beq.n	800366c <HAL_DMA_Init+0x3e4>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a22      	ldr	r2, [pc, #136]	; (80036b8 <HAL_DMA_Init+0x430>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d01c      	beq.n	800366c <HAL_DMA_Init+0x3e4>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a21      	ldr	r2, [pc, #132]	; (80036bc <HAL_DMA_Init+0x434>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d017      	beq.n	800366c <HAL_DMA_Init+0x3e4>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1f      	ldr	r2, [pc, #124]	; (80036c0 <HAL_DMA_Init+0x438>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d012      	beq.n	800366c <HAL_DMA_Init+0x3e4>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1e      	ldr	r2, [pc, #120]	; (80036c4 <HAL_DMA_Init+0x43c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d00d      	beq.n	800366c <HAL_DMA_Init+0x3e4>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1c      	ldr	r2, [pc, #112]	; (80036c8 <HAL_DMA_Init+0x440>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d008      	beq.n	800366c <HAL_DMA_Init+0x3e4>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1b      	ldr	r2, [pc, #108]	; (80036cc <HAL_DMA_Init+0x444>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d003      	beq.n	800366c <HAL_DMA_Init+0x3e4>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a19      	ldr	r2, [pc, #100]	; (80036d0 <HAL_DMA_Init+0x448>)
 800366a:	4293      	cmp	r3, r2
 800366c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2202      	movs	r2, #2
 800367a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_DMA_Init+0x44c>)
 800368a:	4013      	ands	r3, r2
 800368c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b40      	cmp	r3, #64	; 0x40
 8003694:	d020      	beq.n	80036d8 <HAL_DMA_Init+0x450>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b80      	cmp	r3, #128	; 0x80
 800369c:	d102      	bne.n	80036a4 <HAL_DMA_Init+0x41c>
 800369e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036a2:	e01a      	b.n	80036da <HAL_DMA_Init+0x452>
 80036a4:	2300      	movs	r3, #0
 80036a6:	e018      	b.n	80036da <HAL_DMA_Init+0x452>
 80036a8:	fe10803f 	.word	0xfe10803f
 80036ac:	5c001000 	.word	0x5c001000
 80036b0:	ffff0000 	.word	0xffff0000
 80036b4:	58025408 	.word	0x58025408
 80036b8:	5802541c 	.word	0x5802541c
 80036bc:	58025430 	.word	0x58025430
 80036c0:	58025444 	.word	0x58025444
 80036c4:	58025458 	.word	0x58025458
 80036c8:	5802546c 	.word	0x5802546c
 80036cc:	58025480 	.word	0x58025480
 80036d0:	58025494 	.word	0x58025494
 80036d4:	fffe000f 	.word	0xfffe000f
 80036d8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68d2      	ldr	r2, [r2, #12]
 80036de:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80036e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80036e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80036f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80036f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003700:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003708:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	4b6e      	ldr	r3, [pc, #440]	; (80038d8 <HAL_DMA_Init+0x650>)
 8003720:	4413      	add	r3, r2
 8003722:	4a6e      	ldr	r2, [pc, #440]	; (80038dc <HAL_DMA_Init+0x654>)
 8003724:	fba2 2303 	umull	r2, r3, r2, r3
 8003728:	091b      	lsrs	r3, r3, #4
 800372a:	009a      	lsls	r2, r3, #2
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f001 fe89 	bl	8005448 <DMA_CalcBaseAndBitshift>
 8003736:	4603      	mov	r3, r0
 8003738:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	2201      	movs	r2, #1
 8003744:	409a      	lsls	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	e008      	b.n	800375e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2240      	movs	r2, #64	; 0x40
 8003750:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2203      	movs	r2, #3
 8003756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e0b7      	b.n	80038ce <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a5f      	ldr	r2, [pc, #380]	; (80038e0 <HAL_DMA_Init+0x658>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d072      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a5d      	ldr	r2, [pc, #372]	; (80038e4 <HAL_DMA_Init+0x65c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d06d      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a5c      	ldr	r2, [pc, #368]	; (80038e8 <HAL_DMA_Init+0x660>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d068      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a5a      	ldr	r2, [pc, #360]	; (80038ec <HAL_DMA_Init+0x664>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d063      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a59      	ldr	r2, [pc, #356]	; (80038f0 <HAL_DMA_Init+0x668>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d05e      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a57      	ldr	r2, [pc, #348]	; (80038f4 <HAL_DMA_Init+0x66c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d059      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a56      	ldr	r2, [pc, #344]	; (80038f8 <HAL_DMA_Init+0x670>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d054      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a54      	ldr	r2, [pc, #336]	; (80038fc <HAL_DMA_Init+0x674>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d04f      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a53      	ldr	r2, [pc, #332]	; (8003900 <HAL_DMA_Init+0x678>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d04a      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a51      	ldr	r2, [pc, #324]	; (8003904 <HAL_DMA_Init+0x67c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d045      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a50      	ldr	r2, [pc, #320]	; (8003908 <HAL_DMA_Init+0x680>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d040      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a4e      	ldr	r2, [pc, #312]	; (800390c <HAL_DMA_Init+0x684>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d03b      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a4d      	ldr	r2, [pc, #308]	; (8003910 <HAL_DMA_Init+0x688>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d036      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a4b      	ldr	r2, [pc, #300]	; (8003914 <HAL_DMA_Init+0x68c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d031      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a4a      	ldr	r2, [pc, #296]	; (8003918 <HAL_DMA_Init+0x690>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d02c      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a48      	ldr	r2, [pc, #288]	; (800391c <HAL_DMA_Init+0x694>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d027      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a47      	ldr	r2, [pc, #284]	; (8003920 <HAL_DMA_Init+0x698>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d022      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a45      	ldr	r2, [pc, #276]	; (8003924 <HAL_DMA_Init+0x69c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d01d      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a44      	ldr	r2, [pc, #272]	; (8003928 <HAL_DMA_Init+0x6a0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d018      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a42      	ldr	r2, [pc, #264]	; (800392c <HAL_DMA_Init+0x6a4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d013      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a41      	ldr	r2, [pc, #260]	; (8003930 <HAL_DMA_Init+0x6a8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d00e      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a3f      	ldr	r2, [pc, #252]	; (8003934 <HAL_DMA_Init+0x6ac>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d009      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a3e      	ldr	r2, [pc, #248]	; (8003938 <HAL_DMA_Init+0x6b0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d004      	beq.n	800384e <HAL_DMA_Init+0x5c6>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a3c      	ldr	r2, [pc, #240]	; (800393c <HAL_DMA_Init+0x6b4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d101      	bne.n	8003852 <HAL_DMA_Init+0x5ca>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <HAL_DMA_Init+0x5cc>
 8003852:	2300      	movs	r3, #0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d032      	beq.n	80038be <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f001 ff23 	bl	80056a4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b80      	cmp	r3, #128	; 0x80
 8003864:	d102      	bne.n	800386c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003880:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d010      	beq.n	80038ac <HAL_DMA_Init+0x624>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b08      	cmp	r3, #8
 8003890:	d80c      	bhi.n	80038ac <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f001 ffa0 	bl	80057d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038a8:	605a      	str	r2, [r3, #4]
 80038aa:	e008      	b.n	80038be <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	a7fdabf8 	.word	0xa7fdabf8
 80038dc:	cccccccd 	.word	0xcccccccd
 80038e0:	40020010 	.word	0x40020010
 80038e4:	40020028 	.word	0x40020028
 80038e8:	40020040 	.word	0x40020040
 80038ec:	40020058 	.word	0x40020058
 80038f0:	40020070 	.word	0x40020070
 80038f4:	40020088 	.word	0x40020088
 80038f8:	400200a0 	.word	0x400200a0
 80038fc:	400200b8 	.word	0x400200b8
 8003900:	40020410 	.word	0x40020410
 8003904:	40020428 	.word	0x40020428
 8003908:	40020440 	.word	0x40020440
 800390c:	40020458 	.word	0x40020458
 8003910:	40020470 	.word	0x40020470
 8003914:	40020488 	.word	0x40020488
 8003918:	400204a0 	.word	0x400204a0
 800391c:	400204b8 	.word	0x400204b8
 8003920:	58025408 	.word	0x58025408
 8003924:	5802541c 	.word	0x5802541c
 8003928:	58025430 	.word	0x58025430
 800392c:	58025444 	.word	0x58025444
 8003930:	58025458 	.word	0x58025458
 8003934:	5802546c 	.word	0x5802546c
 8003938:	58025480 	.word	0x58025480
 800393c:	58025494 	.word	0x58025494

08003940 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e226      	b.n	8003daa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HAL_DMA_Start_IT+0x2a>
 8003966:	2302      	movs	r3, #2
 8003968:	e21f      	b.n	8003daa <HAL_DMA_Start_IT+0x46a>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	f040 820a 	bne.w	8003d94 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a68      	ldr	r2, [pc, #416]	; (8003b34 <HAL_DMA_Start_IT+0x1f4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d04a      	beq.n	8003a2e <HAL_DMA_Start_IT+0xee>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a66      	ldr	r2, [pc, #408]	; (8003b38 <HAL_DMA_Start_IT+0x1f8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d045      	beq.n	8003a2e <HAL_DMA_Start_IT+0xee>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a65      	ldr	r2, [pc, #404]	; (8003b3c <HAL_DMA_Start_IT+0x1fc>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d040      	beq.n	8003a2e <HAL_DMA_Start_IT+0xee>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a63      	ldr	r2, [pc, #396]	; (8003b40 <HAL_DMA_Start_IT+0x200>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d03b      	beq.n	8003a2e <HAL_DMA_Start_IT+0xee>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a62      	ldr	r2, [pc, #392]	; (8003b44 <HAL_DMA_Start_IT+0x204>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d036      	beq.n	8003a2e <HAL_DMA_Start_IT+0xee>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a60      	ldr	r2, [pc, #384]	; (8003b48 <HAL_DMA_Start_IT+0x208>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d031      	beq.n	8003a2e <HAL_DMA_Start_IT+0xee>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a5f      	ldr	r2, [pc, #380]	; (8003b4c <HAL_DMA_Start_IT+0x20c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d02c      	beq.n	8003a2e <HAL_DMA_Start_IT+0xee>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a5d      	ldr	r2, [pc, #372]	; (8003b50 <HAL_DMA_Start_IT+0x210>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d027      	beq.n	8003a2e <HAL_DMA_Start_IT+0xee>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a5c      	ldr	r2, [pc, #368]	; (8003b54 <HAL_DMA_Start_IT+0x214>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d022      	beq.n	8003a2e <HAL_DMA_Start_IT+0xee>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a5a      	ldr	r2, [pc, #360]	; (8003b58 <HAL_DMA_Start_IT+0x218>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d01d      	beq.n	8003a2e <HAL_DMA_Start_IT+0xee>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a59      	ldr	r2, [pc, #356]	; (8003b5c <HAL_DMA_Start_IT+0x21c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d018      	beq.n	8003a2e <HAL_DMA_Start_IT+0xee>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a57      	ldr	r2, [pc, #348]	; (8003b60 <HAL_DMA_Start_IT+0x220>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <HAL_DMA_Start_IT+0xee>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a56      	ldr	r2, [pc, #344]	; (8003b64 <HAL_DMA_Start_IT+0x224>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00e      	beq.n	8003a2e <HAL_DMA_Start_IT+0xee>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a54      	ldr	r2, [pc, #336]	; (8003b68 <HAL_DMA_Start_IT+0x228>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d009      	beq.n	8003a2e <HAL_DMA_Start_IT+0xee>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a53      	ldr	r2, [pc, #332]	; (8003b6c <HAL_DMA_Start_IT+0x22c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d004      	beq.n	8003a2e <HAL_DMA_Start_IT+0xee>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a51      	ldr	r2, [pc, #324]	; (8003b70 <HAL_DMA_Start_IT+0x230>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d108      	bne.n	8003a40 <HAL_DMA_Start_IT+0x100>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0201 	bic.w	r2, r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	e007      	b.n	8003a50 <HAL_DMA_Start_IT+0x110>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f001 fb4a 	bl	80050f0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a34      	ldr	r2, [pc, #208]	; (8003b34 <HAL_DMA_Start_IT+0x1f4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d04a      	beq.n	8003afc <HAL_DMA_Start_IT+0x1bc>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a33      	ldr	r2, [pc, #204]	; (8003b38 <HAL_DMA_Start_IT+0x1f8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d045      	beq.n	8003afc <HAL_DMA_Start_IT+0x1bc>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a31      	ldr	r2, [pc, #196]	; (8003b3c <HAL_DMA_Start_IT+0x1fc>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d040      	beq.n	8003afc <HAL_DMA_Start_IT+0x1bc>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a30      	ldr	r2, [pc, #192]	; (8003b40 <HAL_DMA_Start_IT+0x200>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d03b      	beq.n	8003afc <HAL_DMA_Start_IT+0x1bc>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a2e      	ldr	r2, [pc, #184]	; (8003b44 <HAL_DMA_Start_IT+0x204>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d036      	beq.n	8003afc <HAL_DMA_Start_IT+0x1bc>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2d      	ldr	r2, [pc, #180]	; (8003b48 <HAL_DMA_Start_IT+0x208>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d031      	beq.n	8003afc <HAL_DMA_Start_IT+0x1bc>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a2b      	ldr	r2, [pc, #172]	; (8003b4c <HAL_DMA_Start_IT+0x20c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d02c      	beq.n	8003afc <HAL_DMA_Start_IT+0x1bc>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a2a      	ldr	r2, [pc, #168]	; (8003b50 <HAL_DMA_Start_IT+0x210>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d027      	beq.n	8003afc <HAL_DMA_Start_IT+0x1bc>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a28      	ldr	r2, [pc, #160]	; (8003b54 <HAL_DMA_Start_IT+0x214>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d022      	beq.n	8003afc <HAL_DMA_Start_IT+0x1bc>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a27      	ldr	r2, [pc, #156]	; (8003b58 <HAL_DMA_Start_IT+0x218>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d01d      	beq.n	8003afc <HAL_DMA_Start_IT+0x1bc>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a25      	ldr	r2, [pc, #148]	; (8003b5c <HAL_DMA_Start_IT+0x21c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d018      	beq.n	8003afc <HAL_DMA_Start_IT+0x1bc>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a24      	ldr	r2, [pc, #144]	; (8003b60 <HAL_DMA_Start_IT+0x220>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d013      	beq.n	8003afc <HAL_DMA_Start_IT+0x1bc>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a22      	ldr	r2, [pc, #136]	; (8003b64 <HAL_DMA_Start_IT+0x224>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00e      	beq.n	8003afc <HAL_DMA_Start_IT+0x1bc>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a21      	ldr	r2, [pc, #132]	; (8003b68 <HAL_DMA_Start_IT+0x228>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d009      	beq.n	8003afc <HAL_DMA_Start_IT+0x1bc>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1f      	ldr	r2, [pc, #124]	; (8003b6c <HAL_DMA_Start_IT+0x22c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d004      	beq.n	8003afc <HAL_DMA_Start_IT+0x1bc>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1e      	ldr	r2, [pc, #120]	; (8003b70 <HAL_DMA_Start_IT+0x230>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d101      	bne.n	8003b00 <HAL_DMA_Start_IT+0x1c0>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <HAL_DMA_Start_IT+0x1c2>
 8003b00:	2300      	movs	r3, #0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d036      	beq.n	8003b74 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f023 021e 	bic.w	r2, r3, #30
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0216 	orr.w	r2, r2, #22
 8003b18:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d03e      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0208 	orr.w	r2, r2, #8
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	e035      	b.n	8003ba0 <HAL_DMA_Start_IT+0x260>
 8003b34:	40020010 	.word	0x40020010
 8003b38:	40020028 	.word	0x40020028
 8003b3c:	40020040 	.word	0x40020040
 8003b40:	40020058 	.word	0x40020058
 8003b44:	40020070 	.word	0x40020070
 8003b48:	40020088 	.word	0x40020088
 8003b4c:	400200a0 	.word	0x400200a0
 8003b50:	400200b8 	.word	0x400200b8
 8003b54:	40020410 	.word	0x40020410
 8003b58:	40020428 	.word	0x40020428
 8003b5c:	40020440 	.word	0x40020440
 8003b60:	40020458 	.word	0x40020458
 8003b64:	40020470 	.word	0x40020470
 8003b68:	40020488 	.word	0x40020488
 8003b6c:	400204a0 	.word	0x400204a0
 8003b70:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f023 020e 	bic.w	r2, r3, #14
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 020a 	orr.w	r2, r2, #10
 8003b86:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0204 	orr.w	r2, r2, #4
 8003b9e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a83      	ldr	r2, [pc, #524]	; (8003db4 <HAL_DMA_Start_IT+0x474>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d072      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a82      	ldr	r2, [pc, #520]	; (8003db8 <HAL_DMA_Start_IT+0x478>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d06d      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a80      	ldr	r2, [pc, #512]	; (8003dbc <HAL_DMA_Start_IT+0x47c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d068      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a7f      	ldr	r2, [pc, #508]	; (8003dc0 <HAL_DMA_Start_IT+0x480>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d063      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a7d      	ldr	r2, [pc, #500]	; (8003dc4 <HAL_DMA_Start_IT+0x484>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d05e      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a7c      	ldr	r2, [pc, #496]	; (8003dc8 <HAL_DMA_Start_IT+0x488>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d059      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a7a      	ldr	r2, [pc, #488]	; (8003dcc <HAL_DMA_Start_IT+0x48c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d054      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a79      	ldr	r2, [pc, #484]	; (8003dd0 <HAL_DMA_Start_IT+0x490>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d04f      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a77      	ldr	r2, [pc, #476]	; (8003dd4 <HAL_DMA_Start_IT+0x494>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d04a      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a76      	ldr	r2, [pc, #472]	; (8003dd8 <HAL_DMA_Start_IT+0x498>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d045      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a74      	ldr	r2, [pc, #464]	; (8003ddc <HAL_DMA_Start_IT+0x49c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d040      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a73      	ldr	r2, [pc, #460]	; (8003de0 <HAL_DMA_Start_IT+0x4a0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d03b      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a71      	ldr	r2, [pc, #452]	; (8003de4 <HAL_DMA_Start_IT+0x4a4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d036      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a70      	ldr	r2, [pc, #448]	; (8003de8 <HAL_DMA_Start_IT+0x4a8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d031      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a6e      	ldr	r2, [pc, #440]	; (8003dec <HAL_DMA_Start_IT+0x4ac>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d02c      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a6d      	ldr	r2, [pc, #436]	; (8003df0 <HAL_DMA_Start_IT+0x4b0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d027      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a6b      	ldr	r2, [pc, #428]	; (8003df4 <HAL_DMA_Start_IT+0x4b4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d022      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a6a      	ldr	r2, [pc, #424]	; (8003df8 <HAL_DMA_Start_IT+0x4b8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d01d      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a68      	ldr	r2, [pc, #416]	; (8003dfc <HAL_DMA_Start_IT+0x4bc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d018      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a67      	ldr	r2, [pc, #412]	; (8003e00 <HAL_DMA_Start_IT+0x4c0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d013      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a65      	ldr	r2, [pc, #404]	; (8003e04 <HAL_DMA_Start_IT+0x4c4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00e      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a64      	ldr	r2, [pc, #400]	; (8003e08 <HAL_DMA_Start_IT+0x4c8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d009      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a62      	ldr	r2, [pc, #392]	; (8003e0c <HAL_DMA_Start_IT+0x4cc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d004      	beq.n	8003c90 <HAL_DMA_Start_IT+0x350>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a61      	ldr	r2, [pc, #388]	; (8003e10 <HAL_DMA_Start_IT+0x4d0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d101      	bne.n	8003c94 <HAL_DMA_Start_IT+0x354>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <HAL_DMA_Start_IT+0x356>
 8003c94:	2300      	movs	r3, #0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d01a      	beq.n	8003cd0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d007      	beq.n	8003cb8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cb6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d007      	beq.n	8003cd0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a37      	ldr	r2, [pc, #220]	; (8003db4 <HAL_DMA_Start_IT+0x474>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d04a      	beq.n	8003d70 <HAL_DMA_Start_IT+0x430>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a36      	ldr	r2, [pc, #216]	; (8003db8 <HAL_DMA_Start_IT+0x478>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d045      	beq.n	8003d70 <HAL_DMA_Start_IT+0x430>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a34      	ldr	r2, [pc, #208]	; (8003dbc <HAL_DMA_Start_IT+0x47c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d040      	beq.n	8003d70 <HAL_DMA_Start_IT+0x430>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a33      	ldr	r2, [pc, #204]	; (8003dc0 <HAL_DMA_Start_IT+0x480>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d03b      	beq.n	8003d70 <HAL_DMA_Start_IT+0x430>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a31      	ldr	r2, [pc, #196]	; (8003dc4 <HAL_DMA_Start_IT+0x484>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d036      	beq.n	8003d70 <HAL_DMA_Start_IT+0x430>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a30      	ldr	r2, [pc, #192]	; (8003dc8 <HAL_DMA_Start_IT+0x488>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d031      	beq.n	8003d70 <HAL_DMA_Start_IT+0x430>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2e      	ldr	r2, [pc, #184]	; (8003dcc <HAL_DMA_Start_IT+0x48c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d02c      	beq.n	8003d70 <HAL_DMA_Start_IT+0x430>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a2d      	ldr	r2, [pc, #180]	; (8003dd0 <HAL_DMA_Start_IT+0x490>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d027      	beq.n	8003d70 <HAL_DMA_Start_IT+0x430>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a2b      	ldr	r2, [pc, #172]	; (8003dd4 <HAL_DMA_Start_IT+0x494>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d022      	beq.n	8003d70 <HAL_DMA_Start_IT+0x430>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a2a      	ldr	r2, [pc, #168]	; (8003dd8 <HAL_DMA_Start_IT+0x498>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d01d      	beq.n	8003d70 <HAL_DMA_Start_IT+0x430>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a28      	ldr	r2, [pc, #160]	; (8003ddc <HAL_DMA_Start_IT+0x49c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d018      	beq.n	8003d70 <HAL_DMA_Start_IT+0x430>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a27      	ldr	r2, [pc, #156]	; (8003de0 <HAL_DMA_Start_IT+0x4a0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d013      	beq.n	8003d70 <HAL_DMA_Start_IT+0x430>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a25      	ldr	r2, [pc, #148]	; (8003de4 <HAL_DMA_Start_IT+0x4a4>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00e      	beq.n	8003d70 <HAL_DMA_Start_IT+0x430>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a24      	ldr	r2, [pc, #144]	; (8003de8 <HAL_DMA_Start_IT+0x4a8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d009      	beq.n	8003d70 <HAL_DMA_Start_IT+0x430>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a22      	ldr	r2, [pc, #136]	; (8003dec <HAL_DMA_Start_IT+0x4ac>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d004      	beq.n	8003d70 <HAL_DMA_Start_IT+0x430>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a21      	ldr	r2, [pc, #132]	; (8003df0 <HAL_DMA_Start_IT+0x4b0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d108      	bne.n	8003d82 <HAL_DMA_Start_IT+0x442>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	e012      	b.n	8003da8 <HAL_DMA_Start_IT+0x468>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0201 	orr.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	e009      	b.n	8003da8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003da2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40020010 	.word	0x40020010
 8003db8:	40020028 	.word	0x40020028
 8003dbc:	40020040 	.word	0x40020040
 8003dc0:	40020058 	.word	0x40020058
 8003dc4:	40020070 	.word	0x40020070
 8003dc8:	40020088 	.word	0x40020088
 8003dcc:	400200a0 	.word	0x400200a0
 8003dd0:	400200b8 	.word	0x400200b8
 8003dd4:	40020410 	.word	0x40020410
 8003dd8:	40020428 	.word	0x40020428
 8003ddc:	40020440 	.word	0x40020440
 8003de0:	40020458 	.word	0x40020458
 8003de4:	40020470 	.word	0x40020470
 8003de8:	40020488 	.word	0x40020488
 8003dec:	400204a0 	.word	0x400204a0
 8003df0:	400204b8 	.word	0x400204b8
 8003df4:	58025408 	.word	0x58025408
 8003df8:	5802541c 	.word	0x5802541c
 8003dfc:	58025430 	.word	0x58025430
 8003e00:	58025444 	.word	0x58025444
 8003e04:	58025458 	.word	0x58025458
 8003e08:	5802546c 	.word	0x5802546c
 8003e0c:	58025480 	.word	0x58025480
 8003e10:	58025494 	.word	0x58025494

08003e14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e205      	b.n	8004232 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d004      	beq.n	8003e3c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2280      	movs	r2, #128	; 0x80
 8003e36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e1fa      	b.n	8004232 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a8c      	ldr	r2, [pc, #560]	; (8004074 <HAL_DMA_Abort_IT+0x260>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d04a      	beq.n	8003edc <HAL_DMA_Abort_IT+0xc8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a8b      	ldr	r2, [pc, #556]	; (8004078 <HAL_DMA_Abort_IT+0x264>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d045      	beq.n	8003edc <HAL_DMA_Abort_IT+0xc8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a89      	ldr	r2, [pc, #548]	; (800407c <HAL_DMA_Abort_IT+0x268>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d040      	beq.n	8003edc <HAL_DMA_Abort_IT+0xc8>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a88      	ldr	r2, [pc, #544]	; (8004080 <HAL_DMA_Abort_IT+0x26c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d03b      	beq.n	8003edc <HAL_DMA_Abort_IT+0xc8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a86      	ldr	r2, [pc, #536]	; (8004084 <HAL_DMA_Abort_IT+0x270>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d036      	beq.n	8003edc <HAL_DMA_Abort_IT+0xc8>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a85      	ldr	r2, [pc, #532]	; (8004088 <HAL_DMA_Abort_IT+0x274>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d031      	beq.n	8003edc <HAL_DMA_Abort_IT+0xc8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a83      	ldr	r2, [pc, #524]	; (800408c <HAL_DMA_Abort_IT+0x278>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d02c      	beq.n	8003edc <HAL_DMA_Abort_IT+0xc8>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a82      	ldr	r2, [pc, #520]	; (8004090 <HAL_DMA_Abort_IT+0x27c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d027      	beq.n	8003edc <HAL_DMA_Abort_IT+0xc8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a80      	ldr	r2, [pc, #512]	; (8004094 <HAL_DMA_Abort_IT+0x280>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d022      	beq.n	8003edc <HAL_DMA_Abort_IT+0xc8>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a7f      	ldr	r2, [pc, #508]	; (8004098 <HAL_DMA_Abort_IT+0x284>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d01d      	beq.n	8003edc <HAL_DMA_Abort_IT+0xc8>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a7d      	ldr	r2, [pc, #500]	; (800409c <HAL_DMA_Abort_IT+0x288>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d018      	beq.n	8003edc <HAL_DMA_Abort_IT+0xc8>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a7c      	ldr	r2, [pc, #496]	; (80040a0 <HAL_DMA_Abort_IT+0x28c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d013      	beq.n	8003edc <HAL_DMA_Abort_IT+0xc8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a7a      	ldr	r2, [pc, #488]	; (80040a4 <HAL_DMA_Abort_IT+0x290>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00e      	beq.n	8003edc <HAL_DMA_Abort_IT+0xc8>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a79      	ldr	r2, [pc, #484]	; (80040a8 <HAL_DMA_Abort_IT+0x294>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d009      	beq.n	8003edc <HAL_DMA_Abort_IT+0xc8>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a77      	ldr	r2, [pc, #476]	; (80040ac <HAL_DMA_Abort_IT+0x298>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d004      	beq.n	8003edc <HAL_DMA_Abort_IT+0xc8>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a76      	ldr	r2, [pc, #472]	; (80040b0 <HAL_DMA_Abort_IT+0x29c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d101      	bne.n	8003ee0 <HAL_DMA_Abort_IT+0xcc>
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <HAL_DMA_Abort_IT+0xce>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d065      	beq.n	8003fb2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2204      	movs	r2, #4
 8003eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a60      	ldr	r2, [pc, #384]	; (8004074 <HAL_DMA_Abort_IT+0x260>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d04a      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x17a>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a5e      	ldr	r2, [pc, #376]	; (8004078 <HAL_DMA_Abort_IT+0x264>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d045      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x17a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a5d      	ldr	r2, [pc, #372]	; (800407c <HAL_DMA_Abort_IT+0x268>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d040      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x17a>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a5b      	ldr	r2, [pc, #364]	; (8004080 <HAL_DMA_Abort_IT+0x26c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d03b      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x17a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a5a      	ldr	r2, [pc, #360]	; (8004084 <HAL_DMA_Abort_IT+0x270>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d036      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x17a>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a58      	ldr	r2, [pc, #352]	; (8004088 <HAL_DMA_Abort_IT+0x274>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d031      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x17a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a57      	ldr	r2, [pc, #348]	; (800408c <HAL_DMA_Abort_IT+0x278>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d02c      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x17a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a55      	ldr	r2, [pc, #340]	; (8004090 <HAL_DMA_Abort_IT+0x27c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d027      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x17a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a54      	ldr	r2, [pc, #336]	; (8004094 <HAL_DMA_Abort_IT+0x280>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d022      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x17a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a52      	ldr	r2, [pc, #328]	; (8004098 <HAL_DMA_Abort_IT+0x284>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d01d      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x17a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a51      	ldr	r2, [pc, #324]	; (800409c <HAL_DMA_Abort_IT+0x288>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d018      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x17a>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a4f      	ldr	r2, [pc, #316]	; (80040a0 <HAL_DMA_Abort_IT+0x28c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x17a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a4e      	ldr	r2, [pc, #312]	; (80040a4 <HAL_DMA_Abort_IT+0x290>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00e      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x17a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a4c      	ldr	r2, [pc, #304]	; (80040a8 <HAL_DMA_Abort_IT+0x294>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d009      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x17a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a4b      	ldr	r2, [pc, #300]	; (80040ac <HAL_DMA_Abort_IT+0x298>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d004      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x17a>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a49      	ldr	r2, [pc, #292]	; (80040b0 <HAL_DMA_Abort_IT+0x29c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d108      	bne.n	8003fa0 <HAL_DMA_Abort_IT+0x18c>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0201 	bic.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e147      	b.n	8004230 <HAL_DMA_Abort_IT+0x41c>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0201 	bic.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	e13e      	b.n	8004230 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 020e 	bic.w	r2, r2, #14
 8003fc0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2b      	ldr	r2, [pc, #172]	; (8004074 <HAL_DMA_Abort_IT+0x260>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d04a      	beq.n	8004062 <HAL_DMA_Abort_IT+0x24e>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a29      	ldr	r2, [pc, #164]	; (8004078 <HAL_DMA_Abort_IT+0x264>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d045      	beq.n	8004062 <HAL_DMA_Abort_IT+0x24e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a28      	ldr	r2, [pc, #160]	; (800407c <HAL_DMA_Abort_IT+0x268>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d040      	beq.n	8004062 <HAL_DMA_Abort_IT+0x24e>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a26      	ldr	r2, [pc, #152]	; (8004080 <HAL_DMA_Abort_IT+0x26c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d03b      	beq.n	8004062 <HAL_DMA_Abort_IT+0x24e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a25      	ldr	r2, [pc, #148]	; (8004084 <HAL_DMA_Abort_IT+0x270>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d036      	beq.n	8004062 <HAL_DMA_Abort_IT+0x24e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a23      	ldr	r2, [pc, #140]	; (8004088 <HAL_DMA_Abort_IT+0x274>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d031      	beq.n	8004062 <HAL_DMA_Abort_IT+0x24e>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a22      	ldr	r2, [pc, #136]	; (800408c <HAL_DMA_Abort_IT+0x278>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d02c      	beq.n	8004062 <HAL_DMA_Abort_IT+0x24e>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a20      	ldr	r2, [pc, #128]	; (8004090 <HAL_DMA_Abort_IT+0x27c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d027      	beq.n	8004062 <HAL_DMA_Abort_IT+0x24e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1f      	ldr	r2, [pc, #124]	; (8004094 <HAL_DMA_Abort_IT+0x280>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d022      	beq.n	8004062 <HAL_DMA_Abort_IT+0x24e>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a1d      	ldr	r2, [pc, #116]	; (8004098 <HAL_DMA_Abort_IT+0x284>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01d      	beq.n	8004062 <HAL_DMA_Abort_IT+0x24e>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a1c      	ldr	r2, [pc, #112]	; (800409c <HAL_DMA_Abort_IT+0x288>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d018      	beq.n	8004062 <HAL_DMA_Abort_IT+0x24e>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a1a      	ldr	r2, [pc, #104]	; (80040a0 <HAL_DMA_Abort_IT+0x28c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d013      	beq.n	8004062 <HAL_DMA_Abort_IT+0x24e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a19      	ldr	r2, [pc, #100]	; (80040a4 <HAL_DMA_Abort_IT+0x290>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00e      	beq.n	8004062 <HAL_DMA_Abort_IT+0x24e>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a17      	ldr	r2, [pc, #92]	; (80040a8 <HAL_DMA_Abort_IT+0x294>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d009      	beq.n	8004062 <HAL_DMA_Abort_IT+0x24e>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a16      	ldr	r2, [pc, #88]	; (80040ac <HAL_DMA_Abort_IT+0x298>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d004      	beq.n	8004062 <HAL_DMA_Abort_IT+0x24e>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a14      	ldr	r2, [pc, #80]	; (80040b0 <HAL_DMA_Abort_IT+0x29c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d128      	bne.n	80040b4 <HAL_DMA_Abort_IT+0x2a0>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0201 	bic.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	e027      	b.n	80040c4 <HAL_DMA_Abort_IT+0x2b0>
 8004074:	40020010 	.word	0x40020010
 8004078:	40020028 	.word	0x40020028
 800407c:	40020040 	.word	0x40020040
 8004080:	40020058 	.word	0x40020058
 8004084:	40020070 	.word	0x40020070
 8004088:	40020088 	.word	0x40020088
 800408c:	400200a0 	.word	0x400200a0
 8004090:	400200b8 	.word	0x400200b8
 8004094:	40020410 	.word	0x40020410
 8004098:	40020428 	.word	0x40020428
 800409c:	40020440 	.word	0x40020440
 80040a0:	40020458 	.word	0x40020458
 80040a4:	40020470 	.word	0x40020470
 80040a8:	40020488 	.word	0x40020488
 80040ac:	400204a0 	.word	0x400204a0
 80040b0:	400204b8 	.word	0x400204b8
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0201 	bic.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a5c      	ldr	r2, [pc, #368]	; (800423c <HAL_DMA_Abort_IT+0x428>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d072      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a5b      	ldr	r2, [pc, #364]	; (8004240 <HAL_DMA_Abort_IT+0x42c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d06d      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a59      	ldr	r2, [pc, #356]	; (8004244 <HAL_DMA_Abort_IT+0x430>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d068      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a58      	ldr	r2, [pc, #352]	; (8004248 <HAL_DMA_Abort_IT+0x434>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d063      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a56      	ldr	r2, [pc, #344]	; (800424c <HAL_DMA_Abort_IT+0x438>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d05e      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a55      	ldr	r2, [pc, #340]	; (8004250 <HAL_DMA_Abort_IT+0x43c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d059      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a53      	ldr	r2, [pc, #332]	; (8004254 <HAL_DMA_Abort_IT+0x440>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d054      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a52      	ldr	r2, [pc, #328]	; (8004258 <HAL_DMA_Abort_IT+0x444>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d04f      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a50      	ldr	r2, [pc, #320]	; (800425c <HAL_DMA_Abort_IT+0x448>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d04a      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a4f      	ldr	r2, [pc, #316]	; (8004260 <HAL_DMA_Abort_IT+0x44c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d045      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a4d      	ldr	r2, [pc, #308]	; (8004264 <HAL_DMA_Abort_IT+0x450>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d040      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a4c      	ldr	r2, [pc, #304]	; (8004268 <HAL_DMA_Abort_IT+0x454>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d03b      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a4a      	ldr	r2, [pc, #296]	; (800426c <HAL_DMA_Abort_IT+0x458>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d036      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a49      	ldr	r2, [pc, #292]	; (8004270 <HAL_DMA_Abort_IT+0x45c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d031      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a47      	ldr	r2, [pc, #284]	; (8004274 <HAL_DMA_Abort_IT+0x460>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d02c      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a46      	ldr	r2, [pc, #280]	; (8004278 <HAL_DMA_Abort_IT+0x464>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d027      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a44      	ldr	r2, [pc, #272]	; (800427c <HAL_DMA_Abort_IT+0x468>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d022      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a43      	ldr	r2, [pc, #268]	; (8004280 <HAL_DMA_Abort_IT+0x46c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d01d      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a41      	ldr	r2, [pc, #260]	; (8004284 <HAL_DMA_Abort_IT+0x470>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d018      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a40      	ldr	r2, [pc, #256]	; (8004288 <HAL_DMA_Abort_IT+0x474>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d013      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a3e      	ldr	r2, [pc, #248]	; (800428c <HAL_DMA_Abort_IT+0x478>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00e      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a3d      	ldr	r2, [pc, #244]	; (8004290 <HAL_DMA_Abort_IT+0x47c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d009      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a3b      	ldr	r2, [pc, #236]	; (8004294 <HAL_DMA_Abort_IT+0x480>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d004      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x3a0>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a3a      	ldr	r2, [pc, #232]	; (8004298 <HAL_DMA_Abort_IT+0x484>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d101      	bne.n	80041b8 <HAL_DMA_Abort_IT+0x3a4>
 80041b4:	2301      	movs	r3, #1
 80041b6:	e000      	b.n	80041ba <HAL_DMA_Abort_IT+0x3a6>
 80041b8:	2300      	movs	r3, #0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d028      	beq.n	8004210 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	2201      	movs	r2, #1
 80041de:	409a      	lsls	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80041ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00c      	beq.n	8004210 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004204:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800420e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40020010 	.word	0x40020010
 8004240:	40020028 	.word	0x40020028
 8004244:	40020040 	.word	0x40020040
 8004248:	40020058 	.word	0x40020058
 800424c:	40020070 	.word	0x40020070
 8004250:	40020088 	.word	0x40020088
 8004254:	400200a0 	.word	0x400200a0
 8004258:	400200b8 	.word	0x400200b8
 800425c:	40020410 	.word	0x40020410
 8004260:	40020428 	.word	0x40020428
 8004264:	40020440 	.word	0x40020440
 8004268:	40020458 	.word	0x40020458
 800426c:	40020470 	.word	0x40020470
 8004270:	40020488 	.word	0x40020488
 8004274:	400204a0 	.word	0x400204a0
 8004278:	400204b8 	.word	0x400204b8
 800427c:	58025408 	.word	0x58025408
 8004280:	5802541c 	.word	0x5802541c
 8004284:	58025430 	.word	0x58025430
 8004288:	58025444 	.word	0x58025444
 800428c:	58025458 	.word	0x58025458
 8004290:	5802546c 	.word	0x5802546c
 8004294:	58025480 	.word	0x58025480
 8004298:	58025494 	.word	0x58025494

0800429c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08a      	sub	sp, #40	; 0x28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042a8:	4b67      	ldr	r3, [pc, #412]	; (8004448 <HAL_DMA_IRQHandler+0x1ac>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a67      	ldr	r2, [pc, #412]	; (800444c <HAL_DMA_IRQHandler+0x1b0>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	0a9b      	lsrs	r3, r3, #10
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a5f      	ldr	r2, [pc, #380]	; (8004450 <HAL_DMA_IRQHandler+0x1b4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d04a      	beq.n	800436e <HAL_DMA_IRQHandler+0xd2>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a5d      	ldr	r2, [pc, #372]	; (8004454 <HAL_DMA_IRQHandler+0x1b8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d045      	beq.n	800436e <HAL_DMA_IRQHandler+0xd2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a5c      	ldr	r2, [pc, #368]	; (8004458 <HAL_DMA_IRQHandler+0x1bc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d040      	beq.n	800436e <HAL_DMA_IRQHandler+0xd2>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a5a      	ldr	r2, [pc, #360]	; (800445c <HAL_DMA_IRQHandler+0x1c0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d03b      	beq.n	800436e <HAL_DMA_IRQHandler+0xd2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a59      	ldr	r2, [pc, #356]	; (8004460 <HAL_DMA_IRQHandler+0x1c4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d036      	beq.n	800436e <HAL_DMA_IRQHandler+0xd2>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a57      	ldr	r2, [pc, #348]	; (8004464 <HAL_DMA_IRQHandler+0x1c8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d031      	beq.n	800436e <HAL_DMA_IRQHandler+0xd2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a56      	ldr	r2, [pc, #344]	; (8004468 <HAL_DMA_IRQHandler+0x1cc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d02c      	beq.n	800436e <HAL_DMA_IRQHandler+0xd2>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a54      	ldr	r2, [pc, #336]	; (800446c <HAL_DMA_IRQHandler+0x1d0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d027      	beq.n	800436e <HAL_DMA_IRQHandler+0xd2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a53      	ldr	r2, [pc, #332]	; (8004470 <HAL_DMA_IRQHandler+0x1d4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d022      	beq.n	800436e <HAL_DMA_IRQHandler+0xd2>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a51      	ldr	r2, [pc, #324]	; (8004474 <HAL_DMA_IRQHandler+0x1d8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d01d      	beq.n	800436e <HAL_DMA_IRQHandler+0xd2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a50      	ldr	r2, [pc, #320]	; (8004478 <HAL_DMA_IRQHandler+0x1dc>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d018      	beq.n	800436e <HAL_DMA_IRQHandler+0xd2>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a4e      	ldr	r2, [pc, #312]	; (800447c <HAL_DMA_IRQHandler+0x1e0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d013      	beq.n	800436e <HAL_DMA_IRQHandler+0xd2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a4d      	ldr	r2, [pc, #308]	; (8004480 <HAL_DMA_IRQHandler+0x1e4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00e      	beq.n	800436e <HAL_DMA_IRQHandler+0xd2>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a4b      	ldr	r2, [pc, #300]	; (8004484 <HAL_DMA_IRQHandler+0x1e8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d009      	beq.n	800436e <HAL_DMA_IRQHandler+0xd2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a4a      	ldr	r2, [pc, #296]	; (8004488 <HAL_DMA_IRQHandler+0x1ec>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d004      	beq.n	800436e <HAL_DMA_IRQHandler+0xd2>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a48      	ldr	r2, [pc, #288]	; (800448c <HAL_DMA_IRQHandler+0x1f0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d101      	bne.n	8004372 <HAL_DMA_IRQHandler+0xd6>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <HAL_DMA_IRQHandler+0xd8>
 8004372:	2300      	movs	r3, #0
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 842b 	beq.w	8004bd0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	2208      	movs	r2, #8
 8004384:	409a      	lsls	r2, r3
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	4013      	ands	r3, r2
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 80a2 	beq.w	80044d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a2e      	ldr	r2, [pc, #184]	; (8004450 <HAL_DMA_IRQHandler+0x1b4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d04a      	beq.n	8004430 <HAL_DMA_IRQHandler+0x194>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a2d      	ldr	r2, [pc, #180]	; (8004454 <HAL_DMA_IRQHandler+0x1b8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d045      	beq.n	8004430 <HAL_DMA_IRQHandler+0x194>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a2b      	ldr	r2, [pc, #172]	; (8004458 <HAL_DMA_IRQHandler+0x1bc>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d040      	beq.n	8004430 <HAL_DMA_IRQHandler+0x194>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a2a      	ldr	r2, [pc, #168]	; (800445c <HAL_DMA_IRQHandler+0x1c0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d03b      	beq.n	8004430 <HAL_DMA_IRQHandler+0x194>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a28      	ldr	r2, [pc, #160]	; (8004460 <HAL_DMA_IRQHandler+0x1c4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d036      	beq.n	8004430 <HAL_DMA_IRQHandler+0x194>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a27      	ldr	r2, [pc, #156]	; (8004464 <HAL_DMA_IRQHandler+0x1c8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d031      	beq.n	8004430 <HAL_DMA_IRQHandler+0x194>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a25      	ldr	r2, [pc, #148]	; (8004468 <HAL_DMA_IRQHandler+0x1cc>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d02c      	beq.n	8004430 <HAL_DMA_IRQHandler+0x194>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a24      	ldr	r2, [pc, #144]	; (800446c <HAL_DMA_IRQHandler+0x1d0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d027      	beq.n	8004430 <HAL_DMA_IRQHandler+0x194>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a22      	ldr	r2, [pc, #136]	; (8004470 <HAL_DMA_IRQHandler+0x1d4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d022      	beq.n	8004430 <HAL_DMA_IRQHandler+0x194>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a21      	ldr	r2, [pc, #132]	; (8004474 <HAL_DMA_IRQHandler+0x1d8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d01d      	beq.n	8004430 <HAL_DMA_IRQHandler+0x194>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a1f      	ldr	r2, [pc, #124]	; (8004478 <HAL_DMA_IRQHandler+0x1dc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d018      	beq.n	8004430 <HAL_DMA_IRQHandler+0x194>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a1e      	ldr	r2, [pc, #120]	; (800447c <HAL_DMA_IRQHandler+0x1e0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d013      	beq.n	8004430 <HAL_DMA_IRQHandler+0x194>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a1c      	ldr	r2, [pc, #112]	; (8004480 <HAL_DMA_IRQHandler+0x1e4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d00e      	beq.n	8004430 <HAL_DMA_IRQHandler+0x194>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1b      	ldr	r2, [pc, #108]	; (8004484 <HAL_DMA_IRQHandler+0x1e8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d009      	beq.n	8004430 <HAL_DMA_IRQHandler+0x194>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a19      	ldr	r2, [pc, #100]	; (8004488 <HAL_DMA_IRQHandler+0x1ec>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d004      	beq.n	8004430 <HAL_DMA_IRQHandler+0x194>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a18      	ldr	r2, [pc, #96]	; (800448c <HAL_DMA_IRQHandler+0x1f0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d12f      	bne.n	8004490 <HAL_DMA_IRQHandler+0x1f4>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b00      	cmp	r3, #0
 800443c:	bf14      	ite	ne
 800443e:	2301      	movne	r3, #1
 8004440:	2300      	moveq	r3, #0
 8004442:	b2db      	uxtb	r3, r3
 8004444:	e02e      	b.n	80044a4 <HAL_DMA_IRQHandler+0x208>
 8004446:	bf00      	nop
 8004448:	24000018 	.word	0x24000018
 800444c:	1b4e81b5 	.word	0x1b4e81b5
 8004450:	40020010 	.word	0x40020010
 8004454:	40020028 	.word	0x40020028
 8004458:	40020040 	.word	0x40020040
 800445c:	40020058 	.word	0x40020058
 8004460:	40020070 	.word	0x40020070
 8004464:	40020088 	.word	0x40020088
 8004468:	400200a0 	.word	0x400200a0
 800446c:	400200b8 	.word	0x400200b8
 8004470:	40020410 	.word	0x40020410
 8004474:	40020428 	.word	0x40020428
 8004478:	40020440 	.word	0x40020440
 800447c:	40020458 	.word	0x40020458
 8004480:	40020470 	.word	0x40020470
 8004484:	40020488 	.word	0x40020488
 8004488:	400204a0 	.word	0x400204a0
 800448c:	400204b8 	.word	0x400204b8
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	bf14      	ite	ne
 800449e:	2301      	movne	r3, #1
 80044a0:	2300      	moveq	r3, #0
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d015      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0204 	bic.w	r2, r2, #4
 80044b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	2208      	movs	r2, #8
 80044c2:	409a      	lsls	r2, r3
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044cc:	f043 0201 	orr.w	r2, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	fa22 f303 	lsr.w	r3, r2, r3
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d06e      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a69      	ldr	r2, [pc, #420]	; (8004694 <HAL_DMA_IRQHandler+0x3f8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d04a      	beq.n	800458a <HAL_DMA_IRQHandler+0x2ee>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a67      	ldr	r2, [pc, #412]	; (8004698 <HAL_DMA_IRQHandler+0x3fc>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d045      	beq.n	800458a <HAL_DMA_IRQHandler+0x2ee>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a66      	ldr	r2, [pc, #408]	; (800469c <HAL_DMA_IRQHandler+0x400>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d040      	beq.n	800458a <HAL_DMA_IRQHandler+0x2ee>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a64      	ldr	r2, [pc, #400]	; (80046a0 <HAL_DMA_IRQHandler+0x404>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d03b      	beq.n	800458a <HAL_DMA_IRQHandler+0x2ee>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a63      	ldr	r2, [pc, #396]	; (80046a4 <HAL_DMA_IRQHandler+0x408>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d036      	beq.n	800458a <HAL_DMA_IRQHandler+0x2ee>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a61      	ldr	r2, [pc, #388]	; (80046a8 <HAL_DMA_IRQHandler+0x40c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d031      	beq.n	800458a <HAL_DMA_IRQHandler+0x2ee>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a60      	ldr	r2, [pc, #384]	; (80046ac <HAL_DMA_IRQHandler+0x410>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d02c      	beq.n	800458a <HAL_DMA_IRQHandler+0x2ee>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a5e      	ldr	r2, [pc, #376]	; (80046b0 <HAL_DMA_IRQHandler+0x414>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d027      	beq.n	800458a <HAL_DMA_IRQHandler+0x2ee>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a5d      	ldr	r2, [pc, #372]	; (80046b4 <HAL_DMA_IRQHandler+0x418>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d022      	beq.n	800458a <HAL_DMA_IRQHandler+0x2ee>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a5b      	ldr	r2, [pc, #364]	; (80046b8 <HAL_DMA_IRQHandler+0x41c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d01d      	beq.n	800458a <HAL_DMA_IRQHandler+0x2ee>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a5a      	ldr	r2, [pc, #360]	; (80046bc <HAL_DMA_IRQHandler+0x420>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d018      	beq.n	800458a <HAL_DMA_IRQHandler+0x2ee>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a58      	ldr	r2, [pc, #352]	; (80046c0 <HAL_DMA_IRQHandler+0x424>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <HAL_DMA_IRQHandler+0x2ee>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a57      	ldr	r2, [pc, #348]	; (80046c4 <HAL_DMA_IRQHandler+0x428>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00e      	beq.n	800458a <HAL_DMA_IRQHandler+0x2ee>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a55      	ldr	r2, [pc, #340]	; (80046c8 <HAL_DMA_IRQHandler+0x42c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d009      	beq.n	800458a <HAL_DMA_IRQHandler+0x2ee>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a54      	ldr	r2, [pc, #336]	; (80046cc <HAL_DMA_IRQHandler+0x430>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d004      	beq.n	800458a <HAL_DMA_IRQHandler+0x2ee>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a52      	ldr	r2, [pc, #328]	; (80046d0 <HAL_DMA_IRQHandler+0x434>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d10a      	bne.n	80045a0 <HAL_DMA_IRQHandler+0x304>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004594:	2b00      	cmp	r3, #0
 8004596:	bf14      	ite	ne
 8004598:	2301      	movne	r3, #1
 800459a:	2300      	moveq	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	e003      	b.n	80045a8 <HAL_DMA_IRQHandler+0x30c>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2300      	movs	r3, #0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00d      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	2201      	movs	r2, #1
 80045b6:	409a      	lsls	r2, r3
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c0:	f043 0202 	orr.w	r2, r3, #2
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	2204      	movs	r2, #4
 80045d2:	409a      	lsls	r2, r3
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	4013      	ands	r3, r2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 808f 	beq.w	80046fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a2c      	ldr	r2, [pc, #176]	; (8004694 <HAL_DMA_IRQHandler+0x3f8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d04a      	beq.n	800467e <HAL_DMA_IRQHandler+0x3e2>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a2a      	ldr	r2, [pc, #168]	; (8004698 <HAL_DMA_IRQHandler+0x3fc>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d045      	beq.n	800467e <HAL_DMA_IRQHandler+0x3e2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a29      	ldr	r2, [pc, #164]	; (800469c <HAL_DMA_IRQHandler+0x400>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d040      	beq.n	800467e <HAL_DMA_IRQHandler+0x3e2>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a27      	ldr	r2, [pc, #156]	; (80046a0 <HAL_DMA_IRQHandler+0x404>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d03b      	beq.n	800467e <HAL_DMA_IRQHandler+0x3e2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a26      	ldr	r2, [pc, #152]	; (80046a4 <HAL_DMA_IRQHandler+0x408>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d036      	beq.n	800467e <HAL_DMA_IRQHandler+0x3e2>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a24      	ldr	r2, [pc, #144]	; (80046a8 <HAL_DMA_IRQHandler+0x40c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d031      	beq.n	800467e <HAL_DMA_IRQHandler+0x3e2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a23      	ldr	r2, [pc, #140]	; (80046ac <HAL_DMA_IRQHandler+0x410>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d02c      	beq.n	800467e <HAL_DMA_IRQHandler+0x3e2>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a21      	ldr	r2, [pc, #132]	; (80046b0 <HAL_DMA_IRQHandler+0x414>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d027      	beq.n	800467e <HAL_DMA_IRQHandler+0x3e2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a20      	ldr	r2, [pc, #128]	; (80046b4 <HAL_DMA_IRQHandler+0x418>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d022      	beq.n	800467e <HAL_DMA_IRQHandler+0x3e2>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a1e      	ldr	r2, [pc, #120]	; (80046b8 <HAL_DMA_IRQHandler+0x41c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d01d      	beq.n	800467e <HAL_DMA_IRQHandler+0x3e2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1d      	ldr	r2, [pc, #116]	; (80046bc <HAL_DMA_IRQHandler+0x420>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d018      	beq.n	800467e <HAL_DMA_IRQHandler+0x3e2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1b      	ldr	r2, [pc, #108]	; (80046c0 <HAL_DMA_IRQHandler+0x424>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d013      	beq.n	800467e <HAL_DMA_IRQHandler+0x3e2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1a      	ldr	r2, [pc, #104]	; (80046c4 <HAL_DMA_IRQHandler+0x428>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00e      	beq.n	800467e <HAL_DMA_IRQHandler+0x3e2>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a18      	ldr	r2, [pc, #96]	; (80046c8 <HAL_DMA_IRQHandler+0x42c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d009      	beq.n	800467e <HAL_DMA_IRQHandler+0x3e2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a17      	ldr	r2, [pc, #92]	; (80046cc <HAL_DMA_IRQHandler+0x430>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d004      	beq.n	800467e <HAL_DMA_IRQHandler+0x3e2>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a15      	ldr	r2, [pc, #84]	; (80046d0 <HAL_DMA_IRQHandler+0x434>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d12a      	bne.n	80046d4 <HAL_DMA_IRQHandler+0x438>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	bf14      	ite	ne
 800468c:	2301      	movne	r3, #1
 800468e:	2300      	moveq	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	e023      	b.n	80046dc <HAL_DMA_IRQHandler+0x440>
 8004694:	40020010 	.word	0x40020010
 8004698:	40020028 	.word	0x40020028
 800469c:	40020040 	.word	0x40020040
 80046a0:	40020058 	.word	0x40020058
 80046a4:	40020070 	.word	0x40020070
 80046a8:	40020088 	.word	0x40020088
 80046ac:	400200a0 	.word	0x400200a0
 80046b0:	400200b8 	.word	0x400200b8
 80046b4:	40020410 	.word	0x40020410
 80046b8:	40020428 	.word	0x40020428
 80046bc:	40020440 	.word	0x40020440
 80046c0:	40020458 	.word	0x40020458
 80046c4:	40020470 	.word	0x40020470
 80046c8:	40020488 	.word	0x40020488
 80046cc:	400204a0 	.word	0x400204a0
 80046d0:	400204b8 	.word	0x400204b8
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2300      	movs	r3, #0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00d      	beq.n	80046fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e4:	f003 031f 	and.w	r3, r3, #31
 80046e8:	2204      	movs	r2, #4
 80046ea:	409a      	lsls	r2, r3
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f4:	f043 0204 	orr.w	r2, r3, #4
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	2210      	movs	r2, #16
 8004706:	409a      	lsls	r2, r3
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80a6 	beq.w	800485e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a85      	ldr	r2, [pc, #532]	; (800492c <HAL_DMA_IRQHandler+0x690>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d04a      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x516>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a83      	ldr	r2, [pc, #524]	; (8004930 <HAL_DMA_IRQHandler+0x694>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d045      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x516>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a82      	ldr	r2, [pc, #520]	; (8004934 <HAL_DMA_IRQHandler+0x698>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d040      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x516>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a80      	ldr	r2, [pc, #512]	; (8004938 <HAL_DMA_IRQHandler+0x69c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d03b      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x516>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a7f      	ldr	r2, [pc, #508]	; (800493c <HAL_DMA_IRQHandler+0x6a0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d036      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x516>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a7d      	ldr	r2, [pc, #500]	; (8004940 <HAL_DMA_IRQHandler+0x6a4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d031      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x516>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a7c      	ldr	r2, [pc, #496]	; (8004944 <HAL_DMA_IRQHandler+0x6a8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d02c      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x516>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a7a      	ldr	r2, [pc, #488]	; (8004948 <HAL_DMA_IRQHandler+0x6ac>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d027      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x516>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a79      	ldr	r2, [pc, #484]	; (800494c <HAL_DMA_IRQHandler+0x6b0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d022      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x516>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a77      	ldr	r2, [pc, #476]	; (8004950 <HAL_DMA_IRQHandler+0x6b4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d01d      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x516>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a76      	ldr	r2, [pc, #472]	; (8004954 <HAL_DMA_IRQHandler+0x6b8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d018      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x516>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a74      	ldr	r2, [pc, #464]	; (8004958 <HAL_DMA_IRQHandler+0x6bc>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d013      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x516>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a73      	ldr	r2, [pc, #460]	; (800495c <HAL_DMA_IRQHandler+0x6c0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00e      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x516>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a71      	ldr	r2, [pc, #452]	; (8004960 <HAL_DMA_IRQHandler+0x6c4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d009      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x516>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a70      	ldr	r2, [pc, #448]	; (8004964 <HAL_DMA_IRQHandler+0x6c8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d004      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x516>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a6e      	ldr	r2, [pc, #440]	; (8004968 <HAL_DMA_IRQHandler+0x6cc>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d10a      	bne.n	80047c8 <HAL_DMA_IRQHandler+0x52c>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	bf14      	ite	ne
 80047c0:	2301      	movne	r3, #1
 80047c2:	2300      	moveq	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	e009      	b.n	80047dc <HAL_DMA_IRQHandler+0x540>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bf14      	ite	ne
 80047d6:	2301      	movne	r3, #1
 80047d8:	2300      	moveq	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d03e      	beq.n	800485e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	2210      	movs	r2, #16
 80047ea:	409a      	lsls	r2, r3
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d018      	beq.n	8004830 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d108      	bne.n	800481e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	2b00      	cmp	r3, #0
 8004812:	d024      	beq.n	800485e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	4798      	blx	r3
 800481c:	e01f      	b.n	800485e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004822:	2b00      	cmp	r3, #0
 8004824:	d01b      	beq.n	800485e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	4798      	blx	r3
 800482e:	e016      	b.n	800485e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483a:	2b00      	cmp	r3, #0
 800483c:	d107      	bne.n	800484e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0208 	bic.w	r2, r2, #8
 800484c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004862:	f003 031f 	and.w	r3, r3, #31
 8004866:	2220      	movs	r2, #32
 8004868:	409a      	lsls	r2, r3
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	4013      	ands	r3, r2
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 8110 	beq.w	8004a94 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a2c      	ldr	r2, [pc, #176]	; (800492c <HAL_DMA_IRQHandler+0x690>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d04a      	beq.n	8004914 <HAL_DMA_IRQHandler+0x678>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a2b      	ldr	r2, [pc, #172]	; (8004930 <HAL_DMA_IRQHandler+0x694>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d045      	beq.n	8004914 <HAL_DMA_IRQHandler+0x678>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a29      	ldr	r2, [pc, #164]	; (8004934 <HAL_DMA_IRQHandler+0x698>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d040      	beq.n	8004914 <HAL_DMA_IRQHandler+0x678>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a28      	ldr	r2, [pc, #160]	; (8004938 <HAL_DMA_IRQHandler+0x69c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d03b      	beq.n	8004914 <HAL_DMA_IRQHandler+0x678>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a26      	ldr	r2, [pc, #152]	; (800493c <HAL_DMA_IRQHandler+0x6a0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d036      	beq.n	8004914 <HAL_DMA_IRQHandler+0x678>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a25      	ldr	r2, [pc, #148]	; (8004940 <HAL_DMA_IRQHandler+0x6a4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d031      	beq.n	8004914 <HAL_DMA_IRQHandler+0x678>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a23      	ldr	r2, [pc, #140]	; (8004944 <HAL_DMA_IRQHandler+0x6a8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d02c      	beq.n	8004914 <HAL_DMA_IRQHandler+0x678>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a22      	ldr	r2, [pc, #136]	; (8004948 <HAL_DMA_IRQHandler+0x6ac>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d027      	beq.n	8004914 <HAL_DMA_IRQHandler+0x678>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a20      	ldr	r2, [pc, #128]	; (800494c <HAL_DMA_IRQHandler+0x6b0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d022      	beq.n	8004914 <HAL_DMA_IRQHandler+0x678>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1f      	ldr	r2, [pc, #124]	; (8004950 <HAL_DMA_IRQHandler+0x6b4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d01d      	beq.n	8004914 <HAL_DMA_IRQHandler+0x678>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <HAL_DMA_IRQHandler+0x6b8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d018      	beq.n	8004914 <HAL_DMA_IRQHandler+0x678>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a1c      	ldr	r2, [pc, #112]	; (8004958 <HAL_DMA_IRQHandler+0x6bc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d013      	beq.n	8004914 <HAL_DMA_IRQHandler+0x678>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1a      	ldr	r2, [pc, #104]	; (800495c <HAL_DMA_IRQHandler+0x6c0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00e      	beq.n	8004914 <HAL_DMA_IRQHandler+0x678>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a19      	ldr	r2, [pc, #100]	; (8004960 <HAL_DMA_IRQHandler+0x6c4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d009      	beq.n	8004914 <HAL_DMA_IRQHandler+0x678>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a17      	ldr	r2, [pc, #92]	; (8004964 <HAL_DMA_IRQHandler+0x6c8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d004      	beq.n	8004914 <HAL_DMA_IRQHandler+0x678>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a16      	ldr	r2, [pc, #88]	; (8004968 <HAL_DMA_IRQHandler+0x6cc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d12b      	bne.n	800496c <HAL_DMA_IRQHandler+0x6d0>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0310 	and.w	r3, r3, #16
 800491e:	2b00      	cmp	r3, #0
 8004920:	bf14      	ite	ne
 8004922:	2301      	movne	r3, #1
 8004924:	2300      	moveq	r3, #0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	e02a      	b.n	8004980 <HAL_DMA_IRQHandler+0x6e4>
 800492a:	bf00      	nop
 800492c:	40020010 	.word	0x40020010
 8004930:	40020028 	.word	0x40020028
 8004934:	40020040 	.word	0x40020040
 8004938:	40020058 	.word	0x40020058
 800493c:	40020070 	.word	0x40020070
 8004940:	40020088 	.word	0x40020088
 8004944:	400200a0 	.word	0x400200a0
 8004948:	400200b8 	.word	0x400200b8
 800494c:	40020410 	.word	0x40020410
 8004950:	40020428 	.word	0x40020428
 8004954:	40020440 	.word	0x40020440
 8004958:	40020458 	.word	0x40020458
 800495c:	40020470 	.word	0x40020470
 8004960:	40020488 	.word	0x40020488
 8004964:	400204a0 	.word	0x400204a0
 8004968:	400204b8 	.word	0x400204b8
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	bf14      	ite	ne
 800497a:	2301      	movne	r3, #1
 800497c:	2300      	moveq	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 8087 	beq.w	8004a94 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	2220      	movs	r2, #32
 8004990:	409a      	lsls	r2, r3
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d139      	bne.n	8004a16 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0216 	bic.w	r2, r2, #22
 80049b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695a      	ldr	r2, [r3, #20]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d103      	bne.n	80049d2 <HAL_DMA_IRQHandler+0x736>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d007      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0208 	bic.w	r2, r2, #8
 80049e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	223f      	movs	r2, #63	; 0x3f
 80049ec:	409a      	lsls	r2, r3
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 834a 	beq.w	80050a0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	4798      	blx	r3
          }
          return;
 8004a14:	e344      	b.n	80050a0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d018      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d108      	bne.n	8004a44 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d02c      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	4798      	blx	r3
 8004a42:	e027      	b.n	8004a94 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d023      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	4798      	blx	r3
 8004a54:	e01e      	b.n	8004a94 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10f      	bne.n	8004a84 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0210 	bic.w	r2, r2, #16
 8004a72:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8306 	beq.w	80050aa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 8088 	beq.w	8004bbc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2204      	movs	r2, #4
 8004ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a7a      	ldr	r2, [pc, #488]	; (8004ca4 <HAL_DMA_IRQHandler+0xa08>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d04a      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x8b8>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a79      	ldr	r2, [pc, #484]	; (8004ca8 <HAL_DMA_IRQHandler+0xa0c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d045      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x8b8>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a77      	ldr	r2, [pc, #476]	; (8004cac <HAL_DMA_IRQHandler+0xa10>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d040      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x8b8>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a76      	ldr	r2, [pc, #472]	; (8004cb0 <HAL_DMA_IRQHandler+0xa14>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d03b      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x8b8>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a74      	ldr	r2, [pc, #464]	; (8004cb4 <HAL_DMA_IRQHandler+0xa18>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d036      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x8b8>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a73      	ldr	r2, [pc, #460]	; (8004cb8 <HAL_DMA_IRQHandler+0xa1c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d031      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x8b8>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a71      	ldr	r2, [pc, #452]	; (8004cbc <HAL_DMA_IRQHandler+0xa20>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d02c      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x8b8>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a70      	ldr	r2, [pc, #448]	; (8004cc0 <HAL_DMA_IRQHandler+0xa24>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d027      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x8b8>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a6e      	ldr	r2, [pc, #440]	; (8004cc4 <HAL_DMA_IRQHandler+0xa28>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d022      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x8b8>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a6d      	ldr	r2, [pc, #436]	; (8004cc8 <HAL_DMA_IRQHandler+0xa2c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d01d      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x8b8>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a6b      	ldr	r2, [pc, #428]	; (8004ccc <HAL_DMA_IRQHandler+0xa30>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d018      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x8b8>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a6a      	ldr	r2, [pc, #424]	; (8004cd0 <HAL_DMA_IRQHandler+0xa34>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d013      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x8b8>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a68      	ldr	r2, [pc, #416]	; (8004cd4 <HAL_DMA_IRQHandler+0xa38>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00e      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x8b8>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a67      	ldr	r2, [pc, #412]	; (8004cd8 <HAL_DMA_IRQHandler+0xa3c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d009      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x8b8>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a65      	ldr	r2, [pc, #404]	; (8004cdc <HAL_DMA_IRQHandler+0xa40>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d004      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x8b8>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a64      	ldr	r2, [pc, #400]	; (8004ce0 <HAL_DMA_IRQHandler+0xa44>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d108      	bne.n	8004b66 <HAL_DMA_IRQHandler+0x8ca>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0201 	bic.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	e007      	b.n	8004b76 <HAL_DMA_IRQHandler+0x8da>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0201 	bic.w	r2, r2, #1
 8004b74:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d307      	bcc.n	8004b92 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1f2      	bne.n	8004b76 <HAL_DMA_IRQHandler+0x8da>
 8004b90:	e000      	b.n	8004b94 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004b92:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d004      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2203      	movs	r2, #3
 8004bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004bb2:	e003      	b.n	8004bbc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 8272 	beq.w	80050aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4798      	blx	r3
 8004bce:	e26c      	b.n	80050aa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a43      	ldr	r2, [pc, #268]	; (8004ce4 <HAL_DMA_IRQHandler+0xa48>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d022      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x984>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a42      	ldr	r2, [pc, #264]	; (8004ce8 <HAL_DMA_IRQHandler+0xa4c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d01d      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x984>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a40      	ldr	r2, [pc, #256]	; (8004cec <HAL_DMA_IRQHandler+0xa50>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d018      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x984>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a3f      	ldr	r2, [pc, #252]	; (8004cf0 <HAL_DMA_IRQHandler+0xa54>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d013      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x984>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a3d      	ldr	r2, [pc, #244]	; (8004cf4 <HAL_DMA_IRQHandler+0xa58>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00e      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x984>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a3c      	ldr	r2, [pc, #240]	; (8004cf8 <HAL_DMA_IRQHandler+0xa5c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d009      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x984>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a3a      	ldr	r2, [pc, #232]	; (8004cfc <HAL_DMA_IRQHandler+0xa60>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d004      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x984>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a39      	ldr	r2, [pc, #228]	; (8004d00 <HAL_DMA_IRQHandler+0xa64>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d101      	bne.n	8004c24 <HAL_DMA_IRQHandler+0x988>
 8004c20:	2301      	movs	r3, #1
 8004c22:	e000      	b.n	8004c26 <HAL_DMA_IRQHandler+0x98a>
 8004c24:	2300      	movs	r3, #0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 823f 	beq.w	80050aa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c38:	f003 031f 	and.w	r3, r3, #31
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 80cd 	beq.w	8004de4 <HAL_DMA_IRQHandler+0xb48>
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 80c7 	beq.w	8004de4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	2204      	movs	r2, #4
 8004c60:	409a      	lsls	r2, r3
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d049      	beq.n	8004d04 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 8210 	beq.w	80050a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c8c:	e20a      	b.n	80050a4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 8206 	beq.w	80050a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ca0:	e200      	b.n	80050a4 <HAL_DMA_IRQHandler+0xe08>
 8004ca2:	bf00      	nop
 8004ca4:	40020010 	.word	0x40020010
 8004ca8:	40020028 	.word	0x40020028
 8004cac:	40020040 	.word	0x40020040
 8004cb0:	40020058 	.word	0x40020058
 8004cb4:	40020070 	.word	0x40020070
 8004cb8:	40020088 	.word	0x40020088
 8004cbc:	400200a0 	.word	0x400200a0
 8004cc0:	400200b8 	.word	0x400200b8
 8004cc4:	40020410 	.word	0x40020410
 8004cc8:	40020428 	.word	0x40020428
 8004ccc:	40020440 	.word	0x40020440
 8004cd0:	40020458 	.word	0x40020458
 8004cd4:	40020470 	.word	0x40020470
 8004cd8:	40020488 	.word	0x40020488
 8004cdc:	400204a0 	.word	0x400204a0
 8004ce0:	400204b8 	.word	0x400204b8
 8004ce4:	58025408 	.word	0x58025408
 8004ce8:	5802541c 	.word	0x5802541c
 8004cec:	58025430 	.word	0x58025430
 8004cf0:	58025444 	.word	0x58025444
 8004cf4:	58025458 	.word	0x58025458
 8004cf8:	5802546c 	.word	0x5802546c
 8004cfc:	58025480 	.word	0x58025480
 8004d00:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d160      	bne.n	8004dd0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a8c      	ldr	r2, [pc, #560]	; (8004f44 <HAL_DMA_IRQHandler+0xca8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d04a      	beq.n	8004dae <HAL_DMA_IRQHandler+0xb12>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a8a      	ldr	r2, [pc, #552]	; (8004f48 <HAL_DMA_IRQHandler+0xcac>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d045      	beq.n	8004dae <HAL_DMA_IRQHandler+0xb12>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a89      	ldr	r2, [pc, #548]	; (8004f4c <HAL_DMA_IRQHandler+0xcb0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d040      	beq.n	8004dae <HAL_DMA_IRQHandler+0xb12>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a87      	ldr	r2, [pc, #540]	; (8004f50 <HAL_DMA_IRQHandler+0xcb4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d03b      	beq.n	8004dae <HAL_DMA_IRQHandler+0xb12>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a86      	ldr	r2, [pc, #536]	; (8004f54 <HAL_DMA_IRQHandler+0xcb8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d036      	beq.n	8004dae <HAL_DMA_IRQHandler+0xb12>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a84      	ldr	r2, [pc, #528]	; (8004f58 <HAL_DMA_IRQHandler+0xcbc>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d031      	beq.n	8004dae <HAL_DMA_IRQHandler+0xb12>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a83      	ldr	r2, [pc, #524]	; (8004f5c <HAL_DMA_IRQHandler+0xcc0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d02c      	beq.n	8004dae <HAL_DMA_IRQHandler+0xb12>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a81      	ldr	r2, [pc, #516]	; (8004f60 <HAL_DMA_IRQHandler+0xcc4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d027      	beq.n	8004dae <HAL_DMA_IRQHandler+0xb12>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a80      	ldr	r2, [pc, #512]	; (8004f64 <HAL_DMA_IRQHandler+0xcc8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d022      	beq.n	8004dae <HAL_DMA_IRQHandler+0xb12>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a7e      	ldr	r2, [pc, #504]	; (8004f68 <HAL_DMA_IRQHandler+0xccc>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d01d      	beq.n	8004dae <HAL_DMA_IRQHandler+0xb12>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a7d      	ldr	r2, [pc, #500]	; (8004f6c <HAL_DMA_IRQHandler+0xcd0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d018      	beq.n	8004dae <HAL_DMA_IRQHandler+0xb12>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a7b      	ldr	r2, [pc, #492]	; (8004f70 <HAL_DMA_IRQHandler+0xcd4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d013      	beq.n	8004dae <HAL_DMA_IRQHandler+0xb12>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a7a      	ldr	r2, [pc, #488]	; (8004f74 <HAL_DMA_IRQHandler+0xcd8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00e      	beq.n	8004dae <HAL_DMA_IRQHandler+0xb12>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a78      	ldr	r2, [pc, #480]	; (8004f78 <HAL_DMA_IRQHandler+0xcdc>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d009      	beq.n	8004dae <HAL_DMA_IRQHandler+0xb12>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a77      	ldr	r2, [pc, #476]	; (8004f7c <HAL_DMA_IRQHandler+0xce0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_DMA_IRQHandler+0xb12>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a75      	ldr	r2, [pc, #468]	; (8004f80 <HAL_DMA_IRQHandler+0xce4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d108      	bne.n	8004dc0 <HAL_DMA_IRQHandler+0xb24>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0208 	bic.w	r2, r2, #8
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	e007      	b.n	8004dd0 <HAL_DMA_IRQHandler+0xb34>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0204 	bic.w	r2, r2, #4
 8004dce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8165 	beq.w	80050a4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004de2:	e15f      	b.n	80050a4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de8:	f003 031f 	and.w	r3, r3, #31
 8004dec:	2202      	movs	r2, #2
 8004dee:	409a      	lsls	r2, r3
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	4013      	ands	r3, r2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 80c5 	beq.w	8004f84 <HAL_DMA_IRQHandler+0xce8>
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 80bf 	beq.w	8004f84 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0a:	f003 031f 	and.w	r3, r3, #31
 8004e0e:	2202      	movs	r2, #2
 8004e10:	409a      	lsls	r2, r3
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d018      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d109      	bne.n	8004e3e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 813a 	beq.w	80050a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e3c:	e134      	b.n	80050a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 8130 	beq.w	80050a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e50:	e12a      	b.n	80050a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f003 0320 	and.w	r3, r3, #32
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d168      	bne.n	8004f2e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a38      	ldr	r2, [pc, #224]	; (8004f44 <HAL_DMA_IRQHandler+0xca8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d04a      	beq.n	8004efc <HAL_DMA_IRQHandler+0xc60>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a37      	ldr	r2, [pc, #220]	; (8004f48 <HAL_DMA_IRQHandler+0xcac>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d045      	beq.n	8004efc <HAL_DMA_IRQHandler+0xc60>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a35      	ldr	r2, [pc, #212]	; (8004f4c <HAL_DMA_IRQHandler+0xcb0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d040      	beq.n	8004efc <HAL_DMA_IRQHandler+0xc60>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a34      	ldr	r2, [pc, #208]	; (8004f50 <HAL_DMA_IRQHandler+0xcb4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d03b      	beq.n	8004efc <HAL_DMA_IRQHandler+0xc60>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a32      	ldr	r2, [pc, #200]	; (8004f54 <HAL_DMA_IRQHandler+0xcb8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d036      	beq.n	8004efc <HAL_DMA_IRQHandler+0xc60>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a31      	ldr	r2, [pc, #196]	; (8004f58 <HAL_DMA_IRQHandler+0xcbc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d031      	beq.n	8004efc <HAL_DMA_IRQHandler+0xc60>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a2f      	ldr	r2, [pc, #188]	; (8004f5c <HAL_DMA_IRQHandler+0xcc0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d02c      	beq.n	8004efc <HAL_DMA_IRQHandler+0xc60>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a2e      	ldr	r2, [pc, #184]	; (8004f60 <HAL_DMA_IRQHandler+0xcc4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d027      	beq.n	8004efc <HAL_DMA_IRQHandler+0xc60>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a2c      	ldr	r2, [pc, #176]	; (8004f64 <HAL_DMA_IRQHandler+0xcc8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d022      	beq.n	8004efc <HAL_DMA_IRQHandler+0xc60>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a2b      	ldr	r2, [pc, #172]	; (8004f68 <HAL_DMA_IRQHandler+0xccc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d01d      	beq.n	8004efc <HAL_DMA_IRQHandler+0xc60>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a29      	ldr	r2, [pc, #164]	; (8004f6c <HAL_DMA_IRQHandler+0xcd0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d018      	beq.n	8004efc <HAL_DMA_IRQHandler+0xc60>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a28      	ldr	r2, [pc, #160]	; (8004f70 <HAL_DMA_IRQHandler+0xcd4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <HAL_DMA_IRQHandler+0xc60>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a26      	ldr	r2, [pc, #152]	; (8004f74 <HAL_DMA_IRQHandler+0xcd8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00e      	beq.n	8004efc <HAL_DMA_IRQHandler+0xc60>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a25      	ldr	r2, [pc, #148]	; (8004f78 <HAL_DMA_IRQHandler+0xcdc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d009      	beq.n	8004efc <HAL_DMA_IRQHandler+0xc60>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a23      	ldr	r2, [pc, #140]	; (8004f7c <HAL_DMA_IRQHandler+0xce0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_DMA_IRQHandler+0xc60>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a22      	ldr	r2, [pc, #136]	; (8004f80 <HAL_DMA_IRQHandler+0xce4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d108      	bne.n	8004f0e <HAL_DMA_IRQHandler+0xc72>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0214 	bic.w	r2, r2, #20
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	e007      	b.n	8004f1e <HAL_DMA_IRQHandler+0xc82>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 020a 	bic.w	r2, r2, #10
 8004f1c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 80b8 	beq.w	80050a8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f40:	e0b2      	b.n	80050a8 <HAL_DMA_IRQHandler+0xe0c>
 8004f42:	bf00      	nop
 8004f44:	40020010 	.word	0x40020010
 8004f48:	40020028 	.word	0x40020028
 8004f4c:	40020040 	.word	0x40020040
 8004f50:	40020058 	.word	0x40020058
 8004f54:	40020070 	.word	0x40020070
 8004f58:	40020088 	.word	0x40020088
 8004f5c:	400200a0 	.word	0x400200a0
 8004f60:	400200b8 	.word	0x400200b8
 8004f64:	40020410 	.word	0x40020410
 8004f68:	40020428 	.word	0x40020428
 8004f6c:	40020440 	.word	0x40020440
 8004f70:	40020458 	.word	0x40020458
 8004f74:	40020470 	.word	0x40020470
 8004f78:	40020488 	.word	0x40020488
 8004f7c:	400204a0 	.word	0x400204a0
 8004f80:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f88:	f003 031f 	and.w	r3, r3, #31
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	409a      	lsls	r2, r3
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 8088 	beq.w	80050aa <HAL_DMA_IRQHandler+0xe0e>
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f003 0308 	and.w	r3, r3, #8
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 8082 	beq.w	80050aa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a41      	ldr	r2, [pc, #260]	; (80050b0 <HAL_DMA_IRQHandler+0xe14>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d04a      	beq.n	8005046 <HAL_DMA_IRQHandler+0xdaa>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a3f      	ldr	r2, [pc, #252]	; (80050b4 <HAL_DMA_IRQHandler+0xe18>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d045      	beq.n	8005046 <HAL_DMA_IRQHandler+0xdaa>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a3e      	ldr	r2, [pc, #248]	; (80050b8 <HAL_DMA_IRQHandler+0xe1c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d040      	beq.n	8005046 <HAL_DMA_IRQHandler+0xdaa>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a3c      	ldr	r2, [pc, #240]	; (80050bc <HAL_DMA_IRQHandler+0xe20>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d03b      	beq.n	8005046 <HAL_DMA_IRQHandler+0xdaa>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a3b      	ldr	r2, [pc, #236]	; (80050c0 <HAL_DMA_IRQHandler+0xe24>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d036      	beq.n	8005046 <HAL_DMA_IRQHandler+0xdaa>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a39      	ldr	r2, [pc, #228]	; (80050c4 <HAL_DMA_IRQHandler+0xe28>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d031      	beq.n	8005046 <HAL_DMA_IRQHandler+0xdaa>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a38      	ldr	r2, [pc, #224]	; (80050c8 <HAL_DMA_IRQHandler+0xe2c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d02c      	beq.n	8005046 <HAL_DMA_IRQHandler+0xdaa>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a36      	ldr	r2, [pc, #216]	; (80050cc <HAL_DMA_IRQHandler+0xe30>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d027      	beq.n	8005046 <HAL_DMA_IRQHandler+0xdaa>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a35      	ldr	r2, [pc, #212]	; (80050d0 <HAL_DMA_IRQHandler+0xe34>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d022      	beq.n	8005046 <HAL_DMA_IRQHandler+0xdaa>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a33      	ldr	r2, [pc, #204]	; (80050d4 <HAL_DMA_IRQHandler+0xe38>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d01d      	beq.n	8005046 <HAL_DMA_IRQHandler+0xdaa>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a32      	ldr	r2, [pc, #200]	; (80050d8 <HAL_DMA_IRQHandler+0xe3c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d018      	beq.n	8005046 <HAL_DMA_IRQHandler+0xdaa>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a30      	ldr	r2, [pc, #192]	; (80050dc <HAL_DMA_IRQHandler+0xe40>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d013      	beq.n	8005046 <HAL_DMA_IRQHandler+0xdaa>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a2f      	ldr	r2, [pc, #188]	; (80050e0 <HAL_DMA_IRQHandler+0xe44>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d00e      	beq.n	8005046 <HAL_DMA_IRQHandler+0xdaa>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a2d      	ldr	r2, [pc, #180]	; (80050e4 <HAL_DMA_IRQHandler+0xe48>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d009      	beq.n	8005046 <HAL_DMA_IRQHandler+0xdaa>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a2c      	ldr	r2, [pc, #176]	; (80050e8 <HAL_DMA_IRQHandler+0xe4c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d004      	beq.n	8005046 <HAL_DMA_IRQHandler+0xdaa>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a2a      	ldr	r2, [pc, #168]	; (80050ec <HAL_DMA_IRQHandler+0xe50>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d108      	bne.n	8005058 <HAL_DMA_IRQHandler+0xdbc>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 021c 	bic.w	r2, r2, #28
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	e007      	b.n	8005068 <HAL_DMA_IRQHandler+0xdcc>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 020e 	bic.w	r2, r2, #14
 8005066:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506c:	f003 031f 	and.w	r3, r3, #31
 8005070:	2201      	movs	r2, #1
 8005072:	409a      	lsls	r2, r3
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005092:	2b00      	cmp	r3, #0
 8005094:	d009      	beq.n	80050aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	4798      	blx	r3
 800509e:	e004      	b.n	80050aa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80050a0:	bf00      	nop
 80050a2:	e002      	b.n	80050aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050a4:	bf00      	nop
 80050a6:	e000      	b.n	80050aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050a8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80050aa:	3728      	adds	r7, #40	; 0x28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40020010 	.word	0x40020010
 80050b4:	40020028 	.word	0x40020028
 80050b8:	40020040 	.word	0x40020040
 80050bc:	40020058 	.word	0x40020058
 80050c0:	40020070 	.word	0x40020070
 80050c4:	40020088 	.word	0x40020088
 80050c8:	400200a0 	.word	0x400200a0
 80050cc:	400200b8 	.word	0x400200b8
 80050d0:	40020410 	.word	0x40020410
 80050d4:	40020428 	.word	0x40020428
 80050d8:	40020440 	.word	0x40020440
 80050dc:	40020458 	.word	0x40020458
 80050e0:	40020470 	.word	0x40020470
 80050e4:	40020488 	.word	0x40020488
 80050e8:	400204a0 	.word	0x400204a0
 80050ec:	400204b8 	.word	0x400204b8

080050f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005102:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005108:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a84      	ldr	r2, [pc, #528]	; (8005320 <DMA_SetConfig+0x230>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d072      	beq.n	80051fa <DMA_SetConfig+0x10a>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a82      	ldr	r2, [pc, #520]	; (8005324 <DMA_SetConfig+0x234>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d06d      	beq.n	80051fa <DMA_SetConfig+0x10a>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a81      	ldr	r2, [pc, #516]	; (8005328 <DMA_SetConfig+0x238>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d068      	beq.n	80051fa <DMA_SetConfig+0x10a>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a7f      	ldr	r2, [pc, #508]	; (800532c <DMA_SetConfig+0x23c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d063      	beq.n	80051fa <DMA_SetConfig+0x10a>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a7e      	ldr	r2, [pc, #504]	; (8005330 <DMA_SetConfig+0x240>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d05e      	beq.n	80051fa <DMA_SetConfig+0x10a>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a7c      	ldr	r2, [pc, #496]	; (8005334 <DMA_SetConfig+0x244>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d059      	beq.n	80051fa <DMA_SetConfig+0x10a>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a7b      	ldr	r2, [pc, #492]	; (8005338 <DMA_SetConfig+0x248>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d054      	beq.n	80051fa <DMA_SetConfig+0x10a>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a79      	ldr	r2, [pc, #484]	; (800533c <DMA_SetConfig+0x24c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d04f      	beq.n	80051fa <DMA_SetConfig+0x10a>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a78      	ldr	r2, [pc, #480]	; (8005340 <DMA_SetConfig+0x250>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d04a      	beq.n	80051fa <DMA_SetConfig+0x10a>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a76      	ldr	r2, [pc, #472]	; (8005344 <DMA_SetConfig+0x254>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d045      	beq.n	80051fa <DMA_SetConfig+0x10a>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a75      	ldr	r2, [pc, #468]	; (8005348 <DMA_SetConfig+0x258>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d040      	beq.n	80051fa <DMA_SetConfig+0x10a>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a73      	ldr	r2, [pc, #460]	; (800534c <DMA_SetConfig+0x25c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d03b      	beq.n	80051fa <DMA_SetConfig+0x10a>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a72      	ldr	r2, [pc, #456]	; (8005350 <DMA_SetConfig+0x260>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d036      	beq.n	80051fa <DMA_SetConfig+0x10a>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a70      	ldr	r2, [pc, #448]	; (8005354 <DMA_SetConfig+0x264>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d031      	beq.n	80051fa <DMA_SetConfig+0x10a>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a6f      	ldr	r2, [pc, #444]	; (8005358 <DMA_SetConfig+0x268>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d02c      	beq.n	80051fa <DMA_SetConfig+0x10a>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a6d      	ldr	r2, [pc, #436]	; (800535c <DMA_SetConfig+0x26c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d027      	beq.n	80051fa <DMA_SetConfig+0x10a>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a6c      	ldr	r2, [pc, #432]	; (8005360 <DMA_SetConfig+0x270>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d022      	beq.n	80051fa <DMA_SetConfig+0x10a>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a6a      	ldr	r2, [pc, #424]	; (8005364 <DMA_SetConfig+0x274>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d01d      	beq.n	80051fa <DMA_SetConfig+0x10a>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a69      	ldr	r2, [pc, #420]	; (8005368 <DMA_SetConfig+0x278>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d018      	beq.n	80051fa <DMA_SetConfig+0x10a>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a67      	ldr	r2, [pc, #412]	; (800536c <DMA_SetConfig+0x27c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d013      	beq.n	80051fa <DMA_SetConfig+0x10a>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a66      	ldr	r2, [pc, #408]	; (8005370 <DMA_SetConfig+0x280>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00e      	beq.n	80051fa <DMA_SetConfig+0x10a>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a64      	ldr	r2, [pc, #400]	; (8005374 <DMA_SetConfig+0x284>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d009      	beq.n	80051fa <DMA_SetConfig+0x10a>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a63      	ldr	r2, [pc, #396]	; (8005378 <DMA_SetConfig+0x288>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d004      	beq.n	80051fa <DMA_SetConfig+0x10a>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a61      	ldr	r2, [pc, #388]	; (800537c <DMA_SetConfig+0x28c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d101      	bne.n	80051fe <DMA_SetConfig+0x10e>
 80051fa:	2301      	movs	r3, #1
 80051fc:	e000      	b.n	8005200 <DMA_SetConfig+0x110>
 80051fe:	2300      	movs	r3, #0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00d      	beq.n	8005220 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800520c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005212:	2b00      	cmp	r3, #0
 8005214:	d004      	beq.n	8005220 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800521e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a3e      	ldr	r2, [pc, #248]	; (8005320 <DMA_SetConfig+0x230>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d04a      	beq.n	80052c0 <DMA_SetConfig+0x1d0>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a3d      	ldr	r2, [pc, #244]	; (8005324 <DMA_SetConfig+0x234>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d045      	beq.n	80052c0 <DMA_SetConfig+0x1d0>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a3b      	ldr	r2, [pc, #236]	; (8005328 <DMA_SetConfig+0x238>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d040      	beq.n	80052c0 <DMA_SetConfig+0x1d0>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a3a      	ldr	r2, [pc, #232]	; (800532c <DMA_SetConfig+0x23c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d03b      	beq.n	80052c0 <DMA_SetConfig+0x1d0>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a38      	ldr	r2, [pc, #224]	; (8005330 <DMA_SetConfig+0x240>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d036      	beq.n	80052c0 <DMA_SetConfig+0x1d0>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a37      	ldr	r2, [pc, #220]	; (8005334 <DMA_SetConfig+0x244>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d031      	beq.n	80052c0 <DMA_SetConfig+0x1d0>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a35      	ldr	r2, [pc, #212]	; (8005338 <DMA_SetConfig+0x248>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d02c      	beq.n	80052c0 <DMA_SetConfig+0x1d0>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a34      	ldr	r2, [pc, #208]	; (800533c <DMA_SetConfig+0x24c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d027      	beq.n	80052c0 <DMA_SetConfig+0x1d0>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a32      	ldr	r2, [pc, #200]	; (8005340 <DMA_SetConfig+0x250>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d022      	beq.n	80052c0 <DMA_SetConfig+0x1d0>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a31      	ldr	r2, [pc, #196]	; (8005344 <DMA_SetConfig+0x254>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d01d      	beq.n	80052c0 <DMA_SetConfig+0x1d0>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a2f      	ldr	r2, [pc, #188]	; (8005348 <DMA_SetConfig+0x258>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d018      	beq.n	80052c0 <DMA_SetConfig+0x1d0>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a2e      	ldr	r2, [pc, #184]	; (800534c <DMA_SetConfig+0x25c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d013      	beq.n	80052c0 <DMA_SetConfig+0x1d0>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a2c      	ldr	r2, [pc, #176]	; (8005350 <DMA_SetConfig+0x260>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00e      	beq.n	80052c0 <DMA_SetConfig+0x1d0>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a2b      	ldr	r2, [pc, #172]	; (8005354 <DMA_SetConfig+0x264>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d009      	beq.n	80052c0 <DMA_SetConfig+0x1d0>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a29      	ldr	r2, [pc, #164]	; (8005358 <DMA_SetConfig+0x268>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d004      	beq.n	80052c0 <DMA_SetConfig+0x1d0>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a28      	ldr	r2, [pc, #160]	; (800535c <DMA_SetConfig+0x26c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d101      	bne.n	80052c4 <DMA_SetConfig+0x1d4>
 80052c0:	2301      	movs	r3, #1
 80052c2:	e000      	b.n	80052c6 <DMA_SetConfig+0x1d6>
 80052c4:	2300      	movs	r3, #0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d05a      	beq.n	8005380 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ce:	f003 031f 	and.w	r3, r3, #31
 80052d2:	223f      	movs	r2, #63	; 0x3f
 80052d4:	409a      	lsls	r2, r3
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052e8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	2b40      	cmp	r3, #64	; 0x40
 80052f8:	d108      	bne.n	800530c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800530a:	e087      	b.n	800541c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	60da      	str	r2, [r3, #12]
}
 800531c:	e07e      	b.n	800541c <DMA_SetConfig+0x32c>
 800531e:	bf00      	nop
 8005320:	40020010 	.word	0x40020010
 8005324:	40020028 	.word	0x40020028
 8005328:	40020040 	.word	0x40020040
 800532c:	40020058 	.word	0x40020058
 8005330:	40020070 	.word	0x40020070
 8005334:	40020088 	.word	0x40020088
 8005338:	400200a0 	.word	0x400200a0
 800533c:	400200b8 	.word	0x400200b8
 8005340:	40020410 	.word	0x40020410
 8005344:	40020428 	.word	0x40020428
 8005348:	40020440 	.word	0x40020440
 800534c:	40020458 	.word	0x40020458
 8005350:	40020470 	.word	0x40020470
 8005354:	40020488 	.word	0x40020488
 8005358:	400204a0 	.word	0x400204a0
 800535c:	400204b8 	.word	0x400204b8
 8005360:	58025408 	.word	0x58025408
 8005364:	5802541c 	.word	0x5802541c
 8005368:	58025430 	.word	0x58025430
 800536c:	58025444 	.word	0x58025444
 8005370:	58025458 	.word	0x58025458
 8005374:	5802546c 	.word	0x5802546c
 8005378:	58025480 	.word	0x58025480
 800537c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a28      	ldr	r2, [pc, #160]	; (8005428 <DMA_SetConfig+0x338>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d022      	beq.n	80053d0 <DMA_SetConfig+0x2e0>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a27      	ldr	r2, [pc, #156]	; (800542c <DMA_SetConfig+0x33c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d01d      	beq.n	80053d0 <DMA_SetConfig+0x2e0>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a25      	ldr	r2, [pc, #148]	; (8005430 <DMA_SetConfig+0x340>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d018      	beq.n	80053d0 <DMA_SetConfig+0x2e0>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a24      	ldr	r2, [pc, #144]	; (8005434 <DMA_SetConfig+0x344>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d013      	beq.n	80053d0 <DMA_SetConfig+0x2e0>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a22      	ldr	r2, [pc, #136]	; (8005438 <DMA_SetConfig+0x348>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00e      	beq.n	80053d0 <DMA_SetConfig+0x2e0>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a21      	ldr	r2, [pc, #132]	; (800543c <DMA_SetConfig+0x34c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d009      	beq.n	80053d0 <DMA_SetConfig+0x2e0>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a1f      	ldr	r2, [pc, #124]	; (8005440 <DMA_SetConfig+0x350>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d004      	beq.n	80053d0 <DMA_SetConfig+0x2e0>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a1e      	ldr	r2, [pc, #120]	; (8005444 <DMA_SetConfig+0x354>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d101      	bne.n	80053d4 <DMA_SetConfig+0x2e4>
 80053d0:	2301      	movs	r3, #1
 80053d2:	e000      	b.n	80053d6 <DMA_SetConfig+0x2e6>
 80053d4:	2300      	movs	r3, #0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d020      	beq.n	800541c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053de:	f003 031f 	and.w	r3, r3, #31
 80053e2:	2201      	movs	r2, #1
 80053e4:	409a      	lsls	r2, r3
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	2b40      	cmp	r3, #64	; 0x40
 80053f8:	d108      	bne.n	800540c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	60da      	str	r2, [r3, #12]
}
 800540a:	e007      	b.n	800541c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	60da      	str	r2, [r3, #12]
}
 800541c:	bf00      	nop
 800541e:	371c      	adds	r7, #28
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	58025408 	.word	0x58025408
 800542c:	5802541c 	.word	0x5802541c
 8005430:	58025430 	.word	0x58025430
 8005434:	58025444 	.word	0x58025444
 8005438:	58025458 	.word	0x58025458
 800543c:	5802546c 	.word	0x5802546c
 8005440:	58025480 	.word	0x58025480
 8005444:	58025494 	.word	0x58025494

08005448 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a42      	ldr	r2, [pc, #264]	; (8005560 <DMA_CalcBaseAndBitshift+0x118>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d04a      	beq.n	80054f0 <DMA_CalcBaseAndBitshift+0xa8>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a41      	ldr	r2, [pc, #260]	; (8005564 <DMA_CalcBaseAndBitshift+0x11c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d045      	beq.n	80054f0 <DMA_CalcBaseAndBitshift+0xa8>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a3f      	ldr	r2, [pc, #252]	; (8005568 <DMA_CalcBaseAndBitshift+0x120>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d040      	beq.n	80054f0 <DMA_CalcBaseAndBitshift+0xa8>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a3e      	ldr	r2, [pc, #248]	; (800556c <DMA_CalcBaseAndBitshift+0x124>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d03b      	beq.n	80054f0 <DMA_CalcBaseAndBitshift+0xa8>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a3c      	ldr	r2, [pc, #240]	; (8005570 <DMA_CalcBaseAndBitshift+0x128>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d036      	beq.n	80054f0 <DMA_CalcBaseAndBitshift+0xa8>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a3b      	ldr	r2, [pc, #236]	; (8005574 <DMA_CalcBaseAndBitshift+0x12c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d031      	beq.n	80054f0 <DMA_CalcBaseAndBitshift+0xa8>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a39      	ldr	r2, [pc, #228]	; (8005578 <DMA_CalcBaseAndBitshift+0x130>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d02c      	beq.n	80054f0 <DMA_CalcBaseAndBitshift+0xa8>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a38      	ldr	r2, [pc, #224]	; (800557c <DMA_CalcBaseAndBitshift+0x134>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d027      	beq.n	80054f0 <DMA_CalcBaseAndBitshift+0xa8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a36      	ldr	r2, [pc, #216]	; (8005580 <DMA_CalcBaseAndBitshift+0x138>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d022      	beq.n	80054f0 <DMA_CalcBaseAndBitshift+0xa8>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a35      	ldr	r2, [pc, #212]	; (8005584 <DMA_CalcBaseAndBitshift+0x13c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d01d      	beq.n	80054f0 <DMA_CalcBaseAndBitshift+0xa8>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a33      	ldr	r2, [pc, #204]	; (8005588 <DMA_CalcBaseAndBitshift+0x140>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d018      	beq.n	80054f0 <DMA_CalcBaseAndBitshift+0xa8>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a32      	ldr	r2, [pc, #200]	; (800558c <DMA_CalcBaseAndBitshift+0x144>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d013      	beq.n	80054f0 <DMA_CalcBaseAndBitshift+0xa8>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a30      	ldr	r2, [pc, #192]	; (8005590 <DMA_CalcBaseAndBitshift+0x148>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00e      	beq.n	80054f0 <DMA_CalcBaseAndBitshift+0xa8>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a2f      	ldr	r2, [pc, #188]	; (8005594 <DMA_CalcBaseAndBitshift+0x14c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d009      	beq.n	80054f0 <DMA_CalcBaseAndBitshift+0xa8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a2d      	ldr	r2, [pc, #180]	; (8005598 <DMA_CalcBaseAndBitshift+0x150>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <DMA_CalcBaseAndBitshift+0xa8>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a2c      	ldr	r2, [pc, #176]	; (800559c <DMA_CalcBaseAndBitshift+0x154>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d101      	bne.n	80054f4 <DMA_CalcBaseAndBitshift+0xac>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <DMA_CalcBaseAndBitshift+0xae>
 80054f4:	2300      	movs	r3, #0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d024      	beq.n	8005544 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	3b10      	subs	r3, #16
 8005502:	4a27      	ldr	r2, [pc, #156]	; (80055a0 <DMA_CalcBaseAndBitshift+0x158>)
 8005504:	fba2 2303 	umull	r2, r3, r2, r3
 8005508:	091b      	lsrs	r3, r3, #4
 800550a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	4a24      	ldr	r2, [pc, #144]	; (80055a4 <DMA_CalcBaseAndBitshift+0x15c>)
 8005514:	5cd3      	ldrb	r3, [r2, r3]
 8005516:	461a      	mov	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b03      	cmp	r3, #3
 8005520:	d908      	bls.n	8005534 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	4b1f      	ldr	r3, [pc, #124]	; (80055a8 <DMA_CalcBaseAndBitshift+0x160>)
 800552a:	4013      	ands	r3, r2
 800552c:	1d1a      	adds	r2, r3, #4
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	659a      	str	r2, [r3, #88]	; 0x58
 8005532:	e00d      	b.n	8005550 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	4b1b      	ldr	r3, [pc, #108]	; (80055a8 <DMA_CalcBaseAndBitshift+0x160>)
 800553c:	4013      	ands	r3, r2
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6593      	str	r3, [r2, #88]	; 0x58
 8005542:	e005      	b.n	8005550 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005554:	4618      	mov	r0, r3
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	40020010 	.word	0x40020010
 8005564:	40020028 	.word	0x40020028
 8005568:	40020040 	.word	0x40020040
 800556c:	40020058 	.word	0x40020058
 8005570:	40020070 	.word	0x40020070
 8005574:	40020088 	.word	0x40020088
 8005578:	400200a0 	.word	0x400200a0
 800557c:	400200b8 	.word	0x400200b8
 8005580:	40020410 	.word	0x40020410
 8005584:	40020428 	.word	0x40020428
 8005588:	40020440 	.word	0x40020440
 800558c:	40020458 	.word	0x40020458
 8005590:	40020470 	.word	0x40020470
 8005594:	40020488 	.word	0x40020488
 8005598:	400204a0 	.word	0x400204a0
 800559c:	400204b8 	.word	0x400204b8
 80055a0:	aaaaaaab 	.word	0xaaaaaaab
 80055a4:	0800c99c 	.word	0x0800c99c
 80055a8:	fffffc00 	.word	0xfffffc00

080055ac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d120      	bne.n	8005602 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d858      	bhi.n	800567a <DMA_CheckFifoParam+0xce>
 80055c8:	a201      	add	r2, pc, #4	; (adr r2, 80055d0 <DMA_CheckFifoParam+0x24>)
 80055ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ce:	bf00      	nop
 80055d0:	080055e1 	.word	0x080055e1
 80055d4:	080055f3 	.word	0x080055f3
 80055d8:	080055e1 	.word	0x080055e1
 80055dc:	0800567b 	.word	0x0800567b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d048      	beq.n	800567e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055f0:	e045      	b.n	800567e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055fa:	d142      	bne.n	8005682 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005600:	e03f      	b.n	8005682 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800560a:	d123      	bne.n	8005654 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005610:	2b03      	cmp	r3, #3
 8005612:	d838      	bhi.n	8005686 <DMA_CheckFifoParam+0xda>
 8005614:	a201      	add	r2, pc, #4	; (adr r2, 800561c <DMA_CheckFifoParam+0x70>)
 8005616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561a:	bf00      	nop
 800561c:	0800562d 	.word	0x0800562d
 8005620:	08005633 	.word	0x08005633
 8005624:	0800562d 	.word	0x0800562d
 8005628:	08005645 	.word	0x08005645
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	73fb      	strb	r3, [r7, #15]
        break;
 8005630:	e030      	b.n	8005694 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d025      	beq.n	800568a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005642:	e022      	b.n	800568a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800564c:	d11f      	bne.n	800568e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005652:	e01c      	b.n	800568e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005658:	2b02      	cmp	r3, #2
 800565a:	d902      	bls.n	8005662 <DMA_CheckFifoParam+0xb6>
 800565c:	2b03      	cmp	r3, #3
 800565e:	d003      	beq.n	8005668 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005660:	e018      	b.n	8005694 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	73fb      	strb	r3, [r7, #15]
        break;
 8005666:	e015      	b.n	8005694 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00e      	beq.n	8005692 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	73fb      	strb	r3, [r7, #15]
    break;
 8005678:	e00b      	b.n	8005692 <DMA_CheckFifoParam+0xe6>
        break;
 800567a:	bf00      	nop
 800567c:	e00a      	b.n	8005694 <DMA_CheckFifoParam+0xe8>
        break;
 800567e:	bf00      	nop
 8005680:	e008      	b.n	8005694 <DMA_CheckFifoParam+0xe8>
        break;
 8005682:	bf00      	nop
 8005684:	e006      	b.n	8005694 <DMA_CheckFifoParam+0xe8>
        break;
 8005686:	bf00      	nop
 8005688:	e004      	b.n	8005694 <DMA_CheckFifoParam+0xe8>
        break;
 800568a:	bf00      	nop
 800568c:	e002      	b.n	8005694 <DMA_CheckFifoParam+0xe8>
        break;
 800568e:	bf00      	nop
 8005690:	e000      	b.n	8005694 <DMA_CheckFifoParam+0xe8>
    break;
 8005692:	bf00      	nop
    }
  }

  return status;
 8005694:	7bfb      	ldrb	r3, [r7, #15]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop

080056a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a38      	ldr	r2, [pc, #224]	; (8005798 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d022      	beq.n	8005702 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a36      	ldr	r2, [pc, #216]	; (800579c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d01d      	beq.n	8005702 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a35      	ldr	r2, [pc, #212]	; (80057a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d018      	beq.n	8005702 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a33      	ldr	r2, [pc, #204]	; (80057a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d013      	beq.n	8005702 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a32      	ldr	r2, [pc, #200]	; (80057a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00e      	beq.n	8005702 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a30      	ldr	r2, [pc, #192]	; (80057ac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d009      	beq.n	8005702 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a2f      	ldr	r2, [pc, #188]	; (80057b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d004      	beq.n	8005702 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a2d      	ldr	r2, [pc, #180]	; (80057b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d101      	bne.n	8005706 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005702:	2301      	movs	r3, #1
 8005704:	e000      	b.n	8005708 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005706:	2300      	movs	r3, #0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d01a      	beq.n	8005742 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	b2db      	uxtb	r3, r3
 8005712:	3b08      	subs	r3, #8
 8005714:	4a28      	ldr	r2, [pc, #160]	; (80057b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005716:	fba2 2303 	umull	r2, r3, r2, r3
 800571a:	091b      	lsrs	r3, r3, #4
 800571c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4b26      	ldr	r3, [pc, #152]	; (80057bc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005722:	4413      	add	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	461a      	mov	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a24      	ldr	r2, [pc, #144]	; (80057c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005730:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f003 031f 	and.w	r3, r3, #31
 8005738:	2201      	movs	r2, #1
 800573a:	409a      	lsls	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005740:	e024      	b.n	800578c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	b2db      	uxtb	r3, r3
 8005748:	3b10      	subs	r3, #16
 800574a:	4a1e      	ldr	r2, [pc, #120]	; (80057c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800574c:	fba2 2303 	umull	r2, r3, r2, r3
 8005750:	091b      	lsrs	r3, r3, #4
 8005752:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4a1c      	ldr	r2, [pc, #112]	; (80057c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d806      	bhi.n	800576a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4a1b      	ldr	r2, [pc, #108]	; (80057cc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d902      	bls.n	800576a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3308      	adds	r3, #8
 8005768:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4b18      	ldr	r3, [pc, #96]	; (80057d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800576e:	4413      	add	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	461a      	mov	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a16      	ldr	r2, [pc, #88]	; (80057d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800577c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f003 031f 	and.w	r3, r3, #31
 8005784:	2201      	movs	r2, #1
 8005786:	409a      	lsls	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800578c:	bf00      	nop
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	58025408 	.word	0x58025408
 800579c:	5802541c 	.word	0x5802541c
 80057a0:	58025430 	.word	0x58025430
 80057a4:	58025444 	.word	0x58025444
 80057a8:	58025458 	.word	0x58025458
 80057ac:	5802546c 	.word	0x5802546c
 80057b0:	58025480 	.word	0x58025480
 80057b4:	58025494 	.word	0x58025494
 80057b8:	cccccccd 	.word	0xcccccccd
 80057bc:	16009600 	.word	0x16009600
 80057c0:	58025880 	.word	0x58025880
 80057c4:	aaaaaaab 	.word	0xaaaaaaab
 80057c8:	400204b8 	.word	0x400204b8
 80057cc:	4002040f 	.word	0x4002040f
 80057d0:	10008200 	.word	0x10008200
 80057d4:	40020880 	.word	0x40020880

080057d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d04a      	beq.n	8005884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d847      	bhi.n	8005884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a25      	ldr	r2, [pc, #148]	; (8005890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d022      	beq.n	8005844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a24      	ldr	r2, [pc, #144]	; (8005894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d01d      	beq.n	8005844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a22      	ldr	r2, [pc, #136]	; (8005898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d018      	beq.n	8005844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a21      	ldr	r2, [pc, #132]	; (800589c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d013      	beq.n	8005844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a1f      	ldr	r2, [pc, #124]	; (80058a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00e      	beq.n	8005844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a1e      	ldr	r2, [pc, #120]	; (80058a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d009      	beq.n	8005844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a1c      	ldr	r2, [pc, #112]	; (80058a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d004      	beq.n	8005844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a1b      	ldr	r2, [pc, #108]	; (80058ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d101      	bne.n	8005848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005848:	2300      	movs	r3, #0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4b17      	ldr	r3, [pc, #92]	; (80058b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	461a      	mov	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a15      	ldr	r2, [pc, #84]	; (80058b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005860:	671a      	str	r2, [r3, #112]	; 0x70
 8005862:	e009      	b.n	8005878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	461a      	mov	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a11      	ldr	r2, [pc, #68]	; (80058bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005876:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3b01      	subs	r3, #1
 800587c:	2201      	movs	r2, #1
 800587e:	409a      	lsls	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005884:	bf00      	nop
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	58025408 	.word	0x58025408
 8005894:	5802541c 	.word	0x5802541c
 8005898:	58025430 	.word	0x58025430
 800589c:	58025444 	.word	0x58025444
 80058a0:	58025458 	.word	0x58025458
 80058a4:	5802546c 	.word	0x5802546c
 80058a8:	58025480 	.word	0x58025480
 80058ac:	58025494 	.word	0x58025494
 80058b0:	1600963f 	.word	0x1600963f
 80058b4:	58025940 	.word	0x58025940
 80058b8:	1000823f 	.word	0x1000823f
 80058bc:	40020940 	.word	0x40020940

080058c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b089      	sub	sp, #36	; 0x24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80058ce:	4b89      	ldr	r3, [pc, #548]	; (8005af4 <HAL_GPIO_Init+0x234>)
 80058d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058d2:	e194      	b.n	8005bfe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	2101      	movs	r1, #1
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	fa01 f303 	lsl.w	r3, r1, r3
 80058e0:	4013      	ands	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 8186 	beq.w	8005bf8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d00b      	beq.n	800590c <HAL_GPIO_Init+0x4c>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d007      	beq.n	800590c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005900:	2b11      	cmp	r3, #17
 8005902:	d003      	beq.n	800590c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b12      	cmp	r3, #18
 800590a:	d130      	bne.n	800596e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	2203      	movs	r2, #3
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	43db      	mvns	r3, r3
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	4013      	ands	r3, r2
 8005922:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4313      	orrs	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005942:	2201      	movs	r2, #1
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43db      	mvns	r3, r3
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	4013      	ands	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	091b      	lsrs	r3, r3, #4
 8005958:	f003 0201 	and.w	r2, r3, #1
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	4313      	orrs	r3, r2
 8005966:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	2203      	movs	r2, #3
 800597a:	fa02 f303 	lsl.w	r3, r2, r3
 800597e:	43db      	mvns	r3, r3
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	4013      	ands	r3, r2
 8005984:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	fa02 f303 	lsl.w	r3, r2, r3
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	4313      	orrs	r3, r2
 8005996:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d003      	beq.n	80059ae <HAL_GPIO_Init+0xee>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b12      	cmp	r3, #18
 80059ac:	d123      	bne.n	80059f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	08da      	lsrs	r2, r3, #3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3208      	adds	r2, #8
 80059b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	220f      	movs	r2, #15
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	43db      	mvns	r3, r3
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	4013      	ands	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	fa02 f303 	lsl.w	r3, r2, r3
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	08da      	lsrs	r2, r3, #3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3208      	adds	r2, #8
 80059f0:	69b9      	ldr	r1, [r7, #24]
 80059f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	2203      	movs	r2, #3
 8005a02:	fa02 f303 	lsl.w	r3, r2, r3
 8005a06:	43db      	mvns	r3, r3
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f003 0203 	and.w	r2, r3, #3
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 80e0 	beq.w	8005bf8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a38:	4b2f      	ldr	r3, [pc, #188]	; (8005af8 <HAL_GPIO_Init+0x238>)
 8005a3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a3e:	4a2e      	ldr	r2, [pc, #184]	; (8005af8 <HAL_GPIO_Init+0x238>)
 8005a40:	f043 0302 	orr.w	r3, r3, #2
 8005a44:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005a48:	4b2b      	ldr	r3, [pc, #172]	; (8005af8 <HAL_GPIO_Init+0x238>)
 8005a4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a56:	4a29      	ldr	r2, [pc, #164]	; (8005afc <HAL_GPIO_Init+0x23c>)
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	089b      	lsrs	r3, r3, #2
 8005a5c:	3302      	adds	r3, #2
 8005a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	220f      	movs	r2, #15
 8005a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a72:	43db      	mvns	r3, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4013      	ands	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a20      	ldr	r2, [pc, #128]	; (8005b00 <HAL_GPIO_Init+0x240>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d052      	beq.n	8005b28 <HAL_GPIO_Init+0x268>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a1f      	ldr	r2, [pc, #124]	; (8005b04 <HAL_GPIO_Init+0x244>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d031      	beq.n	8005aee <HAL_GPIO_Init+0x22e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a1e      	ldr	r2, [pc, #120]	; (8005b08 <HAL_GPIO_Init+0x248>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d02b      	beq.n	8005aea <HAL_GPIO_Init+0x22a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a1d      	ldr	r2, [pc, #116]	; (8005b0c <HAL_GPIO_Init+0x24c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d025      	beq.n	8005ae6 <HAL_GPIO_Init+0x226>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a1c      	ldr	r2, [pc, #112]	; (8005b10 <HAL_GPIO_Init+0x250>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d01f      	beq.n	8005ae2 <HAL_GPIO_Init+0x222>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a1b      	ldr	r2, [pc, #108]	; (8005b14 <HAL_GPIO_Init+0x254>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d019      	beq.n	8005ade <HAL_GPIO_Init+0x21e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a1a      	ldr	r2, [pc, #104]	; (8005b18 <HAL_GPIO_Init+0x258>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d013      	beq.n	8005ada <HAL_GPIO_Init+0x21a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a19      	ldr	r2, [pc, #100]	; (8005b1c <HAL_GPIO_Init+0x25c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00d      	beq.n	8005ad6 <HAL_GPIO_Init+0x216>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a18      	ldr	r2, [pc, #96]	; (8005b20 <HAL_GPIO_Init+0x260>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d007      	beq.n	8005ad2 <HAL_GPIO_Init+0x212>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a17      	ldr	r2, [pc, #92]	; (8005b24 <HAL_GPIO_Init+0x264>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d101      	bne.n	8005ace <HAL_GPIO_Init+0x20e>
 8005aca:	2309      	movs	r3, #9
 8005acc:	e02d      	b.n	8005b2a <HAL_GPIO_Init+0x26a>
 8005ace:	230a      	movs	r3, #10
 8005ad0:	e02b      	b.n	8005b2a <HAL_GPIO_Init+0x26a>
 8005ad2:	2308      	movs	r3, #8
 8005ad4:	e029      	b.n	8005b2a <HAL_GPIO_Init+0x26a>
 8005ad6:	2307      	movs	r3, #7
 8005ad8:	e027      	b.n	8005b2a <HAL_GPIO_Init+0x26a>
 8005ada:	2306      	movs	r3, #6
 8005adc:	e025      	b.n	8005b2a <HAL_GPIO_Init+0x26a>
 8005ade:	2305      	movs	r3, #5
 8005ae0:	e023      	b.n	8005b2a <HAL_GPIO_Init+0x26a>
 8005ae2:	2304      	movs	r3, #4
 8005ae4:	e021      	b.n	8005b2a <HAL_GPIO_Init+0x26a>
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e01f      	b.n	8005b2a <HAL_GPIO_Init+0x26a>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e01d      	b.n	8005b2a <HAL_GPIO_Init+0x26a>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e01b      	b.n	8005b2a <HAL_GPIO_Init+0x26a>
 8005af2:	bf00      	nop
 8005af4:	58000080 	.word	0x58000080
 8005af8:	58024400 	.word	0x58024400
 8005afc:	58000400 	.word	0x58000400
 8005b00:	58020000 	.word	0x58020000
 8005b04:	58020400 	.word	0x58020400
 8005b08:	58020800 	.word	0x58020800
 8005b0c:	58020c00 	.word	0x58020c00
 8005b10:	58021000 	.word	0x58021000
 8005b14:	58021400 	.word	0x58021400
 8005b18:	58021800 	.word	0x58021800
 8005b1c:	58021c00 	.word	0x58021c00
 8005b20:	58022000 	.word	0x58022000
 8005b24:	58022400 	.word	0x58022400
 8005b28:	2300      	movs	r3, #0
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	f002 0203 	and.w	r2, r2, #3
 8005b30:	0092      	lsls	r2, r2, #2
 8005b32:	4093      	lsls	r3, r2
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b3a:	4938      	ldr	r1, [pc, #224]	; (8005c1c <HAL_GPIO_Init+0x35c>)
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	089b      	lsrs	r3, r3, #2
 8005b40:	3302      	adds	r3, #2
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	43db      	mvns	r3, r3
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	4013      	ands	r3, r2
 8005b56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	43db      	mvns	r3, r3
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	43db      	mvns	r3, r3
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	4013      	ands	r3, r2
 8005bac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005bc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	43db      	mvns	r3, r3
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005bf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	fa22 f303 	lsr.w	r3, r2, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f47f ae63 	bne.w	80058d4 <HAL_GPIO_Init+0x14>
  }
}
 8005c0e:	bf00      	nop
 8005c10:	3724      	adds	r7, #36	; 0x24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	58000400 	.word	0x58000400

08005c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	807b      	strh	r3, [r7, #2]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c30:	787b      	ldrb	r3, [r7, #1]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c36:	887a      	ldrh	r2, [r7, #2]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005c3c:	e003      	b.n	8005c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005c3e:	887b      	ldrh	r3, [r7, #2]
 8005c40:	041a      	lsls	r2, r3, #16
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	619a      	str	r2, [r3, #24]
}
 8005c46:	bf00      	nop
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	695a      	ldr	r2, [r3, #20]
 8005c62:	887b      	ldrh	r3, [r7, #2]
 8005c64:	401a      	ands	r2, r3
 8005c66:	887b      	ldrh	r3, [r7, #2]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d104      	bne.n	8005c76 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005c6c:	887b      	ldrh	r3, [r7, #2]
 8005c6e:	041a      	lsls	r2, r3, #16
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005c74:	e002      	b.n	8005c7c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005c76:	887a      	ldrh	r2, [r7, #2]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	619a      	str	r2, [r3, #24]
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005c90:	4b19      	ldr	r3, [pc, #100]	; (8005cf8 <HAL_PWREx_ConfigSupply+0x70>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d00a      	beq.n	8005cb2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005c9c:	4b16      	ldr	r3, [pc, #88]	; (8005cf8 <HAL_PWREx_ConfigSupply+0x70>)
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d001      	beq.n	8005cae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e01f      	b.n	8005cee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	e01d      	b.n	8005cee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005cb2:	4b11      	ldr	r3, [pc, #68]	; (8005cf8 <HAL_PWREx_ConfigSupply+0x70>)
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f023 0207 	bic.w	r2, r3, #7
 8005cba:	490f      	ldr	r1, [pc, #60]	; (8005cf8 <HAL_PWREx_ConfigSupply+0x70>)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005cc2:	f7fc f955 	bl	8001f70 <HAL_GetTick>
 8005cc6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cc8:	e009      	b.n	8005cde <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005cca:	f7fc f951 	bl	8001f70 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cd8:	d901      	bls.n	8005cde <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e007      	b.n	8005cee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cde:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <HAL_PWREx_ConfigSupply+0x70>)
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cea:	d1ee      	bne.n	8005cca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	58024800 	.word	0x58024800

08005cfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08c      	sub	sp, #48	; 0x30
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e3c4      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 8087 	beq.w	8005e2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d1c:	4ba2      	ldr	r3, [pc, #648]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d26:	4ba0      	ldr	r3, [pc, #640]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	2b10      	cmp	r3, #16
 8005d30:	d007      	beq.n	8005d42 <HAL_RCC_OscConfig+0x46>
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	2b18      	cmp	r3, #24
 8005d36:	d110      	bne.n	8005d5a <HAL_RCC_OscConfig+0x5e>
 8005d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d10b      	bne.n	8005d5a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d42:	4b99      	ldr	r3, [pc, #612]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d06c      	beq.n	8005e28 <HAL_RCC_OscConfig+0x12c>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d168      	bne.n	8005e28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e39e      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d62:	d106      	bne.n	8005d72 <HAL_RCC_OscConfig+0x76>
 8005d64:	4b90      	ldr	r3, [pc, #576]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a8f      	ldr	r2, [pc, #572]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	e02e      	b.n	8005dd0 <HAL_RCC_OscConfig+0xd4>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10c      	bne.n	8005d94 <HAL_RCC_OscConfig+0x98>
 8005d7a:	4b8b      	ldr	r3, [pc, #556]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a8a      	ldr	r2, [pc, #552]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	4b88      	ldr	r3, [pc, #544]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a87      	ldr	r2, [pc, #540]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	e01d      	b.n	8005dd0 <HAL_RCC_OscConfig+0xd4>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d9c:	d10c      	bne.n	8005db8 <HAL_RCC_OscConfig+0xbc>
 8005d9e:	4b82      	ldr	r3, [pc, #520]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a81      	ldr	r2, [pc, #516]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005da8:	6013      	str	r3, [r2, #0]
 8005daa:	4b7f      	ldr	r3, [pc, #508]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a7e      	ldr	r2, [pc, #504]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	e00b      	b.n	8005dd0 <HAL_RCC_OscConfig+0xd4>
 8005db8:	4b7b      	ldr	r3, [pc, #492]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a7a      	ldr	r2, [pc, #488]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	4b78      	ldr	r3, [pc, #480]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a77      	ldr	r2, [pc, #476]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d013      	beq.n	8005e00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd8:	f7fc f8ca 	bl	8001f70 <HAL_GetTick>
 8005ddc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005de0:	f7fc f8c6 	bl	8001f70 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b64      	cmp	r3, #100	; 0x64
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e352      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005df2:	4b6d      	ldr	r3, [pc, #436]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0f0      	beq.n	8005de0 <HAL_RCC_OscConfig+0xe4>
 8005dfe:	e014      	b.n	8005e2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e00:	f7fc f8b6 	bl	8001f70 <HAL_GetTick>
 8005e04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e08:	f7fc f8b2 	bl	8001f70 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b64      	cmp	r3, #100	; 0x64
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e33e      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e1a:	4b63      	ldr	r3, [pc, #396]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x10c>
 8005e26:	e000      	b.n	8005e2a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 8092 	beq.w	8005f5c <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e38:	4b5b      	ldr	r3, [pc, #364]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e40:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e42:	4b59      	ldr	r3, [pc, #356]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e46:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d007      	beq.n	8005e5e <HAL_RCC_OscConfig+0x162>
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	2b18      	cmp	r3, #24
 8005e52:	d12d      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x1b4>
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d128      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e5e:	4b52      	ldr	r3, [pc, #328]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <HAL_RCC_OscConfig+0x17a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e310      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e76:	f7fc f8a9 	bl	8001fcc <HAL_GetREVID>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d80a      	bhi.n	8005e9a <HAL_RCC_OscConfig+0x19e>
 8005e84:	4b48      	ldr	r3, [pc, #288]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	031b      	lsls	r3, r3, #12
 8005e92:	4945      	ldr	r1, [pc, #276]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e98:	e060      	b.n	8005f5c <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e9a:	4b43      	ldr	r3, [pc, #268]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	061b      	lsls	r3, r3, #24
 8005ea8:	493f      	ldr	r1, [pc, #252]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005eae:	e055      	b.n	8005f5c <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d038      	beq.n	8005f2a <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005eb8:	4b3b      	ldr	r3, [pc, #236]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f023 0219 	bic.w	r2, r3, #25
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	4938      	ldr	r1, [pc, #224]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eca:	f7fc f851 	bl	8001f70 <HAL_GetTick>
 8005ece:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ed2:	f7fc f84d 	bl	8001f70 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e2d9      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ee4:	4b30      	ldr	r3, [pc, #192]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0f0      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef0:	f7fc f86c 	bl	8001fcc <HAL_GetREVID>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	f241 0303 	movw	r3, #4099	; 0x1003
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d80a      	bhi.n	8005f14 <HAL_RCC_OscConfig+0x218>
 8005efe:	4b2a      	ldr	r3, [pc, #168]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	031b      	lsls	r3, r3, #12
 8005f0c:	4926      	ldr	r1, [pc, #152]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	604b      	str	r3, [r1, #4]
 8005f12:	e023      	b.n	8005f5c <HAL_RCC_OscConfig+0x260>
 8005f14:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	061b      	lsls	r3, r3, #24
 8005f22:	4921      	ldr	r1, [pc, #132]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	604b      	str	r3, [r1, #4]
 8005f28:	e018      	b.n	8005f5c <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f2a:	4b1f      	ldr	r3, [pc, #124]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a1e      	ldr	r2, [pc, #120]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005f30:	f023 0301 	bic.w	r3, r3, #1
 8005f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f36:	f7fc f81b 	bl	8001f70 <HAL_GetTick>
 8005f3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f3c:	e008      	b.n	8005f50 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f3e:	f7fc f817 	bl	8001f70 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e2a3      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f50:	4b15      	ldr	r3, [pc, #84]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1f0      	bne.n	8005f3e <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0310 	and.w	r3, r3, #16
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 8091 	beq.w	800608c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f6a:	4b0f      	ldr	r3, [pc, #60]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f72:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f74:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f78:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d007      	beq.n	8005f90 <HAL_RCC_OscConfig+0x294>
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	2b18      	cmp	r3, #24
 8005f84:	d12f      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x2ea>
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f003 0303 	and.w	r3, r3, #3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d12a      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f90:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <HAL_RCC_OscConfig+0x2ac>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d007      	beq.n	8005fac <HAL_RCC_OscConfig+0x2b0>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	2b80      	cmp	r3, #128	; 0x80
 8005fa2:	d003      	beq.n	8005fac <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e277      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
 8005fa8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fac:	f7fc f80e 	bl	8001fcc <HAL_GetREVID>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	f241 0303 	movw	r3, #4099	; 0x1003
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d80a      	bhi.n	8005fd0 <HAL_RCC_OscConfig+0x2d4>
 8005fba:	4ba2      	ldr	r3, [pc, #648]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	069b      	lsls	r3, r3, #26
 8005fc8:	499e      	ldr	r1, [pc, #632]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fce:	e05d      	b.n	800608c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fd0:	4b9c      	ldr	r3, [pc, #624]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	061b      	lsls	r3, r3, #24
 8005fde:	4999      	ldr	r1, [pc, #612]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fe4:	e052      	b.n	800608c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d035      	beq.n	800605a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005fee:	4b95      	ldr	r3, [pc, #596]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a94      	ldr	r2, [pc, #592]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8005ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ffa:	f7fb ffb9 	bl	8001f70 <HAL_GetTick>
 8005ffe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006000:	e008      	b.n	8006014 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006002:	f7fb ffb5 	bl	8001f70 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	2b02      	cmp	r3, #2
 800600e:	d901      	bls.n	8006014 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e241      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006014:	4b8b      	ldr	r3, [pc, #556]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0f0      	beq.n	8006002 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006020:	f7fb ffd4 	bl	8001fcc <HAL_GetREVID>
 8006024:	4602      	mov	r2, r0
 8006026:	f241 0303 	movw	r3, #4099	; 0x1003
 800602a:	429a      	cmp	r2, r3
 800602c:	d80a      	bhi.n	8006044 <HAL_RCC_OscConfig+0x348>
 800602e:	4b85      	ldr	r3, [pc, #532]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	069b      	lsls	r3, r3, #26
 800603c:	4981      	ldr	r1, [pc, #516]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 800603e:	4313      	orrs	r3, r2
 8006040:	604b      	str	r3, [r1, #4]
 8006042:	e023      	b.n	800608c <HAL_RCC_OscConfig+0x390>
 8006044:	4b7f      	ldr	r3, [pc, #508]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	061b      	lsls	r3, r3, #24
 8006052:	497c      	ldr	r1, [pc, #496]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8006054:	4313      	orrs	r3, r2
 8006056:	60cb      	str	r3, [r1, #12]
 8006058:	e018      	b.n	800608c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800605a:	4b7a      	ldr	r3, [pc, #488]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a79      	ldr	r2, [pc, #484]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8006060:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006066:	f7fb ff83 	bl	8001f70 <HAL_GetTick>
 800606a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800606c:	e008      	b.n	8006080 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800606e:	f7fb ff7f 	bl	8001f70 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e20b      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006080:	4b70      	ldr	r3, [pc, #448]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1f0      	bne.n	800606e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0308 	and.w	r3, r3, #8
 8006094:	2b00      	cmp	r3, #0
 8006096:	d036      	beq.n	8006106 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d019      	beq.n	80060d4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060a0:	4b68      	ldr	r3, [pc, #416]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 80060a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060a4:	4a67      	ldr	r2, [pc, #412]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 80060a6:	f043 0301 	orr.w	r3, r3, #1
 80060aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ac:	f7fb ff60 	bl	8001f70 <HAL_GetTick>
 80060b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060b4:	f7fb ff5c 	bl	8001f70 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e1e8      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060c6:	4b5f      	ldr	r3, [pc, #380]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 80060c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0f0      	beq.n	80060b4 <HAL_RCC_OscConfig+0x3b8>
 80060d2:	e018      	b.n	8006106 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060d4:	4b5b      	ldr	r3, [pc, #364]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 80060d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060d8:	4a5a      	ldr	r2, [pc, #360]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 80060da:	f023 0301 	bic.w	r3, r3, #1
 80060de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e0:	f7fb ff46 	bl	8001f70 <HAL_GetTick>
 80060e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060e8:	f7fb ff42 	bl	8001f70 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e1ce      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060fa:	4b52      	ldr	r3, [pc, #328]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 80060fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1f0      	bne.n	80060e8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	d036      	beq.n	8006180 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d019      	beq.n	800614e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800611a:	4b4a      	ldr	r3, [pc, #296]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a49      	ldr	r2, [pc, #292]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8006120:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006124:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006126:	f7fb ff23 	bl	8001f70 <HAL_GetTick>
 800612a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800612c:	e008      	b.n	8006140 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800612e:	f7fb ff1f 	bl	8001f70 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e1ab      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006140:	4b40      	ldr	r3, [pc, #256]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0f0      	beq.n	800612e <HAL_RCC_OscConfig+0x432>
 800614c:	e018      	b.n	8006180 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800614e:	4b3d      	ldr	r3, [pc, #244]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a3c      	ldr	r2, [pc, #240]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8006154:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006158:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800615a:	f7fb ff09 	bl	8001f70 <HAL_GetTick>
 800615e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006160:	e008      	b.n	8006174 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006162:	f7fb ff05 	bl	8001f70 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	2b02      	cmp	r3, #2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e191      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006174:	4b33      	ldr	r3, [pc, #204]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1f0      	bne.n	8006162 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 8086 	beq.w	800629a <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800618e:	4b2e      	ldr	r3, [pc, #184]	; (8006248 <HAL_RCC_OscConfig+0x54c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a2d      	ldr	r2, [pc, #180]	; (8006248 <HAL_RCC_OscConfig+0x54c>)
 8006194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006198:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800619a:	f7fb fee9 	bl	8001f70 <HAL_GetTick>
 800619e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061a0:	e008      	b.n	80061b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80061a2:	f7fb fee5 	bl	8001f70 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b64      	cmp	r3, #100	; 0x64
 80061ae:	d901      	bls.n	80061b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e171      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061b4:	4b24      	ldr	r3, [pc, #144]	; (8006248 <HAL_RCC_OscConfig+0x54c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0f0      	beq.n	80061a2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d106      	bne.n	80061d6 <HAL_RCC_OscConfig+0x4da>
 80061c8:	4b1e      	ldr	r3, [pc, #120]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 80061ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061cc:	4a1d      	ldr	r2, [pc, #116]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 80061ce:	f043 0301 	orr.w	r3, r3, #1
 80061d2:	6713      	str	r3, [r2, #112]	; 0x70
 80061d4:	e02d      	b.n	8006232 <HAL_RCC_OscConfig+0x536>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10c      	bne.n	80061f8 <HAL_RCC_OscConfig+0x4fc>
 80061de:	4b19      	ldr	r3, [pc, #100]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 80061e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e2:	4a18      	ldr	r2, [pc, #96]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 80061e4:	f023 0301 	bic.w	r3, r3, #1
 80061e8:	6713      	str	r3, [r2, #112]	; 0x70
 80061ea:	4b16      	ldr	r3, [pc, #88]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 80061ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ee:	4a15      	ldr	r2, [pc, #84]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 80061f0:	f023 0304 	bic.w	r3, r3, #4
 80061f4:	6713      	str	r3, [r2, #112]	; 0x70
 80061f6:	e01c      	b.n	8006232 <HAL_RCC_OscConfig+0x536>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b05      	cmp	r3, #5
 80061fe:	d10c      	bne.n	800621a <HAL_RCC_OscConfig+0x51e>
 8006200:	4b10      	ldr	r3, [pc, #64]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8006202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006204:	4a0f      	ldr	r2, [pc, #60]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8006206:	f043 0304 	orr.w	r3, r3, #4
 800620a:	6713      	str	r3, [r2, #112]	; 0x70
 800620c:	4b0d      	ldr	r3, [pc, #52]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 800620e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006210:	4a0c      	ldr	r2, [pc, #48]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8006212:	f043 0301 	orr.w	r3, r3, #1
 8006216:	6713      	str	r3, [r2, #112]	; 0x70
 8006218:	e00b      	b.n	8006232 <HAL_RCC_OscConfig+0x536>
 800621a:	4b0a      	ldr	r3, [pc, #40]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 800621c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621e:	4a09      	ldr	r2, [pc, #36]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8006220:	f023 0301 	bic.w	r3, r3, #1
 8006224:	6713      	str	r3, [r2, #112]	; 0x70
 8006226:	4b07      	ldr	r3, [pc, #28]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 8006228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622a:	4a06      	ldr	r2, [pc, #24]	; (8006244 <HAL_RCC_OscConfig+0x548>)
 800622c:	f023 0304 	bic.w	r3, r3, #4
 8006230:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d01a      	beq.n	8006270 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800623a:	f7fb fe99 	bl	8001f70 <HAL_GetTick>
 800623e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006240:	e00f      	b.n	8006262 <HAL_RCC_OscConfig+0x566>
 8006242:	bf00      	nop
 8006244:	58024400 	.word	0x58024400
 8006248:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800624c:	f7fb fe90 	bl	8001f70 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	f241 3288 	movw	r2, #5000	; 0x1388
 800625a:	4293      	cmp	r3, r2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e11a      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006262:	4b8f      	ldr	r3, [pc, #572]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 8006264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0ee      	beq.n	800624c <HAL_RCC_OscConfig+0x550>
 800626e:	e014      	b.n	800629a <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006270:	f7fb fe7e 	bl	8001f70 <HAL_GetTick>
 8006274:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006276:	e00a      	b.n	800628e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006278:	f7fb fe7a 	bl	8001f70 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	f241 3288 	movw	r2, #5000	; 0x1388
 8006286:	4293      	cmp	r3, r2
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e104      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800628e:	4b84      	ldr	r3, [pc, #528]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1ee      	bne.n	8006278 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 80f9 	beq.w	8006496 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80062a4:	4b7e      	ldr	r3, [pc, #504]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062ac:	2b18      	cmp	r3, #24
 80062ae:	f000 80b4 	beq.w	800641a <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	f040 8095 	bne.w	80063e6 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062bc:	4b78      	ldr	r3, [pc, #480]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a77      	ldr	r2, [pc, #476]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 80062c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c8:	f7fb fe52 	bl	8001f70 <HAL_GetTick>
 80062cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062ce:	e008      	b.n	80062e2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062d0:	f7fb fe4e 	bl	8001f70 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e0da      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062e2:	4b6f      	ldr	r3, [pc, #444]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1f0      	bne.n	80062d0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062ee:	4b6c      	ldr	r3, [pc, #432]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 80062f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062f2:	4b6c      	ldr	r3, [pc, #432]	; (80064a4 <HAL_RCC_OscConfig+0x7a8>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80062fe:	0112      	lsls	r2, r2, #4
 8006300:	430a      	orrs	r2, r1
 8006302:	4967      	ldr	r1, [pc, #412]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 8006304:	4313      	orrs	r3, r2
 8006306:	628b      	str	r3, [r1, #40]	; 0x28
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630c:	3b01      	subs	r3, #1
 800630e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006316:	3b01      	subs	r3, #1
 8006318:	025b      	lsls	r3, r3, #9
 800631a:	b29b      	uxth	r3, r3
 800631c:	431a      	orrs	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006322:	3b01      	subs	r3, #1
 8006324:	041b      	lsls	r3, r3, #16
 8006326:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006330:	3b01      	subs	r3, #1
 8006332:	061b      	lsls	r3, r3, #24
 8006334:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006338:	4959      	ldr	r1, [pc, #356]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 800633a:	4313      	orrs	r3, r2
 800633c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800633e:	4b58      	ldr	r3, [pc, #352]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 8006340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006342:	4a57      	ldr	r2, [pc, #348]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 8006344:	f023 0301 	bic.w	r3, r3, #1
 8006348:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800634a:	4b55      	ldr	r3, [pc, #340]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 800634c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800634e:	4b56      	ldr	r3, [pc, #344]	; (80064a8 <HAL_RCC_OscConfig+0x7ac>)
 8006350:	4013      	ands	r3, r2
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006356:	00d2      	lsls	r2, r2, #3
 8006358:	4951      	ldr	r1, [pc, #324]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 800635a:	4313      	orrs	r3, r2
 800635c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800635e:	4b50      	ldr	r3, [pc, #320]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 8006360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006362:	f023 020c 	bic.w	r2, r3, #12
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	494d      	ldr	r1, [pc, #308]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 800636c:	4313      	orrs	r3, r2
 800636e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006370:	4b4b      	ldr	r3, [pc, #300]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	f023 0202 	bic.w	r2, r3, #2
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637c:	4948      	ldr	r1, [pc, #288]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 800637e:	4313      	orrs	r3, r2
 8006380:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006382:	4b47      	ldr	r3, [pc, #284]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 8006384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006386:	4a46      	ldr	r2, [pc, #280]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 8006388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800638c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800638e:	4b44      	ldr	r3, [pc, #272]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	4a43      	ldr	r2, [pc, #268]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 8006394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006398:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800639a:	4b41      	ldr	r3, [pc, #260]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 800639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639e:	4a40      	ldr	r2, [pc, #256]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 80063a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80063a6:	4b3e      	ldr	r3, [pc, #248]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 80063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063aa:	4a3d      	ldr	r2, [pc, #244]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 80063ac:	f043 0301 	orr.w	r3, r3, #1
 80063b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063b2:	4b3b      	ldr	r3, [pc, #236]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a3a      	ldr	r2, [pc, #232]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 80063b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063be:	f7fb fdd7 	bl	8001f70 <HAL_GetTick>
 80063c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063c4:	e008      	b.n	80063d8 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063c6:	f7fb fdd3 	bl	8001f70 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e05f      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063d8:	4b31      	ldr	r3, [pc, #196]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0f0      	beq.n	80063c6 <HAL_RCC_OscConfig+0x6ca>
 80063e4:	e057      	b.n	8006496 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063e6:	4b2e      	ldr	r3, [pc, #184]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a2d      	ldr	r2, [pc, #180]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 80063ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f2:	f7fb fdbd 	bl	8001f70 <HAL_GetTick>
 80063f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063f8:	e008      	b.n	800640c <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063fa:	f7fb fdb9 	bl	8001f70 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e045      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800640c:	4b24      	ldr	r3, [pc, #144]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1f0      	bne.n	80063fa <HAL_RCC_OscConfig+0x6fe>
 8006418:	e03d      	b.n	8006496 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800641a:	4b21      	ldr	r3, [pc, #132]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006420:	4b1f      	ldr	r3, [pc, #124]	; (80064a0 <HAL_RCC_OscConfig+0x7a4>)
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	2b01      	cmp	r3, #1
 800642c:	d031      	beq.n	8006492 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f003 0203 	and.w	r2, r3, #3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006438:	429a      	cmp	r2, r3
 800643a:	d12a      	bne.n	8006492 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	091b      	lsrs	r3, r3, #4
 8006440:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006448:	429a      	cmp	r2, r3
 800644a:	d122      	bne.n	8006492 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006456:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006458:	429a      	cmp	r2, r3
 800645a:	d11a      	bne.n	8006492 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	0a5b      	lsrs	r3, r3, #9
 8006460:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006468:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800646a:	429a      	cmp	r2, r3
 800646c:	d111      	bne.n	8006492 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	0c1b      	lsrs	r3, r3, #16
 8006472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800647c:	429a      	cmp	r2, r3
 800647e:	d108      	bne.n	8006492 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	0e1b      	lsrs	r3, r3, #24
 8006484:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800648e:	429a      	cmp	r2, r3
 8006490:	d001      	beq.n	8006496 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3730      	adds	r7, #48	; 0x30
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	58024400 	.word	0x58024400
 80064a4:	fffffc0c 	.word	0xfffffc0c
 80064a8:	ffff0007 	.word	0xffff0007

080064ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e19c      	b.n	80067fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064c0:	4b8a      	ldr	r3, [pc, #552]	; (80066ec <HAL_RCC_ClockConfig+0x240>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 030f 	and.w	r3, r3, #15
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d910      	bls.n	80064f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ce:	4b87      	ldr	r3, [pc, #540]	; (80066ec <HAL_RCC_ClockConfig+0x240>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f023 020f 	bic.w	r2, r3, #15
 80064d6:	4985      	ldr	r1, [pc, #532]	; (80066ec <HAL_RCC_ClockConfig+0x240>)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	4313      	orrs	r3, r2
 80064dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064de:	4b83      	ldr	r3, [pc, #524]	; (80066ec <HAL_RCC_ClockConfig+0x240>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d001      	beq.n	80064f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e184      	b.n	80067fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d010      	beq.n	800651e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	4b7b      	ldr	r3, [pc, #492]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006508:	429a      	cmp	r2, r3
 800650a:	d908      	bls.n	800651e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800650c:	4b78      	ldr	r3, [pc, #480]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	4975      	ldr	r1, [pc, #468]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 800651a:	4313      	orrs	r3, r2
 800651c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	2b00      	cmp	r3, #0
 8006528:	d010      	beq.n	800654c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695a      	ldr	r2, [r3, #20]
 800652e:	4b70      	ldr	r3, [pc, #448]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006536:	429a      	cmp	r2, r3
 8006538:	d908      	bls.n	800654c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800653a:	4b6d      	ldr	r3, [pc, #436]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	496a      	ldr	r1, [pc, #424]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 8006548:	4313      	orrs	r3, r2
 800654a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0310 	and.w	r3, r3, #16
 8006554:	2b00      	cmp	r3, #0
 8006556:	d010      	beq.n	800657a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	699a      	ldr	r2, [r3, #24]
 800655c:	4b64      	ldr	r3, [pc, #400]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006564:	429a      	cmp	r2, r3
 8006566:	d908      	bls.n	800657a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006568:	4b61      	ldr	r3, [pc, #388]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	495e      	ldr	r1, [pc, #376]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 8006576:	4313      	orrs	r3, r2
 8006578:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0320 	and.w	r3, r3, #32
 8006582:	2b00      	cmp	r3, #0
 8006584:	d010      	beq.n	80065a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	69da      	ldr	r2, [r3, #28]
 800658a:	4b59      	ldr	r3, [pc, #356]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006592:	429a      	cmp	r2, r3
 8006594:	d908      	bls.n	80065a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006596:	4b56      	ldr	r3, [pc, #344]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	4953      	ldr	r1, [pc, #332]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d010      	beq.n	80065d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	4b4d      	ldr	r3, [pc, #308]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d908      	bls.n	80065d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065c4:	4b4a      	ldr	r3, [pc, #296]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	f023 020f 	bic.w	r2, r3, #15
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	4947      	ldr	r1, [pc, #284]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d055      	beq.n	800668e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80065e2:	4b43      	ldr	r3, [pc, #268]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	4940      	ldr	r1, [pc, #256]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d107      	bne.n	800660c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065fc:	4b3c      	ldr	r3, [pc, #240]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d121      	bne.n	800664c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e0f6      	b.n	80067fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	2b03      	cmp	r3, #3
 8006612:	d107      	bne.n	8006624 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006614:	4b36      	ldr	r3, [pc, #216]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d115      	bne.n	800664c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e0ea      	b.n	80067fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d107      	bne.n	800663c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800662c:	4b30      	ldr	r3, [pc, #192]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006634:	2b00      	cmp	r3, #0
 8006636:	d109      	bne.n	800664c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e0de      	b.n	80067fa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800663c:	4b2c      	ldr	r3, [pc, #176]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e0d6      	b.n	80067fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800664c:	4b28      	ldr	r3, [pc, #160]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f023 0207 	bic.w	r2, r3, #7
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	4925      	ldr	r1, [pc, #148]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 800665a:	4313      	orrs	r3, r2
 800665c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800665e:	f7fb fc87 	bl	8001f70 <HAL_GetTick>
 8006662:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006664:	e00a      	b.n	800667c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006666:	f7fb fc83 	bl	8001f70 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	f241 3288 	movw	r2, #5000	; 0x1388
 8006674:	4293      	cmp	r3, r2
 8006676:	d901      	bls.n	800667c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e0be      	b.n	80067fa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800667c:	4b1c      	ldr	r3, [pc, #112]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	00db      	lsls	r3, r3, #3
 800668a:	429a      	cmp	r2, r3
 800668c:	d1eb      	bne.n	8006666 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d010      	beq.n	80066bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	4b14      	ldr	r3, [pc, #80]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	f003 030f 	and.w	r3, r3, #15
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d208      	bcs.n	80066bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066aa:	4b11      	ldr	r3, [pc, #68]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	f023 020f 	bic.w	r2, r3, #15
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	490e      	ldr	r1, [pc, #56]	; (80066f0 <HAL_RCC_ClockConfig+0x244>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066bc:	4b0b      	ldr	r3, [pc, #44]	; (80066ec <HAL_RCC_ClockConfig+0x240>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 030f 	and.w	r3, r3, #15
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d214      	bcs.n	80066f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ca:	4b08      	ldr	r3, [pc, #32]	; (80066ec <HAL_RCC_ClockConfig+0x240>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f023 020f 	bic.w	r2, r3, #15
 80066d2:	4906      	ldr	r1, [pc, #24]	; (80066ec <HAL_RCC_ClockConfig+0x240>)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066da:	4b04      	ldr	r3, [pc, #16]	; (80066ec <HAL_RCC_ClockConfig+0x240>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 030f 	and.w	r3, r3, #15
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d005      	beq.n	80066f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e086      	b.n	80067fa <HAL_RCC_ClockConfig+0x34e>
 80066ec:	52002000 	.word	0x52002000
 80066f0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d010      	beq.n	8006722 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	691a      	ldr	r2, [r3, #16]
 8006704:	4b3f      	ldr	r3, [pc, #252]	; (8006804 <HAL_RCC_ClockConfig+0x358>)
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800670c:	429a      	cmp	r2, r3
 800670e:	d208      	bcs.n	8006722 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006710:	4b3c      	ldr	r3, [pc, #240]	; (8006804 <HAL_RCC_ClockConfig+0x358>)
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	4939      	ldr	r1, [pc, #228]	; (8006804 <HAL_RCC_ClockConfig+0x358>)
 800671e:	4313      	orrs	r3, r2
 8006720:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0308 	and.w	r3, r3, #8
 800672a:	2b00      	cmp	r3, #0
 800672c:	d010      	beq.n	8006750 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	695a      	ldr	r2, [r3, #20]
 8006732:	4b34      	ldr	r3, [pc, #208]	; (8006804 <HAL_RCC_ClockConfig+0x358>)
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800673a:	429a      	cmp	r2, r3
 800673c:	d208      	bcs.n	8006750 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800673e:	4b31      	ldr	r3, [pc, #196]	; (8006804 <HAL_RCC_ClockConfig+0x358>)
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	492e      	ldr	r1, [pc, #184]	; (8006804 <HAL_RCC_ClockConfig+0x358>)
 800674c:	4313      	orrs	r3, r2
 800674e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0310 	and.w	r3, r3, #16
 8006758:	2b00      	cmp	r3, #0
 800675a:	d010      	beq.n	800677e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699a      	ldr	r2, [r3, #24]
 8006760:	4b28      	ldr	r3, [pc, #160]	; (8006804 <HAL_RCC_ClockConfig+0x358>)
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006768:	429a      	cmp	r2, r3
 800676a:	d208      	bcs.n	800677e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800676c:	4b25      	ldr	r3, [pc, #148]	; (8006804 <HAL_RCC_ClockConfig+0x358>)
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	4922      	ldr	r1, [pc, #136]	; (8006804 <HAL_RCC_ClockConfig+0x358>)
 800677a:	4313      	orrs	r3, r2
 800677c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b00      	cmp	r3, #0
 8006788:	d010      	beq.n	80067ac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	69da      	ldr	r2, [r3, #28]
 800678e:	4b1d      	ldr	r3, [pc, #116]	; (8006804 <HAL_RCC_ClockConfig+0x358>)
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006796:	429a      	cmp	r2, r3
 8006798:	d208      	bcs.n	80067ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800679a:	4b1a      	ldr	r3, [pc, #104]	; (8006804 <HAL_RCC_ClockConfig+0x358>)
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	4917      	ldr	r1, [pc, #92]	; (8006804 <HAL_RCC_ClockConfig+0x358>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80067ac:	f000 f834 	bl	8006818 <HAL_RCC_GetSysClockFreq>
 80067b0:	4601      	mov	r1, r0
 80067b2:	4b14      	ldr	r3, [pc, #80]	; (8006804 <HAL_RCC_ClockConfig+0x358>)
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	0a1b      	lsrs	r3, r3, #8
 80067b8:	f003 030f 	and.w	r3, r3, #15
 80067bc:	4a12      	ldr	r2, [pc, #72]	; (8006808 <HAL_RCC_ClockConfig+0x35c>)
 80067be:	5cd3      	ldrb	r3, [r2, r3]
 80067c0:	f003 031f 	and.w	r3, r3, #31
 80067c4:	fa21 f303 	lsr.w	r3, r1, r3
 80067c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80067ca:	4b0e      	ldr	r3, [pc, #56]	; (8006804 <HAL_RCC_ClockConfig+0x358>)
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	4a0d      	ldr	r2, [pc, #52]	; (8006808 <HAL_RCC_ClockConfig+0x35c>)
 80067d4:	5cd3      	ldrb	r3, [r2, r3]
 80067d6:	f003 031f 	and.w	r3, r3, #31
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	fa22 f303 	lsr.w	r3, r2, r3
 80067e0:	4a0a      	ldr	r2, [pc, #40]	; (800680c <HAL_RCC_ClockConfig+0x360>)
 80067e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80067e4:	4a0a      	ldr	r2, [pc, #40]	; (8006810 <HAL_RCC_ClockConfig+0x364>)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80067ea:	4b0a      	ldr	r3, [pc, #40]	; (8006814 <HAL_RCC_ClockConfig+0x368>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fb fb74 	bl	8001edc <HAL_InitTick>
 80067f4:	4603      	mov	r3, r0
 80067f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	58024400 	.word	0x58024400
 8006808:	0800c98c 	.word	0x0800c98c
 800680c:	2400001c 	.word	0x2400001c
 8006810:	24000018 	.word	0x24000018
 8006814:	24000020 	.word	0x24000020

08006818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006818:	b480      	push	{r7}
 800681a:	b089      	sub	sp, #36	; 0x24
 800681c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800681e:	4baf      	ldr	r3, [pc, #700]	; (8006adc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006826:	2b18      	cmp	r3, #24
 8006828:	f200 814e 	bhi.w	8006ac8 <HAL_RCC_GetSysClockFreq+0x2b0>
 800682c:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <HAL_RCC_GetSysClockFreq+0x1c>)
 800682e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006832:	bf00      	nop
 8006834:	08006899 	.word	0x08006899
 8006838:	08006ac9 	.word	0x08006ac9
 800683c:	08006ac9 	.word	0x08006ac9
 8006840:	08006ac9 	.word	0x08006ac9
 8006844:	08006ac9 	.word	0x08006ac9
 8006848:	08006ac9 	.word	0x08006ac9
 800684c:	08006ac9 	.word	0x08006ac9
 8006850:	08006ac9 	.word	0x08006ac9
 8006854:	080068bf 	.word	0x080068bf
 8006858:	08006ac9 	.word	0x08006ac9
 800685c:	08006ac9 	.word	0x08006ac9
 8006860:	08006ac9 	.word	0x08006ac9
 8006864:	08006ac9 	.word	0x08006ac9
 8006868:	08006ac9 	.word	0x08006ac9
 800686c:	08006ac9 	.word	0x08006ac9
 8006870:	08006ac9 	.word	0x08006ac9
 8006874:	080068c5 	.word	0x080068c5
 8006878:	08006ac9 	.word	0x08006ac9
 800687c:	08006ac9 	.word	0x08006ac9
 8006880:	08006ac9 	.word	0x08006ac9
 8006884:	08006ac9 	.word	0x08006ac9
 8006888:	08006ac9 	.word	0x08006ac9
 800688c:	08006ac9 	.word	0x08006ac9
 8006890:	08006ac9 	.word	0x08006ac9
 8006894:	080068cb 	.word	0x080068cb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006898:	4b90      	ldr	r3, [pc, #576]	; (8006adc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d009      	beq.n	80068b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068a4:	4b8d      	ldr	r3, [pc, #564]	; (8006adc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	08db      	lsrs	r3, r3, #3
 80068aa:	f003 0303 	and.w	r3, r3, #3
 80068ae:	4a8c      	ldr	r2, [pc, #560]	; (8006ae0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80068b0:	fa22 f303 	lsr.w	r3, r2, r3
 80068b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80068b6:	e10a      	b.n	8006ace <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80068b8:	4b89      	ldr	r3, [pc, #548]	; (8006ae0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80068ba:	61bb      	str	r3, [r7, #24]
    break;
 80068bc:	e107      	b.n	8006ace <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80068be:	4b89      	ldr	r3, [pc, #548]	; (8006ae4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80068c0:	61bb      	str	r3, [r7, #24]
    break;
 80068c2:	e104      	b.n	8006ace <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80068c4:	4b88      	ldr	r3, [pc, #544]	; (8006ae8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80068c6:	61bb      	str	r3, [r7, #24]
    break;
 80068c8:	e101      	b.n	8006ace <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068ca:	4b84      	ldr	r3, [pc, #528]	; (8006adc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80068d4:	4b81      	ldr	r3, [pc, #516]	; (8006adc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d8:	091b      	lsrs	r3, r3, #4
 80068da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80068e0:	4b7e      	ldr	r3, [pc, #504]	; (8006adc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80068ea:	4b7c      	ldr	r3, [pc, #496]	; (8006adc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ee:	08db      	lsrs	r3, r3, #3
 80068f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	fb02 f303 	mul.w	r3, r2, r3
 80068fa:	ee07 3a90 	vmov	s15, r3
 80068fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006902:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 80da 	beq.w	8006ac2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d05a      	beq.n	80069ca <HAL_RCC_GetSysClockFreq+0x1b2>
 8006914:	2b01      	cmp	r3, #1
 8006916:	d302      	bcc.n	800691e <HAL_RCC_GetSysClockFreq+0x106>
 8006918:	2b02      	cmp	r3, #2
 800691a:	d078      	beq.n	8006a0e <HAL_RCC_GetSysClockFreq+0x1f6>
 800691c:	e099      	b.n	8006a52 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800691e:	4b6f      	ldr	r3, [pc, #444]	; (8006adc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b00      	cmp	r3, #0
 8006928:	d02d      	beq.n	8006986 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800692a:	4b6c      	ldr	r3, [pc, #432]	; (8006adc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	08db      	lsrs	r3, r3, #3
 8006930:	f003 0303 	and.w	r3, r3, #3
 8006934:	4a6a      	ldr	r2, [pc, #424]	; (8006ae0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006936:	fa22 f303 	lsr.w	r3, r2, r3
 800693a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	ee07 3a90 	vmov	s15, r3
 8006942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	ee07 3a90 	vmov	s15, r3
 800694c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006954:	4b61      	ldr	r3, [pc, #388]	; (8006adc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800695c:	ee07 3a90 	vmov	s15, r3
 8006960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006964:	ed97 6a02 	vldr	s12, [r7, #8]
 8006968:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006aec <HAL_RCC_GetSysClockFreq+0x2d4>
 800696c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800697c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006980:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006984:	e087      	b.n	8006a96 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	ee07 3a90 	vmov	s15, r3
 800698c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006990:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006af0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006998:	4b50      	ldr	r3, [pc, #320]	; (8006adc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800699a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a0:	ee07 3a90 	vmov	s15, r3
 80069a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80069ac:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006aec <HAL_RCC_GetSysClockFreq+0x2d4>
 80069b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069c8:	e065      	b.n	8006a96 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	ee07 3a90 	vmov	s15, r3
 80069d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006af4 <HAL_RCC_GetSysClockFreq+0x2dc>
 80069d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069dc:	4b3f      	ldr	r3, [pc, #252]	; (8006adc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e4:	ee07 3a90 	vmov	s15, r3
 80069e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80069f0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006aec <HAL_RCC_GetSysClockFreq+0x2d4>
 80069f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a0c:	e043      	b.n	8006a96 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	ee07 3a90 	vmov	s15, r3
 8006a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a18:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006af8 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006a1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a20:	4b2e      	ldr	r3, [pc, #184]	; (8006adc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a28:	ee07 3a90 	vmov	s15, r3
 8006a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a30:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a34:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006aec <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a50:	e021      	b.n	8006a96 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	ee07 3a90 	vmov	s15, r3
 8006a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006af4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006a60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a64:	4b1d      	ldr	r3, [pc, #116]	; (8006adc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a6c:	ee07 3a90 	vmov	s15, r3
 8006a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a74:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a78:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006aec <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a94:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006a96:	4b11      	ldr	r3, [pc, #68]	; (8006adc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9a:	0a5b      	lsrs	r3, r3, #9
 8006a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	ee07 3a90 	vmov	s15, r3
 8006aaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006aae:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006aba:	ee17 3a90 	vmov	r3, s15
 8006abe:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006ac0:	e005      	b.n	8006ace <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	61bb      	str	r3, [r7, #24]
    break;
 8006ac6:	e002      	b.n	8006ace <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006ac8:	4b06      	ldr	r3, [pc, #24]	; (8006ae4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006aca:	61bb      	str	r3, [r7, #24]
    break;
 8006acc:	bf00      	nop
  }

  return sysclockfreq;
 8006ace:	69bb      	ldr	r3, [r7, #24]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3724      	adds	r7, #36	; 0x24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	58024400 	.word	0x58024400
 8006ae0:	03d09000 	.word	0x03d09000
 8006ae4:	003d0900 	.word	0x003d0900
 8006ae8:	017d7840 	.word	0x017d7840
 8006aec:	46000000 	.word	0x46000000
 8006af0:	4c742400 	.word	0x4c742400
 8006af4:	4a742400 	.word	0x4a742400
 8006af8:	4bbebc20 	.word	0x4bbebc20

08006afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b02:	f7ff fe89 	bl	8006818 <HAL_RCC_GetSysClockFreq>
 8006b06:	4601      	mov	r1, r0
 8006b08:	4b10      	ldr	r3, [pc, #64]	; (8006b4c <HAL_RCC_GetHCLKFreq+0x50>)
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	0a1b      	lsrs	r3, r3, #8
 8006b0e:	f003 030f 	and.w	r3, r3, #15
 8006b12:	4a0f      	ldr	r2, [pc, #60]	; (8006b50 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b14:	5cd3      	ldrb	r3, [r2, r3]
 8006b16:	f003 031f 	and.w	r3, r3, #31
 8006b1a:	fa21 f303 	lsr.w	r3, r1, r3
 8006b1e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b20:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <HAL_RCC_GetHCLKFreq+0x50>)
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f003 030f 	and.w	r3, r3, #15
 8006b28:	4a09      	ldr	r2, [pc, #36]	; (8006b50 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b2a:	5cd3      	ldrb	r3, [r2, r3]
 8006b2c:	f003 031f 	and.w	r3, r3, #31
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	fa22 f303 	lsr.w	r3, r2, r3
 8006b36:	4a07      	ldr	r2, [pc, #28]	; (8006b54 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b38:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b3a:	4a07      	ldr	r2, [pc, #28]	; (8006b58 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006b40:	4b04      	ldr	r3, [pc, #16]	; (8006b54 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b42:	681b      	ldr	r3, [r3, #0]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	58024400 	.word	0x58024400
 8006b50:	0800c98c 	.word	0x0800c98c
 8006b54:	2400001c 	.word	0x2400001c
 8006b58:	24000018 	.word	0x24000018

08006b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006b60:	f7ff ffcc 	bl	8006afc <HAL_RCC_GetHCLKFreq>
 8006b64:	4601      	mov	r1, r0
 8006b66:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	091b      	lsrs	r3, r3, #4
 8006b6c:	f003 0307 	and.w	r3, r3, #7
 8006b70:	4a04      	ldr	r2, [pc, #16]	; (8006b84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b72:	5cd3      	ldrb	r3, [r2, r3]
 8006b74:	f003 031f 	and.w	r3, r3, #31
 8006b78:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	58024400 	.word	0x58024400
 8006b84:	0800c98c 	.word	0x0800c98c

08006b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006b8c:	f7ff ffb6 	bl	8006afc <HAL_RCC_GetHCLKFreq>
 8006b90:	4601      	mov	r1, r0
 8006b92:	4b06      	ldr	r3, [pc, #24]	; (8006bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	0a1b      	lsrs	r3, r3, #8
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	4a04      	ldr	r2, [pc, #16]	; (8006bb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b9e:	5cd3      	ldrb	r3, [r2, r3]
 8006ba0:	f003 031f 	and.w	r3, r3, #31
 8006ba4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	58024400 	.word	0x58024400
 8006bb0:	0800c98c 	.word	0x0800c98c

08006bb4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d03d      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bd8:	d013      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bde:	d802      	bhi.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d007      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006be4:	e01f      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006be6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bea:	d013      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006bec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bf0:	d01c      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006bf2:	e018      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf4:	4baf      	ldr	r3, [pc, #700]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	4aae      	ldr	r2, [pc, #696]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c00:	e015      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3304      	adds	r3, #4
 8006c06:	2102      	movs	r1, #2
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f001 fd23 	bl	8008654 <RCCEx_PLL2_Config>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c12:	e00c      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3324      	adds	r3, #36	; 0x24
 8006c18:	2102      	movs	r1, #2
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f001 fdcc 	bl	80087b8 <RCCEx_PLL3_Config>
 8006c20:	4603      	mov	r3, r0
 8006c22:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c24:	e003      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	75fb      	strb	r3, [r7, #23]
      break;
 8006c2a:	e000      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d109      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006c34:	4b9f      	ldr	r3, [pc, #636]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c40:	499c      	ldr	r1, [pc, #624]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	650b      	str	r3, [r1, #80]	; 0x50
 8006c46:	e001      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d03d      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d826      	bhi.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006c60:	a201      	add	r2, pc, #4	; (adr r2, 8006c68 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c66:	bf00      	nop
 8006c68:	08006c7d 	.word	0x08006c7d
 8006c6c:	08006c8b 	.word	0x08006c8b
 8006c70:	08006c9d 	.word	0x08006c9d
 8006c74:	08006cb5 	.word	0x08006cb5
 8006c78:	08006cb5 	.word	0x08006cb5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c7c:	4b8d      	ldr	r3, [pc, #564]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	4a8c      	ldr	r2, [pc, #560]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c88:	e015      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	2100      	movs	r1, #0
 8006c90:	4618      	mov	r0, r3
 8006c92:	f001 fcdf 	bl	8008654 <RCCEx_PLL2_Config>
 8006c96:	4603      	mov	r3, r0
 8006c98:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c9a:	e00c      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3324      	adds	r3, #36	; 0x24
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f001 fd88 	bl	80087b8 <RCCEx_PLL3_Config>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006cac:	e003      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8006cb2:	e000      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d109      	bne.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cbc:	4b7d      	ldr	r3, [pc, #500]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc0:	f023 0207 	bic.w	r2, r3, #7
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc8:	497a      	ldr	r1, [pc, #488]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	650b      	str	r3, [r1, #80]	; 0x50
 8006cce:	e001      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd0:	7dfb      	ldrb	r3, [r7, #23]
 8006cd2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d03e      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce4:	2b80      	cmp	r3, #128	; 0x80
 8006ce6:	d01c      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006ce8:	2b80      	cmp	r3, #128	; 0x80
 8006cea:	d804      	bhi.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d008      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006cf0:	2b40      	cmp	r3, #64	; 0x40
 8006cf2:	d00d      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006cf4:	e01e      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006cf6:	2bc0      	cmp	r3, #192	; 0xc0
 8006cf8:	d01f      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cfe:	d01e      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006d00:	e018      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d02:	4b6c      	ldr	r3, [pc, #432]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d06:	4a6b      	ldr	r2, [pc, #428]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d0e:	e017      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3304      	adds	r3, #4
 8006d14:	2100      	movs	r1, #0
 8006d16:	4618      	mov	r0, r3
 8006d18:	f001 fc9c 	bl	8008654 <RCCEx_PLL2_Config>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d20:	e00e      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3324      	adds	r3, #36	; 0x24
 8006d26:	2100      	movs	r1, #0
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f001 fd45 	bl	80087b8 <RCCEx_PLL3_Config>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d32:	e005      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	75fb      	strb	r3, [r7, #23]
      break;
 8006d38:	e002      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006d3a:	bf00      	nop
 8006d3c:	e000      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d40:	7dfb      	ldrb	r3, [r7, #23]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006d46:	4b5b      	ldr	r3, [pc, #364]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d4a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d52:	4958      	ldr	r1, [pc, #352]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	650b      	str	r3, [r1, #80]	; 0x50
 8006d58:	e001      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
 8006d5c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d044      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d74:	d01f      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d7a:	d805      	bhi.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00a      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006d80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d84:	d00e      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006d86:	e01f      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006d88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d8c:	d01f      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006d8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d92:	d01e      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006d94:	e018      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d96:	4b47      	ldr	r3, [pc, #284]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9a:	4a46      	ldr	r2, [pc, #280]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006da0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006da2:	e017      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	3304      	adds	r3, #4
 8006da8:	2100      	movs	r1, #0
 8006daa:	4618      	mov	r0, r3
 8006dac:	f001 fc52 	bl	8008654 <RCCEx_PLL2_Config>
 8006db0:	4603      	mov	r3, r0
 8006db2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006db4:	e00e      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	3324      	adds	r3, #36	; 0x24
 8006dba:	2100      	movs	r1, #0
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f001 fcfb 	bl	80087b8 <RCCEx_PLL3_Config>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dc6:	e005      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	75fb      	strb	r3, [r7, #23]
      break;
 8006dcc:	e002      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006dce:	bf00      	nop
 8006dd0:	e000      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006dd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10a      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006dda:	4b36      	ldr	r3, [pc, #216]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dde:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006de8:	4932      	ldr	r1, [pc, #200]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	658b      	str	r3, [r1, #88]	; 0x58
 8006dee:	e001      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
 8006df2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d044      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e0a:	d01f      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006e0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e10:	d805      	bhi.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006e16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e1a:	d00e      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006e1c:	e01f      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006e1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e22:	d01f      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006e24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e28:	d01e      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006e2a:	e018      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e2c:	4b21      	ldr	r3, [pc, #132]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e30:	4a20      	ldr	r2, [pc, #128]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e38:	e017      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	2100      	movs	r1, #0
 8006e40:	4618      	mov	r0, r3
 8006e42:	f001 fc07 	bl	8008654 <RCCEx_PLL2_Config>
 8006e46:	4603      	mov	r3, r0
 8006e48:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006e4a:	e00e      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3324      	adds	r3, #36	; 0x24
 8006e50:	2100      	movs	r1, #0
 8006e52:	4618      	mov	r0, r3
 8006e54:	f001 fcb0 	bl	80087b8 <RCCEx_PLL3_Config>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e5c:	e005      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	75fb      	strb	r3, [r7, #23]
      break;
 8006e62:	e002      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006e64:	bf00      	nop
 8006e66:	e000      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006e68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e6a:	7dfb      	ldrb	r3, [r7, #23]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10a      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006e70:	4b10      	ldr	r3, [pc, #64]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e74:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e7e:	490d      	ldr	r1, [pc, #52]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	658b      	str	r3, [r1, #88]	; 0x58
 8006e84:	e001      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e86:	7dfb      	ldrb	r3, [r7, #23]
 8006e88:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d035      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e9a:	2b10      	cmp	r3, #16
 8006e9c:	d00c      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006e9e:	2b10      	cmp	r3, #16
 8006ea0:	d802      	bhi.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d01b      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006ea6:	e017      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006ea8:	2b20      	cmp	r3, #32
 8006eaa:	d00c      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006eac:	2b30      	cmp	r3, #48	; 0x30
 8006eae:	d018      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006eb0:	e012      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006eb2:	bf00      	nop
 8006eb4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eb8:	4baf      	ldr	r3, [pc, #700]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebc:	4aae      	ldr	r2, [pc, #696]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006ec4:	e00e      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	2102      	movs	r1, #2
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f001 fbc1 	bl	8008654 <RCCEx_PLL2_Config>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006ed6:	e005      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	75fb      	strb	r3, [r7, #23]
      break;
 8006edc:	e002      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006ede:	bf00      	nop
 8006ee0:	e000      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006ee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d109      	bne.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006eea:	4ba3      	ldr	r3, [pc, #652]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ef6:	49a0      	ldr	r1, [pc, #640]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006efc:	e001      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
 8006f00:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d042      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f16:	d01f      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f1c:	d805      	bhi.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00a      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f26:	d00e      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006f28:	e01f      	b.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006f2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f2e:	d01f      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006f30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f34:	d01e      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006f36:	e018      	b.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f38:	4b8f      	ldr	r3, [pc, #572]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	4a8e      	ldr	r2, [pc, #568]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f44:	e017      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f001 fb81 	bl	8008654 <RCCEx_PLL2_Config>
 8006f52:	4603      	mov	r3, r0
 8006f54:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f56:	e00e      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3324      	adds	r3, #36	; 0x24
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f001 fc2a 	bl	80087b8 <RCCEx_PLL3_Config>
 8006f64:	4603      	mov	r3, r0
 8006f66:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f68:	e005      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f6e:	e002      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006f70:	bf00      	nop
 8006f72:	e000      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d109      	bne.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f7c:	4b7e      	ldr	r3, [pc, #504]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f80:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f88:	497b      	ldr	r1, [pc, #492]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	650b      	str	r3, [r1, #80]	; 0x50
 8006f8e:	e001      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f90:	7dfb      	ldrb	r3, [r7, #23]
 8006f92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d042      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fa8:	d01b      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006faa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fae:	d805      	bhi.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d022      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fb8:	d00a      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006fba:	e01b      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006fbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fc0:	d01d      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006fc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fc6:	d01c      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006fc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fcc:	d01b      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006fce:	e011      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f001 fb3c 	bl	8008654 <RCCEx_PLL2_Config>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006fe0:	e012      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	3324      	adds	r3, #36	; 0x24
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f001 fbe5 	bl	80087b8 <RCCEx_PLL3_Config>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006ff2:	e009      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff8:	e006      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006ffa:	bf00      	nop
 8006ffc:	e004      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006ffe:	bf00      	nop
 8007000:	e002      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007002:	bf00      	nop
 8007004:	e000      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007006:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007008:	7dfb      	ldrb	r3, [r7, #23]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800700e:	4b5a      	ldr	r3, [pc, #360]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007012:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800701a:	4957      	ldr	r1, [pc, #348]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800701c:	4313      	orrs	r3, r2
 800701e:	650b      	str	r3, [r1, #80]	; 0x50
 8007020:	e001      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007022:	7dfb      	ldrb	r3, [r7, #23]
 8007024:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d044      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800703c:	d01b      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800703e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007042:	d805      	bhi.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007044:	2b00      	cmp	r3, #0
 8007046:	d022      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007048:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800704c:	d00a      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800704e:	e01b      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007054:	d01d      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800705a:	d01c      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800705c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007060:	d01b      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007062:	e011      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	3304      	adds	r3, #4
 8007068:	2101      	movs	r1, #1
 800706a:	4618      	mov	r0, r3
 800706c:	f001 faf2 	bl	8008654 <RCCEx_PLL2_Config>
 8007070:	4603      	mov	r3, r0
 8007072:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007074:	e012      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	3324      	adds	r3, #36	; 0x24
 800707a:	2101      	movs	r1, #1
 800707c:	4618      	mov	r0, r3
 800707e:	f001 fb9b 	bl	80087b8 <RCCEx_PLL3_Config>
 8007082:	4603      	mov	r3, r0
 8007084:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007086:	e009      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	75fb      	strb	r3, [r7, #23]
      break;
 800708c:	e006      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800708e:	bf00      	nop
 8007090:	e004      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007092:	bf00      	nop
 8007094:	e002      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007096:	bf00      	nop
 8007098:	e000      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800709a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800709c:	7dfb      	ldrb	r3, [r7, #23]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10a      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80070a2:	4b35      	ldr	r3, [pc, #212]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070b0:	4931      	ldr	r1, [pc, #196]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	658b      	str	r3, [r1, #88]	; 0x58
 80070b6:	e001      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b8:	7dfb      	ldrb	r3, [r7, #23]
 80070ba:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d02d      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070d0:	d005      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80070d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070d6:	d009      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x538>
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d013      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80070dc:	e00f      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070de:	4b26      	ldr	r3, [pc, #152]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e2:	4a25      	ldr	r2, [pc, #148]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80070e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80070ea:	e00c      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	3304      	adds	r3, #4
 80070f0:	2101      	movs	r1, #1
 80070f2:	4618      	mov	r0, r3
 80070f4:	f001 faae 	bl	8008654 <RCCEx_PLL2_Config>
 80070f8:	4603      	mov	r3, r0
 80070fa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80070fc:	e003      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	75fb      	strb	r3, [r7, #23]
      break;
 8007102:	e000      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007104:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007106:	7dfb      	ldrb	r3, [r7, #23]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d109      	bne.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800710c:	4b1a      	ldr	r3, [pc, #104]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800710e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007110:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007118:	4917      	ldr	r1, [pc, #92]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800711a:	4313      	orrs	r3, r2
 800711c:	650b      	str	r3, [r1, #80]	; 0x50
 800711e:	e001      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007120:	7dfb      	ldrb	r3, [r7, #23]
 8007122:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d035      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007134:	2b03      	cmp	r3, #3
 8007136:	d81b      	bhi.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007138:	a201      	add	r2, pc, #4	; (adr r2, 8007140 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800713a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713e:	bf00      	nop
 8007140:	0800717d 	.word	0x0800717d
 8007144:	08007151 	.word	0x08007151
 8007148:	0800715f 	.word	0x0800715f
 800714c:	0800717d 	.word	0x0800717d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007150:	4b09      	ldr	r3, [pc, #36]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007154:	4a08      	ldr	r2, [pc, #32]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800715a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800715c:	e00f      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3304      	adds	r3, #4
 8007162:	2102      	movs	r1, #2
 8007164:	4618      	mov	r0, r3
 8007166:	f001 fa75 	bl	8008654 <RCCEx_PLL2_Config>
 800716a:	4603      	mov	r3, r0
 800716c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800716e:	e006      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	75fb      	strb	r3, [r7, #23]
      break;
 8007174:	e003      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007176:	bf00      	nop
 8007178:	58024400 	.word	0x58024400
      break;
 800717c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800717e:	7dfb      	ldrb	r3, [r7, #23]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d109      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007184:	4bba      	ldr	r3, [pc, #744]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007188:	f023 0203 	bic.w	r2, r3, #3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007190:	49b7      	ldr	r1, [pc, #732]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007192:	4313      	orrs	r3, r2
 8007194:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007196:	e001      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007198:	7dfb      	ldrb	r3, [r7, #23]
 800719a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 8086 	beq.w	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071aa:	4bb2      	ldr	r3, [pc, #712]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4ab1      	ldr	r2, [pc, #708]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80071b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071b6:	f7fa fedb 	bl	8001f70 <HAL_GetTick>
 80071ba:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071bc:	e009      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071be:	f7fa fed7 	bl	8001f70 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b64      	cmp	r3, #100	; 0x64
 80071ca:	d902      	bls.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	75fb      	strb	r3, [r7, #23]
        break;
 80071d0:	e005      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071d2:	4ba8      	ldr	r3, [pc, #672]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0ef      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d166      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80071e4:	4ba2      	ldr	r3, [pc, #648]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80071e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071ee:	4053      	eors	r3, r2
 80071f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d013      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071f8:	4b9d      	ldr	r3, [pc, #628]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80071fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007200:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007202:	4b9b      	ldr	r3, [pc, #620]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007206:	4a9a      	ldr	r2, [pc, #616]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800720c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800720e:	4b98      	ldr	r3, [pc, #608]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007212:	4a97      	ldr	r2, [pc, #604]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007218:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800721a:	4a95      	ldr	r2, [pc, #596]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800722a:	d115      	bne.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800722c:	f7fa fea0 	bl	8001f70 <HAL_GetTick>
 8007230:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007232:	e00b      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007234:	f7fa fe9c 	bl	8001f70 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007242:	4293      	cmp	r3, r2
 8007244:	d902      	bls.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	75fb      	strb	r3, [r7, #23]
            break;
 800724a:	e005      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800724c:	4b88      	ldr	r3, [pc, #544]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800724e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d0ed      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007258:	7dfb      	ldrb	r3, [r7, #23]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d126      	bne.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007268:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800726c:	d10d      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800726e:	4b80      	ldr	r3, [pc, #512]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800727c:	0919      	lsrs	r1, r3, #4
 800727e:	4b7e      	ldr	r3, [pc, #504]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007280:	400b      	ands	r3, r1
 8007282:	497b      	ldr	r1, [pc, #492]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007284:	4313      	orrs	r3, r2
 8007286:	610b      	str	r3, [r1, #16]
 8007288:	e005      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800728a:	4b79      	ldr	r3, [pc, #484]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	4a78      	ldr	r2, [pc, #480]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007290:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007294:	6113      	str	r3, [r2, #16]
 8007296:	4b76      	ldr	r3, [pc, #472]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007298:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072a4:	4972      	ldr	r1, [pc, #456]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	670b      	str	r3, [r1, #112]	; 0x70
 80072aa:	e004      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
 80072ae:	75bb      	strb	r3, [r7, #22]
 80072b0:	e001      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
 80072b4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d07d      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072c6:	2b28      	cmp	r3, #40	; 0x28
 80072c8:	d866      	bhi.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80072ca:	a201      	add	r2, pc, #4	; (adr r2, 80072d0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80072cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d0:	0800739f 	.word	0x0800739f
 80072d4:	08007399 	.word	0x08007399
 80072d8:	08007399 	.word	0x08007399
 80072dc:	08007399 	.word	0x08007399
 80072e0:	08007399 	.word	0x08007399
 80072e4:	08007399 	.word	0x08007399
 80072e8:	08007399 	.word	0x08007399
 80072ec:	08007399 	.word	0x08007399
 80072f0:	08007375 	.word	0x08007375
 80072f4:	08007399 	.word	0x08007399
 80072f8:	08007399 	.word	0x08007399
 80072fc:	08007399 	.word	0x08007399
 8007300:	08007399 	.word	0x08007399
 8007304:	08007399 	.word	0x08007399
 8007308:	08007399 	.word	0x08007399
 800730c:	08007399 	.word	0x08007399
 8007310:	08007387 	.word	0x08007387
 8007314:	08007399 	.word	0x08007399
 8007318:	08007399 	.word	0x08007399
 800731c:	08007399 	.word	0x08007399
 8007320:	08007399 	.word	0x08007399
 8007324:	08007399 	.word	0x08007399
 8007328:	08007399 	.word	0x08007399
 800732c:	08007399 	.word	0x08007399
 8007330:	0800739f 	.word	0x0800739f
 8007334:	08007399 	.word	0x08007399
 8007338:	08007399 	.word	0x08007399
 800733c:	08007399 	.word	0x08007399
 8007340:	08007399 	.word	0x08007399
 8007344:	08007399 	.word	0x08007399
 8007348:	08007399 	.word	0x08007399
 800734c:	08007399 	.word	0x08007399
 8007350:	0800739f 	.word	0x0800739f
 8007354:	08007399 	.word	0x08007399
 8007358:	08007399 	.word	0x08007399
 800735c:	08007399 	.word	0x08007399
 8007360:	08007399 	.word	0x08007399
 8007364:	08007399 	.word	0x08007399
 8007368:	08007399 	.word	0x08007399
 800736c:	08007399 	.word	0x08007399
 8007370:	0800739f 	.word	0x0800739f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	3304      	adds	r3, #4
 8007378:	2101      	movs	r1, #1
 800737a:	4618      	mov	r0, r3
 800737c:	f001 f96a 	bl	8008654 <RCCEx_PLL2_Config>
 8007380:	4603      	mov	r3, r0
 8007382:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007384:	e00c      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	3324      	adds	r3, #36	; 0x24
 800738a:	2101      	movs	r1, #1
 800738c:	4618      	mov	r0, r3
 800738e:	f001 fa13 	bl	80087b8 <RCCEx_PLL3_Config>
 8007392:	4603      	mov	r3, r0
 8007394:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007396:	e003      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	75fb      	strb	r3, [r7, #23]
      break;
 800739c:	e000      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800739e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d109      	bne.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80073a6:	4b32      	ldr	r3, [pc, #200]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073aa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073b2:	492f      	ldr	r1, [pc, #188]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	654b      	str	r3, [r1, #84]	; 0x54
 80073b8:	e001      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ba:	7dfb      	ldrb	r3, [r7, #23]
 80073bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d037      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ce:	2b05      	cmp	r3, #5
 80073d0:	d820      	bhi.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80073d2:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80073d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d8:	0800741b 	.word	0x0800741b
 80073dc:	080073f1 	.word	0x080073f1
 80073e0:	08007403 	.word	0x08007403
 80073e4:	0800741b 	.word	0x0800741b
 80073e8:	0800741b 	.word	0x0800741b
 80073ec:	0800741b 	.word	0x0800741b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3304      	adds	r3, #4
 80073f4:	2101      	movs	r1, #1
 80073f6:	4618      	mov	r0, r3
 80073f8:	f001 f92c 	bl	8008654 <RCCEx_PLL2_Config>
 80073fc:	4603      	mov	r3, r0
 80073fe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007400:	e00c      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3324      	adds	r3, #36	; 0x24
 8007406:	2101      	movs	r1, #1
 8007408:	4618      	mov	r0, r3
 800740a:	f001 f9d5 	bl	80087b8 <RCCEx_PLL3_Config>
 800740e:	4603      	mov	r3, r0
 8007410:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007412:	e003      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	75fb      	strb	r3, [r7, #23]
      break;
 8007418:	e000      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800741a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800741c:	7dfb      	ldrb	r3, [r7, #23]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d109      	bne.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007422:	4b13      	ldr	r3, [pc, #76]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007426:	f023 0207 	bic.w	r2, r3, #7
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800742e:	4910      	ldr	r1, [pc, #64]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007430:	4313      	orrs	r3, r2
 8007432:	654b      	str	r3, [r1, #84]	; 0x54
 8007434:	e001      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007436:	7dfb      	ldrb	r3, [r7, #23]
 8007438:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0304 	and.w	r3, r3, #4
 8007442:	2b00      	cmp	r3, #0
 8007444:	d040      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744c:	2b05      	cmp	r3, #5
 800744e:	d827      	bhi.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007450:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007456:	bf00      	nop
 8007458:	080074a7 	.word	0x080074a7
 800745c:	0800747d 	.word	0x0800747d
 8007460:	0800748f 	.word	0x0800748f
 8007464:	080074a7 	.word	0x080074a7
 8007468:	080074a7 	.word	0x080074a7
 800746c:	080074a7 	.word	0x080074a7
 8007470:	58024400 	.word	0x58024400
 8007474:	58024800 	.word	0x58024800
 8007478:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3304      	adds	r3, #4
 8007480:	2101      	movs	r1, #1
 8007482:	4618      	mov	r0, r3
 8007484:	f001 f8e6 	bl	8008654 <RCCEx_PLL2_Config>
 8007488:	4603      	mov	r3, r0
 800748a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800748c:	e00c      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3324      	adds	r3, #36	; 0x24
 8007492:	2101      	movs	r1, #1
 8007494:	4618      	mov	r0, r3
 8007496:	f001 f98f 	bl	80087b8 <RCCEx_PLL3_Config>
 800749a:	4603      	mov	r3, r0
 800749c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800749e:	e003      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	75fb      	strb	r3, [r7, #23]
      break;
 80074a4:	e000      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80074a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074a8:	7dfb      	ldrb	r3, [r7, #23]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10a      	bne.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80074ae:	4bb2      	ldr	r3, [pc, #712]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80074b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b2:	f023 0207 	bic.w	r2, r3, #7
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074bc:	49ae      	ldr	r1, [pc, #696]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	658b      	str	r3, [r1, #88]	; 0x58
 80074c2:	e001      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
 80074c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0320 	and.w	r3, r3, #32
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d044      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074de:	d01b      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80074e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074e4:	d805      	bhi.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d022      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80074ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074ee:	d00a      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80074f0:	e01b      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x976>
 80074f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f6:	d01d      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80074f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074fc:	d01c      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80074fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007502:	d01b      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007504:	e011      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3304      	adds	r3, #4
 800750a:	2100      	movs	r1, #0
 800750c:	4618      	mov	r0, r3
 800750e:	f001 f8a1 	bl	8008654 <RCCEx_PLL2_Config>
 8007512:	4603      	mov	r3, r0
 8007514:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007516:	e012      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	3324      	adds	r3, #36	; 0x24
 800751c:	2102      	movs	r1, #2
 800751e:	4618      	mov	r0, r3
 8007520:	f001 f94a 	bl	80087b8 <RCCEx_PLL3_Config>
 8007524:	4603      	mov	r3, r0
 8007526:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007528:	e009      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	75fb      	strb	r3, [r7, #23]
      break;
 800752e:	e006      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007530:	bf00      	nop
 8007532:	e004      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007534:	bf00      	nop
 8007536:	e002      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007538:	bf00      	nop
 800753a:	e000      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800753c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800753e:	7dfb      	ldrb	r3, [r7, #23]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10a      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007544:	4b8c      	ldr	r3, [pc, #560]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007548:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007552:	4989      	ldr	r1, [pc, #548]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007554:	4313      	orrs	r3, r2
 8007556:	654b      	str	r3, [r1, #84]	; 0x54
 8007558:	e001      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007566:	2b00      	cmp	r3, #0
 8007568:	d044      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007574:	d01b      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800757a:	d805      	bhi.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800757c:	2b00      	cmp	r3, #0
 800757e:	d022      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007584:	d00a      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007586:	e01b      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800758c:	d01d      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800758e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007592:	d01c      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007594:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007598:	d01b      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800759a:	e011      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	3304      	adds	r3, #4
 80075a0:	2100      	movs	r1, #0
 80075a2:	4618      	mov	r0, r3
 80075a4:	f001 f856 	bl	8008654 <RCCEx_PLL2_Config>
 80075a8:	4603      	mov	r3, r0
 80075aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80075ac:	e012      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3324      	adds	r3, #36	; 0x24
 80075b2:	2102      	movs	r1, #2
 80075b4:	4618      	mov	r0, r3
 80075b6:	f001 f8ff 	bl	80087b8 <RCCEx_PLL3_Config>
 80075ba:	4603      	mov	r3, r0
 80075bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80075be:	e009      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	75fb      	strb	r3, [r7, #23]
      break;
 80075c4:	e006      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80075c6:	bf00      	nop
 80075c8:	e004      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80075ca:	bf00      	nop
 80075cc:	e002      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80075ce:	bf00      	nop
 80075d0:	e000      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80075d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10a      	bne.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075da:	4b67      	ldr	r3, [pc, #412]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80075dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075de:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075e8:	4963      	ldr	r1, [pc, #396]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	658b      	str	r3, [r1, #88]	; 0x58
 80075ee:	e001      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f0:	7dfb      	ldrb	r3, [r7, #23]
 80075f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d044      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800760a:	d01b      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800760c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007610:	d805      	bhi.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d022      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800761a:	d00a      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800761c:	e01b      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800761e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007622:	d01d      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007624:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007628:	d01c      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800762a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800762e:	d01b      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007630:	e011      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	3304      	adds	r3, #4
 8007636:	2100      	movs	r1, #0
 8007638:	4618      	mov	r0, r3
 800763a:	f001 f80b 	bl	8008654 <RCCEx_PLL2_Config>
 800763e:	4603      	mov	r3, r0
 8007640:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007642:	e012      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	3324      	adds	r3, #36	; 0x24
 8007648:	2102      	movs	r1, #2
 800764a:	4618      	mov	r0, r3
 800764c:	f001 f8b4 	bl	80087b8 <RCCEx_PLL3_Config>
 8007650:	4603      	mov	r3, r0
 8007652:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007654:	e009      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	75fb      	strb	r3, [r7, #23]
      break;
 800765a:	e006      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800765c:	bf00      	nop
 800765e:	e004      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007660:	bf00      	nop
 8007662:	e002      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007664:	bf00      	nop
 8007666:	e000      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007668:	bf00      	nop
    }

    if(ret == HAL_OK)
 800766a:	7dfb      	ldrb	r3, [r7, #23]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10a      	bne.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007670:	4b41      	ldr	r3, [pc, #260]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007674:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800767e:	493e      	ldr	r1, [pc, #248]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007680:	4313      	orrs	r3, r2
 8007682:	658b      	str	r3, [r1, #88]	; 0x58
 8007684:	e001      	b.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007686:	7dfb      	ldrb	r3, [r7, #23]
 8007688:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0308 	and.w	r3, r3, #8
 8007692:	2b00      	cmp	r3, #0
 8007694:	d01a      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800769c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a0:	d10a      	bne.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	3324      	adds	r3, #36	; 0x24
 80076a6:	2102      	movs	r1, #2
 80076a8:	4618      	mov	r0, r3
 80076aa:	f001 f885 	bl	80087b8 <RCCEx_PLL3_Config>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80076b8:	4b2f      	ldr	r3, [pc, #188]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076c6:	492c      	ldr	r1, [pc, #176]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0310 	and.w	r3, r3, #16
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d01a      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076e2:	d10a      	bne.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	3324      	adds	r3, #36	; 0x24
 80076e8:	2102      	movs	r1, #2
 80076ea:	4618      	mov	r0, r3
 80076ec:	f001 f864 	bl	80087b8 <RCCEx_PLL3_Config>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80076fa:	4b1f      	ldr	r3, [pc, #124]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007708:	491b      	ldr	r1, [pc, #108]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800770a:	4313      	orrs	r3, r2
 800770c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d032      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007724:	d00d      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007726:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800772a:	d016      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d111      	bne.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3304      	adds	r3, #4
 8007734:	2100      	movs	r1, #0
 8007736:	4618      	mov	r0, r3
 8007738:	f000 ff8c 	bl	8008654 <RCCEx_PLL2_Config>
 800773c:	4603      	mov	r3, r0
 800773e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007740:	e00c      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3324      	adds	r3, #36	; 0x24
 8007746:	2102      	movs	r1, #2
 8007748:	4618      	mov	r0, r3
 800774a:	f001 f835 	bl	80087b8 <RCCEx_PLL3_Config>
 800774e:	4603      	mov	r3, r0
 8007750:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007752:	e003      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	75fb      	strb	r3, [r7, #23]
      break;
 8007758:	e000      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800775a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800775c:	7dfb      	ldrb	r3, [r7, #23]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10c      	bne.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007762:	4b05      	ldr	r3, [pc, #20]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007766:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007770:	4901      	ldr	r1, [pc, #4]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007772:	4313      	orrs	r3, r2
 8007774:	658b      	str	r3, [r1, #88]	; 0x58
 8007776:	e003      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007778:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800777c:	7dfb      	ldrb	r3, [r7, #23]
 800777e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d02f      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007792:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007796:	d00c      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007798:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800779c:	d015      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800779e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077a2:	d10f      	bne.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077a4:	4b71      	ldr	r3, [pc, #452]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	4a70      	ldr	r2, [pc, #448]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80077aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80077b0:	e00c      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	3324      	adds	r3, #36	; 0x24
 80077b6:	2101      	movs	r1, #1
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 fffd 	bl	80087b8 <RCCEx_PLL3_Config>
 80077be:	4603      	mov	r3, r0
 80077c0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80077c2:	e003      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	75fb      	strb	r3, [r7, #23]
      break;
 80077c8:	e000      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80077ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077cc:	7dfb      	ldrb	r3, [r7, #23]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077d2:	4b66      	ldr	r3, [pc, #408]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80077d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077e0:	4962      	ldr	r1, [pc, #392]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	654b      	str	r3, [r1, #84]	; 0x54
 80077e6:	e001      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
 80077ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d029      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d003      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007804:	d007      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007806:	e00f      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007808:	4b58      	ldr	r3, [pc, #352]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800780a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780c:	4a57      	ldr	r2, [pc, #348]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800780e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007812:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007814:	e00b      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	3304      	adds	r3, #4
 800781a:	2102      	movs	r1, #2
 800781c:	4618      	mov	r0, r3
 800781e:	f000 ff19 	bl	8008654 <RCCEx_PLL2_Config>
 8007822:	4603      	mov	r3, r0
 8007824:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007826:	e002      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	75fb      	strb	r3, [r7, #23]
      break;
 800782c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800782e:	7dfb      	ldrb	r3, [r7, #23]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d109      	bne.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007834:	4b4d      	ldr	r3, [pc, #308]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007838:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007840:	494a      	ldr	r1, [pc, #296]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007842:	4313      	orrs	r3, r2
 8007844:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007846:	e001      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007848:	7dfb      	ldrb	r3, [r7, #23]
 800784a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00a      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	3324      	adds	r3, #36	; 0x24
 800785c:	2102      	movs	r1, #2
 800785e:	4618      	mov	r0, r3
 8007860:	f000 ffaa 	bl	80087b8 <RCCEx_PLL3_Config>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d02f      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800787e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007882:	d00c      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007888:	d802      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d011      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800788e:	e00d      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007894:	d00f      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007896:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800789a:	d00e      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800789c:	e006      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800789e:	4b33      	ldr	r3, [pc, #204]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	4a32      	ldr	r2, [pc, #200]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80078a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80078aa:	e007      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	75fb      	strb	r3, [r7, #23]
      break;
 80078b0:	e004      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80078b2:	bf00      	nop
 80078b4:	e002      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80078b6:	bf00      	nop
 80078b8:	e000      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80078ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078bc:	7dfb      	ldrb	r3, [r7, #23]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d109      	bne.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078c2:	4b2a      	ldr	r3, [pc, #168]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80078c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078ce:	4927      	ldr	r1, [pc, #156]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	654b      	str	r3, [r1, #84]	; 0x54
 80078d4:	e001      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
 80078d8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d008      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80078e6:	4b21      	ldr	r3, [pc, #132]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80078e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f2:	491e      	ldr	r1, [pc, #120]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d008      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007904:	4b19      	ldr	r3, [pc, #100]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007908:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007910:	4916      	ldr	r1, [pc, #88]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007912:	4313      	orrs	r3, r2
 8007914:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00d      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007922:	4b12      	ldr	r3, [pc, #72]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	4a11      	ldr	r2, [pc, #68]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007928:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800792c:	6113      	str	r3, [r2, #16]
 800792e:	4b0f      	ldr	r3, [pc, #60]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007930:	691a      	ldr	r2, [r3, #16]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007938:	490c      	ldr	r1, [pc, #48]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800793a:	4313      	orrs	r3, r2
 800793c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	da08      	bge.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007946:	4b09      	ldr	r3, [pc, #36]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800794a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007952:	4906      	ldr	r1, [pc, #24]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007954:	4313      	orrs	r3, r2
 8007956:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007958:	7dbb      	ldrb	r3, [r7, #22]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	e000      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
}
 8007964:	4618      	mov	r0, r3
 8007966:	3718      	adds	r7, #24
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	58024400 	.word	0x58024400

08007970 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b090      	sub	sp, #64	; 0x40
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800797e:	d150      	bne.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007980:	4ba1      	ldr	r3, [pc, #644]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007984:	f003 0307 	and.w	r3, r3, #7
 8007988:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798c:	2b04      	cmp	r3, #4
 800798e:	d844      	bhi.n	8007a1a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007990:	a201      	add	r2, pc, #4	; (adr r2, 8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007996:	bf00      	nop
 8007998:	080079ad 	.word	0x080079ad
 800799c:	080079bd 	.word	0x080079bd
 80079a0:	080079cd 	.word	0x080079cd
 80079a4:	08007a15 	.word	0x08007a15
 80079a8:	080079dd 	.word	0x080079dd
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 fd03 	bl	80083bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079ba:	e241      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079bc:	f107 0318 	add.w	r3, r7, #24
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 fa63 	bl	8007e8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079ca:	e239      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079cc:	f107 030c 	add.w	r3, r7, #12
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fba7 	bl	8008124 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079da:	e231      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80079dc:	4b8a      	ldr	r3, [pc, #552]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80079de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079e4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80079e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d102      	bne.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80079ec:	4b87      	ldr	r3, [pc, #540]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80079ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80079f0:	e226      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80079f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079f8:	d102      	bne.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80079fa:	4b85      	ldr	r3, [pc, #532]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80079fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079fe:	e21f      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a06:	d102      	bne.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007a08:	4b82      	ldr	r3, [pc, #520]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a0c:	e218      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a12:	e215      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a14:	4b80      	ldr	r3, [pc, #512]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007a16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a18:	e212      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a1e:	bf00      	nop
 8007a20:	e20e      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a28:	d14f      	bne.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007a2a:	4b77      	ldr	r3, [pc, #476]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a2e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007a32:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a36:	2b80      	cmp	r3, #128	; 0x80
 8007a38:	d01c      	beq.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007a3a:	2b80      	cmp	r3, #128	; 0x80
 8007a3c:	d804      	bhi.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d008      	beq.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007a42:	2b40      	cmp	r3, #64	; 0x40
 8007a44:	d00e      	beq.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007a46:	e03c      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007a48:	2bc0      	cmp	r3, #192	; 0xc0
 8007a4a:	d037      	beq.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a50:	d018      	beq.n	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007a52:	e036      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 fcaf 	bl	80083bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a62:	e1ed      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a64:	f107 0318 	add.w	r3, r7, #24
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 fa0f 	bl	8007e8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a72:	e1e5      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a74:	f107 030c 	add.w	r3, r7, #12
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 fb53 	bl	8008124 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a82:	e1dd      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007a84:	4b60      	ldr	r3, [pc, #384]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a8c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d102      	bne.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007a94:	4b5d      	ldr	r3, [pc, #372]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007a96:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007a98:	e1d2      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007aa0:	d102      	bne.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007aa2:	4b5b      	ldr	r3, [pc, #364]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aa6:	e1cb      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aae:	d102      	bne.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007ab0:	4b58      	ldr	r3, [pc, #352]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ab4:	e1c4      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aba:	e1c1      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007abc:	4b56      	ldr	r3, [pc, #344]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ac0:	e1be      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ac6:	bf00      	nop
 8007ac8:	e1ba      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad0:	d153      	bne.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007ad2:	4b4d      	ldr	r3, [pc, #308]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007ada:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ae2:	d01f      	beq.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ae8:	d805      	bhi.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00a      	beq.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007aee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007af2:	d00f      	beq.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007af4:	e03d      	b.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007af6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007afa:	d037      	beq.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007afc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b00:	d018      	beq.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007b02:	e036      	b.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 fc57 	bl	80083bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b12:	e195      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b14:	f107 0318 	add.w	r3, r7, #24
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 f9b7 	bl	8007e8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b22:	e18d      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b24:	f107 030c 	add.w	r3, r7, #12
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 fafb 	bl	8008124 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b32:	e185      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b34:	4b34      	ldr	r3, [pc, #208]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b3c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d102      	bne.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007b44:	4b31      	ldr	r3, [pc, #196]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007b46:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007b48:	e17a      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b50:	d102      	bne.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007b52:	4b2f      	ldr	r3, [pc, #188]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007b54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b56:	e173      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b5e:	d102      	bne.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007b60:	4b2c      	ldr	r3, [pc, #176]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007b62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b64:	e16c      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007b66:	2300      	movs	r3, #0
 8007b68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b6a:	e169      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b6c:	4b2a      	ldr	r3, [pc, #168]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b70:	e166      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007b72:	2300      	movs	r3, #0
 8007b74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b76:	bf00      	nop
 8007b78:	e162      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b80:	d15d      	bne.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007b82:	4b21      	ldr	r3, [pc, #132]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b86:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007b8a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b92:	d01f      	beq.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007b94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b98:	d805      	bhi.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00a      	beq.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007b9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ba2:	d00f      	beq.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007ba4:	e047      	b.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007ba6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007baa:	d041      	beq.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007bac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bb0:	d018      	beq.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007bb2:	e040      	b.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 fbff 	bl	80083bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bc2:	e13d      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bc4:	f107 0318 	add.w	r3, r7, #24
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 f95f 	bl	8007e8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bd2:	e135      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bd4:	f107 030c 	add.w	r3, r7, #12
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f000 faa3 	bl	8008124 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007be2:	e12d      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007be4:	4b08      	ldr	r3, [pc, #32]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007be8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bec:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d102      	bne.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007bf4:	4b05      	ldr	r3, [pc, #20]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007bf8:	e122      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c00:	d10c      	bne.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007c02:	4b03      	ldr	r3, [pc, #12]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007c04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c06:	e11b      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007c08:	58024400 	.word	0x58024400
 8007c0c:	03d09000 	.word	0x03d09000
 8007c10:	003d0900 	.word	0x003d0900
 8007c14:	017d7840 	.word	0x017d7840
 8007c18:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c22:	d102      	bne.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007c24:	4b89      	ldr	r3, [pc, #548]	; (8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007c26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c28:	e10a      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c2e:	e107      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c30:	4b87      	ldr	r3, [pc, #540]	; (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007c32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c34:	e104      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007c36:	2300      	movs	r3, #0
 8007c38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c3a:	bf00      	nop
 8007c3c:	e100      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c44:	d153      	bne.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007c46:	4b83      	ldr	r3, [pc, #524]	; (8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c4a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007c4e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c56:	d01f      	beq.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c5c:	d805      	bhi.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00a      	beq.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c66:	d00f      	beq.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007c68:	e03d      	b.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007c6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c6e:	d037      	beq.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007c70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c74:	d018      	beq.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007c76:	e036      	b.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 fb9d 	bl	80083bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c86:	e0db      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c88:	f107 0318 	add.w	r3, r7, #24
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 f8fd 	bl	8007e8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c96:	e0d3      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c98:	f107 030c 	add.w	r3, r7, #12
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f000 fa41 	bl	8008124 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ca6:	e0cb      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ca8:	4b6a      	ldr	r3, [pc, #424]	; (8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007cb0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d102      	bne.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007cb8:	4b67      	ldr	r3, [pc, #412]	; (8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007cba:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007cbc:	e0c0      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cc4:	d102      	bne.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007cc6:	4b65      	ldr	r3, [pc, #404]	; (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cca:	e0b9      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cd2:	d102      	bne.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007cd4:	4b5d      	ldr	r3, [pc, #372]	; (8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cd8:	e0b2      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cde:	e0af      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007ce0:	4b5b      	ldr	r3, [pc, #364]	; (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ce4:	e0ac      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cea:	bf00      	nop
 8007cec:	e0a8      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007cf4:	d13d      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007cf6:	4b57      	ldr	r3, [pc, #348]	; (8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007cfe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d06:	d00c      	beq.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007d08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d0c:	d011      	beq.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d12b      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d12:	f107 0318 	add.w	r3, r7, #24
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 f8b8 	bl	8007e8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d20:	e08e      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d22:	f107 030c 	add.w	r3, r7, #12
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 f9fc 	bl	8008124 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d30:	e086      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d32:	4b48      	ldr	r3, [pc, #288]	; (8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d3a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d102      	bne.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007d42:	4b45      	ldr	r3, [pc, #276]	; (8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007d44:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007d46:	e07b      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d4e:	d102      	bne.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007d50:	4b42      	ldr	r3, [pc, #264]	; (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007d52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d54:	e074      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d5c:	d102      	bne.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007d5e:	4b3b      	ldr	r3, [pc, #236]	; (8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007d60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d62:	e06d      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007d64:	2300      	movs	r3, #0
 8007d66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d68:	e06a      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d6e:	bf00      	nop
 8007d70:	e066      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d78:	d11f      	bne.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007d7a:	4b36      	ldr	r3, [pc, #216]	; (8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d82:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d8e:	d008      	beq.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007d90:	e00f      	b.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 fb10 	bl	80083bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007da0:	e04e      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007da2:	f107 0318 	add.w	r3, r7, #24
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 f870 	bl	8007e8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007db0:	e046      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007db6:	bf00      	nop
 8007db8:	e042      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dc0:	d13c      	bne.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007dc2:	4b24      	ldr	r3, [pc, #144]	; (8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007dca:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dd2:	d01e      	beq.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dd8:	d805      	bhi.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00d      	beq.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007de2:	d00e      	beq.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007de4:	e026      	b.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8007de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dea:	d01d      	beq.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007df0:	d01d      	beq.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007df2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007df6:	d014      	beq.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007df8:	e01c      	b.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007dfa:	f000 f831 	bl	8007e60 <HAL_RCCEx_GetD3PCLK1Freq>
 8007dfe:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007e00:	e01e      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e02:	f107 0318 	add.w	r3, r7, #24
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 f840 	bl	8007e8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e10:	e016      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e12:	f107 030c 	add.w	r3, r7, #12
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 f984 	bl	8008124 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e20:	e00e      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007e22:	4b0d      	ldr	r3, [pc, #52]	; (8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007e24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e26:	e00b      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007e28:	4b0c      	ldr	r3, [pc, #48]	; (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e2c:	e008      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007e2e:	4b07      	ldr	r3, [pc, #28]	; (8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007e30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e32:	e005      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e38:	bf00      	nop
 8007e3a:	e001      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3740      	adds	r7, #64	; 0x40
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	017d7840 	.word	0x017d7840
 8007e50:	00bb8000 	.word	0x00bb8000
 8007e54:	58024400 	.word	0x58024400
 8007e58:	03d09000 	.word	0x03d09000
 8007e5c:	003d0900 	.word	0x003d0900

08007e60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007e64:	f7fe fe4a 	bl	8006afc <HAL_RCC_GetHCLKFreq>
 8007e68:	4601      	mov	r1, r0
 8007e6a:	4b06      	ldr	r3, [pc, #24]	; (8007e84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	091b      	lsrs	r3, r3, #4
 8007e70:	f003 0307 	and.w	r3, r3, #7
 8007e74:	4a04      	ldr	r2, [pc, #16]	; (8007e88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007e76:	5cd3      	ldrb	r3, [r2, r3]
 8007e78:	f003 031f 	and.w	r3, r3, #31
 8007e7c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	58024400 	.word	0x58024400
 8007e88:	0800c98c 	.word	0x0800c98c

08007e8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b089      	sub	sp, #36	; 0x24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e94:	4b9d      	ldr	r3, [pc, #628]	; (800810c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e98:	f003 0303 	and.w	r3, r3, #3
 8007e9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007e9e:	4b9b      	ldr	r3, [pc, #620]	; (800810c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea2:	0b1b      	lsrs	r3, r3, #12
 8007ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ea8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007eaa:	4b98      	ldr	r3, [pc, #608]	; (800810c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	091b      	lsrs	r3, r3, #4
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007eb6:	4b95      	ldr	r3, [pc, #596]	; (800810c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eba:	08db      	lsrs	r3, r3, #3
 8007ebc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	fb02 f303 	mul.w	r3, r2, r3
 8007ec6:	ee07 3a90 	vmov	s15, r3
 8007eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ece:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 810a 	beq.w	80080ee <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d05a      	beq.n	8007f96 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d302      	bcc.n	8007eea <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d078      	beq.n	8007fda <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007ee8:	e099      	b.n	800801e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eea:	4b88      	ldr	r3, [pc, #544]	; (800810c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0320 	and.w	r3, r3, #32
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d02d      	beq.n	8007f52 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ef6:	4b85      	ldr	r3, [pc, #532]	; (800810c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	08db      	lsrs	r3, r3, #3
 8007efc:	f003 0303 	and.w	r3, r3, #3
 8007f00:	4a83      	ldr	r2, [pc, #524]	; (8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007f02:	fa22 f303 	lsr.w	r3, r2, r3
 8007f06:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	ee07 3a90 	vmov	s15, r3
 8007f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	ee07 3a90 	vmov	s15, r3
 8007f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f20:	4b7a      	ldr	r3, [pc, #488]	; (800810c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f28:	ee07 3a90 	vmov	s15, r3
 8007f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f30:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f34:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008114 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007f38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f4c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007f50:	e087      	b.n	8008062 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	ee07 3a90 	vmov	s15, r3
 8007f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f5c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008118 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007f60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f64:	4b69      	ldr	r3, [pc, #420]	; (800810c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f6c:	ee07 3a90 	vmov	s15, r3
 8007f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f74:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f78:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008114 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007f7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f94:	e065      	b.n	8008062 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	ee07 3a90 	vmov	s15, r3
 8007f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800811c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007fa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fa8:	4b58      	ldr	r3, [pc, #352]	; (800810c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb0:	ee07 3a90 	vmov	s15, r3
 8007fb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fbc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008114 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007fc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fd8:	e043      	b.n	8008062 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	ee07 3a90 	vmov	s15, r3
 8007fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008120 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007fe8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fec:	4b47      	ldr	r3, [pc, #284]	; (800810c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff4:	ee07 3a90 	vmov	s15, r3
 8007ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ffc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008000:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008114 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008004:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008008:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800800c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008010:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008018:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800801c:	e021      	b.n	8008062 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	ee07 3a90 	vmov	s15, r3
 8008024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008028:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800811c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800802c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008030:	4b36      	ldr	r3, [pc, #216]	; (800810c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008038:	ee07 3a90 	vmov	s15, r3
 800803c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008040:	ed97 6a03 	vldr	s12, [r7, #12]
 8008044:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008114 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008048:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800804c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008050:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008054:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800805c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008060:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008062:	4b2a      	ldr	r3, [pc, #168]	; (800810c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008066:	0a5b      	lsrs	r3, r3, #9
 8008068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800806c:	ee07 3a90 	vmov	s15, r3
 8008070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008074:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008078:	ee37 7a87 	vadd.f32	s14, s15, s14
 800807c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008088:	ee17 2a90 	vmov	r2, s15
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008090:	4b1e      	ldr	r3, [pc, #120]	; (800810c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008094:	0c1b      	lsrs	r3, r3, #16
 8008096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80080ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080b6:	ee17 2a90 	vmov	r2, s15
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80080be:	4b13      	ldr	r3, [pc, #76]	; (800810c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80080c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c2:	0e1b      	lsrs	r3, r3, #24
 80080c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080c8:	ee07 3a90 	vmov	s15, r3
 80080cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80080dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080e4:	ee17 2a90 	vmov	r2, s15
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80080ec:	e008      	b.n	8008100 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	609a      	str	r2, [r3, #8]
}
 8008100:	bf00      	nop
 8008102:	3724      	adds	r7, #36	; 0x24
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	58024400 	.word	0x58024400
 8008110:	03d09000 	.word	0x03d09000
 8008114:	46000000 	.word	0x46000000
 8008118:	4c742400 	.word	0x4c742400
 800811c:	4a742400 	.word	0x4a742400
 8008120:	4bbebc20 	.word	0x4bbebc20

08008124 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008124:	b480      	push	{r7}
 8008126:	b089      	sub	sp, #36	; 0x24
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800812c:	4b9d      	ldr	r3, [pc, #628]	; (80083a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800812e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008130:	f003 0303 	and.w	r3, r3, #3
 8008134:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008136:	4b9b      	ldr	r3, [pc, #620]	; (80083a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813a:	0d1b      	lsrs	r3, r3, #20
 800813c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008140:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008142:	4b98      	ldr	r3, [pc, #608]	; (80083a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008146:	0a1b      	lsrs	r3, r3, #8
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800814e:	4b95      	ldr	r3, [pc, #596]	; (80083a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008152:	08db      	lsrs	r3, r3, #3
 8008154:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	fb02 f303 	mul.w	r3, r2, r3
 800815e:	ee07 3a90 	vmov	s15, r3
 8008162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008166:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 810a 	beq.w	8008386 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d05a      	beq.n	800822e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008178:	2b01      	cmp	r3, #1
 800817a:	d302      	bcc.n	8008182 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800817c:	2b02      	cmp	r3, #2
 800817e:	d078      	beq.n	8008272 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008180:	e099      	b.n	80082b6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008182:	4b88      	ldr	r3, [pc, #544]	; (80083a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b00      	cmp	r3, #0
 800818c:	d02d      	beq.n	80081ea <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800818e:	4b85      	ldr	r3, [pc, #532]	; (80083a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	08db      	lsrs	r3, r3, #3
 8008194:	f003 0303 	and.w	r3, r3, #3
 8008198:	4a83      	ldr	r2, [pc, #524]	; (80083a8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800819a:	fa22 f303 	lsr.w	r3, r2, r3
 800819e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	ee07 3a90 	vmov	s15, r3
 80081a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	ee07 3a90 	vmov	s15, r3
 80081b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b8:	4b7a      	ldr	r3, [pc, #488]	; (80083a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081c0:	ee07 3a90 	vmov	s15, r3
 80081c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80081cc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80083ac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80081d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081e4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80081e8:	e087      	b.n	80082fa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	ee07 3a90 	vmov	s15, r3
 80081f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80083b0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80081f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081fc:	4b69      	ldr	r3, [pc, #420]	; (80083a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008204:	ee07 3a90 	vmov	s15, r3
 8008208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800820c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008210:	eddf 5a66 	vldr	s11, [pc, #408]	; 80083ac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008214:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800821c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008220:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008228:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800822c:	e065      	b.n	80082fa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	ee07 3a90 	vmov	s15, r3
 8008234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008238:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80083b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800823c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008240:	4b58      	ldr	r3, [pc, #352]	; (80083a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008248:	ee07 3a90 	vmov	s15, r3
 800824c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008250:	ed97 6a03 	vldr	s12, [r7, #12]
 8008254:	eddf 5a55 	vldr	s11, [pc, #340]	; 80083ac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008258:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800825c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008260:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008264:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800826c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008270:	e043      	b.n	80082fa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	ee07 3a90 	vmov	s15, r3
 8008278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008280:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008284:	4b47      	ldr	r3, [pc, #284]	; (80083a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800828c:	ee07 3a90 	vmov	s15, r3
 8008290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008294:	ed97 6a03 	vldr	s12, [r7, #12]
 8008298:	eddf 5a44 	vldr	s11, [pc, #272]	; 80083ac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800829c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082b4:	e021      	b.n	80082fa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	ee07 3a90 	vmov	s15, r3
 80082bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80083b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80082c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082c8:	4b36      	ldr	r3, [pc, #216]	; (80083a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80082ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d0:	ee07 3a90 	vmov	s15, r3
 80082d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80082dc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80083ac <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80082e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082f8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80082fa:	4b2a      	ldr	r3, [pc, #168]	; (80083a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80082fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fe:	0a5b      	lsrs	r3, r3, #9
 8008300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008304:	ee07 3a90 	vmov	s15, r3
 8008308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008310:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008314:	edd7 6a07 	vldr	s13, [r7, #28]
 8008318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800831c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008320:	ee17 2a90 	vmov	r2, s15
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008328:	4b1e      	ldr	r3, [pc, #120]	; (80083a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800832a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832c:	0c1b      	lsrs	r3, r3, #16
 800832e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800833e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008342:	edd7 6a07 	vldr	s13, [r7, #28]
 8008346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800834a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800834e:	ee17 2a90 	vmov	r2, s15
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008356:	4b13      	ldr	r3, [pc, #76]	; (80083a4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835a:	0e1b      	lsrs	r3, r3, #24
 800835c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008360:	ee07 3a90 	vmov	s15, r3
 8008364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008368:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800836c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008370:	edd7 6a07 	vldr	s13, [r7, #28]
 8008374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800837c:	ee17 2a90 	vmov	r2, s15
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008384:	e008      	b.n	8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	609a      	str	r2, [r3, #8]
}
 8008398:	bf00      	nop
 800839a:	3724      	adds	r7, #36	; 0x24
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	58024400 	.word	0x58024400
 80083a8:	03d09000 	.word	0x03d09000
 80083ac:	46000000 	.word	0x46000000
 80083b0:	4c742400 	.word	0x4c742400
 80083b4:	4a742400 	.word	0x4a742400
 80083b8:	4bbebc20 	.word	0x4bbebc20

080083bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80083bc:	b480      	push	{r7}
 80083be:	b089      	sub	sp, #36	; 0x24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083c4:	4b9d      	ldr	r3, [pc, #628]	; (800863c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80083c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c8:	f003 0303 	and.w	r3, r3, #3
 80083cc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80083ce:	4b9b      	ldr	r3, [pc, #620]	; (800863c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80083d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d2:	091b      	lsrs	r3, r3, #4
 80083d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083d8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80083da:	4b98      	ldr	r3, [pc, #608]	; (800863c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80083dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80083e4:	4b95      	ldr	r3, [pc, #596]	; (800863c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80083e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e8:	08db      	lsrs	r3, r3, #3
 80083ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	fb02 f303 	mul.w	r3, r2, r3
 80083f4:	ee07 3a90 	vmov	s15, r3
 80083f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 810a 	beq.w	800861c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d05a      	beq.n	80084c4 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800840e:	2b01      	cmp	r3, #1
 8008410:	d302      	bcc.n	8008418 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8008412:	2b02      	cmp	r3, #2
 8008414:	d078      	beq.n	8008508 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008416:	e099      	b.n	800854c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008418:	4b88      	ldr	r3, [pc, #544]	; (800863c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0320 	and.w	r3, r3, #32
 8008420:	2b00      	cmp	r3, #0
 8008422:	d02d      	beq.n	8008480 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008424:	4b85      	ldr	r3, [pc, #532]	; (800863c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	08db      	lsrs	r3, r3, #3
 800842a:	f003 0303 	and.w	r3, r3, #3
 800842e:	4a84      	ldr	r2, [pc, #528]	; (8008640 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008430:	fa22 f303 	lsr.w	r3, r2, r3
 8008434:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	ee07 3a90 	vmov	s15, r3
 800843c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	ee07 3a90 	vmov	s15, r3
 8008446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800844e:	4b7b      	ldr	r3, [pc, #492]	; (800863c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008456:	ee07 3a90 	vmov	s15, r3
 800845a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008462:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800846e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800847e:	e087      	b.n	8008590 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	ee07 3a90 	vmov	s15, r3
 8008486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008648 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800848e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008492:	4b6a      	ldr	r3, [pc, #424]	; (800863c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849a:	ee07 3a90 	vmov	s15, r3
 800849e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80084a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80084aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084c2:	e065      	b.n	8008590 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	ee07 3a90 	vmov	s15, r3
 80084ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800864c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80084d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084d6:	4b59      	ldr	r3, [pc, #356]	; (800863c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80084d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084de:	ee07 3a90 	vmov	s15, r3
 80084e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80084ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80084ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008502:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008506:	e043      	b.n	8008590 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	ee07 3a90 	vmov	s15, r3
 800850e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008512:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008650 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800851a:	4b48      	ldr	r3, [pc, #288]	; (800863c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800851c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008522:	ee07 3a90 	vmov	s15, r3
 8008526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800852a:	ed97 6a03 	vldr	s12, [r7, #12]
 800852e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800853a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800853e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008546:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800854a:	e021      	b.n	8008590 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	ee07 3a90 	vmov	s15, r3
 8008552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008556:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800864c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800855a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800855e:	4b37      	ldr	r3, [pc, #220]	; (800863c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008566:	ee07 3a90 	vmov	s15, r3
 800856a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800856e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008572:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800857a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800857e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800858e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008590:	4b2a      	ldr	r3, [pc, #168]	; (800863c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008594:	0a5b      	lsrs	r3, r3, #9
 8008596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800859a:	ee07 3a90 	vmov	s15, r3
 800859e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80085ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085b6:	ee17 2a90 	vmov	r2, s15
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80085be:	4b1f      	ldr	r3, [pc, #124]	; (800863c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80085c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c2:	0c1b      	lsrs	r3, r3, #16
 80085c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085c8:	ee07 3a90 	vmov	s15, r3
 80085cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80085dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085e4:	ee17 2a90 	vmov	r2, s15
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80085ec:	4b13      	ldr	r3, [pc, #76]	; (800863c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80085ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f0:	0e1b      	lsrs	r3, r3, #24
 80085f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085f6:	ee07 3a90 	vmov	s15, r3
 80085fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008602:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008606:	edd7 6a07 	vldr	s13, [r7, #28]
 800860a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800860e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008612:	ee17 2a90 	vmov	r2, s15
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800861a:	e008      	b.n	800862e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	609a      	str	r2, [r3, #8]
}
 800862e:	bf00      	nop
 8008630:	3724      	adds	r7, #36	; 0x24
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	58024400 	.word	0x58024400
 8008640:	03d09000 	.word	0x03d09000
 8008644:	46000000 	.word	0x46000000
 8008648:	4c742400 	.word	0x4c742400
 800864c:	4a742400 	.word	0x4a742400
 8008650:	4bbebc20 	.word	0x4bbebc20

08008654 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008662:	4b53      	ldr	r3, [pc, #332]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008666:	f003 0303 	and.w	r3, r3, #3
 800866a:	2b03      	cmp	r3, #3
 800866c:	d101      	bne.n	8008672 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e099      	b.n	80087a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008672:	4b4f      	ldr	r3, [pc, #316]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a4e      	ldr	r2, [pc, #312]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008678:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800867c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800867e:	f7f9 fc77 	bl	8001f70 <HAL_GetTick>
 8008682:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008684:	e008      	b.n	8008698 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008686:	f7f9 fc73 	bl	8001f70 <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	2b02      	cmp	r3, #2
 8008692:	d901      	bls.n	8008698 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e086      	b.n	80087a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008698:	4b45      	ldr	r3, [pc, #276]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1f0      	bne.n	8008686 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80086a4:	4b42      	ldr	r3, [pc, #264]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 80086a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	031b      	lsls	r3, r3, #12
 80086b2:	493f      	ldr	r1, [pc, #252]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 80086b4:	4313      	orrs	r3, r2
 80086b6:	628b      	str	r3, [r1, #40]	; 0x28
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	3b01      	subs	r3, #1
 80086be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	025b      	lsls	r3, r3, #9
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	431a      	orrs	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	041b      	lsls	r3, r3, #16
 80086d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80086da:	431a      	orrs	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	3b01      	subs	r3, #1
 80086e2:	061b      	lsls	r3, r3, #24
 80086e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80086e8:	4931      	ldr	r1, [pc, #196]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80086ee:	4b30      	ldr	r3, [pc, #192]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 80086f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	492d      	ldr	r1, [pc, #180]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008700:	4b2b      	ldr	r3, [pc, #172]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	f023 0220 	bic.w	r2, r3, #32
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	4928      	ldr	r1, [pc, #160]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 800870e:	4313      	orrs	r3, r2
 8008710:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008712:	4b27      	ldr	r3, [pc, #156]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008716:	4a26      	ldr	r2, [pc, #152]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008718:	f023 0310 	bic.w	r3, r3, #16
 800871c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800871e:	4b24      	ldr	r3, [pc, #144]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008720:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008722:	4b24      	ldr	r3, [pc, #144]	; (80087b4 <RCCEx_PLL2_Config+0x160>)
 8008724:	4013      	ands	r3, r2
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	69d2      	ldr	r2, [r2, #28]
 800872a:	00d2      	lsls	r2, r2, #3
 800872c:	4920      	ldr	r1, [pc, #128]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 800872e:	4313      	orrs	r3, r2
 8008730:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008732:	4b1f      	ldr	r3, [pc, #124]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008736:	4a1e      	ldr	r2, [pc, #120]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008738:	f043 0310 	orr.w	r3, r3, #16
 800873c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d106      	bne.n	8008752 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008744:	4b1a      	ldr	r3, [pc, #104]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008748:	4a19      	ldr	r2, [pc, #100]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 800874a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800874e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008750:	e00f      	b.n	8008772 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d106      	bne.n	8008766 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008758:	4b15      	ldr	r3, [pc, #84]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	4a14      	ldr	r2, [pc, #80]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 800875e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008762:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008764:	e005      	b.n	8008772 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008766:	4b12      	ldr	r3, [pc, #72]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876a:	4a11      	ldr	r2, [pc, #68]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 800876c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008770:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008772:	4b0f      	ldr	r3, [pc, #60]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a0e      	ldr	r2, [pc, #56]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008778:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800877c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800877e:	f7f9 fbf7 	bl	8001f70 <HAL_GetTick>
 8008782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008784:	e008      	b.n	8008798 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008786:	f7f9 fbf3 	bl	8001f70 <HAL_GetTick>
 800878a:	4602      	mov	r2, r0
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	2b02      	cmp	r3, #2
 8008792:	d901      	bls.n	8008798 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008794:	2303      	movs	r3, #3
 8008796:	e006      	b.n	80087a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008798:	4b05      	ldr	r3, [pc, #20]	; (80087b0 <RCCEx_PLL2_Config+0x15c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d0f0      	beq.n	8008786 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	58024400 	.word	0x58024400
 80087b4:	ffff0007 	.word	0xffff0007

080087b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087c6:	4b53      	ldr	r3, [pc, #332]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 80087c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ca:	f003 0303 	and.w	r3, r3, #3
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d101      	bne.n	80087d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e099      	b.n	800890a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80087d6:	4b4f      	ldr	r3, [pc, #316]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a4e      	ldr	r2, [pc, #312]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 80087dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087e2:	f7f9 fbc5 	bl	8001f70 <HAL_GetTick>
 80087e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80087e8:	e008      	b.n	80087fc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80087ea:	f7f9 fbc1 	bl	8001f70 <HAL_GetTick>
 80087ee:	4602      	mov	r2, r0
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d901      	bls.n	80087fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e086      	b.n	800890a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80087fc:	4b45      	ldr	r3, [pc, #276]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1f0      	bne.n	80087ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008808:	4b42      	ldr	r3, [pc, #264]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 800880a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	051b      	lsls	r3, r3, #20
 8008816:	493f      	ldr	r1, [pc, #252]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 8008818:	4313      	orrs	r3, r2
 800881a:	628b      	str	r3, [r1, #40]	; 0x28
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	3b01      	subs	r3, #1
 8008822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	3b01      	subs	r3, #1
 800882c:	025b      	lsls	r3, r3, #9
 800882e:	b29b      	uxth	r3, r3
 8008830:	431a      	orrs	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	3b01      	subs	r3, #1
 8008838:	041b      	lsls	r3, r3, #16
 800883a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800883e:	431a      	orrs	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	3b01      	subs	r3, #1
 8008846:	061b      	lsls	r3, r3, #24
 8008848:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800884c:	4931      	ldr	r1, [pc, #196]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 800884e:	4313      	orrs	r3, r2
 8008850:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008852:	4b30      	ldr	r3, [pc, #192]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 8008854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008856:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	492d      	ldr	r1, [pc, #180]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 8008860:	4313      	orrs	r3, r2
 8008862:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008864:	4b2b      	ldr	r3, [pc, #172]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 8008866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008868:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	699b      	ldr	r3, [r3, #24]
 8008870:	4928      	ldr	r1, [pc, #160]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 8008872:	4313      	orrs	r3, r2
 8008874:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008876:	4b27      	ldr	r3, [pc, #156]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 8008878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887a:	4a26      	ldr	r2, [pc, #152]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 800887c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008880:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008882:	4b24      	ldr	r3, [pc, #144]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 8008884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008886:	4b24      	ldr	r3, [pc, #144]	; (8008918 <RCCEx_PLL3_Config+0x160>)
 8008888:	4013      	ands	r3, r2
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	69d2      	ldr	r2, [r2, #28]
 800888e:	00d2      	lsls	r2, r2, #3
 8008890:	4920      	ldr	r1, [pc, #128]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 8008892:	4313      	orrs	r3, r2
 8008894:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008896:	4b1f      	ldr	r3, [pc, #124]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 8008898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889a:	4a1e      	ldr	r2, [pc, #120]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 800889c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d106      	bne.n	80088b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80088a8:	4b1a      	ldr	r3, [pc, #104]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 80088aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ac:	4a19      	ldr	r2, [pc, #100]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 80088ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80088b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80088b4:	e00f      	b.n	80088d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d106      	bne.n	80088ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80088bc:	4b15      	ldr	r3, [pc, #84]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 80088be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c0:	4a14      	ldr	r2, [pc, #80]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 80088c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80088c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80088c8:	e005      	b.n	80088d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80088ca:	4b12      	ldr	r3, [pc, #72]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 80088cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ce:	4a11      	ldr	r2, [pc, #68]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 80088d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80088d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80088d6:	4b0f      	ldr	r3, [pc, #60]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a0e      	ldr	r2, [pc, #56]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 80088dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088e2:	f7f9 fb45 	bl	8001f70 <HAL_GetTick>
 80088e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80088e8:	e008      	b.n	80088fc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80088ea:	f7f9 fb41 	bl	8001f70 <HAL_GetTick>
 80088ee:	4602      	mov	r2, r0
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d901      	bls.n	80088fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e006      	b.n	800890a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80088fc:	4b05      	ldr	r3, [pc, #20]	; (8008914 <RCCEx_PLL3_Config+0x15c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d0f0      	beq.n	80088ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008908:	7bfb      	ldrb	r3, [r7, #15]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	58024400 	.word	0x58024400
 8008918:	ffff0007 	.word	0xffff0007

0800891c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e01d      	b.n	800896a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d106      	bne.n	8008948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7f8 ff22 	bl	800178c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2202      	movs	r2, #2
 800894c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	3304      	adds	r3, #4
 8008958:	4619      	mov	r1, r3
 800895a:	4610      	mov	r0, r2
 800895c:	f000 fa4c 	bl	8008df8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
	...

08008974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68da      	ldr	r2, [r3, #12]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f042 0201 	orr.w	r2, r2, #1
 800898a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	689a      	ldr	r2, [r3, #8]
 8008992:	4b0c      	ldr	r3, [pc, #48]	; (80089c4 <HAL_TIM_Base_Start_IT+0x50>)
 8008994:	4013      	ands	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2b06      	cmp	r3, #6
 800899c:	d00b      	beq.n	80089b6 <HAL_TIM_Base_Start_IT+0x42>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a4:	d007      	beq.n	80089b6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f042 0201 	orr.w	r2, r2, #1
 80089b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	00010007 	.word	0x00010007

080089c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	f003 0302 	and.w	r3, r3, #2
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d122      	bne.n	8008a24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	f003 0302 	and.w	r3, r3, #2
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d11b      	bne.n	8008a24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f06f 0202 	mvn.w	r2, #2
 80089f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	f003 0303 	and.w	r3, r3, #3
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d003      	beq.n	8008a12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f9d6 	bl	8008dbc <HAL_TIM_IC_CaptureCallback>
 8008a10:	e005      	b.n	8008a1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f9c8 	bl	8008da8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f9d9 	bl	8008dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	f003 0304 	and.w	r3, r3, #4
 8008a2e:	2b04      	cmp	r3, #4
 8008a30:	d122      	bne.n	8008a78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	f003 0304 	and.w	r3, r3, #4
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	d11b      	bne.n	8008a78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f06f 0204 	mvn.w	r2, #4
 8008a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2202      	movs	r2, #2
 8008a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d003      	beq.n	8008a66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f9ac 	bl	8008dbc <HAL_TIM_IC_CaptureCallback>
 8008a64:	e005      	b.n	8008a72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f99e 	bl	8008da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f9af 	bl	8008dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	f003 0308 	and.w	r3, r3, #8
 8008a82:	2b08      	cmp	r3, #8
 8008a84:	d122      	bne.n	8008acc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	f003 0308 	and.w	r3, r3, #8
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d11b      	bne.n	8008acc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f06f 0208 	mvn.w	r2, #8
 8008a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2204      	movs	r2, #4
 8008aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	f003 0303 	and.w	r3, r3, #3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d003      	beq.n	8008aba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f982 	bl	8008dbc <HAL_TIM_IC_CaptureCallback>
 8008ab8:	e005      	b.n	8008ac6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f974 	bl	8008da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f985 	bl	8008dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	f003 0310 	and.w	r3, r3, #16
 8008ad6:	2b10      	cmp	r3, #16
 8008ad8:	d122      	bne.n	8008b20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f003 0310 	and.w	r3, r3, #16
 8008ae4:	2b10      	cmp	r3, #16
 8008ae6:	d11b      	bne.n	8008b20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f06f 0210 	mvn.w	r2, #16
 8008af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2208      	movs	r2, #8
 8008af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f958 	bl	8008dbc <HAL_TIM_IC_CaptureCallback>
 8008b0c:	e005      	b.n	8008b1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f94a 	bl	8008da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f95b 	bl	8008dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d10e      	bne.n	8008b4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d107      	bne.n	8008b4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f06f 0201 	mvn.w	r2, #1
 8008b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7f7 ff3e 	bl	80009c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b56:	2b80      	cmp	r3, #128	; 0x80
 8008b58:	d10e      	bne.n	8008b78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b64:	2b80      	cmp	r3, #128	; 0x80
 8008b66:	d107      	bne.n	8008b78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fb0a 	bl	800918c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b86:	d10e      	bne.n	8008ba6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b92:	2b80      	cmp	r3, #128	; 0x80
 8008b94:	d107      	bne.n	8008ba6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fafd 	bl	80091a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb0:	2b40      	cmp	r3, #64	; 0x40
 8008bb2:	d10e      	bne.n	8008bd2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bbe:	2b40      	cmp	r3, #64	; 0x40
 8008bc0:	d107      	bne.n	8008bd2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f909 	bl	8008de4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	f003 0320 	and.w	r3, r3, #32
 8008bdc:	2b20      	cmp	r3, #32
 8008bde:	d10e      	bne.n	8008bfe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	f003 0320 	and.w	r3, r3, #32
 8008bea:	2b20      	cmp	r3, #32
 8008bec:	d107      	bne.n	8008bfe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f06f 0220 	mvn.w	r2, #32
 8008bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fabd 	bl	8009178 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bfe:	bf00      	nop
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
	...

08008c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d101      	bne.n	8008c20 <HAL_TIM_ConfigClockSource+0x18>
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	e0b7      	b.n	8008d90 <HAL_TIM_ConfigClockSource+0x188>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2202      	movs	r2, #2
 8008c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	4b57      	ldr	r3, [pc, #348]	; (8008d98 <HAL_TIM_ConfigClockSource+0x190>)
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b70      	cmp	r3, #112	; 0x70
 8008c56:	d02e      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0xae>
 8008c58:	2b70      	cmp	r3, #112	; 0x70
 8008c5a:	d812      	bhi.n	8008c82 <HAL_TIM_ConfigClockSource+0x7a>
 8008c5c:	2b30      	cmp	r3, #48	; 0x30
 8008c5e:	f000 8084 	beq.w	8008d6a <HAL_TIM_ConfigClockSource+0x162>
 8008c62:	2b30      	cmp	r3, #48	; 0x30
 8008c64:	d806      	bhi.n	8008c74 <HAL_TIM_ConfigClockSource+0x6c>
 8008c66:	2b10      	cmp	r3, #16
 8008c68:	d07f      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x162>
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	d07d      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x162>
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d07b      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008c72:	e084      	b.n	8008d7e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008c74:	2b50      	cmp	r3, #80	; 0x50
 8008c76:	d048      	beq.n	8008d0a <HAL_TIM_ConfigClockSource+0x102>
 8008c78:	2b60      	cmp	r3, #96	; 0x60
 8008c7a:	d056      	beq.n	8008d2a <HAL_TIM_ConfigClockSource+0x122>
 8008c7c:	2b40      	cmp	r3, #64	; 0x40
 8008c7e:	d064      	beq.n	8008d4a <HAL_TIM_ConfigClockSource+0x142>
      break;
 8008c80:	e07d      	b.n	8008d7e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008c82:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c86:	d070      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x162>
 8008c88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c8c:	d809      	bhi.n	8008ca2 <HAL_TIM_ConfigClockSource+0x9a>
 8008c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c92:	d027      	beq.n	8008ce4 <HAL_TIM_ConfigClockSource+0xdc>
 8008c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c98:	d067      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x162>
 8008c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c9e:	d06d      	beq.n	8008d7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008ca0:	e06d      	b.n	8008d7e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008ca2:	4a3e      	ldr	r2, [pc, #248]	; (8008d9c <HAL_TIM_ConfigClockSource+0x194>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d060      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x162>
 8008ca8:	4a3d      	ldr	r2, [pc, #244]	; (8008da0 <HAL_TIM_ConfigClockSource+0x198>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d05d      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x162>
 8008cae:	4a3d      	ldr	r2, [pc, #244]	; (8008da4 <HAL_TIM_ConfigClockSource+0x19c>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d05a      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x162>
      break;
 8008cb4:	e063      	b.n	8008d7e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6818      	ldr	r0, [r3, #0]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	6899      	ldr	r1, [r3, #8]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	685a      	ldr	r2, [r3, #4]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	f000 f9af 	bl	8009028 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008cd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	609a      	str	r2, [r3, #8]
      break;
 8008ce2:	e04c      	b.n	8008d7e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6818      	ldr	r0, [r3, #0]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	6899      	ldr	r1, [r3, #8]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	f000 f998 	bl	8009028 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	689a      	ldr	r2, [r3, #8]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d06:	609a      	str	r2, [r3, #8]
      break;
 8008d08:	e039      	b.n	8008d7e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	6859      	ldr	r1, [r3, #4]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	461a      	mov	r2, r3
 8008d18:	f000 f908 	bl	8008f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2150      	movs	r1, #80	; 0x50
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 f962 	bl	8008fec <TIM_ITRx_SetConfig>
      break;
 8008d28:	e029      	b.n	8008d7e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6818      	ldr	r0, [r3, #0]
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	6859      	ldr	r1, [r3, #4]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	461a      	mov	r2, r3
 8008d38:	f000 f927 	bl	8008f8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2160      	movs	r1, #96	; 0x60
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 f952 	bl	8008fec <TIM_ITRx_SetConfig>
      break;
 8008d48:	e019      	b.n	8008d7e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6818      	ldr	r0, [r3, #0]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	6859      	ldr	r1, [r3, #4]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	461a      	mov	r2, r3
 8008d58:	f000 f8e8 	bl	8008f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2140      	movs	r1, #64	; 0x40
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 f942 	bl	8008fec <TIM_ITRx_SetConfig>
      break;
 8008d68:	e009      	b.n	8008d7e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4619      	mov	r1, r3
 8008d74:	4610      	mov	r0, r2
 8008d76:	f000 f939 	bl	8008fec <TIM_ITRx_SetConfig>
      break;
 8008d7a:	e000      	b.n	8008d7e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008d7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3710      	adds	r7, #16
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	ffceff88 	.word	0xffceff88
 8008d9c:	00100030 	.word	0x00100030
 8008da0:	00100040 	.word	0x00100040
 8008da4:	00100020 	.word	0x00100020

08008da8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a40      	ldr	r2, [pc, #256]	; (8008f0c <TIM_Base_SetConfig+0x114>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d013      	beq.n	8008e38 <TIM_Base_SetConfig+0x40>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e16:	d00f      	beq.n	8008e38 <TIM_Base_SetConfig+0x40>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a3d      	ldr	r2, [pc, #244]	; (8008f10 <TIM_Base_SetConfig+0x118>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d00b      	beq.n	8008e38 <TIM_Base_SetConfig+0x40>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a3c      	ldr	r2, [pc, #240]	; (8008f14 <TIM_Base_SetConfig+0x11c>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d007      	beq.n	8008e38 <TIM_Base_SetConfig+0x40>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a3b      	ldr	r2, [pc, #236]	; (8008f18 <TIM_Base_SetConfig+0x120>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d003      	beq.n	8008e38 <TIM_Base_SetConfig+0x40>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a3a      	ldr	r2, [pc, #232]	; (8008f1c <TIM_Base_SetConfig+0x124>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d108      	bne.n	8008e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a2f      	ldr	r2, [pc, #188]	; (8008f0c <TIM_Base_SetConfig+0x114>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d01f      	beq.n	8008e92 <TIM_Base_SetConfig+0x9a>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e58:	d01b      	beq.n	8008e92 <TIM_Base_SetConfig+0x9a>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a2c      	ldr	r2, [pc, #176]	; (8008f10 <TIM_Base_SetConfig+0x118>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d017      	beq.n	8008e92 <TIM_Base_SetConfig+0x9a>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a2b      	ldr	r2, [pc, #172]	; (8008f14 <TIM_Base_SetConfig+0x11c>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d013      	beq.n	8008e92 <TIM_Base_SetConfig+0x9a>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a2a      	ldr	r2, [pc, #168]	; (8008f18 <TIM_Base_SetConfig+0x120>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d00f      	beq.n	8008e92 <TIM_Base_SetConfig+0x9a>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a29      	ldr	r2, [pc, #164]	; (8008f1c <TIM_Base_SetConfig+0x124>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d00b      	beq.n	8008e92 <TIM_Base_SetConfig+0x9a>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a28      	ldr	r2, [pc, #160]	; (8008f20 <TIM_Base_SetConfig+0x128>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d007      	beq.n	8008e92 <TIM_Base_SetConfig+0x9a>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a27      	ldr	r2, [pc, #156]	; (8008f24 <TIM_Base_SetConfig+0x12c>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d003      	beq.n	8008e92 <TIM_Base_SetConfig+0x9a>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a26      	ldr	r2, [pc, #152]	; (8008f28 <TIM_Base_SetConfig+0x130>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d108      	bne.n	8008ea4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	695b      	ldr	r3, [r3, #20]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	689a      	ldr	r2, [r3, #8]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a10      	ldr	r2, [pc, #64]	; (8008f0c <TIM_Base_SetConfig+0x114>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d00f      	beq.n	8008ef0 <TIM_Base_SetConfig+0xf8>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a12      	ldr	r2, [pc, #72]	; (8008f1c <TIM_Base_SetConfig+0x124>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d00b      	beq.n	8008ef0 <TIM_Base_SetConfig+0xf8>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a11      	ldr	r2, [pc, #68]	; (8008f20 <TIM_Base_SetConfig+0x128>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d007      	beq.n	8008ef0 <TIM_Base_SetConfig+0xf8>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a10      	ldr	r2, [pc, #64]	; (8008f24 <TIM_Base_SetConfig+0x12c>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d003      	beq.n	8008ef0 <TIM_Base_SetConfig+0xf8>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a0f      	ldr	r2, [pc, #60]	; (8008f28 <TIM_Base_SetConfig+0x130>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d103      	bne.n	8008ef8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	691a      	ldr	r2, [r3, #16]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	615a      	str	r2, [r3, #20]
}
 8008efe:	bf00      	nop
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	40010000 	.word	0x40010000
 8008f10:	40000400 	.word	0x40000400
 8008f14:	40000800 	.word	0x40000800
 8008f18:	40000c00 	.word	0x40000c00
 8008f1c:	40010400 	.word	0x40010400
 8008f20:	40014000 	.word	0x40014000
 8008f24:	40014400 	.word	0x40014400
 8008f28:	40014800 	.word	0x40014800

08008f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b087      	sub	sp, #28
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	f023 0201 	bic.w	r2, r3, #1
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	011b      	lsls	r3, r3, #4
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	f023 030a 	bic.w	r3, r3, #10
 8008f68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	621a      	str	r2, [r3, #32]
}
 8008f7e:	bf00      	nop
 8008f80:	371c      	adds	r7, #28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b087      	sub	sp, #28
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	f023 0210 	bic.w	r2, r3, #16
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6a1b      	ldr	r3, [r3, #32]
 8008fac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008fb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	031b      	lsls	r3, r3, #12
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008fc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	011b      	lsls	r3, r3, #4
 8008fcc:	693a      	ldr	r2, [r7, #16]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	693a      	ldr	r2, [r7, #16]
 8008fdc:	621a      	str	r2, [r3, #32]
}
 8008fde:	bf00      	nop
 8008fe0:	371c      	adds	r7, #28
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
	...

08008fec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	4b09      	ldr	r3, [pc, #36]	; (8009024 <TIM_ITRx_SetConfig+0x38>)
 8009000:	4013      	ands	r3, r2
 8009002:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009004:	683a      	ldr	r2, [r7, #0]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	4313      	orrs	r3, r2
 800900a:	f043 0307 	orr.w	r3, r3, #7
 800900e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	609a      	str	r2, [r3, #8]
}
 8009016:	bf00      	nop
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	ffcfff8f 	.word	0xffcfff8f

08009028 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009028:	b480      	push	{r7}
 800902a:	b087      	sub	sp, #28
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
 8009034:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009042:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	021a      	lsls	r2, r3, #8
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	431a      	orrs	r2, r3
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	4313      	orrs	r3, r2
 8009050:	697a      	ldr	r2, [r7, #20]
 8009052:	4313      	orrs	r3, r2
 8009054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	609a      	str	r2, [r3, #8]
}
 800905c:	bf00      	nop
 800905e:	371c      	adds	r7, #28
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009078:	2b01      	cmp	r3, #1
 800907a:	d101      	bne.n	8009080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800907c:	2302      	movs	r3, #2
 800907e:	e068      	b.n	8009152 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2202      	movs	r2, #2
 800908c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a2e      	ldr	r2, [pc, #184]	; (8009160 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d004      	beq.n	80090b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a2d      	ldr	r2, [pc, #180]	; (8009164 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d108      	bne.n	80090c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80090ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a1e      	ldr	r2, [pc, #120]	; (8009160 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d01d      	beq.n	8009126 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090f2:	d018      	beq.n	8009126 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a1b      	ldr	r2, [pc, #108]	; (8009168 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d013      	beq.n	8009126 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a1a      	ldr	r2, [pc, #104]	; (800916c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d00e      	beq.n	8009126 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a18      	ldr	r2, [pc, #96]	; (8009170 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d009      	beq.n	8009126 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a13      	ldr	r2, [pc, #76]	; (8009164 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d004      	beq.n	8009126 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a14      	ldr	r2, [pc, #80]	; (8009174 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d10c      	bne.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800912c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	4313      	orrs	r3, r2
 8009136:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	40010000 	.word	0x40010000
 8009164:	40010400 	.word	0x40010400
 8009168:	40000400 	.word	0x40000400
 800916c:	40000800 	.word	0x40000800
 8009170:	40000c00 	.word	0x40000c00
 8009174:	40001800 	.word	0x40001800

08009178 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e042      	b.n	800924c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d106      	bne.n	80091de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7f8 fb3d 	bl	8001858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2224      	movs	r2, #36	; 0x24
 80091e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f022 0201 	bic.w	r2, r2, #1
 80091f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fba6 	bl	8009948 <UART_SetConfig>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d101      	bne.n	8009206 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e022      	b.n	800924c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920a:	2b00      	cmp	r3, #0
 800920c:	d002      	beq.n	8009214 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f002 fd18 	bl	800bc44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685a      	ldr	r2, [r3, #4]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	689a      	ldr	r2, [r3, #8]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f042 0201 	orr.w	r2, r2, #1
 8009242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f002 fd9f 	bl	800bd88 <UART_CheckIdleState>
 800924a:	4603      	mov	r3, r0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	4613      	mov	r3, r2
 8009260:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009268:	2b20      	cmp	r3, #32
 800926a:	d168      	bne.n	800933e <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d002      	beq.n	8009278 <HAL_UART_Transmit_IT+0x24>
 8009272:	88fb      	ldrh	r3, [r7, #6]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e061      	b.n	8009340 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009282:	2b01      	cmp	r3, #1
 8009284:	d101      	bne.n	800928a <HAL_UART_Transmit_IT+0x36>
 8009286:	2302      	movs	r3, #2
 8009288:	e05a      	b.n	8009340 <HAL_UART_Transmit_IT+0xec>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	88fa      	ldrh	r2, [r7, #6]
 800929c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	88fa      	ldrh	r2, [r7, #6]
 80092a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2221      	movs	r2, #33	; 0x21
 80092ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092c6:	d11c      	bne.n	8009302 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092d0:	d107      	bne.n	80092e2 <HAL_UART_Transmit_IT+0x8e>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d103      	bne.n	80092e2 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	4a1b      	ldr	r2, [pc, #108]	; (800934c <HAL_UART_Transmit_IT+0xf8>)
 80092de:	671a      	str	r2, [r3, #112]	; 0x70
 80092e0:	e002      	b.n	80092e8 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	4a1a      	ldr	r2, [pc, #104]	; (8009350 <HAL_UART_Transmit_IT+0xfc>)
 80092e6:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	689a      	ldr	r2, [r3, #8]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80092fe:	609a      	str	r2, [r3, #8]
 8009300:	e01b      	b.n	800933a <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800930a:	d107      	bne.n	800931c <HAL_UART_Transmit_IT+0xc8>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d103      	bne.n	800931c <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	4a0f      	ldr	r2, [pc, #60]	; (8009354 <HAL_UART_Transmit_IT+0x100>)
 8009318:	671a      	str	r2, [r3, #112]	; 0x70
 800931a:	e002      	b.n	8009322 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	4a0e      	ldr	r2, [pc, #56]	; (8009358 <HAL_UART_Transmit_IT+0x104>)
 8009320:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009338:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800933a:	2300      	movs	r3, #0
 800933c:	e000      	b.n	8009340 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800933e:	2302      	movs	r3, #2
  }
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	0800c257 	.word	0x0800c257
 8009350:	0800c1bd 	.word	0x0800c1bd
 8009354:	0800c13f 	.word	0x0800c13f
 8009358:	0800c0cb 	.word	0x0800c0cb

0800935c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	4613      	mov	r3, r2
 8009368:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009370:	2b20      	cmp	r3, #32
 8009372:	f040 80bc 	bne.w	80094ee <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d002      	beq.n	8009382 <HAL_UART_Receive_IT+0x26>
 800937c:	88fb      	ldrh	r3, [r7, #6]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d101      	bne.n	8009386 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e0b4      	b.n	80094f0 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800938c:	2b01      	cmp	r3, #1
 800938e:	d101      	bne.n	8009394 <HAL_UART_Receive_IT+0x38>
 8009390:	2302      	movs	r3, #2
 8009392:	e0ad      	b.n	80094f0 <HAL_UART_Receive_IT+0x194>
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	68ba      	ldr	r2, [r7, #8]
 80093a0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	88fa      	ldrh	r2, [r7, #6]
 80093a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	88fa      	ldrh	r2, [r7, #6]
 80093ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093c0:	d10e      	bne.n	80093e0 <HAL_UART_Receive_IT+0x84>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d105      	bne.n	80093d6 <HAL_UART_Receive_IT+0x7a>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80093d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80093d4:	e02d      	b.n	8009432 <HAL_UART_Receive_IT+0xd6>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	22ff      	movs	r2, #255	; 0xff
 80093da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80093de:	e028      	b.n	8009432 <HAL_UART_Receive_IT+0xd6>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10d      	bne.n	8009404 <HAL_UART_Receive_IT+0xa8>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d104      	bne.n	80093fa <HAL_UART_Receive_IT+0x9e>
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	22ff      	movs	r2, #255	; 0xff
 80093f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80093f8:	e01b      	b.n	8009432 <HAL_UART_Receive_IT+0xd6>
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	227f      	movs	r2, #127	; 0x7f
 80093fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009402:	e016      	b.n	8009432 <HAL_UART_Receive_IT+0xd6>
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800940c:	d10d      	bne.n	800942a <HAL_UART_Receive_IT+0xce>
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d104      	bne.n	8009420 <HAL_UART_Receive_IT+0xc4>
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	227f      	movs	r2, #127	; 0x7f
 800941a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800941e:	e008      	b.n	8009432 <HAL_UART_Receive_IT+0xd6>
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	223f      	movs	r2, #63	; 0x3f
 8009424:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009428:	e003      	b.n	8009432 <HAL_UART_Receive_IT+0xd6>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2222      	movs	r2, #34	; 0x22
 800943e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	689a      	ldr	r2, [r3, #8]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f042 0201 	orr.w	r2, r2, #1
 8009450:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800945a:	d12a      	bne.n	80094b2 <HAL_UART_Receive_IT+0x156>
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009462:	88fa      	ldrh	r2, [r7, #6]
 8009464:	429a      	cmp	r2, r3
 8009466:	d324      	bcc.n	80094b2 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009470:	d107      	bne.n	8009482 <HAL_UART_Receive_IT+0x126>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d103      	bne.n	8009482 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	4a1f      	ldr	r2, [pc, #124]	; (80094fc <HAL_UART_Receive_IT+0x1a0>)
 800947e:	66da      	str	r2, [r3, #108]	; 0x6c
 8009480:	e002      	b.n	8009488 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	4a1e      	ldr	r2, [pc, #120]	; (8009500 <HAL_UART_Receive_IT+0x1a4>)
 8009486:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800949e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	689a      	ldr	r2, [r3, #8]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80094ae:	609a      	str	r2, [r3, #8]
 80094b0:	e01b      	b.n	80094ea <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ba:	d107      	bne.n	80094cc <HAL_UART_Receive_IT+0x170>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d103      	bne.n	80094cc <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	4a0f      	ldr	r2, [pc, #60]	; (8009504 <HAL_UART_Receive_IT+0x1a8>)
 80094c8:	66da      	str	r2, [r3, #108]	; 0x6c
 80094ca:	e002      	b.n	80094d2 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	4a0e      	ldr	r2, [pc, #56]	; (8009508 <HAL_UART_Receive_IT+0x1ac>)
 80094d0:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80094e8:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	e000      	b.n	80094f0 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80094ee:	2302      	movs	r3, #2
  }
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3714      	adds	r7, #20
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	0800c58d 	.word	0x0800c58d
 8009500:	0800c485 	.word	0x0800c485
 8009504:	0800c3d9 	.word	0x0800c3d9
 8009508:	0800c32f 	.word	0x0800c32f

0800950c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	4613      	mov	r3, r2
 8009518:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009520:	2b20      	cmp	r3, #32
 8009522:	d170      	bne.n	8009606 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d002      	beq.n	8009530 <HAL_UART_Receive_DMA+0x24>
 800952a:	88fb      	ldrh	r3, [r7, #6]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e069      	b.n	8009608 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800953a:	2b01      	cmp	r3, #1
 800953c:	d101      	bne.n	8009542 <HAL_UART_Receive_DMA+0x36>
 800953e:	2302      	movs	r3, #2
 8009540:	e062      	b.n	8009608 <HAL_UART_Receive_DMA+0xfc>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2201      	movs	r2, #1
 8009546:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	88fa      	ldrh	r2, [r7, #6]
 8009554:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2200      	movs	r2, #0
 800955c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2222      	movs	r2, #34	; 0x22
 8009564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800956c:	2b00      	cmp	r3, #0
 800956e:	d02c      	beq.n	80095ca <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009574:	4a26      	ldr	r2, [pc, #152]	; (8009610 <HAL_UART_Receive_DMA+0x104>)
 8009576:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800957c:	4a25      	ldr	r2, [pc, #148]	; (8009614 <HAL_UART_Receive_DMA+0x108>)
 800957e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009584:	4a24      	ldr	r2, [pc, #144]	; (8009618 <HAL_UART_Receive_DMA+0x10c>)
 8009586:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800958c:	2200      	movs	r2, #0
 800958e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	3324      	adds	r3, #36	; 0x24
 800959a:	4619      	mov	r1, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a0:	461a      	mov	r2, r3
 80095a2:	88fb      	ldrh	r3, [r7, #6]
 80095a4:	f7fa f9cc 	bl	8003940 <HAL_DMA_Start_IT>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00d      	beq.n	80095ca <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2210      	movs	r2, #16
 80095b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2220      	movs	r2, #32
 80095c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	e01e      	b.n	8009608 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095e0:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	689a      	ldr	r2, [r3, #8]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f042 0201 	orr.w	r2, r2, #1
 80095f0:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	689a      	ldr	r2, [r3, #8]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009600:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	e000      	b.n	8009608 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8009606:	2302      	movs	r3, #2
  }
}
 8009608:	4618      	mov	r0, r3
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	0800bf9d 	.word	0x0800bf9d
 8009614:	0800c003 	.word	0x0800c003
 8009618:	0800c01f 	.word	0x0800c01f

0800961c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b088      	sub	sp, #32
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800963c:	69fa      	ldr	r2, [r7, #28]
 800963e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009642:	4013      	ands	r3, r2
 8009644:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d118      	bne.n	800967e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	f003 0320 	and.w	r3, r3, #32
 8009652:	2b00      	cmp	r3, #0
 8009654:	d013      	beq.n	800967e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	f003 0320 	and.w	r3, r3, #32
 800965c:	2b00      	cmp	r3, #0
 800965e:	d104      	bne.n	800966a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d009      	beq.n	800967e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800966e:	2b00      	cmp	r3, #0
 8009670:	f000 8145 	beq.w	80098fe <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	4798      	blx	r3
      }
      return;
 800967c:	e13f      	b.n	80098fe <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	2b00      	cmp	r3, #0
 8009682:	f000 80e8 	beq.w	8009856 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009686:	697a      	ldr	r2, [r7, #20]
 8009688:	4ba1      	ldr	r3, [pc, #644]	; (8009910 <HAL_UART_IRQHandler+0x2f4>)
 800968a:	4013      	ands	r3, r2
 800968c:	2b00      	cmp	r3, #0
 800968e:	d105      	bne.n	800969c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009690:	69ba      	ldr	r2, [r7, #24]
 8009692:	4ba0      	ldr	r3, [pc, #640]	; (8009914 <HAL_UART_IRQHandler+0x2f8>)
 8009694:	4013      	ands	r3, r2
 8009696:	2b00      	cmp	r3, #0
 8009698:	f000 80dd 	beq.w	8009856 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d010      	beq.n	80096c8 <HAL_UART_IRQHandler+0xac>
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00b      	beq.n	80096c8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2201      	movs	r2, #1
 80096b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096be:	f043 0201 	orr.w	r2, r3, #1
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	f003 0302 	and.w	r3, r3, #2
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d010      	beq.n	80096f4 <HAL_UART_IRQHandler+0xd8>
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	f003 0301 	and.w	r3, r3, #1
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d00b      	beq.n	80096f4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2202      	movs	r2, #2
 80096e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ea:	f043 0204 	orr.w	r2, r3, #4
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	f003 0304 	and.w	r3, r3, #4
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d010      	beq.n	8009720 <HAL_UART_IRQHandler+0x104>
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	f003 0301 	and.w	r3, r3, #1
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00b      	beq.n	8009720 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2204      	movs	r2, #4
 800970e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009716:	f043 0202 	orr.w	r2, r3, #2
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	f003 0308 	and.w	r3, r3, #8
 8009726:	2b00      	cmp	r3, #0
 8009728:	d015      	beq.n	8009756 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	f003 0320 	and.w	r3, r3, #32
 8009730:	2b00      	cmp	r3, #0
 8009732:	d104      	bne.n	800973e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009734:	697a      	ldr	r2, [r7, #20]
 8009736:	4b76      	ldr	r3, [pc, #472]	; (8009910 <HAL_UART_IRQHandler+0x2f4>)
 8009738:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00b      	beq.n	8009756 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2208      	movs	r2, #8
 8009744:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800974c:	f043 0208 	orr.w	r2, r3, #8
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800975c:	2b00      	cmp	r3, #0
 800975e:	d011      	beq.n	8009784 <HAL_UART_IRQHandler+0x168>
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00c      	beq.n	8009784 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800977a:	f043 0220 	orr.w	r2, r3, #32
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800978a:	2b00      	cmp	r3, #0
 800978c:	f000 80b9 	beq.w	8009902 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	f003 0320 	and.w	r3, r3, #32
 8009796:	2b00      	cmp	r3, #0
 8009798:	d011      	beq.n	80097be <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	f003 0320 	and.w	r3, r3, #32
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d104      	bne.n	80097ae <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d007      	beq.n	80097be <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d003      	beq.n	80097be <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097c4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d0:	2b40      	cmp	r3, #64	; 0x40
 80097d2:	d004      	beq.n	80097de <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d031      	beq.n	8009842 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f002 fbb8 	bl	800bf54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ee:	2b40      	cmp	r3, #64	; 0x40
 80097f0:	d123      	bne.n	800983a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	689a      	ldr	r2, [r3, #8]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009800:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009806:	2b00      	cmp	r3, #0
 8009808:	d013      	beq.n	8009832 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800980e:	4a42      	ldr	r2, [pc, #264]	; (8009918 <HAL_UART_IRQHandler+0x2fc>)
 8009810:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009816:	4618      	mov	r0, r3
 8009818:	f7fa fafc 	bl	8003e14 <HAL_DMA_Abort_IT>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d017      	beq.n	8009852 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800982c:	4610      	mov	r0, r2
 800982e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009830:	e00f      	b.n	8009852 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f87c 	bl	8009930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009838:	e00b      	b.n	8009852 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f878 	bl	8009930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009840:	e007      	b.n	8009852 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f874 	bl	8009930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009850:	e057      	b.n	8009902 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009852:	bf00      	nop
    return;
 8009854:	e055      	b.n	8009902 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00d      	beq.n	800987c <HAL_UART_IRQHandler+0x260>
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009866:	2b00      	cmp	r3, #0
 8009868:	d008      	beq.n	800987c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009872:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f002 ff0d 	bl	800c694 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800987a:	e045      	b.n	8009908 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009882:	2b00      	cmp	r3, #0
 8009884:	d012      	beq.n	80098ac <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800988c:	2b00      	cmp	r3, #0
 800988e:	d104      	bne.n	800989a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d008      	beq.n	80098ac <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d031      	beq.n	8009906 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	4798      	blx	r3
    }
    return;
 80098aa:	e02c      	b.n	8009906 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d008      	beq.n	80098c8 <HAL_UART_IRQHandler+0x2ac>
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d003      	beq.n	80098c8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f002 fd1a 	bl	800c2fa <UART_EndTransmit_IT>
    return;
 80098c6:	e01f      	b.n	8009908 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d008      	beq.n	80098e4 <HAL_UART_IRQHandler+0x2c8>
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d003      	beq.n	80098e4 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f002 feed 	bl	800c6bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098e2:	e011      	b.n	8009908 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00c      	beq.n	8009908 <HAL_UART_IRQHandler+0x2ec>
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	da09      	bge.n	8009908 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f002 fed7 	bl	800c6a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098fa:	bf00      	nop
 80098fc:	e004      	b.n	8009908 <HAL_UART_IRQHandler+0x2ec>
      return;
 80098fe:	bf00      	nop
 8009900:	e002      	b.n	8009908 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009902:	bf00      	nop
 8009904:	e000      	b.n	8009908 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009906:	bf00      	nop
  }
}
 8009908:	3720      	adds	r7, #32
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	10000001 	.word	0x10000001
 8009914:	04000120 	.word	0x04000120
 8009918:	0800c09f 	.word	0x0800c09f

0800991c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	0000      	movs	r0, r0
	...

08009948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009948:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800994c:	b090      	sub	sp, #64	; 0x40
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009952:	2300      	movs	r3, #0
 8009954:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800995c:	2300      	movs	r3, #0
 800995e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	689a      	ldr	r2, [r3, #8]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	431a      	orrs	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	431a      	orrs	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	69db      	ldr	r3, [r3, #28]
 8009974:	4313      	orrs	r3, r2
 8009976:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800997c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800997e:	4313      	orrs	r3, r2
 8009980:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	4bc1      	ldr	r3, [pc, #772]	; (8009c90 <UART_SetConfig+0x348>)
 800998a:	4013      	ands	r3, r2
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	6812      	ldr	r2, [r2, #0]
 8009990:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009992:	430b      	orrs	r3, r1
 8009994:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	68da      	ldr	r2, [r3, #12]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	430a      	orrs	r2, r1
 80099aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4ab7      	ldr	r2, [pc, #732]	; (8009c94 <UART_SetConfig+0x34c>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d004      	beq.n	80099c6 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a1b      	ldr	r3, [r3, #32]
 80099c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80099c2:	4313      	orrs	r3, r2
 80099c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	689a      	ldr	r2, [r3, #8]
 80099cc:	4bb2      	ldr	r3, [pc, #712]	; (8009c98 <UART_SetConfig+0x350>)
 80099ce:	4013      	ands	r3, r2
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	6812      	ldr	r2, [r2, #0]
 80099d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099d6:	430b      	orrs	r3, r1
 80099d8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e0:	f023 010f 	bic.w	r1, r3, #15
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	430a      	orrs	r2, r1
 80099ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4aa9      	ldr	r2, [pc, #676]	; (8009c9c <UART_SetConfig+0x354>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d177      	bne.n	8009aea <UART_SetConfig+0x1a2>
 80099fa:	4ba9      	ldr	r3, [pc, #676]	; (8009ca0 <UART_SetConfig+0x358>)
 80099fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a02:	2b28      	cmp	r3, #40	; 0x28
 8009a04:	d86c      	bhi.n	8009ae0 <UART_SetConfig+0x198>
 8009a06:	a201      	add	r2, pc, #4	; (adr r2, 8009a0c <UART_SetConfig+0xc4>)
 8009a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0c:	08009ab1 	.word	0x08009ab1
 8009a10:	08009ae1 	.word	0x08009ae1
 8009a14:	08009ae1 	.word	0x08009ae1
 8009a18:	08009ae1 	.word	0x08009ae1
 8009a1c:	08009ae1 	.word	0x08009ae1
 8009a20:	08009ae1 	.word	0x08009ae1
 8009a24:	08009ae1 	.word	0x08009ae1
 8009a28:	08009ae1 	.word	0x08009ae1
 8009a2c:	08009ab9 	.word	0x08009ab9
 8009a30:	08009ae1 	.word	0x08009ae1
 8009a34:	08009ae1 	.word	0x08009ae1
 8009a38:	08009ae1 	.word	0x08009ae1
 8009a3c:	08009ae1 	.word	0x08009ae1
 8009a40:	08009ae1 	.word	0x08009ae1
 8009a44:	08009ae1 	.word	0x08009ae1
 8009a48:	08009ae1 	.word	0x08009ae1
 8009a4c:	08009ac1 	.word	0x08009ac1
 8009a50:	08009ae1 	.word	0x08009ae1
 8009a54:	08009ae1 	.word	0x08009ae1
 8009a58:	08009ae1 	.word	0x08009ae1
 8009a5c:	08009ae1 	.word	0x08009ae1
 8009a60:	08009ae1 	.word	0x08009ae1
 8009a64:	08009ae1 	.word	0x08009ae1
 8009a68:	08009ae1 	.word	0x08009ae1
 8009a6c:	08009ac9 	.word	0x08009ac9
 8009a70:	08009ae1 	.word	0x08009ae1
 8009a74:	08009ae1 	.word	0x08009ae1
 8009a78:	08009ae1 	.word	0x08009ae1
 8009a7c:	08009ae1 	.word	0x08009ae1
 8009a80:	08009ae1 	.word	0x08009ae1
 8009a84:	08009ae1 	.word	0x08009ae1
 8009a88:	08009ae1 	.word	0x08009ae1
 8009a8c:	08009ad1 	.word	0x08009ad1
 8009a90:	08009ae1 	.word	0x08009ae1
 8009a94:	08009ae1 	.word	0x08009ae1
 8009a98:	08009ae1 	.word	0x08009ae1
 8009a9c:	08009ae1 	.word	0x08009ae1
 8009aa0:	08009ae1 	.word	0x08009ae1
 8009aa4:	08009ae1 	.word	0x08009ae1
 8009aa8:	08009ae1 	.word	0x08009ae1
 8009aac:	08009ad9 	.word	0x08009ad9
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ab6:	e233      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009ab8:	2304      	movs	r3, #4
 8009aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009abe:	e22f      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009ac0:	2308      	movs	r3, #8
 8009ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ac6:	e22b      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009ac8:	2310      	movs	r3, #16
 8009aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ace:	e227      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009ad0:	2320      	movs	r3, #32
 8009ad2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ad6:	e223      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009ad8:	2340      	movs	r3, #64	; 0x40
 8009ada:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ade:	e21f      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009ae0:	2380      	movs	r3, #128	; 0x80
 8009ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ae6:	bf00      	nop
 8009ae8:	e21a      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a6d      	ldr	r2, [pc, #436]	; (8009ca4 <UART_SetConfig+0x35c>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d132      	bne.n	8009b5a <UART_SetConfig+0x212>
 8009af4:	4b6a      	ldr	r3, [pc, #424]	; (8009ca0 <UART_SetConfig+0x358>)
 8009af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009af8:	f003 0307 	and.w	r3, r3, #7
 8009afc:	2b05      	cmp	r3, #5
 8009afe:	d827      	bhi.n	8009b50 <UART_SetConfig+0x208>
 8009b00:	a201      	add	r2, pc, #4	; (adr r2, 8009b08 <UART_SetConfig+0x1c0>)
 8009b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b06:	bf00      	nop
 8009b08:	08009b21 	.word	0x08009b21
 8009b0c:	08009b29 	.word	0x08009b29
 8009b10:	08009b31 	.word	0x08009b31
 8009b14:	08009b39 	.word	0x08009b39
 8009b18:	08009b41 	.word	0x08009b41
 8009b1c:	08009b49 	.word	0x08009b49
 8009b20:	2300      	movs	r3, #0
 8009b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b26:	e1fb      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009b28:	2304      	movs	r3, #4
 8009b2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b2e:	e1f7      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009b30:	2308      	movs	r3, #8
 8009b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b36:	e1f3      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009b38:	2310      	movs	r3, #16
 8009b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b3e:	e1ef      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009b40:	2320      	movs	r3, #32
 8009b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b46:	e1eb      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009b48:	2340      	movs	r3, #64	; 0x40
 8009b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b4e:	e1e7      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009b50:	2380      	movs	r3, #128	; 0x80
 8009b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b56:	bf00      	nop
 8009b58:	e1e2      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a52      	ldr	r2, [pc, #328]	; (8009ca8 <UART_SetConfig+0x360>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d132      	bne.n	8009bca <UART_SetConfig+0x282>
 8009b64:	4b4e      	ldr	r3, [pc, #312]	; (8009ca0 <UART_SetConfig+0x358>)
 8009b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b68:	f003 0307 	and.w	r3, r3, #7
 8009b6c:	2b05      	cmp	r3, #5
 8009b6e:	d827      	bhi.n	8009bc0 <UART_SetConfig+0x278>
 8009b70:	a201      	add	r2, pc, #4	; (adr r2, 8009b78 <UART_SetConfig+0x230>)
 8009b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b76:	bf00      	nop
 8009b78:	08009b91 	.word	0x08009b91
 8009b7c:	08009b99 	.word	0x08009b99
 8009b80:	08009ba1 	.word	0x08009ba1
 8009b84:	08009ba9 	.word	0x08009ba9
 8009b88:	08009bb1 	.word	0x08009bb1
 8009b8c:	08009bb9 	.word	0x08009bb9
 8009b90:	2300      	movs	r3, #0
 8009b92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b96:	e1c3      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009b98:	2304      	movs	r3, #4
 8009b9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b9e:	e1bf      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009ba0:	2308      	movs	r3, #8
 8009ba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ba6:	e1bb      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009ba8:	2310      	movs	r3, #16
 8009baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bae:	e1b7      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009bb0:	2320      	movs	r3, #32
 8009bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bb6:	e1b3      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009bb8:	2340      	movs	r3, #64	; 0x40
 8009bba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bbe:	e1af      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009bc0:	2380      	movs	r3, #128	; 0x80
 8009bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bc6:	bf00      	nop
 8009bc8:	e1aa      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a37      	ldr	r2, [pc, #220]	; (8009cac <UART_SetConfig+0x364>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d132      	bne.n	8009c3a <UART_SetConfig+0x2f2>
 8009bd4:	4b32      	ldr	r3, [pc, #200]	; (8009ca0 <UART_SetConfig+0x358>)
 8009bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bd8:	f003 0307 	and.w	r3, r3, #7
 8009bdc:	2b05      	cmp	r3, #5
 8009bde:	d827      	bhi.n	8009c30 <UART_SetConfig+0x2e8>
 8009be0:	a201      	add	r2, pc, #4	; (adr r2, 8009be8 <UART_SetConfig+0x2a0>)
 8009be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be6:	bf00      	nop
 8009be8:	08009c01 	.word	0x08009c01
 8009bec:	08009c09 	.word	0x08009c09
 8009bf0:	08009c11 	.word	0x08009c11
 8009bf4:	08009c19 	.word	0x08009c19
 8009bf8:	08009c21 	.word	0x08009c21
 8009bfc:	08009c29 	.word	0x08009c29
 8009c00:	2300      	movs	r3, #0
 8009c02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c06:	e18b      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009c08:	2304      	movs	r3, #4
 8009c0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c0e:	e187      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009c10:	2308      	movs	r3, #8
 8009c12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c16:	e183      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009c18:	2310      	movs	r3, #16
 8009c1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c1e:	e17f      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009c20:	2320      	movs	r3, #32
 8009c22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c26:	e17b      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009c28:	2340      	movs	r3, #64	; 0x40
 8009c2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c2e:	e177      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009c30:	2380      	movs	r3, #128	; 0x80
 8009c32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c36:	bf00      	nop
 8009c38:	e172      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a1c      	ldr	r2, [pc, #112]	; (8009cb0 <UART_SetConfig+0x368>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d144      	bne.n	8009cce <UART_SetConfig+0x386>
 8009c44:	4b16      	ldr	r3, [pc, #88]	; (8009ca0 <UART_SetConfig+0x358>)
 8009c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c48:	f003 0307 	and.w	r3, r3, #7
 8009c4c:	2b05      	cmp	r3, #5
 8009c4e:	d839      	bhi.n	8009cc4 <UART_SetConfig+0x37c>
 8009c50:	a201      	add	r2, pc, #4	; (adr r2, 8009c58 <UART_SetConfig+0x310>)
 8009c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c56:	bf00      	nop
 8009c58:	08009c71 	.word	0x08009c71
 8009c5c:	08009c79 	.word	0x08009c79
 8009c60:	08009c81 	.word	0x08009c81
 8009c64:	08009c89 	.word	0x08009c89
 8009c68:	08009cb5 	.word	0x08009cb5
 8009c6c:	08009cbd 	.word	0x08009cbd
 8009c70:	2300      	movs	r3, #0
 8009c72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c76:	e153      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009c78:	2304      	movs	r3, #4
 8009c7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c7e:	e14f      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009c80:	2308      	movs	r3, #8
 8009c82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c86:	e14b      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009c88:	2310      	movs	r3, #16
 8009c8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c8e:	e147      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009c90:	cfff69f3 	.word	0xcfff69f3
 8009c94:	58000c00 	.word	0x58000c00
 8009c98:	11fff4ff 	.word	0x11fff4ff
 8009c9c:	40011000 	.word	0x40011000
 8009ca0:	58024400 	.word	0x58024400
 8009ca4:	40004400 	.word	0x40004400
 8009ca8:	40004800 	.word	0x40004800
 8009cac:	40004c00 	.word	0x40004c00
 8009cb0:	40005000 	.word	0x40005000
 8009cb4:	2320      	movs	r3, #32
 8009cb6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cba:	e131      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009cbc:	2340      	movs	r3, #64	; 0x40
 8009cbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cc2:	e12d      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009cc4:	2380      	movs	r3, #128	; 0x80
 8009cc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cca:	bf00      	nop
 8009ccc:	e128      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4ac3      	ldr	r2, [pc, #780]	; (8009fe0 <UART_SetConfig+0x698>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d178      	bne.n	8009dca <UART_SetConfig+0x482>
 8009cd8:	4bc2      	ldr	r3, [pc, #776]	; (8009fe4 <UART_SetConfig+0x69c>)
 8009cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ce0:	2b28      	cmp	r3, #40	; 0x28
 8009ce2:	d86d      	bhi.n	8009dc0 <UART_SetConfig+0x478>
 8009ce4:	a201      	add	r2, pc, #4	; (adr r2, 8009cec <UART_SetConfig+0x3a4>)
 8009ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cea:	bf00      	nop
 8009cec:	08009d91 	.word	0x08009d91
 8009cf0:	08009dc1 	.word	0x08009dc1
 8009cf4:	08009dc1 	.word	0x08009dc1
 8009cf8:	08009dc1 	.word	0x08009dc1
 8009cfc:	08009dc1 	.word	0x08009dc1
 8009d00:	08009dc1 	.word	0x08009dc1
 8009d04:	08009dc1 	.word	0x08009dc1
 8009d08:	08009dc1 	.word	0x08009dc1
 8009d0c:	08009d99 	.word	0x08009d99
 8009d10:	08009dc1 	.word	0x08009dc1
 8009d14:	08009dc1 	.word	0x08009dc1
 8009d18:	08009dc1 	.word	0x08009dc1
 8009d1c:	08009dc1 	.word	0x08009dc1
 8009d20:	08009dc1 	.word	0x08009dc1
 8009d24:	08009dc1 	.word	0x08009dc1
 8009d28:	08009dc1 	.word	0x08009dc1
 8009d2c:	08009da1 	.word	0x08009da1
 8009d30:	08009dc1 	.word	0x08009dc1
 8009d34:	08009dc1 	.word	0x08009dc1
 8009d38:	08009dc1 	.word	0x08009dc1
 8009d3c:	08009dc1 	.word	0x08009dc1
 8009d40:	08009dc1 	.word	0x08009dc1
 8009d44:	08009dc1 	.word	0x08009dc1
 8009d48:	08009dc1 	.word	0x08009dc1
 8009d4c:	08009da9 	.word	0x08009da9
 8009d50:	08009dc1 	.word	0x08009dc1
 8009d54:	08009dc1 	.word	0x08009dc1
 8009d58:	08009dc1 	.word	0x08009dc1
 8009d5c:	08009dc1 	.word	0x08009dc1
 8009d60:	08009dc1 	.word	0x08009dc1
 8009d64:	08009dc1 	.word	0x08009dc1
 8009d68:	08009dc1 	.word	0x08009dc1
 8009d6c:	08009db1 	.word	0x08009db1
 8009d70:	08009dc1 	.word	0x08009dc1
 8009d74:	08009dc1 	.word	0x08009dc1
 8009d78:	08009dc1 	.word	0x08009dc1
 8009d7c:	08009dc1 	.word	0x08009dc1
 8009d80:	08009dc1 	.word	0x08009dc1
 8009d84:	08009dc1 	.word	0x08009dc1
 8009d88:	08009dc1 	.word	0x08009dc1
 8009d8c:	08009db9 	.word	0x08009db9
 8009d90:	2301      	movs	r3, #1
 8009d92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d96:	e0c3      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009d98:	2304      	movs	r3, #4
 8009d9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d9e:	e0bf      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009da0:	2308      	movs	r3, #8
 8009da2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009da6:	e0bb      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009da8:	2310      	movs	r3, #16
 8009daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dae:	e0b7      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009db0:	2320      	movs	r3, #32
 8009db2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009db6:	e0b3      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009db8:	2340      	movs	r3, #64	; 0x40
 8009dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dbe:	e0af      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009dc0:	2380      	movs	r3, #128	; 0x80
 8009dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dc6:	bf00      	nop
 8009dc8:	e0aa      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a86      	ldr	r2, [pc, #536]	; (8009fe8 <UART_SetConfig+0x6a0>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d132      	bne.n	8009e3a <UART_SetConfig+0x4f2>
 8009dd4:	4b83      	ldr	r3, [pc, #524]	; (8009fe4 <UART_SetConfig+0x69c>)
 8009dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dd8:	f003 0307 	and.w	r3, r3, #7
 8009ddc:	2b05      	cmp	r3, #5
 8009dde:	d827      	bhi.n	8009e30 <UART_SetConfig+0x4e8>
 8009de0:	a201      	add	r2, pc, #4	; (adr r2, 8009de8 <UART_SetConfig+0x4a0>)
 8009de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de6:	bf00      	nop
 8009de8:	08009e01 	.word	0x08009e01
 8009dec:	08009e09 	.word	0x08009e09
 8009df0:	08009e11 	.word	0x08009e11
 8009df4:	08009e19 	.word	0x08009e19
 8009df8:	08009e21 	.word	0x08009e21
 8009dfc:	08009e29 	.word	0x08009e29
 8009e00:	2300      	movs	r3, #0
 8009e02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e06:	e08b      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009e08:	2304      	movs	r3, #4
 8009e0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e0e:	e087      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009e10:	2308      	movs	r3, #8
 8009e12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e16:	e083      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009e18:	2310      	movs	r3, #16
 8009e1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e1e:	e07f      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009e20:	2320      	movs	r3, #32
 8009e22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e26:	e07b      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009e28:	2340      	movs	r3, #64	; 0x40
 8009e2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e2e:	e077      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009e30:	2380      	movs	r3, #128	; 0x80
 8009e32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e36:	bf00      	nop
 8009e38:	e072      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a6b      	ldr	r2, [pc, #428]	; (8009fec <UART_SetConfig+0x6a4>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d132      	bne.n	8009eaa <UART_SetConfig+0x562>
 8009e44:	4b67      	ldr	r3, [pc, #412]	; (8009fe4 <UART_SetConfig+0x69c>)
 8009e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e48:	f003 0307 	and.w	r3, r3, #7
 8009e4c:	2b05      	cmp	r3, #5
 8009e4e:	d827      	bhi.n	8009ea0 <UART_SetConfig+0x558>
 8009e50:	a201      	add	r2, pc, #4	; (adr r2, 8009e58 <UART_SetConfig+0x510>)
 8009e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e56:	bf00      	nop
 8009e58:	08009e71 	.word	0x08009e71
 8009e5c:	08009e79 	.word	0x08009e79
 8009e60:	08009e81 	.word	0x08009e81
 8009e64:	08009e89 	.word	0x08009e89
 8009e68:	08009e91 	.word	0x08009e91
 8009e6c:	08009e99 	.word	0x08009e99
 8009e70:	2300      	movs	r3, #0
 8009e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e76:	e053      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009e78:	2304      	movs	r3, #4
 8009e7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e7e:	e04f      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009e80:	2308      	movs	r3, #8
 8009e82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e86:	e04b      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009e88:	2310      	movs	r3, #16
 8009e8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e8e:	e047      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009e90:	2320      	movs	r3, #32
 8009e92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e96:	e043      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009e98:	2340      	movs	r3, #64	; 0x40
 8009e9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e9e:	e03f      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009ea0:	2380      	movs	r3, #128	; 0x80
 8009ea2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ea6:	bf00      	nop
 8009ea8:	e03a      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a50      	ldr	r2, [pc, #320]	; (8009ff0 <UART_SetConfig+0x6a8>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d132      	bne.n	8009f1a <UART_SetConfig+0x5d2>
 8009eb4:	4b4b      	ldr	r3, [pc, #300]	; (8009fe4 <UART_SetConfig+0x69c>)
 8009eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eb8:	f003 0307 	and.w	r3, r3, #7
 8009ebc:	2b05      	cmp	r3, #5
 8009ebe:	d827      	bhi.n	8009f10 <UART_SetConfig+0x5c8>
 8009ec0:	a201      	add	r2, pc, #4	; (adr r2, 8009ec8 <UART_SetConfig+0x580>)
 8009ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec6:	bf00      	nop
 8009ec8:	08009ee1 	.word	0x08009ee1
 8009ecc:	08009ee9 	.word	0x08009ee9
 8009ed0:	08009ef1 	.word	0x08009ef1
 8009ed4:	08009ef9 	.word	0x08009ef9
 8009ed8:	08009f01 	.word	0x08009f01
 8009edc:	08009f09 	.word	0x08009f09
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ee6:	e01b      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009ee8:	2304      	movs	r3, #4
 8009eea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009eee:	e017      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009ef0:	2308      	movs	r3, #8
 8009ef2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ef6:	e013      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009ef8:	2310      	movs	r3, #16
 8009efa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009efe:	e00f      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009f00:	2320      	movs	r3, #32
 8009f02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f06:	e00b      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009f08:	2340      	movs	r3, #64	; 0x40
 8009f0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f0e:	e007      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009f10:	2380      	movs	r3, #128	; 0x80
 8009f12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f16:	bf00      	nop
 8009f18:	e002      	b.n	8009f20 <UART_SetConfig+0x5d8>
 8009f1a:	2380      	movs	r3, #128	; 0x80
 8009f1c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a32      	ldr	r2, [pc, #200]	; (8009ff0 <UART_SetConfig+0x6a8>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	f040 86f7 	bne.w	800ad1a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f2c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009f30:	2b08      	cmp	r3, #8
 8009f32:	f000 80c0 	beq.w	800a0b6 <UART_SetConfig+0x76e>
 8009f36:	2b08      	cmp	r3, #8
 8009f38:	dc04      	bgt.n	8009f44 <UART_SetConfig+0x5fc>
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d00c      	beq.n	8009f58 <UART_SetConfig+0x610>
 8009f3e:	2b04      	cmp	r3, #4
 8009f40:	d065      	beq.n	800a00e <UART_SetConfig+0x6c6>
 8009f42:	e27a      	b.n	800a43a <UART_SetConfig+0xaf2>
 8009f44:	2b20      	cmp	r3, #32
 8009f46:	f000 81b0 	beq.w	800a2aa <UART_SetConfig+0x962>
 8009f4a:	2b40      	cmp	r3, #64	; 0x40
 8009f4c:	f000 821e 	beq.w	800a38c <UART_SetConfig+0xa44>
 8009f50:	2b10      	cmp	r3, #16
 8009f52:	f000 8104 	beq.w	800a15e <UART_SetConfig+0x816>
 8009f56:	e270      	b.n	800a43a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009f58:	f7fd ff82 	bl	8007e60 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d04e      	beq.n	800a004 <UART_SetConfig+0x6bc>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d048      	beq.n	800a000 <UART_SetConfig+0x6b8>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d042      	beq.n	8009ffc <UART_SetConfig+0x6b4>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	d03c      	beq.n	8009ff8 <UART_SetConfig+0x6b0>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f82:	2b04      	cmp	r3, #4
 8009f84:	d036      	beq.n	8009ff4 <UART_SetConfig+0x6ac>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8a:	2b05      	cmp	r3, #5
 8009f8c:	d026      	beq.n	8009fdc <UART_SetConfig+0x694>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f92:	2b06      	cmp	r3, #6
 8009f94:	d020      	beq.n	8009fd8 <UART_SetConfig+0x690>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9a:	2b07      	cmp	r3, #7
 8009f9c:	d01a      	beq.n	8009fd4 <UART_SetConfig+0x68c>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa2:	2b08      	cmp	r3, #8
 8009fa4:	d014      	beq.n	8009fd0 <UART_SetConfig+0x688>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009faa:	2b09      	cmp	r3, #9
 8009fac:	d00e      	beq.n	8009fcc <UART_SetConfig+0x684>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb2:	2b0a      	cmp	r3, #10
 8009fb4:	d008      	beq.n	8009fc8 <UART_SetConfig+0x680>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fba:	2b0b      	cmp	r3, #11
 8009fbc:	d102      	bne.n	8009fc4 <UART_SetConfig+0x67c>
 8009fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fc2:	e020      	b.n	800a006 <UART_SetConfig+0x6be>
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e01e      	b.n	800a006 <UART_SetConfig+0x6be>
 8009fc8:	2380      	movs	r3, #128	; 0x80
 8009fca:	e01c      	b.n	800a006 <UART_SetConfig+0x6be>
 8009fcc:	2340      	movs	r3, #64	; 0x40
 8009fce:	e01a      	b.n	800a006 <UART_SetConfig+0x6be>
 8009fd0:	2320      	movs	r3, #32
 8009fd2:	e018      	b.n	800a006 <UART_SetConfig+0x6be>
 8009fd4:	2310      	movs	r3, #16
 8009fd6:	e016      	b.n	800a006 <UART_SetConfig+0x6be>
 8009fd8:	230c      	movs	r3, #12
 8009fda:	e014      	b.n	800a006 <UART_SetConfig+0x6be>
 8009fdc:	230a      	movs	r3, #10
 8009fde:	e012      	b.n	800a006 <UART_SetConfig+0x6be>
 8009fe0:	40011400 	.word	0x40011400
 8009fe4:	58024400 	.word	0x58024400
 8009fe8:	40007800 	.word	0x40007800
 8009fec:	40007c00 	.word	0x40007c00
 8009ff0:	58000c00 	.word	0x58000c00
 8009ff4:	2308      	movs	r3, #8
 8009ff6:	e006      	b.n	800a006 <UART_SetConfig+0x6be>
 8009ff8:	2306      	movs	r3, #6
 8009ffa:	e004      	b.n	800a006 <UART_SetConfig+0x6be>
 8009ffc:	2304      	movs	r3, #4
 8009ffe:	e002      	b.n	800a006 <UART_SetConfig+0x6be>
 800a000:	2302      	movs	r3, #2
 800a002:	e000      	b.n	800a006 <UART_SetConfig+0x6be>
 800a004:	2301      	movs	r3, #1
 800a006:	fbb2 f3f3 	udiv	r3, r2, r3
 800a00a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a00c:	e219      	b.n	800a442 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a00e:	f107 0318 	add.w	r3, r7, #24
 800a012:	4618      	mov	r0, r3
 800a014:	f7fd ff3a 	bl	8007e8c <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a018:	69fa      	ldr	r2, [r7, #28]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d044      	beq.n	800a0ac <UART_SetConfig+0x764>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a026:	2b01      	cmp	r3, #1
 800a028:	d03e      	beq.n	800a0a8 <UART_SetConfig+0x760>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d038      	beq.n	800a0a4 <UART_SetConfig+0x75c>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a036:	2b03      	cmp	r3, #3
 800a038:	d032      	beq.n	800a0a0 <UART_SetConfig+0x758>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03e:	2b04      	cmp	r3, #4
 800a040:	d02c      	beq.n	800a09c <UART_SetConfig+0x754>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a046:	2b05      	cmp	r3, #5
 800a048:	d026      	beq.n	800a098 <UART_SetConfig+0x750>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04e:	2b06      	cmp	r3, #6
 800a050:	d020      	beq.n	800a094 <UART_SetConfig+0x74c>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a056:	2b07      	cmp	r3, #7
 800a058:	d01a      	beq.n	800a090 <UART_SetConfig+0x748>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05e:	2b08      	cmp	r3, #8
 800a060:	d014      	beq.n	800a08c <UART_SetConfig+0x744>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a066:	2b09      	cmp	r3, #9
 800a068:	d00e      	beq.n	800a088 <UART_SetConfig+0x740>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06e:	2b0a      	cmp	r3, #10
 800a070:	d008      	beq.n	800a084 <UART_SetConfig+0x73c>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a076:	2b0b      	cmp	r3, #11
 800a078:	d102      	bne.n	800a080 <UART_SetConfig+0x738>
 800a07a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a07e:	e016      	b.n	800a0ae <UART_SetConfig+0x766>
 800a080:	2301      	movs	r3, #1
 800a082:	e014      	b.n	800a0ae <UART_SetConfig+0x766>
 800a084:	2380      	movs	r3, #128	; 0x80
 800a086:	e012      	b.n	800a0ae <UART_SetConfig+0x766>
 800a088:	2340      	movs	r3, #64	; 0x40
 800a08a:	e010      	b.n	800a0ae <UART_SetConfig+0x766>
 800a08c:	2320      	movs	r3, #32
 800a08e:	e00e      	b.n	800a0ae <UART_SetConfig+0x766>
 800a090:	2310      	movs	r3, #16
 800a092:	e00c      	b.n	800a0ae <UART_SetConfig+0x766>
 800a094:	230c      	movs	r3, #12
 800a096:	e00a      	b.n	800a0ae <UART_SetConfig+0x766>
 800a098:	230a      	movs	r3, #10
 800a09a:	e008      	b.n	800a0ae <UART_SetConfig+0x766>
 800a09c:	2308      	movs	r3, #8
 800a09e:	e006      	b.n	800a0ae <UART_SetConfig+0x766>
 800a0a0:	2306      	movs	r3, #6
 800a0a2:	e004      	b.n	800a0ae <UART_SetConfig+0x766>
 800a0a4:	2304      	movs	r3, #4
 800a0a6:	e002      	b.n	800a0ae <UART_SetConfig+0x766>
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	e000      	b.n	800a0ae <UART_SetConfig+0x766>
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0b4:	e1c5      	b.n	800a442 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0b6:	f107 030c 	add.w	r3, r7, #12
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fe f832 	bl	8008124 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a0c0:	693a      	ldr	r2, [r7, #16]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d044      	beq.n	800a154 <UART_SetConfig+0x80c>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d03e      	beq.n	800a150 <UART_SetConfig+0x808>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	d038      	beq.n	800a14c <UART_SetConfig+0x804>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	d032      	beq.n	800a148 <UART_SetConfig+0x800>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e6:	2b04      	cmp	r3, #4
 800a0e8:	d02c      	beq.n	800a144 <UART_SetConfig+0x7fc>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ee:	2b05      	cmp	r3, #5
 800a0f0:	d026      	beq.n	800a140 <UART_SetConfig+0x7f8>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f6:	2b06      	cmp	r3, #6
 800a0f8:	d020      	beq.n	800a13c <UART_SetConfig+0x7f4>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fe:	2b07      	cmp	r3, #7
 800a100:	d01a      	beq.n	800a138 <UART_SetConfig+0x7f0>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a106:	2b08      	cmp	r3, #8
 800a108:	d014      	beq.n	800a134 <UART_SetConfig+0x7ec>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10e:	2b09      	cmp	r3, #9
 800a110:	d00e      	beq.n	800a130 <UART_SetConfig+0x7e8>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a116:	2b0a      	cmp	r3, #10
 800a118:	d008      	beq.n	800a12c <UART_SetConfig+0x7e4>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11e:	2b0b      	cmp	r3, #11
 800a120:	d102      	bne.n	800a128 <UART_SetConfig+0x7e0>
 800a122:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a126:	e016      	b.n	800a156 <UART_SetConfig+0x80e>
 800a128:	2301      	movs	r3, #1
 800a12a:	e014      	b.n	800a156 <UART_SetConfig+0x80e>
 800a12c:	2380      	movs	r3, #128	; 0x80
 800a12e:	e012      	b.n	800a156 <UART_SetConfig+0x80e>
 800a130:	2340      	movs	r3, #64	; 0x40
 800a132:	e010      	b.n	800a156 <UART_SetConfig+0x80e>
 800a134:	2320      	movs	r3, #32
 800a136:	e00e      	b.n	800a156 <UART_SetConfig+0x80e>
 800a138:	2310      	movs	r3, #16
 800a13a:	e00c      	b.n	800a156 <UART_SetConfig+0x80e>
 800a13c:	230c      	movs	r3, #12
 800a13e:	e00a      	b.n	800a156 <UART_SetConfig+0x80e>
 800a140:	230a      	movs	r3, #10
 800a142:	e008      	b.n	800a156 <UART_SetConfig+0x80e>
 800a144:	2308      	movs	r3, #8
 800a146:	e006      	b.n	800a156 <UART_SetConfig+0x80e>
 800a148:	2306      	movs	r3, #6
 800a14a:	e004      	b.n	800a156 <UART_SetConfig+0x80e>
 800a14c:	2304      	movs	r3, #4
 800a14e:	e002      	b.n	800a156 <UART_SetConfig+0x80e>
 800a150:	2302      	movs	r3, #2
 800a152:	e000      	b.n	800a156 <UART_SetConfig+0x80e>
 800a154:	2301      	movs	r3, #1
 800a156:	fbb2 f3f3 	udiv	r3, r2, r3
 800a15a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a15c:	e171      	b.n	800a442 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a15e:	4b7a      	ldr	r3, [pc, #488]	; (800a348 <UART_SetConfig+0xa00>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0320 	and.w	r3, r3, #32
 800a166:	2b00      	cmp	r3, #0
 800a168:	d054      	beq.n	800a214 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a16a:	4b77      	ldr	r3, [pc, #476]	; (800a348 <UART_SetConfig+0xa00>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	08db      	lsrs	r3, r3, #3
 800a170:	f003 0303 	and.w	r3, r3, #3
 800a174:	4a75      	ldr	r2, [pc, #468]	; (800a34c <UART_SetConfig+0xa04>)
 800a176:	40da      	lsrs	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d044      	beq.n	800a20a <UART_SetConfig+0x8c2>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a184:	2b01      	cmp	r3, #1
 800a186:	d03e      	beq.n	800a206 <UART_SetConfig+0x8be>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d038      	beq.n	800a202 <UART_SetConfig+0x8ba>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a194:	2b03      	cmp	r3, #3
 800a196:	d032      	beq.n	800a1fe <UART_SetConfig+0x8b6>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19c:	2b04      	cmp	r3, #4
 800a19e:	d02c      	beq.n	800a1fa <UART_SetConfig+0x8b2>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a4:	2b05      	cmp	r3, #5
 800a1a6:	d026      	beq.n	800a1f6 <UART_SetConfig+0x8ae>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ac:	2b06      	cmp	r3, #6
 800a1ae:	d020      	beq.n	800a1f2 <UART_SetConfig+0x8aa>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b4:	2b07      	cmp	r3, #7
 800a1b6:	d01a      	beq.n	800a1ee <UART_SetConfig+0x8a6>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1bc:	2b08      	cmp	r3, #8
 800a1be:	d014      	beq.n	800a1ea <UART_SetConfig+0x8a2>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c4:	2b09      	cmp	r3, #9
 800a1c6:	d00e      	beq.n	800a1e6 <UART_SetConfig+0x89e>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1cc:	2b0a      	cmp	r3, #10
 800a1ce:	d008      	beq.n	800a1e2 <UART_SetConfig+0x89a>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d4:	2b0b      	cmp	r3, #11
 800a1d6:	d102      	bne.n	800a1de <UART_SetConfig+0x896>
 800a1d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1dc:	e016      	b.n	800a20c <UART_SetConfig+0x8c4>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e014      	b.n	800a20c <UART_SetConfig+0x8c4>
 800a1e2:	2380      	movs	r3, #128	; 0x80
 800a1e4:	e012      	b.n	800a20c <UART_SetConfig+0x8c4>
 800a1e6:	2340      	movs	r3, #64	; 0x40
 800a1e8:	e010      	b.n	800a20c <UART_SetConfig+0x8c4>
 800a1ea:	2320      	movs	r3, #32
 800a1ec:	e00e      	b.n	800a20c <UART_SetConfig+0x8c4>
 800a1ee:	2310      	movs	r3, #16
 800a1f0:	e00c      	b.n	800a20c <UART_SetConfig+0x8c4>
 800a1f2:	230c      	movs	r3, #12
 800a1f4:	e00a      	b.n	800a20c <UART_SetConfig+0x8c4>
 800a1f6:	230a      	movs	r3, #10
 800a1f8:	e008      	b.n	800a20c <UART_SetConfig+0x8c4>
 800a1fa:	2308      	movs	r3, #8
 800a1fc:	e006      	b.n	800a20c <UART_SetConfig+0x8c4>
 800a1fe:	2306      	movs	r3, #6
 800a200:	e004      	b.n	800a20c <UART_SetConfig+0x8c4>
 800a202:	2304      	movs	r3, #4
 800a204:	e002      	b.n	800a20c <UART_SetConfig+0x8c4>
 800a206:	2302      	movs	r3, #2
 800a208:	e000      	b.n	800a20c <UART_SetConfig+0x8c4>
 800a20a:	2301      	movs	r3, #1
 800a20c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a210:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a212:	e116      	b.n	800a442 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d043      	beq.n	800a2a4 <UART_SetConfig+0x95c>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a220:	2b01      	cmp	r3, #1
 800a222:	d03d      	beq.n	800a2a0 <UART_SetConfig+0x958>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d037      	beq.n	800a29c <UART_SetConfig+0x954>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a230:	2b03      	cmp	r3, #3
 800a232:	d031      	beq.n	800a298 <UART_SetConfig+0x950>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a238:	2b04      	cmp	r3, #4
 800a23a:	d02b      	beq.n	800a294 <UART_SetConfig+0x94c>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a240:	2b05      	cmp	r3, #5
 800a242:	d025      	beq.n	800a290 <UART_SetConfig+0x948>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a248:	2b06      	cmp	r3, #6
 800a24a:	d01f      	beq.n	800a28c <UART_SetConfig+0x944>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a250:	2b07      	cmp	r3, #7
 800a252:	d019      	beq.n	800a288 <UART_SetConfig+0x940>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a258:	2b08      	cmp	r3, #8
 800a25a:	d013      	beq.n	800a284 <UART_SetConfig+0x93c>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a260:	2b09      	cmp	r3, #9
 800a262:	d00d      	beq.n	800a280 <UART_SetConfig+0x938>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a268:	2b0a      	cmp	r3, #10
 800a26a:	d007      	beq.n	800a27c <UART_SetConfig+0x934>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a270:	2b0b      	cmp	r3, #11
 800a272:	d101      	bne.n	800a278 <UART_SetConfig+0x930>
 800a274:	4b36      	ldr	r3, [pc, #216]	; (800a350 <UART_SetConfig+0xa08>)
 800a276:	e016      	b.n	800a2a6 <UART_SetConfig+0x95e>
 800a278:	4b34      	ldr	r3, [pc, #208]	; (800a34c <UART_SetConfig+0xa04>)
 800a27a:	e014      	b.n	800a2a6 <UART_SetConfig+0x95e>
 800a27c:	4b35      	ldr	r3, [pc, #212]	; (800a354 <UART_SetConfig+0xa0c>)
 800a27e:	e012      	b.n	800a2a6 <UART_SetConfig+0x95e>
 800a280:	4b35      	ldr	r3, [pc, #212]	; (800a358 <UART_SetConfig+0xa10>)
 800a282:	e010      	b.n	800a2a6 <UART_SetConfig+0x95e>
 800a284:	4b35      	ldr	r3, [pc, #212]	; (800a35c <UART_SetConfig+0xa14>)
 800a286:	e00e      	b.n	800a2a6 <UART_SetConfig+0x95e>
 800a288:	4b35      	ldr	r3, [pc, #212]	; (800a360 <UART_SetConfig+0xa18>)
 800a28a:	e00c      	b.n	800a2a6 <UART_SetConfig+0x95e>
 800a28c:	4b35      	ldr	r3, [pc, #212]	; (800a364 <UART_SetConfig+0xa1c>)
 800a28e:	e00a      	b.n	800a2a6 <UART_SetConfig+0x95e>
 800a290:	4b35      	ldr	r3, [pc, #212]	; (800a368 <UART_SetConfig+0xa20>)
 800a292:	e008      	b.n	800a2a6 <UART_SetConfig+0x95e>
 800a294:	4b35      	ldr	r3, [pc, #212]	; (800a36c <UART_SetConfig+0xa24>)
 800a296:	e006      	b.n	800a2a6 <UART_SetConfig+0x95e>
 800a298:	4b35      	ldr	r3, [pc, #212]	; (800a370 <UART_SetConfig+0xa28>)
 800a29a:	e004      	b.n	800a2a6 <UART_SetConfig+0x95e>
 800a29c:	4b35      	ldr	r3, [pc, #212]	; (800a374 <UART_SetConfig+0xa2c>)
 800a29e:	e002      	b.n	800a2a6 <UART_SetConfig+0x95e>
 800a2a0:	4b35      	ldr	r3, [pc, #212]	; (800a378 <UART_SetConfig+0xa30>)
 800a2a2:	e000      	b.n	800a2a6 <UART_SetConfig+0x95e>
 800a2a4:	4b29      	ldr	r3, [pc, #164]	; (800a34c <UART_SetConfig+0xa04>)
 800a2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2a8:	e0cb      	b.n	800a442 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d046      	beq.n	800a340 <UART_SetConfig+0x9f8>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d040      	beq.n	800a33c <UART_SetConfig+0x9f4>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d03a      	beq.n	800a338 <UART_SetConfig+0x9f0>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c6:	2b03      	cmp	r3, #3
 800a2c8:	d034      	beq.n	800a334 <UART_SetConfig+0x9ec>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ce:	2b04      	cmp	r3, #4
 800a2d0:	d02e      	beq.n	800a330 <UART_SetConfig+0x9e8>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d6:	2b05      	cmp	r3, #5
 800a2d8:	d028      	beq.n	800a32c <UART_SetConfig+0x9e4>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2de:	2b06      	cmp	r3, #6
 800a2e0:	d022      	beq.n	800a328 <UART_SetConfig+0x9e0>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e6:	2b07      	cmp	r3, #7
 800a2e8:	d01c      	beq.n	800a324 <UART_SetConfig+0x9dc>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ee:	2b08      	cmp	r3, #8
 800a2f0:	d016      	beq.n	800a320 <UART_SetConfig+0x9d8>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f6:	2b09      	cmp	r3, #9
 800a2f8:	d00f      	beq.n	800a31a <UART_SetConfig+0x9d2>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fe:	2b0a      	cmp	r3, #10
 800a300:	d008      	beq.n	800a314 <UART_SetConfig+0x9cc>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a306:	2b0b      	cmp	r3, #11
 800a308:	d102      	bne.n	800a310 <UART_SetConfig+0x9c8>
 800a30a:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a30e:	e018      	b.n	800a342 <UART_SetConfig+0x9fa>
 800a310:	4b13      	ldr	r3, [pc, #76]	; (800a360 <UART_SetConfig+0xa18>)
 800a312:	e016      	b.n	800a342 <UART_SetConfig+0x9fa>
 800a314:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a318:	e013      	b.n	800a342 <UART_SetConfig+0x9fa>
 800a31a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a31e:	e010      	b.n	800a342 <UART_SetConfig+0x9fa>
 800a320:	4b16      	ldr	r3, [pc, #88]	; (800a37c <UART_SetConfig+0xa34>)
 800a322:	e00e      	b.n	800a342 <UART_SetConfig+0x9fa>
 800a324:	4b0a      	ldr	r3, [pc, #40]	; (800a350 <UART_SetConfig+0xa08>)
 800a326:	e00c      	b.n	800a342 <UART_SetConfig+0x9fa>
 800a328:	4b15      	ldr	r3, [pc, #84]	; (800a380 <UART_SetConfig+0xa38>)
 800a32a:	e00a      	b.n	800a342 <UART_SetConfig+0x9fa>
 800a32c:	4b15      	ldr	r3, [pc, #84]	; (800a384 <UART_SetConfig+0xa3c>)
 800a32e:	e008      	b.n	800a342 <UART_SetConfig+0x9fa>
 800a330:	4b08      	ldr	r3, [pc, #32]	; (800a354 <UART_SetConfig+0xa0c>)
 800a332:	e006      	b.n	800a342 <UART_SetConfig+0x9fa>
 800a334:	4b14      	ldr	r3, [pc, #80]	; (800a388 <UART_SetConfig+0xa40>)
 800a336:	e004      	b.n	800a342 <UART_SetConfig+0x9fa>
 800a338:	4b07      	ldr	r3, [pc, #28]	; (800a358 <UART_SetConfig+0xa10>)
 800a33a:	e002      	b.n	800a342 <UART_SetConfig+0x9fa>
 800a33c:	4b07      	ldr	r3, [pc, #28]	; (800a35c <UART_SetConfig+0xa14>)
 800a33e:	e000      	b.n	800a342 <UART_SetConfig+0x9fa>
 800a340:	4b07      	ldr	r3, [pc, #28]	; (800a360 <UART_SetConfig+0xa18>)
 800a342:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a344:	e07d      	b.n	800a442 <UART_SetConfig+0xafa>
 800a346:	bf00      	nop
 800a348:	58024400 	.word	0x58024400
 800a34c:	03d09000 	.word	0x03d09000
 800a350:	0003d090 	.word	0x0003d090
 800a354:	0007a120 	.word	0x0007a120
 800a358:	000f4240 	.word	0x000f4240
 800a35c:	001e8480 	.word	0x001e8480
 800a360:	003d0900 	.word	0x003d0900
 800a364:	00516155 	.word	0x00516155
 800a368:	0061a800 	.word	0x0061a800
 800a36c:	007a1200 	.word	0x007a1200
 800a370:	00a2c2aa 	.word	0x00a2c2aa
 800a374:	00f42400 	.word	0x00f42400
 800a378:	01e84800 	.word	0x01e84800
 800a37c:	0001e848 	.word	0x0001e848
 800a380:	00051615 	.word	0x00051615
 800a384:	00061a80 	.word	0x00061a80
 800a388:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a390:	2b00      	cmp	r3, #0
 800a392:	d04e      	beq.n	800a432 <UART_SetConfig+0xaea>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d047      	beq.n	800a42c <UART_SetConfig+0xae4>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	d040      	beq.n	800a426 <UART_SetConfig+0xade>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a8:	2b03      	cmp	r3, #3
 800a3aa:	d039      	beq.n	800a420 <UART_SetConfig+0xad8>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b0:	2b04      	cmp	r3, #4
 800a3b2:	d032      	beq.n	800a41a <UART_SetConfig+0xad2>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b8:	2b05      	cmp	r3, #5
 800a3ba:	d02b      	beq.n	800a414 <UART_SetConfig+0xacc>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c0:	2b06      	cmp	r3, #6
 800a3c2:	d024      	beq.n	800a40e <UART_SetConfig+0xac6>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c8:	2b07      	cmp	r3, #7
 800a3ca:	d01d      	beq.n	800a408 <UART_SetConfig+0xac0>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d0:	2b08      	cmp	r3, #8
 800a3d2:	d016      	beq.n	800a402 <UART_SetConfig+0xaba>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d8:	2b09      	cmp	r3, #9
 800a3da:	d00f      	beq.n	800a3fc <UART_SetConfig+0xab4>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e0:	2b0a      	cmp	r3, #10
 800a3e2:	d008      	beq.n	800a3f6 <UART_SetConfig+0xaae>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e8:	2b0b      	cmp	r3, #11
 800a3ea:	d101      	bne.n	800a3f0 <UART_SetConfig+0xaa8>
 800a3ec:	2380      	movs	r3, #128	; 0x80
 800a3ee:	e022      	b.n	800a436 <UART_SetConfig+0xaee>
 800a3f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3f4:	e01f      	b.n	800a436 <UART_SetConfig+0xaee>
 800a3f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3fa:	e01c      	b.n	800a436 <UART_SetConfig+0xaee>
 800a3fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a400:	e019      	b.n	800a436 <UART_SetConfig+0xaee>
 800a402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a406:	e016      	b.n	800a436 <UART_SetConfig+0xaee>
 800a408:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a40c:	e013      	b.n	800a436 <UART_SetConfig+0xaee>
 800a40e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a412:	e010      	b.n	800a436 <UART_SetConfig+0xaee>
 800a414:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a418:	e00d      	b.n	800a436 <UART_SetConfig+0xaee>
 800a41a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a41e:	e00a      	b.n	800a436 <UART_SetConfig+0xaee>
 800a420:	f241 5355 	movw	r3, #5461	; 0x1555
 800a424:	e007      	b.n	800a436 <UART_SetConfig+0xaee>
 800a426:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a42a:	e004      	b.n	800a436 <UART_SetConfig+0xaee>
 800a42c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a430:	e001      	b.n	800a436 <UART_SetConfig+0xaee>
 800a432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a436:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a438:	e003      	b.n	800a442 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a440:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a444:	2b00      	cmp	r3, #0
 800a446:	f001 83e8 	beq.w	800bc1a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	685a      	ldr	r2, [r3, #4]
 800a44e:	4613      	mov	r3, r2
 800a450:	005b      	lsls	r3, r3, #1
 800a452:	4413      	add	r3, r2
 800a454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a456:	429a      	cmp	r2, r3
 800a458:	d305      	bcc.n	800a466 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a462:	429a      	cmp	r2, r3
 800a464:	d904      	bls.n	800a470 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a46c:	f001 bbd5 	b.w	800bc1a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800a470:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a474:	2b08      	cmp	r3, #8
 800a476:	f000 8154 	beq.w	800a722 <UART_SetConfig+0xdda>
 800a47a:	2b08      	cmp	r3, #8
 800a47c:	dc06      	bgt.n	800a48c <UART_SetConfig+0xb44>
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d00f      	beq.n	800a4a2 <UART_SetConfig+0xb5a>
 800a482:	2b04      	cmp	r3, #4
 800a484:	f000 80ac 	beq.w	800a5e0 <UART_SetConfig+0xc98>
 800a488:	f000 bc30 	b.w	800acec <UART_SetConfig+0x13a4>
 800a48c:	2b20      	cmp	r3, #32
 800a48e:	f000 832d 	beq.w	800aaec <UART_SetConfig+0x11a4>
 800a492:	2b40      	cmp	r3, #64	; 0x40
 800a494:	f000 83a5 	beq.w	800abe2 <UART_SetConfig+0x129a>
 800a498:	2b10      	cmp	r3, #16
 800a49a:	f000 81e3 	beq.w	800a864 <UART_SetConfig+0xf1c>
 800a49e:	f000 bc25 	b.w	800acec <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a4a2:	f7fd fcdd 	bl	8007e60 <HAL_RCCEx_GetD3PCLK1Freq>
 800a4a6:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f04f 0100 	mov.w	r1, #0
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d067      	beq.n	800a588 <UART_SetConfig+0xc40>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d05e      	beq.n	800a57e <UART_SetConfig+0xc36>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d055      	beq.n	800a574 <UART_SetConfig+0xc2c>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4cc:	2b03      	cmp	r3, #3
 800a4ce:	d04c      	beq.n	800a56a <UART_SetConfig+0xc22>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d4:	2b04      	cmp	r3, #4
 800a4d6:	d043      	beq.n	800a560 <UART_SetConfig+0xc18>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4dc:	2b05      	cmp	r3, #5
 800a4de:	d03a      	beq.n	800a556 <UART_SetConfig+0xc0e>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e4:	2b06      	cmp	r3, #6
 800a4e6:	d031      	beq.n	800a54c <UART_SetConfig+0xc04>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ec:	2b07      	cmp	r3, #7
 800a4ee:	d028      	beq.n	800a542 <UART_SetConfig+0xbfa>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f4:	2b08      	cmp	r3, #8
 800a4f6:	d01f      	beq.n	800a538 <UART_SetConfig+0xbf0>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fc:	2b09      	cmp	r3, #9
 800a4fe:	d016      	beq.n	800a52e <UART_SetConfig+0xbe6>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a504:	2b0a      	cmp	r3, #10
 800a506:	d00d      	beq.n	800a524 <UART_SetConfig+0xbdc>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50c:	2b0b      	cmp	r3, #11
 800a50e:	d104      	bne.n	800a51a <UART_SetConfig+0xbd2>
 800a510:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a514:	f04f 0400 	mov.w	r4, #0
 800a518:	e03a      	b.n	800a590 <UART_SetConfig+0xc48>
 800a51a:	f04f 0301 	mov.w	r3, #1
 800a51e:	f04f 0400 	mov.w	r4, #0
 800a522:	e035      	b.n	800a590 <UART_SetConfig+0xc48>
 800a524:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a528:	f04f 0400 	mov.w	r4, #0
 800a52c:	e030      	b.n	800a590 <UART_SetConfig+0xc48>
 800a52e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a532:	f04f 0400 	mov.w	r4, #0
 800a536:	e02b      	b.n	800a590 <UART_SetConfig+0xc48>
 800a538:	f04f 0320 	mov.w	r3, #32
 800a53c:	f04f 0400 	mov.w	r4, #0
 800a540:	e026      	b.n	800a590 <UART_SetConfig+0xc48>
 800a542:	f04f 0310 	mov.w	r3, #16
 800a546:	f04f 0400 	mov.w	r4, #0
 800a54a:	e021      	b.n	800a590 <UART_SetConfig+0xc48>
 800a54c:	f04f 030c 	mov.w	r3, #12
 800a550:	f04f 0400 	mov.w	r4, #0
 800a554:	e01c      	b.n	800a590 <UART_SetConfig+0xc48>
 800a556:	f04f 030a 	mov.w	r3, #10
 800a55a:	f04f 0400 	mov.w	r4, #0
 800a55e:	e017      	b.n	800a590 <UART_SetConfig+0xc48>
 800a560:	f04f 0308 	mov.w	r3, #8
 800a564:	f04f 0400 	mov.w	r4, #0
 800a568:	e012      	b.n	800a590 <UART_SetConfig+0xc48>
 800a56a:	f04f 0306 	mov.w	r3, #6
 800a56e:	f04f 0400 	mov.w	r4, #0
 800a572:	e00d      	b.n	800a590 <UART_SetConfig+0xc48>
 800a574:	f04f 0304 	mov.w	r3, #4
 800a578:	f04f 0400 	mov.w	r4, #0
 800a57c:	e008      	b.n	800a590 <UART_SetConfig+0xc48>
 800a57e:	f04f 0302 	mov.w	r3, #2
 800a582:	f04f 0400 	mov.w	r4, #0
 800a586:	e003      	b.n	800a590 <UART_SetConfig+0xc48>
 800a588:	f04f 0301 	mov.w	r3, #1
 800a58c:	f04f 0400 	mov.w	r4, #0
 800a590:	461a      	mov	r2, r3
 800a592:	4623      	mov	r3, r4
 800a594:	f7f5 fea0 	bl	80002d8 <__aeabi_uldivmod>
 800a598:	4603      	mov	r3, r0
 800a59a:	460c      	mov	r4, r1
 800a59c:	4619      	mov	r1, r3
 800a59e:	4622      	mov	r2, r4
 800a5a0:	f04f 0300 	mov.w	r3, #0
 800a5a4:	f04f 0400 	mov.w	r4, #0
 800a5a8:	0214      	lsls	r4, r2, #8
 800a5aa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a5ae:	020b      	lsls	r3, r1, #8
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	6852      	ldr	r2, [r2, #4]
 800a5b4:	0852      	lsrs	r2, r2, #1
 800a5b6:	4611      	mov	r1, r2
 800a5b8:	f04f 0200 	mov.w	r2, #0
 800a5bc:	eb13 0b01 	adds.w	fp, r3, r1
 800a5c0:	eb44 0c02 	adc.w	ip, r4, r2
 800a5c4:	4658      	mov	r0, fp
 800a5c6:	4661      	mov	r1, ip
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	f04f 0400 	mov.w	r4, #0
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	4623      	mov	r3, r4
 800a5d4:	f7f5 fe80 	bl	80002d8 <__aeabi_uldivmod>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	460c      	mov	r4, r1
 800a5dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a5de:	e389      	b.n	800acf4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5e0:	f107 0318 	add.w	r3, r7, #24
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7fd fc51 	bl	8007e8c <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f04f 0100 	mov.w	r1, #0
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d067      	beq.n	800a6ca <UART_SetConfig+0xd82>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d05e      	beq.n	800a6c0 <UART_SetConfig+0xd78>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a606:	2b02      	cmp	r3, #2
 800a608:	d055      	beq.n	800a6b6 <UART_SetConfig+0xd6e>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60e:	2b03      	cmp	r3, #3
 800a610:	d04c      	beq.n	800a6ac <UART_SetConfig+0xd64>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a616:	2b04      	cmp	r3, #4
 800a618:	d043      	beq.n	800a6a2 <UART_SetConfig+0xd5a>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61e:	2b05      	cmp	r3, #5
 800a620:	d03a      	beq.n	800a698 <UART_SetConfig+0xd50>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a626:	2b06      	cmp	r3, #6
 800a628:	d031      	beq.n	800a68e <UART_SetConfig+0xd46>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62e:	2b07      	cmp	r3, #7
 800a630:	d028      	beq.n	800a684 <UART_SetConfig+0xd3c>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a636:	2b08      	cmp	r3, #8
 800a638:	d01f      	beq.n	800a67a <UART_SetConfig+0xd32>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63e:	2b09      	cmp	r3, #9
 800a640:	d016      	beq.n	800a670 <UART_SetConfig+0xd28>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a646:	2b0a      	cmp	r3, #10
 800a648:	d00d      	beq.n	800a666 <UART_SetConfig+0xd1e>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64e:	2b0b      	cmp	r3, #11
 800a650:	d104      	bne.n	800a65c <UART_SetConfig+0xd14>
 800a652:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a656:	f04f 0400 	mov.w	r4, #0
 800a65a:	e03a      	b.n	800a6d2 <UART_SetConfig+0xd8a>
 800a65c:	f04f 0301 	mov.w	r3, #1
 800a660:	f04f 0400 	mov.w	r4, #0
 800a664:	e035      	b.n	800a6d2 <UART_SetConfig+0xd8a>
 800a666:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a66a:	f04f 0400 	mov.w	r4, #0
 800a66e:	e030      	b.n	800a6d2 <UART_SetConfig+0xd8a>
 800a670:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a674:	f04f 0400 	mov.w	r4, #0
 800a678:	e02b      	b.n	800a6d2 <UART_SetConfig+0xd8a>
 800a67a:	f04f 0320 	mov.w	r3, #32
 800a67e:	f04f 0400 	mov.w	r4, #0
 800a682:	e026      	b.n	800a6d2 <UART_SetConfig+0xd8a>
 800a684:	f04f 0310 	mov.w	r3, #16
 800a688:	f04f 0400 	mov.w	r4, #0
 800a68c:	e021      	b.n	800a6d2 <UART_SetConfig+0xd8a>
 800a68e:	f04f 030c 	mov.w	r3, #12
 800a692:	f04f 0400 	mov.w	r4, #0
 800a696:	e01c      	b.n	800a6d2 <UART_SetConfig+0xd8a>
 800a698:	f04f 030a 	mov.w	r3, #10
 800a69c:	f04f 0400 	mov.w	r4, #0
 800a6a0:	e017      	b.n	800a6d2 <UART_SetConfig+0xd8a>
 800a6a2:	f04f 0308 	mov.w	r3, #8
 800a6a6:	f04f 0400 	mov.w	r4, #0
 800a6aa:	e012      	b.n	800a6d2 <UART_SetConfig+0xd8a>
 800a6ac:	f04f 0306 	mov.w	r3, #6
 800a6b0:	f04f 0400 	mov.w	r4, #0
 800a6b4:	e00d      	b.n	800a6d2 <UART_SetConfig+0xd8a>
 800a6b6:	f04f 0304 	mov.w	r3, #4
 800a6ba:	f04f 0400 	mov.w	r4, #0
 800a6be:	e008      	b.n	800a6d2 <UART_SetConfig+0xd8a>
 800a6c0:	f04f 0302 	mov.w	r3, #2
 800a6c4:	f04f 0400 	mov.w	r4, #0
 800a6c8:	e003      	b.n	800a6d2 <UART_SetConfig+0xd8a>
 800a6ca:	f04f 0301 	mov.w	r3, #1
 800a6ce:	f04f 0400 	mov.w	r4, #0
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	4623      	mov	r3, r4
 800a6d6:	f7f5 fdff 	bl	80002d8 <__aeabi_uldivmod>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	460c      	mov	r4, r1
 800a6de:	4619      	mov	r1, r3
 800a6e0:	4622      	mov	r2, r4
 800a6e2:	f04f 0300 	mov.w	r3, #0
 800a6e6:	f04f 0400 	mov.w	r4, #0
 800a6ea:	0214      	lsls	r4, r2, #8
 800a6ec:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a6f0:	020b      	lsls	r3, r1, #8
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	6852      	ldr	r2, [r2, #4]
 800a6f6:	0852      	lsrs	r2, r2, #1
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	f04f 0200 	mov.w	r2, #0
 800a6fe:	eb13 0b01 	adds.w	fp, r3, r1
 800a702:	eb44 0c02 	adc.w	ip, r4, r2
 800a706:	4658      	mov	r0, fp
 800a708:	4661      	mov	r1, ip
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	f04f 0400 	mov.w	r4, #0
 800a712:	461a      	mov	r2, r3
 800a714:	4623      	mov	r3, r4
 800a716:	f7f5 fddf 	bl	80002d8 <__aeabi_uldivmod>
 800a71a:	4603      	mov	r3, r0
 800a71c:	460c      	mov	r4, r1
 800a71e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a720:	e2e8      	b.n	800acf4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a722:	f107 030c 	add.w	r3, r7, #12
 800a726:	4618      	mov	r0, r3
 800a728:	f7fd fcfc 	bl	8008124 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	4618      	mov	r0, r3
 800a730:	f04f 0100 	mov.w	r1, #0
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d067      	beq.n	800a80c <UART_SetConfig+0xec4>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a740:	2b01      	cmp	r3, #1
 800a742:	d05e      	beq.n	800a802 <UART_SetConfig+0xeba>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d055      	beq.n	800a7f8 <UART_SetConfig+0xeb0>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a750:	2b03      	cmp	r3, #3
 800a752:	d04c      	beq.n	800a7ee <UART_SetConfig+0xea6>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a758:	2b04      	cmp	r3, #4
 800a75a:	d043      	beq.n	800a7e4 <UART_SetConfig+0xe9c>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a760:	2b05      	cmp	r3, #5
 800a762:	d03a      	beq.n	800a7da <UART_SetConfig+0xe92>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a768:	2b06      	cmp	r3, #6
 800a76a:	d031      	beq.n	800a7d0 <UART_SetConfig+0xe88>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a770:	2b07      	cmp	r3, #7
 800a772:	d028      	beq.n	800a7c6 <UART_SetConfig+0xe7e>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a778:	2b08      	cmp	r3, #8
 800a77a:	d01f      	beq.n	800a7bc <UART_SetConfig+0xe74>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a780:	2b09      	cmp	r3, #9
 800a782:	d016      	beq.n	800a7b2 <UART_SetConfig+0xe6a>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a788:	2b0a      	cmp	r3, #10
 800a78a:	d00d      	beq.n	800a7a8 <UART_SetConfig+0xe60>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a790:	2b0b      	cmp	r3, #11
 800a792:	d104      	bne.n	800a79e <UART_SetConfig+0xe56>
 800a794:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a798:	f04f 0400 	mov.w	r4, #0
 800a79c:	e03a      	b.n	800a814 <UART_SetConfig+0xecc>
 800a79e:	f04f 0301 	mov.w	r3, #1
 800a7a2:	f04f 0400 	mov.w	r4, #0
 800a7a6:	e035      	b.n	800a814 <UART_SetConfig+0xecc>
 800a7a8:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a7ac:	f04f 0400 	mov.w	r4, #0
 800a7b0:	e030      	b.n	800a814 <UART_SetConfig+0xecc>
 800a7b2:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a7b6:	f04f 0400 	mov.w	r4, #0
 800a7ba:	e02b      	b.n	800a814 <UART_SetConfig+0xecc>
 800a7bc:	f04f 0320 	mov.w	r3, #32
 800a7c0:	f04f 0400 	mov.w	r4, #0
 800a7c4:	e026      	b.n	800a814 <UART_SetConfig+0xecc>
 800a7c6:	f04f 0310 	mov.w	r3, #16
 800a7ca:	f04f 0400 	mov.w	r4, #0
 800a7ce:	e021      	b.n	800a814 <UART_SetConfig+0xecc>
 800a7d0:	f04f 030c 	mov.w	r3, #12
 800a7d4:	f04f 0400 	mov.w	r4, #0
 800a7d8:	e01c      	b.n	800a814 <UART_SetConfig+0xecc>
 800a7da:	f04f 030a 	mov.w	r3, #10
 800a7de:	f04f 0400 	mov.w	r4, #0
 800a7e2:	e017      	b.n	800a814 <UART_SetConfig+0xecc>
 800a7e4:	f04f 0308 	mov.w	r3, #8
 800a7e8:	f04f 0400 	mov.w	r4, #0
 800a7ec:	e012      	b.n	800a814 <UART_SetConfig+0xecc>
 800a7ee:	f04f 0306 	mov.w	r3, #6
 800a7f2:	f04f 0400 	mov.w	r4, #0
 800a7f6:	e00d      	b.n	800a814 <UART_SetConfig+0xecc>
 800a7f8:	f04f 0304 	mov.w	r3, #4
 800a7fc:	f04f 0400 	mov.w	r4, #0
 800a800:	e008      	b.n	800a814 <UART_SetConfig+0xecc>
 800a802:	f04f 0302 	mov.w	r3, #2
 800a806:	f04f 0400 	mov.w	r4, #0
 800a80a:	e003      	b.n	800a814 <UART_SetConfig+0xecc>
 800a80c:	f04f 0301 	mov.w	r3, #1
 800a810:	f04f 0400 	mov.w	r4, #0
 800a814:	461a      	mov	r2, r3
 800a816:	4623      	mov	r3, r4
 800a818:	f7f5 fd5e 	bl	80002d8 <__aeabi_uldivmod>
 800a81c:	4603      	mov	r3, r0
 800a81e:	460c      	mov	r4, r1
 800a820:	4619      	mov	r1, r3
 800a822:	4622      	mov	r2, r4
 800a824:	f04f 0300 	mov.w	r3, #0
 800a828:	f04f 0400 	mov.w	r4, #0
 800a82c:	0214      	lsls	r4, r2, #8
 800a82e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a832:	020b      	lsls	r3, r1, #8
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	6852      	ldr	r2, [r2, #4]
 800a838:	0852      	lsrs	r2, r2, #1
 800a83a:	4611      	mov	r1, r2
 800a83c:	f04f 0200 	mov.w	r2, #0
 800a840:	eb13 0b01 	adds.w	fp, r3, r1
 800a844:	eb44 0c02 	adc.w	ip, r4, r2
 800a848:	4658      	mov	r0, fp
 800a84a:	4661      	mov	r1, ip
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	f04f 0400 	mov.w	r4, #0
 800a854:	461a      	mov	r2, r3
 800a856:	4623      	mov	r3, r4
 800a858:	f7f5 fd3e 	bl	80002d8 <__aeabi_uldivmod>
 800a85c:	4603      	mov	r3, r0
 800a85e:	460c      	mov	r4, r1
 800a860:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a862:	e247      	b.n	800acf4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a864:	4b96      	ldr	r3, [pc, #600]	; (800aac0 <UART_SetConfig+0x1178>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 0320 	and.w	r3, r3, #32
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	f000 80a3 	beq.w	800a9b8 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a872:	4b93      	ldr	r3, [pc, #588]	; (800aac0 <UART_SetConfig+0x1178>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	08db      	lsrs	r3, r3, #3
 800a878:	f003 0303 	and.w	r3, r3, #3
 800a87c:	4a91      	ldr	r2, [pc, #580]	; (800aac4 <UART_SetConfig+0x117c>)
 800a87e:	fa22 f303 	lsr.w	r3, r2, r3
 800a882:	4618      	mov	r0, r3
 800a884:	f04f 0100 	mov.w	r1, #0
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d067      	beq.n	800a960 <UART_SetConfig+0x1018>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a894:	2b01      	cmp	r3, #1
 800a896:	d05e      	beq.n	800a956 <UART_SetConfig+0x100e>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d055      	beq.n	800a94c <UART_SetConfig+0x1004>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a4:	2b03      	cmp	r3, #3
 800a8a6:	d04c      	beq.n	800a942 <UART_SetConfig+0xffa>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ac:	2b04      	cmp	r3, #4
 800a8ae:	d043      	beq.n	800a938 <UART_SetConfig+0xff0>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b4:	2b05      	cmp	r3, #5
 800a8b6:	d03a      	beq.n	800a92e <UART_SetConfig+0xfe6>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8bc:	2b06      	cmp	r3, #6
 800a8be:	d031      	beq.n	800a924 <UART_SetConfig+0xfdc>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	2b07      	cmp	r3, #7
 800a8c6:	d028      	beq.n	800a91a <UART_SetConfig+0xfd2>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8cc:	2b08      	cmp	r3, #8
 800a8ce:	d01f      	beq.n	800a910 <UART_SetConfig+0xfc8>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d4:	2b09      	cmp	r3, #9
 800a8d6:	d016      	beq.n	800a906 <UART_SetConfig+0xfbe>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8dc:	2b0a      	cmp	r3, #10
 800a8de:	d00d      	beq.n	800a8fc <UART_SetConfig+0xfb4>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e4:	2b0b      	cmp	r3, #11
 800a8e6:	d104      	bne.n	800a8f2 <UART_SetConfig+0xfaa>
 800a8e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8ec:	f04f 0400 	mov.w	r4, #0
 800a8f0:	e03a      	b.n	800a968 <UART_SetConfig+0x1020>
 800a8f2:	f04f 0301 	mov.w	r3, #1
 800a8f6:	f04f 0400 	mov.w	r4, #0
 800a8fa:	e035      	b.n	800a968 <UART_SetConfig+0x1020>
 800a8fc:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a900:	f04f 0400 	mov.w	r4, #0
 800a904:	e030      	b.n	800a968 <UART_SetConfig+0x1020>
 800a906:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a90a:	f04f 0400 	mov.w	r4, #0
 800a90e:	e02b      	b.n	800a968 <UART_SetConfig+0x1020>
 800a910:	f04f 0320 	mov.w	r3, #32
 800a914:	f04f 0400 	mov.w	r4, #0
 800a918:	e026      	b.n	800a968 <UART_SetConfig+0x1020>
 800a91a:	f04f 0310 	mov.w	r3, #16
 800a91e:	f04f 0400 	mov.w	r4, #0
 800a922:	e021      	b.n	800a968 <UART_SetConfig+0x1020>
 800a924:	f04f 030c 	mov.w	r3, #12
 800a928:	f04f 0400 	mov.w	r4, #0
 800a92c:	e01c      	b.n	800a968 <UART_SetConfig+0x1020>
 800a92e:	f04f 030a 	mov.w	r3, #10
 800a932:	f04f 0400 	mov.w	r4, #0
 800a936:	e017      	b.n	800a968 <UART_SetConfig+0x1020>
 800a938:	f04f 0308 	mov.w	r3, #8
 800a93c:	f04f 0400 	mov.w	r4, #0
 800a940:	e012      	b.n	800a968 <UART_SetConfig+0x1020>
 800a942:	f04f 0306 	mov.w	r3, #6
 800a946:	f04f 0400 	mov.w	r4, #0
 800a94a:	e00d      	b.n	800a968 <UART_SetConfig+0x1020>
 800a94c:	f04f 0304 	mov.w	r3, #4
 800a950:	f04f 0400 	mov.w	r4, #0
 800a954:	e008      	b.n	800a968 <UART_SetConfig+0x1020>
 800a956:	f04f 0302 	mov.w	r3, #2
 800a95a:	f04f 0400 	mov.w	r4, #0
 800a95e:	e003      	b.n	800a968 <UART_SetConfig+0x1020>
 800a960:	f04f 0301 	mov.w	r3, #1
 800a964:	f04f 0400 	mov.w	r4, #0
 800a968:	461a      	mov	r2, r3
 800a96a:	4623      	mov	r3, r4
 800a96c:	f7f5 fcb4 	bl	80002d8 <__aeabi_uldivmod>
 800a970:	4603      	mov	r3, r0
 800a972:	460c      	mov	r4, r1
 800a974:	4619      	mov	r1, r3
 800a976:	4622      	mov	r2, r4
 800a978:	f04f 0300 	mov.w	r3, #0
 800a97c:	f04f 0400 	mov.w	r4, #0
 800a980:	0214      	lsls	r4, r2, #8
 800a982:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a986:	020b      	lsls	r3, r1, #8
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	6852      	ldr	r2, [r2, #4]
 800a98c:	0852      	lsrs	r2, r2, #1
 800a98e:	4611      	mov	r1, r2
 800a990:	f04f 0200 	mov.w	r2, #0
 800a994:	eb13 0b01 	adds.w	fp, r3, r1
 800a998:	eb44 0c02 	adc.w	ip, r4, r2
 800a99c:	4658      	mov	r0, fp
 800a99e:	4661      	mov	r1, ip
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	f04f 0400 	mov.w	r4, #0
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	4623      	mov	r3, r4
 800a9ac:	f7f5 fc94 	bl	80002d8 <__aeabi_uldivmod>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800a9b6:	e19d      	b.n	800acf4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d05b      	beq.n	800aa78 <UART_SetConfig+0x1130>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d053      	beq.n	800aa70 <UART_SetConfig+0x1128>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d04b      	beq.n	800aa68 <UART_SetConfig+0x1120>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d4:	2b03      	cmp	r3, #3
 800a9d6:	d043      	beq.n	800aa60 <UART_SetConfig+0x1118>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9dc:	2b04      	cmp	r3, #4
 800a9de:	d03b      	beq.n	800aa58 <UART_SetConfig+0x1110>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e4:	2b05      	cmp	r3, #5
 800a9e6:	d033      	beq.n	800aa50 <UART_SetConfig+0x1108>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ec:	2b06      	cmp	r3, #6
 800a9ee:	d02b      	beq.n	800aa48 <UART_SetConfig+0x1100>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f4:	2b07      	cmp	r3, #7
 800a9f6:	d023      	beq.n	800aa40 <UART_SetConfig+0x10f8>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fc:	2b08      	cmp	r3, #8
 800a9fe:	d01b      	beq.n	800aa38 <UART_SetConfig+0x10f0>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa04:	2b09      	cmp	r3, #9
 800aa06:	d013      	beq.n	800aa30 <UART_SetConfig+0x10e8>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0c:	2b0a      	cmp	r3, #10
 800aa0e:	d00b      	beq.n	800aa28 <UART_SetConfig+0x10e0>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa14:	2b0b      	cmp	r3, #11
 800aa16:	d103      	bne.n	800aa20 <UART_SetConfig+0x10d8>
 800aa18:	4b2a      	ldr	r3, [pc, #168]	; (800aac4 <UART_SetConfig+0x117c>)
 800aa1a:	f04f 0400 	mov.w	r4, #0
 800aa1e:	e02e      	b.n	800aa7e <UART_SetConfig+0x1136>
 800aa20:	4b29      	ldr	r3, [pc, #164]	; (800aac8 <UART_SetConfig+0x1180>)
 800aa22:	f04f 0403 	mov.w	r4, #3
 800aa26:	e02a      	b.n	800aa7e <UART_SetConfig+0x1136>
 800aa28:	4b28      	ldr	r3, [pc, #160]	; (800aacc <UART_SetConfig+0x1184>)
 800aa2a:	f04f 0400 	mov.w	r4, #0
 800aa2e:	e026      	b.n	800aa7e <UART_SetConfig+0x1136>
 800aa30:	4b27      	ldr	r3, [pc, #156]	; (800aad0 <UART_SetConfig+0x1188>)
 800aa32:	f04f 0400 	mov.w	r4, #0
 800aa36:	e022      	b.n	800aa7e <UART_SetConfig+0x1136>
 800aa38:	4b26      	ldr	r3, [pc, #152]	; (800aad4 <UART_SetConfig+0x118c>)
 800aa3a:	f04f 0400 	mov.w	r4, #0
 800aa3e:	e01e      	b.n	800aa7e <UART_SetConfig+0x1136>
 800aa40:	4b25      	ldr	r3, [pc, #148]	; (800aad8 <UART_SetConfig+0x1190>)
 800aa42:	f04f 0400 	mov.w	r4, #0
 800aa46:	e01a      	b.n	800aa7e <UART_SetConfig+0x1136>
 800aa48:	a419      	add	r4, pc, #100	; (adr r4, 800aab0 <UART_SetConfig+0x1168>)
 800aa4a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800aa4e:	e016      	b.n	800aa7e <UART_SetConfig+0x1136>
 800aa50:	4b22      	ldr	r3, [pc, #136]	; (800aadc <UART_SetConfig+0x1194>)
 800aa52:	f04f 0400 	mov.w	r4, #0
 800aa56:	e012      	b.n	800aa7e <UART_SetConfig+0x1136>
 800aa58:	4b21      	ldr	r3, [pc, #132]	; (800aae0 <UART_SetConfig+0x1198>)
 800aa5a:	f04f 0400 	mov.w	r4, #0
 800aa5e:	e00e      	b.n	800aa7e <UART_SetConfig+0x1136>
 800aa60:	a415      	add	r4, pc, #84	; (adr r4, 800aab8 <UART_SetConfig+0x1170>)
 800aa62:	e9d4 3400 	ldrd	r3, r4, [r4]
 800aa66:	e00a      	b.n	800aa7e <UART_SetConfig+0x1136>
 800aa68:	4b1e      	ldr	r3, [pc, #120]	; (800aae4 <UART_SetConfig+0x119c>)
 800aa6a:	f04f 0400 	mov.w	r4, #0
 800aa6e:	e006      	b.n	800aa7e <UART_SetConfig+0x1136>
 800aa70:	4b1d      	ldr	r3, [pc, #116]	; (800aae8 <UART_SetConfig+0x11a0>)
 800aa72:	f04f 0401 	mov.w	r4, #1
 800aa76:	e002      	b.n	800aa7e <UART_SetConfig+0x1136>
 800aa78:	4b13      	ldr	r3, [pc, #76]	; (800aac8 <UART_SetConfig+0x1180>)
 800aa7a:	f04f 0403 	mov.w	r4, #3
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	6852      	ldr	r2, [r2, #4]
 800aa82:	0852      	lsrs	r2, r2, #1
 800aa84:	4611      	mov	r1, r2
 800aa86:	f04f 0200 	mov.w	r2, #0
 800aa8a:	eb13 0b01 	adds.w	fp, r3, r1
 800aa8e:	eb44 0c02 	adc.w	ip, r4, r2
 800aa92:	4658      	mov	r0, fp
 800aa94:	4661      	mov	r1, ip
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	f04f 0400 	mov.w	r4, #0
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	4623      	mov	r3, r4
 800aaa2:	f7f5 fc19 	bl	80002d8 <__aeabi_uldivmod>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	460c      	mov	r4, r1
 800aaaa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aaac:	e122      	b.n	800acf4 <UART_SetConfig+0x13ac>
 800aaae:	bf00      	nop
 800aab0:	51615500 	.word	0x51615500
 800aab4:	00000000 	.word	0x00000000
 800aab8:	a2c2aa00 	.word	0xa2c2aa00
 800aabc:	00000000 	.word	0x00000000
 800aac0:	58024400 	.word	0x58024400
 800aac4:	03d09000 	.word	0x03d09000
 800aac8:	d0900000 	.word	0xd0900000
 800aacc:	07a12000 	.word	0x07a12000
 800aad0:	0f424000 	.word	0x0f424000
 800aad4:	1e848000 	.word	0x1e848000
 800aad8:	3d090000 	.word	0x3d090000
 800aadc:	61a80000 	.word	0x61a80000
 800aae0:	7a120000 	.word	0x7a120000
 800aae4:	f4240000 	.word	0xf4240000
 800aae8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d05b      	beq.n	800abac <UART_SetConfig+0x1264>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d053      	beq.n	800aba4 <UART_SetConfig+0x125c>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	d04b      	beq.n	800ab9c <UART_SetConfig+0x1254>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab08:	2b03      	cmp	r3, #3
 800ab0a:	d043      	beq.n	800ab94 <UART_SetConfig+0x124c>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab10:	2b04      	cmp	r3, #4
 800ab12:	d03b      	beq.n	800ab8c <UART_SetConfig+0x1244>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab18:	2b05      	cmp	r3, #5
 800ab1a:	d033      	beq.n	800ab84 <UART_SetConfig+0x123c>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab20:	2b06      	cmp	r3, #6
 800ab22:	d02b      	beq.n	800ab7c <UART_SetConfig+0x1234>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab28:	2b07      	cmp	r3, #7
 800ab2a:	d023      	beq.n	800ab74 <UART_SetConfig+0x122c>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab30:	2b08      	cmp	r3, #8
 800ab32:	d01b      	beq.n	800ab6c <UART_SetConfig+0x1224>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab38:	2b09      	cmp	r3, #9
 800ab3a:	d013      	beq.n	800ab64 <UART_SetConfig+0x121c>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab40:	2b0a      	cmp	r3, #10
 800ab42:	d00b      	beq.n	800ab5c <UART_SetConfig+0x1214>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab48:	2b0b      	cmp	r3, #11
 800ab4a:	d103      	bne.n	800ab54 <UART_SetConfig+0x120c>
 800ab4c:	4bc0      	ldr	r3, [pc, #768]	; (800ae50 <UART_SetConfig+0x1508>)
 800ab4e:	f04f 0400 	mov.w	r4, #0
 800ab52:	e02e      	b.n	800abb2 <UART_SetConfig+0x126a>
 800ab54:	4bbf      	ldr	r3, [pc, #764]	; (800ae54 <UART_SetConfig+0x150c>)
 800ab56:	f04f 0400 	mov.w	r4, #0
 800ab5a:	e02a      	b.n	800abb2 <UART_SetConfig+0x126a>
 800ab5c:	4bbe      	ldr	r3, [pc, #760]	; (800ae58 <UART_SetConfig+0x1510>)
 800ab5e:	f04f 0400 	mov.w	r4, #0
 800ab62:	e026      	b.n	800abb2 <UART_SetConfig+0x126a>
 800ab64:	4bbd      	ldr	r3, [pc, #756]	; (800ae5c <UART_SetConfig+0x1514>)
 800ab66:	f04f 0400 	mov.w	r4, #0
 800ab6a:	e022      	b.n	800abb2 <UART_SetConfig+0x126a>
 800ab6c:	4bbc      	ldr	r3, [pc, #752]	; (800ae60 <UART_SetConfig+0x1518>)
 800ab6e:	f04f 0400 	mov.w	r4, #0
 800ab72:	e01e      	b.n	800abb2 <UART_SetConfig+0x126a>
 800ab74:	4bbb      	ldr	r3, [pc, #748]	; (800ae64 <UART_SetConfig+0x151c>)
 800ab76:	f04f 0400 	mov.w	r4, #0
 800ab7a:	e01a      	b.n	800abb2 <UART_SetConfig+0x126a>
 800ab7c:	a4b0      	add	r4, pc, #704	; (adr r4, 800ae40 <UART_SetConfig+0x14f8>)
 800ab7e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ab82:	e016      	b.n	800abb2 <UART_SetConfig+0x126a>
 800ab84:	4bb8      	ldr	r3, [pc, #736]	; (800ae68 <UART_SetConfig+0x1520>)
 800ab86:	f04f 0400 	mov.w	r4, #0
 800ab8a:	e012      	b.n	800abb2 <UART_SetConfig+0x126a>
 800ab8c:	4bb7      	ldr	r3, [pc, #732]	; (800ae6c <UART_SetConfig+0x1524>)
 800ab8e:	f04f 0400 	mov.w	r4, #0
 800ab92:	e00e      	b.n	800abb2 <UART_SetConfig+0x126a>
 800ab94:	a4ac      	add	r4, pc, #688	; (adr r4, 800ae48 <UART_SetConfig+0x1500>)
 800ab96:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ab9a:	e00a      	b.n	800abb2 <UART_SetConfig+0x126a>
 800ab9c:	4bb4      	ldr	r3, [pc, #720]	; (800ae70 <UART_SetConfig+0x1528>)
 800ab9e:	f04f 0400 	mov.w	r4, #0
 800aba2:	e006      	b.n	800abb2 <UART_SetConfig+0x126a>
 800aba4:	4bb3      	ldr	r3, [pc, #716]	; (800ae74 <UART_SetConfig+0x152c>)
 800aba6:	f04f 0400 	mov.w	r4, #0
 800abaa:	e002      	b.n	800abb2 <UART_SetConfig+0x126a>
 800abac:	4ba9      	ldr	r3, [pc, #676]	; (800ae54 <UART_SetConfig+0x150c>)
 800abae:	f04f 0400 	mov.w	r4, #0
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	6852      	ldr	r2, [r2, #4]
 800abb6:	0852      	lsrs	r2, r2, #1
 800abb8:	4611      	mov	r1, r2
 800abba:	f04f 0200 	mov.w	r2, #0
 800abbe:	eb13 0b01 	adds.w	fp, r3, r1
 800abc2:	eb44 0c02 	adc.w	ip, r4, r2
 800abc6:	4658      	mov	r0, fp
 800abc8:	4661      	mov	r1, ip
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	f04f 0400 	mov.w	r4, #0
 800abd2:	461a      	mov	r2, r3
 800abd4:	4623      	mov	r3, r4
 800abd6:	f7f5 fb7f 	bl	80002d8 <__aeabi_uldivmod>
 800abda:	4603      	mov	r3, r0
 800abdc:	460c      	mov	r4, r1
 800abde:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800abe0:	e088      	b.n	800acf4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d064      	beq.n	800acb4 <UART_SetConfig+0x136c>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d05b      	beq.n	800acaa <UART_SetConfig+0x1362>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d052      	beq.n	800aca0 <UART_SetConfig+0x1358>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfe:	2b03      	cmp	r3, #3
 800ac00:	d04a      	beq.n	800ac98 <UART_SetConfig+0x1350>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac06:	2b04      	cmp	r3, #4
 800ac08:	d041      	beq.n	800ac8e <UART_SetConfig+0x1346>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0e:	2b05      	cmp	r3, #5
 800ac10:	d039      	beq.n	800ac86 <UART_SetConfig+0x133e>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac16:	2b06      	cmp	r3, #6
 800ac18:	d031      	beq.n	800ac7e <UART_SetConfig+0x1336>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1e:	2b07      	cmp	r3, #7
 800ac20:	d028      	beq.n	800ac74 <UART_SetConfig+0x132c>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac26:	2b08      	cmp	r3, #8
 800ac28:	d01f      	beq.n	800ac6a <UART_SetConfig+0x1322>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2e:	2b09      	cmp	r3, #9
 800ac30:	d016      	beq.n	800ac60 <UART_SetConfig+0x1318>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac36:	2b0a      	cmp	r3, #10
 800ac38:	d00d      	beq.n	800ac56 <UART_SetConfig+0x130e>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3e:	2b0b      	cmp	r3, #11
 800ac40:	d104      	bne.n	800ac4c <UART_SetConfig+0x1304>
 800ac42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac46:	f04f 0400 	mov.w	r4, #0
 800ac4a:	e037      	b.n	800acbc <UART_SetConfig+0x1374>
 800ac4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ac50:	f04f 0400 	mov.w	r4, #0
 800ac54:	e032      	b.n	800acbc <UART_SetConfig+0x1374>
 800ac56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ac5a:	f04f 0400 	mov.w	r4, #0
 800ac5e:	e02d      	b.n	800acbc <UART_SetConfig+0x1374>
 800ac60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ac64:	f04f 0400 	mov.w	r4, #0
 800ac68:	e028      	b.n	800acbc <UART_SetConfig+0x1374>
 800ac6a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ac6e:	f04f 0400 	mov.w	r4, #0
 800ac72:	e023      	b.n	800acbc <UART_SetConfig+0x1374>
 800ac74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ac78:	f04f 0400 	mov.w	r4, #0
 800ac7c:	e01e      	b.n	800acbc <UART_SetConfig+0x1374>
 800ac7e:	4b7e      	ldr	r3, [pc, #504]	; (800ae78 <UART_SetConfig+0x1530>)
 800ac80:	f04f 0400 	mov.w	r4, #0
 800ac84:	e01a      	b.n	800acbc <UART_SetConfig+0x1374>
 800ac86:	4b7d      	ldr	r3, [pc, #500]	; (800ae7c <UART_SetConfig+0x1534>)
 800ac88:	f04f 0400 	mov.w	r4, #0
 800ac8c:	e016      	b.n	800acbc <UART_SetConfig+0x1374>
 800ac8e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ac92:	f04f 0400 	mov.w	r4, #0
 800ac96:	e011      	b.n	800acbc <UART_SetConfig+0x1374>
 800ac98:	4b79      	ldr	r3, [pc, #484]	; (800ae80 <UART_SetConfig+0x1538>)
 800ac9a:	f04f 0400 	mov.w	r4, #0
 800ac9e:	e00d      	b.n	800acbc <UART_SetConfig+0x1374>
 800aca0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aca4:	f04f 0400 	mov.w	r4, #0
 800aca8:	e008      	b.n	800acbc <UART_SetConfig+0x1374>
 800acaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800acae:	f04f 0400 	mov.w	r4, #0
 800acb2:	e003      	b.n	800acbc <UART_SetConfig+0x1374>
 800acb4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800acb8:	f04f 0400 	mov.w	r4, #0
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	6852      	ldr	r2, [r2, #4]
 800acc0:	0852      	lsrs	r2, r2, #1
 800acc2:	4611      	mov	r1, r2
 800acc4:	f04f 0200 	mov.w	r2, #0
 800acc8:	eb13 0b01 	adds.w	fp, r3, r1
 800accc:	eb44 0c02 	adc.w	ip, r4, r2
 800acd0:	4658      	mov	r0, fp
 800acd2:	4661      	mov	r1, ip
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	f04f 0400 	mov.w	r4, #0
 800acdc:	461a      	mov	r2, r3
 800acde:	4623      	mov	r3, r4
 800ace0:	f7f5 fafa 	bl	80002d8 <__aeabi_uldivmod>
 800ace4:	4603      	mov	r3, r0
 800ace6:	460c      	mov	r4, r1
 800ace8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800acea:	e003      	b.n	800acf4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800acf2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800acf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acfa:	d309      	bcc.n	800ad10 <UART_SetConfig+0x13c8>
 800acfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad02:	d205      	bcs.n	800ad10 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad0a:	60da      	str	r2, [r3, #12]
 800ad0c:	f000 bf85 	b.w	800bc1a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad16:	f000 bf80 	b.w	800bc1a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	69db      	ldr	r3, [r3, #28]
 800ad1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad22:	f040 83da 	bne.w	800b4da <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800ad26:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ad2a:	2b40      	cmp	r3, #64	; 0x40
 800ad2c:	f200 83b3 	bhi.w	800b496 <UART_SetConfig+0x1b4e>
 800ad30:	a201      	add	r2, pc, #4	; (adr r2, 800ad38 <UART_SetConfig+0x13f0>)
 800ad32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad36:	bf00      	nop
 800ad38:	0800ae85 	.word	0x0800ae85
 800ad3c:	0800af3d 	.word	0x0800af3d
 800ad40:	0800b497 	.word	0x0800b497
 800ad44:	0800b497 	.word	0x0800b497
 800ad48:	0800aff5 	.word	0x0800aff5
 800ad4c:	0800b497 	.word	0x0800b497
 800ad50:	0800b497 	.word	0x0800b497
 800ad54:	0800b497 	.word	0x0800b497
 800ad58:	0800b0b1 	.word	0x0800b0b1
 800ad5c:	0800b497 	.word	0x0800b497
 800ad60:	0800b497 	.word	0x0800b497
 800ad64:	0800b497 	.word	0x0800b497
 800ad68:	0800b497 	.word	0x0800b497
 800ad6c:	0800b497 	.word	0x0800b497
 800ad70:	0800b497 	.word	0x0800b497
 800ad74:	0800b497 	.word	0x0800b497
 800ad78:	0800b16d 	.word	0x0800b16d
 800ad7c:	0800b497 	.word	0x0800b497
 800ad80:	0800b497 	.word	0x0800b497
 800ad84:	0800b497 	.word	0x0800b497
 800ad88:	0800b497 	.word	0x0800b497
 800ad8c:	0800b497 	.word	0x0800b497
 800ad90:	0800b497 	.word	0x0800b497
 800ad94:	0800b497 	.word	0x0800b497
 800ad98:	0800b497 	.word	0x0800b497
 800ad9c:	0800b497 	.word	0x0800b497
 800ada0:	0800b497 	.word	0x0800b497
 800ada4:	0800b497 	.word	0x0800b497
 800ada8:	0800b497 	.word	0x0800b497
 800adac:	0800b497 	.word	0x0800b497
 800adb0:	0800b497 	.word	0x0800b497
 800adb4:	0800b497 	.word	0x0800b497
 800adb8:	0800b2df 	.word	0x0800b2df
 800adbc:	0800b497 	.word	0x0800b497
 800adc0:	0800b497 	.word	0x0800b497
 800adc4:	0800b497 	.word	0x0800b497
 800adc8:	0800b497 	.word	0x0800b497
 800adcc:	0800b497 	.word	0x0800b497
 800add0:	0800b497 	.word	0x0800b497
 800add4:	0800b497 	.word	0x0800b497
 800add8:	0800b497 	.word	0x0800b497
 800addc:	0800b497 	.word	0x0800b497
 800ade0:	0800b497 	.word	0x0800b497
 800ade4:	0800b497 	.word	0x0800b497
 800ade8:	0800b497 	.word	0x0800b497
 800adec:	0800b497 	.word	0x0800b497
 800adf0:	0800b497 	.word	0x0800b497
 800adf4:	0800b497 	.word	0x0800b497
 800adf8:	0800b497 	.word	0x0800b497
 800adfc:	0800b497 	.word	0x0800b497
 800ae00:	0800b497 	.word	0x0800b497
 800ae04:	0800b497 	.word	0x0800b497
 800ae08:	0800b497 	.word	0x0800b497
 800ae0c:	0800b497 	.word	0x0800b497
 800ae10:	0800b497 	.word	0x0800b497
 800ae14:	0800b497 	.word	0x0800b497
 800ae18:	0800b497 	.word	0x0800b497
 800ae1c:	0800b497 	.word	0x0800b497
 800ae20:	0800b497 	.word	0x0800b497
 800ae24:	0800b497 	.word	0x0800b497
 800ae28:	0800b497 	.word	0x0800b497
 800ae2c:	0800b497 	.word	0x0800b497
 800ae30:	0800b497 	.word	0x0800b497
 800ae34:	0800b497 	.word	0x0800b497
 800ae38:	0800b3d5 	.word	0x0800b3d5
 800ae3c:	f3af 8000 	nop.w
 800ae40:	05161500 	.word	0x05161500
 800ae44:	00000000 	.word	0x00000000
 800ae48:	0a2c2a00 	.word	0x0a2c2a00
 800ae4c:	00000000 	.word	0x00000000
 800ae50:	003d0900 	.word	0x003d0900
 800ae54:	3d090000 	.word	0x3d090000
 800ae58:	007a1200 	.word	0x007a1200
 800ae5c:	00f42400 	.word	0x00f42400
 800ae60:	01e84800 	.word	0x01e84800
 800ae64:	03d09000 	.word	0x03d09000
 800ae68:	061a8000 	.word	0x061a8000
 800ae6c:	07a12000 	.word	0x07a12000
 800ae70:	0f424000 	.word	0x0f424000
 800ae74:	1e848000 	.word	0x1e848000
 800ae78:	000aaa00 	.word	0x000aaa00
 800ae7c:	000ccc00 	.word	0x000ccc00
 800ae80:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae84:	f7fb fe6a 	bl	8006b5c <HAL_RCC_GetPCLK1Freq>
 800ae88:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d044      	beq.n	800af1c <UART_SetConfig+0x15d4>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d03e      	beq.n	800af18 <UART_SetConfig+0x15d0>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	d038      	beq.n	800af14 <UART_SetConfig+0x15cc>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea6:	2b03      	cmp	r3, #3
 800aea8:	d032      	beq.n	800af10 <UART_SetConfig+0x15c8>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeae:	2b04      	cmp	r3, #4
 800aeb0:	d02c      	beq.n	800af0c <UART_SetConfig+0x15c4>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb6:	2b05      	cmp	r3, #5
 800aeb8:	d026      	beq.n	800af08 <UART_SetConfig+0x15c0>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aebe:	2b06      	cmp	r3, #6
 800aec0:	d020      	beq.n	800af04 <UART_SetConfig+0x15bc>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec6:	2b07      	cmp	r3, #7
 800aec8:	d01a      	beq.n	800af00 <UART_SetConfig+0x15b8>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aece:	2b08      	cmp	r3, #8
 800aed0:	d014      	beq.n	800aefc <UART_SetConfig+0x15b4>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed6:	2b09      	cmp	r3, #9
 800aed8:	d00e      	beq.n	800aef8 <UART_SetConfig+0x15b0>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aede:	2b0a      	cmp	r3, #10
 800aee0:	d008      	beq.n	800aef4 <UART_SetConfig+0x15ac>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee6:	2b0b      	cmp	r3, #11
 800aee8:	d102      	bne.n	800aef0 <UART_SetConfig+0x15a8>
 800aeea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aeee:	e016      	b.n	800af1e <UART_SetConfig+0x15d6>
 800aef0:	2301      	movs	r3, #1
 800aef2:	e014      	b.n	800af1e <UART_SetConfig+0x15d6>
 800aef4:	2380      	movs	r3, #128	; 0x80
 800aef6:	e012      	b.n	800af1e <UART_SetConfig+0x15d6>
 800aef8:	2340      	movs	r3, #64	; 0x40
 800aefa:	e010      	b.n	800af1e <UART_SetConfig+0x15d6>
 800aefc:	2320      	movs	r3, #32
 800aefe:	e00e      	b.n	800af1e <UART_SetConfig+0x15d6>
 800af00:	2310      	movs	r3, #16
 800af02:	e00c      	b.n	800af1e <UART_SetConfig+0x15d6>
 800af04:	230c      	movs	r3, #12
 800af06:	e00a      	b.n	800af1e <UART_SetConfig+0x15d6>
 800af08:	230a      	movs	r3, #10
 800af0a:	e008      	b.n	800af1e <UART_SetConfig+0x15d6>
 800af0c:	2308      	movs	r3, #8
 800af0e:	e006      	b.n	800af1e <UART_SetConfig+0x15d6>
 800af10:	2306      	movs	r3, #6
 800af12:	e004      	b.n	800af1e <UART_SetConfig+0x15d6>
 800af14:	2304      	movs	r3, #4
 800af16:	e002      	b.n	800af1e <UART_SetConfig+0x15d6>
 800af18:	2302      	movs	r3, #2
 800af1a:	e000      	b.n	800af1e <UART_SetConfig+0x15d6>
 800af1c:	2301      	movs	r3, #1
 800af1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af20:	fbb2 f3f3 	udiv	r3, r2, r3
 800af24:	005a      	lsls	r2, r3, #1
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	085b      	lsrs	r3, r3, #1
 800af2c:	441a      	add	r2, r3
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	fbb2 f3f3 	udiv	r3, r2, r3
 800af36:	b29b      	uxth	r3, r3
 800af38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af3a:	e2b0      	b.n	800b49e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af3c:	f7fb fe24 	bl	8006b88 <HAL_RCC_GetPCLK2Freq>
 800af40:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af46:	2b00      	cmp	r3, #0
 800af48:	d044      	beq.n	800afd4 <UART_SetConfig+0x168c>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d03e      	beq.n	800afd0 <UART_SetConfig+0x1688>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af56:	2b02      	cmp	r3, #2
 800af58:	d038      	beq.n	800afcc <UART_SetConfig+0x1684>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5e:	2b03      	cmp	r3, #3
 800af60:	d032      	beq.n	800afc8 <UART_SetConfig+0x1680>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af66:	2b04      	cmp	r3, #4
 800af68:	d02c      	beq.n	800afc4 <UART_SetConfig+0x167c>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6e:	2b05      	cmp	r3, #5
 800af70:	d026      	beq.n	800afc0 <UART_SetConfig+0x1678>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af76:	2b06      	cmp	r3, #6
 800af78:	d020      	beq.n	800afbc <UART_SetConfig+0x1674>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7e:	2b07      	cmp	r3, #7
 800af80:	d01a      	beq.n	800afb8 <UART_SetConfig+0x1670>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af86:	2b08      	cmp	r3, #8
 800af88:	d014      	beq.n	800afb4 <UART_SetConfig+0x166c>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8e:	2b09      	cmp	r3, #9
 800af90:	d00e      	beq.n	800afb0 <UART_SetConfig+0x1668>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af96:	2b0a      	cmp	r3, #10
 800af98:	d008      	beq.n	800afac <UART_SetConfig+0x1664>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9e:	2b0b      	cmp	r3, #11
 800afa0:	d102      	bne.n	800afa8 <UART_SetConfig+0x1660>
 800afa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afa6:	e016      	b.n	800afd6 <UART_SetConfig+0x168e>
 800afa8:	2301      	movs	r3, #1
 800afaa:	e014      	b.n	800afd6 <UART_SetConfig+0x168e>
 800afac:	2380      	movs	r3, #128	; 0x80
 800afae:	e012      	b.n	800afd6 <UART_SetConfig+0x168e>
 800afb0:	2340      	movs	r3, #64	; 0x40
 800afb2:	e010      	b.n	800afd6 <UART_SetConfig+0x168e>
 800afb4:	2320      	movs	r3, #32
 800afb6:	e00e      	b.n	800afd6 <UART_SetConfig+0x168e>
 800afb8:	2310      	movs	r3, #16
 800afba:	e00c      	b.n	800afd6 <UART_SetConfig+0x168e>
 800afbc:	230c      	movs	r3, #12
 800afbe:	e00a      	b.n	800afd6 <UART_SetConfig+0x168e>
 800afc0:	230a      	movs	r3, #10
 800afc2:	e008      	b.n	800afd6 <UART_SetConfig+0x168e>
 800afc4:	2308      	movs	r3, #8
 800afc6:	e006      	b.n	800afd6 <UART_SetConfig+0x168e>
 800afc8:	2306      	movs	r3, #6
 800afca:	e004      	b.n	800afd6 <UART_SetConfig+0x168e>
 800afcc:	2304      	movs	r3, #4
 800afce:	e002      	b.n	800afd6 <UART_SetConfig+0x168e>
 800afd0:	2302      	movs	r3, #2
 800afd2:	e000      	b.n	800afd6 <UART_SetConfig+0x168e>
 800afd4:	2301      	movs	r3, #1
 800afd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800afdc:	005a      	lsls	r2, r3, #1
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	085b      	lsrs	r3, r3, #1
 800afe4:	441a      	add	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	fbb2 f3f3 	udiv	r3, r2, r3
 800afee:	b29b      	uxth	r3, r3
 800aff0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aff2:	e254      	b.n	800b49e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aff4:	f107 0318 	add.w	r3, r7, #24
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fc ff47 	bl	8007e8c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800affe:	69fa      	ldr	r2, [r7, #28]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b004:	2b00      	cmp	r3, #0
 800b006:	d044      	beq.n	800b092 <UART_SetConfig+0x174a>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d03e      	beq.n	800b08e <UART_SetConfig+0x1746>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b014:	2b02      	cmp	r3, #2
 800b016:	d038      	beq.n	800b08a <UART_SetConfig+0x1742>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01c:	2b03      	cmp	r3, #3
 800b01e:	d032      	beq.n	800b086 <UART_SetConfig+0x173e>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b024:	2b04      	cmp	r3, #4
 800b026:	d02c      	beq.n	800b082 <UART_SetConfig+0x173a>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02c:	2b05      	cmp	r3, #5
 800b02e:	d026      	beq.n	800b07e <UART_SetConfig+0x1736>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b034:	2b06      	cmp	r3, #6
 800b036:	d020      	beq.n	800b07a <UART_SetConfig+0x1732>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03c:	2b07      	cmp	r3, #7
 800b03e:	d01a      	beq.n	800b076 <UART_SetConfig+0x172e>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b044:	2b08      	cmp	r3, #8
 800b046:	d014      	beq.n	800b072 <UART_SetConfig+0x172a>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04c:	2b09      	cmp	r3, #9
 800b04e:	d00e      	beq.n	800b06e <UART_SetConfig+0x1726>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b054:	2b0a      	cmp	r3, #10
 800b056:	d008      	beq.n	800b06a <UART_SetConfig+0x1722>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05c:	2b0b      	cmp	r3, #11
 800b05e:	d102      	bne.n	800b066 <UART_SetConfig+0x171e>
 800b060:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b064:	e016      	b.n	800b094 <UART_SetConfig+0x174c>
 800b066:	2301      	movs	r3, #1
 800b068:	e014      	b.n	800b094 <UART_SetConfig+0x174c>
 800b06a:	2380      	movs	r3, #128	; 0x80
 800b06c:	e012      	b.n	800b094 <UART_SetConfig+0x174c>
 800b06e:	2340      	movs	r3, #64	; 0x40
 800b070:	e010      	b.n	800b094 <UART_SetConfig+0x174c>
 800b072:	2320      	movs	r3, #32
 800b074:	e00e      	b.n	800b094 <UART_SetConfig+0x174c>
 800b076:	2310      	movs	r3, #16
 800b078:	e00c      	b.n	800b094 <UART_SetConfig+0x174c>
 800b07a:	230c      	movs	r3, #12
 800b07c:	e00a      	b.n	800b094 <UART_SetConfig+0x174c>
 800b07e:	230a      	movs	r3, #10
 800b080:	e008      	b.n	800b094 <UART_SetConfig+0x174c>
 800b082:	2308      	movs	r3, #8
 800b084:	e006      	b.n	800b094 <UART_SetConfig+0x174c>
 800b086:	2306      	movs	r3, #6
 800b088:	e004      	b.n	800b094 <UART_SetConfig+0x174c>
 800b08a:	2304      	movs	r3, #4
 800b08c:	e002      	b.n	800b094 <UART_SetConfig+0x174c>
 800b08e:	2302      	movs	r3, #2
 800b090:	e000      	b.n	800b094 <UART_SetConfig+0x174c>
 800b092:	2301      	movs	r3, #1
 800b094:	fbb2 f3f3 	udiv	r3, r2, r3
 800b098:	005a      	lsls	r2, r3, #1
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	085b      	lsrs	r3, r3, #1
 800b0a0:	441a      	add	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b0ae:	e1f6      	b.n	800b49e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0b0:	f107 030c 	add.w	r3, r7, #12
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7fd f835 	bl	8008124 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d044      	beq.n	800b14e <UART_SetConfig+0x1806>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d03e      	beq.n	800b14a <UART_SetConfig+0x1802>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d0:	2b02      	cmp	r3, #2
 800b0d2:	d038      	beq.n	800b146 <UART_SetConfig+0x17fe>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d8:	2b03      	cmp	r3, #3
 800b0da:	d032      	beq.n	800b142 <UART_SetConfig+0x17fa>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e0:	2b04      	cmp	r3, #4
 800b0e2:	d02c      	beq.n	800b13e <UART_SetConfig+0x17f6>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e8:	2b05      	cmp	r3, #5
 800b0ea:	d026      	beq.n	800b13a <UART_SetConfig+0x17f2>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f0:	2b06      	cmp	r3, #6
 800b0f2:	d020      	beq.n	800b136 <UART_SetConfig+0x17ee>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f8:	2b07      	cmp	r3, #7
 800b0fa:	d01a      	beq.n	800b132 <UART_SetConfig+0x17ea>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b100:	2b08      	cmp	r3, #8
 800b102:	d014      	beq.n	800b12e <UART_SetConfig+0x17e6>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b108:	2b09      	cmp	r3, #9
 800b10a:	d00e      	beq.n	800b12a <UART_SetConfig+0x17e2>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b110:	2b0a      	cmp	r3, #10
 800b112:	d008      	beq.n	800b126 <UART_SetConfig+0x17de>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b118:	2b0b      	cmp	r3, #11
 800b11a:	d102      	bne.n	800b122 <UART_SetConfig+0x17da>
 800b11c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b120:	e016      	b.n	800b150 <UART_SetConfig+0x1808>
 800b122:	2301      	movs	r3, #1
 800b124:	e014      	b.n	800b150 <UART_SetConfig+0x1808>
 800b126:	2380      	movs	r3, #128	; 0x80
 800b128:	e012      	b.n	800b150 <UART_SetConfig+0x1808>
 800b12a:	2340      	movs	r3, #64	; 0x40
 800b12c:	e010      	b.n	800b150 <UART_SetConfig+0x1808>
 800b12e:	2320      	movs	r3, #32
 800b130:	e00e      	b.n	800b150 <UART_SetConfig+0x1808>
 800b132:	2310      	movs	r3, #16
 800b134:	e00c      	b.n	800b150 <UART_SetConfig+0x1808>
 800b136:	230c      	movs	r3, #12
 800b138:	e00a      	b.n	800b150 <UART_SetConfig+0x1808>
 800b13a:	230a      	movs	r3, #10
 800b13c:	e008      	b.n	800b150 <UART_SetConfig+0x1808>
 800b13e:	2308      	movs	r3, #8
 800b140:	e006      	b.n	800b150 <UART_SetConfig+0x1808>
 800b142:	2306      	movs	r3, #6
 800b144:	e004      	b.n	800b150 <UART_SetConfig+0x1808>
 800b146:	2304      	movs	r3, #4
 800b148:	e002      	b.n	800b150 <UART_SetConfig+0x1808>
 800b14a:	2302      	movs	r3, #2
 800b14c:	e000      	b.n	800b150 <UART_SetConfig+0x1808>
 800b14e:	2301      	movs	r3, #1
 800b150:	fbb2 f3f3 	udiv	r3, r2, r3
 800b154:	005a      	lsls	r2, r3, #1
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	085b      	lsrs	r3, r3, #1
 800b15c:	441a      	add	r2, r3
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	fbb2 f3f3 	udiv	r3, r2, r3
 800b166:	b29b      	uxth	r3, r3
 800b168:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b16a:	e198      	b.n	800b49e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b16c:	4b87      	ldr	r3, [pc, #540]	; (800b38c <UART_SetConfig+0x1a44>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f003 0320 	and.w	r3, r3, #32
 800b174:	2b00      	cmp	r3, #0
 800b176:	d05e      	beq.n	800b236 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b178:	4b84      	ldr	r3, [pc, #528]	; (800b38c <UART_SetConfig+0x1a44>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	08db      	lsrs	r3, r3, #3
 800b17e:	f003 0303 	and.w	r3, r3, #3
 800b182:	4a83      	ldr	r2, [pc, #524]	; (800b390 <UART_SetConfig+0x1a48>)
 800b184:	40da      	lsrs	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d044      	beq.n	800b218 <UART_SetConfig+0x18d0>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b192:	2b01      	cmp	r3, #1
 800b194:	d03e      	beq.n	800b214 <UART_SetConfig+0x18cc>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d038      	beq.n	800b210 <UART_SetConfig+0x18c8>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a2:	2b03      	cmp	r3, #3
 800b1a4:	d032      	beq.n	800b20c <UART_SetConfig+0x18c4>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1aa:	2b04      	cmp	r3, #4
 800b1ac:	d02c      	beq.n	800b208 <UART_SetConfig+0x18c0>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b2:	2b05      	cmp	r3, #5
 800b1b4:	d026      	beq.n	800b204 <UART_SetConfig+0x18bc>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ba:	2b06      	cmp	r3, #6
 800b1bc:	d020      	beq.n	800b200 <UART_SetConfig+0x18b8>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c2:	2b07      	cmp	r3, #7
 800b1c4:	d01a      	beq.n	800b1fc <UART_SetConfig+0x18b4>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ca:	2b08      	cmp	r3, #8
 800b1cc:	d014      	beq.n	800b1f8 <UART_SetConfig+0x18b0>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d2:	2b09      	cmp	r3, #9
 800b1d4:	d00e      	beq.n	800b1f4 <UART_SetConfig+0x18ac>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1da:	2b0a      	cmp	r3, #10
 800b1dc:	d008      	beq.n	800b1f0 <UART_SetConfig+0x18a8>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e2:	2b0b      	cmp	r3, #11
 800b1e4:	d102      	bne.n	800b1ec <UART_SetConfig+0x18a4>
 800b1e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1ea:	e016      	b.n	800b21a <UART_SetConfig+0x18d2>
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	e014      	b.n	800b21a <UART_SetConfig+0x18d2>
 800b1f0:	2380      	movs	r3, #128	; 0x80
 800b1f2:	e012      	b.n	800b21a <UART_SetConfig+0x18d2>
 800b1f4:	2340      	movs	r3, #64	; 0x40
 800b1f6:	e010      	b.n	800b21a <UART_SetConfig+0x18d2>
 800b1f8:	2320      	movs	r3, #32
 800b1fa:	e00e      	b.n	800b21a <UART_SetConfig+0x18d2>
 800b1fc:	2310      	movs	r3, #16
 800b1fe:	e00c      	b.n	800b21a <UART_SetConfig+0x18d2>
 800b200:	230c      	movs	r3, #12
 800b202:	e00a      	b.n	800b21a <UART_SetConfig+0x18d2>
 800b204:	230a      	movs	r3, #10
 800b206:	e008      	b.n	800b21a <UART_SetConfig+0x18d2>
 800b208:	2308      	movs	r3, #8
 800b20a:	e006      	b.n	800b21a <UART_SetConfig+0x18d2>
 800b20c:	2306      	movs	r3, #6
 800b20e:	e004      	b.n	800b21a <UART_SetConfig+0x18d2>
 800b210:	2304      	movs	r3, #4
 800b212:	e002      	b.n	800b21a <UART_SetConfig+0x18d2>
 800b214:	2302      	movs	r3, #2
 800b216:	e000      	b.n	800b21a <UART_SetConfig+0x18d2>
 800b218:	2301      	movs	r3, #1
 800b21a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b21e:	005a      	lsls	r2, r3, #1
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	085b      	lsrs	r3, r3, #1
 800b226:	441a      	add	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b230:	b29b      	uxth	r3, r3
 800b232:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b234:	e133      	b.n	800b49e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d043      	beq.n	800b2c6 <UART_SetConfig+0x197e>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b242:	2b01      	cmp	r3, #1
 800b244:	d03d      	beq.n	800b2c2 <UART_SetConfig+0x197a>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24a:	2b02      	cmp	r3, #2
 800b24c:	d037      	beq.n	800b2be <UART_SetConfig+0x1976>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b252:	2b03      	cmp	r3, #3
 800b254:	d031      	beq.n	800b2ba <UART_SetConfig+0x1972>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25a:	2b04      	cmp	r3, #4
 800b25c:	d02b      	beq.n	800b2b6 <UART_SetConfig+0x196e>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b262:	2b05      	cmp	r3, #5
 800b264:	d025      	beq.n	800b2b2 <UART_SetConfig+0x196a>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26a:	2b06      	cmp	r3, #6
 800b26c:	d01f      	beq.n	800b2ae <UART_SetConfig+0x1966>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b272:	2b07      	cmp	r3, #7
 800b274:	d019      	beq.n	800b2aa <UART_SetConfig+0x1962>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27a:	2b08      	cmp	r3, #8
 800b27c:	d013      	beq.n	800b2a6 <UART_SetConfig+0x195e>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b282:	2b09      	cmp	r3, #9
 800b284:	d00d      	beq.n	800b2a2 <UART_SetConfig+0x195a>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28a:	2b0a      	cmp	r3, #10
 800b28c:	d007      	beq.n	800b29e <UART_SetConfig+0x1956>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b292:	2b0b      	cmp	r3, #11
 800b294:	d101      	bne.n	800b29a <UART_SetConfig+0x1952>
 800b296:	4b3f      	ldr	r3, [pc, #252]	; (800b394 <UART_SetConfig+0x1a4c>)
 800b298:	e016      	b.n	800b2c8 <UART_SetConfig+0x1980>
 800b29a:	4b3f      	ldr	r3, [pc, #252]	; (800b398 <UART_SetConfig+0x1a50>)
 800b29c:	e014      	b.n	800b2c8 <UART_SetConfig+0x1980>
 800b29e:	4b3f      	ldr	r3, [pc, #252]	; (800b39c <UART_SetConfig+0x1a54>)
 800b2a0:	e012      	b.n	800b2c8 <UART_SetConfig+0x1980>
 800b2a2:	4b3f      	ldr	r3, [pc, #252]	; (800b3a0 <UART_SetConfig+0x1a58>)
 800b2a4:	e010      	b.n	800b2c8 <UART_SetConfig+0x1980>
 800b2a6:	4b3f      	ldr	r3, [pc, #252]	; (800b3a4 <UART_SetConfig+0x1a5c>)
 800b2a8:	e00e      	b.n	800b2c8 <UART_SetConfig+0x1980>
 800b2aa:	4b3f      	ldr	r3, [pc, #252]	; (800b3a8 <UART_SetConfig+0x1a60>)
 800b2ac:	e00c      	b.n	800b2c8 <UART_SetConfig+0x1980>
 800b2ae:	4b3f      	ldr	r3, [pc, #252]	; (800b3ac <UART_SetConfig+0x1a64>)
 800b2b0:	e00a      	b.n	800b2c8 <UART_SetConfig+0x1980>
 800b2b2:	4b3f      	ldr	r3, [pc, #252]	; (800b3b0 <UART_SetConfig+0x1a68>)
 800b2b4:	e008      	b.n	800b2c8 <UART_SetConfig+0x1980>
 800b2b6:	4b3f      	ldr	r3, [pc, #252]	; (800b3b4 <UART_SetConfig+0x1a6c>)
 800b2b8:	e006      	b.n	800b2c8 <UART_SetConfig+0x1980>
 800b2ba:	4b3f      	ldr	r3, [pc, #252]	; (800b3b8 <UART_SetConfig+0x1a70>)
 800b2bc:	e004      	b.n	800b2c8 <UART_SetConfig+0x1980>
 800b2be:	4b3f      	ldr	r3, [pc, #252]	; (800b3bc <UART_SetConfig+0x1a74>)
 800b2c0:	e002      	b.n	800b2c8 <UART_SetConfig+0x1980>
 800b2c2:	4b33      	ldr	r3, [pc, #204]	; (800b390 <UART_SetConfig+0x1a48>)
 800b2c4:	e000      	b.n	800b2c8 <UART_SetConfig+0x1980>
 800b2c6:	4b34      	ldr	r3, [pc, #208]	; (800b398 <UART_SetConfig+0x1a50>)
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	6852      	ldr	r2, [r2, #4]
 800b2cc:	0852      	lsrs	r2, r2, #1
 800b2ce:	441a      	add	r2, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b2dc:	e0df      	b.n	800b49e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d045      	beq.n	800b372 <UART_SetConfig+0x1a2a>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d03f      	beq.n	800b36e <UART_SetConfig+0x1a26>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d039      	beq.n	800b36a <UART_SetConfig+0x1a22>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fa:	2b03      	cmp	r3, #3
 800b2fc:	d033      	beq.n	800b366 <UART_SetConfig+0x1a1e>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b302:	2b04      	cmp	r3, #4
 800b304:	d02d      	beq.n	800b362 <UART_SetConfig+0x1a1a>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30a:	2b05      	cmp	r3, #5
 800b30c:	d027      	beq.n	800b35e <UART_SetConfig+0x1a16>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b312:	2b06      	cmp	r3, #6
 800b314:	d021      	beq.n	800b35a <UART_SetConfig+0x1a12>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31a:	2b07      	cmp	r3, #7
 800b31c:	d01b      	beq.n	800b356 <UART_SetConfig+0x1a0e>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b322:	2b08      	cmp	r3, #8
 800b324:	d015      	beq.n	800b352 <UART_SetConfig+0x1a0a>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32a:	2b09      	cmp	r3, #9
 800b32c:	d00f      	beq.n	800b34e <UART_SetConfig+0x1a06>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b332:	2b0a      	cmp	r3, #10
 800b334:	d008      	beq.n	800b348 <UART_SetConfig+0x1a00>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33a:	2b0b      	cmp	r3, #11
 800b33c:	d102      	bne.n	800b344 <UART_SetConfig+0x19fc>
 800b33e:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b342:	e017      	b.n	800b374 <UART_SetConfig+0x1a2c>
 800b344:	4b18      	ldr	r3, [pc, #96]	; (800b3a8 <UART_SetConfig+0x1a60>)
 800b346:	e015      	b.n	800b374 <UART_SetConfig+0x1a2c>
 800b348:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b34c:	e012      	b.n	800b374 <UART_SetConfig+0x1a2c>
 800b34e:	4b1c      	ldr	r3, [pc, #112]	; (800b3c0 <UART_SetConfig+0x1a78>)
 800b350:	e010      	b.n	800b374 <UART_SetConfig+0x1a2c>
 800b352:	4b1c      	ldr	r3, [pc, #112]	; (800b3c4 <UART_SetConfig+0x1a7c>)
 800b354:	e00e      	b.n	800b374 <UART_SetConfig+0x1a2c>
 800b356:	4b0f      	ldr	r3, [pc, #60]	; (800b394 <UART_SetConfig+0x1a4c>)
 800b358:	e00c      	b.n	800b374 <UART_SetConfig+0x1a2c>
 800b35a:	4b1b      	ldr	r3, [pc, #108]	; (800b3c8 <UART_SetConfig+0x1a80>)
 800b35c:	e00a      	b.n	800b374 <UART_SetConfig+0x1a2c>
 800b35e:	4b1b      	ldr	r3, [pc, #108]	; (800b3cc <UART_SetConfig+0x1a84>)
 800b360:	e008      	b.n	800b374 <UART_SetConfig+0x1a2c>
 800b362:	4b0e      	ldr	r3, [pc, #56]	; (800b39c <UART_SetConfig+0x1a54>)
 800b364:	e006      	b.n	800b374 <UART_SetConfig+0x1a2c>
 800b366:	4b1a      	ldr	r3, [pc, #104]	; (800b3d0 <UART_SetConfig+0x1a88>)
 800b368:	e004      	b.n	800b374 <UART_SetConfig+0x1a2c>
 800b36a:	4b0d      	ldr	r3, [pc, #52]	; (800b3a0 <UART_SetConfig+0x1a58>)
 800b36c:	e002      	b.n	800b374 <UART_SetConfig+0x1a2c>
 800b36e:	4b0d      	ldr	r3, [pc, #52]	; (800b3a4 <UART_SetConfig+0x1a5c>)
 800b370:	e000      	b.n	800b374 <UART_SetConfig+0x1a2c>
 800b372:	4b0d      	ldr	r3, [pc, #52]	; (800b3a8 <UART_SetConfig+0x1a60>)
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	6852      	ldr	r2, [r2, #4]
 800b378:	0852      	lsrs	r2, r2, #1
 800b37a:	441a      	add	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	fbb2 f3f3 	udiv	r3, r2, r3
 800b384:	b29b      	uxth	r3, r3
 800b386:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b388:	e089      	b.n	800b49e <UART_SetConfig+0x1b56>
 800b38a:	bf00      	nop
 800b38c:	58024400 	.word	0x58024400
 800b390:	03d09000 	.word	0x03d09000
 800b394:	0007a120 	.word	0x0007a120
 800b398:	07a12000 	.word	0x07a12000
 800b39c:	000f4240 	.word	0x000f4240
 800b3a0:	001e8480 	.word	0x001e8480
 800b3a4:	003d0900 	.word	0x003d0900
 800b3a8:	007a1200 	.word	0x007a1200
 800b3ac:	00a2c2aa 	.word	0x00a2c2aa
 800b3b0:	00c35000 	.word	0x00c35000
 800b3b4:	00f42400 	.word	0x00f42400
 800b3b8:	01458554 	.word	0x01458554
 800b3bc:	01e84800 	.word	0x01e84800
 800b3c0:	0001e848 	.word	0x0001e848
 800b3c4:	0003d090 	.word	0x0003d090
 800b3c8:	000a2c2a 	.word	0x000a2c2a
 800b3cc:	000c3500 	.word	0x000c3500
 800b3d0:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d04f      	beq.n	800b47c <UART_SetConfig+0x1b34>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d048      	beq.n	800b476 <UART_SetConfig+0x1b2e>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d041      	beq.n	800b470 <UART_SetConfig+0x1b28>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f0:	2b03      	cmp	r3, #3
 800b3f2:	d03a      	beq.n	800b46a <UART_SetConfig+0x1b22>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f8:	2b04      	cmp	r3, #4
 800b3fa:	d033      	beq.n	800b464 <UART_SetConfig+0x1b1c>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b400:	2b05      	cmp	r3, #5
 800b402:	d02c      	beq.n	800b45e <UART_SetConfig+0x1b16>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b408:	2b06      	cmp	r3, #6
 800b40a:	d025      	beq.n	800b458 <UART_SetConfig+0x1b10>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b410:	2b07      	cmp	r3, #7
 800b412:	d01e      	beq.n	800b452 <UART_SetConfig+0x1b0a>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b418:	2b08      	cmp	r3, #8
 800b41a:	d017      	beq.n	800b44c <UART_SetConfig+0x1b04>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b420:	2b09      	cmp	r3, #9
 800b422:	d010      	beq.n	800b446 <UART_SetConfig+0x1afe>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b428:	2b0a      	cmp	r3, #10
 800b42a:	d009      	beq.n	800b440 <UART_SetConfig+0x1af8>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b430:	2b0b      	cmp	r3, #11
 800b432:	d102      	bne.n	800b43a <UART_SetConfig+0x1af2>
 800b434:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b438:	e022      	b.n	800b480 <UART_SetConfig+0x1b38>
 800b43a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b43e:	e01f      	b.n	800b480 <UART_SetConfig+0x1b38>
 800b440:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b444:	e01c      	b.n	800b480 <UART_SetConfig+0x1b38>
 800b446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b44a:	e019      	b.n	800b480 <UART_SetConfig+0x1b38>
 800b44c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b450:	e016      	b.n	800b480 <UART_SetConfig+0x1b38>
 800b452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b456:	e013      	b.n	800b480 <UART_SetConfig+0x1b38>
 800b458:	f241 5354 	movw	r3, #5460	; 0x1554
 800b45c:	e010      	b.n	800b480 <UART_SetConfig+0x1b38>
 800b45e:	f641 1398 	movw	r3, #6552	; 0x1998
 800b462:	e00d      	b.n	800b480 <UART_SetConfig+0x1b38>
 800b464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b468:	e00a      	b.n	800b480 <UART_SetConfig+0x1b38>
 800b46a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800b46e:	e007      	b.n	800b480 <UART_SetConfig+0x1b38>
 800b470:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b474:	e004      	b.n	800b480 <UART_SetConfig+0x1b38>
 800b476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b47a:	e001      	b.n	800b480 <UART_SetConfig+0x1b38>
 800b47c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	6852      	ldr	r2, [r2, #4]
 800b484:	0852      	lsrs	r2, r2, #1
 800b486:	441a      	add	r2, r3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b490:	b29b      	uxth	r3, r3
 800b492:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b494:	e003      	b.n	800b49e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b49c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a0:	2b0f      	cmp	r3, #15
 800b4a2:	d916      	bls.n	800b4d2 <UART_SetConfig+0x1b8a>
 800b4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4aa:	d212      	bcs.n	800b4d2 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	f023 030f 	bic.w	r3, r3, #15
 800b4b4:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b8:	085b      	lsrs	r3, r3, #1
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	f003 0307 	and.w	r3, r3, #7
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b4ce:	60da      	str	r2, [r3, #12]
 800b4d0:	e3a3      	b.n	800bc1a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4d8:	e39f      	b.n	800bc1a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800b4da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b4de:	2b40      	cmp	r3, #64	; 0x40
 800b4e0:	f200 8388 	bhi.w	800bbf4 <UART_SetConfig+0x22ac>
 800b4e4:	a201      	add	r2, pc, #4	; (adr r2, 800b4ec <UART_SetConfig+0x1ba4>)
 800b4e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ea:	bf00      	nop
 800b4ec:	0800b5f1 	.word	0x0800b5f1
 800b4f0:	0800b6a7 	.word	0x0800b6a7
 800b4f4:	0800bbf5 	.word	0x0800bbf5
 800b4f8:	0800bbf5 	.word	0x0800bbf5
 800b4fc:	0800b75d 	.word	0x0800b75d
 800b500:	0800bbf5 	.word	0x0800bbf5
 800b504:	0800bbf5 	.word	0x0800bbf5
 800b508:	0800bbf5 	.word	0x0800bbf5
 800b50c:	0800b817 	.word	0x0800b817
 800b510:	0800bbf5 	.word	0x0800bbf5
 800b514:	0800bbf5 	.word	0x0800bbf5
 800b518:	0800bbf5 	.word	0x0800bbf5
 800b51c:	0800bbf5 	.word	0x0800bbf5
 800b520:	0800bbf5 	.word	0x0800bbf5
 800b524:	0800bbf5 	.word	0x0800bbf5
 800b528:	0800bbf5 	.word	0x0800bbf5
 800b52c:	0800b8d1 	.word	0x0800b8d1
 800b530:	0800bbf5 	.word	0x0800bbf5
 800b534:	0800bbf5 	.word	0x0800bbf5
 800b538:	0800bbf5 	.word	0x0800bbf5
 800b53c:	0800bbf5 	.word	0x0800bbf5
 800b540:	0800bbf5 	.word	0x0800bbf5
 800b544:	0800bbf5 	.word	0x0800bbf5
 800b548:	0800bbf5 	.word	0x0800bbf5
 800b54c:	0800bbf5 	.word	0x0800bbf5
 800b550:	0800bbf5 	.word	0x0800bbf5
 800b554:	0800bbf5 	.word	0x0800bbf5
 800b558:	0800bbf5 	.word	0x0800bbf5
 800b55c:	0800bbf5 	.word	0x0800bbf5
 800b560:	0800bbf5 	.word	0x0800bbf5
 800b564:	0800bbf5 	.word	0x0800bbf5
 800b568:	0800bbf5 	.word	0x0800bbf5
 800b56c:	0800ba41 	.word	0x0800ba41
 800b570:	0800bbf5 	.word	0x0800bbf5
 800b574:	0800bbf5 	.word	0x0800bbf5
 800b578:	0800bbf5 	.word	0x0800bbf5
 800b57c:	0800bbf5 	.word	0x0800bbf5
 800b580:	0800bbf5 	.word	0x0800bbf5
 800b584:	0800bbf5 	.word	0x0800bbf5
 800b588:	0800bbf5 	.word	0x0800bbf5
 800b58c:	0800bbf5 	.word	0x0800bbf5
 800b590:	0800bbf5 	.word	0x0800bbf5
 800b594:	0800bbf5 	.word	0x0800bbf5
 800b598:	0800bbf5 	.word	0x0800bbf5
 800b59c:	0800bbf5 	.word	0x0800bbf5
 800b5a0:	0800bbf5 	.word	0x0800bbf5
 800b5a4:	0800bbf5 	.word	0x0800bbf5
 800b5a8:	0800bbf5 	.word	0x0800bbf5
 800b5ac:	0800bbf5 	.word	0x0800bbf5
 800b5b0:	0800bbf5 	.word	0x0800bbf5
 800b5b4:	0800bbf5 	.word	0x0800bbf5
 800b5b8:	0800bbf5 	.word	0x0800bbf5
 800b5bc:	0800bbf5 	.word	0x0800bbf5
 800b5c0:	0800bbf5 	.word	0x0800bbf5
 800b5c4:	0800bbf5 	.word	0x0800bbf5
 800b5c8:	0800bbf5 	.word	0x0800bbf5
 800b5cc:	0800bbf5 	.word	0x0800bbf5
 800b5d0:	0800bbf5 	.word	0x0800bbf5
 800b5d4:	0800bbf5 	.word	0x0800bbf5
 800b5d8:	0800bbf5 	.word	0x0800bbf5
 800b5dc:	0800bbf5 	.word	0x0800bbf5
 800b5e0:	0800bbf5 	.word	0x0800bbf5
 800b5e4:	0800bbf5 	.word	0x0800bbf5
 800b5e8:	0800bbf5 	.word	0x0800bbf5
 800b5ec:	0800bb35 	.word	0x0800bb35
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5f0:	f7fb fab4 	bl	8006b5c <HAL_RCC_GetPCLK1Freq>
 800b5f4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d044      	beq.n	800b688 <UART_SetConfig+0x1d40>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b602:	2b01      	cmp	r3, #1
 800b604:	d03e      	beq.n	800b684 <UART_SetConfig+0x1d3c>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60a:	2b02      	cmp	r3, #2
 800b60c:	d038      	beq.n	800b680 <UART_SetConfig+0x1d38>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b612:	2b03      	cmp	r3, #3
 800b614:	d032      	beq.n	800b67c <UART_SetConfig+0x1d34>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61a:	2b04      	cmp	r3, #4
 800b61c:	d02c      	beq.n	800b678 <UART_SetConfig+0x1d30>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b622:	2b05      	cmp	r3, #5
 800b624:	d026      	beq.n	800b674 <UART_SetConfig+0x1d2c>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62a:	2b06      	cmp	r3, #6
 800b62c:	d020      	beq.n	800b670 <UART_SetConfig+0x1d28>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b632:	2b07      	cmp	r3, #7
 800b634:	d01a      	beq.n	800b66c <UART_SetConfig+0x1d24>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63a:	2b08      	cmp	r3, #8
 800b63c:	d014      	beq.n	800b668 <UART_SetConfig+0x1d20>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b642:	2b09      	cmp	r3, #9
 800b644:	d00e      	beq.n	800b664 <UART_SetConfig+0x1d1c>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64a:	2b0a      	cmp	r3, #10
 800b64c:	d008      	beq.n	800b660 <UART_SetConfig+0x1d18>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b652:	2b0b      	cmp	r3, #11
 800b654:	d102      	bne.n	800b65c <UART_SetConfig+0x1d14>
 800b656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b65a:	e016      	b.n	800b68a <UART_SetConfig+0x1d42>
 800b65c:	2301      	movs	r3, #1
 800b65e:	e014      	b.n	800b68a <UART_SetConfig+0x1d42>
 800b660:	2380      	movs	r3, #128	; 0x80
 800b662:	e012      	b.n	800b68a <UART_SetConfig+0x1d42>
 800b664:	2340      	movs	r3, #64	; 0x40
 800b666:	e010      	b.n	800b68a <UART_SetConfig+0x1d42>
 800b668:	2320      	movs	r3, #32
 800b66a:	e00e      	b.n	800b68a <UART_SetConfig+0x1d42>
 800b66c:	2310      	movs	r3, #16
 800b66e:	e00c      	b.n	800b68a <UART_SetConfig+0x1d42>
 800b670:	230c      	movs	r3, #12
 800b672:	e00a      	b.n	800b68a <UART_SetConfig+0x1d42>
 800b674:	230a      	movs	r3, #10
 800b676:	e008      	b.n	800b68a <UART_SetConfig+0x1d42>
 800b678:	2308      	movs	r3, #8
 800b67a:	e006      	b.n	800b68a <UART_SetConfig+0x1d42>
 800b67c:	2306      	movs	r3, #6
 800b67e:	e004      	b.n	800b68a <UART_SetConfig+0x1d42>
 800b680:	2304      	movs	r3, #4
 800b682:	e002      	b.n	800b68a <UART_SetConfig+0x1d42>
 800b684:	2302      	movs	r3, #2
 800b686:	e000      	b.n	800b68a <UART_SetConfig+0x1d42>
 800b688:	2301      	movs	r3, #1
 800b68a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b68c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	085b      	lsrs	r3, r3, #1
 800b696:	441a      	add	r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6a4:	e2aa      	b.n	800bbfc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6a6:	f7fb fa6f 	bl	8006b88 <HAL_RCC_GetPCLK2Freq>
 800b6aa:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d044      	beq.n	800b73e <UART_SetConfig+0x1df6>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d03e      	beq.n	800b73a <UART_SetConfig+0x1df2>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c0:	2b02      	cmp	r3, #2
 800b6c2:	d038      	beq.n	800b736 <UART_SetConfig+0x1dee>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c8:	2b03      	cmp	r3, #3
 800b6ca:	d032      	beq.n	800b732 <UART_SetConfig+0x1dea>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d0:	2b04      	cmp	r3, #4
 800b6d2:	d02c      	beq.n	800b72e <UART_SetConfig+0x1de6>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d8:	2b05      	cmp	r3, #5
 800b6da:	d026      	beq.n	800b72a <UART_SetConfig+0x1de2>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e0:	2b06      	cmp	r3, #6
 800b6e2:	d020      	beq.n	800b726 <UART_SetConfig+0x1dde>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e8:	2b07      	cmp	r3, #7
 800b6ea:	d01a      	beq.n	800b722 <UART_SetConfig+0x1dda>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f0:	2b08      	cmp	r3, #8
 800b6f2:	d014      	beq.n	800b71e <UART_SetConfig+0x1dd6>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f8:	2b09      	cmp	r3, #9
 800b6fa:	d00e      	beq.n	800b71a <UART_SetConfig+0x1dd2>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b700:	2b0a      	cmp	r3, #10
 800b702:	d008      	beq.n	800b716 <UART_SetConfig+0x1dce>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b708:	2b0b      	cmp	r3, #11
 800b70a:	d102      	bne.n	800b712 <UART_SetConfig+0x1dca>
 800b70c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b710:	e016      	b.n	800b740 <UART_SetConfig+0x1df8>
 800b712:	2301      	movs	r3, #1
 800b714:	e014      	b.n	800b740 <UART_SetConfig+0x1df8>
 800b716:	2380      	movs	r3, #128	; 0x80
 800b718:	e012      	b.n	800b740 <UART_SetConfig+0x1df8>
 800b71a:	2340      	movs	r3, #64	; 0x40
 800b71c:	e010      	b.n	800b740 <UART_SetConfig+0x1df8>
 800b71e:	2320      	movs	r3, #32
 800b720:	e00e      	b.n	800b740 <UART_SetConfig+0x1df8>
 800b722:	2310      	movs	r3, #16
 800b724:	e00c      	b.n	800b740 <UART_SetConfig+0x1df8>
 800b726:	230c      	movs	r3, #12
 800b728:	e00a      	b.n	800b740 <UART_SetConfig+0x1df8>
 800b72a:	230a      	movs	r3, #10
 800b72c:	e008      	b.n	800b740 <UART_SetConfig+0x1df8>
 800b72e:	2308      	movs	r3, #8
 800b730:	e006      	b.n	800b740 <UART_SetConfig+0x1df8>
 800b732:	2306      	movs	r3, #6
 800b734:	e004      	b.n	800b740 <UART_SetConfig+0x1df8>
 800b736:	2304      	movs	r3, #4
 800b738:	e002      	b.n	800b740 <UART_SetConfig+0x1df8>
 800b73a:	2302      	movs	r3, #2
 800b73c:	e000      	b.n	800b740 <UART_SetConfig+0x1df8>
 800b73e:	2301      	movs	r3, #1
 800b740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b742:	fbb2 f2f3 	udiv	r2, r2, r3
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	085b      	lsrs	r3, r3, #1
 800b74c:	441a      	add	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	fbb2 f3f3 	udiv	r3, r2, r3
 800b756:	b29b      	uxth	r3, r3
 800b758:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b75a:	e24f      	b.n	800bbfc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b75c:	f107 0318 	add.w	r3, r7, #24
 800b760:	4618      	mov	r0, r3
 800b762:	f7fc fb93 	bl	8007e8c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b766:	69fa      	ldr	r2, [r7, #28]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d044      	beq.n	800b7fa <UART_SetConfig+0x1eb2>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b774:	2b01      	cmp	r3, #1
 800b776:	d03e      	beq.n	800b7f6 <UART_SetConfig+0x1eae>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d038      	beq.n	800b7f2 <UART_SetConfig+0x1eaa>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b784:	2b03      	cmp	r3, #3
 800b786:	d032      	beq.n	800b7ee <UART_SetConfig+0x1ea6>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78c:	2b04      	cmp	r3, #4
 800b78e:	d02c      	beq.n	800b7ea <UART_SetConfig+0x1ea2>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b794:	2b05      	cmp	r3, #5
 800b796:	d026      	beq.n	800b7e6 <UART_SetConfig+0x1e9e>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79c:	2b06      	cmp	r3, #6
 800b79e:	d020      	beq.n	800b7e2 <UART_SetConfig+0x1e9a>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a4:	2b07      	cmp	r3, #7
 800b7a6:	d01a      	beq.n	800b7de <UART_SetConfig+0x1e96>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ac:	2b08      	cmp	r3, #8
 800b7ae:	d014      	beq.n	800b7da <UART_SetConfig+0x1e92>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b4:	2b09      	cmp	r3, #9
 800b7b6:	d00e      	beq.n	800b7d6 <UART_SetConfig+0x1e8e>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7bc:	2b0a      	cmp	r3, #10
 800b7be:	d008      	beq.n	800b7d2 <UART_SetConfig+0x1e8a>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c4:	2b0b      	cmp	r3, #11
 800b7c6:	d102      	bne.n	800b7ce <UART_SetConfig+0x1e86>
 800b7c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7cc:	e016      	b.n	800b7fc <UART_SetConfig+0x1eb4>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e014      	b.n	800b7fc <UART_SetConfig+0x1eb4>
 800b7d2:	2380      	movs	r3, #128	; 0x80
 800b7d4:	e012      	b.n	800b7fc <UART_SetConfig+0x1eb4>
 800b7d6:	2340      	movs	r3, #64	; 0x40
 800b7d8:	e010      	b.n	800b7fc <UART_SetConfig+0x1eb4>
 800b7da:	2320      	movs	r3, #32
 800b7dc:	e00e      	b.n	800b7fc <UART_SetConfig+0x1eb4>
 800b7de:	2310      	movs	r3, #16
 800b7e0:	e00c      	b.n	800b7fc <UART_SetConfig+0x1eb4>
 800b7e2:	230c      	movs	r3, #12
 800b7e4:	e00a      	b.n	800b7fc <UART_SetConfig+0x1eb4>
 800b7e6:	230a      	movs	r3, #10
 800b7e8:	e008      	b.n	800b7fc <UART_SetConfig+0x1eb4>
 800b7ea:	2308      	movs	r3, #8
 800b7ec:	e006      	b.n	800b7fc <UART_SetConfig+0x1eb4>
 800b7ee:	2306      	movs	r3, #6
 800b7f0:	e004      	b.n	800b7fc <UART_SetConfig+0x1eb4>
 800b7f2:	2304      	movs	r3, #4
 800b7f4:	e002      	b.n	800b7fc <UART_SetConfig+0x1eb4>
 800b7f6:	2302      	movs	r3, #2
 800b7f8:	e000      	b.n	800b7fc <UART_SetConfig+0x1eb4>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	fbb2 f2f3 	udiv	r2, r2, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	085b      	lsrs	r3, r3, #1
 800b806:	441a      	add	r2, r3
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b810:	b29b      	uxth	r3, r3
 800b812:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b814:	e1f2      	b.n	800bbfc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b816:	f107 030c 	add.w	r3, r7, #12
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7fc fc82 	bl	8008124 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b820:	693a      	ldr	r2, [r7, #16]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b826:	2b00      	cmp	r3, #0
 800b828:	d044      	beq.n	800b8b4 <UART_SetConfig+0x1f6c>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d03e      	beq.n	800b8b0 <UART_SetConfig+0x1f68>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b836:	2b02      	cmp	r3, #2
 800b838:	d038      	beq.n	800b8ac <UART_SetConfig+0x1f64>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83e:	2b03      	cmp	r3, #3
 800b840:	d032      	beq.n	800b8a8 <UART_SetConfig+0x1f60>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b846:	2b04      	cmp	r3, #4
 800b848:	d02c      	beq.n	800b8a4 <UART_SetConfig+0x1f5c>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84e:	2b05      	cmp	r3, #5
 800b850:	d026      	beq.n	800b8a0 <UART_SetConfig+0x1f58>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b856:	2b06      	cmp	r3, #6
 800b858:	d020      	beq.n	800b89c <UART_SetConfig+0x1f54>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85e:	2b07      	cmp	r3, #7
 800b860:	d01a      	beq.n	800b898 <UART_SetConfig+0x1f50>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b866:	2b08      	cmp	r3, #8
 800b868:	d014      	beq.n	800b894 <UART_SetConfig+0x1f4c>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86e:	2b09      	cmp	r3, #9
 800b870:	d00e      	beq.n	800b890 <UART_SetConfig+0x1f48>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b876:	2b0a      	cmp	r3, #10
 800b878:	d008      	beq.n	800b88c <UART_SetConfig+0x1f44>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87e:	2b0b      	cmp	r3, #11
 800b880:	d102      	bne.n	800b888 <UART_SetConfig+0x1f40>
 800b882:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b886:	e016      	b.n	800b8b6 <UART_SetConfig+0x1f6e>
 800b888:	2301      	movs	r3, #1
 800b88a:	e014      	b.n	800b8b6 <UART_SetConfig+0x1f6e>
 800b88c:	2380      	movs	r3, #128	; 0x80
 800b88e:	e012      	b.n	800b8b6 <UART_SetConfig+0x1f6e>
 800b890:	2340      	movs	r3, #64	; 0x40
 800b892:	e010      	b.n	800b8b6 <UART_SetConfig+0x1f6e>
 800b894:	2320      	movs	r3, #32
 800b896:	e00e      	b.n	800b8b6 <UART_SetConfig+0x1f6e>
 800b898:	2310      	movs	r3, #16
 800b89a:	e00c      	b.n	800b8b6 <UART_SetConfig+0x1f6e>
 800b89c:	230c      	movs	r3, #12
 800b89e:	e00a      	b.n	800b8b6 <UART_SetConfig+0x1f6e>
 800b8a0:	230a      	movs	r3, #10
 800b8a2:	e008      	b.n	800b8b6 <UART_SetConfig+0x1f6e>
 800b8a4:	2308      	movs	r3, #8
 800b8a6:	e006      	b.n	800b8b6 <UART_SetConfig+0x1f6e>
 800b8a8:	2306      	movs	r3, #6
 800b8aa:	e004      	b.n	800b8b6 <UART_SetConfig+0x1f6e>
 800b8ac:	2304      	movs	r3, #4
 800b8ae:	e002      	b.n	800b8b6 <UART_SetConfig+0x1f6e>
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	e000      	b.n	800b8b6 <UART_SetConfig+0x1f6e>
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	fbb2 f2f3 	udiv	r2, r2, r3
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	085b      	lsrs	r3, r3, #1
 800b8c0:	441a      	add	r2, r3
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8ce:	e195      	b.n	800bbfc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8d0:	4b87      	ldr	r3, [pc, #540]	; (800baf0 <UART_SetConfig+0x21a8>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f003 0320 	and.w	r3, r3, #32
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d05d      	beq.n	800b998 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8dc:	4b84      	ldr	r3, [pc, #528]	; (800baf0 <UART_SetConfig+0x21a8>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	08db      	lsrs	r3, r3, #3
 800b8e2:	f003 0303 	and.w	r3, r3, #3
 800b8e6:	4a83      	ldr	r2, [pc, #524]	; (800baf4 <UART_SetConfig+0x21ac>)
 800b8e8:	40da      	lsrs	r2, r3
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d044      	beq.n	800b97c <UART_SetConfig+0x2034>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d03e      	beq.n	800b978 <UART_SetConfig+0x2030>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	d038      	beq.n	800b974 <UART_SetConfig+0x202c>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b906:	2b03      	cmp	r3, #3
 800b908:	d032      	beq.n	800b970 <UART_SetConfig+0x2028>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90e:	2b04      	cmp	r3, #4
 800b910:	d02c      	beq.n	800b96c <UART_SetConfig+0x2024>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b916:	2b05      	cmp	r3, #5
 800b918:	d026      	beq.n	800b968 <UART_SetConfig+0x2020>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91e:	2b06      	cmp	r3, #6
 800b920:	d020      	beq.n	800b964 <UART_SetConfig+0x201c>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b926:	2b07      	cmp	r3, #7
 800b928:	d01a      	beq.n	800b960 <UART_SetConfig+0x2018>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92e:	2b08      	cmp	r3, #8
 800b930:	d014      	beq.n	800b95c <UART_SetConfig+0x2014>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b936:	2b09      	cmp	r3, #9
 800b938:	d00e      	beq.n	800b958 <UART_SetConfig+0x2010>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93e:	2b0a      	cmp	r3, #10
 800b940:	d008      	beq.n	800b954 <UART_SetConfig+0x200c>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b946:	2b0b      	cmp	r3, #11
 800b948:	d102      	bne.n	800b950 <UART_SetConfig+0x2008>
 800b94a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b94e:	e016      	b.n	800b97e <UART_SetConfig+0x2036>
 800b950:	2301      	movs	r3, #1
 800b952:	e014      	b.n	800b97e <UART_SetConfig+0x2036>
 800b954:	2380      	movs	r3, #128	; 0x80
 800b956:	e012      	b.n	800b97e <UART_SetConfig+0x2036>
 800b958:	2340      	movs	r3, #64	; 0x40
 800b95a:	e010      	b.n	800b97e <UART_SetConfig+0x2036>
 800b95c:	2320      	movs	r3, #32
 800b95e:	e00e      	b.n	800b97e <UART_SetConfig+0x2036>
 800b960:	2310      	movs	r3, #16
 800b962:	e00c      	b.n	800b97e <UART_SetConfig+0x2036>
 800b964:	230c      	movs	r3, #12
 800b966:	e00a      	b.n	800b97e <UART_SetConfig+0x2036>
 800b968:	230a      	movs	r3, #10
 800b96a:	e008      	b.n	800b97e <UART_SetConfig+0x2036>
 800b96c:	2308      	movs	r3, #8
 800b96e:	e006      	b.n	800b97e <UART_SetConfig+0x2036>
 800b970:	2306      	movs	r3, #6
 800b972:	e004      	b.n	800b97e <UART_SetConfig+0x2036>
 800b974:	2304      	movs	r3, #4
 800b976:	e002      	b.n	800b97e <UART_SetConfig+0x2036>
 800b978:	2302      	movs	r3, #2
 800b97a:	e000      	b.n	800b97e <UART_SetConfig+0x2036>
 800b97c:	2301      	movs	r3, #1
 800b97e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	085b      	lsrs	r3, r3, #1
 800b988:	441a      	add	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b992:	b29b      	uxth	r3, r3
 800b994:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b996:	e131      	b.n	800bbfc <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d043      	beq.n	800ba28 <UART_SetConfig+0x20e0>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d03d      	beq.n	800ba24 <UART_SetConfig+0x20dc>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ac:	2b02      	cmp	r3, #2
 800b9ae:	d037      	beq.n	800ba20 <UART_SetConfig+0x20d8>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	d031      	beq.n	800ba1c <UART_SetConfig+0x20d4>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9bc:	2b04      	cmp	r3, #4
 800b9be:	d02b      	beq.n	800ba18 <UART_SetConfig+0x20d0>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c4:	2b05      	cmp	r3, #5
 800b9c6:	d025      	beq.n	800ba14 <UART_SetConfig+0x20cc>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9cc:	2b06      	cmp	r3, #6
 800b9ce:	d01f      	beq.n	800ba10 <UART_SetConfig+0x20c8>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d4:	2b07      	cmp	r3, #7
 800b9d6:	d019      	beq.n	800ba0c <UART_SetConfig+0x20c4>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9dc:	2b08      	cmp	r3, #8
 800b9de:	d013      	beq.n	800ba08 <UART_SetConfig+0x20c0>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e4:	2b09      	cmp	r3, #9
 800b9e6:	d00d      	beq.n	800ba04 <UART_SetConfig+0x20bc>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ec:	2b0a      	cmp	r3, #10
 800b9ee:	d007      	beq.n	800ba00 <UART_SetConfig+0x20b8>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f4:	2b0b      	cmp	r3, #11
 800b9f6:	d101      	bne.n	800b9fc <UART_SetConfig+0x20b4>
 800b9f8:	4b3f      	ldr	r3, [pc, #252]	; (800baf8 <UART_SetConfig+0x21b0>)
 800b9fa:	e016      	b.n	800ba2a <UART_SetConfig+0x20e2>
 800b9fc:	4b3d      	ldr	r3, [pc, #244]	; (800baf4 <UART_SetConfig+0x21ac>)
 800b9fe:	e014      	b.n	800ba2a <UART_SetConfig+0x20e2>
 800ba00:	4b3e      	ldr	r3, [pc, #248]	; (800bafc <UART_SetConfig+0x21b4>)
 800ba02:	e012      	b.n	800ba2a <UART_SetConfig+0x20e2>
 800ba04:	4b3e      	ldr	r3, [pc, #248]	; (800bb00 <UART_SetConfig+0x21b8>)
 800ba06:	e010      	b.n	800ba2a <UART_SetConfig+0x20e2>
 800ba08:	4b3e      	ldr	r3, [pc, #248]	; (800bb04 <UART_SetConfig+0x21bc>)
 800ba0a:	e00e      	b.n	800ba2a <UART_SetConfig+0x20e2>
 800ba0c:	4b3e      	ldr	r3, [pc, #248]	; (800bb08 <UART_SetConfig+0x21c0>)
 800ba0e:	e00c      	b.n	800ba2a <UART_SetConfig+0x20e2>
 800ba10:	4b3e      	ldr	r3, [pc, #248]	; (800bb0c <UART_SetConfig+0x21c4>)
 800ba12:	e00a      	b.n	800ba2a <UART_SetConfig+0x20e2>
 800ba14:	4b3e      	ldr	r3, [pc, #248]	; (800bb10 <UART_SetConfig+0x21c8>)
 800ba16:	e008      	b.n	800ba2a <UART_SetConfig+0x20e2>
 800ba18:	4b3e      	ldr	r3, [pc, #248]	; (800bb14 <UART_SetConfig+0x21cc>)
 800ba1a:	e006      	b.n	800ba2a <UART_SetConfig+0x20e2>
 800ba1c:	4b3e      	ldr	r3, [pc, #248]	; (800bb18 <UART_SetConfig+0x21d0>)
 800ba1e:	e004      	b.n	800ba2a <UART_SetConfig+0x20e2>
 800ba20:	4b3e      	ldr	r3, [pc, #248]	; (800bb1c <UART_SetConfig+0x21d4>)
 800ba22:	e002      	b.n	800ba2a <UART_SetConfig+0x20e2>
 800ba24:	4b3e      	ldr	r3, [pc, #248]	; (800bb20 <UART_SetConfig+0x21d8>)
 800ba26:	e000      	b.n	800ba2a <UART_SetConfig+0x20e2>
 800ba28:	4b32      	ldr	r3, [pc, #200]	; (800baf4 <UART_SetConfig+0x21ac>)
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	6852      	ldr	r2, [r2, #4]
 800ba2e:	0852      	lsrs	r2, r2, #1
 800ba30:	441a      	add	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba3e:	e0dd      	b.n	800bbfc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d046      	beq.n	800bad6 <UART_SetConfig+0x218e>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d040      	beq.n	800bad2 <UART_SetConfig+0x218a>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	d03a      	beq.n	800bace <UART_SetConfig+0x2186>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba5c:	2b03      	cmp	r3, #3
 800ba5e:	d034      	beq.n	800baca <UART_SetConfig+0x2182>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba64:	2b04      	cmp	r3, #4
 800ba66:	d02e      	beq.n	800bac6 <UART_SetConfig+0x217e>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6c:	2b05      	cmp	r3, #5
 800ba6e:	d028      	beq.n	800bac2 <UART_SetConfig+0x217a>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba74:	2b06      	cmp	r3, #6
 800ba76:	d022      	beq.n	800babe <UART_SetConfig+0x2176>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7c:	2b07      	cmp	r3, #7
 800ba7e:	d01c      	beq.n	800baba <UART_SetConfig+0x2172>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba84:	2b08      	cmp	r3, #8
 800ba86:	d016      	beq.n	800bab6 <UART_SetConfig+0x216e>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8c:	2b09      	cmp	r3, #9
 800ba8e:	d00f      	beq.n	800bab0 <UART_SetConfig+0x2168>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba94:	2b0a      	cmp	r3, #10
 800ba96:	d008      	beq.n	800baaa <UART_SetConfig+0x2162>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9c:	2b0b      	cmp	r3, #11
 800ba9e:	d102      	bne.n	800baa6 <UART_SetConfig+0x215e>
 800baa0:	f643 5309 	movw	r3, #15625	; 0x3d09
 800baa4:	e018      	b.n	800bad8 <UART_SetConfig+0x2190>
 800baa6:	4b18      	ldr	r3, [pc, #96]	; (800bb08 <UART_SetConfig+0x21c0>)
 800baa8:	e016      	b.n	800bad8 <UART_SetConfig+0x2190>
 800baaa:	f647 2312 	movw	r3, #31250	; 0x7a12
 800baae:	e013      	b.n	800bad8 <UART_SetConfig+0x2190>
 800bab0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800bab4:	e010      	b.n	800bad8 <UART_SetConfig+0x2190>
 800bab6:	4b1b      	ldr	r3, [pc, #108]	; (800bb24 <UART_SetConfig+0x21dc>)
 800bab8:	e00e      	b.n	800bad8 <UART_SetConfig+0x2190>
 800baba:	4b0f      	ldr	r3, [pc, #60]	; (800baf8 <UART_SetConfig+0x21b0>)
 800babc:	e00c      	b.n	800bad8 <UART_SetConfig+0x2190>
 800babe:	4b1a      	ldr	r3, [pc, #104]	; (800bb28 <UART_SetConfig+0x21e0>)
 800bac0:	e00a      	b.n	800bad8 <UART_SetConfig+0x2190>
 800bac2:	4b1a      	ldr	r3, [pc, #104]	; (800bb2c <UART_SetConfig+0x21e4>)
 800bac4:	e008      	b.n	800bad8 <UART_SetConfig+0x2190>
 800bac6:	4b0d      	ldr	r3, [pc, #52]	; (800bafc <UART_SetConfig+0x21b4>)
 800bac8:	e006      	b.n	800bad8 <UART_SetConfig+0x2190>
 800baca:	4b19      	ldr	r3, [pc, #100]	; (800bb30 <UART_SetConfig+0x21e8>)
 800bacc:	e004      	b.n	800bad8 <UART_SetConfig+0x2190>
 800bace:	4b0c      	ldr	r3, [pc, #48]	; (800bb00 <UART_SetConfig+0x21b8>)
 800bad0:	e002      	b.n	800bad8 <UART_SetConfig+0x2190>
 800bad2:	4b0c      	ldr	r3, [pc, #48]	; (800bb04 <UART_SetConfig+0x21bc>)
 800bad4:	e000      	b.n	800bad8 <UART_SetConfig+0x2190>
 800bad6:	4b0c      	ldr	r3, [pc, #48]	; (800bb08 <UART_SetConfig+0x21c0>)
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	6852      	ldr	r2, [r2, #4]
 800badc:	0852      	lsrs	r2, r2, #1
 800bade:	441a      	add	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bae8:	b29b      	uxth	r3, r3
 800baea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800baec:	e086      	b.n	800bbfc <UART_SetConfig+0x22b4>
 800baee:	bf00      	nop
 800baf0:	58024400 	.word	0x58024400
 800baf4:	03d09000 	.word	0x03d09000
 800baf8:	0003d090 	.word	0x0003d090
 800bafc:	0007a120 	.word	0x0007a120
 800bb00:	000f4240 	.word	0x000f4240
 800bb04:	001e8480 	.word	0x001e8480
 800bb08:	003d0900 	.word	0x003d0900
 800bb0c:	00516155 	.word	0x00516155
 800bb10:	0061a800 	.word	0x0061a800
 800bb14:	007a1200 	.word	0x007a1200
 800bb18:	00a2c2aa 	.word	0x00a2c2aa
 800bb1c:	00f42400 	.word	0x00f42400
 800bb20:	01e84800 	.word	0x01e84800
 800bb24:	0001e848 	.word	0x0001e848
 800bb28:	00051615 	.word	0x00051615
 800bb2c:	00061a80 	.word	0x00061a80
 800bb30:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d04e      	beq.n	800bbda <UART_SetConfig+0x2292>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d047      	beq.n	800bbd4 <UART_SetConfig+0x228c>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb48:	2b02      	cmp	r3, #2
 800bb4a:	d040      	beq.n	800bbce <UART_SetConfig+0x2286>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb50:	2b03      	cmp	r3, #3
 800bb52:	d039      	beq.n	800bbc8 <UART_SetConfig+0x2280>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb58:	2b04      	cmp	r3, #4
 800bb5a:	d032      	beq.n	800bbc2 <UART_SetConfig+0x227a>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb60:	2b05      	cmp	r3, #5
 800bb62:	d02b      	beq.n	800bbbc <UART_SetConfig+0x2274>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb68:	2b06      	cmp	r3, #6
 800bb6a:	d024      	beq.n	800bbb6 <UART_SetConfig+0x226e>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb70:	2b07      	cmp	r3, #7
 800bb72:	d01d      	beq.n	800bbb0 <UART_SetConfig+0x2268>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb78:	2b08      	cmp	r3, #8
 800bb7a:	d016      	beq.n	800bbaa <UART_SetConfig+0x2262>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb80:	2b09      	cmp	r3, #9
 800bb82:	d00f      	beq.n	800bba4 <UART_SetConfig+0x225c>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb88:	2b0a      	cmp	r3, #10
 800bb8a:	d008      	beq.n	800bb9e <UART_SetConfig+0x2256>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb90:	2b0b      	cmp	r3, #11
 800bb92:	d101      	bne.n	800bb98 <UART_SetConfig+0x2250>
 800bb94:	2380      	movs	r3, #128	; 0x80
 800bb96:	e022      	b.n	800bbde <UART_SetConfig+0x2296>
 800bb98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb9c:	e01f      	b.n	800bbde <UART_SetConfig+0x2296>
 800bb9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bba2:	e01c      	b.n	800bbde <UART_SetConfig+0x2296>
 800bba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bba8:	e019      	b.n	800bbde <UART_SetConfig+0x2296>
 800bbaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbae:	e016      	b.n	800bbde <UART_SetConfig+0x2296>
 800bbb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bbb4:	e013      	b.n	800bbde <UART_SetConfig+0x2296>
 800bbb6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800bbba:	e010      	b.n	800bbde <UART_SetConfig+0x2296>
 800bbbc:	f640 43cc 	movw	r3, #3276	; 0xccc
 800bbc0:	e00d      	b.n	800bbde <UART_SetConfig+0x2296>
 800bbc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbc6:	e00a      	b.n	800bbde <UART_SetConfig+0x2296>
 800bbc8:	f241 5355 	movw	r3, #5461	; 0x1555
 800bbcc:	e007      	b.n	800bbde <UART_SetConfig+0x2296>
 800bbce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bbd2:	e004      	b.n	800bbde <UART_SetConfig+0x2296>
 800bbd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bbd8:	e001      	b.n	800bbde <UART_SetConfig+0x2296>
 800bbda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	6852      	ldr	r2, [r2, #4]
 800bbe2:	0852      	lsrs	r2, r2, #1
 800bbe4:	441a      	add	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bbf2:	e003      	b.n	800bbfc <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800bbfa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bbfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbfe:	2b0f      	cmp	r3, #15
 800bc00:	d908      	bls.n	800bc14 <UART_SetConfig+0x22cc>
 800bc02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc08:	d204      	bcs.n	800bc14 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc10:	60da      	str	r2, [r3, #12]
 800bc12:	e002      	b.n	800bc1a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800bc14:	2301      	movs	r3, #1
 800bc16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2201      	movs	r2, #1
 800bc26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bc36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3740      	adds	r7, #64	; 0x40
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800bc44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc50:	f003 0301 	and.w	r3, r3, #1
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d00a      	beq.n	800bc6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	430a      	orrs	r2, r1
 800bc6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc72:	f003 0302 	and.w	r3, r3, #2
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00a      	beq.n	800bc90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	430a      	orrs	r2, r1
 800bc8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc94:	f003 0304 	and.w	r3, r3, #4
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d00a      	beq.n	800bcb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	430a      	orrs	r2, r1
 800bcb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb6:	f003 0308 	and.w	r3, r3, #8
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00a      	beq.n	800bcd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	430a      	orrs	r2, r1
 800bcd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcd8:	f003 0310 	and.w	r3, r3, #16
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00a      	beq.n	800bcf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	430a      	orrs	r2, r1
 800bcf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcfa:	f003 0320 	and.w	r3, r3, #32
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d00a      	beq.n	800bd18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	430a      	orrs	r2, r1
 800bd16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d01a      	beq.n	800bd5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	430a      	orrs	r2, r1
 800bd38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd42:	d10a      	bne.n	800bd5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	430a      	orrs	r2, r1
 800bd58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00a      	beq.n	800bd7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	430a      	orrs	r2, r1
 800bd7a:	605a      	str	r2, [r3, #4]
  }
}
 800bd7c:	bf00      	nop
 800bd7e:	370c      	adds	r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b086      	sub	sp, #24
 800bd8c:	af02      	add	r7, sp, #8
 800bd8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bd98:	f7f6 f8ea 	bl	8001f70 <HAL_GetTick>
 800bd9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f003 0308 	and.w	r3, r3, #8
 800bda8:	2b08      	cmp	r3, #8
 800bdaa:	d10e      	bne.n	800bdca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bdac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bdb0:	9300      	str	r3, [sp, #0]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 f82c 	bl	800be18 <UART_WaitOnFlagUntilTimeout>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d001      	beq.n	800bdca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	e022      	b.n	800be10 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f003 0304 	and.w	r3, r3, #4
 800bdd4:	2b04      	cmp	r3, #4
 800bdd6:	d10e      	bne.n	800bdf6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bdd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bddc:	9300      	str	r3, [sp, #0]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 f816 	bl	800be18 <UART_WaitOnFlagUntilTimeout>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d001      	beq.n	800bdf6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdf2:	2303      	movs	r3, #3
 800bdf4:	e00c      	b.n	800be10 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2220      	movs	r2, #32
 800bdfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2220      	movs	r2, #32
 800be02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800be0e:	2300      	movs	r3, #0
}
 800be10:	4618      	mov	r0, r3
 800be12:	3710      	adds	r7, #16
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	603b      	str	r3, [r7, #0]
 800be24:	4613      	mov	r3, r2
 800be26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be28:	e062      	b.n	800bef0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be30:	d05e      	beq.n	800bef0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be32:	f7f6 f89d 	bl	8001f70 <HAL_GetTick>
 800be36:	4602      	mov	r2, r0
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	1ad3      	subs	r3, r2, r3
 800be3c:	69ba      	ldr	r2, [r7, #24]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d302      	bcc.n	800be48 <UART_WaitOnFlagUntilTimeout+0x30>
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d11d      	bne.n	800be84 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800be56:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	689a      	ldr	r2, [r3, #8]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f022 0201 	bic.w	r2, r2, #1
 800be66:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2220      	movs	r2, #32
 800be6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2220      	movs	r2, #32
 800be74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800be80:	2303      	movs	r3, #3
 800be82:	e045      	b.n	800bf10 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f003 0304 	and.w	r3, r3, #4
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d02e      	beq.n	800bef0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	69db      	ldr	r3, [r3, #28]
 800be98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bea0:	d126      	bne.n	800bef0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800beaa:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	681a      	ldr	r2, [r3, #0]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800beba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	689a      	ldr	r2, [r3, #8]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f022 0201 	bic.w	r2, r2, #1
 800beca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2220      	movs	r2, #32
 800bed0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2220      	movs	r2, #32
 800bed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2220      	movs	r2, #32
 800bee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2200      	movs	r2, #0
 800bee8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800beec:	2303      	movs	r3, #3
 800beee:	e00f      	b.n	800bf10 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	69da      	ldr	r2, [r3, #28]
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	4013      	ands	r3, r2
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	429a      	cmp	r2, r3
 800befe:	bf0c      	ite	eq
 800bf00:	2301      	moveq	r3, #1
 800bf02:	2300      	movne	r3, #0
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	461a      	mov	r2, r3
 800bf08:	79fb      	ldrb	r3, [r7, #7]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d08d      	beq.n	800be2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bf0e:	2300      	movs	r3, #0
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bf2e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	689a      	ldr	r2, [r3, #8]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800bf3e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2220      	movs	r2, #32
 800bf44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800bf48:	bf00      	nop
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bf6a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	6899      	ldr	r1, [r3, #8]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	4b08      	ldr	r3, [pc, #32]	; (800bf98 <UART_EndRxTransfer+0x44>)
 800bf78:	400b      	ands	r3, r1
 800bf7a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2220      	movs	r2, #32
 800bf80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800bf8a:	bf00      	nop
 800bf8c:	370c      	adds	r7, #12
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr
 800bf96:	bf00      	nop
 800bf98:	effffffe 	.word	0xeffffffe

0800bf9c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	69db      	ldr	r3, [r3, #28]
 800bfae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfb2:	d01f      	beq.n	800bff4 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bfca:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	689a      	ldr	r2, [r3, #8]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f022 0201 	bic.w	r2, r2, #1
 800bfda:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	689a      	ldr	r2, [r3, #8]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bfea:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2220      	movs	r2, #32
 800bff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f7f4 fca5 	bl	8000944 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bffa:	bf00      	nop
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b084      	sub	sp, #16
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c00e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800c010:	68f8      	ldr	r0, [r7, #12]
 800c012:	f7fd fc83 	bl	800991c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c016:	bf00      	nop
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b086      	sub	sp, #24
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c02a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c032:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c03a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c046:	2b80      	cmp	r3, #128	; 0x80
 800c048:	d109      	bne.n	800c05e <UART_DMAError+0x40>
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	2b21      	cmp	r3, #33	; 0x21
 800c04e:	d106      	bne.n	800c05e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	2200      	movs	r2, #0
 800c054:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c058:	6978      	ldr	r0, [r7, #20]
 800c05a:	f7ff ff5d 	bl	800bf18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c068:	2b40      	cmp	r3, #64	; 0x40
 800c06a:	d109      	bne.n	800c080 <UART_DMAError+0x62>
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2b22      	cmp	r3, #34	; 0x22
 800c070:	d106      	bne.n	800c080 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	2200      	movs	r2, #0
 800c076:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c07a:	6978      	ldr	r0, [r7, #20]
 800c07c:	f7ff ff6a 	bl	800bf54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c086:	f043 0210 	orr.w	r2, r3, #16
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c090:	6978      	ldr	r0, [r7, #20]
 800c092:	f7fd fc4d 	bl	8009930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c096:	bf00      	nop
 800c098:	3718      	adds	r7, #24
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b084      	sub	sp, #16
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	f7fd fc37 	bl	8009930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0c2:	bf00      	nop
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}

0800c0ca <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c0ca:	b480      	push	{r7}
 800c0cc:	b083      	sub	sp, #12
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0d8:	2b21      	cmp	r3, #33	; 0x21
 800c0da:	d12a      	bne.n	800c132 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d110      	bne.n	800c10a <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c0f6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c106:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c108:	e013      	b.n	800c132 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c10e:	781a      	ldrb	r2, [r3, #0]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c11a:	1c5a      	adds	r2, r3, #1
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c126:	b29b      	uxth	r3, r3
 800c128:	3b01      	subs	r3, #1
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c132:	bf00      	nop
 800c134:	370c      	adds	r7, #12
 800c136:	46bd      	mov	sp, r7
 800c138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13c:	4770      	bx	lr

0800c13e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c13e:	b480      	push	{r7}
 800c140:	b085      	sub	sp, #20
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c14c:	2b21      	cmp	r3, #33	; 0x21
 800c14e:	d12f      	bne.n	800c1b0 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c156:	b29b      	uxth	r3, r3
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d110      	bne.n	800c17e <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	681a      	ldr	r2, [r3, #0]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c16a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c17a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c17c:	e018      	b.n	800c1b0 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c182:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	881b      	ldrh	r3, [r3, #0]
 800c188:	461a      	mov	r2, r3
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c192:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c198:	1c9a      	adds	r2, r3, #2
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c1b0:	bf00      	nop
 800c1b2:	3714      	adds	r7, #20
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1ca:	2b21      	cmp	r3, #33	; 0x21
 800c1cc:	d13d      	bne.n	800c24a <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1d4:	81fb      	strh	r3, [r7, #14]
 800c1d6:	e035      	b.n	800c244 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d111      	bne.n	800c208 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	689a      	ldr	r2, [r3, #8]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c1f2:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c202:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c204:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c206:	e020      	b.n	800c24a <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	69db      	ldr	r3, [r3, #28]
 800c20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c212:	2b00      	cmp	r3, #0
 800c214:	d013      	beq.n	800c23e <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c21a:	781a      	ldrb	r2, [r3, #0]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c226:	1c5a      	adds	r2, r3, #1
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c232:	b29b      	uxth	r3, r3
 800c234:	3b01      	subs	r3, #1
 800c236:	b29a      	uxth	r2, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c23e:	89fb      	ldrh	r3, [r7, #14]
 800c240:	3b01      	subs	r3, #1
 800c242:	81fb      	strh	r3, [r7, #14]
 800c244:	89fb      	ldrh	r3, [r7, #14]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1c6      	bne.n	800c1d8 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800c24a:	bf00      	nop
 800c24c:	3714      	adds	r7, #20
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr

0800c256 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c256:	b480      	push	{r7}
 800c258:	b085      	sub	sp, #20
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c264:	2b21      	cmp	r3, #33	; 0x21
 800c266:	d142      	bne.n	800c2ee <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c26e:	81fb      	strh	r3, [r7, #14]
 800c270:	e03a      	b.n	800c2e8 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c278:	b29b      	uxth	r3, r3
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d111      	bne.n	800c2a2 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	689a      	ldr	r2, [r3, #8]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c28c:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	681a      	ldr	r2, [r3, #0]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c29c:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c29e:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c2a0:	e025      	b.n	800c2ee <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	69db      	ldr	r3, [r3, #28]
 800c2a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d018      	beq.n	800c2e2 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2b4:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	881b      	ldrh	r3, [r3, #0]
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2c4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2ca:	1c9a      	adds	r2, r3, #2
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	3b01      	subs	r3, #1
 800c2da:	b29a      	uxth	r2, r3
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c2e2:	89fb      	ldrh	r3, [r7, #14]
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	81fb      	strh	r3, [r7, #14]
 800c2e8:	89fb      	ldrh	r3, [r7, #14]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d1c1      	bne.n	800c272 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800c2ee:	bf00      	nop
 800c2f0:	3714      	adds	r7, #20
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f8:	4770      	bx	lr

0800c2fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b082      	sub	sp, #8
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c310:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2220      	movs	r2, #32
 800c316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f7f4 facd 	bl	80008c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c326:	bf00      	nop
 800c328:	3708      	adds	r7, #8
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c32e:	b580      	push	{r7, lr}
 800c330:	b084      	sub	sp, #16
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c33c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c344:	2b22      	cmp	r3, #34	; 0x22
 800c346:	d13b      	bne.n	800c3c0 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c34e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c350:	89bb      	ldrh	r3, [r7, #12]
 800c352:	b2d9      	uxtb	r1, r3
 800c354:	89fb      	ldrh	r3, [r7, #14]
 800c356:	b2da      	uxtb	r2, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c35c:	400a      	ands	r2, r1
 800c35e:	b2d2      	uxtb	r2, r2
 800c360:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c366:	1c5a      	adds	r2, r3, #1
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c372:	b29b      	uxth	r3, r3
 800c374:	3b01      	subs	r3, #1
 800c376:	b29a      	uxth	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c384:	b29b      	uxth	r3, r3
 800c386:	2b00      	cmp	r3, #0
 800c388:	d122      	bne.n	800c3d0 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c398:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	689a      	ldr	r2, [r3, #8]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f022 0201 	bic.w	r2, r2, #1
 800c3a8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2220      	movs	r2, #32
 800c3ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f7f4 fac3 	bl	8000944 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c3be:	e007      	b.n	800c3d0 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	699a      	ldr	r2, [r3, #24]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f042 0208 	orr.w	r2, r2, #8
 800c3ce:	619a      	str	r2, [r3, #24]
}
 800c3d0:	bf00      	nop
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c3e6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3ee:	2b22      	cmp	r3, #34	; 0x22
 800c3f0:	d13b      	bne.n	800c46a <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3fe:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c400:	89ba      	ldrh	r2, [r7, #12]
 800c402:	89fb      	ldrh	r3, [r7, #14]
 800c404:	4013      	ands	r3, r2
 800c406:	b29a      	uxth	r2, r3
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c410:	1c9a      	adds	r2, r3, #2
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	3b01      	subs	r3, #1
 800c420:	b29a      	uxth	r2, r3
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c42e:	b29b      	uxth	r3, r3
 800c430:	2b00      	cmp	r3, #0
 800c432:	d122      	bne.n	800c47a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c442:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	689a      	ldr	r2, [r3, #8]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f022 0201 	bic.w	r2, r2, #1
 800c452:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2220      	movs	r2, #32
 800c458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f7f4 fa6e 	bl	8000944 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c468:	e007      	b.n	800c47a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	699a      	ldr	r2, [r3, #24]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f042 0208 	orr.w	r2, r2, #8
 800c478:	619a      	str	r2, [r3, #24]
}
 800c47a:	bf00      	nop
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
	...

0800c484 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c492:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c49a:	2b22      	cmp	r3, #34	; 0x22
 800c49c:	d166      	bne.n	800c56c <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c4a4:	81fb      	strh	r3, [r7, #14]
 800c4a6:	e03d      	b.n	800c524 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ae:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c4b0:	893b      	ldrh	r3, [r7, #8]
 800c4b2:	b2d9      	uxtb	r1, r3
 800c4b4:	89bb      	ldrh	r3, [r7, #12]
 800c4b6:	b2da      	uxtb	r2, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4bc:	400a      	ands	r2, r1
 800c4be:	b2d2      	uxtb	r2, r2
 800c4c0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4c6:	1c5a      	adds	r2, r3, #1
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d119      	bne.n	800c51e <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c4f8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	6899      	ldr	r1, [r3, #8]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	4b1f      	ldr	r3, [pc, #124]	; (800c584 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800c506:	400b      	ands	r3, r1
 800c508:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2220      	movs	r2, #32
 800c50e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f7f4 fa13 	bl	8000944 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c51e:	89fb      	ldrh	r3, [r7, #14]
 800c520:	3b01      	subs	r3, #1
 800c522:	81fb      	strh	r3, [r7, #14]
 800c524:	89fb      	ldrh	r3, [r7, #14]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1be      	bne.n	800c4a8 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c530:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c532:	897b      	ldrh	r3, [r7, #10]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d021      	beq.n	800c57c <UART_RxISR_8BIT_FIFOEN+0xf8>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c53e:	897a      	ldrh	r2, [r7, #10]
 800c540:	429a      	cmp	r2, r3
 800c542:	d21b      	bcs.n	800c57c <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	689a      	ldr	r2, [r3, #8]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c552:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4a0c      	ldr	r2, [pc, #48]	; (800c588 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800c558:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f042 0220 	orr.w	r2, r2, #32
 800c568:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c56a:	e007      	b.n	800c57c <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	699a      	ldr	r2, [r3, #24]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f042 0208 	orr.w	r2, r2, #8
 800c57a:	619a      	str	r2, [r3, #24]
}
 800c57c:	bf00      	nop
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	effffffe 	.word	0xeffffffe
 800c588:	0800c32f 	.word	0x0800c32f

0800c58c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b086      	sub	sp, #24
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c59a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5a2:	2b22      	cmp	r3, #34	; 0x22
 800c5a4:	d166      	bne.n	800c674 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c5ac:	82fb      	strh	r3, [r7, #22]
 800c5ae:	e03d      	b.n	800c62c <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b6:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5bc:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800c5be:	8a3a      	ldrh	r2, [r7, #16]
 800c5c0:	8abb      	ldrh	r3, [r7, #20]
 800c5c2:	4013      	ands	r3, r2
 800c5c4:	b29a      	uxth	r2, r3
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5ce:	1c9a      	adds	r2, r3, #2
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d119      	bne.n	800c626 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c600:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	6899      	ldr	r1, [r3, #8]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	4b1f      	ldr	r3, [pc, #124]	; (800c68c <UART_RxISR_16BIT_FIFOEN+0x100>)
 800c60e:	400b      	ands	r3, r1
 800c610:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2220      	movs	r2, #32
 800c616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f7f4 f98f 	bl	8000944 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c626:	8afb      	ldrh	r3, [r7, #22]
 800c628:	3b01      	subs	r3, #1
 800c62a:	82fb      	strh	r3, [r7, #22]
 800c62c:	8afb      	ldrh	r3, [r7, #22]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d1be      	bne.n	800c5b0 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c638:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c63a:	8a7b      	ldrh	r3, [r7, #18]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d021      	beq.n	800c684 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c646:	8a7a      	ldrh	r2, [r7, #18]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d21b      	bcs.n	800c684 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	689a      	ldr	r2, [r3, #8]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c65a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	4a0c      	ldr	r2, [pc, #48]	; (800c690 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800c660:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f042 0220 	orr.w	r2, r2, #32
 800c670:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c672:	e007      	b.n	800c684 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	699a      	ldr	r2, [r3, #24]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f042 0208 	orr.w	r2, r2, #8
 800c682:	619a      	str	r2, [r3, #24]
}
 800c684:	bf00      	nop
 800c686:	3718      	adds	r7, #24
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	effffffe 	.word	0xeffffffe
 800c690:	0800c3d9 	.word	0x0800c3d9

0800c694 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c69c:	bf00      	nop
 800c69e:	370c      	adds	r7, #12
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b083      	sub	sp, #12
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c6b0:	bf00      	nop
 800c6b2:	370c      	adds	r7, #12
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c6c4:	bf00      	nop
 800c6c6:	370c      	adds	r7, #12
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr

0800c6d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b085      	sub	sp, #20
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d101      	bne.n	800c6e6 <HAL_UARTEx_DisableFifoMode+0x16>
 800c6e2:	2302      	movs	r3, #2
 800c6e4:	e027      	b.n	800c736 <HAL_UARTEx_DisableFifoMode+0x66>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2224      	movs	r2, #36	; 0x24
 800c6f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f022 0201 	bic.w	r2, r2, #1
 800c70c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c714:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2200      	movs	r2, #0
 800c71a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	68fa      	ldr	r2, [r7, #12]
 800c722:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2220      	movs	r2, #32
 800c728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2200      	movs	r2, #0
 800c730:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c734:	2300      	movs	r3, #0
}
 800c736:	4618      	mov	r0, r3
 800c738:	3714      	adds	r7, #20
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr

0800c742 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b084      	sub	sp, #16
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
 800c74a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c752:	2b01      	cmp	r3, #1
 800c754:	d101      	bne.n	800c75a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c756:	2302      	movs	r3, #2
 800c758:	e02d      	b.n	800c7b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2201      	movs	r2, #1
 800c75e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2224      	movs	r2, #36	; 0x24
 800c766:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f022 0201 	bic.w	r2, r2, #1
 800c780:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	683a      	ldr	r2, [r7, #0]
 800c792:	430a      	orrs	r2, r1
 800c794:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 f850 	bl	800c83c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2220      	movs	r2, #32
 800c7a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}

0800c7be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b084      	sub	sp, #16
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
 800c7c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	d101      	bne.n	800c7d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c7d2:	2302      	movs	r3, #2
 800c7d4:	e02d      	b.n	800c832 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2224      	movs	r2, #36	; 0x24
 800c7e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f022 0201 	bic.w	r2, r2, #1
 800c7fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	683a      	ldr	r2, [r7, #0]
 800c80e:	430a      	orrs	r2, r1
 800c810:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 f812 	bl	800c83c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2220      	movs	r2, #32
 800c824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c830:	2300      	movs	r3, #0
}
 800c832:	4618      	mov	r0, r3
 800c834:	3710      	adds	r7, #16
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
	...

0800c83c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b089      	sub	sp, #36	; 0x24
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c844:	4a2f      	ldr	r2, [pc, #188]	; (800c904 <UARTEx_SetNbDataToProcess+0xc8>)
 800c846:	f107 0314 	add.w	r3, r7, #20
 800c84a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c84e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c852:	4a2d      	ldr	r2, [pc, #180]	; (800c908 <UARTEx_SetNbDataToProcess+0xcc>)
 800c854:	f107 030c 	add.w	r3, r7, #12
 800c858:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c85c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c864:	2b00      	cmp	r3, #0
 800c866:	d108      	bne.n	800c87a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2201      	movs	r2, #1
 800c86c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2201      	movs	r2, #1
 800c874:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c878:	e03d      	b.n	800c8f6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c87a:	2308      	movs	r3, #8
 800c87c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c87e:	2308      	movs	r3, #8
 800c880:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	0e5b      	lsrs	r3, r3, #25
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	f003 0307 	and.w	r3, r3, #7
 800c890:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	0f5b      	lsrs	r3, r3, #29
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	f003 0307 	and.w	r3, r3, #7
 800c8a0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c8a2:	7fbb      	ldrb	r3, [r7, #30]
 800c8a4:	7f3a      	ldrb	r2, [r7, #28]
 800c8a6:	f107 0120 	add.w	r1, r7, #32
 800c8aa:	440a      	add	r2, r1
 800c8ac:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c8b0:	fb02 f303 	mul.w	r3, r2, r3
 800c8b4:	7f3a      	ldrb	r2, [r7, #28]
 800c8b6:	f107 0120 	add.w	r1, r7, #32
 800c8ba:	440a      	add	r2, r1
 800c8bc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c8c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8c4:	b29a      	uxth	r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c8cc:	7ffb      	ldrb	r3, [r7, #31]
 800c8ce:	7f7a      	ldrb	r2, [r7, #29]
 800c8d0:	f107 0120 	add.w	r1, r7, #32
 800c8d4:	440a      	add	r2, r1
 800c8d6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c8da:	fb02 f303 	mul.w	r3, r2, r3
 800c8de:	7f7a      	ldrb	r2, [r7, #29]
 800c8e0:	f107 0120 	add.w	r1, r7, #32
 800c8e4:	440a      	add	r2, r1
 800c8e6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c8ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8ee:	b29a      	uxth	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c8f6:	bf00      	nop
 800c8f8:	3724      	adds	r7, #36	; 0x24
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	0800c97c 	.word	0x0800c97c
 800c908:	0800c984 	.word	0x0800c984

0800c90c <__libc_init_array>:
 800c90c:	b570      	push	{r4, r5, r6, lr}
 800c90e:	4e0d      	ldr	r6, [pc, #52]	; (800c944 <__libc_init_array+0x38>)
 800c910:	4c0d      	ldr	r4, [pc, #52]	; (800c948 <__libc_init_array+0x3c>)
 800c912:	1ba4      	subs	r4, r4, r6
 800c914:	10a4      	asrs	r4, r4, #2
 800c916:	2500      	movs	r5, #0
 800c918:	42a5      	cmp	r5, r4
 800c91a:	d109      	bne.n	800c930 <__libc_init_array+0x24>
 800c91c:	4e0b      	ldr	r6, [pc, #44]	; (800c94c <__libc_init_array+0x40>)
 800c91e:	4c0c      	ldr	r4, [pc, #48]	; (800c950 <__libc_init_array+0x44>)
 800c920:	f000 f820 	bl	800c964 <_init>
 800c924:	1ba4      	subs	r4, r4, r6
 800c926:	10a4      	asrs	r4, r4, #2
 800c928:	2500      	movs	r5, #0
 800c92a:	42a5      	cmp	r5, r4
 800c92c:	d105      	bne.n	800c93a <__libc_init_array+0x2e>
 800c92e:	bd70      	pop	{r4, r5, r6, pc}
 800c930:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c934:	4798      	blx	r3
 800c936:	3501      	adds	r5, #1
 800c938:	e7ee      	b.n	800c918 <__libc_init_array+0xc>
 800c93a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c93e:	4798      	blx	r3
 800c940:	3501      	adds	r5, #1
 800c942:	e7f2      	b.n	800c92a <__libc_init_array+0x1e>
 800c944:	0800c9ac 	.word	0x0800c9ac
 800c948:	0800c9ac 	.word	0x0800c9ac
 800c94c:	0800c9ac 	.word	0x0800c9ac
 800c950:	0800c9b0 	.word	0x0800c9b0

0800c954 <memset>:
 800c954:	4402      	add	r2, r0
 800c956:	4603      	mov	r3, r0
 800c958:	4293      	cmp	r3, r2
 800c95a:	d100      	bne.n	800c95e <memset+0xa>
 800c95c:	4770      	bx	lr
 800c95e:	f803 1b01 	strb.w	r1, [r3], #1
 800c962:	e7f9      	b.n	800c958 <memset+0x4>

0800c964 <_init>:
 800c964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c966:	bf00      	nop
 800c968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c96a:	bc08      	pop	{r3}
 800c96c:	469e      	mov	lr, r3
 800c96e:	4770      	bx	lr

0800c970 <_fini>:
 800c970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c972:	bf00      	nop
 800c974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c976:	bc08      	pop	{r3}
 800c978:	469e      	mov	lr, r3
 800c97a:	4770      	bx	lr
