
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd24  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0800dfc0  0800dfc0  0001dfc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e208  0800e208  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e208  0800e208  0001e208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e210  0800e210  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e210  0800e210  0001e210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e214  0800e214  0001e214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  24000000  0800e218  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b24  240000b8  0800e2d0  000200b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000bdc  0800e2d0  00020bdc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec19  00000000  00000000  000200e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c73  00000000  00000000  0003ecff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c0  00000000  00000000  00041978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d0  00000000  00000000  00042e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000383bd  00000000  00000000  00044208  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011182  00000000  00000000  0007c5c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001732e3  00000000  00000000  0008d747  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00200a2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c00  00000000  00000000  00200aa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000b8 	.word	0x240000b8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800dfa4 	.word	0x0800dfa4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000bc 	.word	0x240000bc
 80002d4:	0800dfa4 	.word	0x0800dfa4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayUs_Init+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <delayUs_Init+0x38>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <delayUs_Init+0x38>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delayUs_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delayUs_Init+0x3c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <delayUs_Init+0x3c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
    }
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000

08000618 <delayUs>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void delayUs(uint32_t us) // microseconds
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <delayUs+0x40>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <delayUs+0x44>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <delayUs+0x48>)
 800062c:	fba2 2303 	umull	r2, r3, r2, r3
 8000630:	0c9a      	lsrs	r2, r3, #18
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	fb02 f303 	mul.w	r3, r2, r3
 8000638:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 800063a:	bf00      	nop
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <delayUs+0x40>)
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	429a      	cmp	r2, r3
 8000648:	d8f8      	bhi.n	800063c <delayUs+0x24>
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e0001000 	.word	0xe0001000
 800065c:	24000040 	.word	0x24000040
 8000660:	431bde83 	.word	0x431bde83

08000664 <peripheralUART_Init>:
void zmanualDeinit(void);
void zmanualInit(void);
////////////////////////////////////////////////////////////////
#ifdef SPINAL_CORD_MODE_ONEWAY
void peripheralUART_Init()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	spinalCordTxPacket[0] = 0xAA;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <peripheralUART_Init+0x44>)
 800066a:	22aa      	movs	r2, #170	; 0xaa
 800066c:	701a      	strb	r2, [r3, #0]
	spinalCordTxPacket[1] = 0xAA;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <peripheralUART_Init+0x44>)
 8000670:	22aa      	movs	r2, #170	; 0xaa
 8000672:	705a      	strb	r2, [r3, #1]
	spinalCordTxPacket[2] = 0xAA;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <peripheralUART_Init+0x44>)
 8000676:	22aa      	movs	r2, #170	; 0xaa
 8000678:	709a      	strb	r2, [r3, #2]
	spinalCordTxPacket[3] = 0xAA;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <peripheralUART_Init+0x44>)
 800067c:	22aa      	movs	r2, #170	; 0xaa
 800067e:	70da      	strb	r2, [r3, #3]
	spinalCordTxPacket[motorDir] = 0x00;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <peripheralUART_Init+0x44>)
 8000682:	2200      	movs	r2, #0
 8000684:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	4908      	ldr	r1, [pc, #32]	; (80006ac <peripheralUART_Init+0x48>)
 800068a:	4809      	ldr	r0, [pc, #36]	; (80006b0 <peripheralUART_Init+0x4c>)
 800068c:	f009 f964 	bl	8009958 <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <peripheralUART_Init+0x50>)
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <peripheralUART_Init+0x54>)
 8000696:	f009 fa37 	bl	8009b08 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 800069a:	2202      	movs	r2, #2
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <peripheralUART_Init+0x58>)
 800069e:	4808      	ldr	r0, [pc, #32]	; (80006c0 <peripheralUART_Init+0x5c>)
 80006a0:	f009 fa32 	bl	8009b08 <HAL_UART_Receive_DMA>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2400000c 	.word	0x2400000c
 80006ac:	24000b38 	.word	0x24000b38
 80006b0:	24000a50 	.word	0x24000a50
 80006b4:	24000adc 	.word	0x24000adc
 80006b8:	2400025c 	.word	0x2400025c
 80006bc:	24000728 	.word	0x24000728
 80006c0:	24000930 	.word	0x24000930

080006c4 <HAL_UART_TxCpltCallback>:
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
}
#endif
//////////////////////////////////////////////////////////////////////////////////////////
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_UART_TxCpltCallback+0x64>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d103      	bne.n	80006e0 <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt_Flag = 1;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <HAL_UART_TxCpltCallback+0x68>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualTxCplt_Flag = 1;
	}
}
 80006de:	e01c      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_UART_TxCpltCallback+0x6c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d103      	bne.n	80006f4 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <HAL_UART_TxCpltCallback+0x70>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
}
 80006f2:	e012      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_UART_TxCpltCallback+0x74>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d103      	bne.n	8000708 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt_Flag = 1;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <HAL_UART_TxCpltCallback+0x78>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
}
 8000706:	e008      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == zmanual.Instance)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_UART_TxCpltCallback+0x7c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d102      	bne.n	800071a <HAL_UART_TxCpltCallback+0x56>
		zmanualTxCplt_Flag = 1;
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <HAL_UART_TxCpltCallback+0x80>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	24000930 	.word	0x24000930
 800072c:	240002fa 	.word	0x240002fa
 8000730:	2400025c 	.word	0x2400025c
 8000734:	24000a18 	.word	0x24000a18
 8000738:	24000a50 	.word	0x24000a50
 800073c:	240007f8 	.word	0x240007f8
 8000740:	24000120 	.word	0x24000120
 8000744:	240001b4 	.word	0x240001b4

08000748 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <HAL_UART_RxCpltCallback+0x7c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	d103      	bne.n	8000764 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt_Flag = 1;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <HAL_UART_RxCpltCallback+0x80>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualRxCplt_Flag = 1;
	}
}
 8000762:	e02b      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == PS2.Instance)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_UART_RxCpltCallback+0x84>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	d103      	bne.n	8000778 <HAL_UART_RxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <HAL_UART_RxCpltCallback+0x88>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
}
 8000776:	e021      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == spinalCord.Instance)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d112      	bne.n	80007aa <HAL_UART_RxCpltCallback+0x62>
		if(spinalCordRxPacket[0]=='t')
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b74      	cmp	r3, #116	; 0x74
 800078a:	d105      	bne.n	8000798 <HAL_UART_RxCpltCallback+0x50>
			HAL_UART_Transmit(&spinalCord, spinalCordTxPacket, 9,100);
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	2209      	movs	r2, #9
 8000790:	4912      	ldr	r1, [pc, #72]	; (80007dc <HAL_UART_RxCpltCallback+0x94>)
 8000792:	4810      	ldr	r0, [pc, #64]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 8000794:	f008 ffc6 	bl	8009724 <HAL_UART_Transmit>
		spinalCordRxCplt_Flag = 1;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_UART_RxCpltCallback+0x98>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800079e:	2201      	movs	r2, #1
 80007a0:	490d      	ldr	r1, [pc, #52]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 80007a4:	f009 f8d8 	bl	8009958 <HAL_UART_Receive_IT>
}
 80007a8:	e008      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == zmanual.Instance)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_UART_RxCpltCallback+0x9c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d102      	bne.n	80007bc <HAL_UART_RxCpltCallback+0x74>
		zmanualRxCplt_Flag = 1;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_UART_RxCpltCallback+0xa0>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	24000930 	.word	0x24000930
 80007c8:	240000e1 	.word	0x240000e1
 80007cc:	2400025c 	.word	0x2400025c
 80007d0:	24000a18 	.word	0x24000a18
 80007d4:	24000a50 	.word	0x24000a50
 80007d8:	24000b38 	.word	0x24000b38
 80007dc:	2400000c 	.word	0x2400000c
 80007e0:	24000bc0 	.word	0x24000bc0
 80007e4:	24000120 	.word	0x24000120
 80007e8:	24000a20 	.word	0x24000a20

080007ec <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <compassReset+0x24>)
 80007f2:	2261      	movs	r2, #97	; 0x61
 80007f4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	4905      	ldr	r1, [pc, #20]	; (8000810 <compassReset+0x24>)
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <compassReset+0x28>)
 80007fc:	f009 f828 	bl	8009850 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 8000800:	f000 f818 	bl	8000834 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 8000804:	4b02      	ldr	r3, [pc, #8]	; (8000810 <compassReset+0x24>)
 8000806:	227a      	movs	r2, #122	; 0x7a
 8000808:	701a      	strb	r2, [r3, #0]
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	24000000 	.word	0x24000000
 8000814:	24000930 	.word	0x24000930

08000818 <compassRequest>:
void compassRequest(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 800081c:	2201      	movs	r2, #1
 800081e:	4903      	ldr	r1, [pc, #12]	; (800082c <compassRequest+0x14>)
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <compassRequest+0x18>)
 8000822:	f009 f815 	bl	8009850 <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	24000000 	.word	0x24000000
 8000830:	24000930 	.word	0x24000930

08000834 <wait4CompassTx>:
	wait4CompassRx();
	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
	while(compassTxCplt_Flag == 0)
 8000838:	bf00      	nop
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <wait4CompassTx+0x20>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d0fb      	beq.n	800083a <wait4CompassTx+0x6>
	{
	}
	compassTxCplt_Flag = 0;
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <wait4CompassTx+0x20>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	240002fa 	.word	0x240002fa

08000858 <spinalCordTrans>:
{
	HAL_UART_Init(&spinalCord);
}

void spinalCordTrans(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&spinalCord, (uint8_t*)spinalCordTxPacket, 9);
 800085c:	2209      	movs	r2, #9
 800085e:	4904      	ldr	r1, [pc, #16]	; (8000870 <spinalCordTrans+0x18>)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <spinalCordTrans+0x1c>)
 8000862:	f008 fff5 	bl	8009850 <HAL_UART_Transmit_IT>
	wait4SpinalCordTx();
 8000866:	f000 f807 	bl	8000878 <wait4SpinalCordTx>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2400000c 	.word	0x2400000c
 8000874:	24000a50 	.word	0x24000a50

08000878 <wait4SpinalCordTx>:
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 2);
	wait4SpinalCordRx();
}

void wait4SpinalCordTx(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	while(spinalCordTxCplt_Flag == 0)
 800087c:	bf00      	nop
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <wait4SpinalCordTx+0x20>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0fb      	beq.n	800087e <wait4SpinalCordTx+0x6>
	{
	}
	spinalCordTxCplt_Flag = 0;
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <wait4SpinalCordTx+0x20>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	240007f8 	.word	0x240007f8

0800089c <peripheralADC_Init>:
uint16_t _PitchFilterWindow[10] = {0,0,0,0,0,0,0,0,0,0};
uint16_t _PitchFinalFilter;

#ifndef ADC_CONTINOUS_MODE
void peripheralADC_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3Value, 3);
 80008a0:	2203      	movs	r2, #3
 80008a2:	4903      	ldr	r1, [pc, #12]	; (80008b0 <peripheralADC_Init+0x14>)
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <peripheralADC_Init+0x18>)
 80008a6:	f002 f9af 	bl	8002c08 <HAL_ADC_Start_DMA>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	24000b58 	.word	0x24000b58
 80008b4:	24000824 	.word	0x24000824

080008b8 <controlMotor1>:
#ifdef SPINAL_CORD_MODE_ONEWAY



void controlMotor1(int _speed)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2bfa      	cmp	r3, #250	; 0xfa
 80008c4:	dd02      	ble.n	80008cc <controlMotor1+0x14>
		_speed = 250;
 80008c6:	23fa      	movs	r3, #250	; 0xfa
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	e010      	b.n	80008ee <controlMotor1+0x36>
	else if(_speed<-250)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 80008d2:	da03      	bge.n	80008dc <controlMotor1+0x24>
		_speed = -250;
 80008d4:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	e008      	b.n	80008ee <controlMotor1+0x36>
	else if((_speed<3)&&(_speed>-3))
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	dc05      	bgt.n	80008ee <controlMotor1+0x36>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f113 0f02 	cmn.w	r3, #2
 80008e8:	db01      	blt.n	80008ee <controlMotor1+0x36>
		_speed = 3;
 80008ea:	2303      	movs	r3, #3
 80008ec:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor1Speed] = abs(_speed);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	bfb8      	it	lt
 80008f4:	425b      	neglt	r3, r3
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <controlMotor1+0x74>)
 80008fa:	711a      	strb	r2, [r3, #4]
	if(_speed>=0)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	db07      	blt.n	8000912 <controlMotor1+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 0);
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <controlMotor1+0x74>)
 8000904:	7a1b      	ldrb	r3, [r3, #8]
 8000906:	f023 0301 	bic.w	r3, r3, #1
 800090a:	b2da      	uxtb	r2, r3
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <controlMotor1+0x74>)
 800090e:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor1Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 0);
//		spinalCordTxPacket[motor1Dir] = 1;
}
 8000910:	e006      	b.n	8000920 <controlMotor1+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 0);
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <controlMotor1+0x74>)
 8000914:	7a1b      	ldrb	r3, [r3, #8]
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b03      	ldr	r3, [pc, #12]	; (800092c <controlMotor1+0x74>)
 800091e:	721a      	strb	r2, [r3, #8]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	2400000c 	.word	0x2400000c

08000930 <controlMotor2>:
void controlMotor2(int _speed)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2bfa      	cmp	r3, #250	; 0xfa
 800093c:	dd02      	ble.n	8000944 <controlMotor2+0x14>
		_speed = 250;
 800093e:	23fa      	movs	r3, #250	; 0xfa
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	e010      	b.n	8000966 <controlMotor2+0x36>
	else if(_speed<-250)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 800094a:	da03      	bge.n	8000954 <controlMotor2+0x24>
		_speed = -250;
 800094c:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	e008      	b.n	8000966 <controlMotor2+0x36>
	else if((_speed<3)&&(_speed>-3))
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b02      	cmp	r3, #2
 8000958:	dc05      	bgt.n	8000966 <controlMotor2+0x36>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f113 0f02 	cmn.w	r3, #2
 8000960:	db01      	blt.n	8000966 <controlMotor2+0x36>
		_speed = 3;
 8000962:	2303      	movs	r3, #3
 8000964:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor2Speed] = abs(_speed);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	bfb8      	it	lt
 800096c:	425b      	neglt	r3, r3
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <controlMotor2+0x74>)
 8000972:	715a      	strb	r2, [r3, #5]
	if(_speed>=0)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	db07      	blt.n	800098a <controlMotor2+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 1);
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <controlMotor2+0x74>)
 800097c:	7a1b      	ldrb	r3, [r3, #8]
 800097e:	f023 0302 	bic.w	r3, r3, #2
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <controlMotor2+0x74>)
 8000986:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor2Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 1);
//		spinalCordTxPacket[motor2Dir] = 1;
}
 8000988:	e006      	b.n	8000998 <controlMotor2+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 1);
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <controlMotor2+0x74>)
 800098c:	7a1b      	ldrb	r3, [r3, #8]
 800098e:	f043 0302 	orr.w	r3, r3, #2
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <controlMotor2+0x74>)
 8000996:	721a      	strb	r2, [r3, #8]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	2400000c 	.word	0x2400000c

080009a8 <controlMotor3>:
void controlMotor3(int _speed)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2bfa      	cmp	r3, #250	; 0xfa
 80009b4:	dd02      	ble.n	80009bc <controlMotor3+0x14>
		_speed = 250;
 80009b6:	23fa      	movs	r3, #250	; 0xfa
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	e010      	b.n	80009de <controlMotor3+0x36>
	else if(_speed<-250)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 80009c2:	da03      	bge.n	80009cc <controlMotor3+0x24>
		_speed = -250;
 80009c4:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	e008      	b.n	80009de <controlMotor3+0x36>
	else if((_speed<3)&&(_speed>-3))
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	dc05      	bgt.n	80009de <controlMotor3+0x36>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f113 0f02 	cmn.w	r3, #2
 80009d8:	db01      	blt.n	80009de <controlMotor3+0x36>
		_speed = 3;
 80009da:	2303      	movs	r3, #3
 80009dc:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor3Speed] = abs(_speed);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	bfb8      	it	lt
 80009e4:	425b      	neglt	r3, r3
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <controlMotor3+0x74>)
 80009ea:	719a      	strb	r2, [r3, #6]
	if(_speed>=0)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	db07      	blt.n	8000a02 <controlMotor3+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 2);
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <controlMotor3+0x74>)
 80009f4:	7a1b      	ldrb	r3, [r3, #8]
 80009f6:	f023 0304 	bic.w	r3, r3, #4
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <controlMotor3+0x74>)
 80009fe:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor3Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 2);
//		spinalCordTxPacket[motor3Dir] = 1;
}
 8000a00:	e006      	b.n	8000a10 <controlMotor3+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 2);
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <controlMotor3+0x74>)
 8000a04:	7a1b      	ldrb	r3, [r3, #8]
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <controlMotor3+0x74>)
 8000a0e:	721a      	strb	r2, [r3, #8]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	2400000c 	.word	0x2400000c

08000a20 <controlMotor4>:
void controlMotor4(int _speed)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2bfa      	cmp	r3, #250	; 0xfa
 8000a2c:	dd02      	ble.n	8000a34 <controlMotor4+0x14>
		_speed = 250;
 8000a2e:	23fa      	movs	r3, #250	; 0xfa
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	e010      	b.n	8000a56 <controlMotor4+0x36>
	else if(_speed<-250)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000a3a:	da03      	bge.n	8000a44 <controlMotor4+0x24>
		_speed = -250;
 8000a3c:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	e008      	b.n	8000a56 <controlMotor4+0x36>
	else if((_speed<3)&&(_speed>-3))
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	dc05      	bgt.n	8000a56 <controlMotor4+0x36>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f113 0f02 	cmn.w	r3, #2
 8000a50:	db01      	blt.n	8000a56 <controlMotor4+0x36>
		_speed = 3;
 8000a52:	2303      	movs	r3, #3
 8000a54:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor4Speed] = abs(_speed);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	bfb8      	it	lt
 8000a5c:	425b      	neglt	r3, r3
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <controlMotor4+0x74>)
 8000a62:	71da      	strb	r2, [r3, #7]
	if(_speed>=0)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	db07      	blt.n	8000a7a <controlMotor4+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 3);
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <controlMotor4+0x74>)
 8000a6c:	7a1b      	ldrb	r3, [r3, #8]
 8000a6e:	f023 0308 	bic.w	r3, r3, #8
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <controlMotor4+0x74>)
 8000a76:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor4Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 3);
//		spinalCordTxPacket[motor4Dir] = 1;
}
 8000a78:	e006      	b.n	8000a88 <controlMotor4+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 3);
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <controlMotor4+0x74>)
 8000a7c:	7a1b      	ldrb	r3, [r3, #8]
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <controlMotor4+0x74>)
 8000a86:	721a      	strb	r2, [r3, #8]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	2400000c 	.word	0x2400000c

08000a98 <PIDyaw>:
  }
}
#endif

double PIDyaw(int _yawValue, int _yawSetpoint)
{
 8000a98:	b490      	push	{r4, r7}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
	yawError = -_yawSetpoint + _yawValue;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	b21a      	sxth	r2, r3
 8000ab0:	4b41      	ldr	r3, [pc, #260]	; (8000bb8 <PIDyaw+0x120>)
 8000ab2:	801a      	strh	r2, [r3, #0]
	yawP = yawError;
 8000ab4:	4b40      	ldr	r3, [pc, #256]	; (8000bb8 <PIDyaw+0x120>)
 8000ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aba:	ee07 3a90 	vmov	s15, r3
 8000abe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ac2:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <PIDyaw+0x124>)
 8000ac4:	ed83 7b00 	vstr	d7, [r3]
	yawD = yawError - yawPreError;
 8000ac8:	4b3b      	ldr	r3, [pc, #236]	; (8000bb8 <PIDyaw+0x120>)
 8000aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b3b      	ldr	r3, [pc, #236]	; (8000bc0 <PIDyaw+0x128>)
 8000ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	ee07 3a90 	vmov	s15, r3
 8000adc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ae0:	4b38      	ldr	r3, [pc, #224]	; (8000bc4 <PIDyaw+0x12c>)
 8000ae2:	ed83 7b00 	vstr	d7, [r3]
	yawI = yawError + yawI;
 8000ae6:	4b34      	ldr	r3, [pc, #208]	; (8000bb8 <PIDyaw+0x120>)
 8000ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aec:	ee07 3a90 	vmov	s15, r3
 8000af0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000af4:	4b34      	ldr	r3, [pc, #208]	; (8000bc8 <PIDyaw+0x130>)
 8000af6:	ed93 7b00 	vldr	d7, [r3]
 8000afa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000afe:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <PIDyaw+0x130>)
 8000b00:	ed83 7b00 	vstr	d7, [r3]
	yawPID = yawKp*yawP + yawKd*yawD + yawKi*yawI;
 8000b04:	4b31      	ldr	r3, [pc, #196]	; (8000bcc <PIDyaw+0x134>)
 8000b06:	ed93 6b00 	vldr	d6, [r3]
 8000b0a:	4b2c      	ldr	r3, [pc, #176]	; (8000bbc <PIDyaw+0x124>)
 8000b0c:	ed93 7b00 	vldr	d7, [r3]
 8000b10:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000b14:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <PIDyaw+0x138>)
 8000b16:	ed93 5b00 	vldr	d5, [r3]
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <PIDyaw+0x12c>)
 8000b1c:	ed93 7b00 	vldr	d7, [r3]
 8000b20:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b24:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b28:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <PIDyaw+0x13c>)
 8000b2a:	ed93 5b00 	vldr	d5, [r3]
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <PIDyaw+0x130>)
 8000b30:	ed93 7b00 	vldr	d7, [r3]
 8000b34:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b3c:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <PIDyaw+0x140>)
 8000b3e:	ed83 7b00 	vstr	d7, [r3]
	if(yawPID > MAX_YAW_PID)
 8000b42:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <PIDyaw+0x140>)
 8000b44:	ed93 7b00 	vldr	d7, [r3]
 8000b48:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000ba8 <PIDyaw+0x110>
 8000b4c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b54:	dd05      	ble.n	8000b62 <PIDyaw+0xca>
	{
		yawPID = MAX_YAW_PID;
 8000b56:	4a20      	ldr	r2, [pc, #128]	; (8000bd8 <PIDyaw+0x140>)
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	4c1f      	ldr	r4, [pc, #124]	; (8000bdc <PIDyaw+0x144>)
 8000b5e:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(yawPID < MIN_YAW_PID)
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <PIDyaw+0x140>)
 8000b64:	ed93 7b00 	vldr	d7, [r3]
 8000b68:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000bb0 <PIDyaw+0x118>
 8000b6c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b74:	d505      	bpl.n	8000b82 <PIDyaw+0xea>
	{
		yawPID = MIN_YAW_PID;
 8000b76:	4a18      	ldr	r2, [pc, #96]	; (8000bd8 <PIDyaw+0x140>)
 8000b78:	f04f 0300 	mov.w	r3, #0
 8000b7c:	4c18      	ldr	r4, [pc, #96]	; (8000be0 <PIDyaw+0x148>)
 8000b7e:	e9c2 3400 	strd	r3, r4, [r2]
	}
	yawPreError = yawError;
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <PIDyaw+0x120>)
 8000b84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <PIDyaw+0x128>)
 8000b8a:	801a      	strh	r2, [r3, #0]
	return yawPID;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <PIDyaw+0x140>)
 8000b8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000b92:	ec44 3b17 	vmov	d7, r3, r4
}
 8000b96:	eeb0 0b47 	vmov.f64	d0, d7
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc90      	pop	{r4, r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	f3af 8000 	nop.w
 8000ba8:	00000000 	.word	0x00000000
 8000bac:	405e0000 	.word	0x405e0000
 8000bb0:	00000000 	.word	0x00000000
 8000bb4:	c05e0000 	.word	0xc05e0000
 8000bb8:	240007d0 	.word	0x240007d0
 8000bbc:	240007f0 	.word	0x240007f0
 8000bc0:	24000258 	.word	0x24000258
 8000bc4:	24000108 	.word	0x24000108
 8000bc8:	240007c8 	.word	0x240007c8
 8000bcc:	24000020 	.word	0x24000020
 8000bd0:	240000d8 	.word	0x240000d8
 8000bd4:	24000028 	.word	0x24000028
 8000bd8:	24000a48 	.word	0x24000a48
 8000bdc:	405e0000 	.word	0x405e0000
 8000be0:	c05e0000 	.word	0xc05e0000
 8000be4:	00000000 	.word	0x00000000

08000be8 <PIDroL>:
	roRPreError = roRError;
	return roRPID;
}

double PIDroL(int _roLValue, int _roLSetpoint)
{
 8000be8:	b490      	push	{r4, r7}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
	roLError = _roLSetpoint - _roLValue;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	b21a      	sxth	r2, r3
 8000c00:	4b41      	ldr	r3, [pc, #260]	; (8000d08 <PIDroL+0x120>)
 8000c02:	801a      	strh	r2, [r3, #0]
	roLP = roLError;
 8000c04:	4b40      	ldr	r3, [pc, #256]	; (8000d08 <PIDroL+0x120>)
 8000c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c0a:	ee07 3a90 	vmov	s15, r3
 8000c0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c12:	4b3e      	ldr	r3, [pc, #248]	; (8000d0c <PIDroL+0x124>)
 8000c14:	ed83 7b00 	vstr	d7, [r3]
	roLD = roLError - roLPreError;
 8000c18:	4b3b      	ldr	r3, [pc, #236]	; (8000d08 <PIDroL+0x120>)
 8000c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b3b      	ldr	r3, [pc, #236]	; (8000d10 <PIDroL+0x128>)
 8000c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	ee07 3a90 	vmov	s15, r3
 8000c2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c30:	4b38      	ldr	r3, [pc, #224]	; (8000d14 <PIDroL+0x12c>)
 8000c32:	ed83 7b00 	vstr	d7, [r3]
	roLI = roLError + roLI;
 8000c36:	4b34      	ldr	r3, [pc, #208]	; (8000d08 <PIDroL+0x120>)
 8000c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c3c:	ee07 3a90 	vmov	s15, r3
 8000c40:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c44:	4b34      	ldr	r3, [pc, #208]	; (8000d18 <PIDroL+0x130>)
 8000c46:	ed93 7b00 	vldr	d7, [r3]
 8000c4a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c4e:	4b32      	ldr	r3, [pc, #200]	; (8000d18 <PIDroL+0x130>)
 8000c50:	ed83 7b00 	vstr	d7, [r3]
	roLPID = roLKp*roLP + roLKd*roLD + roLKi*roLI;
 8000c54:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <PIDroL+0x134>)
 8000c56:	ed93 6b00 	vldr	d6, [r3]
 8000c5a:	4b2c      	ldr	r3, [pc, #176]	; (8000d0c <PIDroL+0x124>)
 8000c5c:	ed93 7b00 	vldr	d7, [r3]
 8000c60:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000c64:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <PIDroL+0x138>)
 8000c66:	ed93 5b00 	vldr	d5, [r3]
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <PIDroL+0x12c>)
 8000c6c:	ed93 7b00 	vldr	d7, [r3]
 8000c70:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c74:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c78:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <PIDroL+0x13c>)
 8000c7a:	ed93 5b00 	vldr	d5, [r3]
 8000c7e:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <PIDroL+0x130>)
 8000c80:	ed93 7b00 	vldr	d7, [r3]
 8000c84:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c88:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c8c:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <PIDroL+0x140>)
 8000c8e:	ed83 7b00 	vstr	d7, [r3]
	if(roLPID > MAX_ROL_PID)
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <PIDroL+0x140>)
 8000c94:	ed93 7b00 	vldr	d7, [r3]
 8000c98:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000cf8 <PIDroL+0x110>
 8000c9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca4:	dd05      	ble.n	8000cb2 <PIDroL+0xca>
	{
		roLPID = MAX_ROL_PID;
 8000ca6:	4a20      	ldr	r2, [pc, #128]	; (8000d28 <PIDroL+0x140>)
 8000ca8:	a413      	add	r4, pc, #76	; (adr r4, 8000cf8 <PIDroL+0x110>)
 8000caa:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000cae:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(roLPID < MIN_ROL_PID)
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <PIDroL+0x140>)
 8000cb4:	ed93 7b00 	vldr	d7, [r3]
 8000cb8:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000d00 <PIDroL+0x118>
 8000cbc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc4:	d505      	bpl.n	8000cd2 <PIDroL+0xea>
	{
		roLPID = MIN_ROL_PID;
 8000cc6:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <PIDroL+0x140>)
 8000cc8:	a40d      	add	r4, pc, #52	; (adr r4, 8000d00 <PIDroL+0x118>)
 8000cca:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000cce:	e9c2 3400 	strd	r3, r4, [r2]
	}
	roLPreError = roLError;
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <PIDroL+0x120>)
 8000cd4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <PIDroL+0x128>)
 8000cda:	801a      	strh	r2, [r3, #0]
	return roLPID;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <PIDroL+0x140>)
 8000cde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ce2:	ec44 3b17 	vmov	d7, r3, r4
}
 8000ce6:	eeb0 0b47 	vmov.f64	d0, d7
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc90      	pop	{r4, r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	f3af 8000 	nop.w
 8000cf8:	00000000 	.word	0x00000000
 8000cfc:	406fe000 	.word	0x406fe000
 8000d00:	00000000 	.word	0x00000000
 8000d04:	c06fe000 	.word	0xc06fe000
 8000d08:	240007d4 	.word	0x240007d4
 8000d0c:	24000a10 	.word	0x24000a10
 8000d10:	240009c4 	.word	0x240009c4
 8000d14:	240001c0 	.word	0x240001c0
 8000d18:	24000250 	.word	0x24000250
 8000d1c:	24000030 	.word	0x24000030
 8000d20:	24000740 	.word	0x24000740
 8000d24:	24000b10 	.word	0x24000b10
 8000d28:	24000800 	.word	0x24000800
 8000d2c:	00000000 	.word	0x00000000

08000d30 <PIDpit>:

double PIDpit(int _pitValue, int _pitSetpoint)
{
 8000d30:	b490      	push	{r4, r7}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
	pitError = _pitSetpoint - _pitValue;
 8000d3a:	683a      	ldr	r2, [r7, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	ee07 3a90 	vmov	s15, r3
 8000d44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d48:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <PIDpit+0x108>)
 8000d4a:	ed83 7b00 	vstr	d7, [r3]
	pitP = pitError;
 8000d4e:	4b3a      	ldr	r3, [pc, #232]	; (8000e38 <PIDpit+0x108>)
 8000d50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d54:	4a39      	ldr	r2, [pc, #228]	; (8000e3c <PIDpit+0x10c>)
 8000d56:	e9c2 3400 	strd	r3, r4, [r2]
	pitD = pitError - pitPreError;
 8000d5a:	4b37      	ldr	r3, [pc, #220]	; (8000e38 <PIDpit+0x108>)
 8000d5c:	ed93 6b00 	vldr	d6, [r3]
 8000d60:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <PIDpit+0x110>)
 8000d62:	ed93 7b00 	vldr	d7, [r3]
 8000d66:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d6a:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <PIDpit+0x114>)
 8000d6c:	ed83 7b00 	vstr	d7, [r3]
	pitI = pitError + pitI;
 8000d70:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <PIDpit+0x108>)
 8000d72:	ed93 6b00 	vldr	d6, [r3]
 8000d76:	4b34      	ldr	r3, [pc, #208]	; (8000e48 <PIDpit+0x118>)
 8000d78:	ed93 7b00 	vldr	d7, [r3]
 8000d7c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d80:	4b31      	ldr	r3, [pc, #196]	; (8000e48 <PIDpit+0x118>)
 8000d82:	ed83 7b00 	vstr	d7, [r3]
	pitPID = pitKp*pitP + pitKd*pitD + pitKi*pitI;
 8000d86:	4b31      	ldr	r3, [pc, #196]	; (8000e4c <PIDpit+0x11c>)
 8000d88:	ed93 6b00 	vldr	d6, [r3]
 8000d8c:	4b2b      	ldr	r3, [pc, #172]	; (8000e3c <PIDpit+0x10c>)
 8000d8e:	ed93 7b00 	vldr	d7, [r3]
 8000d92:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000d96:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <PIDpit+0x120>)
 8000d98:	ed93 5b00 	vldr	d5, [r3]
 8000d9c:	4b29      	ldr	r3, [pc, #164]	; (8000e44 <PIDpit+0x114>)
 8000d9e:	ed93 7b00 	vldr	d7, [r3]
 8000da2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000da6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000daa:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <PIDpit+0x124>)
 8000dac:	ed93 5b00 	vldr	d5, [r3]
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <PIDpit+0x118>)
 8000db2:	ed93 7b00 	vldr	d7, [r3]
 8000db6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000dba:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <PIDpit+0x128>)
 8000dc0:	ed83 7b00 	vstr	d7, [r3]
	if(pitPID > MAX_PIT_PID)
 8000dc4:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <PIDpit+0x128>)
 8000dc6:	ed93 7b00 	vldr	d7, [r3]
 8000dca:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000e28 <PIDpit+0xf8>
 8000dce:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd6:	dd05      	ble.n	8000de4 <PIDpit+0xb4>
	{
		pitPID = MAX_PIT_PID;
 8000dd8:	4a1f      	ldr	r2, [pc, #124]	; (8000e58 <PIDpit+0x128>)
 8000dda:	a413      	add	r4, pc, #76	; (adr r4, 8000e28 <PIDpit+0xf8>)
 8000ddc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000de0:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(pitPID < MIN_PIT_PID)
 8000de4:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <PIDpit+0x128>)
 8000de6:	ed93 7b00 	vldr	d7, [r3]
 8000dea:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000e30 <PIDpit+0x100>
 8000dee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df6:	d505      	bpl.n	8000e04 <PIDpit+0xd4>
	{
		pitPID = MIN_PIT_PID;
 8000df8:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <PIDpit+0x128>)
 8000dfa:	a40d      	add	r4, pc, #52	; (adr r4, 8000e30 <PIDpit+0x100>)
 8000dfc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000e00:	e9c2 3400 	strd	r3, r4, [r2]
	}
	pitPreError = pitError;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <PIDpit+0x108>)
 8000e06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e0a:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <PIDpit+0x110>)
 8000e0c:	e9c2 3400 	strd	r3, r4, [r2]
	return pitPID;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <PIDpit+0x128>)
 8000e12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e16:	ec44 3b17 	vmov	d7, r3, r4
}
 8000e1a:	eeb0 0b47 	vmov.f64	d0, d7
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc90      	pop	{r4, r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	00000000 	.word	0x00000000
 8000e2c:	406fe000 	.word	0x406fe000
 8000e30:	00000000 	.word	0x00000000
 8000e34:	c06fe000 	.word	0xc06fe000
 8000e38:	24000310 	.word	0x24000310
 8000e3c:	24000908 	.word	0x24000908
 8000e40:	240000f0 	.word	0x240000f0
 8000e44:	240001b8 	.word	0x240001b8
 8000e48:	24000808 	.word	0x24000808
 8000e4c:	24000038 	.word	0x24000038
 8000e50:	24000318 	.word	0x24000318
 8000e54:	24000b48 	.word	0x24000b48
 8000e58:	240009f0 	.word	0x240009f0
 8000e5c:	00000000 	.word	0x00000000

08000e60 <roL_pit_yaw_mixSpeed>:
	controlMotor4(yawPID);
	// spinalCordTrans();
}

void roL_pit_yaw_mixSpeed(void)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b08d      	sub	sp, #52	; 0x34
 8000e64:	af00      	add	r7, sp, #0
	double _roL_pit_speed = sqrt(roLPID*roLPID + pitPID*pitPID);
 8000e66:	4b84      	ldr	r3, [pc, #528]	; (8001078 <roL_pit_yaw_mixSpeed+0x218>)
 8000e68:	ed93 6b00 	vldr	d6, [r3]
 8000e6c:	4b82      	ldr	r3, [pc, #520]	; (8001078 <roL_pit_yaw_mixSpeed+0x218>)
 8000e6e:	ed93 7b00 	vldr	d7, [r3]
 8000e72:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000e76:	4b81      	ldr	r3, [pc, #516]	; (800107c <roL_pit_yaw_mixSpeed+0x21c>)
 8000e78:	ed93 5b00 	vldr	d5, [r3]
 8000e7c:	4b7f      	ldr	r3, [pc, #508]	; (800107c <roL_pit_yaw_mixSpeed+0x21c>)
 8000e7e:	ed93 7b00 	vldr	d7, [r3]
 8000e82:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000e86:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e8a:	eeb0 0b47 	vmov.f64	d0, d7
 8000e8e:	f00c f8ab 	bl	800cfe8 <sqrt>
 8000e92:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double _roL_pit_dir = atan2(roLPID, pitPID);
 8000e96:	4b78      	ldr	r3, [pc, #480]	; (8001078 <roL_pit_yaw_mixSpeed+0x218>)
 8000e98:	ed93 7b00 	vldr	d7, [r3]
 8000e9c:	4b77      	ldr	r3, [pc, #476]	; (800107c <roL_pit_yaw_mixSpeed+0x21c>)
 8000e9e:	ed93 6b00 	vldr	d6, [r3]
 8000ea2:	eeb0 1b46 	vmov.f64	d1, d6
 8000ea6:	eeb0 0b47 	vmov.f64	d0, d7
 8000eaa:	f00c f899 	bl	800cfe0 <atan2>
 8000eae:	ed87 0b08 	vstr	d0, [r7, #32]

	double _motor1Speed = yawPID + (_roL_pit_speed *cos(3.0*M_PI/4.0 - _roL_pit_dir) + 0.0);
 8000eb2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8001060 <roL_pit_yaw_mixSpeed+0x200>
 8000eb6:	ed97 7b08 	vldr	d7, [r7, #32]
 8000eba:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ebe:	eeb0 0b47 	vmov.f64	d0, d7
 8000ec2:	f00c f851 	bl	800cf68 <cos>
 8000ec6:	eeb0 6b40 	vmov.f64	d6, d0
 8000eca:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000ece:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ed2:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8001068 <roL_pit_yaw_mixSpeed+0x208>
 8000ed6:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000eda:	4b69      	ldr	r3, [pc, #420]	; (8001080 <roL_pit_yaw_mixSpeed+0x220>)
 8000edc:	ed93 7b00 	vldr	d7, [r3]
 8000ee0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ee4:	ed87 7b06 	vstr	d7, [r7, #24]
	double _motor2Speed = yawPID + (_roL_pit_speed *cos(3.0*M_PI/4.0 + _roL_pit_dir) - 0.0);
 8000ee8:	ed97 7b08 	vldr	d7, [r7, #32]
 8000eec:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8001060 <roL_pit_yaw_mixSpeed+0x200>
 8000ef0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ef4:	eeb0 0b47 	vmov.f64	d0, d7
 8000ef8:	f00c f836 	bl	800cf68 <cos>
 8000efc:	eeb0 6b40 	vmov.f64	d6, d0
 8000f00:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000f04:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000f08:	4b5d      	ldr	r3, [pc, #372]	; (8001080 <roL_pit_yaw_mixSpeed+0x220>)
 8000f0a:	ed93 7b00 	vldr	d7, [r3]
 8000f0e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f12:	ed87 7b04 	vstr	d7, [r7, #16]
	double _motor3Speed = yawPID +  _roL_pit_speed *cos(    M_PI/4.0 + _roL_pit_dir) + 0.0;
 8000f16:	ed97 7b08 	vldr	d7, [r7, #32]
 8000f1a:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8001070 <roL_pit_yaw_mixSpeed+0x210>
 8000f1e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f22:	eeb0 0b47 	vmov.f64	d0, d7
 8000f26:	f00c f81f 	bl	800cf68 <cos>
 8000f2a:	eeb0 6b40 	vmov.f64	d6, d0
 8000f2e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000f32:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000f36:	4b52      	ldr	r3, [pc, #328]	; (8001080 <roL_pit_yaw_mixSpeed+0x220>)
 8000f38:	ed93 7b00 	vldr	d7, [r3]
 8000f3c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f40:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8001068 <roL_pit_yaw_mixSpeed+0x208>
 8000f44:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f48:	ed87 7b02 	vstr	d7, [r7, #8]
	double _motor4Speed = yawPID +  _roL_pit_speed *cos(    M_PI/4.0 - _roL_pit_dir) - 0.0;
 8000f4c:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8001070 <roL_pit_yaw_mixSpeed+0x210>
 8000f50:	ed97 7b08 	vldr	d7, [r7, #32]
 8000f54:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f58:	eeb0 0b47 	vmov.f64	d0, d7
 8000f5c:	f00c f804 	bl	800cf68 <cos>
 8000f60:	eeb0 6b40 	vmov.f64	d6, d0
 8000f64:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000f68:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000f6c:	4b44      	ldr	r3, [pc, #272]	; (8001080 <roL_pit_yaw_mixSpeed+0x220>)
 8000f6e:	ed93 7b00 	vldr	d7, [r3]
 8000f72:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f76:	ed87 7b00 	vstr	d7, [r7]


	a = 1.0 - _motor1Speed;
 8000f7a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f7e:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f82:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f86:	4b3f      	ldr	r3, [pc, #252]	; (8001084 <roL_pit_yaw_mixSpeed+0x224>)
 8000f88:	ed83 7b00 	vstr	d7, [r3]
	b = 1.0 - _motor3Speed;
 8000f8c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f90:	ed97 7b02 	vldr	d7, [r7, #8]
 8000f94:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f98:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <roL_pit_yaw_mixSpeed+0x228>)
 8000f9a:	ed83 7b00 	vstr	d7, [r3]
	absSpeed = _roL_pit_speed;
 8000f9e:	4a3b      	ldr	r2, [pc, #236]	; (800108c <roL_pit_yaw_mixSpeed+0x22c>)
 8000fa0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000fa4:	e9c2 3400 	strd	r3, r4, [r2]
	dir = _roL_pit_dir;
 8000fa8:	4a39      	ldr	r2, [pc, #228]	; (8001090 <roL_pit_yaw_mixSpeed+0x230>)
 8000faa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000fae:	e9c2 3400 	strd	r3, r4, [r2]
	cos_ = cos(3*M_PI/4 - _roL_pit_dir);
 8000fb2:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001060 <roL_pit_yaw_mixSpeed+0x200>
 8000fb6:	ed97 7b08 	vldr	d7, [r7, #32]
 8000fba:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000fbe:	eeb0 0b47 	vmov.f64	d0, d7
 8000fc2:	f00b ffd1 	bl	800cf68 <cos>
 8000fc6:	eeb0 7b40 	vmov.f64	d7, d0
 8000fca:	4b32      	ldr	r3, [pc, #200]	; (8001094 <roL_pit_yaw_mixSpeed+0x234>)
 8000fcc:	ed83 7b00 	vstr	d7, [r3]
	motor1_debug = absSpeed*cos_;
 8000fd0:	4b2e      	ldr	r3, [pc, #184]	; (800108c <roL_pit_yaw_mixSpeed+0x22c>)
 8000fd2:	ed93 6b00 	vldr	d6, [r3]
 8000fd6:	4b2f      	ldr	r3, [pc, #188]	; (8001094 <roL_pit_yaw_mixSpeed+0x234>)
 8000fd8:	ed93 7b00 	vldr	d7, [r3]
 8000fdc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000fe0:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <roL_pit_yaw_mixSpeed+0x238>)
 8000fe2:	ed83 7b00 	vstr	d7, [r3]
	motor1Speed_ = _motor1Speed;
 8000fe6:	4a2d      	ldr	r2, [pc, #180]	; (800109c <roL_pit_yaw_mixSpeed+0x23c>)
 8000fe8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000fec:	e9c2 3400 	strd	r3, r4, [r2]
	motor2Speed_ = _motor2Speed;
 8000ff0:	4a2b      	ldr	r2, [pc, #172]	; (80010a0 <roL_pit_yaw_mixSpeed+0x240>)
 8000ff2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000ff6:	e9c2 3400 	strd	r3, r4, [r2]
	motor3Speed_ = _motor3Speed;
 8000ffa:	4a2a      	ldr	r2, [pc, #168]	; (80010a4 <roL_pit_yaw_mixSpeed+0x244>)
 8000ffc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001000:	e9c2 3400 	strd	r3, r4, [r2]
	motor4Speed_ = _motor4Speed;
 8001004:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <roL_pit_yaw_mixSpeed+0x248>)
 8001006:	e9d7 3400 	ldrd	r3, r4, [r7]
 800100a:	e9c2 3400 	strd	r3, r4, [r2]

	controlMotor1(_motor1Speed);
 800100e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001012:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001016:	ee17 0a90 	vmov	r0, s15
 800101a:	f7ff fc4d 	bl	80008b8 <controlMotor1>
	controlMotor2(_motor2Speed);
 800101e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001022:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001026:	ee17 0a90 	vmov	r0, s15
 800102a:	f7ff fc81 	bl	8000930 <controlMotor2>
	controlMotor3(_motor3Speed);
 800102e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001032:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001036:	ee17 0a90 	vmov	r0, s15
 800103a:	f7ff fcb5 	bl	80009a8 <controlMotor3>
	controlMotor4(_motor4Speed);
 800103e:	ed97 7b00 	vldr	d7, [r7]
 8001042:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001046:	ee17 0a90 	vmov	r0, s15
 800104a:	f7ff fce9 	bl	8000a20 <controlMotor4>
	spinalCordTrans();
 800104e:	f7ff fc03 	bl	8000858 <spinalCordTrans>
}
 8001052:	bf00      	nop
 8001054:	3734      	adds	r7, #52	; 0x34
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}
 800105a:	bf00      	nop
 800105c:	f3af 8000 	nop.w
 8001060:	7f3321d2 	.word	0x7f3321d2
 8001064:	4002d97c 	.word	0x4002d97c
	...
 8001070:	54442d18 	.word	0x54442d18
 8001074:	3fe921fb 	.word	0x3fe921fb
 8001078:	24000800 	.word	0x24000800
 800107c:	240009f0 	.word	0x240009f0
 8001080:	24000a48 	.word	0x24000a48
 8001084:	24000b50 	.word	0x24000b50
 8001088:	240000f8 	.word	0x240000f8
 800108c:	24000a28 	.word	0x24000a28
 8001090:	24000a38 	.word	0x24000a38
 8001094:	24000b08 	.word	0x24000b08
 8001098:	24000308 	.word	0x24000308
 800109c:	240000e8 	.word	0x240000e8
 80010a0:	24000b30 	.word	0x24000b30
 80010a4:	240009f8 	.word	0x240009f8
 80010a8:	240007d8 	.word	0x240007d8

080010ac <brake>:
			controlMotor4(-30);
		}
}

void brake(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	controlMotor1(BRAKE_SPEED);
 80010b0:	2003      	movs	r0, #3
 80010b2:	f7ff fc01 	bl	80008b8 <controlMotor1>
	controlMotor2(-BRAKE_SPEED);
 80010b6:	f06f 0002 	mvn.w	r0, #2
 80010ba:	f7ff fc39 	bl	8000930 <controlMotor2>
	controlMotor3(BRAKE_SPEED);
 80010be:	2003      	movs	r0, #3
 80010c0:	f7ff fc72 	bl	80009a8 <controlMotor3>
	controlMotor4(-BRAKE_SPEED);
 80010c4:	f06f 0002 	mvn.w	r0, #2
 80010c8:	f7ff fcaa 	bl	8000a20 <controlMotor4>
	spinalCordTrans();
 80010cc:	f7ff fbc4 	bl	8000858 <spinalCordTrans>
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <positionControl_Init+0x18>)
 80010da:	f008 f821 	bl	8009120 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(legEn_GPIO_Port, legEn_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	4803      	ldr	r0, [pc, #12]	; (80010f0 <positionControl_Init+0x1c>)
 80010e4:	f005 f972 	bl	80063cc <HAL_GPIO_WritePin>
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	24000b60 	.word	0x24000b60
 80010f0:	58021000 	.word	0x58021000

080010f4 <HAL_TIM_PeriodElapsedCallback>:
	legEn = 1;
	legStatus = _legStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d16e      	bne.n	80011e6 <HAL_TIM_PeriodElapsedCallback+0xf2>
	{
		if(legEn == 1)
 8001108:	4b3a      	ldr	r3, [pc, #232]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d16a      	bne.n	80011e6 <HAL_TIM_PeriodElapsedCallback+0xf2>
		{
			if(legStatus == LEG_STATUS_RUNUP)
 8001110:	4b39      	ldr	r3, [pc, #228]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d11e      	bne.n	8001156 <HAL_TIM_PeriodElapsedCallback+0x62>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình legDir để lùi
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800111e:	4837      	ldr	r0, [pc, #220]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001120:	f005 f954 	bl	80063cc <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8001124:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001128:	4834      	ldr	r0, [pc, #208]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x108>)
 800112a:	f005 f968 	bl	80063fe <HAL_GPIO_TogglePin>
				trackingLeg++;
 800112e:	4b34      	ldr	r3, [pc, #208]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	4a32      	ldr	r2, [pc, #200]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001136:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8001138:	4b32      	ldr	r3, [pc, #200]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	4a31      	ldr	r2, [pc, #196]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001140:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP)
 8001142:	4b30      	ldr	r3, [pc, #192]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2bc7      	cmp	r3, #199	; 0xc7
 8001148:	dd05      	ble.n	8001156 <HAL_TIM_PeriodElapsedCallback+0x62>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 800114a:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8001150:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == LEG_STATUS_RUNUP2)
 8001156:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d11f      	bne.n	800119e <HAL_TIM_PeriodElapsedCallback+0xaa>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legForward);	//cấu hình chân legDir để tiến
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001164:	4825      	ldr	r0, [pc, #148]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001166:	f005 f931 	bl	80063cc <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 800116a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800116e:	4823      	ldr	r0, [pc, #140]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001170:	f005 f945 	bl	80063fe <HAL_GPIO_TogglePin>
				trackingLeg++;
 8001174:	4b22      	ldr	r3, [pc, #136]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	4a21      	ldr	r2, [pc, #132]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800117c:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	4a1f      	ldr	r2, [pc, #124]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001186:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP2)
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001190:	db05      	blt.n	800119e <HAL_TIM_PeriodElapsedCallback+0xaa>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8001192:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d11f      	bne.n	80011e6 <HAL_TIM_PeriodElapsedCallback+0xf2>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ac:	4813      	ldr	r0, [pc, #76]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x108>)
 80011ae:	f005 f90d 	bl	80063cc <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 80011b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011b6:	4811      	ldr	r0, [pc, #68]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x108>)
 80011b8:	f005 f921 	bl	80063fe <HAL_GPIO_TogglePin>
				trackingLeg++;
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80011c4:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80011ce:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_END)
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80011d8:	db05      	blt.n	80011e6 <HAL_TIM_PeriodElapsedCallback+0xf2>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	24000b60 	.word	0x24000b60
 80011f4:	240009c8 	.word	0x240009c8
 80011f8:	24000b00 	.word	0x24000b00
 80011fc:	58020c00 	.word	0x58020c00
 8001200:	240009c0 	.word	0x240009c0
 8001204:	24000a1c 	.word	0x24000a1c

08001208 <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	e01f      	b.n	8001258 <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 8001218:	79fa      	ldrb	r2, [r7, #7]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 8001228:	2201      	movs	r2, #1
 800122a:	2104      	movs	r1, #4
 800122c:	480e      	ldr	r0, [pc, #56]	; (8001268 <SendByteSPI+0x60>)
 800122e:	f005 f8cd 	bl	80063cc <HAL_GPIO_WritePin>
 8001232:	e004      	b.n	800123e <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  	// SID=0
 8001234:	2200      	movs	r2, #0
 8001236:	2104      	movs	r1, #4
 8001238:	480b      	ldr	r0, [pc, #44]	; (8001268 <SendByteSPI+0x60>)
 800123a:	f005 f8c7 	bl	80063cc <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 800123e:	2200      	movs	r2, #0
 8001240:	2101      	movs	r1, #1
 8001242:	480a      	ldr	r0, [pc, #40]	; (800126c <SendByteSPI+0x64>)
 8001244:	f005 f8c2 	bl	80063cc <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8001248:	2201      	movs	r2, #1
 800124a:	2101      	movs	r1, #1
 800124c:	4807      	ldr	r0, [pc, #28]	; (800126c <SendByteSPI+0x64>)
 800124e:	f005 f8bd 	bl	80063cc <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3301      	adds	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b07      	cmp	r3, #7
 800125c:	dddc      	ble.n	8001218 <SendByteSPI+0x10>

	}
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	58021800 	.word	0x58021800
 800126c:	58020400 	.word	0x58020400

08001270 <ST7920_SendCmd>:

void ST7920_SendCmd (uint8_t cmd)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 800127a:	2201      	movs	r2, #1
 800127c:	2101      	movs	r1, #1
 800127e:	480f      	ldr	r0, [pc, #60]	; (80012bc <ST7920_SendCmd+0x4c>)
 8001280:	f005 f8a4 	bl	80063cc <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  		// send the SYNC + RS(0)
 8001284:	20f8      	movs	r0, #248	; 0xf8
 8001286:	f7ff ffbf 	bl	8001208 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  		// send the higher nibble first
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	f023 030f 	bic.w	r3, r3, #15
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ffb8 	bl	8001208 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  	// send the lower nibble
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ffb2 	bl	8001208 <SendByteSPI>
	delayUs(50);
 80012a4:	2032      	movs	r0, #50	; 0x32
 80012a6:	f7ff f9b7 	bl	8000618 <delayUs>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 80012aa:	2200      	movs	r2, #0
 80012ac:	2101      	movs	r1, #1
 80012ae:	4803      	ldr	r0, [pc, #12]	; (80012bc <ST7920_SendCmd+0x4c>)
 80012b0:	f005 f88c 	bl	80063cc <HAL_GPIO_WritePin>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	58021800 	.word	0x58021800

080012c0 <ST7920_Init>:
	}
}


void ST7920_Init (void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 80012c4:	2200      	movs	r2, #0
 80012c6:	2108      	movs	r1, #8
 80012c8:	481c      	ldr	r0, [pc, #112]	; (800133c <ST7920_Init+0x7c>)
 80012ca:	f005 f87f 	bl	80063cc <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 80012ce:	200a      	movs	r0, #10
 80012d0:	f001 f8da 	bl	8002488 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 80012d4:	2201      	movs	r2, #1
 80012d6:	2108      	movs	r1, #8
 80012d8:	4818      	ldr	r0, [pc, #96]	; (800133c <ST7920_Init+0x7c>)
 80012da:	f005 f877 	bl	80063cc <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 80012de:	2032      	movs	r0, #50	; 0x32
 80012e0:	f001 f8d2 	bl	8002488 <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 80012e4:	2030      	movs	r0, #48	; 0x30
 80012e6:	f7ff ffc3 	bl	8001270 <ST7920_SendCmd>
	delayUs(110);  //  >100us delay
 80012ea:	206e      	movs	r0, #110	; 0x6e
 80012ec:	f7ff f994 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x30);  // 8bit mode
 80012f0:	2030      	movs	r0, #48	; 0x30
 80012f2:	f7ff ffbd 	bl	8001270 <ST7920_SendCmd>
	delayUs(40);  // >37us delay
 80012f6:	2028      	movs	r0, #40	; 0x28
 80012f8:	f7ff f98e 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 80012fc:	2008      	movs	r0, #8
 80012fe:	f7ff ffb7 	bl	8001270 <ST7920_SendCmd>
	delayUs(110);  // >100us delay
 8001302:	206e      	movs	r0, #110	; 0x6e
 8001304:	f7ff f988 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x01);  // clear screen
 8001308:	2001      	movs	r0, #1
 800130a:	f7ff ffb1 	bl	8001270 <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 800130e:	200c      	movs	r0, #12
 8001310:	f001 f8ba 	bl	8002488 <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8001314:	2006      	movs	r0, #6
 8001316:	f7ff ffab 	bl	8001270 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 800131a:	2001      	movs	r0, #1
 800131c:	f001 f8b4 	bl	8002488 <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 8001320:	200c      	movs	r0, #12
 8001322:	f7ff ffa5 	bl	8001270 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8001326:	2001      	movs	r0, #1
 8001328:	f001 f8ae 	bl	8002488 <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 800132c:	2002      	movs	r0, #2
 800132e:	f7ff ff9f 	bl	8001270 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8001332:	2001      	movs	r0, #1
 8001334:	f001 f8a8 	bl	8002488 <HAL_Delay>

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	58021800 	.word	0x58021800

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001344:	f001 f80e 	bl	8002364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001348:	f000 f84c 	bl	80013e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134c:	f000 fb2c 	bl	80019a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001350:	f000 faea 	bl	8001928 <MX_DMA_Init>
  MX_ADC3_Init();
 8001354:	f000 f8fc 	bl	8001550 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8001358:	f000 fa02 	bl	8001760 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800135c:	f000 fa4c 	bl	80017f8 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8001360:	f000 f97a 	bl	8001658 <MX_TIM7_Init>
  MX_UART7_Init();
 8001364:	f000 f9b0 	bl	80016c8 <MX_UART7_Init>
  MX_USART6_UART_Init();
 8001368:	f000 fa92 	bl	8001890 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  delayUs_Init();
 800136c:	f7ff f934 	bl	80005d8 <delayUs_Init>
  peripheralUART_Init();
 8001370:	f7ff f978 	bl	8000664 <peripheralUART_Init>
  peripheralADC_Init();
 8001374:	f7ff fa92 	bl	800089c <peripheralADC_Init>
  positionControl_Init();
 8001378:	f7ff feac 	bl	80010d4 <positionControl_Init>
  ST7920_Init();
 800137c:	f7ff ffa0 	bl	80012c0 <ST7920_Init>

  tracking = 1000;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <main+0x94>)
 8001382:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001386:	601a      	str	r2, [r3, #0]
  brake();
 8001388:	f7ff fe90 	bl	80010ac <brake>
  compassReset();
 800138c:	f7ff fa2e 	bl	80007ec <compassReset>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	2101      	movs	r1, #1
 8001394:	4810      	ldr	r0, [pc, #64]	; (80013d8 <main+0x98>)
 8001396:	f005 f819 	bl	80063cc <HAL_GPIO_WritePin>
  HAL_Delay(INIT_TIME);
 800139a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800139e:	f001 f873 	bl	8002488 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  testPWM();
	  PIDyaw(compassData, 0);
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <main+0x9c>)
 80013a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fb74 	bl	8000a98 <PIDyaw>
	  PIDpit(adc3Value[0], 300);
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <main+0xa0>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fcb9 	bl	8000d30 <PIDpit>
	  PIDroL(adc3Value[1], 1000);
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <main+0xa0>)
 80013c0:	885b      	ldrh	r3, [r3, #2]
 80013c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fc0e 	bl	8000be8 <PIDroL>
	  roL_pit_yaw_mixSpeed();
 80013cc:	f7ff fd48 	bl	8000e60 <roL_pit_yaw_mixSpeed>
	  PIDyaw(compassData, 0);
 80013d0:	e7e7      	b.n	80013a2 <main+0x62>
 80013d2:	bf00      	nop
 80013d4:	240009e8 	.word	0x240009e8
 80013d8:	58020400 	.word	0x58020400
 80013dc:	240007e8 	.word	0x240007e8
 80013e0:	24000b58 	.word	0x24000b58

080013e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0cc      	sub	sp, #304	; 0x130
 80013e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013ee:	224c      	movs	r2, #76	; 0x4c
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f00b fdb0 	bl	800cf58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013fc:	2220      	movs	r2, #32
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f00b fda9 	bl	800cf58 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	4618      	mov	r0, r3
 800140c:	23bc      	movs	r3, #188	; 0xbc
 800140e:	461a      	mov	r2, r3
 8001410:	2100      	movs	r1, #0
 8001412:	f00b fda1 	bl	800cf58 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001416:	2002      	movs	r0, #2
 8001418:	f005 f80c 	bl	8006434 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	4b49      	ldr	r3, [pc, #292]	; (8001548 <SystemClock_Config+0x164>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	4a48      	ldr	r2, [pc, #288]	; (8001548 <SystemClock_Config+0x164>)
 8001428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800142c:	6193      	str	r3, [r2, #24]
 800142e:	4b46      	ldr	r3, [pc, #280]	; (8001548 <SystemClock_Config+0x164>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	4b44      	ldr	r3, [pc, #272]	; (800154c <SystemClock_Config+0x168>)
 800143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143e:	4a43      	ldr	r2, [pc, #268]	; (800154c <SystemClock_Config+0x168>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001446:	4b41      	ldr	r3, [pc, #260]	; (800154c <SystemClock_Config+0x168>)
 8001448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144a:	f003 0201 	and.w	r2, r3, #1
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001456:	bf00      	nop
 8001458:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <SystemClock_Config+0x164>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001464:	d1f8      	bne.n	8001458 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001466:	2302      	movs	r3, #2
 8001468:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800146c:	2301      	movs	r3, #1
 800146e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001472:	2340      	movs	r3, #64	; 0x40
 8001474:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001478:	2302      	movs	r3, #2
 800147a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001484:	2304      	movs	r3, #4
 8001486:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 800148a:	233c      	movs	r3, #60	; 0x3c
 800148c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001490:	2302      	movs	r3, #2
 8001492:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001496:	2302      	movs	r3, #2
 8001498:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800149c:	2302      	movs	r3, #2
 800149e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80014a2:	230c      	movs	r3, #12
 80014a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014b8:	4618      	mov	r0, r3
 80014ba:	f004 fff5 	bl	80064a8 <HAL_RCC_OscConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80014c4:	f000 fb9c 	bl	8001c00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c8:	233f      	movs	r3, #63	; 0x3f
 80014ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ce:	2303      	movs	r3, #3
 80014d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80014da:	2308      	movs	r3, #8
 80014dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80014e0:	2340      	movs	r3, #64	; 0x40
 80014e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80014e6:	2340      	movs	r3, #64	; 0x40
 80014e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80014ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80014f4:	2340      	movs	r3, #64	; 0x40
 80014f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014fe:	2104      	movs	r1, #4
 8001500:	4618      	mov	r0, r3
 8001502:	f005 fba9 	bl	8006c58 <HAL_RCC_ClockConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 800150c:	f000 fb78 	bl	8001c00 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 8001510:	f107 0308 	add.w	r3, r7, #8
 8001514:	2203      	movs	r2, #3
 8001516:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	2200      	movs	r2, #0
 800151e:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	2200      	movs	r2, #0
 8001526:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	4618      	mov	r0, r3
 800152e:	f005 ff17 	bl	8007360 <HAL_RCCEx_PeriphCLKConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0x158>
  {
    Error_Handler();
 8001538:	f000 fb62 	bl	8001c00 <Error_Handler>
  }
}
 800153c:	bf00      	nop
 800153e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	58024800 	.word	0x58024800
 800154c:	58000400 	.word	0x58000400

08001550 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
 8001564:	615a      	str	r2, [r3, #20]
 8001566:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8001568:	4b36      	ldr	r3, [pc, #216]	; (8001644 <MX_ADC3_Init+0xf4>)
 800156a:	4a37      	ldr	r2, [pc, #220]	; (8001648 <MX_ADC3_Init+0xf8>)
 800156c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800156e:	4b35      	ldr	r3, [pc, #212]	; (8001644 <MX_ADC3_Init+0xf4>)
 8001570:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001574:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001576:	4b33      	ldr	r3, [pc, #204]	; (8001644 <MX_ADC3_Init+0xf4>)
 8001578:	2208      	movs	r2, #8
 800157a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800157c:	4b31      	ldr	r3, [pc, #196]	; (8001644 <MX_ADC3_Init+0xf4>)
 800157e:	2201      	movs	r2, #1
 8001580:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001582:	4b30      	ldr	r3, [pc, #192]	; (8001644 <MX_ADC3_Init+0xf4>)
 8001584:	2204      	movs	r2, #4
 8001586:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001588:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <MX_ADC3_Init+0xf4>)
 800158a:	2200      	movs	r2, #0
 800158c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800158e:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <MX_ADC3_Init+0xf4>)
 8001590:	2201      	movs	r2, #1
 8001592:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 8001594:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <MX_ADC3_Init+0xf4>)
 8001596:	2203      	movs	r2, #3
 8001598:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800159a:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <MX_ADC3_Init+0xf4>)
 800159c:	2200      	movs	r2, #0
 800159e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a0:	4b28      	ldr	r3, [pc, #160]	; (8001644 <MX_ADC3_Init+0xf4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015a6:	4b27      	ldr	r3, [pc, #156]	; (8001644 <MX_ADC3_Init+0xf4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80015ac:	4b25      	ldr	r3, [pc, #148]	; (8001644 <MX_ADC3_Init+0xf4>)
 80015ae:	2203      	movs	r2, #3
 80015b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <MX_ADC3_Init+0xf4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80015b8:	4b22      	ldr	r3, [pc, #136]	; (8001644 <MX_ADC3_Init+0xf4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <MX_ADC3_Init+0xf4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80015c6:	481f      	ldr	r0, [pc, #124]	; (8001644 <MX_ADC3_Init+0xf4>)
 80015c8:	f001 f97e 	bl	80028c8 <HAL_ADC_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80015d2:	f000 fb15 	bl	8001c00 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015d6:	4b1d      	ldr	r3, [pc, #116]	; (800164c <MX_ADC3_Init+0xfc>)
 80015d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015da:	2306      	movs	r3, #6
 80015dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 80015de:	2306      	movs	r3, #6
 80015e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015e2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80015e6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015e8:	2304      	movs	r3, #4
 80015ea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	4619      	mov	r1, r3
 80015f4:	4813      	ldr	r0, [pc, #76]	; (8001644 <MX_ADC3_Init+0xf4>)
 80015f6:	f001 fbe9 	bl	8002dcc <HAL_ADC_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001600:	f000 fafe 	bl	8001c00 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_ADC3_Init+0x100>)
 8001606:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001608:	230c      	movs	r3, #12
 800160a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	4619      	mov	r1, r3
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <MX_ADC3_Init+0xf4>)
 8001612:	f001 fbdb 	bl	8002dcc <HAL_ADC_ConfigChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 800161c:	f000 faf0 	bl	8001c00 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_ADC3_Init+0x104>)
 8001622:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001624:	2312      	movs	r3, #18
 8001626:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_ADC3_Init+0xf4>)
 800162e:	f001 fbcd 	bl	8002dcc <HAL_ADC_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 8001638:	f000 fae2 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	24000824 	.word	0x24000824
 8001648:	58026000 	.word	0x58026000
 800164c:	04300002 	.word	0x04300002
 8001650:	2a000400 	.word	0x2a000400
 8001654:	2e300800 	.word	0x2e300800

08001658 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_TIM7_Init+0x68>)
 800166a:	4a16      	ldr	r2, [pc, #88]	; (80016c4 <MX_TIM7_Init+0x6c>)
 800166c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <MX_TIM7_Init+0x68>)
 8001670:	f640 125f 	movw	r2, #2399	; 0x95f
 8001674:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_TIM7_Init+0x68>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <MX_TIM7_Init+0x68>)
 800167e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001682:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_TIM7_Init+0x68>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800168a:	480d      	ldr	r0, [pc, #52]	; (80016c0 <MX_TIM7_Init+0x68>)
 800168c:	f007 fd1c 	bl	80090c8 <HAL_TIM_Base_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001696:	f000 fab3 	bl	8001c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	4619      	mov	r1, r3
 80016a6:	4806      	ldr	r0, [pc, #24]	; (80016c0 <MX_TIM7_Init+0x68>)
 80016a8:	f007 ff46 	bl	8009538 <HAL_TIMEx_MasterConfigSynchronization>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80016b2:	f000 faa5 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	24000b60 	.word	0x24000b60
 80016c4:	40001400 	.word	0x40001400

080016c8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <MX_UART7_Init+0x90>)
 80016ce:	4a23      	ldr	r2, [pc, #140]	; (800175c <MX_UART7_Init+0x94>)
 80016d0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 80016d2:	4b21      	ldr	r3, [pc, #132]	; (8001758 <MX_UART7_Init+0x90>)
 80016d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016d8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <MX_UART7_Init+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_UART7_Init+0x90>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <MX_UART7_Init+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_UART7_Init+0x90>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <MX_UART7_Init+0x90>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <MX_UART7_Init+0x90>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <MX_UART7_Init+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_UART7_Init+0x90>)
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <MX_UART7_Init+0x90>)
 800170c:	2200      	movs	r2, #0
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001710:	4811      	ldr	r0, [pc, #68]	; (8001758 <MX_UART7_Init+0x90>)
 8001712:	f007 ffb7 	bl	8009684 <HAL_UART_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 800171c:	f000 fa70 	bl	8001c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001720:	2100      	movs	r1, #0
 8001722:	480d      	ldr	r0, [pc, #52]	; (8001758 <MX_UART7_Init+0x90>)
 8001724:	f00b fb09 	bl	800cd3a <HAL_UARTEx_SetTxFifoThreshold>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800172e:	f000 fa67 	bl	8001c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001732:	2100      	movs	r1, #0
 8001734:	4808      	ldr	r0, [pc, #32]	; (8001758 <MX_UART7_Init+0x90>)
 8001736:	f00b fb3e 	bl	800cdb6 <HAL_UARTEx_SetRxFifoThreshold>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001740:	f000 fa5e 	bl	8001c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001744:	4804      	ldr	r0, [pc, #16]	; (8001758 <MX_UART7_Init+0x90>)
 8001746:	f00b fabf 	bl	800ccc8 <HAL_UARTEx_DisableFifoMode>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001750:	f000 fa56 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	24000120 	.word	0x24000120
 800175c:	40007800 	.word	0x40007800

08001760 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <MX_USART1_UART_Init+0x90>)
 8001766:	4a23      	ldr	r2, [pc, #140]	; (80017f4 <MX_USART1_UART_Init+0x94>)
 8001768:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <MX_USART1_UART_Init+0x90>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <MX_USART1_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <MX_USART1_UART_Init+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MX_USART1_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_USART1_UART_Init+0x90>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <MX_USART1_UART_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <MX_USART1_UART_Init+0x90>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_USART1_UART_Init+0x90>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_USART1_UART_Init+0x90>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <MX_USART1_UART_Init+0x90>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017a8:	4811      	ldr	r0, [pc, #68]	; (80017f0 <MX_USART1_UART_Init+0x90>)
 80017aa:	f007 ff6b 	bl	8009684 <HAL_UART_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80017b4:	f000 fa24 	bl	8001c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b8:	2100      	movs	r1, #0
 80017ba:	480d      	ldr	r0, [pc, #52]	; (80017f0 <MX_USART1_UART_Init+0x90>)
 80017bc:	f00b fabd 	bl	800cd3a <HAL_UARTEx_SetTxFifoThreshold>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80017c6:	f000 fa1b 	bl	8001c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ca:	2100      	movs	r1, #0
 80017cc:	4808      	ldr	r0, [pc, #32]	; (80017f0 <MX_USART1_UART_Init+0x90>)
 80017ce:	f00b faf2 	bl	800cdb6 <HAL_UARTEx_SetRxFifoThreshold>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017d8:	f000 fa12 	bl	8001c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017dc:	4804      	ldr	r0, [pc, #16]	; (80017f0 <MX_USART1_UART_Init+0x90>)
 80017de:	f00b fa73 	bl	800ccc8 <HAL_UARTEx_DisableFifoMode>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017e8:	f000 fa0a 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	24000930 	.word	0x24000930
 80017f4:	40011000 	.word	0x40011000

080017f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017fc:	4b22      	ldr	r3, [pc, #136]	; (8001888 <MX_USART3_UART_Init+0x90>)
 80017fe:	4a23      	ldr	r2, [pc, #140]	; (800188c <MX_USART3_UART_Init+0x94>)
 8001800:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8001802:	4b21      	ldr	r3, [pc, #132]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001804:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001808:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800180a:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <MX_USART3_UART_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001810:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001816:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <MX_USART3_UART_Init+0x90>)
 800181e:	220c      	movs	r2, #12
 8001820:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <MX_USART3_UART_Init+0x90>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001836:	2200      	movs	r2, #0
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <MX_USART3_UART_Init+0x90>)
 800183c:	2200      	movs	r2, #0
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001840:	4811      	ldr	r0, [pc, #68]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001842:	f007 ff1f 	bl	8009684 <HAL_UART_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800184c:	f000 f9d8 	bl	8001c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001850:	2100      	movs	r1, #0
 8001852:	480d      	ldr	r0, [pc, #52]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001854:	f00b fa71 	bl	800cd3a <HAL_UARTEx_SetTxFifoThreshold>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800185e:	f000 f9cf 	bl	8001c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001862:	2100      	movs	r1, #0
 8001864:	4808      	ldr	r0, [pc, #32]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001866:	f00b faa6 	bl	800cdb6 <HAL_UARTEx_SetRxFifoThreshold>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001870:	f000 f9c6 	bl	8001c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001874:	4804      	ldr	r0, [pc, #16]	; (8001888 <MX_USART3_UART_Init+0x90>)
 8001876:	f00b fa27 	bl	800ccc8 <HAL_UARTEx_DisableFifoMode>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001880:	f000 f9be 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	2400025c 	.word	0x2400025c
 800188c:	40004800 	.word	0x40004800

08001890 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001894:	4b22      	ldr	r3, [pc, #136]	; (8001920 <MX_USART6_UART_Init+0x90>)
 8001896:	4a23      	ldr	r2, [pc, #140]	; (8001924 <MX_USART6_UART_Init+0x94>)
 8001898:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800189a:	4b21      	ldr	r3, [pc, #132]	; (8001920 <MX_USART6_UART_Init+0x90>)
 800189c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80018a2:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <MX_USART6_UART_Init+0x90>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <MX_USART6_UART_Init+0x90>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80018ae:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <MX_USART6_UART_Init+0x90>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80018b4:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <MX_USART6_UART_Init+0x90>)
 80018b6:	220c      	movs	r2, #12
 80018b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ba:	4b19      	ldr	r3, [pc, #100]	; (8001920 <MX_USART6_UART_Init+0x90>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <MX_USART6_UART_Init+0x90>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <MX_USART6_UART_Init+0x90>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <MX_USART6_UART_Init+0x90>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <MX_USART6_UART_Init+0x90>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018d8:	4811      	ldr	r0, [pc, #68]	; (8001920 <MX_USART6_UART_Init+0x90>)
 80018da:	f007 fed3 	bl	8009684 <HAL_UART_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80018e4:	f000 f98c 	bl	8001c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018e8:	2100      	movs	r1, #0
 80018ea:	480d      	ldr	r0, [pc, #52]	; (8001920 <MX_USART6_UART_Init+0x90>)
 80018ec:	f00b fa25 	bl	800cd3a <HAL_UARTEx_SetTxFifoThreshold>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80018f6:	f000 f983 	bl	8001c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018fa:	2100      	movs	r1, #0
 80018fc:	4808      	ldr	r0, [pc, #32]	; (8001920 <MX_USART6_UART_Init+0x90>)
 80018fe:	f00b fa5a 	bl	800cdb6 <HAL_UARTEx_SetRxFifoThreshold>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001908:	f000 f97a 	bl	8001c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800190c:	4804      	ldr	r0, [pc, #16]	; (8001920 <MX_USART6_UART_Init+0x90>)
 800190e:	f00b f9db 	bl	800ccc8 <HAL_UARTEx_DisableFifoMode>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001918:	f000 f972 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	24000a50 	.word	0x24000a50
 8001924:	40011400 	.word	0x40011400

08001928 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800192e:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <MX_DMA_Init+0x7c>)
 8001930:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001934:	4a1b      	ldr	r2, [pc, #108]	; (80019a4 <MX_DMA_Init+0x7c>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800193e:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <MX_DMA_Init+0x7c>)
 8001940:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800194c:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <MX_DMA_Init+0x7c>)
 800194e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001952:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <MX_DMA_Init+0x7c>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_DMA_Init+0x7c>)
 800195e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	200d      	movs	r0, #13
 8001970:	f002 f82b 	bl	80039ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001974:	200d      	movs	r0, #13
 8001976:	f002 f842 	bl	80039fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	200e      	movs	r0, #14
 8001980:	f002 f823 	bl	80039ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001984:	200e      	movs	r0, #14
 8001986:	f002 f83a 	bl	80039fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	203a      	movs	r0, #58	; 0x3a
 8001990:	f002 f81b 	bl	80039ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001994:	203a      	movs	r0, #58	; 0x3a
 8001996:	f002 f832 	bl	80039fe <HAL_NVIC_EnableIRQ>

}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	58024400 	.word	0x58024400

080019a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	; 0x30
 80019ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019be:	4b89      	ldr	r3, [pc, #548]	; (8001be4 <MX_GPIO_Init+0x23c>)
 80019c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c4:	4a87      	ldr	r2, [pc, #540]	; (8001be4 <MX_GPIO_Init+0x23c>)
 80019c6:	f043 0320 	orr.w	r3, r3, #32
 80019ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ce:	4b85      	ldr	r3, [pc, #532]	; (8001be4 <MX_GPIO_Init+0x23c>)
 80019d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d4:	f003 0320 	and.w	r3, r3, #32
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019dc:	4b81      	ldr	r3, [pc, #516]	; (8001be4 <MX_GPIO_Init+0x23c>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e2:	4a80      	ldr	r2, [pc, #512]	; (8001be4 <MX_GPIO_Init+0x23c>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ec:	4b7d      	ldr	r3, [pc, #500]	; (8001be4 <MX_GPIO_Init+0x23c>)
 80019ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	4b7a      	ldr	r3, [pc, #488]	; (8001be4 <MX_GPIO_Init+0x23c>)
 80019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a00:	4a78      	ldr	r2, [pc, #480]	; (8001be4 <MX_GPIO_Init+0x23c>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0a:	4b76      	ldr	r3, [pc, #472]	; (8001be4 <MX_GPIO_Init+0x23c>)
 8001a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a18:	4b72      	ldr	r3, [pc, #456]	; (8001be4 <MX_GPIO_Init+0x23c>)
 8001a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1e:	4a71      	ldr	r2, [pc, #452]	; (8001be4 <MX_GPIO_Init+0x23c>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a28:	4b6e      	ldr	r3, [pc, #440]	; (8001be4 <MX_GPIO_Init+0x23c>)
 8001a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a36:	4b6b      	ldr	r3, [pc, #428]	; (8001be4 <MX_GPIO_Init+0x23c>)
 8001a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3c:	4a69      	ldr	r2, [pc, #420]	; (8001be4 <MX_GPIO_Init+0x23c>)
 8001a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a46:	4b67      	ldr	r3, [pc, #412]	; (8001be4 <MX_GPIO_Init+0x23c>)
 8001a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a54:	4b63      	ldr	r3, [pc, #396]	; (8001be4 <MX_GPIO_Init+0x23c>)
 8001a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5a:	4a62      	ldr	r2, [pc, #392]	; (8001be4 <MX_GPIO_Init+0x23c>)
 8001a5c:	f043 0310 	orr.w	r3, r3, #16
 8001a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a64:	4b5f      	ldr	r3, [pc, #380]	; (8001be4 <MX_GPIO_Init+0x23c>)
 8001a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6a:	f003 0310 	and.w	r3, r3, #16
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a72:	4b5c      	ldr	r3, [pc, #368]	; (8001be4 <MX_GPIO_Init+0x23c>)
 8001a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a78:	4a5a      	ldr	r2, [pc, #360]	; (8001be4 <MX_GPIO_Init+0x23c>)
 8001a7a:	f043 0308 	orr.w	r3, r3, #8
 8001a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a82:	4b58      	ldr	r3, [pc, #352]	; (8001be4 <MX_GPIO_Init+0x23c>)
 8001a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin, GPIO_PIN_RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	f240 7104 	movw	r1, #1796	; 0x704
 8001a96:	4854      	ldr	r0, [pc, #336]	; (8001be8 <MX_GPIO_Init+0x240>)
 8001a98:	f004 fc98 	bl	80063cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2110      	movs	r1, #16
 8001aa0:	4852      	ldr	r0, [pc, #328]	; (8001bec <MX_GPIO_Init+0x244>)
 8001aa2:	f004 fc93 	bl	80063cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f242 0167 	movw	r1, #8295	; 0x2067
 8001aac:	4850      	ldr	r0, [pc, #320]	; (8001bf0 <MX_GPIO_Init+0x248>)
 8001aae:	f004 fc8d 	bl	80063cc <HAL_GPIO_WritePin>
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|leftArmDir_Pin 
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f643 610d 	movw	r1, #15885	; 0x3e0d
 8001ab8:	484e      	ldr	r0, [pc, #312]	; (8001bf4 <MX_GPIO_Init+0x24c>)
 8001aba:	f004 fc87 	bl	80063cc <HAL_GPIO_WritePin>
                          |rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin|rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2182      	movs	r1, #130	; 0x82
 8001ac2:	484d      	ldr	r0, [pc, #308]	; (8001bf8 <MX_GPIO_Init+0x250>)
 8001ac4:	f004 fc82 	bl	80063cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f44f 4145 	mov.w	r1, #50432	; 0xc500
 8001ace:	484b      	ldr	r0, [pc, #300]	; (8001bfc <MX_GPIO_Init+0x254>)
 8001ad0:	f004 fc7c 	bl	80063cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : cylinder_SetTee_Pin cylinder_RigtArmHoldBallTop_Pin cylinder_HoldBall_Pin cylinder_LeftArmHoldBall_Pin */
  GPIO_InitStruct.Pin = cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin;
 8001ad4:	f240 7304 	movw	r3, #1796	; 0x704
 8001ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f107 031c 	add.w	r3, r7, #28
 8001aea:	4619      	mov	r1, r3
 8001aec:	483e      	ldr	r0, [pc, #248]	; (8001be8 <MX_GPIO_Init+0x240>)
 8001aee:	f004 fabd 	bl	800606c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001af2:	2310      	movs	r3, #16
 8001af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4619      	mov	r1, r3
 8001b08:	4838      	ldr	r0, [pc, #224]	; (8001bec <MX_GPIO_Init+0x244>)
 8001b0a:	f004 faaf 	bl	800606c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 cylinder_RigtArmTrans_Pin cylinder_PassBall_Pin cylinder_LeftArmTrans_Pin 
                           cylinder_RigtArmHoldBallBot_Pin cylinder_LiftBall_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 8001b0e:	f242 0367 	movw	r3, #8295	; 0x2067
 8001b12:	61fb      	str	r3, [r7, #28]
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b14:	2301      	movs	r3, #1
 8001b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	f107 031c 	add.w	r3, r7, #28
 8001b24:	4619      	mov	r1, r3
 8001b26:	4832      	ldr	r0, [pc, #200]	; (8001bf0 <MX_GPIO_Init+0x248>)
 8001b28:	f004 faa0 	bl	800606c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001b2c:	230d      	movs	r3, #13
 8001b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b34:	2301      	movs	r3, #1
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	4619      	mov	r1, r3
 8001b42:	482c      	ldr	r0, [pc, #176]	; (8001bf4 <MX_GPIO_Init+0x24c>)
 8001b44:	f004 fa92 	bl	800606c <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4826      	ldr	r0, [pc, #152]	; (8001bf8 <MX_GPIO_Init+0x250>)
 8001b60:	f004 fa84 	bl	800606c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD10 legDir_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|legDir_Pin;
 8001b64:	f44f 438a 	mov.w	r3, #17664	; 0x4500
 8001b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	481f      	ldr	r0, [pc, #124]	; (8001bfc <MX_GPIO_Init+0x254>)
 8001b7e:	f004 fa75 	bl	800606c <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 8001b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4818      	ldr	r0, [pc, #96]	; (8001bfc <MX_GPIO_Init+0x254>)
 8001b9c:	f004 fa66 	bl	800606c <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8001ba0:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 8001ba4:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	480e      	ldr	r0, [pc, #56]	; (8001bf4 <MX_GPIO_Init+0x24c>)
 8001bba:	f004 fa57 	bl	800606c <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4808      	ldr	r0, [pc, #32]	; (8001bf8 <MX_GPIO_Init+0x250>)
 8001bd6:	f004 fa49 	bl	800606c <HAL_GPIO_Init>

}
 8001bda:	bf00      	nop
 8001bdc:	3730      	adds	r7, #48	; 0x30
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	58024400 	.word	0x58024400
 8001be8:	58020000 	.word	0x58020000
 8001bec:	58020800 	.word	0x58020800
 8001bf0:	58020400 	.word	0x58020400
 8001bf4:	58021800 	.word	0x58021800
 8001bf8:	58021000 	.word	0x58021000
 8001bfc:	58020c00 	.word	0x58020c00

08001c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_MspInit+0x30>)
 8001c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c1c:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_MspInit+0x30>)
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_MspInit+0x30>)
 8001c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	58024400 	.word	0x58024400

08001c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a33      	ldr	r2, [pc, #204]	; (8001d30 <HAL_ADC_MspInit+0xec>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d15f      	bne.n	8001d26 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c66:	4b33      	ldr	r3, [pc, #204]	; (8001d34 <HAL_ADC_MspInit+0xf0>)
 8001c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6c:	4a31      	ldr	r2, [pc, #196]	; (8001d34 <HAL_ADC_MspInit+0xf0>)
 8001c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c76:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <HAL_ADC_MspInit+0xf0>)
 8001c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c84:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <HAL_ADC_MspInit+0xf0>)
 8001c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8a:	4a2a      	ldr	r2, [pc, #168]	; (8001d34 <HAL_ADC_MspInit+0xf0>)
 8001c8c:	f043 0304 	orr.w	r3, r3, #4
 8001c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c94:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <HAL_ADC_MspInit+0xf0>)
 8001c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PC0     ------> ADC3_INP10
    PC1     ------> ADC3_INP11
    PC3_C     ------> ADC3_INP1 
    */
    GPIO_InitStruct.Pin = RollRigt_Pin|RollLeft_Pin;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4820      	ldr	r0, [pc, #128]	; (8001d38 <HAL_ADC_MspInit+0xf4>)
 8001cb6:	f004 f9d9 	bl	800606c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001cba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001cbe:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001cc2:	f000 fc0f 	bl	80024e4 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream2;
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001cc8:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <HAL_ADC_MspInit+0xfc>)
 8001cca:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001cce:	2273      	movs	r2, #115	; 0x73
 8001cd0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd8:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001ce0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ce4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001ce8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cec:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001cf0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cf4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001cf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cfc:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d04:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001d0a:	480c      	ldr	r0, [pc, #48]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001d0c:	f001 fe92 	bl	8003a34 <HAL_DMA_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8001d16:	f7ff ff73 	bl	8001c00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a07      	ldr	r2, [pc, #28]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001d1e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d20:	4a06      	ldr	r2, [pc, #24]	; (8001d3c <HAL_ADC_MspInit+0xf8>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d26:	bf00      	nop
 8001d28:	3728      	adds	r7, #40	; 0x28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	58026000 	.word	0x58026000
 8001d34:	58024400 	.word	0x58024400
 8001d38:	58020800 	.word	0x58020800
 8001d3c:	24000750 	.word	0x24000750
 8001d40:	40020040 	.word	0x40020040

08001d44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <HAL_TIM_Base_MspInit+0x48>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d116      	bne.n	8001d84 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <HAL_TIM_Base_MspInit+0x4c>)
 8001d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d5c:	4a0c      	ldr	r2, [pc, #48]	; (8001d90 <HAL_TIM_Base_MspInit+0x4c>)
 8001d5e:	f043 0320 	orr.w	r3, r3, #32
 8001d62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_TIM_Base_MspInit+0x4c>)
 8001d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d6c:	f003 0320 	and.w	r3, r3, #32
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	2037      	movs	r0, #55	; 0x37
 8001d7a:	f001 fe26 	bl	80039ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d7e:	2037      	movs	r0, #55	; 0x37
 8001d80:	f001 fe3d 	bl	80039fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001d84:	bf00      	nop
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40001400 	.word	0x40001400
 8001d90:	58024400 	.word	0x58024400

08001d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b090      	sub	sp, #64	; 0x40
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4aa3      	ldr	r2, [pc, #652]	; (8002040 <HAL_UART_MspInit+0x2ac>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d136      	bne.n	8001e24 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001db6:	4ba3      	ldr	r3, [pc, #652]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001db8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dbc:	4aa1      	ldr	r2, [pc, #644]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001dbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001dc2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001dc6:	4b9f      	ldr	r3, [pc, #636]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001dc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dd4:	4b9b      	ldr	r3, [pc, #620]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dda:	4a9a      	ldr	r2, [pc, #616]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001ddc:	f043 0320 	orr.w	r3, r3, #32
 8001de0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001de4:	4b97      	ldr	r3, [pc, #604]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dea:	f003 0320 	and.w	r3, r3, #32
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 8001df2:	23c0      	movs	r3, #192	; 0xc0
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001e02:	2307      	movs	r3, #7
 8001e04:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	488e      	ldr	r0, [pc, #568]	; (8002048 <HAL_UART_MspInit+0x2b4>)
 8001e0e:	f004 f92d 	bl	800606c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2104      	movs	r1, #4
 8001e16:	2052      	movs	r0, #82	; 0x52
 8001e18:	f001 fdd7 	bl	80039ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001e1c:	2052      	movs	r0, #82	; 0x52
 8001e1e:	f001 fdee 	bl	80039fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e22:	e108      	b.n	8002036 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a88      	ldr	r2, [pc, #544]	; (800204c <HAL_UART_MspInit+0x2b8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d165      	bne.n	8001efa <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e2e:	4b85      	ldr	r3, [pc, #532]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e34:	4a83      	ldr	r2, [pc, #524]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001e36:	f043 0310 	orr.w	r3, r3, #16
 8001e3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e3e:	4b81      	ldr	r3, [pc, #516]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001e40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	623b      	str	r3, [r7, #32]
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4c:	4b7d      	ldr	r3, [pc, #500]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e52:	4a7c      	ldr	r2, [pc, #496]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e5c:	4b79      	ldr	r3, [pc, #484]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	61fb      	str	r3, [r7, #28]
 8001e68:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 8001e6a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e84:	4619      	mov	r1, r3
 8001e86:	4872      	ldr	r0, [pc, #456]	; (8002050 <HAL_UART_MspInit+0x2bc>)
 8001e88:	f004 f8f0 	bl	800606c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8001e8c:	4b71      	ldr	r3, [pc, #452]	; (8002054 <HAL_UART_MspInit+0x2c0>)
 8001e8e:	4a72      	ldr	r2, [pc, #456]	; (8002058 <HAL_UART_MspInit+0x2c4>)
 8001e90:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001e92:	4b70      	ldr	r3, [pc, #448]	; (8002054 <HAL_UART_MspInit+0x2c0>)
 8001e94:	2229      	movs	r2, #41	; 0x29
 8001e96:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e98:	4b6e      	ldr	r3, [pc, #440]	; (8002054 <HAL_UART_MspInit+0x2c0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e9e:	4b6d      	ldr	r3, [pc, #436]	; (8002054 <HAL_UART_MspInit+0x2c0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ea4:	4b6b      	ldr	r3, [pc, #428]	; (8002054 <HAL_UART_MspInit+0x2c0>)
 8001ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eaa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eac:	4b69      	ldr	r3, [pc, #420]	; (8002054 <HAL_UART_MspInit+0x2c0>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eb2:	4b68      	ldr	r3, [pc, #416]	; (8002054 <HAL_UART_MspInit+0x2c0>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001eb8:	4b66      	ldr	r3, [pc, #408]	; (8002054 <HAL_UART_MspInit+0x2c0>)
 8001eba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ebe:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ec0:	4b64      	ldr	r3, [pc, #400]	; (8002054 <HAL_UART_MspInit+0x2c0>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ec6:	4b63      	ldr	r3, [pc, #396]	; (8002054 <HAL_UART_MspInit+0x2c0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ecc:	4861      	ldr	r0, [pc, #388]	; (8002054 <HAL_UART_MspInit+0x2c0>)
 8001ece:	f001 fdb1 	bl	8003a34 <HAL_DMA_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_UART_MspInit+0x148>
      Error_Handler();
 8001ed8:	f7ff fe92 	bl	8001c00 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a5d      	ldr	r2, [pc, #372]	; (8002054 <HAL_UART_MspInit+0x2c0>)
 8001ee0:	679a      	str	r2, [r3, #120]	; 0x78
 8001ee2:	4a5c      	ldr	r2, [pc, #368]	; (8002054 <HAL_UART_MspInit+0x2c0>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2101      	movs	r1, #1
 8001eec:	2025      	movs	r0, #37	; 0x25
 8001eee:	f001 fd6c 	bl	80039ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ef2:	2025      	movs	r0, #37	; 0x25
 8001ef4:	f001 fd83 	bl	80039fe <HAL_NVIC_EnableIRQ>
}
 8001ef8:	e09d      	b.n	8002036 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART3)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a57      	ldr	r2, [pc, #348]	; (800205c <HAL_UART_MspInit+0x2c8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d15d      	bne.n	8001fc0 <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f04:	4b4f      	ldr	r3, [pc, #316]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001f06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f0a:	4a4e      	ldr	r2, [pc, #312]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f14:	4b4b      	ldr	r3, [pc, #300]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001f16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f1e:	61bb      	str	r3, [r7, #24]
 8001f20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f22:	4b48      	ldr	r3, [pc, #288]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f28:	4a46      	ldr	r2, [pc, #280]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001f2a:	f043 0302 	orr.w	r3, r3, #2
 8001f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f32:	4b44      	ldr	r3, [pc, #272]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 8001f40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f52:	2307      	movs	r3, #7
 8001f54:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	483c      	ldr	r0, [pc, #240]	; (8002050 <HAL_UART_MspInit+0x2bc>)
 8001f5e:	f004 f885 	bl	800606c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8001f62:	4b3f      	ldr	r3, [pc, #252]	; (8002060 <HAL_UART_MspInit+0x2cc>)
 8001f64:	4a3f      	ldr	r2, [pc, #252]	; (8002064 <HAL_UART_MspInit+0x2d0>)
 8001f66:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001f68:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_UART_MspInit+0x2cc>)
 8001f6a:	222d      	movs	r2, #45	; 0x2d
 8001f6c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f6e:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <HAL_UART_MspInit+0x2cc>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f74:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <HAL_UART_MspInit+0x2cc>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f7a:	4b39      	ldr	r3, [pc, #228]	; (8002060 <HAL_UART_MspInit+0x2cc>)
 8001f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f80:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f82:	4b37      	ldr	r3, [pc, #220]	; (8002060 <HAL_UART_MspInit+0x2cc>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f88:	4b35      	ldr	r3, [pc, #212]	; (8002060 <HAL_UART_MspInit+0x2cc>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001f8e:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_UART_MspInit+0x2cc>)
 8001f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f94:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f96:	4b32      	ldr	r3, [pc, #200]	; (8002060 <HAL_UART_MspInit+0x2cc>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f9c:	4b30      	ldr	r3, [pc, #192]	; (8002060 <HAL_UART_MspInit+0x2cc>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001fa2:	482f      	ldr	r0, [pc, #188]	; (8002060 <HAL_UART_MspInit+0x2cc>)
 8001fa4:	f001 fd46 	bl	8003a34 <HAL_DMA_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001fae:	f7ff fe27 	bl	8001c00 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a2a      	ldr	r2, [pc, #168]	; (8002060 <HAL_UART_MspInit+0x2cc>)
 8001fb6:	679a      	str	r2, [r3, #120]	; 0x78
 8001fb8:	4a29      	ldr	r2, [pc, #164]	; (8002060 <HAL_UART_MspInit+0x2cc>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001fbe:	e03a      	b.n	8002036 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART6)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a28      	ldr	r2, [pc, #160]	; (8002068 <HAL_UART_MspInit+0x2d4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d135      	bne.n	8002036 <HAL_UART_MspInit+0x2a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fca:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fd0:	4a1c      	ldr	r2, [pc, #112]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001fd2:	f043 0320 	orr.w	r3, r3, #32
 8001fd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001fda:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe8:	4b16      	ldr	r3, [pc, #88]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fee:	4a15      	ldr	r2, [pc, #84]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_UART_MspInit+0x2b0>)
 8001ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 8002006:	23c0      	movs	r3, #192	; 0xc0
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	2300      	movs	r3, #0
 8002014:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002016:	2307      	movs	r3, #7
 8002018:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800201e:	4619      	mov	r1, r3
 8002020:	4812      	ldr	r0, [pc, #72]	; (800206c <HAL_UART_MspInit+0x2d8>)
 8002022:	f004 f823 	bl	800606c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2102      	movs	r1, #2
 800202a:	2047      	movs	r0, #71	; 0x47
 800202c:	f001 fccd 	bl	80039ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002030:	2047      	movs	r0, #71	; 0x47
 8002032:	f001 fce4 	bl	80039fe <HAL_NVIC_EnableIRQ>
}
 8002036:	bf00      	nop
 8002038:	3740      	adds	r7, #64	; 0x40
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40007800 	.word	0x40007800
 8002044:	58024400 	.word	0x58024400
 8002048:	58021400 	.word	0x58021400
 800204c:	40011000 	.word	0x40011000
 8002050:	58020400 	.word	0x58020400
 8002054:	2400088c 	.word	0x2400088c
 8002058:	40020058 	.word	0x40020058
 800205c:	40004800 	.word	0x40004800
 8002060:	240001cc 	.word	0x240001cc
 8002064:	40020440 	.word	0x40020440
 8002068:	40011400 	.word	0x40011400
 800206c:	58020800 	.word	0x58020800

08002070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002082:	e7fe      	b.n	8002082 <HardFault_Handler+0x4>

08002084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002088:	e7fe      	b.n	8002088 <MemManage_Handler+0x4>

0800208a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208e:	e7fe      	b.n	800208e <BusFault_Handler+0x4>

08002090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <UsageFault_Handler+0x4>

08002096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  compassGetDataPeriod++;
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <SysTick_Handler+0x2c>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <SysTick_Handler+0x2c>)
 80020ce:	701a      	strb	r2, [r3, #0]
  if(compassGetDataPeriod > 5)
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <SysTick_Handler+0x2c>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d904      	bls.n	80020e2 <SysTick_Handler+0x22>
  {
	  compassGetDataPeriod = 0;
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <SysTick_Handler+0x2c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
	  compassRequest();
 80020de:	f7fe fb9b 	bl	8000818 <compassRequest>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e2:	f000 f9b1 	bl	8002448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	24000918 	.word	0x24000918

080020f0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <DMA1_Stream2_IRQHandler+0x10>)
 80020f6:	f002 fca7 	bl	8004a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	24000750 	.word	0x24000750

08002104 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	  compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 8002108:	4b07      	ldr	r3, [pc, #28]	; (8002128 <DMA1_Stream3_IRQHandler+0x24>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	b21a      	sxth	r2, r3
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <DMA1_Stream3_IRQHandler+0x24>)
 8002112:	785b      	ldrb	r3, [r3, #1]
 8002114:	b21b      	sxth	r3, r3
 8002116:	4313      	orrs	r3, r2
 8002118:	b21a      	sxth	r2, r3
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <DMA1_Stream3_IRQHandler+0x28>)
 800211c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800211e:	4804      	ldr	r0, [pc, #16]	; (8002130 <DMA1_Stream3_IRQHandler+0x2c>)
 8002120:	f002 fc92 	bl	8004a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	24000728 	.word	0x24000728
 800212c:	240007e8 	.word	0x240007e8
 8002130:	2400088c 	.word	0x2400088c

08002134 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <USART1_IRQHandler+0x10>)
 800213a:	f007 fd6d 	bl	8009c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	24000930 	.word	0x24000930

08002148 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800214c:	4802      	ldr	r0, [pc, #8]	; (8002158 <TIM7_IRQHandler+0x10>)
 800214e:	f007 f811 	bl	8009174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	24000b60 	.word	0x24000b60

0800215c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 8002160:	4b28      	ldr	r3, [pc, #160]	; (8002204 <DMA2_Stream2_IRQHandler+0xa8>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b04      	cmp	r3, #4
 8002166:	d135      	bne.n	80021d4 <DMA2_Stream2_IRQHandler+0x78>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 8002168:	4b27      	ldr	r3, [pc, #156]	; (8002208 <DMA2_Stream2_IRQHandler+0xac>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	b2d1      	uxtb	r1, r2
 8002170:	4a25      	ldr	r2, [pc, #148]	; (8002208 <DMA2_Stream2_IRQHandler+0xac>)
 8002172:	7011      	strb	r1, [r2, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	4b25      	ldr	r3, [pc, #148]	; (800220c <DMA2_Stream2_IRQHandler+0xb0>)
 8002178:	7819      	ldrb	r1, [r3, #0]
 800217a:	4b25      	ldr	r3, [pc, #148]	; (8002210 <DMA2_Stream2_IRQHandler+0xb4>)
 800217c:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 800217e:	4b22      	ldr	r3, [pc, #136]	; (8002208 <DMA2_Stream2_IRQHandler+0xac>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b05      	cmp	r3, #5
 8002184:	d926      	bls.n	80021d4 <DMA2_Stream2_IRQHandler+0x78>
		{
			PS2DataIndex = 0;
 8002186:	4b20      	ldr	r3, [pc, #128]	; (8002208 <DMA2_Stream2_IRQHandler+0xac>)
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 800218c:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <DMA2_Stream2_IRQHandler+0xa8>)
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 8002192:	4b1f      	ldr	r3, [pc, #124]	; (8002210 <DMA2_Stream2_IRQHandler+0xb4>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	b21a      	sxth	r2, r3
 800219a:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <DMA2_Stream2_IRQHandler+0xb4>)
 800219c:	785b      	ldrb	r3, [r3, #1]
 800219e:	b21b      	sxth	r3, r3
 80021a0:	4313      	orrs	r3, r2
 80021a2:	b21a      	sxth	r2, r3
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <DMA2_Stream2_IRQHandler+0xb8>)
 80021a6:	801a      	strh	r2, [r3, #0]
			PS2JoyRigt = (PS2Data[2]<<8) | PS2Data[3];
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <DMA2_Stream2_IRQHandler+0xb4>)
 80021aa:	789b      	ldrb	r3, [r3, #2]
 80021ac:	021b      	lsls	r3, r3, #8
 80021ae:	b21a      	sxth	r2, r3
 80021b0:	4b17      	ldr	r3, [pc, #92]	; (8002210 <DMA2_Stream2_IRQHandler+0xb4>)
 80021b2:	78db      	ldrb	r3, [r3, #3]
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	4313      	orrs	r3, r2
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	4b17      	ldr	r3, [pc, #92]	; (8002218 <DMA2_Stream2_IRQHandler+0xbc>)
 80021bc:	801a      	strh	r2, [r3, #0]
			PS2JoyLeft = (PS2Data[4]<<8) | PS2Data[5];
 80021be:	4b14      	ldr	r3, [pc, #80]	; (8002210 <DMA2_Stream2_IRQHandler+0xb4>)
 80021c0:	791b      	ldrb	r3, [r3, #4]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	4b12      	ldr	r3, [pc, #72]	; (8002210 <DMA2_Stream2_IRQHandler+0xb4>)
 80021c8:	795b      	ldrb	r3, [r3, #5]
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b21a      	sxth	r2, r3
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <DMA2_Stream2_IRQHandler+0xc0>)
 80021d2:	801a      	strh	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <DMA2_Stream2_IRQHandler+0xb0>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2baa      	cmp	r3, #170	; 0xaa
 80021da:	d106      	bne.n	80021ea <DMA2_Stream2_IRQHandler+0x8e>
		PS2CheckbyteCount++;
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <DMA2_Stream2_IRQHandler+0xa8>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	3301      	adds	r3, #1
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	4b07      	ldr	r3, [pc, #28]	; (8002204 <DMA2_Stream2_IRQHandler+0xa8>)
 80021e6:	701a      	strb	r2, [r3, #0]
 80021e8:	e006      	b.n	80021f8 <DMA2_Stream2_IRQHandler+0x9c>
	else
		if(PS2CheckbyteCount != 4)
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <DMA2_Stream2_IRQHandler+0xa8>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d002      	beq.n	80021f8 <DMA2_Stream2_IRQHandler+0x9c>
			PS2CheckbyteCount = 0;
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <DMA2_Stream2_IRQHandler+0xa8>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80021f8:	4809      	ldr	r0, [pc, #36]	; (8002220 <DMA2_Stream2_IRQHandler+0xc4>)
 80021fa:	f002 fc25 	bl	8004a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	240000d4 	.word	0x240000d4
 8002208:	2400081c 	.word	0x2400081c
 800220c:	24000adc 	.word	0x24000adc
 8002210:	24000720 	.word	0x24000720
 8002214:	240009cc 	.word	0x240009cc
 8002218:	240009d0 	.word	0x240009d0
 800221c:	24000b18 	.word	0x24000b18
 8002220:	240001cc 	.word	0x240001cc

08002224 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002228:	4802      	ldr	r0, [pc, #8]	; (8002234 <USART6_IRQHandler+0x10>)
 800222a:	f007 fcf5 	bl	8009c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	24000a50 	.word	0x24000a50

08002238 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <UART7_IRQHandler+0x10>)
 800223e:	f007 fceb 	bl	8009c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	24000120 	.word	0x24000120

0800224c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002250:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <SystemInit+0xac>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	4a28      	ldr	r2, [pc, #160]	; (80022f8 <SystemInit+0xac>)
 8002258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800225c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002260:	4b26      	ldr	r3, [pc, #152]	; (80022fc <SystemInit+0xb0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a25      	ldr	r2, [pc, #148]	; (80022fc <SystemInit+0xb0>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800226c:	4b23      	ldr	r3, [pc, #140]	; (80022fc <SystemInit+0xb0>)
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002272:	4b22      	ldr	r3, [pc, #136]	; (80022fc <SystemInit+0xb0>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4921      	ldr	r1, [pc, #132]	; (80022fc <SystemInit+0xb0>)
 8002278:	4b21      	ldr	r3, [pc, #132]	; (8002300 <SystemInit+0xb4>)
 800227a:	4013      	ands	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800227e:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <SystemInit+0xb0>)
 8002280:	2200      	movs	r2, #0
 8002282:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <SystemInit+0xb0>)
 8002286:	2200      	movs	r2, #0
 8002288:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800228a:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <SystemInit+0xb0>)
 800228c:	2200      	movs	r2, #0
 800228e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <SystemInit+0xb0>)
 8002292:	2200      	movs	r2, #0
 8002294:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8002296:	4b19      	ldr	r3, [pc, #100]	; (80022fc <SystemInit+0xb0>)
 8002298:	2200      	movs	r2, #0
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800229c:	4b17      	ldr	r3, [pc, #92]	; (80022fc <SystemInit+0xb0>)
 800229e:	2200      	movs	r2, #0
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80022a2:	4b16      	ldr	r3, [pc, #88]	; (80022fc <SystemInit+0xb0>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <SystemInit+0xb0>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80022ae:	4b13      	ldr	r3, [pc, #76]	; (80022fc <SystemInit+0xb0>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <SystemInit+0xb0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <SystemInit+0xb0>)
 80022bc:	2200      	movs	r2, #0
 80022be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022c0:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <SystemInit+0xb0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0d      	ldr	r2, [pc, #52]	; (80022fc <SystemInit+0xb0>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <SystemInit+0xb0>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <SystemInit+0xb8>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <SystemInit+0xbc>)
 80022d8:	4013      	ands	r3, r2
 80022da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022de:	d202      	bcs.n	80022e6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80022e0:	4b0a      	ldr	r3, [pc, #40]	; (800230c <SystemInit+0xc0>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022e6:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <SystemInit+0xac>)
 80022e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022ec:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000ed00 	.word	0xe000ed00
 80022fc:	58024400 	.word	0x58024400
 8002300:	eaf6ed7f 	.word	0xeaf6ed7f
 8002304:	5c001000 	.word	0x5c001000
 8002308:	ffff0000 	.word	0xffff0000
 800230c:	51008108 	.word	0x51008108

08002310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002348 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002314:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002316:	e003      	b.n	8002320 <LoopCopyDataInit>

08002318 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800231a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800231c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800231e:	3104      	adds	r1, #4

08002320 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002320:	480b      	ldr	r0, [pc, #44]	; (8002350 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002324:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002326:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002328:	d3f6      	bcc.n	8002318 <CopyDataInit>
  ldr  r2, =_sbss
 800232a:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800232c:	e002      	b.n	8002334 <LoopFillZerobss>

0800232e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800232e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002330:	f842 3b04 	str.w	r3, [r2], #4

08002334 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002336:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002338:	d3f9      	bcc.n	800232e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800233a:	f7ff ff87 	bl	800224c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800233e:	f00a fde7 	bl	800cf10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002342:	f7fe fffd 	bl	8001340 <main>
  bx  lr    
 8002346:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002348:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800234c:	0800e218 	.word	0x0800e218
  ldr  r0, =_sdata
 8002350:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002354:	240000b8 	.word	0x240000b8
  ldr  r2, =_sbss
 8002358:	240000b8 	.word	0x240000b8
  ldr  r3, = _ebss
 800235c:	24000bdc 	.word	0x24000bdc

08002360 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002360:	e7fe      	b.n	8002360 <ADC3_IRQHandler>
	...

08002364 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800236a:	2003      	movs	r0, #3
 800236c:	f001 fb22 	bl	80039b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002370:	f004 fe28 	bl	8006fc4 <HAL_RCC_GetSysClockFreq>
 8002374:	4601      	mov	r1, r0
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <HAL_Init+0x68>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	4a13      	ldr	r2, [pc, #76]	; (80023d0 <HAL_Init+0x6c>)
 8002382:	5cd3      	ldrb	r3, [r2, r3]
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	fa21 f303 	lsr.w	r3, r1, r3
 800238c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800238e:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <HAL_Init+0x68>)
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	4a0e      	ldr	r2, [pc, #56]	; (80023d0 <HAL_Init+0x6c>)
 8002398:	5cd3      	ldrb	r3, [r2, r3]
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
 80023a4:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <HAL_Init+0x70>)
 80023a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023a8:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <HAL_Init+0x74>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ae:	2000      	movs	r0, #0
 80023b0:	f000 f814 	bl	80023dc <HAL_InitTick>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e002      	b.n	80023c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023be:	f7ff fc27 	bl	8001c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	58024400 	.word	0x58024400
 80023d0:	0800dfd0 	.word	0x0800dfd0
 80023d4:	24000044 	.word	0x24000044
 80023d8:	24000040 	.word	0x24000040

080023dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023e4:	4b15      	ldr	r3, [pc, #84]	; (800243c <HAL_InitTick+0x60>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e021      	b.n	8002434 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <HAL_InitTick+0x64>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <HAL_InitTick+0x60>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	4619      	mov	r1, r3
 80023fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	4618      	mov	r0, r3
 8002408:	f001 fb07 	bl	8003a1a <HAL_SYSTICK_Config>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e00e      	b.n	8002434 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b0f      	cmp	r3, #15
 800241a:	d80a      	bhi.n	8002432 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800241c:	2200      	movs	r2, #0
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	f04f 30ff 	mov.w	r0, #4294967295
 8002424:	f001 fad1 	bl	80039ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002428:	4a06      	ldr	r2, [pc, #24]	; (8002444 <HAL_InitTick+0x68>)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	e000      	b.n	8002434 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	2400004c 	.word	0x2400004c
 8002440:	24000040 	.word	0x24000040
 8002444:	24000048 	.word	0x24000048

08002448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_IncTick+0x20>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_IncTick+0x24>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4413      	add	r3, r2
 8002458:	4a04      	ldr	r2, [pc, #16]	; (800246c <HAL_IncTick+0x24>)
 800245a:	6013      	str	r3, [r2, #0]
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	2400004c 	.word	0x2400004c
 800246c:	24000bd8 	.word	0x24000bd8

08002470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return uwTick;
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <HAL_GetTick+0x14>)
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	24000bd8 	.word	0x24000bd8

08002488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002490:	f7ff ffee 	bl	8002470 <HAL_GetTick>
 8002494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d005      	beq.n	80024ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_Delay+0x40>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4413      	add	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ae:	bf00      	nop
 80024b0:	f7ff ffde 	bl	8002470 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d8f7      	bhi.n	80024b0 <HAL_Delay+0x28>
  {
  }
}
 80024c0:	bf00      	nop
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	2400004c 	.word	0x2400004c

080024cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <HAL_GetREVID+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	0c1b      	lsrs	r3, r3, #16
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	5c001000 	.word	0x5c001000

080024e4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	401a      	ands	r2, r3
 80024f8:	4904      	ldr	r1, [pc, #16]	; (800250c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	58000400 	.word	0x58000400

08002510 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	431a      	orrs	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	609a      	str	r2, [r3, #8]
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	609a      	str	r2, [r3, #8]
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002578:	b490      	push	{r4, r7}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3360      	adds	r3, #96	; 0x60
 800258a:	461a      	mov	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002594:	6823      	ldr	r3, [r4, #0]
 8002596:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	430b      	orrs	r3, r1
 80025a4:	4313      	orrs	r3, r2
 80025a6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025a8:	bf00      	nop
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc90      	pop	{r4, r7}
 80025b0:	4770      	bx	lr

080025b2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b085      	sub	sp, #20
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	431a      	orrs	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	611a      	str	r2, [r3, #16]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80025e4:	b490      	push	{r4, r7}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3360      	adds	r3, #96	; 0x60
 80025f4:	461a      	mov	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4313      	orrs	r3, r2
 8002608:	6023      	str	r3, [r4, #0]
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bc90      	pop	{r4, r7}
 8002612:	4770      	bx	lr

08002614 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800263a:	b490      	push	{r4, r7}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	3330      	adds	r3, #48	; 0x30
 800264a:	461a      	mov	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	0a1b      	lsrs	r3, r3, #8
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	4413      	add	r3, r2
 8002658:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800265a:	6822      	ldr	r2, [r4, #0]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f003 031f 	and.w	r3, r3, #31
 8002662:	211f      	movs	r1, #31
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	401a      	ands	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	0e9b      	lsrs	r3, r3, #26
 8002670:	f003 011f 	and.w	r1, r3, #31
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	4313      	orrs	r3, r2
 8002680:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bc90      	pop	{r4, r7}
 800268a:	4770      	bx	lr

0800268c <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f023 0203 	bic.w	r2, r3, #3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	60da      	str	r2, [r3, #12]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026b2:	b490      	push	{r4, r7}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3314      	adds	r3, #20
 80026c2:	461a      	mov	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	0e5b      	lsrs	r3, r3, #25
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	4413      	add	r3, r2
 80026d0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80026d2:	6822      	ldr	r2, [r4, #0]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	0d1b      	lsrs	r3, r3, #20
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	2107      	movs	r1, #7
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	401a      	ands	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	0d1b      	lsrs	r3, r3, #20
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	4313      	orrs	r3, r2
 80026f6:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc90      	pop	{r4, r7}
 8002700:	4770      	bx	lr
	...

08002704 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800271c:	43db      	mvns	r3, r3
 800271e:	401a      	ands	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0318 	and.w	r3, r3, #24
 8002726:	4908      	ldr	r1, [pc, #32]	; (8002748 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002728:	40d9      	lsrs	r1, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	400b      	ands	r3, r1
 800272e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002732:	431a      	orrs	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	000fffff 	.word	0x000fffff

0800274c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 031f 	and.w	r3, r3, #31
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002776:	4013      	ands	r3, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6093      	str	r3, [r2, #8]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	5fffffc0 	.word	0x5fffffc0

0800278c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800279c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027a0:	d101      	bne.n	80027a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	6fffffc0 	.word	0x6fffffc0

080027dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027f0:	d101      	bne.n	80027f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <LL_ADC_Enable+0x24>)
 8002812:	4013      	ands	r3, r2
 8002814:	f043 0201 	orr.w	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	7fffffc0 	.word	0x7fffffc0

0800282c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <LL_ADC_IsEnabled+0x18>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <LL_ADC_IsEnabled+0x1a>
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <LL_ADC_REG_StartConversion+0x24>)
 8002862:	4013      	ands	r3, r2
 8002864:	f043 0204 	orr.w	r2, r3, #4
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	7fffffc0 	.word	0x7fffffc0

0800287c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b04      	cmp	r3, #4
 800288e:	d101      	bne.n	8002894 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d101      	bne.n	80028ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b089      	sub	sp, #36	; 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e18e      	b.n	8002c00 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d109      	bne.n	8002904 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff f9a7 	bl	8001c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff3f 	bl	800278c <LL_ADC_IsDeepPowerDownEnabled>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d004      	beq.n	800291e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff25 	bl	8002768 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff5a 	bl	80027dc <LL_ADC_IsInternalRegulatorEnabled>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d113      	bne.n	8002956 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ff3e 	bl	80027b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002938:	4b9a      	ldr	r3, [pc, #616]	; (8002ba4 <HAL_ADC_Init+0x2dc>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	099b      	lsrs	r3, r3, #6
 800293e:	4a9a      	ldr	r2, [pc, #616]	; (8002ba8 <HAL_ADC_Init+0x2e0>)
 8002940:	fba2 2303 	umull	r2, r3, r2, r3
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002948:	e002      	b.n	8002950 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	3b01      	subs	r3, #1
 800294e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f9      	bne.n	800294a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ff3e 	bl	80027dc <LL_ADC_IsInternalRegulatorEnabled>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10d      	bne.n	8002982 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	f043 0210 	orr.w	r2, r3, #16
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	f043 0201 	orr.w	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff ff78 	bl	800287c <LL_ADC_REG_IsConversionOngoing>
 800298c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	2b00      	cmp	r3, #0
 8002998:	f040 8129 	bne.w	8002bee <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f040 8125 	bne.w	8002bee <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029ac:	f043 0202 	orr.w	r2, r3, #2
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ff37 	bl	800282c <LL_ADC_IsEnabled>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d136      	bne.n	8002a32 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a78      	ldr	r2, [pc, #480]	; (8002bac <HAL_ADC_Init+0x2e4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d004      	beq.n	80029d8 <HAL_ADC_Init+0x110>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a77      	ldr	r2, [pc, #476]	; (8002bb0 <HAL_ADC_Init+0x2e8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d10e      	bne.n	80029f6 <HAL_ADC_Init+0x12e>
 80029d8:	4874      	ldr	r0, [pc, #464]	; (8002bac <HAL_ADC_Init+0x2e4>)
 80029da:	f7ff ff27 	bl	800282c <LL_ADC_IsEnabled>
 80029de:	4604      	mov	r4, r0
 80029e0:	4873      	ldr	r0, [pc, #460]	; (8002bb0 <HAL_ADC_Init+0x2e8>)
 80029e2:	f7ff ff23 	bl	800282c <LL_ADC_IsEnabled>
 80029e6:	4603      	mov	r3, r0
 80029e8:	4323      	orrs	r3, r4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	bf0c      	ite	eq
 80029ee:	2301      	moveq	r3, #1
 80029f0:	2300      	movne	r3, #0
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	e008      	b.n	8002a08 <HAL_ADC_Init+0x140>
 80029f6:	486f      	ldr	r0, [pc, #444]	; (8002bb4 <HAL_ADC_Init+0x2ec>)
 80029f8:	f7ff ff18 	bl	800282c <LL_ADC_IsEnabled>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	bf0c      	ite	eq
 8002a02:	2301      	moveq	r3, #1
 8002a04:	2300      	movne	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d012      	beq.n	8002a32 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a66      	ldr	r2, [pc, #408]	; (8002bac <HAL_ADC_Init+0x2e4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d004      	beq.n	8002a20 <HAL_ADC_Init+0x158>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a65      	ldr	r2, [pc, #404]	; (8002bb0 <HAL_ADC_Init+0x2e8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADC_Init+0x15c>
 8002a20:	4a65      	ldr	r2, [pc, #404]	; (8002bb8 <HAL_ADC_Init+0x2f0>)
 8002a22:	e000      	b.n	8002a26 <HAL_ADC_Init+0x15e>
 8002a24:	4a65      	ldr	r2, [pc, #404]	; (8002bbc <HAL_ADC_Init+0x2f4>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	f7ff fd6f 	bl	8002510 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002a32:	f7ff fd4b 	bl	80024cc <HAL_GetREVID>
 8002a36:	4602      	mov	r2, r0
 8002a38:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d914      	bls.n	8002a6a <HAL_ADC_Init+0x1a2>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d110      	bne.n	8002a6a <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7d5b      	ldrb	r3, [r3, #21]
 8002a4c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a52:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002a58:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	7f1b      	ldrb	r3, [r3, #28]
 8002a5e:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002a60:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a62:	f043 030c 	orr.w	r3, r3, #12
 8002a66:	61bb      	str	r3, [r7, #24]
 8002a68:	e00d      	b.n	8002a86 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	7d5b      	ldrb	r3, [r3, #21]
 8002a6e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a74:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002a7a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	7f1b      	ldrb	r3, [r3, #28]
 8002a80:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7f1b      	ldrb	r3, [r3, #28]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d106      	bne.n	8002a9c <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	045b      	lsls	r3, r3, #17
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d009      	beq.n	8002ab8 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	4b40      	ldr	r3, [pc, #256]	; (8002bc0 <HAL_ADC_Init+0x2f8>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	69b9      	ldr	r1, [r7, #24]
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fed3 	bl	800287c <LL_ADC_REG_IsConversionOngoing>
 8002ad6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fee0 	bl	80028a2 <LL_ADC_INJ_IsConversionOngoing>
 8002ae2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d14a      	bne.n	8002b80 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d147      	bne.n	8002b80 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	7d1b      	ldrb	r3, [r3, #20]
 8002af4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	4b2f      	ldr	r3, [pc, #188]	; (8002bc4 <HAL_ADC_Init+0x2fc>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	69b9      	ldr	r1, [r7, #24]
 8002b0e:	430b      	orrs	r3, r1
 8002b10:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d11b      	bne.n	8002b54 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	4b27      	ldr	r3, [pc, #156]	; (8002bc8 <HAL_ADC_Init+0x300>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b30:	3a01      	subs	r2, #1
 8002b32:	0411      	lsls	r1, r2, #16
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b38:	4311      	orrs	r1, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b3e:	4311      	orrs	r1, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b44:	430a      	orrs	r2, r1
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 0201 	orr.w	r2, r2, #1
 8002b50:	611a      	str	r2, [r3, #16]
 8002b52:	e007      	b.n	8002b64 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fd52 	bl	8003624 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d121      	bne.n	8002bcc <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f023 010f 	bic.w	r1, r3, #15
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	1e5a      	subs	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8002ba0:	e01c      	b.n	8002bdc <HAL_ADC_Init+0x314>
 8002ba2:	bf00      	nop
 8002ba4:	24000040 	.word	0x24000040
 8002ba8:	053e2d63 	.word	0x053e2d63
 8002bac:	40022000 	.word	0x40022000
 8002bb0:	40022100 	.word	0x40022100
 8002bb4:	58026000 	.word	0x58026000
 8002bb8:	40022300 	.word	0x40022300
 8002bbc:	58026300 	.word	0x58026300
 8002bc0:	fff0c003 	.word	0xfff0c003
 8002bc4:	ffffbffc 	.word	0xffffbffc
 8002bc8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 020f 	bic.w	r2, r2, #15
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be0:	f023 0303 	bic.w	r3, r3, #3
 8002be4:	f043 0201 	orr.w	r2, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	655a      	str	r2, [r3, #84]	; 0x54
 8002bec:	e007      	b.n	8002bfe <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf2:	f043 0210 	orr.w	r2, r3, #16
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3724      	adds	r7, #36	; 0x24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd90      	pop	{r4, r7, pc}

08002c08 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a55      	ldr	r2, [pc, #340]	; (8002d70 <HAL_ADC_Start_DMA+0x168>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d004      	beq.n	8002c28 <HAL_ADC_Start_DMA+0x20>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a54      	ldr	r2, [pc, #336]	; (8002d74 <HAL_ADC_Start_DMA+0x16c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d101      	bne.n	8002c2c <HAL_ADC_Start_DMA+0x24>
 8002c28:	4b53      	ldr	r3, [pc, #332]	; (8002d78 <HAL_ADC_Start_DMA+0x170>)
 8002c2a:	e000      	b.n	8002c2e <HAL_ADC_Start_DMA+0x26>
 8002c2c:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <HAL_ADC_Start_DMA+0x174>)
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fd8c 	bl	800274c <LL_ADC_GetMultimode>
 8002c34:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fe1e 	bl	800287c <LL_ADC_REG_IsConversionOngoing>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f040 808c 	bne.w	8002d60 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_Start_DMA+0x4e>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e087      	b.n	8002d66 <HAL_ADC_Start_DMA+0x15e>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	2b05      	cmp	r3, #5
 8002c68:	d002      	beq.n	8002c70 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b09      	cmp	r3, #9
 8002c6e:	d170      	bne.n	8002d52 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 fbbf 	bl	80033f4 <ADC_Enable>
 8002c76:	4603      	mov	r3, r0
 8002c78:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d163      	bne.n	8002d48 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c84:	4b3e      	ldr	r3, [pc, #248]	; (8002d80 <HAL_ADC_Start_DMA+0x178>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a37      	ldr	r2, [pc, #220]	; (8002d74 <HAL_ADC_Start_DMA+0x16c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d002      	beq.n	8002ca0 <HAL_ADC_Start_DMA+0x98>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	e000      	b.n	8002ca2 <HAL_ADC_Start_DMA+0x9a>
 8002ca0:	4b33      	ldr	r3, [pc, #204]	; (8002d70 <HAL_ADC_Start_DMA+0x168>)
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d002      	beq.n	8002cb0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d105      	bne.n	8002cbc <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d006      	beq.n	8002cd6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ccc:	f023 0206 	bic.w	r2, r3, #6
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	659a      	str	r2, [r3, #88]	; 0x58
 8002cd4:	e002      	b.n	8002cdc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce0:	4a28      	ldr	r2, [pc, #160]	; (8002d84 <HAL_ADC_Start_DMA+0x17c>)
 8002ce2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce8:	4a27      	ldr	r2, [pc, #156]	; (8002d88 <HAL_ADC_Start_DMA+0x180>)
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf0:	4a26      	ldr	r2, [pc, #152]	; (8002d8c <HAL_ADC_Start_DMA+0x184>)
 8002cf2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	221c      	movs	r2, #28
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0210 	orr.w	r2, r2, #16
 8002d12:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4610      	mov	r0, r2
 8002d20:	f7ff fcb4 	bl	800268c <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	3340      	adds	r3, #64	; 0x40
 8002d2e:	4619      	mov	r1, r3
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f001 f9da 	bl	80040ec <HAL_DMA_Start_IT>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fd87 	bl	8002854 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002d46:	e00d      	b.n	8002d64 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002d50:	e008      	b.n	8002d64 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002d5e:	e001      	b.n	8002d64 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
 8002d62:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40022000 	.word	0x40022000
 8002d74:	40022100 	.word	0x40022100
 8002d78:	40022300 	.word	0x40022300
 8002d7c:	58026300 	.word	0x58026300
 8002d80:	fffff0fe 	.word	0xfffff0fe
 8002d84:	080034fd 	.word	0x080034fd
 8002d88:	080035d5 	.word	0x080035d5
 8002d8c:	080035f1 	.word	0x080035f1

08002d90 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b099      	sub	sp, #100	; 0x64
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a99      	ldr	r2, [pc, #612]	; (800304c <HAL_ADC_ConfigChannel+0x280>)
 8002de6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x2a>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e2e6      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x5f8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff fd3a 	bl	800287c <LL_ADC_REG_IsConversionOngoing>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f040 82cb 	bne.w	80033a6 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d108      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x62>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	0e9b      	lsrs	r3, r3, #26
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	2201      	movs	r2, #1
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	e00f      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x82>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e36:	fa93 f3a3 	rbit	r3, r3
 8002e3a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	2201      	movs	r2, #1
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	69d1      	ldr	r1, [r2, #28]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6859      	ldr	r1, [r3, #4]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f7ff fbe6 	bl	800263a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fd02 	bl	800287c <LL_ADC_REG_IsConversionOngoing>
 8002e78:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fd0f 	bl	80028a2 <LL_ADC_INJ_IsConversionOngoing>
 8002e84:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f040 80b3 	bne.w	8002ff4 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f040 80af 	bne.w	8002ff4 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6819      	ldr	r1, [r3, #0]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f7ff fc05 	bl	80026b2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ea8:	4b69      	ldr	r3, [pc, #420]	; (8003050 <HAL_ADC_ConfigChannel+0x284>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002eb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eb4:	d10b      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x102>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	695a      	ldr	r2, [r3, #20]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	089b      	lsrs	r3, r3, #2
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	e01d      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x13e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10b      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x128>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	089b      	lsrs	r3, r3, #2
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	e00a      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x13e>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	089b      	lsrs	r3, r3, #2
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d027      	beq.n	8002f64 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	6919      	ldr	r1, [r3, #16]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f22:	f7ff fb29 	bl	8002578 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6919      	ldr	r1, [r3, #16]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	7e5b      	ldrb	r3, [r3, #25]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d102      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x170>
 8002f36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f3a:	e000      	b.n	8002f3e <HAL_ADC_ConfigChannel+0x172>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f7ff fb50 	bl	80025e4 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	6919      	ldr	r1, [r3, #16]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	7e1b      	ldrb	r3, [r3, #24]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d102      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x18e>
 8002f54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f58:	e000      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x190>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	f7ff fb28 	bl	80025b2 <LL_ADC_SetDataRightShift>
 8002f62:	e047      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	069b      	lsls	r3, r3, #26
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d107      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f86:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	069b      	lsls	r3, r3, #26
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d107      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002faa:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	069b      	lsls	r3, r3, #26
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d107      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fce:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	069b      	lsls	r3, r3, #26
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d107      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ff2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fc17 	bl	800282c <LL_ADC_IsEnabled>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	f040 81d9 	bne.w	80033b8 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6819      	ldr	r1, [r3, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	461a      	mov	r2, r3
 8003014:	f7ff fb76 	bl	8002704 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4a0b      	ldr	r2, [pc, #44]	; (800304c <HAL_ADC_ConfigChannel+0x280>)
 800301e:	4293      	cmp	r3, r2
 8003020:	f040 8101 	bne.w	8003226 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10f      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x288>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	0e9b      	lsrs	r3, r3, #26
 800303a:	3301      	adds	r3, #1
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	2b09      	cmp	r3, #9
 8003042:	bf94      	ite	ls
 8003044:	2301      	movls	r3, #1
 8003046:	2300      	movhi	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	e016      	b.n	800307a <HAL_ADC_ConfigChannel+0x2ae>
 800304c:	47ff0000 	.word	0x47ff0000
 8003050:	5c001000 	.word	0x5c001000
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800305c:	fa93 f3a3 	rbit	r3, r3
 8003060:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003064:	fab3 f383 	clz	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	3301      	adds	r3, #1
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	2b09      	cmp	r3, #9
 8003072:	bf94      	ite	ls
 8003074:	2301      	movls	r3, #1
 8003076:	2300      	movhi	r3, #0
 8003078:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800307a:	2b00      	cmp	r3, #0
 800307c:	d064      	beq.n	8003148 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003086:	2b00      	cmp	r3, #0
 8003088:	d107      	bne.n	800309a <HAL_ADC_ConfigChannel+0x2ce>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	0e9b      	lsrs	r3, r3, #26
 8003090:	3301      	adds	r3, #1
 8003092:	069b      	lsls	r3, r3, #26
 8003094:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003098:	e00e      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x2ec>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a2:	fa93 f3a3 	rbit	r3, r3
 80030a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030aa:	fab3 f383 	clz	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	3301      	adds	r3, #1
 80030b2:	069b      	lsls	r3, r3, #26
 80030b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d109      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x30c>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	0e9b      	lsrs	r3, r3, #26
 80030ca:	3301      	adds	r3, #1
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	2101      	movs	r1, #1
 80030d2:	fa01 f303 	lsl.w	r3, r1, r3
 80030d6:	e010      	b.n	80030fa <HAL_ADC_ConfigChannel+0x32e>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	fa93 f3a3 	rbit	r3, r3
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80030e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e8:	fab3 f383 	clz	r3, r3
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	3301      	adds	r3, #1
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	2101      	movs	r1, #1
 80030f6:	fa01 f303 	lsl.w	r3, r1, r3
 80030fa:	ea42 0103 	orr.w	r1, r2, r3
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10a      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x354>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	0e9b      	lsrs	r3, r3, #26
 8003110:	3301      	adds	r3, #1
 8003112:	f003 021f 	and.w	r2, r3, #31
 8003116:	4613      	mov	r3, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4413      	add	r3, r2
 800311c:	051b      	lsls	r3, r3, #20
 800311e:	e011      	b.n	8003144 <HAL_ADC_ConfigChannel+0x378>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	fab3 f383 	clz	r3, r3
 8003134:	b2db      	uxtb	r3, r3
 8003136:	3301      	adds	r3, #1
 8003138:	f003 021f 	and.w	r2, r3, #31
 800313c:	4613      	mov	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4413      	add	r3, r2
 8003142:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003144:	430b      	orrs	r3, r1
 8003146:	e069      	b.n	800321c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003150:	2b00      	cmp	r3, #0
 8003152:	d107      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x398>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	0e9b      	lsrs	r3, r3, #26
 800315a:	3301      	adds	r3, #1
 800315c:	069b      	lsls	r3, r3, #26
 800315e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003162:	e00e      	b.n	8003182 <HAL_ADC_ConfigChannel+0x3b6>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	fa93 f3a3 	rbit	r3, r3
 8003170:	61fb      	str	r3, [r7, #28]
  return result;
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	fab3 f383 	clz	r3, r3
 8003178:	b2db      	uxtb	r3, r3
 800317a:	3301      	adds	r3, #1
 800317c:	069b      	lsls	r3, r3, #26
 800317e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800318a:	2b00      	cmp	r3, #0
 800318c:	d109      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x3d6>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	0e9b      	lsrs	r3, r3, #26
 8003194:	3301      	adds	r3, #1
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	2101      	movs	r1, #1
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	e010      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x3f8>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	617b      	str	r3, [r7, #20]
  return result;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	3301      	adds	r3, #1
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	2101      	movs	r1, #1
 80031c0:	fa01 f303 	lsl.w	r3, r1, r3
 80031c4:	ea42 0103 	orr.w	r1, r2, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10d      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x424>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	0e9b      	lsrs	r3, r3, #26
 80031da:	3301      	adds	r3, #1
 80031dc:	f003 021f 	and.w	r2, r3, #31
 80031e0:	4613      	mov	r3, r2
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	3b1e      	subs	r3, #30
 80031e8:	051b      	lsls	r3, r3, #20
 80031ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031ee:	e014      	b.n	800321a <HAL_ADC_ConfigChannel+0x44e>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	60fb      	str	r3, [r7, #12]
  return result;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	3301      	adds	r3, #1
 8003208:	f003 021f 	and.w	r2, r3, #31
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	3b1e      	subs	r3, #30
 8003214:	051b      	lsls	r3, r3, #20
 8003216:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800321a:	430b      	orrs	r3, r1
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	6892      	ldr	r2, [r2, #8]
 8003220:	4619      	mov	r1, r3
 8003222:	f7ff fa46 	bl	80026b2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f280 80c4 	bge.w	80033b8 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a65      	ldr	r2, [pc, #404]	; (80033cc <HAL_ADC_ConfigChannel+0x600>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d004      	beq.n	8003244 <HAL_ADC_ConfigChannel+0x478>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a64      	ldr	r2, [pc, #400]	; (80033d0 <HAL_ADC_ConfigChannel+0x604>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d101      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x47c>
 8003244:	4b63      	ldr	r3, [pc, #396]	; (80033d4 <HAL_ADC_ConfigChannel+0x608>)
 8003246:	e000      	b.n	800324a <HAL_ADC_ConfigChannel+0x47e>
 8003248:	4b63      	ldr	r3, [pc, #396]	; (80033d8 <HAL_ADC_ConfigChannel+0x60c>)
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff f986 	bl	800255c <LL_ADC_GetCommonPathInternalCh>
 8003250:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a5d      	ldr	r2, [pc, #372]	; (80033cc <HAL_ADC_ConfigChannel+0x600>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d004      	beq.n	8003266 <HAL_ADC_ConfigChannel+0x49a>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a5b      	ldr	r2, [pc, #364]	; (80033d0 <HAL_ADC_ConfigChannel+0x604>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d10e      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x4b8>
 8003266:	4859      	ldr	r0, [pc, #356]	; (80033cc <HAL_ADC_ConfigChannel+0x600>)
 8003268:	f7ff fae0 	bl	800282c <LL_ADC_IsEnabled>
 800326c:	4604      	mov	r4, r0
 800326e:	4858      	ldr	r0, [pc, #352]	; (80033d0 <HAL_ADC_ConfigChannel+0x604>)
 8003270:	f7ff fadc 	bl	800282c <LL_ADC_IsEnabled>
 8003274:	4603      	mov	r3, r0
 8003276:	4323      	orrs	r3, r4
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf0c      	ite	eq
 800327c:	2301      	moveq	r3, #1
 800327e:	2300      	movne	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	e008      	b.n	8003296 <HAL_ADC_ConfigChannel+0x4ca>
 8003284:	4855      	ldr	r0, [pc, #340]	; (80033dc <HAL_ADC_ConfigChannel+0x610>)
 8003286:	f7ff fad1 	bl	800282c <LL_ADC_IsEnabled>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d07b      	beq.n	8003392 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a50      	ldr	r2, [pc, #320]	; (80033e0 <HAL_ADC_ConfigChannel+0x614>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d12e      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x536>
 80032a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d129      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a4a      	ldr	r2, [pc, #296]	; (80033dc <HAL_ADC_ConfigChannel+0x610>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d17f      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a43      	ldr	r2, [pc, #268]	; (80033cc <HAL_ADC_ConfigChannel+0x600>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d004      	beq.n	80032cc <HAL_ADC_ConfigChannel+0x500>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a42      	ldr	r2, [pc, #264]	; (80033d0 <HAL_ADC_ConfigChannel+0x604>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x504>
 80032cc:	4a41      	ldr	r2, [pc, #260]	; (80033d4 <HAL_ADC_ConfigChannel+0x608>)
 80032ce:	e000      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x506>
 80032d0:	4a41      	ldr	r2, [pc, #260]	; (80033d8 <HAL_ADC_ConfigChannel+0x60c>)
 80032d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032d8:	4619      	mov	r1, r3
 80032da:	4610      	mov	r0, r2
 80032dc:	f7ff f92b 	bl	8002536 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80032e0:	4b40      	ldr	r3, [pc, #256]	; (80033e4 <HAL_ADC_ConfigChannel+0x618>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	099b      	lsrs	r3, r3, #6
 80032e6:	4a40      	ldr	r2, [pc, #256]	; (80033e8 <HAL_ADC_ConfigChannel+0x61c>)
 80032e8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ec:	099b      	lsrs	r3, r3, #6
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80032f2:	e002      	b.n	80032fa <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f9      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003300:	e05a      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a39      	ldr	r2, [pc, #228]	; (80033ec <HAL_ADC_ConfigChannel+0x620>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d11e      	bne.n	800334a <HAL_ADC_ConfigChannel+0x57e>
 800330c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800330e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d119      	bne.n	800334a <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a30      	ldr	r2, [pc, #192]	; (80033dc <HAL_ADC_ConfigChannel+0x610>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d14b      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a29      	ldr	r2, [pc, #164]	; (80033cc <HAL_ADC_ConfigChannel+0x600>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d004      	beq.n	8003334 <HAL_ADC_ConfigChannel+0x568>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a28      	ldr	r2, [pc, #160]	; (80033d0 <HAL_ADC_ConfigChannel+0x604>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d101      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x56c>
 8003334:	4a27      	ldr	r2, [pc, #156]	; (80033d4 <HAL_ADC_ConfigChannel+0x608>)
 8003336:	e000      	b.n	800333a <HAL_ADC_ConfigChannel+0x56e>
 8003338:	4a27      	ldr	r2, [pc, #156]	; (80033d8 <HAL_ADC_ConfigChannel+0x60c>)
 800333a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800333c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003340:	4619      	mov	r1, r3
 8003342:	4610      	mov	r0, r2
 8003344:	f7ff f8f7 	bl	8002536 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003348:	e036      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a28      	ldr	r2, [pc, #160]	; (80033f0 <HAL_ADC_ConfigChannel+0x624>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d131      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x5ec>
 8003354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d12c      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1e      	ldr	r2, [pc, #120]	; (80033dc <HAL_ADC_ConfigChannel+0x610>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d127      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a17      	ldr	r2, [pc, #92]	; (80033cc <HAL_ADC_ConfigChannel+0x600>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d004      	beq.n	800337c <HAL_ADC_ConfigChannel+0x5b0>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a16      	ldr	r2, [pc, #88]	; (80033d0 <HAL_ADC_ConfigChannel+0x604>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d101      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x5b4>
 800337c:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <HAL_ADC_ConfigChannel+0x608>)
 800337e:	e000      	b.n	8003382 <HAL_ADC_ConfigChannel+0x5b6>
 8003380:	4a15      	ldr	r2, [pc, #84]	; (80033d8 <HAL_ADC_ConfigChannel+0x60c>)
 8003382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003384:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f7ff f8d3 	bl	8002536 <LL_ADC_SetCommonPathInternalCh>
 8003390:	e012      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003396:	f043 0220 	orr.w	r2, r3, #32
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80033a4:	e008      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	f043 0220 	orr.w	r2, r3, #32
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3764      	adds	r7, #100	; 0x64
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd90      	pop	{r4, r7, pc}
 80033cc:	40022000 	.word	0x40022000
 80033d0:	40022100 	.word	0x40022100
 80033d4:	40022300 	.word	0x40022300
 80033d8:	58026300 	.word	0x58026300
 80033dc:	58026000 	.word	0x58026000
 80033e0:	cb840000 	.word	0xcb840000
 80033e4:	24000040 	.word	0x24000040
 80033e8:	053e2d63 	.word	0x053e2d63
 80033ec:	c7520000 	.word	0xc7520000
 80033f0:	cfb80000 	.word	0xcfb80000

080033f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fa13 	bl	800282c <LL_ADC_IsEnabled>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d167      	bne.n	80034dc <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	4b35      	ldr	r3, [pc, #212]	; (80034e8 <ADC_Enable+0xf4>)
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00d      	beq.n	8003436 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341e:	f043 0210 	orr.w	r2, r3, #16
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	f043 0201 	orr.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e053      	b.n	80034de <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff f9e2 	bl	8002804 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003440:	f7ff f816 	bl	8002470 <HAL_GetTick>
 8003444:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a28      	ldr	r2, [pc, #160]	; (80034ec <ADC_Enable+0xf8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d004      	beq.n	800345a <ADC_Enable+0x66>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a26      	ldr	r2, [pc, #152]	; (80034f0 <ADC_Enable+0xfc>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <ADC_Enable+0x6a>
 800345a:	4b26      	ldr	r3, [pc, #152]	; (80034f4 <ADC_Enable+0x100>)
 800345c:	e000      	b.n	8003460 <ADC_Enable+0x6c>
 800345e:	4b26      	ldr	r3, [pc, #152]	; (80034f8 <ADC_Enable+0x104>)
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff f973 	bl	800274c <LL_ADC_GetMultimode>
 8003466:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a20      	ldr	r2, [pc, #128]	; (80034f0 <ADC_Enable+0xfc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d002      	beq.n	8003478 <ADC_Enable+0x84>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	e000      	b.n	800347a <ADC_Enable+0x86>
 8003478:	4b1c      	ldr	r3, [pc, #112]	; (80034ec <ADC_Enable+0xf8>)
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	4293      	cmp	r3, r2
 8003480:	d025      	beq.n	80034ce <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d129      	bne.n	80034dc <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003488:	e021      	b.n	80034ce <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff f9cc 	bl	800282c <LL_ADC_IsEnabled>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d104      	bne.n	80034a4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff f9b0 	bl	8002804 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034a4:	f7fe ffe4 	bl	8002470 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d90d      	bls.n	80034ce <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b6:	f043 0210 	orr.w	r2, r3, #16
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c2:	f043 0201 	orr.w	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e007      	b.n	80034de <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d1d6      	bne.n	800348a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	8000003f 	.word	0x8000003f
 80034ec:	40022000 	.word	0x40022000
 80034f0:	40022100 	.word	0x40022100
 80034f4:	40022300 	.word	0x40022300
 80034f8:	58026300 	.word	0x58026300

080034fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003512:	2b00      	cmp	r3, #0
 8003514:	d14b      	bne.n	80035ae <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d021      	beq.n	8003574 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff f86d 	bl	8002614 <LL_ADC_REG_IsTriggerSourceSWStart>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d032      	beq.n	80035a6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d12b      	bne.n	80035a6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003552:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d11f      	bne.n	80035a6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356a:	f043 0201 	orr.w	r2, r3, #1
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	655a      	str	r2, [r3, #84]	; 0x54
 8003572:	e018      	b.n	80035a6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d111      	bne.n	80035a6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003586:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003592:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d105      	bne.n	80035a6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	f043 0201 	orr.w	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff fbf2 	bl	8002d90 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035ac:	e00e      	b.n	80035cc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f7ff fbfc 	bl	8002db8 <HAL_ADC_ErrorCallback>
}
 80035c0:	e004      	b.n	80035cc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
}
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f7ff fbde 	bl	8002da4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360e:	f043 0204 	orr.w	r2, r3, #4
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f7ff fbce 	bl	8002db8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800361c:	bf00      	nop
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a70      	ldr	r2, [pc, #448]	; (80037f4 <ADC_ConfigureBoostMode+0x1d0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d004      	beq.n	8003640 <ADC_ConfigureBoostMode+0x1c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a6f      	ldr	r2, [pc, #444]	; (80037f8 <ADC_ConfigureBoostMode+0x1d4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d109      	bne.n	8003654 <ADC_ConfigureBoostMode+0x30>
 8003640:	4b6e      	ldr	r3, [pc, #440]	; (80037fc <ADC_ConfigureBoostMode+0x1d8>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003648:	2b00      	cmp	r3, #0
 800364a:	bf14      	ite	ne
 800364c:	2301      	movne	r3, #1
 800364e:	2300      	moveq	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	e008      	b.n	8003666 <ADC_ConfigureBoostMode+0x42>
 8003654:	4b6a      	ldr	r3, [pc, #424]	; (8003800 <ADC_ConfigureBoostMode+0x1dc>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf14      	ite	ne
 8003660:	2301      	movne	r3, #1
 8003662:	2300      	moveq	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d01a      	beq.n	80036a0 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800366a:	f003 fe1d 	bl	80072a8 <HAL_RCC_GetHCLKFreq>
 800366e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003678:	d006      	beq.n	8003688 <ADC_ConfigureBoostMode+0x64>
 800367a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800367e:	d00b      	beq.n	8003698 <ADC_ConfigureBoostMode+0x74>
 8003680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003684:	d000      	beq.n	8003688 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8003686:	e05d      	b.n	8003744 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	fbb2 f3f3 	udiv	r3, r2, r3
 8003694:	60fb      	str	r3, [r7, #12]
        break;
 8003696:	e055      	b.n	8003744 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	089b      	lsrs	r3, r3, #2
 800369c:	60fb      	str	r3, [r7, #12]
        break;
 800369e:	e051      	b.n	8003744 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80036a0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80036a4:	f004 fd3a 	bl	800811c <HAL_RCCEx_GetPeriphCLKFreq>
 80036a8:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80036b2:	d02a      	beq.n	800370a <ADC_ConfigureBoostMode+0xe6>
 80036b4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80036b8:	d813      	bhi.n	80036e2 <ADC_ConfigureBoostMode+0xbe>
 80036ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036be:	d024      	beq.n	800370a <ADC_ConfigureBoostMode+0xe6>
 80036c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036c4:	d806      	bhi.n	80036d4 <ADC_ConfigureBoostMode+0xb0>
 80036c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036ca:	d01e      	beq.n	800370a <ADC_ConfigureBoostMode+0xe6>
 80036cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036d0:	d01b      	beq.n	800370a <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80036d2:	e037      	b.n	8003744 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80036d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036d8:	d017      	beq.n	800370a <ADC_ConfigureBoostMode+0xe6>
 80036da:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80036de:	d014      	beq.n	800370a <ADC_ConfigureBoostMode+0xe6>
        break;
 80036e0:	e030      	b.n	8003744 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80036e2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80036e6:	d021      	beq.n	800372c <ADC_ConfigureBoostMode+0x108>
 80036e8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80036ec:	d806      	bhi.n	80036fc <ADC_ConfigureBoostMode+0xd8>
 80036ee:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80036f2:	d013      	beq.n	800371c <ADC_ConfigureBoostMode+0xf8>
 80036f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036f8:	d014      	beq.n	8003724 <ADC_ConfigureBoostMode+0x100>
        break;
 80036fa:	e023      	b.n	8003744 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80036fc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003700:	d018      	beq.n	8003734 <ADC_ConfigureBoostMode+0x110>
 8003702:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003706:	d019      	beq.n	800373c <ADC_ConfigureBoostMode+0x118>
        break;
 8003708:	e01c      	b.n	8003744 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	0c9b      	lsrs	r3, r3, #18
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	fbb2 f3f3 	udiv	r3, r2, r3
 8003718:	60fb      	str	r3, [r7, #12]
        break;
 800371a:	e013      	b.n	8003744 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	091b      	lsrs	r3, r3, #4
 8003720:	60fb      	str	r3, [r7, #12]
      break;
 8003722:	e00f      	b.n	8003744 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	60fb      	str	r3, [r7, #12]
        break;
 800372a:	e00b      	b.n	8003744 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	099b      	lsrs	r3, r3, #6
 8003730:	60fb      	str	r3, [r7, #12]
        break;
 8003732:	e007      	b.n	8003744 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	09db      	lsrs	r3, r3, #7
 8003738:	60fb      	str	r3, [r7, #12]
        break;
 800373a:	e003      	b.n	8003744 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	60fb      	str	r3, [r7, #12]
        break;
 8003742:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003744:	f7fe fec2 	bl	80024cc <HAL_GetREVID>
 8003748:	4602      	mov	r2, r0
 800374a:	f241 0303 	movw	r3, #4099	; 0x1003
 800374e:	429a      	cmp	r2, r3
 8003750:	d815      	bhi.n	800377e <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4a2b      	ldr	r2, [pc, #172]	; (8003804 <ADC_ConfigureBoostMode+0x1e0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d908      	bls.n	800376c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003768:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800376a:	e03e      	b.n	80037ea <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800377a:	609a      	str	r2, [r3, #8]
}
 800377c:	e035      	b.n	80037ea <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4a20      	ldr	r2, [pc, #128]	; (8003808 <ADC_ConfigureBoostMode+0x1e4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d808      	bhi.n	800379e <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800379a:	609a      	str	r2, [r3, #8]
}
 800379c:	e025      	b.n	80037ea <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4a1a      	ldr	r2, [pc, #104]	; (800380c <ADC_ConfigureBoostMode+0x1e8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d80a      	bhi.n	80037bc <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b8:	609a      	str	r2, [r3, #8]
}
 80037ba:	e016      	b.n	80037ea <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4a14      	ldr	r2, [pc, #80]	; (8003810 <ADC_ConfigureBoostMode+0x1ec>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d80a      	bhi.n	80037da <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d6:	609a      	str	r2, [r3, #8]
}
 80037d8:	e007      	b.n	80037ea <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80037e8:	609a      	str	r2, [r3, #8]
}
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40022000 	.word	0x40022000
 80037f8:	40022100 	.word	0x40022100
 80037fc:	40022300 	.word	0x40022300
 8003800:	58026300 	.word	0x58026300
 8003804:	01312d00 	.word	0x01312d00
 8003808:	005f5e10 	.word	0x005f5e10
 800380c:	00bebc20 	.word	0x00bebc20
 8003810:	017d7840 	.word	0x017d7840

08003814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <__NVIC_SetPriorityGrouping+0x40>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003830:	4013      	ands	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <__NVIC_SetPriorityGrouping+0x44>)
 800383e:	4313      	orrs	r3, r2
 8003840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003842:	4a04      	ldr	r2, [pc, #16]	; (8003854 <__NVIC_SetPriorityGrouping+0x40>)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	60d3      	str	r3, [r2, #12]
}
 8003848:	bf00      	nop
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	e000ed00 	.word	0xe000ed00
 8003858:	05fa0000 	.word	0x05fa0000

0800385c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <__NVIC_GetPriorityGrouping+0x18>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	f003 0307 	and.w	r3, r3, #7
}
 800386a:	4618      	mov	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003886:	2b00      	cmp	r3, #0
 8003888:	db0b      	blt.n	80038a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	f003 021f 	and.w	r2, r3, #31
 8003890:	4907      	ldr	r1, [pc, #28]	; (80038b0 <__NVIC_EnableIRQ+0x38>)
 8003892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	2001      	movs	r0, #1
 800389a:	fa00 f202 	lsl.w	r2, r0, r2
 800389e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	e000e100 	.word	0xe000e100

080038b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	6039      	str	r1, [r7, #0]
 80038be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	db0a      	blt.n	80038de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	490c      	ldr	r1, [pc, #48]	; (8003900 <__NVIC_SetPriority+0x4c>)
 80038ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038d2:	0112      	lsls	r2, r2, #4
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	440b      	add	r3, r1
 80038d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038dc:	e00a      	b.n	80038f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <__NVIC_SetPriority+0x50>)
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	3b04      	subs	r3, #4
 80038ec:	0112      	lsls	r2, r2, #4
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	440b      	add	r3, r1
 80038f2:	761a      	strb	r2, [r3, #24]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000e100 	.word	0xe000e100
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003908:	b480      	push	{r7}
 800390a:	b089      	sub	sp, #36	; 0x24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f1c3 0307 	rsb	r3, r3, #7
 8003922:	2b04      	cmp	r3, #4
 8003924:	bf28      	it	cs
 8003926:	2304      	movcs	r3, #4
 8003928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3304      	adds	r3, #4
 800392e:	2b06      	cmp	r3, #6
 8003930:	d902      	bls.n	8003938 <NVIC_EncodePriority+0x30>
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3b03      	subs	r3, #3
 8003936:	e000      	b.n	800393a <NVIC_EncodePriority+0x32>
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800393c:	f04f 32ff 	mov.w	r2, #4294967295
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43da      	mvns	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	401a      	ands	r2, r3
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003950:	f04f 31ff 	mov.w	r1, #4294967295
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	fa01 f303 	lsl.w	r3, r1, r3
 800395a:	43d9      	mvns	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003960:	4313      	orrs	r3, r2
         );
}
 8003962:	4618      	mov	r0, r3
 8003964:	3724      	adds	r7, #36	; 0x24
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3b01      	subs	r3, #1
 800397c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003980:	d301      	bcc.n	8003986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003982:	2301      	movs	r3, #1
 8003984:	e00f      	b.n	80039a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003986:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <SysTick_Config+0x40>)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800398e:	210f      	movs	r1, #15
 8003990:	f04f 30ff 	mov.w	r0, #4294967295
 8003994:	f7ff ff8e 	bl	80038b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003998:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <SysTick_Config+0x40>)
 800399a:	2200      	movs	r2, #0
 800399c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800399e:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <SysTick_Config+0x40>)
 80039a0:	2207      	movs	r2, #7
 80039a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	e000e010 	.word	0xe000e010

080039b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ff29 	bl	8003814 <__NVIC_SetPriorityGrouping>
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b086      	sub	sp, #24
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	4603      	mov	r3, r0
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039d8:	f7ff ff40 	bl	800385c <__NVIC_GetPriorityGrouping>
 80039dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	68b9      	ldr	r1, [r7, #8]
 80039e2:	6978      	ldr	r0, [r7, #20]
 80039e4:	f7ff ff90 	bl	8003908 <NVIC_EncodePriority>
 80039e8:	4602      	mov	r2, r0
 80039ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039ee:	4611      	mov	r1, r2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff ff5f 	bl	80038b4 <__NVIC_SetPriority>
}
 80039f6:	bf00      	nop
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	4603      	mov	r3, r0
 8003a06:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff ff33 	bl	8003878 <__NVIC_EnableIRQ>
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff ffa4 	bl	8003970 <SysTick_Config>
 8003a28:	4603      	mov	r3, r0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003a3c:	f7fe fd18 	bl	8002470 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e316      	b.n	800407a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a66      	ldr	r2, [pc, #408]	; (8003bec <HAL_DMA_Init+0x1b8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d04a      	beq.n	8003aec <HAL_DMA_Init+0xb8>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a65      	ldr	r2, [pc, #404]	; (8003bf0 <HAL_DMA_Init+0x1bc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d045      	beq.n	8003aec <HAL_DMA_Init+0xb8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a63      	ldr	r2, [pc, #396]	; (8003bf4 <HAL_DMA_Init+0x1c0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d040      	beq.n	8003aec <HAL_DMA_Init+0xb8>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a62      	ldr	r2, [pc, #392]	; (8003bf8 <HAL_DMA_Init+0x1c4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d03b      	beq.n	8003aec <HAL_DMA_Init+0xb8>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a60      	ldr	r2, [pc, #384]	; (8003bfc <HAL_DMA_Init+0x1c8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d036      	beq.n	8003aec <HAL_DMA_Init+0xb8>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a5f      	ldr	r2, [pc, #380]	; (8003c00 <HAL_DMA_Init+0x1cc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d031      	beq.n	8003aec <HAL_DMA_Init+0xb8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a5d      	ldr	r2, [pc, #372]	; (8003c04 <HAL_DMA_Init+0x1d0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d02c      	beq.n	8003aec <HAL_DMA_Init+0xb8>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a5c      	ldr	r2, [pc, #368]	; (8003c08 <HAL_DMA_Init+0x1d4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d027      	beq.n	8003aec <HAL_DMA_Init+0xb8>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a5a      	ldr	r2, [pc, #360]	; (8003c0c <HAL_DMA_Init+0x1d8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d022      	beq.n	8003aec <HAL_DMA_Init+0xb8>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a59      	ldr	r2, [pc, #356]	; (8003c10 <HAL_DMA_Init+0x1dc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d01d      	beq.n	8003aec <HAL_DMA_Init+0xb8>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a57      	ldr	r2, [pc, #348]	; (8003c14 <HAL_DMA_Init+0x1e0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d018      	beq.n	8003aec <HAL_DMA_Init+0xb8>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a56      	ldr	r2, [pc, #344]	; (8003c18 <HAL_DMA_Init+0x1e4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d013      	beq.n	8003aec <HAL_DMA_Init+0xb8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a54      	ldr	r2, [pc, #336]	; (8003c1c <HAL_DMA_Init+0x1e8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00e      	beq.n	8003aec <HAL_DMA_Init+0xb8>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a53      	ldr	r2, [pc, #332]	; (8003c20 <HAL_DMA_Init+0x1ec>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d009      	beq.n	8003aec <HAL_DMA_Init+0xb8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a51      	ldr	r2, [pc, #324]	; (8003c24 <HAL_DMA_Init+0x1f0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d004      	beq.n	8003aec <HAL_DMA_Init+0xb8>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a50      	ldr	r2, [pc, #320]	; (8003c28 <HAL_DMA_Init+0x1f4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d101      	bne.n	8003af0 <HAL_DMA_Init+0xbc>
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <HAL_DMA_Init+0xbe>
 8003af0:	2300      	movs	r3, #0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 813b 	beq.w	8003d6e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a37      	ldr	r2, [pc, #220]	; (8003bec <HAL_DMA_Init+0x1b8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d04a      	beq.n	8003ba8 <HAL_DMA_Init+0x174>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a36      	ldr	r2, [pc, #216]	; (8003bf0 <HAL_DMA_Init+0x1bc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d045      	beq.n	8003ba8 <HAL_DMA_Init+0x174>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a34      	ldr	r2, [pc, #208]	; (8003bf4 <HAL_DMA_Init+0x1c0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d040      	beq.n	8003ba8 <HAL_DMA_Init+0x174>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a33      	ldr	r2, [pc, #204]	; (8003bf8 <HAL_DMA_Init+0x1c4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d03b      	beq.n	8003ba8 <HAL_DMA_Init+0x174>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a31      	ldr	r2, [pc, #196]	; (8003bfc <HAL_DMA_Init+0x1c8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d036      	beq.n	8003ba8 <HAL_DMA_Init+0x174>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a30      	ldr	r2, [pc, #192]	; (8003c00 <HAL_DMA_Init+0x1cc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d031      	beq.n	8003ba8 <HAL_DMA_Init+0x174>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a2e      	ldr	r2, [pc, #184]	; (8003c04 <HAL_DMA_Init+0x1d0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d02c      	beq.n	8003ba8 <HAL_DMA_Init+0x174>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a2d      	ldr	r2, [pc, #180]	; (8003c08 <HAL_DMA_Init+0x1d4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d027      	beq.n	8003ba8 <HAL_DMA_Init+0x174>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a2b      	ldr	r2, [pc, #172]	; (8003c0c <HAL_DMA_Init+0x1d8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d022      	beq.n	8003ba8 <HAL_DMA_Init+0x174>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a2a      	ldr	r2, [pc, #168]	; (8003c10 <HAL_DMA_Init+0x1dc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d01d      	beq.n	8003ba8 <HAL_DMA_Init+0x174>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a28      	ldr	r2, [pc, #160]	; (8003c14 <HAL_DMA_Init+0x1e0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d018      	beq.n	8003ba8 <HAL_DMA_Init+0x174>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a27      	ldr	r2, [pc, #156]	; (8003c18 <HAL_DMA_Init+0x1e4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d013      	beq.n	8003ba8 <HAL_DMA_Init+0x174>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a25      	ldr	r2, [pc, #148]	; (8003c1c <HAL_DMA_Init+0x1e8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00e      	beq.n	8003ba8 <HAL_DMA_Init+0x174>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a24      	ldr	r2, [pc, #144]	; (8003c20 <HAL_DMA_Init+0x1ec>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d009      	beq.n	8003ba8 <HAL_DMA_Init+0x174>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a22      	ldr	r2, [pc, #136]	; (8003c24 <HAL_DMA_Init+0x1f0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d004      	beq.n	8003ba8 <HAL_DMA_Init+0x174>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a21      	ldr	r2, [pc, #132]	; (8003c28 <HAL_DMA_Init+0x1f4>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d108      	bne.n	8003bba <HAL_DMA_Init+0x186>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0201 	bic.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	e007      	b.n	8003bca <HAL_DMA_Init+0x196>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0201 	bic.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bca:	e02f      	b.n	8003c2c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bcc:	f7fe fc50 	bl	8002470 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b05      	cmp	r3, #5
 8003bd8:	d928      	bls.n	8003c2c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2203      	movs	r2, #3
 8003be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e246      	b.n	800407a <HAL_DMA_Init+0x646>
 8003bec:	40020010 	.word	0x40020010
 8003bf0:	40020028 	.word	0x40020028
 8003bf4:	40020040 	.word	0x40020040
 8003bf8:	40020058 	.word	0x40020058
 8003bfc:	40020070 	.word	0x40020070
 8003c00:	40020088 	.word	0x40020088
 8003c04:	400200a0 	.word	0x400200a0
 8003c08:	400200b8 	.word	0x400200b8
 8003c0c:	40020410 	.word	0x40020410
 8003c10:	40020428 	.word	0x40020428
 8003c14:	40020440 	.word	0x40020440
 8003c18:	40020458 	.word	0x40020458
 8003c1c:	40020470 	.word	0x40020470
 8003c20:	40020488 	.word	0x40020488
 8003c24:	400204a0 	.word	0x400204a0
 8003c28:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1c8      	bne.n	8003bcc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4b83      	ldr	r3, [pc, #524]	; (8003e54 <HAL_DMA_Init+0x420>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003c52:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c5e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c6a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d107      	bne.n	8003c90 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003c90:	4b71      	ldr	r3, [pc, #452]	; (8003e58 <HAL_DMA_Init+0x424>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4b71      	ldr	r3, [pc, #452]	; (8003e5c <HAL_DMA_Init+0x428>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c9c:	d328      	bcc.n	8003cf0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b28      	cmp	r3, #40	; 0x28
 8003ca4:	d903      	bls.n	8003cae <HAL_DMA_Init+0x27a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b2e      	cmp	r3, #46	; 0x2e
 8003cac:	d917      	bls.n	8003cde <HAL_DMA_Init+0x2aa>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b3e      	cmp	r3, #62	; 0x3e
 8003cb4:	d903      	bls.n	8003cbe <HAL_DMA_Init+0x28a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b42      	cmp	r3, #66	; 0x42
 8003cbc:	d90f      	bls.n	8003cde <HAL_DMA_Init+0x2aa>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b46      	cmp	r3, #70	; 0x46
 8003cc4:	d903      	bls.n	8003cce <HAL_DMA_Init+0x29a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b48      	cmp	r3, #72	; 0x48
 8003ccc:	d907      	bls.n	8003cde <HAL_DMA_Init+0x2aa>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b4e      	cmp	r3, #78	; 0x4e
 8003cd4:	d905      	bls.n	8003ce2 <HAL_DMA_Init+0x2ae>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b52      	cmp	r3, #82	; 0x52
 8003cdc:	d801      	bhi.n	8003ce2 <HAL_DMA_Init+0x2ae>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <HAL_DMA_Init+0x2b0>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cee:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f023 0307 	bic.w	r3, r3, #7
 8003d06:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d117      	bne.n	8003d4a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00e      	beq.n	8003d4a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f002 f813 	bl	8005d58 <DMA_CheckFifoParam>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2240      	movs	r2, #64	; 0x40
 8003d3c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e197      	b.n	800407a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f001 ff4e 	bl	8005bf4 <DMA_CalcBaseAndBitshift>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	223f      	movs	r2, #63	; 0x3f
 8003d66:	409a      	lsls	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	609a      	str	r2, [r3, #8]
 8003d6c:	e0cd      	b.n	8003f0a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a3b      	ldr	r2, [pc, #236]	; (8003e60 <HAL_DMA_Init+0x42c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d022      	beq.n	8003dbe <HAL_DMA_Init+0x38a>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a39      	ldr	r2, [pc, #228]	; (8003e64 <HAL_DMA_Init+0x430>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d01d      	beq.n	8003dbe <HAL_DMA_Init+0x38a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a38      	ldr	r2, [pc, #224]	; (8003e68 <HAL_DMA_Init+0x434>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d018      	beq.n	8003dbe <HAL_DMA_Init+0x38a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a36      	ldr	r2, [pc, #216]	; (8003e6c <HAL_DMA_Init+0x438>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d013      	beq.n	8003dbe <HAL_DMA_Init+0x38a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a35      	ldr	r2, [pc, #212]	; (8003e70 <HAL_DMA_Init+0x43c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00e      	beq.n	8003dbe <HAL_DMA_Init+0x38a>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a33      	ldr	r2, [pc, #204]	; (8003e74 <HAL_DMA_Init+0x440>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d009      	beq.n	8003dbe <HAL_DMA_Init+0x38a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a32      	ldr	r2, [pc, #200]	; (8003e78 <HAL_DMA_Init+0x444>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d004      	beq.n	8003dbe <HAL_DMA_Init+0x38a>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a30      	ldr	r2, [pc, #192]	; (8003e7c <HAL_DMA_Init+0x448>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d101      	bne.n	8003dc2 <HAL_DMA_Init+0x38e>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <HAL_DMA_Init+0x390>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 8097 	beq.w	8003ef8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a24      	ldr	r2, [pc, #144]	; (8003e60 <HAL_DMA_Init+0x42c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d021      	beq.n	8003e18 <HAL_DMA_Init+0x3e4>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a22      	ldr	r2, [pc, #136]	; (8003e64 <HAL_DMA_Init+0x430>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01c      	beq.n	8003e18 <HAL_DMA_Init+0x3e4>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a21      	ldr	r2, [pc, #132]	; (8003e68 <HAL_DMA_Init+0x434>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d017      	beq.n	8003e18 <HAL_DMA_Init+0x3e4>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1f      	ldr	r2, [pc, #124]	; (8003e6c <HAL_DMA_Init+0x438>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d012      	beq.n	8003e18 <HAL_DMA_Init+0x3e4>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1e      	ldr	r2, [pc, #120]	; (8003e70 <HAL_DMA_Init+0x43c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00d      	beq.n	8003e18 <HAL_DMA_Init+0x3e4>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1c      	ldr	r2, [pc, #112]	; (8003e74 <HAL_DMA_Init+0x440>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d008      	beq.n	8003e18 <HAL_DMA_Init+0x3e4>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1b      	ldr	r2, [pc, #108]	; (8003e78 <HAL_DMA_Init+0x444>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <HAL_DMA_Init+0x3e4>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a19      	ldr	r2, [pc, #100]	; (8003e7c <HAL_DMA_Init+0x448>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2202      	movs	r2, #2
 8003e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <HAL_DMA_Init+0x44c>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2b40      	cmp	r3, #64	; 0x40
 8003e40:	d020      	beq.n	8003e84 <HAL_DMA_Init+0x450>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2b80      	cmp	r3, #128	; 0x80
 8003e48:	d102      	bne.n	8003e50 <HAL_DMA_Init+0x41c>
 8003e4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e4e:	e01a      	b.n	8003e86 <HAL_DMA_Init+0x452>
 8003e50:	2300      	movs	r3, #0
 8003e52:	e018      	b.n	8003e86 <HAL_DMA_Init+0x452>
 8003e54:	fe10803f 	.word	0xfe10803f
 8003e58:	5c001000 	.word	0x5c001000
 8003e5c:	ffff0000 	.word	0xffff0000
 8003e60:	58025408 	.word	0x58025408
 8003e64:	5802541c 	.word	0x5802541c
 8003e68:	58025430 	.word	0x58025430
 8003e6c:	58025444 	.word	0x58025444
 8003e70:	58025458 	.word	0x58025458
 8003e74:	5802546c 	.word	0x5802546c
 8003e78:	58025480 	.word	0x58025480
 8003e7c:	58025494 	.word	0x58025494
 8003e80:	fffe000f 	.word	0xfffe000f
 8003e84:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	68d2      	ldr	r2, [r2, #12]
 8003e8a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003ea4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003eac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003eb4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4b6e      	ldr	r3, [pc, #440]	; (8004084 <HAL_DMA_Init+0x650>)
 8003ecc:	4413      	add	r3, r2
 8003ece:	4a6e      	ldr	r2, [pc, #440]	; (8004088 <HAL_DMA_Init+0x654>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	009a      	lsls	r2, r3, #2
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f001 fe89 	bl	8005bf4 <DMA_CalcBaseAndBitshift>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eea:	f003 031f 	and.w	r3, r3, #31
 8003eee:	2201      	movs	r2, #1
 8003ef0:	409a      	lsls	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	605a      	str	r2, [r3, #4]
 8003ef6:	e008      	b.n	8003f0a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2240      	movs	r2, #64	; 0x40
 8003efc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2203      	movs	r2, #3
 8003f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e0b7      	b.n	800407a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a5f      	ldr	r2, [pc, #380]	; (800408c <HAL_DMA_Init+0x658>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d072      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a5d      	ldr	r2, [pc, #372]	; (8004090 <HAL_DMA_Init+0x65c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d06d      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a5c      	ldr	r2, [pc, #368]	; (8004094 <HAL_DMA_Init+0x660>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d068      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a5a      	ldr	r2, [pc, #360]	; (8004098 <HAL_DMA_Init+0x664>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d063      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a59      	ldr	r2, [pc, #356]	; (800409c <HAL_DMA_Init+0x668>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d05e      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a57      	ldr	r2, [pc, #348]	; (80040a0 <HAL_DMA_Init+0x66c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d059      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a56      	ldr	r2, [pc, #344]	; (80040a4 <HAL_DMA_Init+0x670>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d054      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a54      	ldr	r2, [pc, #336]	; (80040a8 <HAL_DMA_Init+0x674>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d04f      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a53      	ldr	r2, [pc, #332]	; (80040ac <HAL_DMA_Init+0x678>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d04a      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a51      	ldr	r2, [pc, #324]	; (80040b0 <HAL_DMA_Init+0x67c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d045      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a50      	ldr	r2, [pc, #320]	; (80040b4 <HAL_DMA_Init+0x680>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d040      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a4e      	ldr	r2, [pc, #312]	; (80040b8 <HAL_DMA_Init+0x684>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d03b      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a4d      	ldr	r2, [pc, #308]	; (80040bc <HAL_DMA_Init+0x688>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d036      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a4b      	ldr	r2, [pc, #300]	; (80040c0 <HAL_DMA_Init+0x68c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d031      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a4a      	ldr	r2, [pc, #296]	; (80040c4 <HAL_DMA_Init+0x690>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d02c      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a48      	ldr	r2, [pc, #288]	; (80040c8 <HAL_DMA_Init+0x694>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d027      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a47      	ldr	r2, [pc, #284]	; (80040cc <HAL_DMA_Init+0x698>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d022      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a45      	ldr	r2, [pc, #276]	; (80040d0 <HAL_DMA_Init+0x69c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d01d      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a44      	ldr	r2, [pc, #272]	; (80040d4 <HAL_DMA_Init+0x6a0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d018      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a42      	ldr	r2, [pc, #264]	; (80040d8 <HAL_DMA_Init+0x6a4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d013      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a41      	ldr	r2, [pc, #260]	; (80040dc <HAL_DMA_Init+0x6a8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00e      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a3f      	ldr	r2, [pc, #252]	; (80040e0 <HAL_DMA_Init+0x6ac>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d009      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a3e      	ldr	r2, [pc, #248]	; (80040e4 <HAL_DMA_Init+0x6b0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d004      	beq.n	8003ffa <HAL_DMA_Init+0x5c6>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a3c      	ldr	r2, [pc, #240]	; (80040e8 <HAL_DMA_Init+0x6b4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d101      	bne.n	8003ffe <HAL_DMA_Init+0x5ca>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <HAL_DMA_Init+0x5cc>
 8003ffe:	2300      	movs	r3, #0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d032      	beq.n	800406a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f001 ff23 	bl	8005e50 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b80      	cmp	r3, #128	; 0x80
 8004010:	d102      	bne.n	8004018 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800402c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d010      	beq.n	8004058 <HAL_DMA_Init+0x624>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b08      	cmp	r3, #8
 800403c:	d80c      	bhi.n	8004058 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f001 ffa0 	bl	8005f84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	e008      	b.n	800406a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	a7fdabf8 	.word	0xa7fdabf8
 8004088:	cccccccd 	.word	0xcccccccd
 800408c:	40020010 	.word	0x40020010
 8004090:	40020028 	.word	0x40020028
 8004094:	40020040 	.word	0x40020040
 8004098:	40020058 	.word	0x40020058
 800409c:	40020070 	.word	0x40020070
 80040a0:	40020088 	.word	0x40020088
 80040a4:	400200a0 	.word	0x400200a0
 80040a8:	400200b8 	.word	0x400200b8
 80040ac:	40020410 	.word	0x40020410
 80040b0:	40020428 	.word	0x40020428
 80040b4:	40020440 	.word	0x40020440
 80040b8:	40020458 	.word	0x40020458
 80040bc:	40020470 	.word	0x40020470
 80040c0:	40020488 	.word	0x40020488
 80040c4:	400204a0 	.word	0x400204a0
 80040c8:	400204b8 	.word	0x400204b8
 80040cc:	58025408 	.word	0x58025408
 80040d0:	5802541c 	.word	0x5802541c
 80040d4:	58025430 	.word	0x58025430
 80040d8:	58025444 	.word	0x58025444
 80040dc:	58025458 	.word	0x58025458
 80040e0:	5802546c 	.word	0x5802546c
 80040e4:	58025480 	.word	0x58025480
 80040e8:	58025494 	.word	0x58025494

080040ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e226      	b.n	8004556 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800410e:	2b01      	cmp	r3, #1
 8004110:	d101      	bne.n	8004116 <HAL_DMA_Start_IT+0x2a>
 8004112:	2302      	movs	r3, #2
 8004114:	e21f      	b.n	8004556 <HAL_DMA_Start_IT+0x46a>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b01      	cmp	r3, #1
 8004128:	f040 820a 	bne.w	8004540 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a68      	ldr	r2, [pc, #416]	; (80042e0 <HAL_DMA_Start_IT+0x1f4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d04a      	beq.n	80041da <HAL_DMA_Start_IT+0xee>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a66      	ldr	r2, [pc, #408]	; (80042e4 <HAL_DMA_Start_IT+0x1f8>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d045      	beq.n	80041da <HAL_DMA_Start_IT+0xee>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a65      	ldr	r2, [pc, #404]	; (80042e8 <HAL_DMA_Start_IT+0x1fc>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d040      	beq.n	80041da <HAL_DMA_Start_IT+0xee>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a63      	ldr	r2, [pc, #396]	; (80042ec <HAL_DMA_Start_IT+0x200>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d03b      	beq.n	80041da <HAL_DMA_Start_IT+0xee>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a62      	ldr	r2, [pc, #392]	; (80042f0 <HAL_DMA_Start_IT+0x204>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d036      	beq.n	80041da <HAL_DMA_Start_IT+0xee>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a60      	ldr	r2, [pc, #384]	; (80042f4 <HAL_DMA_Start_IT+0x208>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d031      	beq.n	80041da <HAL_DMA_Start_IT+0xee>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a5f      	ldr	r2, [pc, #380]	; (80042f8 <HAL_DMA_Start_IT+0x20c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d02c      	beq.n	80041da <HAL_DMA_Start_IT+0xee>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a5d      	ldr	r2, [pc, #372]	; (80042fc <HAL_DMA_Start_IT+0x210>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d027      	beq.n	80041da <HAL_DMA_Start_IT+0xee>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a5c      	ldr	r2, [pc, #368]	; (8004300 <HAL_DMA_Start_IT+0x214>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d022      	beq.n	80041da <HAL_DMA_Start_IT+0xee>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a5a      	ldr	r2, [pc, #360]	; (8004304 <HAL_DMA_Start_IT+0x218>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d01d      	beq.n	80041da <HAL_DMA_Start_IT+0xee>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a59      	ldr	r2, [pc, #356]	; (8004308 <HAL_DMA_Start_IT+0x21c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d018      	beq.n	80041da <HAL_DMA_Start_IT+0xee>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a57      	ldr	r2, [pc, #348]	; (800430c <HAL_DMA_Start_IT+0x220>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d013      	beq.n	80041da <HAL_DMA_Start_IT+0xee>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a56      	ldr	r2, [pc, #344]	; (8004310 <HAL_DMA_Start_IT+0x224>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00e      	beq.n	80041da <HAL_DMA_Start_IT+0xee>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a54      	ldr	r2, [pc, #336]	; (8004314 <HAL_DMA_Start_IT+0x228>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d009      	beq.n	80041da <HAL_DMA_Start_IT+0xee>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a53      	ldr	r2, [pc, #332]	; (8004318 <HAL_DMA_Start_IT+0x22c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d004      	beq.n	80041da <HAL_DMA_Start_IT+0xee>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a51      	ldr	r2, [pc, #324]	; (800431c <HAL_DMA_Start_IT+0x230>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d108      	bne.n	80041ec <HAL_DMA_Start_IT+0x100>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0201 	bic.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	e007      	b.n	80041fc <HAL_DMA_Start_IT+0x110>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0201 	bic.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	68b9      	ldr	r1, [r7, #8]
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f001 fb4a 	bl	800589c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a34      	ldr	r2, [pc, #208]	; (80042e0 <HAL_DMA_Start_IT+0x1f4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d04a      	beq.n	80042a8 <HAL_DMA_Start_IT+0x1bc>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a33      	ldr	r2, [pc, #204]	; (80042e4 <HAL_DMA_Start_IT+0x1f8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d045      	beq.n	80042a8 <HAL_DMA_Start_IT+0x1bc>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a31      	ldr	r2, [pc, #196]	; (80042e8 <HAL_DMA_Start_IT+0x1fc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d040      	beq.n	80042a8 <HAL_DMA_Start_IT+0x1bc>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a30      	ldr	r2, [pc, #192]	; (80042ec <HAL_DMA_Start_IT+0x200>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d03b      	beq.n	80042a8 <HAL_DMA_Start_IT+0x1bc>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a2e      	ldr	r2, [pc, #184]	; (80042f0 <HAL_DMA_Start_IT+0x204>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d036      	beq.n	80042a8 <HAL_DMA_Start_IT+0x1bc>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a2d      	ldr	r2, [pc, #180]	; (80042f4 <HAL_DMA_Start_IT+0x208>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d031      	beq.n	80042a8 <HAL_DMA_Start_IT+0x1bc>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a2b      	ldr	r2, [pc, #172]	; (80042f8 <HAL_DMA_Start_IT+0x20c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d02c      	beq.n	80042a8 <HAL_DMA_Start_IT+0x1bc>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2a      	ldr	r2, [pc, #168]	; (80042fc <HAL_DMA_Start_IT+0x210>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d027      	beq.n	80042a8 <HAL_DMA_Start_IT+0x1bc>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a28      	ldr	r2, [pc, #160]	; (8004300 <HAL_DMA_Start_IT+0x214>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d022      	beq.n	80042a8 <HAL_DMA_Start_IT+0x1bc>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a27      	ldr	r2, [pc, #156]	; (8004304 <HAL_DMA_Start_IT+0x218>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d01d      	beq.n	80042a8 <HAL_DMA_Start_IT+0x1bc>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a25      	ldr	r2, [pc, #148]	; (8004308 <HAL_DMA_Start_IT+0x21c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d018      	beq.n	80042a8 <HAL_DMA_Start_IT+0x1bc>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a24      	ldr	r2, [pc, #144]	; (800430c <HAL_DMA_Start_IT+0x220>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d013      	beq.n	80042a8 <HAL_DMA_Start_IT+0x1bc>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a22      	ldr	r2, [pc, #136]	; (8004310 <HAL_DMA_Start_IT+0x224>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00e      	beq.n	80042a8 <HAL_DMA_Start_IT+0x1bc>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a21      	ldr	r2, [pc, #132]	; (8004314 <HAL_DMA_Start_IT+0x228>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d009      	beq.n	80042a8 <HAL_DMA_Start_IT+0x1bc>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1f      	ldr	r2, [pc, #124]	; (8004318 <HAL_DMA_Start_IT+0x22c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d004      	beq.n	80042a8 <HAL_DMA_Start_IT+0x1bc>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1e      	ldr	r2, [pc, #120]	; (800431c <HAL_DMA_Start_IT+0x230>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d101      	bne.n	80042ac <HAL_DMA_Start_IT+0x1c0>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <HAL_DMA_Start_IT+0x1c2>
 80042ac:	2300      	movs	r3, #0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d036      	beq.n	8004320 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f023 021e 	bic.w	r2, r3, #30
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f042 0216 	orr.w	r2, r2, #22
 80042c4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d03e      	beq.n	800434c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0208 	orr.w	r2, r2, #8
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	e035      	b.n	800434c <HAL_DMA_Start_IT+0x260>
 80042e0:	40020010 	.word	0x40020010
 80042e4:	40020028 	.word	0x40020028
 80042e8:	40020040 	.word	0x40020040
 80042ec:	40020058 	.word	0x40020058
 80042f0:	40020070 	.word	0x40020070
 80042f4:	40020088 	.word	0x40020088
 80042f8:	400200a0 	.word	0x400200a0
 80042fc:	400200b8 	.word	0x400200b8
 8004300:	40020410 	.word	0x40020410
 8004304:	40020428 	.word	0x40020428
 8004308:	40020440 	.word	0x40020440
 800430c:	40020458 	.word	0x40020458
 8004310:	40020470 	.word	0x40020470
 8004314:	40020488 	.word	0x40020488
 8004318:	400204a0 	.word	0x400204a0
 800431c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 020e 	bic.w	r2, r3, #14
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 020a 	orr.w	r2, r2, #10
 8004332:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d007      	beq.n	800434c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0204 	orr.w	r2, r2, #4
 800434a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a83      	ldr	r2, [pc, #524]	; (8004560 <HAL_DMA_Start_IT+0x474>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d072      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a82      	ldr	r2, [pc, #520]	; (8004564 <HAL_DMA_Start_IT+0x478>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d06d      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a80      	ldr	r2, [pc, #512]	; (8004568 <HAL_DMA_Start_IT+0x47c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d068      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a7f      	ldr	r2, [pc, #508]	; (800456c <HAL_DMA_Start_IT+0x480>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d063      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a7d      	ldr	r2, [pc, #500]	; (8004570 <HAL_DMA_Start_IT+0x484>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d05e      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a7c      	ldr	r2, [pc, #496]	; (8004574 <HAL_DMA_Start_IT+0x488>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d059      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a7a      	ldr	r2, [pc, #488]	; (8004578 <HAL_DMA_Start_IT+0x48c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d054      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a79      	ldr	r2, [pc, #484]	; (800457c <HAL_DMA_Start_IT+0x490>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d04f      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a77      	ldr	r2, [pc, #476]	; (8004580 <HAL_DMA_Start_IT+0x494>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d04a      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a76      	ldr	r2, [pc, #472]	; (8004584 <HAL_DMA_Start_IT+0x498>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d045      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a74      	ldr	r2, [pc, #464]	; (8004588 <HAL_DMA_Start_IT+0x49c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d040      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a73      	ldr	r2, [pc, #460]	; (800458c <HAL_DMA_Start_IT+0x4a0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d03b      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a71      	ldr	r2, [pc, #452]	; (8004590 <HAL_DMA_Start_IT+0x4a4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d036      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a70      	ldr	r2, [pc, #448]	; (8004594 <HAL_DMA_Start_IT+0x4a8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d031      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a6e      	ldr	r2, [pc, #440]	; (8004598 <HAL_DMA_Start_IT+0x4ac>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d02c      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a6d      	ldr	r2, [pc, #436]	; (800459c <HAL_DMA_Start_IT+0x4b0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d027      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a6b      	ldr	r2, [pc, #428]	; (80045a0 <HAL_DMA_Start_IT+0x4b4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d022      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a6a      	ldr	r2, [pc, #424]	; (80045a4 <HAL_DMA_Start_IT+0x4b8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d01d      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a68      	ldr	r2, [pc, #416]	; (80045a8 <HAL_DMA_Start_IT+0x4bc>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d018      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a67      	ldr	r2, [pc, #412]	; (80045ac <HAL_DMA_Start_IT+0x4c0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d013      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a65      	ldr	r2, [pc, #404]	; (80045b0 <HAL_DMA_Start_IT+0x4c4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00e      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a64      	ldr	r2, [pc, #400]	; (80045b4 <HAL_DMA_Start_IT+0x4c8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d009      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a62      	ldr	r2, [pc, #392]	; (80045b8 <HAL_DMA_Start_IT+0x4cc>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d004      	beq.n	800443c <HAL_DMA_Start_IT+0x350>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a61      	ldr	r2, [pc, #388]	; (80045bc <HAL_DMA_Start_IT+0x4d0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d101      	bne.n	8004440 <HAL_DMA_Start_IT+0x354>
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <HAL_DMA_Start_IT+0x356>
 8004440:	2300      	movs	r3, #0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d01a      	beq.n	800447c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d007      	beq.n	8004464 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004462:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004468:	2b00      	cmp	r3, #0
 800446a:	d007      	beq.n	800447c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800447a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a37      	ldr	r2, [pc, #220]	; (8004560 <HAL_DMA_Start_IT+0x474>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d04a      	beq.n	800451c <HAL_DMA_Start_IT+0x430>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a36      	ldr	r2, [pc, #216]	; (8004564 <HAL_DMA_Start_IT+0x478>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d045      	beq.n	800451c <HAL_DMA_Start_IT+0x430>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a34      	ldr	r2, [pc, #208]	; (8004568 <HAL_DMA_Start_IT+0x47c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d040      	beq.n	800451c <HAL_DMA_Start_IT+0x430>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a33      	ldr	r2, [pc, #204]	; (800456c <HAL_DMA_Start_IT+0x480>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d03b      	beq.n	800451c <HAL_DMA_Start_IT+0x430>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a31      	ldr	r2, [pc, #196]	; (8004570 <HAL_DMA_Start_IT+0x484>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d036      	beq.n	800451c <HAL_DMA_Start_IT+0x430>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a30      	ldr	r2, [pc, #192]	; (8004574 <HAL_DMA_Start_IT+0x488>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d031      	beq.n	800451c <HAL_DMA_Start_IT+0x430>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a2e      	ldr	r2, [pc, #184]	; (8004578 <HAL_DMA_Start_IT+0x48c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d02c      	beq.n	800451c <HAL_DMA_Start_IT+0x430>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a2d      	ldr	r2, [pc, #180]	; (800457c <HAL_DMA_Start_IT+0x490>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d027      	beq.n	800451c <HAL_DMA_Start_IT+0x430>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a2b      	ldr	r2, [pc, #172]	; (8004580 <HAL_DMA_Start_IT+0x494>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d022      	beq.n	800451c <HAL_DMA_Start_IT+0x430>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a2a      	ldr	r2, [pc, #168]	; (8004584 <HAL_DMA_Start_IT+0x498>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d01d      	beq.n	800451c <HAL_DMA_Start_IT+0x430>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a28      	ldr	r2, [pc, #160]	; (8004588 <HAL_DMA_Start_IT+0x49c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d018      	beq.n	800451c <HAL_DMA_Start_IT+0x430>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a27      	ldr	r2, [pc, #156]	; (800458c <HAL_DMA_Start_IT+0x4a0>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <HAL_DMA_Start_IT+0x430>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a25      	ldr	r2, [pc, #148]	; (8004590 <HAL_DMA_Start_IT+0x4a4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00e      	beq.n	800451c <HAL_DMA_Start_IT+0x430>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a24      	ldr	r2, [pc, #144]	; (8004594 <HAL_DMA_Start_IT+0x4a8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d009      	beq.n	800451c <HAL_DMA_Start_IT+0x430>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a22      	ldr	r2, [pc, #136]	; (8004598 <HAL_DMA_Start_IT+0x4ac>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d004      	beq.n	800451c <HAL_DMA_Start_IT+0x430>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a21      	ldr	r2, [pc, #132]	; (800459c <HAL_DMA_Start_IT+0x4b0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d108      	bne.n	800452e <HAL_DMA_Start_IT+0x442>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	e012      	b.n	8004554 <HAL_DMA_Start_IT+0x468>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0201 	orr.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	e009      	b.n	8004554 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800454e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004554:	7dfb      	ldrb	r3, [r7, #23]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40020010 	.word	0x40020010
 8004564:	40020028 	.word	0x40020028
 8004568:	40020040 	.word	0x40020040
 800456c:	40020058 	.word	0x40020058
 8004570:	40020070 	.word	0x40020070
 8004574:	40020088 	.word	0x40020088
 8004578:	400200a0 	.word	0x400200a0
 800457c:	400200b8 	.word	0x400200b8
 8004580:	40020410 	.word	0x40020410
 8004584:	40020428 	.word	0x40020428
 8004588:	40020440 	.word	0x40020440
 800458c:	40020458 	.word	0x40020458
 8004590:	40020470 	.word	0x40020470
 8004594:	40020488 	.word	0x40020488
 8004598:	400204a0 	.word	0x400204a0
 800459c:	400204b8 	.word	0x400204b8
 80045a0:	58025408 	.word	0x58025408
 80045a4:	5802541c 	.word	0x5802541c
 80045a8:	58025430 	.word	0x58025430
 80045ac:	58025444 	.word	0x58025444
 80045b0:	58025458 	.word	0x58025458
 80045b4:	5802546c 	.word	0x5802546c
 80045b8:	58025480 	.word	0x58025480
 80045bc:	58025494 	.word	0x58025494

080045c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e205      	b.n	80049de <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d004      	beq.n	80045e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2280      	movs	r2, #128	; 0x80
 80045e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e1fa      	b.n	80049de <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a8c      	ldr	r2, [pc, #560]	; (8004820 <HAL_DMA_Abort_IT+0x260>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d04a      	beq.n	8004688 <HAL_DMA_Abort_IT+0xc8>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a8b      	ldr	r2, [pc, #556]	; (8004824 <HAL_DMA_Abort_IT+0x264>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d045      	beq.n	8004688 <HAL_DMA_Abort_IT+0xc8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a89      	ldr	r2, [pc, #548]	; (8004828 <HAL_DMA_Abort_IT+0x268>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d040      	beq.n	8004688 <HAL_DMA_Abort_IT+0xc8>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a88      	ldr	r2, [pc, #544]	; (800482c <HAL_DMA_Abort_IT+0x26c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d03b      	beq.n	8004688 <HAL_DMA_Abort_IT+0xc8>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a86      	ldr	r2, [pc, #536]	; (8004830 <HAL_DMA_Abort_IT+0x270>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d036      	beq.n	8004688 <HAL_DMA_Abort_IT+0xc8>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a85      	ldr	r2, [pc, #532]	; (8004834 <HAL_DMA_Abort_IT+0x274>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d031      	beq.n	8004688 <HAL_DMA_Abort_IT+0xc8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a83      	ldr	r2, [pc, #524]	; (8004838 <HAL_DMA_Abort_IT+0x278>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d02c      	beq.n	8004688 <HAL_DMA_Abort_IT+0xc8>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a82      	ldr	r2, [pc, #520]	; (800483c <HAL_DMA_Abort_IT+0x27c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d027      	beq.n	8004688 <HAL_DMA_Abort_IT+0xc8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a80      	ldr	r2, [pc, #512]	; (8004840 <HAL_DMA_Abort_IT+0x280>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d022      	beq.n	8004688 <HAL_DMA_Abort_IT+0xc8>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a7f      	ldr	r2, [pc, #508]	; (8004844 <HAL_DMA_Abort_IT+0x284>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d01d      	beq.n	8004688 <HAL_DMA_Abort_IT+0xc8>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a7d      	ldr	r2, [pc, #500]	; (8004848 <HAL_DMA_Abort_IT+0x288>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d018      	beq.n	8004688 <HAL_DMA_Abort_IT+0xc8>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a7c      	ldr	r2, [pc, #496]	; (800484c <HAL_DMA_Abort_IT+0x28c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d013      	beq.n	8004688 <HAL_DMA_Abort_IT+0xc8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a7a      	ldr	r2, [pc, #488]	; (8004850 <HAL_DMA_Abort_IT+0x290>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00e      	beq.n	8004688 <HAL_DMA_Abort_IT+0xc8>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a79      	ldr	r2, [pc, #484]	; (8004854 <HAL_DMA_Abort_IT+0x294>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d009      	beq.n	8004688 <HAL_DMA_Abort_IT+0xc8>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a77      	ldr	r2, [pc, #476]	; (8004858 <HAL_DMA_Abort_IT+0x298>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <HAL_DMA_Abort_IT+0xc8>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a76      	ldr	r2, [pc, #472]	; (800485c <HAL_DMA_Abort_IT+0x29c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d101      	bne.n	800468c <HAL_DMA_Abort_IT+0xcc>
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <HAL_DMA_Abort_IT+0xce>
 800468c:	2300      	movs	r3, #0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d065      	beq.n	800475e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2204      	movs	r2, #4
 8004696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a60      	ldr	r2, [pc, #384]	; (8004820 <HAL_DMA_Abort_IT+0x260>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d04a      	beq.n	800473a <HAL_DMA_Abort_IT+0x17a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a5e      	ldr	r2, [pc, #376]	; (8004824 <HAL_DMA_Abort_IT+0x264>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d045      	beq.n	800473a <HAL_DMA_Abort_IT+0x17a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a5d      	ldr	r2, [pc, #372]	; (8004828 <HAL_DMA_Abort_IT+0x268>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d040      	beq.n	800473a <HAL_DMA_Abort_IT+0x17a>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a5b      	ldr	r2, [pc, #364]	; (800482c <HAL_DMA_Abort_IT+0x26c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d03b      	beq.n	800473a <HAL_DMA_Abort_IT+0x17a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a5a      	ldr	r2, [pc, #360]	; (8004830 <HAL_DMA_Abort_IT+0x270>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d036      	beq.n	800473a <HAL_DMA_Abort_IT+0x17a>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a58      	ldr	r2, [pc, #352]	; (8004834 <HAL_DMA_Abort_IT+0x274>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d031      	beq.n	800473a <HAL_DMA_Abort_IT+0x17a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a57      	ldr	r2, [pc, #348]	; (8004838 <HAL_DMA_Abort_IT+0x278>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d02c      	beq.n	800473a <HAL_DMA_Abort_IT+0x17a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a55      	ldr	r2, [pc, #340]	; (800483c <HAL_DMA_Abort_IT+0x27c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d027      	beq.n	800473a <HAL_DMA_Abort_IT+0x17a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a54      	ldr	r2, [pc, #336]	; (8004840 <HAL_DMA_Abort_IT+0x280>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d022      	beq.n	800473a <HAL_DMA_Abort_IT+0x17a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a52      	ldr	r2, [pc, #328]	; (8004844 <HAL_DMA_Abort_IT+0x284>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01d      	beq.n	800473a <HAL_DMA_Abort_IT+0x17a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a51      	ldr	r2, [pc, #324]	; (8004848 <HAL_DMA_Abort_IT+0x288>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d018      	beq.n	800473a <HAL_DMA_Abort_IT+0x17a>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a4f      	ldr	r2, [pc, #316]	; (800484c <HAL_DMA_Abort_IT+0x28c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d013      	beq.n	800473a <HAL_DMA_Abort_IT+0x17a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a4e      	ldr	r2, [pc, #312]	; (8004850 <HAL_DMA_Abort_IT+0x290>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00e      	beq.n	800473a <HAL_DMA_Abort_IT+0x17a>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a4c      	ldr	r2, [pc, #304]	; (8004854 <HAL_DMA_Abort_IT+0x294>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d009      	beq.n	800473a <HAL_DMA_Abort_IT+0x17a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a4b      	ldr	r2, [pc, #300]	; (8004858 <HAL_DMA_Abort_IT+0x298>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d004      	beq.n	800473a <HAL_DMA_Abort_IT+0x17a>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a49      	ldr	r2, [pc, #292]	; (800485c <HAL_DMA_Abort_IT+0x29c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d108      	bne.n	800474c <HAL_DMA_Abort_IT+0x18c>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0201 	bic.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	e147      	b.n	80049dc <HAL_DMA_Abort_IT+0x41c>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0201 	bic.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	e13e      	b.n	80049dc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 020e 	bic.w	r2, r2, #14
 800476c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a2b      	ldr	r2, [pc, #172]	; (8004820 <HAL_DMA_Abort_IT+0x260>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d04a      	beq.n	800480e <HAL_DMA_Abort_IT+0x24e>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a29      	ldr	r2, [pc, #164]	; (8004824 <HAL_DMA_Abort_IT+0x264>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d045      	beq.n	800480e <HAL_DMA_Abort_IT+0x24e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a28      	ldr	r2, [pc, #160]	; (8004828 <HAL_DMA_Abort_IT+0x268>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d040      	beq.n	800480e <HAL_DMA_Abort_IT+0x24e>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a26      	ldr	r2, [pc, #152]	; (800482c <HAL_DMA_Abort_IT+0x26c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d03b      	beq.n	800480e <HAL_DMA_Abort_IT+0x24e>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a25      	ldr	r2, [pc, #148]	; (8004830 <HAL_DMA_Abort_IT+0x270>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d036      	beq.n	800480e <HAL_DMA_Abort_IT+0x24e>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a23      	ldr	r2, [pc, #140]	; (8004834 <HAL_DMA_Abort_IT+0x274>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d031      	beq.n	800480e <HAL_DMA_Abort_IT+0x24e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a22      	ldr	r2, [pc, #136]	; (8004838 <HAL_DMA_Abort_IT+0x278>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d02c      	beq.n	800480e <HAL_DMA_Abort_IT+0x24e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a20      	ldr	r2, [pc, #128]	; (800483c <HAL_DMA_Abort_IT+0x27c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d027      	beq.n	800480e <HAL_DMA_Abort_IT+0x24e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1f      	ldr	r2, [pc, #124]	; (8004840 <HAL_DMA_Abort_IT+0x280>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d022      	beq.n	800480e <HAL_DMA_Abort_IT+0x24e>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1d      	ldr	r2, [pc, #116]	; (8004844 <HAL_DMA_Abort_IT+0x284>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d01d      	beq.n	800480e <HAL_DMA_Abort_IT+0x24e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1c      	ldr	r2, [pc, #112]	; (8004848 <HAL_DMA_Abort_IT+0x288>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d018      	beq.n	800480e <HAL_DMA_Abort_IT+0x24e>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a1a      	ldr	r2, [pc, #104]	; (800484c <HAL_DMA_Abort_IT+0x28c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d013      	beq.n	800480e <HAL_DMA_Abort_IT+0x24e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a19      	ldr	r2, [pc, #100]	; (8004850 <HAL_DMA_Abort_IT+0x290>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00e      	beq.n	800480e <HAL_DMA_Abort_IT+0x24e>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a17      	ldr	r2, [pc, #92]	; (8004854 <HAL_DMA_Abort_IT+0x294>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d009      	beq.n	800480e <HAL_DMA_Abort_IT+0x24e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a16      	ldr	r2, [pc, #88]	; (8004858 <HAL_DMA_Abort_IT+0x298>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <HAL_DMA_Abort_IT+0x24e>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a14      	ldr	r2, [pc, #80]	; (800485c <HAL_DMA_Abort_IT+0x29c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d128      	bne.n	8004860 <HAL_DMA_Abort_IT+0x2a0>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0201 	bic.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	e027      	b.n	8004870 <HAL_DMA_Abort_IT+0x2b0>
 8004820:	40020010 	.word	0x40020010
 8004824:	40020028 	.word	0x40020028
 8004828:	40020040 	.word	0x40020040
 800482c:	40020058 	.word	0x40020058
 8004830:	40020070 	.word	0x40020070
 8004834:	40020088 	.word	0x40020088
 8004838:	400200a0 	.word	0x400200a0
 800483c:	400200b8 	.word	0x400200b8
 8004840:	40020410 	.word	0x40020410
 8004844:	40020428 	.word	0x40020428
 8004848:	40020440 	.word	0x40020440
 800484c:	40020458 	.word	0x40020458
 8004850:	40020470 	.word	0x40020470
 8004854:	40020488 	.word	0x40020488
 8004858:	400204a0 	.word	0x400204a0
 800485c:	400204b8 	.word	0x400204b8
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a5c      	ldr	r2, [pc, #368]	; (80049e8 <HAL_DMA_Abort_IT+0x428>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d072      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a5b      	ldr	r2, [pc, #364]	; (80049ec <HAL_DMA_Abort_IT+0x42c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d06d      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a59      	ldr	r2, [pc, #356]	; (80049f0 <HAL_DMA_Abort_IT+0x430>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d068      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a58      	ldr	r2, [pc, #352]	; (80049f4 <HAL_DMA_Abort_IT+0x434>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d063      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a56      	ldr	r2, [pc, #344]	; (80049f8 <HAL_DMA_Abort_IT+0x438>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d05e      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a55      	ldr	r2, [pc, #340]	; (80049fc <HAL_DMA_Abort_IT+0x43c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d059      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a53      	ldr	r2, [pc, #332]	; (8004a00 <HAL_DMA_Abort_IT+0x440>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d054      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a52      	ldr	r2, [pc, #328]	; (8004a04 <HAL_DMA_Abort_IT+0x444>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d04f      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a50      	ldr	r2, [pc, #320]	; (8004a08 <HAL_DMA_Abort_IT+0x448>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d04a      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a4f      	ldr	r2, [pc, #316]	; (8004a0c <HAL_DMA_Abort_IT+0x44c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d045      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a4d      	ldr	r2, [pc, #308]	; (8004a10 <HAL_DMA_Abort_IT+0x450>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d040      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a4c      	ldr	r2, [pc, #304]	; (8004a14 <HAL_DMA_Abort_IT+0x454>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d03b      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a4a      	ldr	r2, [pc, #296]	; (8004a18 <HAL_DMA_Abort_IT+0x458>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d036      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a49      	ldr	r2, [pc, #292]	; (8004a1c <HAL_DMA_Abort_IT+0x45c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d031      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a47      	ldr	r2, [pc, #284]	; (8004a20 <HAL_DMA_Abort_IT+0x460>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d02c      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a46      	ldr	r2, [pc, #280]	; (8004a24 <HAL_DMA_Abort_IT+0x464>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d027      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a44      	ldr	r2, [pc, #272]	; (8004a28 <HAL_DMA_Abort_IT+0x468>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d022      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a43      	ldr	r2, [pc, #268]	; (8004a2c <HAL_DMA_Abort_IT+0x46c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d01d      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a41      	ldr	r2, [pc, #260]	; (8004a30 <HAL_DMA_Abort_IT+0x470>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d018      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a40      	ldr	r2, [pc, #256]	; (8004a34 <HAL_DMA_Abort_IT+0x474>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d013      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a3e      	ldr	r2, [pc, #248]	; (8004a38 <HAL_DMA_Abort_IT+0x478>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00e      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a3d      	ldr	r2, [pc, #244]	; (8004a3c <HAL_DMA_Abort_IT+0x47c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d009      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a3b      	ldr	r2, [pc, #236]	; (8004a40 <HAL_DMA_Abort_IT+0x480>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d004      	beq.n	8004960 <HAL_DMA_Abort_IT+0x3a0>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a3a      	ldr	r2, [pc, #232]	; (8004a44 <HAL_DMA_Abort_IT+0x484>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d101      	bne.n	8004964 <HAL_DMA_Abort_IT+0x3a4>
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <HAL_DMA_Abort_IT+0x3a6>
 8004964:	2300      	movs	r3, #0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d028      	beq.n	80049bc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004974:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004978:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004984:	f003 031f 	and.w	r3, r3, #31
 8004988:	2201      	movs	r2, #1
 800498a:	409a      	lsls	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004998:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00c      	beq.n	80049bc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40020010 	.word	0x40020010
 80049ec:	40020028 	.word	0x40020028
 80049f0:	40020040 	.word	0x40020040
 80049f4:	40020058 	.word	0x40020058
 80049f8:	40020070 	.word	0x40020070
 80049fc:	40020088 	.word	0x40020088
 8004a00:	400200a0 	.word	0x400200a0
 8004a04:	400200b8 	.word	0x400200b8
 8004a08:	40020410 	.word	0x40020410
 8004a0c:	40020428 	.word	0x40020428
 8004a10:	40020440 	.word	0x40020440
 8004a14:	40020458 	.word	0x40020458
 8004a18:	40020470 	.word	0x40020470
 8004a1c:	40020488 	.word	0x40020488
 8004a20:	400204a0 	.word	0x400204a0
 8004a24:	400204b8 	.word	0x400204b8
 8004a28:	58025408 	.word	0x58025408
 8004a2c:	5802541c 	.word	0x5802541c
 8004a30:	58025430 	.word	0x58025430
 8004a34:	58025444 	.word	0x58025444
 8004a38:	58025458 	.word	0x58025458
 8004a3c:	5802546c 	.word	0x5802546c
 8004a40:	58025480 	.word	0x58025480
 8004a44:	58025494 	.word	0x58025494

08004a48 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08a      	sub	sp, #40	; 0x28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a54:	4b67      	ldr	r3, [pc, #412]	; (8004bf4 <HAL_DMA_IRQHandler+0x1ac>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a67      	ldr	r2, [pc, #412]	; (8004bf8 <HAL_DMA_IRQHandler+0x1b0>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	0a9b      	lsrs	r3, r3, #10
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a66:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a5f      	ldr	r2, [pc, #380]	; (8004bfc <HAL_DMA_IRQHandler+0x1b4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d04a      	beq.n	8004b1a <HAL_DMA_IRQHandler+0xd2>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a5d      	ldr	r2, [pc, #372]	; (8004c00 <HAL_DMA_IRQHandler+0x1b8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d045      	beq.n	8004b1a <HAL_DMA_IRQHandler+0xd2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a5c      	ldr	r2, [pc, #368]	; (8004c04 <HAL_DMA_IRQHandler+0x1bc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d040      	beq.n	8004b1a <HAL_DMA_IRQHandler+0xd2>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a5a      	ldr	r2, [pc, #360]	; (8004c08 <HAL_DMA_IRQHandler+0x1c0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d03b      	beq.n	8004b1a <HAL_DMA_IRQHandler+0xd2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a59      	ldr	r2, [pc, #356]	; (8004c0c <HAL_DMA_IRQHandler+0x1c4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d036      	beq.n	8004b1a <HAL_DMA_IRQHandler+0xd2>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a57      	ldr	r2, [pc, #348]	; (8004c10 <HAL_DMA_IRQHandler+0x1c8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d031      	beq.n	8004b1a <HAL_DMA_IRQHandler+0xd2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a56      	ldr	r2, [pc, #344]	; (8004c14 <HAL_DMA_IRQHandler+0x1cc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d02c      	beq.n	8004b1a <HAL_DMA_IRQHandler+0xd2>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a54      	ldr	r2, [pc, #336]	; (8004c18 <HAL_DMA_IRQHandler+0x1d0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d027      	beq.n	8004b1a <HAL_DMA_IRQHandler+0xd2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a53      	ldr	r2, [pc, #332]	; (8004c1c <HAL_DMA_IRQHandler+0x1d4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d022      	beq.n	8004b1a <HAL_DMA_IRQHandler+0xd2>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a51      	ldr	r2, [pc, #324]	; (8004c20 <HAL_DMA_IRQHandler+0x1d8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d01d      	beq.n	8004b1a <HAL_DMA_IRQHandler+0xd2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a50      	ldr	r2, [pc, #320]	; (8004c24 <HAL_DMA_IRQHandler+0x1dc>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d018      	beq.n	8004b1a <HAL_DMA_IRQHandler+0xd2>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a4e      	ldr	r2, [pc, #312]	; (8004c28 <HAL_DMA_IRQHandler+0x1e0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d013      	beq.n	8004b1a <HAL_DMA_IRQHandler+0xd2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a4d      	ldr	r2, [pc, #308]	; (8004c2c <HAL_DMA_IRQHandler+0x1e4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d00e      	beq.n	8004b1a <HAL_DMA_IRQHandler+0xd2>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a4b      	ldr	r2, [pc, #300]	; (8004c30 <HAL_DMA_IRQHandler+0x1e8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d009      	beq.n	8004b1a <HAL_DMA_IRQHandler+0xd2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a4a      	ldr	r2, [pc, #296]	; (8004c34 <HAL_DMA_IRQHandler+0x1ec>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d004      	beq.n	8004b1a <HAL_DMA_IRQHandler+0xd2>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a48      	ldr	r2, [pc, #288]	; (8004c38 <HAL_DMA_IRQHandler+0x1f0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d101      	bne.n	8004b1e <HAL_DMA_IRQHandler+0xd6>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e000      	b.n	8004b20 <HAL_DMA_IRQHandler+0xd8>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 842b 	beq.w	800537c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	2208      	movs	r2, #8
 8004b30:	409a      	lsls	r2, r3
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 80a2 	beq.w	8004c80 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a2e      	ldr	r2, [pc, #184]	; (8004bfc <HAL_DMA_IRQHandler+0x1b4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d04a      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x194>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2d      	ldr	r2, [pc, #180]	; (8004c00 <HAL_DMA_IRQHandler+0x1b8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d045      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x194>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a2b      	ldr	r2, [pc, #172]	; (8004c04 <HAL_DMA_IRQHandler+0x1bc>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d040      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x194>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a2a      	ldr	r2, [pc, #168]	; (8004c08 <HAL_DMA_IRQHandler+0x1c0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d03b      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x194>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a28      	ldr	r2, [pc, #160]	; (8004c0c <HAL_DMA_IRQHandler+0x1c4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d036      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x194>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a27      	ldr	r2, [pc, #156]	; (8004c10 <HAL_DMA_IRQHandler+0x1c8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d031      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x194>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a25      	ldr	r2, [pc, #148]	; (8004c14 <HAL_DMA_IRQHandler+0x1cc>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d02c      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x194>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a24      	ldr	r2, [pc, #144]	; (8004c18 <HAL_DMA_IRQHandler+0x1d0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d027      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x194>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a22      	ldr	r2, [pc, #136]	; (8004c1c <HAL_DMA_IRQHandler+0x1d4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d022      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x194>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a21      	ldr	r2, [pc, #132]	; (8004c20 <HAL_DMA_IRQHandler+0x1d8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d01d      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x194>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1f      	ldr	r2, [pc, #124]	; (8004c24 <HAL_DMA_IRQHandler+0x1dc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d018      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x194>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1e      	ldr	r2, [pc, #120]	; (8004c28 <HAL_DMA_IRQHandler+0x1e0>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d013      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x194>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a1c      	ldr	r2, [pc, #112]	; (8004c2c <HAL_DMA_IRQHandler+0x1e4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00e      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x194>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a1b      	ldr	r2, [pc, #108]	; (8004c30 <HAL_DMA_IRQHandler+0x1e8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d009      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x194>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a19      	ldr	r2, [pc, #100]	; (8004c34 <HAL_DMA_IRQHandler+0x1ec>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x194>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a18      	ldr	r2, [pc, #96]	; (8004c38 <HAL_DMA_IRQHandler+0x1f0>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d12f      	bne.n	8004c3c <HAL_DMA_IRQHandler+0x1f4>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	bf14      	ite	ne
 8004bea:	2301      	movne	r3, #1
 8004bec:	2300      	moveq	r3, #0
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	e02e      	b.n	8004c50 <HAL_DMA_IRQHandler+0x208>
 8004bf2:	bf00      	nop
 8004bf4:	24000040 	.word	0x24000040
 8004bf8:	1b4e81b5 	.word	0x1b4e81b5
 8004bfc:	40020010 	.word	0x40020010
 8004c00:	40020028 	.word	0x40020028
 8004c04:	40020040 	.word	0x40020040
 8004c08:	40020058 	.word	0x40020058
 8004c0c:	40020070 	.word	0x40020070
 8004c10:	40020088 	.word	0x40020088
 8004c14:	400200a0 	.word	0x400200a0
 8004c18:	400200b8 	.word	0x400200b8
 8004c1c:	40020410 	.word	0x40020410
 8004c20:	40020428 	.word	0x40020428
 8004c24:	40020440 	.word	0x40020440
 8004c28:	40020458 	.word	0x40020458
 8004c2c:	40020470 	.word	0x40020470
 8004c30:	40020488 	.word	0x40020488
 8004c34:	400204a0 	.word	0x400204a0
 8004c38:	400204b8 	.word	0x400204b8
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	bf14      	ite	ne
 8004c4a:	2301      	movne	r3, #1
 8004c4c:	2300      	moveq	r3, #0
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d015      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0204 	bic.w	r2, r2, #4
 8004c62:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	2208      	movs	r2, #8
 8004c6e:	409a      	lsls	r2, r3
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c78:	f043 0201 	orr.w	r2, r3, #1
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c84:	f003 031f 	and.w	r3, r3, #31
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d06e      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a69      	ldr	r2, [pc, #420]	; (8004e40 <HAL_DMA_IRQHandler+0x3f8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d04a      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x2ee>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a67      	ldr	r2, [pc, #412]	; (8004e44 <HAL_DMA_IRQHandler+0x3fc>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d045      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x2ee>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a66      	ldr	r2, [pc, #408]	; (8004e48 <HAL_DMA_IRQHandler+0x400>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d040      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x2ee>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a64      	ldr	r2, [pc, #400]	; (8004e4c <HAL_DMA_IRQHandler+0x404>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d03b      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x2ee>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a63      	ldr	r2, [pc, #396]	; (8004e50 <HAL_DMA_IRQHandler+0x408>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d036      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x2ee>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a61      	ldr	r2, [pc, #388]	; (8004e54 <HAL_DMA_IRQHandler+0x40c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d031      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x2ee>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a60      	ldr	r2, [pc, #384]	; (8004e58 <HAL_DMA_IRQHandler+0x410>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d02c      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x2ee>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a5e      	ldr	r2, [pc, #376]	; (8004e5c <HAL_DMA_IRQHandler+0x414>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d027      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x2ee>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a5d      	ldr	r2, [pc, #372]	; (8004e60 <HAL_DMA_IRQHandler+0x418>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d022      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x2ee>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a5b      	ldr	r2, [pc, #364]	; (8004e64 <HAL_DMA_IRQHandler+0x41c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d01d      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x2ee>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a5a      	ldr	r2, [pc, #360]	; (8004e68 <HAL_DMA_IRQHandler+0x420>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d018      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x2ee>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a58      	ldr	r2, [pc, #352]	; (8004e6c <HAL_DMA_IRQHandler+0x424>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x2ee>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a57      	ldr	r2, [pc, #348]	; (8004e70 <HAL_DMA_IRQHandler+0x428>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00e      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x2ee>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a55      	ldr	r2, [pc, #340]	; (8004e74 <HAL_DMA_IRQHandler+0x42c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d009      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x2ee>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a54      	ldr	r2, [pc, #336]	; (8004e78 <HAL_DMA_IRQHandler+0x430>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d004      	beq.n	8004d36 <HAL_DMA_IRQHandler+0x2ee>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a52      	ldr	r2, [pc, #328]	; (8004e7c <HAL_DMA_IRQHandler+0x434>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d10a      	bne.n	8004d4c <HAL_DMA_IRQHandler+0x304>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bf14      	ite	ne
 8004d44:	2301      	movne	r3, #1
 8004d46:	2300      	moveq	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	e003      	b.n	8004d54 <HAL_DMA_IRQHandler+0x30c>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2300      	movs	r3, #0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00d      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5c:	f003 031f 	and.w	r3, r3, #31
 8004d60:	2201      	movs	r2, #1
 8004d62:	409a      	lsls	r2, r3
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6c:	f043 0202 	orr.w	r2, r3, #2
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d78:	f003 031f 	and.w	r3, r3, #31
 8004d7c:	2204      	movs	r2, #4
 8004d7e:	409a      	lsls	r2, r3
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	4013      	ands	r3, r2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 808f 	beq.w	8004ea8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a2c      	ldr	r2, [pc, #176]	; (8004e40 <HAL_DMA_IRQHandler+0x3f8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d04a      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x3e2>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a2a      	ldr	r2, [pc, #168]	; (8004e44 <HAL_DMA_IRQHandler+0x3fc>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d045      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x3e2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a29      	ldr	r2, [pc, #164]	; (8004e48 <HAL_DMA_IRQHandler+0x400>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d040      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x3e2>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a27      	ldr	r2, [pc, #156]	; (8004e4c <HAL_DMA_IRQHandler+0x404>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d03b      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x3e2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a26      	ldr	r2, [pc, #152]	; (8004e50 <HAL_DMA_IRQHandler+0x408>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d036      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x3e2>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a24      	ldr	r2, [pc, #144]	; (8004e54 <HAL_DMA_IRQHandler+0x40c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d031      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x3e2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a23      	ldr	r2, [pc, #140]	; (8004e58 <HAL_DMA_IRQHandler+0x410>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d02c      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x3e2>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a21      	ldr	r2, [pc, #132]	; (8004e5c <HAL_DMA_IRQHandler+0x414>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d027      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x3e2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a20      	ldr	r2, [pc, #128]	; (8004e60 <HAL_DMA_IRQHandler+0x418>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d022      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x3e2>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1e      	ldr	r2, [pc, #120]	; (8004e64 <HAL_DMA_IRQHandler+0x41c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01d      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x3e2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1d      	ldr	r2, [pc, #116]	; (8004e68 <HAL_DMA_IRQHandler+0x420>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d018      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x3e2>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a1b      	ldr	r2, [pc, #108]	; (8004e6c <HAL_DMA_IRQHandler+0x424>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x3e2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a1a      	ldr	r2, [pc, #104]	; (8004e70 <HAL_DMA_IRQHandler+0x428>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00e      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x3e2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a18      	ldr	r2, [pc, #96]	; (8004e74 <HAL_DMA_IRQHandler+0x42c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d009      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x3e2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <HAL_DMA_IRQHandler+0x430>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x3e2>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a15      	ldr	r2, [pc, #84]	; (8004e7c <HAL_DMA_IRQHandler+0x434>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d12a      	bne.n	8004e80 <HAL_DMA_IRQHandler+0x438>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	bf14      	ite	ne
 8004e38:	2301      	movne	r3, #1
 8004e3a:	2300      	moveq	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	e023      	b.n	8004e88 <HAL_DMA_IRQHandler+0x440>
 8004e40:	40020010 	.word	0x40020010
 8004e44:	40020028 	.word	0x40020028
 8004e48:	40020040 	.word	0x40020040
 8004e4c:	40020058 	.word	0x40020058
 8004e50:	40020070 	.word	0x40020070
 8004e54:	40020088 	.word	0x40020088
 8004e58:	400200a0 	.word	0x400200a0
 8004e5c:	400200b8 	.word	0x400200b8
 8004e60:	40020410 	.word	0x40020410
 8004e64:	40020428 	.word	0x40020428
 8004e68:	40020440 	.word	0x40020440
 8004e6c:	40020458 	.word	0x40020458
 8004e70:	40020470 	.word	0x40020470
 8004e74:	40020488 	.word	0x40020488
 8004e78:	400204a0 	.word	0x400204a0
 8004e7c:	400204b8 	.word	0x400204b8
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2300      	movs	r3, #0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00d      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e90:	f003 031f 	and.w	r3, r3, #31
 8004e94:	2204      	movs	r2, #4
 8004e96:	409a      	lsls	r2, r3
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea0:	f043 0204 	orr.w	r2, r3, #4
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	2210      	movs	r2, #16
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 80a6 	beq.w	800500a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a85      	ldr	r2, [pc, #532]	; (80050d8 <HAL_DMA_IRQHandler+0x690>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d04a      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x516>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a83      	ldr	r2, [pc, #524]	; (80050dc <HAL_DMA_IRQHandler+0x694>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d045      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x516>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a82      	ldr	r2, [pc, #520]	; (80050e0 <HAL_DMA_IRQHandler+0x698>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d040      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x516>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a80      	ldr	r2, [pc, #512]	; (80050e4 <HAL_DMA_IRQHandler+0x69c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d03b      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x516>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a7f      	ldr	r2, [pc, #508]	; (80050e8 <HAL_DMA_IRQHandler+0x6a0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d036      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x516>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a7d      	ldr	r2, [pc, #500]	; (80050ec <HAL_DMA_IRQHandler+0x6a4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d031      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x516>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a7c      	ldr	r2, [pc, #496]	; (80050f0 <HAL_DMA_IRQHandler+0x6a8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d02c      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x516>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a7a      	ldr	r2, [pc, #488]	; (80050f4 <HAL_DMA_IRQHandler+0x6ac>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d027      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x516>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a79      	ldr	r2, [pc, #484]	; (80050f8 <HAL_DMA_IRQHandler+0x6b0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d022      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x516>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a77      	ldr	r2, [pc, #476]	; (80050fc <HAL_DMA_IRQHandler+0x6b4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01d      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x516>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a76      	ldr	r2, [pc, #472]	; (8005100 <HAL_DMA_IRQHandler+0x6b8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x516>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a74      	ldr	r2, [pc, #464]	; (8005104 <HAL_DMA_IRQHandler+0x6bc>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x516>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a73      	ldr	r2, [pc, #460]	; (8005108 <HAL_DMA_IRQHandler+0x6c0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x516>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a71      	ldr	r2, [pc, #452]	; (800510c <HAL_DMA_IRQHandler+0x6c4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x516>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a70      	ldr	r2, [pc, #448]	; (8005110 <HAL_DMA_IRQHandler+0x6c8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x516>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a6e      	ldr	r2, [pc, #440]	; (8005114 <HAL_DMA_IRQHandler+0x6cc>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d10a      	bne.n	8004f74 <HAL_DMA_IRQHandler+0x52c>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	bf14      	ite	ne
 8004f6c:	2301      	movne	r3, #1
 8004f6e:	2300      	moveq	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	e009      	b.n	8004f88 <HAL_DMA_IRQHandler+0x540>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bf14      	ite	ne
 8004f82:	2301      	movne	r3, #1
 8004f84:	2300      	moveq	r3, #0
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d03e      	beq.n	800500a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f90:	f003 031f 	and.w	r3, r3, #31
 8004f94:	2210      	movs	r2, #16
 8004f96:	409a      	lsls	r2, r3
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d018      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d108      	bne.n	8004fca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d024      	beq.n	800500a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	4798      	blx	r3
 8004fc8:	e01f      	b.n	800500a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d01b      	beq.n	800500a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	4798      	blx	r3
 8004fda:	e016      	b.n	800500a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d107      	bne.n	8004ffa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0208 	bic.w	r2, r2, #8
 8004ff8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	2220      	movs	r2, #32
 8005014:	409a      	lsls	r2, r3
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	4013      	ands	r3, r2
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 8110 	beq.w	8005240 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a2c      	ldr	r2, [pc, #176]	; (80050d8 <HAL_DMA_IRQHandler+0x690>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d04a      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x678>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a2b      	ldr	r2, [pc, #172]	; (80050dc <HAL_DMA_IRQHandler+0x694>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d045      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x678>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a29      	ldr	r2, [pc, #164]	; (80050e0 <HAL_DMA_IRQHandler+0x698>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d040      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x678>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a28      	ldr	r2, [pc, #160]	; (80050e4 <HAL_DMA_IRQHandler+0x69c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d03b      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x678>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a26      	ldr	r2, [pc, #152]	; (80050e8 <HAL_DMA_IRQHandler+0x6a0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d036      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x678>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a25      	ldr	r2, [pc, #148]	; (80050ec <HAL_DMA_IRQHandler+0x6a4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d031      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x678>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a23      	ldr	r2, [pc, #140]	; (80050f0 <HAL_DMA_IRQHandler+0x6a8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d02c      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x678>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a22      	ldr	r2, [pc, #136]	; (80050f4 <HAL_DMA_IRQHandler+0x6ac>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d027      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x678>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a20      	ldr	r2, [pc, #128]	; (80050f8 <HAL_DMA_IRQHandler+0x6b0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d022      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x678>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1f      	ldr	r2, [pc, #124]	; (80050fc <HAL_DMA_IRQHandler+0x6b4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d01d      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x678>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1d      	ldr	r2, [pc, #116]	; (8005100 <HAL_DMA_IRQHandler+0x6b8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d018      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x678>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a1c      	ldr	r2, [pc, #112]	; (8005104 <HAL_DMA_IRQHandler+0x6bc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d013      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x678>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1a      	ldr	r2, [pc, #104]	; (8005108 <HAL_DMA_IRQHandler+0x6c0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00e      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x678>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a19      	ldr	r2, [pc, #100]	; (800510c <HAL_DMA_IRQHandler+0x6c4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d009      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x678>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a17      	ldr	r2, [pc, #92]	; (8005110 <HAL_DMA_IRQHandler+0x6c8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d004      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x678>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a16      	ldr	r2, [pc, #88]	; (8005114 <HAL_DMA_IRQHandler+0x6cc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d12b      	bne.n	8005118 <HAL_DMA_IRQHandler+0x6d0>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0310 	and.w	r3, r3, #16
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	bf14      	ite	ne
 80050ce:	2301      	movne	r3, #1
 80050d0:	2300      	moveq	r3, #0
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	e02a      	b.n	800512c <HAL_DMA_IRQHandler+0x6e4>
 80050d6:	bf00      	nop
 80050d8:	40020010 	.word	0x40020010
 80050dc:	40020028 	.word	0x40020028
 80050e0:	40020040 	.word	0x40020040
 80050e4:	40020058 	.word	0x40020058
 80050e8:	40020070 	.word	0x40020070
 80050ec:	40020088 	.word	0x40020088
 80050f0:	400200a0 	.word	0x400200a0
 80050f4:	400200b8 	.word	0x400200b8
 80050f8:	40020410 	.word	0x40020410
 80050fc:	40020428 	.word	0x40020428
 8005100:	40020440 	.word	0x40020440
 8005104:	40020458 	.word	0x40020458
 8005108:	40020470 	.word	0x40020470
 800510c:	40020488 	.word	0x40020488
 8005110:	400204a0 	.word	0x400204a0
 8005114:	400204b8 	.word	0x400204b8
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	bf14      	ite	ne
 8005126:	2301      	movne	r3, #1
 8005128:	2300      	moveq	r3, #0
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8087 	beq.w	8005240 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005136:	f003 031f 	and.w	r3, r3, #31
 800513a:	2220      	movs	r2, #32
 800513c:	409a      	lsls	r2, r3
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b04      	cmp	r3, #4
 800514c:	d139      	bne.n	80051c2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0216 	bic.w	r2, r2, #22
 800515c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695a      	ldr	r2, [r3, #20]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800516c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	d103      	bne.n	800517e <HAL_DMA_IRQHandler+0x736>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800517a:	2b00      	cmp	r3, #0
 800517c:	d007      	beq.n	800518e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0208 	bic.w	r2, r2, #8
 800518c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	223f      	movs	r2, #63	; 0x3f
 8005198:	409a      	lsls	r2, r3
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 834a 	beq.w	800584c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	4798      	blx	r3
          }
          return;
 80051c0:	e344      	b.n	800584c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d018      	beq.n	8005202 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d108      	bne.n	80051f0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d02c      	beq.n	8005240 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	4798      	blx	r3
 80051ee:	e027      	b.n	8005240 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d023      	beq.n	8005240 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	4798      	blx	r3
 8005200:	e01e      	b.n	8005240 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10f      	bne.n	8005230 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0210 	bic.w	r2, r2, #16
 800521e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8306 	beq.w	8005856 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 8088 	beq.w	8005368 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2204      	movs	r2, #4
 800525c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a7a      	ldr	r2, [pc, #488]	; (8005450 <HAL_DMA_IRQHandler+0xa08>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d04a      	beq.n	8005300 <HAL_DMA_IRQHandler+0x8b8>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a79      	ldr	r2, [pc, #484]	; (8005454 <HAL_DMA_IRQHandler+0xa0c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d045      	beq.n	8005300 <HAL_DMA_IRQHandler+0x8b8>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a77      	ldr	r2, [pc, #476]	; (8005458 <HAL_DMA_IRQHandler+0xa10>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d040      	beq.n	8005300 <HAL_DMA_IRQHandler+0x8b8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a76      	ldr	r2, [pc, #472]	; (800545c <HAL_DMA_IRQHandler+0xa14>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d03b      	beq.n	8005300 <HAL_DMA_IRQHandler+0x8b8>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a74      	ldr	r2, [pc, #464]	; (8005460 <HAL_DMA_IRQHandler+0xa18>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d036      	beq.n	8005300 <HAL_DMA_IRQHandler+0x8b8>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a73      	ldr	r2, [pc, #460]	; (8005464 <HAL_DMA_IRQHandler+0xa1c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d031      	beq.n	8005300 <HAL_DMA_IRQHandler+0x8b8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a71      	ldr	r2, [pc, #452]	; (8005468 <HAL_DMA_IRQHandler+0xa20>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d02c      	beq.n	8005300 <HAL_DMA_IRQHandler+0x8b8>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a70      	ldr	r2, [pc, #448]	; (800546c <HAL_DMA_IRQHandler+0xa24>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d027      	beq.n	8005300 <HAL_DMA_IRQHandler+0x8b8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a6e      	ldr	r2, [pc, #440]	; (8005470 <HAL_DMA_IRQHandler+0xa28>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d022      	beq.n	8005300 <HAL_DMA_IRQHandler+0x8b8>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a6d      	ldr	r2, [pc, #436]	; (8005474 <HAL_DMA_IRQHandler+0xa2c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d01d      	beq.n	8005300 <HAL_DMA_IRQHandler+0x8b8>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a6b      	ldr	r2, [pc, #428]	; (8005478 <HAL_DMA_IRQHandler+0xa30>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d018      	beq.n	8005300 <HAL_DMA_IRQHandler+0x8b8>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a6a      	ldr	r2, [pc, #424]	; (800547c <HAL_DMA_IRQHandler+0xa34>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d013      	beq.n	8005300 <HAL_DMA_IRQHandler+0x8b8>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a68      	ldr	r2, [pc, #416]	; (8005480 <HAL_DMA_IRQHandler+0xa38>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00e      	beq.n	8005300 <HAL_DMA_IRQHandler+0x8b8>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a67      	ldr	r2, [pc, #412]	; (8005484 <HAL_DMA_IRQHandler+0xa3c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d009      	beq.n	8005300 <HAL_DMA_IRQHandler+0x8b8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a65      	ldr	r2, [pc, #404]	; (8005488 <HAL_DMA_IRQHandler+0xa40>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d004      	beq.n	8005300 <HAL_DMA_IRQHandler+0x8b8>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a64      	ldr	r2, [pc, #400]	; (800548c <HAL_DMA_IRQHandler+0xa44>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d108      	bne.n	8005312 <HAL_DMA_IRQHandler+0x8ca>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0201 	bic.w	r2, r2, #1
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	e007      	b.n	8005322 <HAL_DMA_IRQHandler+0x8da>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0201 	bic.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3301      	adds	r3, #1
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532a:	429a      	cmp	r2, r3
 800532c:	d307      	bcc.n	800533e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1f2      	bne.n	8005322 <HAL_DMA_IRQHandler+0x8da>
 800533c:	e000      	b.n	8005340 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800533e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d004      	beq.n	8005360 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2203      	movs	r2, #3
 800535a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800535e:	e003      	b.n	8005368 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 8272 	beq.w	8005856 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	4798      	blx	r3
 800537a:	e26c      	b.n	8005856 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a43      	ldr	r2, [pc, #268]	; (8005490 <HAL_DMA_IRQHandler+0xa48>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d022      	beq.n	80053cc <HAL_DMA_IRQHandler+0x984>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a42      	ldr	r2, [pc, #264]	; (8005494 <HAL_DMA_IRQHandler+0xa4c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d01d      	beq.n	80053cc <HAL_DMA_IRQHandler+0x984>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a40      	ldr	r2, [pc, #256]	; (8005498 <HAL_DMA_IRQHandler+0xa50>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d018      	beq.n	80053cc <HAL_DMA_IRQHandler+0x984>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a3f      	ldr	r2, [pc, #252]	; (800549c <HAL_DMA_IRQHandler+0xa54>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d013      	beq.n	80053cc <HAL_DMA_IRQHandler+0x984>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a3d      	ldr	r2, [pc, #244]	; (80054a0 <HAL_DMA_IRQHandler+0xa58>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00e      	beq.n	80053cc <HAL_DMA_IRQHandler+0x984>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a3c      	ldr	r2, [pc, #240]	; (80054a4 <HAL_DMA_IRQHandler+0xa5c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d009      	beq.n	80053cc <HAL_DMA_IRQHandler+0x984>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a3a      	ldr	r2, [pc, #232]	; (80054a8 <HAL_DMA_IRQHandler+0xa60>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d004      	beq.n	80053cc <HAL_DMA_IRQHandler+0x984>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a39      	ldr	r2, [pc, #228]	; (80054ac <HAL_DMA_IRQHandler+0xa64>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d101      	bne.n	80053d0 <HAL_DMA_IRQHandler+0x988>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <HAL_DMA_IRQHandler+0x98a>
 80053d0:	2300      	movs	r3, #0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 823f 	beq.w	8005856 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e4:	f003 031f 	and.w	r3, r3, #31
 80053e8:	2204      	movs	r2, #4
 80053ea:	409a      	lsls	r2, r3
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 80cd 	beq.w	8005590 <HAL_DMA_IRQHandler+0xb48>
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 80c7 	beq.w	8005590 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005406:	f003 031f 	and.w	r3, r3, #31
 800540a:	2204      	movs	r2, #4
 800540c:	409a      	lsls	r2, r3
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d049      	beq.n	80054b0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d109      	bne.n	800543a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 8210 	beq.w	8005850 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005438:	e20a      	b.n	8005850 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 8206 	beq.w	8005850 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800544c:	e200      	b.n	8005850 <HAL_DMA_IRQHandler+0xe08>
 800544e:	bf00      	nop
 8005450:	40020010 	.word	0x40020010
 8005454:	40020028 	.word	0x40020028
 8005458:	40020040 	.word	0x40020040
 800545c:	40020058 	.word	0x40020058
 8005460:	40020070 	.word	0x40020070
 8005464:	40020088 	.word	0x40020088
 8005468:	400200a0 	.word	0x400200a0
 800546c:	400200b8 	.word	0x400200b8
 8005470:	40020410 	.word	0x40020410
 8005474:	40020428 	.word	0x40020428
 8005478:	40020440 	.word	0x40020440
 800547c:	40020458 	.word	0x40020458
 8005480:	40020470 	.word	0x40020470
 8005484:	40020488 	.word	0x40020488
 8005488:	400204a0 	.word	0x400204a0
 800548c:	400204b8 	.word	0x400204b8
 8005490:	58025408 	.word	0x58025408
 8005494:	5802541c 	.word	0x5802541c
 8005498:	58025430 	.word	0x58025430
 800549c:	58025444 	.word	0x58025444
 80054a0:	58025458 	.word	0x58025458
 80054a4:	5802546c 	.word	0x5802546c
 80054a8:	58025480 	.word	0x58025480
 80054ac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f003 0320 	and.w	r3, r3, #32
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d160      	bne.n	800557c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a8c      	ldr	r2, [pc, #560]	; (80056f0 <HAL_DMA_IRQHandler+0xca8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d04a      	beq.n	800555a <HAL_DMA_IRQHandler+0xb12>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a8a      	ldr	r2, [pc, #552]	; (80056f4 <HAL_DMA_IRQHandler+0xcac>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d045      	beq.n	800555a <HAL_DMA_IRQHandler+0xb12>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a89      	ldr	r2, [pc, #548]	; (80056f8 <HAL_DMA_IRQHandler+0xcb0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d040      	beq.n	800555a <HAL_DMA_IRQHandler+0xb12>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a87      	ldr	r2, [pc, #540]	; (80056fc <HAL_DMA_IRQHandler+0xcb4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d03b      	beq.n	800555a <HAL_DMA_IRQHandler+0xb12>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a86      	ldr	r2, [pc, #536]	; (8005700 <HAL_DMA_IRQHandler+0xcb8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d036      	beq.n	800555a <HAL_DMA_IRQHandler+0xb12>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a84      	ldr	r2, [pc, #528]	; (8005704 <HAL_DMA_IRQHandler+0xcbc>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d031      	beq.n	800555a <HAL_DMA_IRQHandler+0xb12>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a83      	ldr	r2, [pc, #524]	; (8005708 <HAL_DMA_IRQHandler+0xcc0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d02c      	beq.n	800555a <HAL_DMA_IRQHandler+0xb12>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a81      	ldr	r2, [pc, #516]	; (800570c <HAL_DMA_IRQHandler+0xcc4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d027      	beq.n	800555a <HAL_DMA_IRQHandler+0xb12>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a80      	ldr	r2, [pc, #512]	; (8005710 <HAL_DMA_IRQHandler+0xcc8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d022      	beq.n	800555a <HAL_DMA_IRQHandler+0xb12>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a7e      	ldr	r2, [pc, #504]	; (8005714 <HAL_DMA_IRQHandler+0xccc>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d01d      	beq.n	800555a <HAL_DMA_IRQHandler+0xb12>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a7d      	ldr	r2, [pc, #500]	; (8005718 <HAL_DMA_IRQHandler+0xcd0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d018      	beq.n	800555a <HAL_DMA_IRQHandler+0xb12>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a7b      	ldr	r2, [pc, #492]	; (800571c <HAL_DMA_IRQHandler+0xcd4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d013      	beq.n	800555a <HAL_DMA_IRQHandler+0xb12>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a7a      	ldr	r2, [pc, #488]	; (8005720 <HAL_DMA_IRQHandler+0xcd8>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00e      	beq.n	800555a <HAL_DMA_IRQHandler+0xb12>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a78      	ldr	r2, [pc, #480]	; (8005724 <HAL_DMA_IRQHandler+0xcdc>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d009      	beq.n	800555a <HAL_DMA_IRQHandler+0xb12>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a77      	ldr	r2, [pc, #476]	; (8005728 <HAL_DMA_IRQHandler+0xce0>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d004      	beq.n	800555a <HAL_DMA_IRQHandler+0xb12>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a75      	ldr	r2, [pc, #468]	; (800572c <HAL_DMA_IRQHandler+0xce4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d108      	bne.n	800556c <HAL_DMA_IRQHandler+0xb24>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0208 	bic.w	r2, r2, #8
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	e007      	b.n	800557c <HAL_DMA_IRQHandler+0xb34>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0204 	bic.w	r2, r2, #4
 800557a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8165 	beq.w	8005850 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800558e:	e15f      	b.n	8005850 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005594:	f003 031f 	and.w	r3, r3, #31
 8005598:	2202      	movs	r2, #2
 800559a:	409a      	lsls	r2, r3
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	4013      	ands	r3, r2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 80c5 	beq.w	8005730 <HAL_DMA_IRQHandler+0xce8>
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 80bf 	beq.w	8005730 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b6:	f003 031f 	and.w	r3, r3, #31
 80055ba:	2202      	movs	r2, #2
 80055bc:	409a      	lsls	r2, r3
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d018      	beq.n	80055fe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d109      	bne.n	80055ea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 813a 	beq.w	8005854 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055e8:	e134      	b.n	8005854 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 8130 	beq.w	8005854 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055fc:	e12a      	b.n	8005854 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b00      	cmp	r3, #0
 8005606:	d168      	bne.n	80056da <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a38      	ldr	r2, [pc, #224]	; (80056f0 <HAL_DMA_IRQHandler+0xca8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d04a      	beq.n	80056a8 <HAL_DMA_IRQHandler+0xc60>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a37      	ldr	r2, [pc, #220]	; (80056f4 <HAL_DMA_IRQHandler+0xcac>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d045      	beq.n	80056a8 <HAL_DMA_IRQHandler+0xc60>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a35      	ldr	r2, [pc, #212]	; (80056f8 <HAL_DMA_IRQHandler+0xcb0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d040      	beq.n	80056a8 <HAL_DMA_IRQHandler+0xc60>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a34      	ldr	r2, [pc, #208]	; (80056fc <HAL_DMA_IRQHandler+0xcb4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d03b      	beq.n	80056a8 <HAL_DMA_IRQHandler+0xc60>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a32      	ldr	r2, [pc, #200]	; (8005700 <HAL_DMA_IRQHandler+0xcb8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d036      	beq.n	80056a8 <HAL_DMA_IRQHandler+0xc60>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a31      	ldr	r2, [pc, #196]	; (8005704 <HAL_DMA_IRQHandler+0xcbc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d031      	beq.n	80056a8 <HAL_DMA_IRQHandler+0xc60>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a2f      	ldr	r2, [pc, #188]	; (8005708 <HAL_DMA_IRQHandler+0xcc0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d02c      	beq.n	80056a8 <HAL_DMA_IRQHandler+0xc60>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a2e      	ldr	r2, [pc, #184]	; (800570c <HAL_DMA_IRQHandler+0xcc4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d027      	beq.n	80056a8 <HAL_DMA_IRQHandler+0xc60>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a2c      	ldr	r2, [pc, #176]	; (8005710 <HAL_DMA_IRQHandler+0xcc8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d022      	beq.n	80056a8 <HAL_DMA_IRQHandler+0xc60>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a2b      	ldr	r2, [pc, #172]	; (8005714 <HAL_DMA_IRQHandler+0xccc>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d01d      	beq.n	80056a8 <HAL_DMA_IRQHandler+0xc60>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a29      	ldr	r2, [pc, #164]	; (8005718 <HAL_DMA_IRQHandler+0xcd0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d018      	beq.n	80056a8 <HAL_DMA_IRQHandler+0xc60>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a28      	ldr	r2, [pc, #160]	; (800571c <HAL_DMA_IRQHandler+0xcd4>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d013      	beq.n	80056a8 <HAL_DMA_IRQHandler+0xc60>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a26      	ldr	r2, [pc, #152]	; (8005720 <HAL_DMA_IRQHandler+0xcd8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00e      	beq.n	80056a8 <HAL_DMA_IRQHandler+0xc60>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a25      	ldr	r2, [pc, #148]	; (8005724 <HAL_DMA_IRQHandler+0xcdc>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d009      	beq.n	80056a8 <HAL_DMA_IRQHandler+0xc60>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a23      	ldr	r2, [pc, #140]	; (8005728 <HAL_DMA_IRQHandler+0xce0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d004      	beq.n	80056a8 <HAL_DMA_IRQHandler+0xc60>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a22      	ldr	r2, [pc, #136]	; (800572c <HAL_DMA_IRQHandler+0xce4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d108      	bne.n	80056ba <HAL_DMA_IRQHandler+0xc72>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0214 	bic.w	r2, r2, #20
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	e007      	b.n	80056ca <HAL_DMA_IRQHandler+0xc82>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 020a 	bic.w	r2, r2, #10
 80056c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 80b8 	beq.w	8005854 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056ec:	e0b2      	b.n	8005854 <HAL_DMA_IRQHandler+0xe0c>
 80056ee:	bf00      	nop
 80056f0:	40020010 	.word	0x40020010
 80056f4:	40020028 	.word	0x40020028
 80056f8:	40020040 	.word	0x40020040
 80056fc:	40020058 	.word	0x40020058
 8005700:	40020070 	.word	0x40020070
 8005704:	40020088 	.word	0x40020088
 8005708:	400200a0 	.word	0x400200a0
 800570c:	400200b8 	.word	0x400200b8
 8005710:	40020410 	.word	0x40020410
 8005714:	40020428 	.word	0x40020428
 8005718:	40020440 	.word	0x40020440
 800571c:	40020458 	.word	0x40020458
 8005720:	40020470 	.word	0x40020470
 8005724:	40020488 	.word	0x40020488
 8005728:	400204a0 	.word	0x400204a0
 800572c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005734:	f003 031f 	and.w	r3, r3, #31
 8005738:	2208      	movs	r2, #8
 800573a:	409a      	lsls	r2, r3
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	4013      	ands	r3, r2
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 8088 	beq.w	8005856 <HAL_DMA_IRQHandler+0xe0e>
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 8082 	beq.w	8005856 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a41      	ldr	r2, [pc, #260]	; (800585c <HAL_DMA_IRQHandler+0xe14>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d04a      	beq.n	80057f2 <HAL_DMA_IRQHandler+0xdaa>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a3f      	ldr	r2, [pc, #252]	; (8005860 <HAL_DMA_IRQHandler+0xe18>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d045      	beq.n	80057f2 <HAL_DMA_IRQHandler+0xdaa>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a3e      	ldr	r2, [pc, #248]	; (8005864 <HAL_DMA_IRQHandler+0xe1c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d040      	beq.n	80057f2 <HAL_DMA_IRQHandler+0xdaa>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a3c      	ldr	r2, [pc, #240]	; (8005868 <HAL_DMA_IRQHandler+0xe20>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d03b      	beq.n	80057f2 <HAL_DMA_IRQHandler+0xdaa>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a3b      	ldr	r2, [pc, #236]	; (800586c <HAL_DMA_IRQHandler+0xe24>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d036      	beq.n	80057f2 <HAL_DMA_IRQHandler+0xdaa>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a39      	ldr	r2, [pc, #228]	; (8005870 <HAL_DMA_IRQHandler+0xe28>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d031      	beq.n	80057f2 <HAL_DMA_IRQHandler+0xdaa>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a38      	ldr	r2, [pc, #224]	; (8005874 <HAL_DMA_IRQHandler+0xe2c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d02c      	beq.n	80057f2 <HAL_DMA_IRQHandler+0xdaa>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a36      	ldr	r2, [pc, #216]	; (8005878 <HAL_DMA_IRQHandler+0xe30>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d027      	beq.n	80057f2 <HAL_DMA_IRQHandler+0xdaa>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a35      	ldr	r2, [pc, #212]	; (800587c <HAL_DMA_IRQHandler+0xe34>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d022      	beq.n	80057f2 <HAL_DMA_IRQHandler+0xdaa>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a33      	ldr	r2, [pc, #204]	; (8005880 <HAL_DMA_IRQHandler+0xe38>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d01d      	beq.n	80057f2 <HAL_DMA_IRQHandler+0xdaa>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a32      	ldr	r2, [pc, #200]	; (8005884 <HAL_DMA_IRQHandler+0xe3c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d018      	beq.n	80057f2 <HAL_DMA_IRQHandler+0xdaa>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a30      	ldr	r2, [pc, #192]	; (8005888 <HAL_DMA_IRQHandler+0xe40>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d013      	beq.n	80057f2 <HAL_DMA_IRQHandler+0xdaa>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a2f      	ldr	r2, [pc, #188]	; (800588c <HAL_DMA_IRQHandler+0xe44>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00e      	beq.n	80057f2 <HAL_DMA_IRQHandler+0xdaa>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a2d      	ldr	r2, [pc, #180]	; (8005890 <HAL_DMA_IRQHandler+0xe48>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d009      	beq.n	80057f2 <HAL_DMA_IRQHandler+0xdaa>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a2c      	ldr	r2, [pc, #176]	; (8005894 <HAL_DMA_IRQHandler+0xe4c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d004      	beq.n	80057f2 <HAL_DMA_IRQHandler+0xdaa>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a2a      	ldr	r2, [pc, #168]	; (8005898 <HAL_DMA_IRQHandler+0xe50>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d108      	bne.n	8005804 <HAL_DMA_IRQHandler+0xdbc>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 021c 	bic.w	r2, r2, #28
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	e007      	b.n	8005814 <HAL_DMA_IRQHandler+0xdcc>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 020e 	bic.w	r2, r2, #14
 8005812:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005818:	f003 031f 	and.w	r3, r3, #31
 800581c:	2201      	movs	r2, #1
 800581e:	409a      	lsls	r2, r3
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800583e:	2b00      	cmp	r3, #0
 8005840:	d009      	beq.n	8005856 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	4798      	blx	r3
 800584a:	e004      	b.n	8005856 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800584c:	bf00      	nop
 800584e:	e002      	b.n	8005856 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005850:	bf00      	nop
 8005852:	e000      	b.n	8005856 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005854:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005856:	3728      	adds	r7, #40	; 0x28
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	40020010 	.word	0x40020010
 8005860:	40020028 	.word	0x40020028
 8005864:	40020040 	.word	0x40020040
 8005868:	40020058 	.word	0x40020058
 800586c:	40020070 	.word	0x40020070
 8005870:	40020088 	.word	0x40020088
 8005874:	400200a0 	.word	0x400200a0
 8005878:	400200b8 	.word	0x400200b8
 800587c:	40020410 	.word	0x40020410
 8005880:	40020428 	.word	0x40020428
 8005884:	40020440 	.word	0x40020440
 8005888:	40020458 	.word	0x40020458
 800588c:	40020470 	.word	0x40020470
 8005890:	40020488 	.word	0x40020488
 8005894:	400204a0 	.word	0x400204a0
 8005898:	400204b8 	.word	0x400204b8

0800589c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a84      	ldr	r2, [pc, #528]	; (8005acc <DMA_SetConfig+0x230>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d072      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a82      	ldr	r2, [pc, #520]	; (8005ad0 <DMA_SetConfig+0x234>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d06d      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a81      	ldr	r2, [pc, #516]	; (8005ad4 <DMA_SetConfig+0x238>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d068      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a7f      	ldr	r2, [pc, #508]	; (8005ad8 <DMA_SetConfig+0x23c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d063      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a7e      	ldr	r2, [pc, #504]	; (8005adc <DMA_SetConfig+0x240>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d05e      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a7c      	ldr	r2, [pc, #496]	; (8005ae0 <DMA_SetConfig+0x244>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d059      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a7b      	ldr	r2, [pc, #492]	; (8005ae4 <DMA_SetConfig+0x248>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d054      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a79      	ldr	r2, [pc, #484]	; (8005ae8 <DMA_SetConfig+0x24c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d04f      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a78      	ldr	r2, [pc, #480]	; (8005aec <DMA_SetConfig+0x250>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d04a      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a76      	ldr	r2, [pc, #472]	; (8005af0 <DMA_SetConfig+0x254>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d045      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a75      	ldr	r2, [pc, #468]	; (8005af4 <DMA_SetConfig+0x258>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d040      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a73      	ldr	r2, [pc, #460]	; (8005af8 <DMA_SetConfig+0x25c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d03b      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a72      	ldr	r2, [pc, #456]	; (8005afc <DMA_SetConfig+0x260>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d036      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a70      	ldr	r2, [pc, #448]	; (8005b00 <DMA_SetConfig+0x264>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d031      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a6f      	ldr	r2, [pc, #444]	; (8005b04 <DMA_SetConfig+0x268>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d02c      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a6d      	ldr	r2, [pc, #436]	; (8005b08 <DMA_SetConfig+0x26c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d027      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a6c      	ldr	r2, [pc, #432]	; (8005b0c <DMA_SetConfig+0x270>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d022      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a6a      	ldr	r2, [pc, #424]	; (8005b10 <DMA_SetConfig+0x274>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d01d      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a69      	ldr	r2, [pc, #420]	; (8005b14 <DMA_SetConfig+0x278>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d018      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a67      	ldr	r2, [pc, #412]	; (8005b18 <DMA_SetConfig+0x27c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d013      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a66      	ldr	r2, [pc, #408]	; (8005b1c <DMA_SetConfig+0x280>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00e      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a64      	ldr	r2, [pc, #400]	; (8005b20 <DMA_SetConfig+0x284>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d009      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a63      	ldr	r2, [pc, #396]	; (8005b24 <DMA_SetConfig+0x288>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d004      	beq.n	80059a6 <DMA_SetConfig+0x10a>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a61      	ldr	r2, [pc, #388]	; (8005b28 <DMA_SetConfig+0x28c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d101      	bne.n	80059aa <DMA_SetConfig+0x10e>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <DMA_SetConfig+0x110>
 80059aa:	2300      	movs	r3, #0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00d      	beq.n	80059cc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80059b8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d004      	beq.n	80059cc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80059ca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a3e      	ldr	r2, [pc, #248]	; (8005acc <DMA_SetConfig+0x230>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d04a      	beq.n	8005a6c <DMA_SetConfig+0x1d0>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a3d      	ldr	r2, [pc, #244]	; (8005ad0 <DMA_SetConfig+0x234>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d045      	beq.n	8005a6c <DMA_SetConfig+0x1d0>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a3b      	ldr	r2, [pc, #236]	; (8005ad4 <DMA_SetConfig+0x238>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d040      	beq.n	8005a6c <DMA_SetConfig+0x1d0>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a3a      	ldr	r2, [pc, #232]	; (8005ad8 <DMA_SetConfig+0x23c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d03b      	beq.n	8005a6c <DMA_SetConfig+0x1d0>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a38      	ldr	r2, [pc, #224]	; (8005adc <DMA_SetConfig+0x240>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d036      	beq.n	8005a6c <DMA_SetConfig+0x1d0>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a37      	ldr	r2, [pc, #220]	; (8005ae0 <DMA_SetConfig+0x244>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d031      	beq.n	8005a6c <DMA_SetConfig+0x1d0>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a35      	ldr	r2, [pc, #212]	; (8005ae4 <DMA_SetConfig+0x248>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d02c      	beq.n	8005a6c <DMA_SetConfig+0x1d0>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a34      	ldr	r2, [pc, #208]	; (8005ae8 <DMA_SetConfig+0x24c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d027      	beq.n	8005a6c <DMA_SetConfig+0x1d0>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a32      	ldr	r2, [pc, #200]	; (8005aec <DMA_SetConfig+0x250>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d022      	beq.n	8005a6c <DMA_SetConfig+0x1d0>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a31      	ldr	r2, [pc, #196]	; (8005af0 <DMA_SetConfig+0x254>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d01d      	beq.n	8005a6c <DMA_SetConfig+0x1d0>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a2f      	ldr	r2, [pc, #188]	; (8005af4 <DMA_SetConfig+0x258>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d018      	beq.n	8005a6c <DMA_SetConfig+0x1d0>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a2e      	ldr	r2, [pc, #184]	; (8005af8 <DMA_SetConfig+0x25c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d013      	beq.n	8005a6c <DMA_SetConfig+0x1d0>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a2c      	ldr	r2, [pc, #176]	; (8005afc <DMA_SetConfig+0x260>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00e      	beq.n	8005a6c <DMA_SetConfig+0x1d0>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a2b      	ldr	r2, [pc, #172]	; (8005b00 <DMA_SetConfig+0x264>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d009      	beq.n	8005a6c <DMA_SetConfig+0x1d0>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a29      	ldr	r2, [pc, #164]	; (8005b04 <DMA_SetConfig+0x268>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d004      	beq.n	8005a6c <DMA_SetConfig+0x1d0>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a28      	ldr	r2, [pc, #160]	; (8005b08 <DMA_SetConfig+0x26c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d101      	bne.n	8005a70 <DMA_SetConfig+0x1d4>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e000      	b.n	8005a72 <DMA_SetConfig+0x1d6>
 8005a70:	2300      	movs	r3, #0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d05a      	beq.n	8005b2c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a7a:	f003 031f 	and.w	r3, r3, #31
 8005a7e:	223f      	movs	r2, #63	; 0x3f
 8005a80:	409a      	lsls	r2, r3
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a94:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2b40      	cmp	r3, #64	; 0x40
 8005aa4:	d108      	bne.n	8005ab8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ab6:	e087      	b.n	8005bc8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	60da      	str	r2, [r3, #12]
}
 8005ac8:	e07e      	b.n	8005bc8 <DMA_SetConfig+0x32c>
 8005aca:	bf00      	nop
 8005acc:	40020010 	.word	0x40020010
 8005ad0:	40020028 	.word	0x40020028
 8005ad4:	40020040 	.word	0x40020040
 8005ad8:	40020058 	.word	0x40020058
 8005adc:	40020070 	.word	0x40020070
 8005ae0:	40020088 	.word	0x40020088
 8005ae4:	400200a0 	.word	0x400200a0
 8005ae8:	400200b8 	.word	0x400200b8
 8005aec:	40020410 	.word	0x40020410
 8005af0:	40020428 	.word	0x40020428
 8005af4:	40020440 	.word	0x40020440
 8005af8:	40020458 	.word	0x40020458
 8005afc:	40020470 	.word	0x40020470
 8005b00:	40020488 	.word	0x40020488
 8005b04:	400204a0 	.word	0x400204a0
 8005b08:	400204b8 	.word	0x400204b8
 8005b0c:	58025408 	.word	0x58025408
 8005b10:	5802541c 	.word	0x5802541c
 8005b14:	58025430 	.word	0x58025430
 8005b18:	58025444 	.word	0x58025444
 8005b1c:	58025458 	.word	0x58025458
 8005b20:	5802546c 	.word	0x5802546c
 8005b24:	58025480 	.word	0x58025480
 8005b28:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a28      	ldr	r2, [pc, #160]	; (8005bd4 <DMA_SetConfig+0x338>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d022      	beq.n	8005b7c <DMA_SetConfig+0x2e0>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a27      	ldr	r2, [pc, #156]	; (8005bd8 <DMA_SetConfig+0x33c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d01d      	beq.n	8005b7c <DMA_SetConfig+0x2e0>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a25      	ldr	r2, [pc, #148]	; (8005bdc <DMA_SetConfig+0x340>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d018      	beq.n	8005b7c <DMA_SetConfig+0x2e0>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a24      	ldr	r2, [pc, #144]	; (8005be0 <DMA_SetConfig+0x344>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d013      	beq.n	8005b7c <DMA_SetConfig+0x2e0>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a22      	ldr	r2, [pc, #136]	; (8005be4 <DMA_SetConfig+0x348>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00e      	beq.n	8005b7c <DMA_SetConfig+0x2e0>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a21      	ldr	r2, [pc, #132]	; (8005be8 <DMA_SetConfig+0x34c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d009      	beq.n	8005b7c <DMA_SetConfig+0x2e0>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a1f      	ldr	r2, [pc, #124]	; (8005bec <DMA_SetConfig+0x350>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d004      	beq.n	8005b7c <DMA_SetConfig+0x2e0>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a1e      	ldr	r2, [pc, #120]	; (8005bf0 <DMA_SetConfig+0x354>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d101      	bne.n	8005b80 <DMA_SetConfig+0x2e4>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <DMA_SetConfig+0x2e6>
 8005b80:	2300      	movs	r3, #0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d020      	beq.n	8005bc8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b8a:	f003 031f 	and.w	r3, r3, #31
 8005b8e:	2201      	movs	r2, #1
 8005b90:	409a      	lsls	r2, r3
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	2b40      	cmp	r3, #64	; 0x40
 8005ba4:	d108      	bne.n	8005bb8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	60da      	str	r2, [r3, #12]
}
 8005bb6:	e007      	b.n	8005bc8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	60da      	str	r2, [r3, #12]
}
 8005bc8:	bf00      	nop
 8005bca:	371c      	adds	r7, #28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	58025408 	.word	0x58025408
 8005bd8:	5802541c 	.word	0x5802541c
 8005bdc:	58025430 	.word	0x58025430
 8005be0:	58025444 	.word	0x58025444
 8005be4:	58025458 	.word	0x58025458
 8005be8:	5802546c 	.word	0x5802546c
 8005bec:	58025480 	.word	0x58025480
 8005bf0:	58025494 	.word	0x58025494

08005bf4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a42      	ldr	r2, [pc, #264]	; (8005d0c <DMA_CalcBaseAndBitshift+0x118>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d04a      	beq.n	8005c9c <DMA_CalcBaseAndBitshift+0xa8>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a41      	ldr	r2, [pc, #260]	; (8005d10 <DMA_CalcBaseAndBitshift+0x11c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d045      	beq.n	8005c9c <DMA_CalcBaseAndBitshift+0xa8>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a3f      	ldr	r2, [pc, #252]	; (8005d14 <DMA_CalcBaseAndBitshift+0x120>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d040      	beq.n	8005c9c <DMA_CalcBaseAndBitshift+0xa8>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a3e      	ldr	r2, [pc, #248]	; (8005d18 <DMA_CalcBaseAndBitshift+0x124>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d03b      	beq.n	8005c9c <DMA_CalcBaseAndBitshift+0xa8>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a3c      	ldr	r2, [pc, #240]	; (8005d1c <DMA_CalcBaseAndBitshift+0x128>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d036      	beq.n	8005c9c <DMA_CalcBaseAndBitshift+0xa8>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a3b      	ldr	r2, [pc, #236]	; (8005d20 <DMA_CalcBaseAndBitshift+0x12c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d031      	beq.n	8005c9c <DMA_CalcBaseAndBitshift+0xa8>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a39      	ldr	r2, [pc, #228]	; (8005d24 <DMA_CalcBaseAndBitshift+0x130>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d02c      	beq.n	8005c9c <DMA_CalcBaseAndBitshift+0xa8>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a38      	ldr	r2, [pc, #224]	; (8005d28 <DMA_CalcBaseAndBitshift+0x134>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d027      	beq.n	8005c9c <DMA_CalcBaseAndBitshift+0xa8>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a36      	ldr	r2, [pc, #216]	; (8005d2c <DMA_CalcBaseAndBitshift+0x138>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d022      	beq.n	8005c9c <DMA_CalcBaseAndBitshift+0xa8>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a35      	ldr	r2, [pc, #212]	; (8005d30 <DMA_CalcBaseAndBitshift+0x13c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d01d      	beq.n	8005c9c <DMA_CalcBaseAndBitshift+0xa8>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a33      	ldr	r2, [pc, #204]	; (8005d34 <DMA_CalcBaseAndBitshift+0x140>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d018      	beq.n	8005c9c <DMA_CalcBaseAndBitshift+0xa8>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a32      	ldr	r2, [pc, #200]	; (8005d38 <DMA_CalcBaseAndBitshift+0x144>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d013      	beq.n	8005c9c <DMA_CalcBaseAndBitshift+0xa8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a30      	ldr	r2, [pc, #192]	; (8005d3c <DMA_CalcBaseAndBitshift+0x148>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00e      	beq.n	8005c9c <DMA_CalcBaseAndBitshift+0xa8>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a2f      	ldr	r2, [pc, #188]	; (8005d40 <DMA_CalcBaseAndBitshift+0x14c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d009      	beq.n	8005c9c <DMA_CalcBaseAndBitshift+0xa8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a2d      	ldr	r2, [pc, #180]	; (8005d44 <DMA_CalcBaseAndBitshift+0x150>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d004      	beq.n	8005c9c <DMA_CalcBaseAndBitshift+0xa8>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a2c      	ldr	r2, [pc, #176]	; (8005d48 <DMA_CalcBaseAndBitshift+0x154>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d101      	bne.n	8005ca0 <DMA_CalcBaseAndBitshift+0xac>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e000      	b.n	8005ca2 <DMA_CalcBaseAndBitshift+0xae>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d024      	beq.n	8005cf0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	3b10      	subs	r3, #16
 8005cae:	4a27      	ldr	r2, [pc, #156]	; (8005d4c <DMA_CalcBaseAndBitshift+0x158>)
 8005cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb4:	091b      	lsrs	r3, r3, #4
 8005cb6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	4a24      	ldr	r2, [pc, #144]	; (8005d50 <DMA_CalcBaseAndBitshift+0x15c>)
 8005cc0:	5cd3      	ldrb	r3, [r2, r3]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d908      	bls.n	8005ce0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	4b1f      	ldr	r3, [pc, #124]	; (8005d54 <DMA_CalcBaseAndBitshift+0x160>)
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	1d1a      	adds	r2, r3, #4
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	659a      	str	r2, [r3, #88]	; 0x58
 8005cde:	e00d      	b.n	8005cfc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4b1b      	ldr	r3, [pc, #108]	; (8005d54 <DMA_CalcBaseAndBitshift+0x160>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6593      	str	r3, [r2, #88]	; 0x58
 8005cee:	e005      	b.n	8005cfc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40020010 	.word	0x40020010
 8005d10:	40020028 	.word	0x40020028
 8005d14:	40020040 	.word	0x40020040
 8005d18:	40020058 	.word	0x40020058
 8005d1c:	40020070 	.word	0x40020070
 8005d20:	40020088 	.word	0x40020088
 8005d24:	400200a0 	.word	0x400200a0
 8005d28:	400200b8 	.word	0x400200b8
 8005d2c:	40020410 	.word	0x40020410
 8005d30:	40020428 	.word	0x40020428
 8005d34:	40020440 	.word	0x40020440
 8005d38:	40020458 	.word	0x40020458
 8005d3c:	40020470 	.word	0x40020470
 8005d40:	40020488 	.word	0x40020488
 8005d44:	400204a0 	.word	0x400204a0
 8005d48:	400204b8 	.word	0x400204b8
 8005d4c:	aaaaaaab 	.word	0xaaaaaaab
 8005d50:	0800dfe0 	.word	0x0800dfe0
 8005d54:	fffffc00 	.word	0xfffffc00

08005d58 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d120      	bne.n	8005dae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d858      	bhi.n	8005e26 <DMA_CheckFifoParam+0xce>
 8005d74:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <DMA_CheckFifoParam+0x24>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005d8d 	.word	0x08005d8d
 8005d80:	08005d9f 	.word	0x08005d9f
 8005d84:	08005d8d 	.word	0x08005d8d
 8005d88:	08005e27 	.word	0x08005e27
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d048      	beq.n	8005e2a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d9c:	e045      	b.n	8005e2a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005da6:	d142      	bne.n	8005e2e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005dac:	e03f      	b.n	8005e2e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005db6:	d123      	bne.n	8005e00 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d838      	bhi.n	8005e32 <DMA_CheckFifoParam+0xda>
 8005dc0:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <DMA_CheckFifoParam+0x70>)
 8005dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc6:	bf00      	nop
 8005dc8:	08005dd9 	.word	0x08005dd9
 8005dcc:	08005ddf 	.word	0x08005ddf
 8005dd0:	08005dd9 	.word	0x08005dd9
 8005dd4:	08005df1 	.word	0x08005df1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]
        break;
 8005ddc:	e030      	b.n	8005e40 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d025      	beq.n	8005e36 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005dee:	e022      	b.n	8005e36 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005df8:	d11f      	bne.n	8005e3a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005dfe:	e01c      	b.n	8005e3a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d902      	bls.n	8005e0e <DMA_CheckFifoParam+0xb6>
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d003      	beq.n	8005e14 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005e0c:	e018      	b.n	8005e40 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	73fb      	strb	r3, [r7, #15]
        break;
 8005e12:	e015      	b.n	8005e40 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00e      	beq.n	8005e3e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	73fb      	strb	r3, [r7, #15]
    break;
 8005e24:	e00b      	b.n	8005e3e <DMA_CheckFifoParam+0xe6>
        break;
 8005e26:	bf00      	nop
 8005e28:	e00a      	b.n	8005e40 <DMA_CheckFifoParam+0xe8>
        break;
 8005e2a:	bf00      	nop
 8005e2c:	e008      	b.n	8005e40 <DMA_CheckFifoParam+0xe8>
        break;
 8005e2e:	bf00      	nop
 8005e30:	e006      	b.n	8005e40 <DMA_CheckFifoParam+0xe8>
        break;
 8005e32:	bf00      	nop
 8005e34:	e004      	b.n	8005e40 <DMA_CheckFifoParam+0xe8>
        break;
 8005e36:	bf00      	nop
 8005e38:	e002      	b.n	8005e40 <DMA_CheckFifoParam+0xe8>
        break;
 8005e3a:	bf00      	nop
 8005e3c:	e000      	b.n	8005e40 <DMA_CheckFifoParam+0xe8>
    break;
 8005e3e:	bf00      	nop
    }
  }

  return status;
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop

08005e50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a38      	ldr	r2, [pc, #224]	; (8005f44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d022      	beq.n	8005eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a36      	ldr	r2, [pc, #216]	; (8005f48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d01d      	beq.n	8005eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a35      	ldr	r2, [pc, #212]	; (8005f4c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d018      	beq.n	8005eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a33      	ldr	r2, [pc, #204]	; (8005f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d013      	beq.n	8005eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a32      	ldr	r2, [pc, #200]	; (8005f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00e      	beq.n	8005eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a30      	ldr	r2, [pc, #192]	; (8005f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d009      	beq.n	8005eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a2f      	ldr	r2, [pc, #188]	; (8005f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d004      	beq.n	8005eae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a2d      	ldr	r2, [pc, #180]	; (8005f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d101      	bne.n	8005eb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e000      	b.n	8005eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d01a      	beq.n	8005eee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	3b08      	subs	r3, #8
 8005ec0:	4a28      	ldr	r2, [pc, #160]	; (8005f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec6:	091b      	lsrs	r3, r3, #4
 8005ec8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	4b26      	ldr	r3, [pc, #152]	; (8005f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005ece:	4413      	add	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a24      	ldr	r2, [pc, #144]	; (8005f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005edc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f003 031f 	and.w	r3, r3, #31
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	409a      	lsls	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005eec:	e024      	b.n	8005f38 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	3b10      	subs	r3, #16
 8005ef6:	4a1e      	ldr	r2, [pc, #120]	; (8005f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8005efc:	091b      	lsrs	r3, r3, #4
 8005efe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	4a1c      	ldr	r2, [pc, #112]	; (8005f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d806      	bhi.n	8005f16 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	4a1b      	ldr	r2, [pc, #108]	; (8005f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d902      	bls.n	8005f16 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3308      	adds	r3, #8
 8005f14:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4b18      	ldr	r3, [pc, #96]	; (8005f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	461a      	mov	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a16      	ldr	r2, [pc, #88]	; (8005f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005f28:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	2201      	movs	r2, #1
 8005f32:	409a      	lsls	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f38:	bf00      	nop
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	58025408 	.word	0x58025408
 8005f48:	5802541c 	.word	0x5802541c
 8005f4c:	58025430 	.word	0x58025430
 8005f50:	58025444 	.word	0x58025444
 8005f54:	58025458 	.word	0x58025458
 8005f58:	5802546c 	.word	0x5802546c
 8005f5c:	58025480 	.word	0x58025480
 8005f60:	58025494 	.word	0x58025494
 8005f64:	cccccccd 	.word	0xcccccccd
 8005f68:	16009600 	.word	0x16009600
 8005f6c:	58025880 	.word	0x58025880
 8005f70:	aaaaaaab 	.word	0xaaaaaaab
 8005f74:	400204b8 	.word	0x400204b8
 8005f78:	4002040f 	.word	0x4002040f
 8005f7c:	10008200 	.word	0x10008200
 8005f80:	40020880 	.word	0x40020880

08005f84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d04a      	beq.n	8006030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d847      	bhi.n	8006030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a25      	ldr	r2, [pc, #148]	; (800603c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d022      	beq.n	8005ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a24      	ldr	r2, [pc, #144]	; (8006040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d01d      	beq.n	8005ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a22      	ldr	r2, [pc, #136]	; (8006044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d018      	beq.n	8005ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a21      	ldr	r2, [pc, #132]	; (8006048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d013      	beq.n	8005ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a1f      	ldr	r2, [pc, #124]	; (800604c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00e      	beq.n	8005ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a1e      	ldr	r2, [pc, #120]	; (8006050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d009      	beq.n	8005ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a1c      	ldr	r2, [pc, #112]	; (8006054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d004      	beq.n	8005ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a1b      	ldr	r2, [pc, #108]	; (8006058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d101      	bne.n	8005ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e000      	b.n	8005ff6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4b17      	ldr	r3, [pc, #92]	; (800605c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005ffe:	4413      	add	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	461a      	mov	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a15      	ldr	r2, [pc, #84]	; (8006060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800600c:	671a      	str	r2, [r3, #112]	; 0x70
 800600e:	e009      	b.n	8006024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4b14      	ldr	r3, [pc, #80]	; (8006064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006014:	4413      	add	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	461a      	mov	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a11      	ldr	r2, [pc, #68]	; (8006068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006022:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3b01      	subs	r3, #1
 8006028:	2201      	movs	r2, #1
 800602a:	409a      	lsls	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006030:	bf00      	nop
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	58025408 	.word	0x58025408
 8006040:	5802541c 	.word	0x5802541c
 8006044:	58025430 	.word	0x58025430
 8006048:	58025444 	.word	0x58025444
 800604c:	58025458 	.word	0x58025458
 8006050:	5802546c 	.word	0x5802546c
 8006054:	58025480 	.word	0x58025480
 8006058:	58025494 	.word	0x58025494
 800605c:	1600963f 	.word	0x1600963f
 8006060:	58025940 	.word	0x58025940
 8006064:	1000823f 	.word	0x1000823f
 8006068:	40020940 	.word	0x40020940

0800606c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800606c:	b480      	push	{r7}
 800606e:	b089      	sub	sp, #36	; 0x24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006076:	2300      	movs	r3, #0
 8006078:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800607a:	4b89      	ldr	r3, [pc, #548]	; (80062a0 <HAL_GPIO_Init+0x234>)
 800607c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800607e:	e194      	b.n	80063aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	2101      	movs	r1, #1
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	fa01 f303 	lsl.w	r3, r1, r3
 800608c:	4013      	ands	r3, r2
 800608e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 8186 	beq.w	80063a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d00b      	beq.n	80060b8 <HAL_GPIO_Init+0x4c>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d007      	beq.n	80060b8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80060ac:	2b11      	cmp	r3, #17
 80060ae:	d003      	beq.n	80060b8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	2b12      	cmp	r3, #18
 80060b6:	d130      	bne.n	800611a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	2203      	movs	r2, #3
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	43db      	mvns	r3, r3
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	4013      	ands	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	fa02 f303 	lsl.w	r3, r2, r3
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	4313      	orrs	r3, r2
 80060e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060ee:	2201      	movs	r2, #1
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	fa02 f303 	lsl.w	r3, r2, r3
 80060f6:	43db      	mvns	r3, r3
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	4013      	ands	r3, r2
 80060fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	091b      	lsrs	r3, r3, #4
 8006104:	f003 0201 	and.w	r2, r3, #1
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	4313      	orrs	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	2203      	movs	r2, #3
 8006126:	fa02 f303 	lsl.w	r3, r2, r3
 800612a:	43db      	mvns	r3, r3
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	4013      	ands	r3, r2
 8006130:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	4313      	orrs	r3, r2
 8006142:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2b02      	cmp	r3, #2
 8006150:	d003      	beq.n	800615a <HAL_GPIO_Init+0xee>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2b12      	cmp	r3, #18
 8006158:	d123      	bne.n	80061a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	08da      	lsrs	r2, r3, #3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	3208      	adds	r2, #8
 8006162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	220f      	movs	r2, #15
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	43db      	mvns	r3, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4013      	ands	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	691a      	ldr	r2, [r3, #16]
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	fa02 f303 	lsl.w	r3, r2, r3
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	4313      	orrs	r3, r2
 8006192:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	08da      	lsrs	r2, r3, #3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3208      	adds	r2, #8
 800619c:	69b9      	ldr	r1, [r7, #24]
 800619e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	2203      	movs	r2, #3
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	43db      	mvns	r3, r3
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	4013      	ands	r3, r2
 80061b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f003 0203 	and.w	r2, r3, #3
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 80e0 	beq.w	80063a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061e4:	4b2f      	ldr	r3, [pc, #188]	; (80062a4 <HAL_GPIO_Init+0x238>)
 80061e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061ea:	4a2e      	ldr	r2, [pc, #184]	; (80062a4 <HAL_GPIO_Init+0x238>)
 80061ec:	f043 0302 	orr.w	r3, r3, #2
 80061f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80061f4:	4b2b      	ldr	r3, [pc, #172]	; (80062a4 <HAL_GPIO_Init+0x238>)
 80061f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006202:	4a29      	ldr	r2, [pc, #164]	; (80062a8 <HAL_GPIO_Init+0x23c>)
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	089b      	lsrs	r3, r3, #2
 8006208:	3302      	adds	r3, #2
 800620a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800620e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	220f      	movs	r2, #15
 800621a:	fa02 f303 	lsl.w	r3, r2, r3
 800621e:	43db      	mvns	r3, r3
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	4013      	ands	r3, r2
 8006224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a20      	ldr	r2, [pc, #128]	; (80062ac <HAL_GPIO_Init+0x240>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d052      	beq.n	80062d4 <HAL_GPIO_Init+0x268>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a1f      	ldr	r2, [pc, #124]	; (80062b0 <HAL_GPIO_Init+0x244>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d031      	beq.n	800629a <HAL_GPIO_Init+0x22e>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a1e      	ldr	r2, [pc, #120]	; (80062b4 <HAL_GPIO_Init+0x248>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d02b      	beq.n	8006296 <HAL_GPIO_Init+0x22a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a1d      	ldr	r2, [pc, #116]	; (80062b8 <HAL_GPIO_Init+0x24c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d025      	beq.n	8006292 <HAL_GPIO_Init+0x226>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a1c      	ldr	r2, [pc, #112]	; (80062bc <HAL_GPIO_Init+0x250>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d01f      	beq.n	800628e <HAL_GPIO_Init+0x222>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a1b      	ldr	r2, [pc, #108]	; (80062c0 <HAL_GPIO_Init+0x254>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d019      	beq.n	800628a <HAL_GPIO_Init+0x21e>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a1a      	ldr	r2, [pc, #104]	; (80062c4 <HAL_GPIO_Init+0x258>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d013      	beq.n	8006286 <HAL_GPIO_Init+0x21a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a19      	ldr	r2, [pc, #100]	; (80062c8 <HAL_GPIO_Init+0x25c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d00d      	beq.n	8006282 <HAL_GPIO_Init+0x216>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a18      	ldr	r2, [pc, #96]	; (80062cc <HAL_GPIO_Init+0x260>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d007      	beq.n	800627e <HAL_GPIO_Init+0x212>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a17      	ldr	r2, [pc, #92]	; (80062d0 <HAL_GPIO_Init+0x264>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d101      	bne.n	800627a <HAL_GPIO_Init+0x20e>
 8006276:	2309      	movs	r3, #9
 8006278:	e02d      	b.n	80062d6 <HAL_GPIO_Init+0x26a>
 800627a:	230a      	movs	r3, #10
 800627c:	e02b      	b.n	80062d6 <HAL_GPIO_Init+0x26a>
 800627e:	2308      	movs	r3, #8
 8006280:	e029      	b.n	80062d6 <HAL_GPIO_Init+0x26a>
 8006282:	2307      	movs	r3, #7
 8006284:	e027      	b.n	80062d6 <HAL_GPIO_Init+0x26a>
 8006286:	2306      	movs	r3, #6
 8006288:	e025      	b.n	80062d6 <HAL_GPIO_Init+0x26a>
 800628a:	2305      	movs	r3, #5
 800628c:	e023      	b.n	80062d6 <HAL_GPIO_Init+0x26a>
 800628e:	2304      	movs	r3, #4
 8006290:	e021      	b.n	80062d6 <HAL_GPIO_Init+0x26a>
 8006292:	2303      	movs	r3, #3
 8006294:	e01f      	b.n	80062d6 <HAL_GPIO_Init+0x26a>
 8006296:	2302      	movs	r3, #2
 8006298:	e01d      	b.n	80062d6 <HAL_GPIO_Init+0x26a>
 800629a:	2301      	movs	r3, #1
 800629c:	e01b      	b.n	80062d6 <HAL_GPIO_Init+0x26a>
 800629e:	bf00      	nop
 80062a0:	58000080 	.word	0x58000080
 80062a4:	58024400 	.word	0x58024400
 80062a8:	58000400 	.word	0x58000400
 80062ac:	58020000 	.word	0x58020000
 80062b0:	58020400 	.word	0x58020400
 80062b4:	58020800 	.word	0x58020800
 80062b8:	58020c00 	.word	0x58020c00
 80062bc:	58021000 	.word	0x58021000
 80062c0:	58021400 	.word	0x58021400
 80062c4:	58021800 	.word	0x58021800
 80062c8:	58021c00 	.word	0x58021c00
 80062cc:	58022000 	.word	0x58022000
 80062d0:	58022400 	.word	0x58022400
 80062d4:	2300      	movs	r3, #0
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	f002 0203 	and.w	r2, r2, #3
 80062dc:	0092      	lsls	r2, r2, #2
 80062de:	4093      	lsls	r3, r2
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062e6:	4938      	ldr	r1, [pc, #224]	; (80063c8 <HAL_GPIO_Init+0x35c>)
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	089b      	lsrs	r3, r3, #2
 80062ec:	3302      	adds	r3, #2
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	43db      	mvns	r3, r3
 80062fe:	69ba      	ldr	r2, [r7, #24]
 8006300:	4013      	ands	r3, r2
 8006302:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	43db      	mvns	r3, r3
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	4013      	ands	r3, r2
 800632c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	4313      	orrs	r3, r2
 8006340:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	43db      	mvns	r3, r3
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	4013      	ands	r3, r2
 8006358:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800636e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	43db      	mvns	r3, r3
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	4013      	ands	r3, r2
 8006386:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d003      	beq.n	800639c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800639c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	3301      	adds	r3, #1
 80063a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	fa22 f303 	lsr.w	r3, r2, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f47f ae63 	bne.w	8006080 <HAL_GPIO_Init+0x14>
  }
}
 80063ba:	bf00      	nop
 80063bc:	3724      	adds	r7, #36	; 0x24
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	58000400 	.word	0x58000400

080063cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	807b      	strh	r3, [r7, #2]
 80063d8:	4613      	mov	r3, r2
 80063da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063dc:	787b      	ldrb	r3, [r7, #1]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063e2:	887a      	ldrh	r2, [r7, #2]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80063e8:	e003      	b.n	80063f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063ea:	887b      	ldrh	r3, [r7, #2]
 80063ec:	041a      	lsls	r2, r3, #16
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	619a      	str	r2, [r3, #24]
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	695a      	ldr	r2, [r3, #20]
 800640e:	887b      	ldrh	r3, [r7, #2]
 8006410:	401a      	ands	r2, r3
 8006412:	887b      	ldrh	r3, [r7, #2]
 8006414:	429a      	cmp	r2, r3
 8006416:	d104      	bne.n	8006422 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006418:	887b      	ldrh	r3, [r7, #2]
 800641a:	041a      	lsls	r2, r3, #16
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006420:	e002      	b.n	8006428 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006422:	887a      	ldrh	r2, [r7, #2]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	619a      	str	r2, [r3, #24]
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800643c:	4b19      	ldr	r3, [pc, #100]	; (80064a4 <HAL_PWREx_ConfigSupply+0x70>)
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b04      	cmp	r3, #4
 8006446:	d00a      	beq.n	800645e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006448:	4b16      	ldr	r3, [pc, #88]	; (80064a4 <HAL_PWREx_ConfigSupply+0x70>)
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	429a      	cmp	r2, r3
 8006454:	d001      	beq.n	800645a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e01f      	b.n	800649a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	e01d      	b.n	800649a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800645e:	4b11      	ldr	r3, [pc, #68]	; (80064a4 <HAL_PWREx_ConfigSupply+0x70>)
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f023 0207 	bic.w	r2, r3, #7
 8006466:	490f      	ldr	r1, [pc, #60]	; (80064a4 <HAL_PWREx_ConfigSupply+0x70>)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4313      	orrs	r3, r2
 800646c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800646e:	f7fb ffff 	bl	8002470 <HAL_GetTick>
 8006472:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006474:	e009      	b.n	800648a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006476:	f7fb fffb 	bl	8002470 <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006484:	d901      	bls.n	800648a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e007      	b.n	800649a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800648a:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <HAL_PWREx_ConfigSupply+0x70>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006496:	d1ee      	bne.n	8006476 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	58024800 	.word	0x58024800

080064a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08c      	sub	sp, #48	; 0x30
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e3c4      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 8087 	beq.w	80065d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064c8:	4ba2      	ldr	r3, [pc, #648]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064d2:	4ba0      	ldr	r3, [pc, #640]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 80064d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	2b10      	cmp	r3, #16
 80064dc:	d007      	beq.n	80064ee <HAL_RCC_OscConfig+0x46>
 80064de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e0:	2b18      	cmp	r3, #24
 80064e2:	d110      	bne.n	8006506 <HAL_RCC_OscConfig+0x5e>
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d10b      	bne.n	8006506 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064ee:	4b99      	ldr	r3, [pc, #612]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d06c      	beq.n	80065d4 <HAL_RCC_OscConfig+0x12c>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d168      	bne.n	80065d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e39e      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800650e:	d106      	bne.n	800651e <HAL_RCC_OscConfig+0x76>
 8006510:	4b90      	ldr	r3, [pc, #576]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a8f      	ldr	r2, [pc, #572]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 8006516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800651a:	6013      	str	r3, [r2, #0]
 800651c:	e02e      	b.n	800657c <HAL_RCC_OscConfig+0xd4>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10c      	bne.n	8006540 <HAL_RCC_OscConfig+0x98>
 8006526:	4b8b      	ldr	r3, [pc, #556]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a8a      	ldr	r2, [pc, #552]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 800652c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	4b88      	ldr	r3, [pc, #544]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a87      	ldr	r2, [pc, #540]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 8006538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	e01d      	b.n	800657c <HAL_RCC_OscConfig+0xd4>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006548:	d10c      	bne.n	8006564 <HAL_RCC_OscConfig+0xbc>
 800654a:	4b82      	ldr	r3, [pc, #520]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a81      	ldr	r2, [pc, #516]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 8006550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	4b7f      	ldr	r3, [pc, #508]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a7e      	ldr	r2, [pc, #504]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 800655c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	e00b      	b.n	800657c <HAL_RCC_OscConfig+0xd4>
 8006564:	4b7b      	ldr	r3, [pc, #492]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a7a      	ldr	r2, [pc, #488]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 800656a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	4b78      	ldr	r3, [pc, #480]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a77      	ldr	r2, [pc, #476]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 8006576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800657a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d013      	beq.n	80065ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006584:	f7fb ff74 	bl	8002470 <HAL_GetTick>
 8006588:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800658c:	f7fb ff70 	bl	8002470 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b64      	cmp	r3, #100	; 0x64
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e352      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800659e:	4b6d      	ldr	r3, [pc, #436]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0f0      	beq.n	800658c <HAL_RCC_OscConfig+0xe4>
 80065aa:	e014      	b.n	80065d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ac:	f7fb ff60 	bl	8002470 <HAL_GetTick>
 80065b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065b4:	f7fb ff5c 	bl	8002470 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b64      	cmp	r3, #100	; 0x64
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e33e      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065c6:	4b63      	ldr	r3, [pc, #396]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1f0      	bne.n	80065b4 <HAL_RCC_OscConfig+0x10c>
 80065d2:	e000      	b.n	80065d6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 8092 	beq.w	8006708 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065e4:	4b5b      	ldr	r3, [pc, #364]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065ee:	4b59      	ldr	r3, [pc, #356]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 80065f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d007      	beq.n	800660a <HAL_RCC_OscConfig+0x162>
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	2b18      	cmp	r3, #24
 80065fe:	d12d      	bne.n	800665c <HAL_RCC_OscConfig+0x1b4>
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d128      	bne.n	800665c <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800660a:	4b52      	ldr	r3, [pc, #328]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0304 	and.w	r3, r3, #4
 8006612:	2b00      	cmp	r3, #0
 8006614:	d005      	beq.n	8006622 <HAL_RCC_OscConfig+0x17a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e310      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006622:	f7fb ff53 	bl	80024cc <HAL_GetREVID>
 8006626:	4602      	mov	r2, r0
 8006628:	f241 0303 	movw	r3, #4099	; 0x1003
 800662c:	429a      	cmp	r2, r3
 800662e:	d80a      	bhi.n	8006646 <HAL_RCC_OscConfig+0x19e>
 8006630:	4b48      	ldr	r3, [pc, #288]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	031b      	lsls	r3, r3, #12
 800663e:	4945      	ldr	r1, [pc, #276]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 8006640:	4313      	orrs	r3, r2
 8006642:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006644:	e060      	b.n	8006708 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006646:	4b43      	ldr	r3, [pc, #268]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	061b      	lsls	r3, r3, #24
 8006654:	493f      	ldr	r1, [pc, #252]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 8006656:	4313      	orrs	r3, r2
 8006658:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800665a:	e055      	b.n	8006708 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d038      	beq.n	80066d6 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006664:	4b3b      	ldr	r3, [pc, #236]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f023 0219 	bic.w	r2, r3, #25
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4938      	ldr	r1, [pc, #224]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 8006672:	4313      	orrs	r3, r2
 8006674:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006676:	f7fb fefb 	bl	8002470 <HAL_GetTick>
 800667a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800667c:	e008      	b.n	8006690 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800667e:	f7fb fef7 	bl	8002470 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e2d9      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006690:	4b30      	ldr	r3, [pc, #192]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0f0      	beq.n	800667e <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800669c:	f7fb ff16 	bl	80024cc <HAL_GetREVID>
 80066a0:	4602      	mov	r2, r0
 80066a2:	f241 0303 	movw	r3, #4099	; 0x1003
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d80a      	bhi.n	80066c0 <HAL_RCC_OscConfig+0x218>
 80066aa:	4b2a      	ldr	r3, [pc, #168]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	031b      	lsls	r3, r3, #12
 80066b8:	4926      	ldr	r1, [pc, #152]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	604b      	str	r3, [r1, #4]
 80066be:	e023      	b.n	8006708 <HAL_RCC_OscConfig+0x260>
 80066c0:	4b24      	ldr	r3, [pc, #144]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	061b      	lsls	r3, r3, #24
 80066ce:	4921      	ldr	r1, [pc, #132]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	604b      	str	r3, [r1, #4]
 80066d4:	e018      	b.n	8006708 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066d6:	4b1f      	ldr	r3, [pc, #124]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a1e      	ldr	r2, [pc, #120]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 80066dc:	f023 0301 	bic.w	r3, r3, #1
 80066e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e2:	f7fb fec5 	bl	8002470 <HAL_GetTick>
 80066e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066e8:	e008      	b.n	80066fc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066ea:	f7fb fec1 	bl	8002470 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e2a3      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066fc:	4b15      	ldr	r3, [pc, #84]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1f0      	bne.n	80066ea <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0310 	and.w	r3, r3, #16
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 8091 	beq.w	8006838 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006716:	4b0f      	ldr	r3, [pc, #60]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800671e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006720:	4b0c      	ldr	r3, [pc, #48]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 8006722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006724:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	2b08      	cmp	r3, #8
 800672a:	d007      	beq.n	800673c <HAL_RCC_OscConfig+0x294>
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	2b18      	cmp	r3, #24
 8006730:	d12f      	bne.n	8006792 <HAL_RCC_OscConfig+0x2ea>
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f003 0303 	and.w	r3, r3, #3
 8006738:	2b01      	cmp	r3, #1
 800673a:	d12a      	bne.n	8006792 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800673c:	4b05      	ldr	r3, [pc, #20]	; (8006754 <HAL_RCC_OscConfig+0x2ac>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006744:	2b00      	cmp	r3, #0
 8006746:	d007      	beq.n	8006758 <HAL_RCC_OscConfig+0x2b0>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	2b80      	cmp	r3, #128	; 0x80
 800674e:	d003      	beq.n	8006758 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e277      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
 8006754:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006758:	f7fb feb8 	bl	80024cc <HAL_GetREVID>
 800675c:	4602      	mov	r2, r0
 800675e:	f241 0303 	movw	r3, #4099	; 0x1003
 8006762:	429a      	cmp	r2, r3
 8006764:	d80a      	bhi.n	800677c <HAL_RCC_OscConfig+0x2d4>
 8006766:	4ba2      	ldr	r3, [pc, #648]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	069b      	lsls	r3, r3, #26
 8006774:	499e      	ldr	r1, [pc, #632]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 8006776:	4313      	orrs	r3, r2
 8006778:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800677a:	e05d      	b.n	8006838 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800677c:	4b9c      	ldr	r3, [pc, #624]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	061b      	lsls	r3, r3, #24
 800678a:	4999      	ldr	r1, [pc, #612]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 800678c:	4313      	orrs	r3, r2
 800678e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006790:	e052      	b.n	8006838 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d035      	beq.n	8006806 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800679a:	4b95      	ldr	r3, [pc, #596]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a94      	ldr	r2, [pc, #592]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 80067a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a6:	f7fb fe63 	bl	8002470 <HAL_GetTick>
 80067aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067ac:	e008      	b.n	80067c0 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80067ae:	f7fb fe5f 	bl	8002470 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d901      	bls.n	80067c0 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e241      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067c0:	4b8b      	ldr	r3, [pc, #556]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0f0      	beq.n	80067ae <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067cc:	f7fb fe7e 	bl	80024cc <HAL_GetREVID>
 80067d0:	4602      	mov	r2, r0
 80067d2:	f241 0303 	movw	r3, #4099	; 0x1003
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d80a      	bhi.n	80067f0 <HAL_RCC_OscConfig+0x348>
 80067da:	4b85      	ldr	r3, [pc, #532]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	069b      	lsls	r3, r3, #26
 80067e8:	4981      	ldr	r1, [pc, #516]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	604b      	str	r3, [r1, #4]
 80067ee:	e023      	b.n	8006838 <HAL_RCC_OscConfig+0x390>
 80067f0:	4b7f      	ldr	r3, [pc, #508]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	061b      	lsls	r3, r3, #24
 80067fe:	497c      	ldr	r1, [pc, #496]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 8006800:	4313      	orrs	r3, r2
 8006802:	60cb      	str	r3, [r1, #12]
 8006804:	e018      	b.n	8006838 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006806:	4b7a      	ldr	r3, [pc, #488]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a79      	ldr	r2, [pc, #484]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 800680c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006812:	f7fb fe2d 	bl	8002470 <HAL_GetTick>
 8006816:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006818:	e008      	b.n	800682c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800681a:	f7fb fe29 	bl	8002470 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d901      	bls.n	800682c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e20b      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800682c:	4b70      	ldr	r3, [pc, #448]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1f0      	bne.n	800681a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0308 	and.w	r3, r3, #8
 8006840:	2b00      	cmp	r3, #0
 8006842:	d036      	beq.n	80068b2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d019      	beq.n	8006880 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800684c:	4b68      	ldr	r3, [pc, #416]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 800684e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006850:	4a67      	ldr	r2, [pc, #412]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 8006852:	f043 0301 	orr.w	r3, r3, #1
 8006856:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006858:	f7fb fe0a 	bl	8002470 <HAL_GetTick>
 800685c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800685e:	e008      	b.n	8006872 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006860:	f7fb fe06 	bl	8002470 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b02      	cmp	r3, #2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e1e8      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006872:	4b5f      	ldr	r3, [pc, #380]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 8006874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0f0      	beq.n	8006860 <HAL_RCC_OscConfig+0x3b8>
 800687e:	e018      	b.n	80068b2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006880:	4b5b      	ldr	r3, [pc, #364]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 8006882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006884:	4a5a      	ldr	r2, [pc, #360]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 8006886:	f023 0301 	bic.w	r3, r3, #1
 800688a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688c:	f7fb fdf0 	bl	8002470 <HAL_GetTick>
 8006890:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006894:	f7fb fdec 	bl	8002470 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e1ce      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80068a6:	4b52      	ldr	r3, [pc, #328]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 80068a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1f0      	bne.n	8006894 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d036      	beq.n	800692c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d019      	beq.n	80068fa <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068c6:	4b4a      	ldr	r3, [pc, #296]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a49      	ldr	r2, [pc, #292]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 80068cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80068d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068d2:	f7fb fdcd 	bl	8002470 <HAL_GetTick>
 80068d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068d8:	e008      	b.n	80068ec <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80068da:	f7fb fdc9 	bl	8002470 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e1ab      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068ec:	4b40      	ldr	r3, [pc, #256]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0f0      	beq.n	80068da <HAL_RCC_OscConfig+0x432>
 80068f8:	e018      	b.n	800692c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068fa:	4b3d      	ldr	r3, [pc, #244]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a3c      	ldr	r2, [pc, #240]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 8006900:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006904:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006906:	f7fb fdb3 	bl	8002470 <HAL_GetTick>
 800690a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800690c:	e008      	b.n	8006920 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800690e:	f7fb fdaf 	bl	8002470 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d901      	bls.n	8006920 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e191      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006920:	4b33      	ldr	r3, [pc, #204]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1f0      	bne.n	800690e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 8086 	beq.w	8006a46 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800693a:	4b2e      	ldr	r3, [pc, #184]	; (80069f4 <HAL_RCC_OscConfig+0x54c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a2d      	ldr	r2, [pc, #180]	; (80069f4 <HAL_RCC_OscConfig+0x54c>)
 8006940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006944:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006946:	f7fb fd93 	bl	8002470 <HAL_GetTick>
 800694a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800694c:	e008      	b.n	8006960 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800694e:	f7fb fd8f 	bl	8002470 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b64      	cmp	r3, #100	; 0x64
 800695a:	d901      	bls.n	8006960 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e171      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006960:	4b24      	ldr	r3, [pc, #144]	; (80069f4 <HAL_RCC_OscConfig+0x54c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006968:	2b00      	cmp	r3, #0
 800696a:	d0f0      	beq.n	800694e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d106      	bne.n	8006982 <HAL_RCC_OscConfig+0x4da>
 8006974:	4b1e      	ldr	r3, [pc, #120]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 8006976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006978:	4a1d      	ldr	r2, [pc, #116]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 800697a:	f043 0301 	orr.w	r3, r3, #1
 800697e:	6713      	str	r3, [r2, #112]	; 0x70
 8006980:	e02d      	b.n	80069de <HAL_RCC_OscConfig+0x536>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10c      	bne.n	80069a4 <HAL_RCC_OscConfig+0x4fc>
 800698a:	4b19      	ldr	r3, [pc, #100]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	4a18      	ldr	r2, [pc, #96]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 8006990:	f023 0301 	bic.w	r3, r3, #1
 8006994:	6713      	str	r3, [r2, #112]	; 0x70
 8006996:	4b16      	ldr	r3, [pc, #88]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 8006998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699a:	4a15      	ldr	r2, [pc, #84]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 800699c:	f023 0304 	bic.w	r3, r3, #4
 80069a0:	6713      	str	r3, [r2, #112]	; 0x70
 80069a2:	e01c      	b.n	80069de <HAL_RCC_OscConfig+0x536>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	2b05      	cmp	r3, #5
 80069aa:	d10c      	bne.n	80069c6 <HAL_RCC_OscConfig+0x51e>
 80069ac:	4b10      	ldr	r3, [pc, #64]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 80069ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b0:	4a0f      	ldr	r2, [pc, #60]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 80069b2:	f043 0304 	orr.w	r3, r3, #4
 80069b6:	6713      	str	r3, [r2, #112]	; 0x70
 80069b8:	4b0d      	ldr	r3, [pc, #52]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 80069ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069bc:	4a0c      	ldr	r2, [pc, #48]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 80069be:	f043 0301 	orr.w	r3, r3, #1
 80069c2:	6713      	str	r3, [r2, #112]	; 0x70
 80069c4:	e00b      	b.n	80069de <HAL_RCC_OscConfig+0x536>
 80069c6:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 80069c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ca:	4a09      	ldr	r2, [pc, #36]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 80069cc:	f023 0301 	bic.w	r3, r3, #1
 80069d0:	6713      	str	r3, [r2, #112]	; 0x70
 80069d2:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 80069d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d6:	4a06      	ldr	r2, [pc, #24]	; (80069f0 <HAL_RCC_OscConfig+0x548>)
 80069d8:	f023 0304 	bic.w	r3, r3, #4
 80069dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d01a      	beq.n	8006a1c <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e6:	f7fb fd43 	bl	8002470 <HAL_GetTick>
 80069ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069ec:	e00f      	b.n	8006a0e <HAL_RCC_OscConfig+0x566>
 80069ee:	bf00      	nop
 80069f0:	58024400 	.word	0x58024400
 80069f4:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069f8:	f7fb fd3a 	bl	8002470 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d901      	bls.n	8006a0e <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e11a      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a0e:	4b8f      	ldr	r3, [pc, #572]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0ee      	beq.n	80069f8 <HAL_RCC_OscConfig+0x550>
 8006a1a:	e014      	b.n	8006a46 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a1c:	f7fb fd28 	bl	8002470 <HAL_GetTick>
 8006a20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a22:	e00a      	b.n	8006a3a <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a24:	f7fb fd24 	bl	8002470 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e104      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a3a:	4b84      	ldr	r3, [pc, #528]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1ee      	bne.n	8006a24 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 80f9 	beq.w	8006c42 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a50:	4b7e      	ldr	r3, [pc, #504]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a58:	2b18      	cmp	r3, #24
 8006a5a:	f000 80b4 	beq.w	8006bc6 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	f040 8095 	bne.w	8006b92 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a68:	4b78      	ldr	r3, [pc, #480]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a77      	ldr	r2, [pc, #476]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006a6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a74:	f7fb fcfc 	bl	8002470 <HAL_GetTick>
 8006a78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a7a:	e008      	b.n	8006a8e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a7c:	f7fb fcf8 	bl	8002470 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e0da      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a8e:	4b6f      	ldr	r3, [pc, #444]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1f0      	bne.n	8006a7c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a9a:	4b6c      	ldr	r3, [pc, #432]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a9e:	4b6c      	ldr	r3, [pc, #432]	; (8006c50 <HAL_RCC_OscConfig+0x7a8>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006aaa:	0112      	lsls	r2, r2, #4
 8006aac:	430a      	orrs	r2, r1
 8006aae:	4967      	ldr	r1, [pc, #412]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	628b      	str	r3, [r1, #40]	; 0x28
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	025b      	lsls	r3, r3, #9
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	041b      	lsls	r3, r3, #16
 8006ad2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006adc:	3b01      	subs	r3, #1
 8006ade:	061b      	lsls	r3, r3, #24
 8006ae0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ae4:	4959      	ldr	r1, [pc, #356]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006aea:	4b58      	ldr	r3, [pc, #352]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aee:	4a57      	ldr	r2, [pc, #348]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006af0:	f023 0301 	bic.w	r3, r3, #1
 8006af4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006af6:	4b55      	ldr	r3, [pc, #340]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006afa:	4b56      	ldr	r3, [pc, #344]	; (8006c54 <HAL_RCC_OscConfig+0x7ac>)
 8006afc:	4013      	ands	r3, r2
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006b02:	00d2      	lsls	r2, r2, #3
 8006b04:	4951      	ldr	r1, [pc, #324]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006b0a:	4b50      	ldr	r3, [pc, #320]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0e:	f023 020c 	bic.w	r2, r3, #12
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	494d      	ldr	r1, [pc, #308]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006b1c:	4b4b      	ldr	r3, [pc, #300]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	f023 0202 	bic.w	r2, r3, #2
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b28:	4948      	ldr	r1, [pc, #288]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b2e:	4b47      	ldr	r3, [pc, #284]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b32:	4a46      	ldr	r2, [pc, #280]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b3a:	4b44      	ldr	r3, [pc, #272]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3e:	4a43      	ldr	r2, [pc, #268]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b46:	4b41      	ldr	r3, [pc, #260]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4a:	4a40      	ldr	r2, [pc, #256]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006b52:	4b3e      	ldr	r3, [pc, #248]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b56:	4a3d      	ldr	r2, [pc, #244]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006b58:	f043 0301 	orr.w	r3, r3, #1
 8006b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b5e:	4b3b      	ldr	r3, [pc, #236]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a3a      	ldr	r2, [pc, #232]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006b64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b6a:	f7fb fc81 	bl	8002470 <HAL_GetTick>
 8006b6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b70:	e008      	b.n	8006b84 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b72:	f7fb fc7d 	bl	8002470 <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d901      	bls.n	8006b84 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e05f      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b84:	4b31      	ldr	r3, [pc, #196]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d0f0      	beq.n	8006b72 <HAL_RCC_OscConfig+0x6ca>
 8006b90:	e057      	b.n	8006c42 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b92:	4b2e      	ldr	r3, [pc, #184]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a2d      	ldr	r2, [pc, #180]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006b98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9e:	f7fb fc67 	bl	8002470 <HAL_GetTick>
 8006ba2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ba6:	f7fb fc63 	bl	8002470 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e045      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bb8:	4b24      	ldr	r3, [pc, #144]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1f0      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x6fe>
 8006bc4:	e03d      	b.n	8006c42 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006bc6:	4b21      	ldr	r3, [pc, #132]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bca:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006bcc:	4b1f      	ldr	r3, [pc, #124]	; (8006c4c <HAL_RCC_OscConfig+0x7a4>)
 8006bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d031      	beq.n	8006c3e <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f003 0203 	and.w	r2, r3, #3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d12a      	bne.n	8006c3e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	091b      	lsrs	r3, r3, #4
 8006bec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d122      	bne.n	8006c3e <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c02:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d11a      	bne.n	8006c3e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	0a5b      	lsrs	r3, r3, #9
 8006c0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c14:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d111      	bne.n	8006c3e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	0c1b      	lsrs	r3, r3, #16
 8006c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c26:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d108      	bne.n	8006c3e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	0e1b      	lsrs	r3, r3, #24
 8006c30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c38:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d001      	beq.n	8006c42 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e000      	b.n	8006c44 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3730      	adds	r7, #48	; 0x30
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	58024400 	.word	0x58024400
 8006c50:	fffffc0c 	.word	0xfffffc0c
 8006c54:	ffff0007 	.word	0xffff0007

08006c58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e19c      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c6c:	4b8a      	ldr	r3, [pc, #552]	; (8006e98 <HAL_RCC_ClockConfig+0x240>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d910      	bls.n	8006c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c7a:	4b87      	ldr	r3, [pc, #540]	; (8006e98 <HAL_RCC_ClockConfig+0x240>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f023 020f 	bic.w	r2, r3, #15
 8006c82:	4985      	ldr	r1, [pc, #532]	; (8006e98 <HAL_RCC_ClockConfig+0x240>)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c8a:	4b83      	ldr	r3, [pc, #524]	; (8006e98 <HAL_RCC_ClockConfig+0x240>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 030f 	and.w	r3, r3, #15
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d001      	beq.n	8006c9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e184      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d010      	beq.n	8006cca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	691a      	ldr	r2, [r3, #16]
 8006cac:	4b7b      	ldr	r3, [pc, #492]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d908      	bls.n	8006cca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006cb8:	4b78      	ldr	r3, [pc, #480]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	4975      	ldr	r1, [pc, #468]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0308 	and.w	r3, r3, #8
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d010      	beq.n	8006cf8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695a      	ldr	r2, [r3, #20]
 8006cda:	4b70      	ldr	r3, [pc, #448]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d908      	bls.n	8006cf8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ce6:	4b6d      	ldr	r3, [pc, #436]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	496a      	ldr	r1, [pc, #424]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0310 	and.w	r3, r3, #16
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d010      	beq.n	8006d26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	699a      	ldr	r2, [r3, #24]
 8006d08:	4b64      	ldr	r3, [pc, #400]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006d0a:	69db      	ldr	r3, [r3, #28]
 8006d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d908      	bls.n	8006d26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d14:	4b61      	ldr	r3, [pc, #388]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	495e      	ldr	r1, [pc, #376]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0320 	and.w	r3, r3, #32
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d010      	beq.n	8006d54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	69da      	ldr	r2, [r3, #28]
 8006d36:	4b59      	ldr	r3, [pc, #356]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d908      	bls.n	8006d54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006d42:	4b56      	ldr	r3, [pc, #344]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	4953      	ldr	r1, [pc, #332]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d010      	beq.n	8006d82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68da      	ldr	r2, [r3, #12]
 8006d64:	4b4d      	ldr	r3, [pc, #308]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	f003 030f 	and.w	r3, r3, #15
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d908      	bls.n	8006d82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d70:	4b4a      	ldr	r3, [pc, #296]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	f023 020f 	bic.w	r2, r3, #15
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	4947      	ldr	r1, [pc, #284]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d055      	beq.n	8006e3a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d8e:	4b43      	ldr	r3, [pc, #268]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	4940      	ldr	r1, [pc, #256]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d107      	bne.n	8006db8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006da8:	4b3c      	ldr	r3, [pc, #240]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d121      	bne.n	8006df8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e0f6      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d107      	bne.n	8006dd0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006dc0:	4b36      	ldr	r3, [pc, #216]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d115      	bne.n	8006df8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e0ea      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d107      	bne.n	8006de8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006dd8:	4b30      	ldr	r3, [pc, #192]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d109      	bne.n	8006df8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e0de      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006de8:	4b2c      	ldr	r3, [pc, #176]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e0d6      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006df8:	4b28      	ldr	r3, [pc, #160]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f023 0207 	bic.w	r2, r3, #7
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	4925      	ldr	r1, [pc, #148]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e0a:	f7fb fb31 	bl	8002470 <HAL_GetTick>
 8006e0e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e10:	e00a      	b.n	8006e28 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e12:	f7fb fb2d 	bl	8002470 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d901      	bls.n	8006e28 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e0be      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e28:	4b1c      	ldr	r3, [pc, #112]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	00db      	lsls	r3, r3, #3
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d1eb      	bne.n	8006e12 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d010      	beq.n	8006e68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	4b14      	ldr	r3, [pc, #80]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d208      	bcs.n	8006e68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e56:	4b11      	ldr	r3, [pc, #68]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	f023 020f 	bic.w	r2, r3, #15
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	490e      	ldr	r1, [pc, #56]	; (8006e9c <HAL_RCC_ClockConfig+0x244>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e68:	4b0b      	ldr	r3, [pc, #44]	; (8006e98 <HAL_RCC_ClockConfig+0x240>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 030f 	and.w	r3, r3, #15
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d214      	bcs.n	8006ea0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e76:	4b08      	ldr	r3, [pc, #32]	; (8006e98 <HAL_RCC_ClockConfig+0x240>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f023 020f 	bic.w	r2, r3, #15
 8006e7e:	4906      	ldr	r1, [pc, #24]	; (8006e98 <HAL_RCC_ClockConfig+0x240>)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e86:	4b04      	ldr	r3, [pc, #16]	; (8006e98 <HAL_RCC_ClockConfig+0x240>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 030f 	and.w	r3, r3, #15
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d005      	beq.n	8006ea0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e086      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x34e>
 8006e98:	52002000 	.word	0x52002000
 8006e9c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d010      	beq.n	8006ece <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691a      	ldr	r2, [r3, #16]
 8006eb0:	4b3f      	ldr	r3, [pc, #252]	; (8006fb0 <HAL_RCC_ClockConfig+0x358>)
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d208      	bcs.n	8006ece <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ebc:	4b3c      	ldr	r3, [pc, #240]	; (8006fb0 <HAL_RCC_ClockConfig+0x358>)
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	4939      	ldr	r1, [pc, #228]	; (8006fb0 <HAL_RCC_ClockConfig+0x358>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0308 	and.w	r3, r3, #8
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d010      	beq.n	8006efc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	695a      	ldr	r2, [r3, #20]
 8006ede:	4b34      	ldr	r3, [pc, #208]	; (8006fb0 <HAL_RCC_ClockConfig+0x358>)
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d208      	bcs.n	8006efc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006eea:	4b31      	ldr	r3, [pc, #196]	; (8006fb0 <HAL_RCC_ClockConfig+0x358>)
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	492e      	ldr	r1, [pc, #184]	; (8006fb0 <HAL_RCC_ClockConfig+0x358>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0310 	and.w	r3, r3, #16
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d010      	beq.n	8006f2a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	699a      	ldr	r2, [r3, #24]
 8006f0c:	4b28      	ldr	r3, [pc, #160]	; (8006fb0 <HAL_RCC_ClockConfig+0x358>)
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d208      	bcs.n	8006f2a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f18:	4b25      	ldr	r3, [pc, #148]	; (8006fb0 <HAL_RCC_ClockConfig+0x358>)
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	4922      	ldr	r1, [pc, #136]	; (8006fb0 <HAL_RCC_ClockConfig+0x358>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0320 	and.w	r3, r3, #32
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d010      	beq.n	8006f58 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	69da      	ldr	r2, [r3, #28]
 8006f3a:	4b1d      	ldr	r3, [pc, #116]	; (8006fb0 <HAL_RCC_ClockConfig+0x358>)
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d208      	bcs.n	8006f58 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006f46:	4b1a      	ldr	r3, [pc, #104]	; (8006fb0 <HAL_RCC_ClockConfig+0x358>)
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	4917      	ldr	r1, [pc, #92]	; (8006fb0 <HAL_RCC_ClockConfig+0x358>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f58:	f000 f834 	bl	8006fc4 <HAL_RCC_GetSysClockFreq>
 8006f5c:	4601      	mov	r1, r0
 8006f5e:	4b14      	ldr	r3, [pc, #80]	; (8006fb0 <HAL_RCC_ClockConfig+0x358>)
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	0a1b      	lsrs	r3, r3, #8
 8006f64:	f003 030f 	and.w	r3, r3, #15
 8006f68:	4a12      	ldr	r2, [pc, #72]	; (8006fb4 <HAL_RCC_ClockConfig+0x35c>)
 8006f6a:	5cd3      	ldrb	r3, [r2, r3]
 8006f6c:	f003 031f 	and.w	r3, r3, #31
 8006f70:	fa21 f303 	lsr.w	r3, r1, r3
 8006f74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f76:	4b0e      	ldr	r3, [pc, #56]	; (8006fb0 <HAL_RCC_ClockConfig+0x358>)
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	f003 030f 	and.w	r3, r3, #15
 8006f7e:	4a0d      	ldr	r2, [pc, #52]	; (8006fb4 <HAL_RCC_ClockConfig+0x35c>)
 8006f80:	5cd3      	ldrb	r3, [r2, r3]
 8006f82:	f003 031f 	and.w	r3, r3, #31
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	fa22 f303 	lsr.w	r3, r2, r3
 8006f8c:	4a0a      	ldr	r2, [pc, #40]	; (8006fb8 <HAL_RCC_ClockConfig+0x360>)
 8006f8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f90:	4a0a      	ldr	r2, [pc, #40]	; (8006fbc <HAL_RCC_ClockConfig+0x364>)
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006f96:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <HAL_RCC_ClockConfig+0x368>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fb fa1e 	bl	80023dc <HAL_InitTick>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	58024400 	.word	0x58024400
 8006fb4:	0800dfd0 	.word	0x0800dfd0
 8006fb8:	24000044 	.word	0x24000044
 8006fbc:	24000040 	.word	0x24000040
 8006fc0:	24000048 	.word	0x24000048

08006fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b089      	sub	sp, #36	; 0x24
 8006fc8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fca:	4baf      	ldr	r3, [pc, #700]	; (8007288 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fd2:	2b18      	cmp	r3, #24
 8006fd4:	f200 814e 	bhi.w	8007274 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006fd8:	a201      	add	r2, pc, #4	; (adr r2, 8006fe0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fde:	bf00      	nop
 8006fe0:	08007045 	.word	0x08007045
 8006fe4:	08007275 	.word	0x08007275
 8006fe8:	08007275 	.word	0x08007275
 8006fec:	08007275 	.word	0x08007275
 8006ff0:	08007275 	.word	0x08007275
 8006ff4:	08007275 	.word	0x08007275
 8006ff8:	08007275 	.word	0x08007275
 8006ffc:	08007275 	.word	0x08007275
 8007000:	0800706b 	.word	0x0800706b
 8007004:	08007275 	.word	0x08007275
 8007008:	08007275 	.word	0x08007275
 800700c:	08007275 	.word	0x08007275
 8007010:	08007275 	.word	0x08007275
 8007014:	08007275 	.word	0x08007275
 8007018:	08007275 	.word	0x08007275
 800701c:	08007275 	.word	0x08007275
 8007020:	08007071 	.word	0x08007071
 8007024:	08007275 	.word	0x08007275
 8007028:	08007275 	.word	0x08007275
 800702c:	08007275 	.word	0x08007275
 8007030:	08007275 	.word	0x08007275
 8007034:	08007275 	.word	0x08007275
 8007038:	08007275 	.word	0x08007275
 800703c:	08007275 	.word	0x08007275
 8007040:	08007077 	.word	0x08007077
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007044:	4b90      	ldr	r3, [pc, #576]	; (8007288 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0320 	and.w	r3, r3, #32
 800704c:	2b00      	cmp	r3, #0
 800704e:	d009      	beq.n	8007064 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007050:	4b8d      	ldr	r3, [pc, #564]	; (8007288 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	08db      	lsrs	r3, r3, #3
 8007056:	f003 0303 	and.w	r3, r3, #3
 800705a:	4a8c      	ldr	r2, [pc, #560]	; (800728c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800705c:	fa22 f303 	lsr.w	r3, r2, r3
 8007060:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007062:	e10a      	b.n	800727a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007064:	4b89      	ldr	r3, [pc, #548]	; (800728c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007066:	61bb      	str	r3, [r7, #24]
    break;
 8007068:	e107      	b.n	800727a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800706a:	4b89      	ldr	r3, [pc, #548]	; (8007290 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800706c:	61bb      	str	r3, [r7, #24]
    break;
 800706e:	e104      	b.n	800727a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007070:	4b88      	ldr	r3, [pc, #544]	; (8007294 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007072:	61bb      	str	r3, [r7, #24]
    break;
 8007074:	e101      	b.n	800727a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007076:	4b84      	ldr	r3, [pc, #528]	; (8007288 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707a:	f003 0303 	and.w	r3, r3, #3
 800707e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007080:	4b81      	ldr	r3, [pc, #516]	; (8007288 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007084:	091b      	lsrs	r3, r3, #4
 8007086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800708a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800708c:	4b7e      	ldr	r3, [pc, #504]	; (8007288 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007096:	4b7c      	ldr	r3, [pc, #496]	; (8007288 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800709a:	08db      	lsrs	r3, r3, #3
 800709c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	fb02 f303 	mul.w	r3, r2, r3
 80070a6:	ee07 3a90 	vmov	s15, r3
 80070aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 80da 	beq.w	800726e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d05a      	beq.n	8007176 <HAL_RCC_GetSysClockFreq+0x1b2>
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d302      	bcc.n	80070ca <HAL_RCC_GetSysClockFreq+0x106>
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d078      	beq.n	80071ba <HAL_RCC_GetSysClockFreq+0x1f6>
 80070c8:	e099      	b.n	80071fe <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070ca:	4b6f      	ldr	r3, [pc, #444]	; (8007288 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0320 	and.w	r3, r3, #32
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d02d      	beq.n	8007132 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070d6:	4b6c      	ldr	r3, [pc, #432]	; (8007288 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	08db      	lsrs	r3, r3, #3
 80070dc:	f003 0303 	and.w	r3, r3, #3
 80070e0:	4a6a      	ldr	r2, [pc, #424]	; (800728c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80070e2:	fa22 f303 	lsr.w	r3, r2, r3
 80070e6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	ee07 3a90 	vmov	s15, r3
 80070f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007100:	4b61      	ldr	r3, [pc, #388]	; (8007288 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007108:	ee07 3a90 	vmov	s15, r3
 800710c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007110:	ed97 6a02 	vldr	s12, [r7, #8]
 8007114:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007298 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007118:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800711c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007120:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007124:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800712c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007130:	e087      	b.n	8007242 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	ee07 3a90 	vmov	s15, r3
 8007138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713c:	eddf 6a57 	vldr	s13, [pc, #348]	; 800729c <HAL_RCC_GetSysClockFreq+0x2d8>
 8007140:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007144:	4b50      	ldr	r3, [pc, #320]	; (8007288 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800714c:	ee07 3a90 	vmov	s15, r3
 8007150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007154:	ed97 6a02 	vldr	s12, [r7, #8]
 8007158:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007298 <HAL_RCC_GetSysClockFreq+0x2d4>
 800715c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007160:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007164:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007168:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800716c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007170:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007174:	e065      	b.n	8007242 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	ee07 3a90 	vmov	s15, r3
 800717c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007180:	eddf 6a47 	vldr	s13, [pc, #284]	; 80072a0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007184:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007188:	4b3f      	ldr	r3, [pc, #252]	; (8007288 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007190:	ee07 3a90 	vmov	s15, r3
 8007194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007198:	ed97 6a02 	vldr	s12, [r7, #8]
 800719c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007298 <HAL_RCC_GetSysClockFreq+0x2d4>
 80071a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071b8:	e043      	b.n	8007242 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	ee07 3a90 	vmov	s15, r3
 80071c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80072a4 <HAL_RCC_GetSysClockFreq+0x2e0>
 80071c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071cc:	4b2e      	ldr	r3, [pc, #184]	; (8007288 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80071ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d4:	ee07 3a90 	vmov	s15, r3
 80071d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80071e0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007298 <HAL_RCC_GetSysClockFreq+0x2d4>
 80071e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071fc:	e021      	b.n	8007242 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	ee07 3a90 	vmov	s15, r3
 8007204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007208:	eddf 6a25 	vldr	s13, [pc, #148]	; 80072a0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800720c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007210:	4b1d      	ldr	r3, [pc, #116]	; (8007288 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007218:	ee07 3a90 	vmov	s15, r3
 800721c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007220:	ed97 6a02 	vldr	s12, [r7, #8]
 8007224:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007298 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007228:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800722c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007230:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007234:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007240:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007242:	4b11      	ldr	r3, [pc, #68]	; (8007288 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007246:	0a5b      	lsrs	r3, r3, #9
 8007248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800724c:	3301      	adds	r3, #1
 800724e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	ee07 3a90 	vmov	s15, r3
 8007256:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800725a:	edd7 6a07 	vldr	s13, [r7, #28]
 800725e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007266:	ee17 3a90 	vmov	r3, s15
 800726a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800726c:	e005      	b.n	800727a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	61bb      	str	r3, [r7, #24]
    break;
 8007272:	e002      	b.n	800727a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007274:	4b06      	ldr	r3, [pc, #24]	; (8007290 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007276:	61bb      	str	r3, [r7, #24]
    break;
 8007278:	bf00      	nop
  }

  return sysclockfreq;
 800727a:	69bb      	ldr	r3, [r7, #24]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3724      	adds	r7, #36	; 0x24
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	58024400 	.word	0x58024400
 800728c:	03d09000 	.word	0x03d09000
 8007290:	003d0900 	.word	0x003d0900
 8007294:	017d7840 	.word	0x017d7840
 8007298:	46000000 	.word	0x46000000
 800729c:	4c742400 	.word	0x4c742400
 80072a0:	4a742400 	.word	0x4a742400
 80072a4:	4bbebc20 	.word	0x4bbebc20

080072a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80072ae:	f7ff fe89 	bl	8006fc4 <HAL_RCC_GetSysClockFreq>
 80072b2:	4601      	mov	r1, r0
 80072b4:	4b10      	ldr	r3, [pc, #64]	; (80072f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	0a1b      	lsrs	r3, r3, #8
 80072ba:	f003 030f 	and.w	r3, r3, #15
 80072be:	4a0f      	ldr	r2, [pc, #60]	; (80072fc <HAL_RCC_GetHCLKFreq+0x54>)
 80072c0:	5cd3      	ldrb	r3, [r2, r3]
 80072c2:	f003 031f 	and.w	r3, r3, #31
 80072c6:	fa21 f303 	lsr.w	r3, r1, r3
 80072ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072cc:	4b0a      	ldr	r3, [pc, #40]	; (80072f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	f003 030f 	and.w	r3, r3, #15
 80072d4:	4a09      	ldr	r2, [pc, #36]	; (80072fc <HAL_RCC_GetHCLKFreq+0x54>)
 80072d6:	5cd3      	ldrb	r3, [r2, r3]
 80072d8:	f003 031f 	and.w	r3, r3, #31
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	fa22 f303 	lsr.w	r3, r2, r3
 80072e2:	4a07      	ldr	r2, [pc, #28]	; (8007300 <HAL_RCC_GetHCLKFreq+0x58>)
 80072e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072e6:	4a07      	ldr	r2, [pc, #28]	; (8007304 <HAL_RCC_GetHCLKFreq+0x5c>)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80072ec:	4b04      	ldr	r3, [pc, #16]	; (8007300 <HAL_RCC_GetHCLKFreq+0x58>)
 80072ee:	681b      	ldr	r3, [r3, #0]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	58024400 	.word	0x58024400
 80072fc:	0800dfd0 	.word	0x0800dfd0
 8007300:	24000044 	.word	0x24000044
 8007304:	24000040 	.word	0x24000040

08007308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800730c:	f7ff ffcc 	bl	80072a8 <HAL_RCC_GetHCLKFreq>
 8007310:	4601      	mov	r1, r0
 8007312:	4b06      	ldr	r3, [pc, #24]	; (800732c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	091b      	lsrs	r3, r3, #4
 8007318:	f003 0307 	and.w	r3, r3, #7
 800731c:	4a04      	ldr	r2, [pc, #16]	; (8007330 <HAL_RCC_GetPCLK1Freq+0x28>)
 800731e:	5cd3      	ldrb	r3, [r2, r3]
 8007320:	f003 031f 	and.w	r3, r3, #31
 8007324:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007328:	4618      	mov	r0, r3
 800732a:	bd80      	pop	{r7, pc}
 800732c:	58024400 	.word	0x58024400
 8007330:	0800dfd0 	.word	0x0800dfd0

08007334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007338:	f7ff ffb6 	bl	80072a8 <HAL_RCC_GetHCLKFreq>
 800733c:	4601      	mov	r1, r0
 800733e:	4b06      	ldr	r3, [pc, #24]	; (8007358 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	0a1b      	lsrs	r3, r3, #8
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	4a04      	ldr	r2, [pc, #16]	; (800735c <HAL_RCC_GetPCLK2Freq+0x28>)
 800734a:	5cd3      	ldrb	r3, [r2, r3]
 800734c:	f003 031f 	and.w	r3, r3, #31
 8007350:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007354:	4618      	mov	r0, r3
 8007356:	bd80      	pop	{r7, pc}
 8007358:	58024400 	.word	0x58024400
 800735c:	0800dfd0 	.word	0x0800dfd0

08007360 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007368:	2300      	movs	r3, #0
 800736a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800736c:	2300      	movs	r3, #0
 800736e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d03d      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007380:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007384:	d013      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800738a:	d802      	bhi.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800738c:	2b00      	cmp	r3, #0
 800738e:	d007      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007390:	e01f      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007396:	d013      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007398:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800739c:	d01c      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800739e:	e018      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073a0:	4baf      	ldr	r3, [pc, #700]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a4:	4aae      	ldr	r2, [pc, #696]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80073ac:	e015      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	3304      	adds	r3, #4
 80073b2:	2102      	movs	r1, #2
 80073b4:	4618      	mov	r0, r3
 80073b6:	f001 fd23 	bl	8008e00 <RCCEx_PLL2_Config>
 80073ba:	4603      	mov	r3, r0
 80073bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80073be:	e00c      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	3324      	adds	r3, #36	; 0x24
 80073c4:	2102      	movs	r1, #2
 80073c6:	4618      	mov	r0, r3
 80073c8:	f001 fdcc 	bl	8008f64 <RCCEx_PLL3_Config>
 80073cc:	4603      	mov	r3, r0
 80073ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80073d0:	e003      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	75fb      	strb	r3, [r7, #23]
      break;
 80073d6:	e000      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80073d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073da:	7dfb      	ldrb	r3, [r7, #23]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d109      	bne.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80073e0:	4b9f      	ldr	r3, [pc, #636]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073ec:	499c      	ldr	r1, [pc, #624]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	650b      	str	r3, [r1, #80]	; 0x50
 80073f2:	e001      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f4:	7dfb      	ldrb	r3, [r7, #23]
 80073f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007400:	2b00      	cmp	r3, #0
 8007402:	d03d      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007408:	2b04      	cmp	r3, #4
 800740a:	d826      	bhi.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800740c:	a201      	add	r2, pc, #4	; (adr r2, 8007414 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800740e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007412:	bf00      	nop
 8007414:	08007429 	.word	0x08007429
 8007418:	08007437 	.word	0x08007437
 800741c:	08007449 	.word	0x08007449
 8007420:	08007461 	.word	0x08007461
 8007424:	08007461 	.word	0x08007461
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007428:	4b8d      	ldr	r3, [pc, #564]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742c:	4a8c      	ldr	r2, [pc, #560]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800742e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007432:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007434:	e015      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	3304      	adds	r3, #4
 800743a:	2100      	movs	r1, #0
 800743c:	4618      	mov	r0, r3
 800743e:	f001 fcdf 	bl	8008e00 <RCCEx_PLL2_Config>
 8007442:	4603      	mov	r3, r0
 8007444:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007446:	e00c      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	3324      	adds	r3, #36	; 0x24
 800744c:	2100      	movs	r1, #0
 800744e:	4618      	mov	r0, r3
 8007450:	f001 fd88 	bl	8008f64 <RCCEx_PLL3_Config>
 8007454:	4603      	mov	r3, r0
 8007456:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007458:	e003      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	75fb      	strb	r3, [r7, #23]
      break;
 800745e:	e000      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007462:	7dfb      	ldrb	r3, [r7, #23]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d109      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007468:	4b7d      	ldr	r3, [pc, #500]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800746a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800746c:	f023 0207 	bic.w	r2, r3, #7
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007474:	497a      	ldr	r1, [pc, #488]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007476:	4313      	orrs	r3, r2
 8007478:	650b      	str	r3, [r1, #80]	; 0x50
 800747a:	e001      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747c:	7dfb      	ldrb	r3, [r7, #23]
 800747e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007488:	2b00      	cmp	r3, #0
 800748a:	d03e      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007490:	2b80      	cmp	r3, #128	; 0x80
 8007492:	d01c      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007494:	2b80      	cmp	r3, #128	; 0x80
 8007496:	d804      	bhi.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007498:	2b00      	cmp	r3, #0
 800749a:	d008      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800749c:	2b40      	cmp	r3, #64	; 0x40
 800749e:	d00d      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80074a0:	e01e      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80074a2:	2bc0      	cmp	r3, #192	; 0xc0
 80074a4:	d01f      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80074a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074aa:	d01e      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80074ac:	e018      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074ae:	4b6c      	ldr	r3, [pc, #432]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b2:	4a6b      	ldr	r2, [pc, #428]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80074ba:	e017      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3304      	adds	r3, #4
 80074c0:	2100      	movs	r1, #0
 80074c2:	4618      	mov	r0, r3
 80074c4:	f001 fc9c 	bl	8008e00 <RCCEx_PLL2_Config>
 80074c8:	4603      	mov	r3, r0
 80074ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80074cc:	e00e      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	3324      	adds	r3, #36	; 0x24
 80074d2:	2100      	movs	r1, #0
 80074d4:	4618      	mov	r0, r3
 80074d6:	f001 fd45 	bl	8008f64 <RCCEx_PLL3_Config>
 80074da:	4603      	mov	r3, r0
 80074dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80074de:	e005      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	75fb      	strb	r3, [r7, #23]
      break;
 80074e4:	e002      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80074e6:	bf00      	nop
 80074e8:	e000      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80074ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d109      	bne.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80074f2:	4b5b      	ldr	r3, [pc, #364]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074fe:	4958      	ldr	r1, [pc, #352]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007500:	4313      	orrs	r3, r2
 8007502:	650b      	str	r3, [r1, #80]	; 0x50
 8007504:	e001      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007506:	7dfb      	ldrb	r3, [r7, #23]
 8007508:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007512:	2b00      	cmp	r3, #0
 8007514:	d044      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800751c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007520:	d01f      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007526:	d805      	bhi.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800752c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007530:	d00e      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007532:	e01f      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007534:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007538:	d01f      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800753a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800753e:	d01e      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007540:	e018      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007542:	4b47      	ldr	r3, [pc, #284]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007546:	4a46      	ldr	r2, [pc, #280]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800754c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800754e:	e017      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3304      	adds	r3, #4
 8007554:	2100      	movs	r1, #0
 8007556:	4618      	mov	r0, r3
 8007558:	f001 fc52 	bl	8008e00 <RCCEx_PLL2_Config>
 800755c:	4603      	mov	r3, r0
 800755e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007560:	e00e      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	3324      	adds	r3, #36	; 0x24
 8007566:	2100      	movs	r1, #0
 8007568:	4618      	mov	r0, r3
 800756a:	f001 fcfb 	bl	8008f64 <RCCEx_PLL3_Config>
 800756e:	4603      	mov	r3, r0
 8007570:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007572:	e005      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	75fb      	strb	r3, [r7, #23]
      break;
 8007578:	e002      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800757a:	bf00      	nop
 800757c:	e000      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800757e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007580:	7dfb      	ldrb	r3, [r7, #23]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10a      	bne.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007586:	4b36      	ldr	r3, [pc, #216]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800758a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007594:	4932      	ldr	r1, [pc, #200]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007596:	4313      	orrs	r3, r2
 8007598:	658b      	str	r3, [r1, #88]	; 0x58
 800759a:	e001      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800759c:	7dfb      	ldrb	r3, [r7, #23]
 800759e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d044      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80075b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075b6:	d01f      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80075b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075bc:	d805      	bhi.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80075c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075c6:	d00e      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80075c8:	e01f      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80075ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80075ce:	d01f      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80075d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075d4:	d01e      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80075d6:	e018      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075d8:	4b21      	ldr	r3, [pc, #132]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	4a20      	ldr	r2, [pc, #128]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075e4:	e017      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3304      	adds	r3, #4
 80075ea:	2100      	movs	r1, #0
 80075ec:	4618      	mov	r0, r3
 80075ee:	f001 fc07 	bl	8008e00 <RCCEx_PLL2_Config>
 80075f2:	4603      	mov	r3, r0
 80075f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80075f6:	e00e      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3324      	adds	r3, #36	; 0x24
 80075fc:	2100      	movs	r1, #0
 80075fe:	4618      	mov	r0, r3
 8007600:	f001 fcb0 	bl	8008f64 <RCCEx_PLL3_Config>
 8007604:	4603      	mov	r3, r0
 8007606:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007608:	e005      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	75fb      	strb	r3, [r7, #23]
      break;
 800760e:	e002      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007610:	bf00      	nop
 8007612:	e000      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800761c:	4b10      	ldr	r3, [pc, #64]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800761e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007620:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800762a:	490d      	ldr	r1, [pc, #52]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800762c:	4313      	orrs	r3, r2
 800762e:	658b      	str	r3, [r1, #88]	; 0x58
 8007630:	e001      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007632:	7dfb      	ldrb	r3, [r7, #23]
 8007634:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d035      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007646:	2b10      	cmp	r3, #16
 8007648:	d00c      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800764a:	2b10      	cmp	r3, #16
 800764c:	d802      	bhi.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d01b      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007652:	e017      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007654:	2b20      	cmp	r3, #32
 8007656:	d00c      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007658:	2b30      	cmp	r3, #48	; 0x30
 800765a:	d018      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800765c:	e012      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800765e:	bf00      	nop
 8007660:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007664:	4baf      	ldr	r3, [pc, #700]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	4aae      	ldr	r2, [pc, #696]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800766a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800766e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007670:	e00e      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	3304      	adds	r3, #4
 8007676:	2102      	movs	r1, #2
 8007678:	4618      	mov	r0, r3
 800767a:	f001 fbc1 	bl	8008e00 <RCCEx_PLL2_Config>
 800767e:	4603      	mov	r3, r0
 8007680:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007682:	e005      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	75fb      	strb	r3, [r7, #23]
      break;
 8007688:	e002      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800768a:	bf00      	nop
 800768c:	e000      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800768e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007690:	7dfb      	ldrb	r3, [r7, #23]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d109      	bne.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007696:	4ba3      	ldr	r3, [pc, #652]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800769a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076a2:	49a0      	ldr	r1, [pc, #640]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076a4:	4313      	orrs	r3, r2
 80076a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80076a8:	e001      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
 80076ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d042      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c2:	d01f      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80076c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c8:	d805      	bhi.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00a      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80076ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d2:	d00e      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80076d4:	e01f      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80076d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076da:	d01f      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80076dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076e0:	d01e      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80076e2:	e018      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076e4:	4b8f      	ldr	r3, [pc, #572]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	4a8e      	ldr	r2, [pc, #568]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80076f0:	e017      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	3304      	adds	r3, #4
 80076f6:	2100      	movs	r1, #0
 80076f8:	4618      	mov	r0, r3
 80076fa:	f001 fb81 	bl	8008e00 <RCCEx_PLL2_Config>
 80076fe:	4603      	mov	r3, r0
 8007700:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007702:	e00e      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3324      	adds	r3, #36	; 0x24
 8007708:	2100      	movs	r1, #0
 800770a:	4618      	mov	r0, r3
 800770c:	f001 fc2a 	bl	8008f64 <RCCEx_PLL3_Config>
 8007710:	4603      	mov	r3, r0
 8007712:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007714:	e005      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	75fb      	strb	r3, [r7, #23]
      break;
 800771a:	e002      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800771c:	bf00      	nop
 800771e:	e000      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007722:	7dfb      	ldrb	r3, [r7, #23]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d109      	bne.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007728:	4b7e      	ldr	r3, [pc, #504]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800772a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800772c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007734:	497b      	ldr	r1, [pc, #492]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007736:	4313      	orrs	r3, r2
 8007738:	650b      	str	r3, [r1, #80]	; 0x50
 800773a:	e001      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800773c:	7dfb      	ldrb	r3, [r7, #23]
 800773e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d042      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007750:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007754:	d01b      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800775a:	d805      	bhi.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800775c:	2b00      	cmp	r3, #0
 800775e:	d022      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007764:	d00a      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007766:	e01b      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007768:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800776c:	d01d      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800776e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007772:	d01c      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007774:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007778:	d01b      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800777a:	e011      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3304      	adds	r3, #4
 8007780:	2101      	movs	r1, #1
 8007782:	4618      	mov	r0, r3
 8007784:	f001 fb3c 	bl	8008e00 <RCCEx_PLL2_Config>
 8007788:	4603      	mov	r3, r0
 800778a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800778c:	e012      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	3324      	adds	r3, #36	; 0x24
 8007792:	2101      	movs	r1, #1
 8007794:	4618      	mov	r0, r3
 8007796:	f001 fbe5 	bl	8008f64 <RCCEx_PLL3_Config>
 800779a:	4603      	mov	r3, r0
 800779c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800779e:	e009      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	75fb      	strb	r3, [r7, #23]
      break;
 80077a4:	e006      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80077a6:	bf00      	nop
 80077a8:	e004      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80077aa:	bf00      	nop
 80077ac:	e002      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80077ae:	bf00      	nop
 80077b0:	e000      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80077b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077b4:	7dfb      	ldrb	r3, [r7, #23]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d109      	bne.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80077ba:	4b5a      	ldr	r3, [pc, #360]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077be:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077c6:	4957      	ldr	r1, [pc, #348]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	650b      	str	r3, [r1, #80]	; 0x50
 80077cc:	e001      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
 80077d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d044      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077e8:	d01b      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80077ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077ee:	d805      	bhi.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d022      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80077f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077f8:	d00a      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80077fa:	e01b      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80077fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007800:	d01d      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007802:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007806:	d01c      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007808:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800780c:	d01b      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800780e:	e011      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	3304      	adds	r3, #4
 8007814:	2101      	movs	r1, #1
 8007816:	4618      	mov	r0, r3
 8007818:	f001 faf2 	bl	8008e00 <RCCEx_PLL2_Config>
 800781c:	4603      	mov	r3, r0
 800781e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007820:	e012      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	3324      	adds	r3, #36	; 0x24
 8007826:	2101      	movs	r1, #1
 8007828:	4618      	mov	r0, r3
 800782a:	f001 fb9b 	bl	8008f64 <RCCEx_PLL3_Config>
 800782e:	4603      	mov	r3, r0
 8007830:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007832:	e009      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	75fb      	strb	r3, [r7, #23]
      break;
 8007838:	e006      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800783a:	bf00      	nop
 800783c:	e004      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800783e:	bf00      	nop
 8007840:	e002      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007842:	bf00      	nop
 8007844:	e000      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007846:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007848:	7dfb      	ldrb	r3, [r7, #23]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10a      	bne.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800784e:	4b35      	ldr	r3, [pc, #212]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007852:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800785c:	4931      	ldr	r1, [pc, #196]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800785e:	4313      	orrs	r3, r2
 8007860:	658b      	str	r3, [r1, #88]	; 0x58
 8007862:	e001      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007864:	7dfb      	ldrb	r3, [r7, #23]
 8007866:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d02d      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007878:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800787c:	d005      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800787e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007882:	d009      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007884:	2b00      	cmp	r3, #0
 8007886:	d013      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007888:	e00f      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800788a:	4b26      	ldr	r3, [pc, #152]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800788c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788e:	4a25      	ldr	r2, [pc, #148]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007894:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007896:	e00c      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	3304      	adds	r3, #4
 800789c:	2101      	movs	r1, #1
 800789e:	4618      	mov	r0, r3
 80078a0:	f001 faae 	bl	8008e00 <RCCEx_PLL2_Config>
 80078a4:	4603      	mov	r3, r0
 80078a6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80078a8:	e003      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	75fb      	strb	r3, [r7, #23]
      break;
 80078ae:	e000      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80078b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d109      	bne.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80078b8:	4b1a      	ldr	r3, [pc, #104]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078c4:	4917      	ldr	r1, [pc, #92]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	650b      	str	r3, [r1, #80]	; 0x50
 80078ca:	e001      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078cc:	7dfb      	ldrb	r3, [r7, #23]
 80078ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d035      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	d81b      	bhi.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80078e4:	a201      	add	r2, pc, #4	; (adr r2, 80078ec <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80078e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ea:	bf00      	nop
 80078ec:	08007929 	.word	0x08007929
 80078f0:	080078fd 	.word	0x080078fd
 80078f4:	0800790b 	.word	0x0800790b
 80078f8:	08007929 	.word	0x08007929
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078fc:	4b09      	ldr	r3, [pc, #36]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007900:	4a08      	ldr	r2, [pc, #32]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007906:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007908:	e00f      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3304      	adds	r3, #4
 800790e:	2102      	movs	r1, #2
 8007910:	4618      	mov	r0, r3
 8007912:	f001 fa75 	bl	8008e00 <RCCEx_PLL2_Config>
 8007916:	4603      	mov	r3, r0
 8007918:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800791a:	e006      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	75fb      	strb	r3, [r7, #23]
      break;
 8007920:	e003      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007922:	bf00      	nop
 8007924:	58024400 	.word	0x58024400
      break;
 8007928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800792a:	7dfb      	ldrb	r3, [r7, #23]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d109      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007930:	4bba      	ldr	r3, [pc, #744]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007934:	f023 0203 	bic.w	r2, r3, #3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800793c:	49b7      	ldr	r1, [pc, #732]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800793e:	4313      	orrs	r3, r2
 8007940:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007942:	e001      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007944:	7dfb      	ldrb	r3, [r7, #23]
 8007946:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 8086 	beq.w	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007956:	4bb2      	ldr	r3, [pc, #712]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4ab1      	ldr	r2, [pc, #708]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800795c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007960:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007962:	f7fa fd85 	bl	8002470 <HAL_GetTick>
 8007966:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007968:	e009      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800796a:	f7fa fd81 	bl	8002470 <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	2b64      	cmp	r3, #100	; 0x64
 8007976:	d902      	bls.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	75fb      	strb	r3, [r7, #23]
        break;
 800797c:	e005      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800797e:	4ba8      	ldr	r3, [pc, #672]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007986:	2b00      	cmp	r3, #0
 8007988:	d0ef      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800798a:	7dfb      	ldrb	r3, [r7, #23]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d166      	bne.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007990:	4ba2      	ldr	r3, [pc, #648]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007992:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800799a:	4053      	eors	r3, r2
 800799c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d013      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079a4:	4b9d      	ldr	r3, [pc, #628]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079ac:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079ae:	4b9b      	ldr	r3, [pc, #620]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b2:	4a9a      	ldr	r2, [pc, #616]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079b8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079ba:	4b98      	ldr	r3, [pc, #608]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079be:	4a97      	ldr	r2, [pc, #604]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079c4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80079c6:	4a95      	ldr	r2, [pc, #596]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079d6:	d115      	bne.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d8:	f7fa fd4a 	bl	8002470 <HAL_GetTick>
 80079dc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079de:	e00b      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079e0:	f7fa fd46 	bl	8002470 <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d902      	bls.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	75fb      	strb	r3, [r7, #23]
            break;
 80079f6:	e005      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079f8:	4b88      	ldr	r3, [pc, #544]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d0ed      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007a04:	7dfb      	ldrb	r3, [r7, #23]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d126      	bne.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a18:	d10d      	bne.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007a1a:	4b80      	ldr	r3, [pc, #512]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a28:	0919      	lsrs	r1, r3, #4
 8007a2a:	4b7e      	ldr	r3, [pc, #504]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007a2c:	400b      	ands	r3, r1
 8007a2e:	497b      	ldr	r1, [pc, #492]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	610b      	str	r3, [r1, #16]
 8007a34:	e005      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007a36:	4b79      	ldr	r3, [pc, #484]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	4a78      	ldr	r2, [pc, #480]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007a40:	6113      	str	r3, [r2, #16]
 8007a42:	4b76      	ldr	r3, [pc, #472]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a50:	4972      	ldr	r1, [pc, #456]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	670b      	str	r3, [r1, #112]	; 0x70
 8007a56:	e004      	b.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a58:	7dfb      	ldrb	r3, [r7, #23]
 8007a5a:	75bb      	strb	r3, [r7, #22]
 8007a5c:	e001      	b.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5e:	7dfb      	ldrb	r3, [r7, #23]
 8007a60:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d07d      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a72:	2b28      	cmp	r3, #40	; 0x28
 8007a74:	d866      	bhi.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007a76:	a201      	add	r2, pc, #4	; (adr r2, 8007a7c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7c:	08007b4b 	.word	0x08007b4b
 8007a80:	08007b45 	.word	0x08007b45
 8007a84:	08007b45 	.word	0x08007b45
 8007a88:	08007b45 	.word	0x08007b45
 8007a8c:	08007b45 	.word	0x08007b45
 8007a90:	08007b45 	.word	0x08007b45
 8007a94:	08007b45 	.word	0x08007b45
 8007a98:	08007b45 	.word	0x08007b45
 8007a9c:	08007b21 	.word	0x08007b21
 8007aa0:	08007b45 	.word	0x08007b45
 8007aa4:	08007b45 	.word	0x08007b45
 8007aa8:	08007b45 	.word	0x08007b45
 8007aac:	08007b45 	.word	0x08007b45
 8007ab0:	08007b45 	.word	0x08007b45
 8007ab4:	08007b45 	.word	0x08007b45
 8007ab8:	08007b45 	.word	0x08007b45
 8007abc:	08007b33 	.word	0x08007b33
 8007ac0:	08007b45 	.word	0x08007b45
 8007ac4:	08007b45 	.word	0x08007b45
 8007ac8:	08007b45 	.word	0x08007b45
 8007acc:	08007b45 	.word	0x08007b45
 8007ad0:	08007b45 	.word	0x08007b45
 8007ad4:	08007b45 	.word	0x08007b45
 8007ad8:	08007b45 	.word	0x08007b45
 8007adc:	08007b4b 	.word	0x08007b4b
 8007ae0:	08007b45 	.word	0x08007b45
 8007ae4:	08007b45 	.word	0x08007b45
 8007ae8:	08007b45 	.word	0x08007b45
 8007aec:	08007b45 	.word	0x08007b45
 8007af0:	08007b45 	.word	0x08007b45
 8007af4:	08007b45 	.word	0x08007b45
 8007af8:	08007b45 	.word	0x08007b45
 8007afc:	08007b4b 	.word	0x08007b4b
 8007b00:	08007b45 	.word	0x08007b45
 8007b04:	08007b45 	.word	0x08007b45
 8007b08:	08007b45 	.word	0x08007b45
 8007b0c:	08007b45 	.word	0x08007b45
 8007b10:	08007b45 	.word	0x08007b45
 8007b14:	08007b45 	.word	0x08007b45
 8007b18:	08007b45 	.word	0x08007b45
 8007b1c:	08007b4b 	.word	0x08007b4b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3304      	adds	r3, #4
 8007b24:	2101      	movs	r1, #1
 8007b26:	4618      	mov	r0, r3
 8007b28:	f001 f96a 	bl	8008e00 <RCCEx_PLL2_Config>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007b30:	e00c      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	3324      	adds	r3, #36	; 0x24
 8007b36:	2101      	movs	r1, #1
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f001 fa13 	bl	8008f64 <RCCEx_PLL3_Config>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007b42:	e003      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	75fb      	strb	r3, [r7, #23]
      break;
 8007b48:	e000      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d109      	bne.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007b52:	4b32      	ldr	r3, [pc, #200]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b56:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b5e:	492f      	ldr	r1, [pc, #188]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	654b      	str	r3, [r1, #84]	; 0x54
 8007b64:	e001      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
 8007b68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0302 	and.w	r3, r3, #2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d037      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b7a:	2b05      	cmp	r3, #5
 8007b7c:	d820      	bhi.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007b7e:	a201      	add	r2, pc, #4	; (adr r2, 8007b84 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b84:	08007bc7 	.word	0x08007bc7
 8007b88:	08007b9d 	.word	0x08007b9d
 8007b8c:	08007baf 	.word	0x08007baf
 8007b90:	08007bc7 	.word	0x08007bc7
 8007b94:	08007bc7 	.word	0x08007bc7
 8007b98:	08007bc7 	.word	0x08007bc7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f001 f92c 	bl	8008e00 <RCCEx_PLL2_Config>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007bac:	e00c      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3324      	adds	r3, #36	; 0x24
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f001 f9d5 	bl	8008f64 <RCCEx_PLL3_Config>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007bbe:	e003      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8007bc4:	e000      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007bc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d109      	bne.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007bce:	4b13      	ldr	r3, [pc, #76]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd2:	f023 0207 	bic.w	r2, r3, #7
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bda:	4910      	ldr	r1, [pc, #64]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	654b      	str	r3, [r1, #84]	; 0x54
 8007be0:	e001      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0304 	and.w	r3, r3, #4
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d040      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf8:	2b05      	cmp	r3, #5
 8007bfa:	d827      	bhi.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007bfc:	a201      	add	r2, pc, #4	; (adr r2, 8007c04 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c02:	bf00      	nop
 8007c04:	08007c53 	.word	0x08007c53
 8007c08:	08007c29 	.word	0x08007c29
 8007c0c:	08007c3b 	.word	0x08007c3b
 8007c10:	08007c53 	.word	0x08007c53
 8007c14:	08007c53 	.word	0x08007c53
 8007c18:	08007c53 	.word	0x08007c53
 8007c1c:	58024400 	.word	0x58024400
 8007c20:	58024800 	.word	0x58024800
 8007c24:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f001 f8e6 	bl	8008e00 <RCCEx_PLL2_Config>
 8007c34:	4603      	mov	r3, r0
 8007c36:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007c38:	e00c      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	3324      	adds	r3, #36	; 0x24
 8007c3e:	2101      	movs	r1, #1
 8007c40:	4618      	mov	r0, r3
 8007c42:	f001 f98f 	bl	8008f64 <RCCEx_PLL3_Config>
 8007c46:	4603      	mov	r3, r0
 8007c48:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007c4a:	e003      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c50:	e000      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c54:	7dfb      	ldrb	r3, [r7, #23]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10a      	bne.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c5a:	4bb2      	ldr	r3, [pc, #712]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c5e:	f023 0207 	bic.w	r2, r3, #7
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c68:	49ae      	ldr	r1, [pc, #696]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	658b      	str	r3, [r1, #88]	; 0x58
 8007c6e:	e001      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0320 	and.w	r3, r3, #32
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d044      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c8a:	d01b      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c90:	d805      	bhi.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d022      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007c96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c9a:	d00a      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007c9c:	e01b      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ca2:	d01d      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ca8:	d01c      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007caa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007cae:	d01b      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007cb0:	e011      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f001 f8a1 	bl	8008e00 <RCCEx_PLL2_Config>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007cc2:	e012      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	3324      	adds	r3, #36	; 0x24
 8007cc8:	2102      	movs	r1, #2
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f001 f94a 	bl	8008f64 <RCCEx_PLL3_Config>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007cd4:	e009      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8007cda:	e006      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007cdc:	bf00      	nop
 8007cde:	e004      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007ce0:	bf00      	nop
 8007ce2:	e002      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007ce4:	bf00      	nop
 8007ce6:	e000      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10a      	bne.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cf0:	4b8c      	ldr	r3, [pc, #560]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cfe:	4989      	ldr	r1, [pc, #548]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	654b      	str	r3, [r1, #84]	; 0x54
 8007d04:	e001      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d06:	7dfb      	ldrb	r3, [r7, #23]
 8007d08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d044      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d20:	d01b      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d26:	d805      	bhi.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d022      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d30:	d00a      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007d32:	e01b      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d38:	d01d      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007d3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d3e:	d01c      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007d40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d44:	d01b      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007d46:	e011      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f001 f856 	bl	8008e00 <RCCEx_PLL2_Config>
 8007d54:	4603      	mov	r3, r0
 8007d56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007d58:	e012      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	3324      	adds	r3, #36	; 0x24
 8007d5e:	2102      	movs	r1, #2
 8007d60:	4618      	mov	r0, r3
 8007d62:	f001 f8ff 	bl	8008f64 <RCCEx_PLL3_Config>
 8007d66:	4603      	mov	r3, r0
 8007d68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007d6a:	e009      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d70:	e006      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007d72:	bf00      	nop
 8007d74:	e004      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007d76:	bf00      	nop
 8007d78:	e002      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007d7a:	bf00      	nop
 8007d7c:	e000      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10a      	bne.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d86:	4b67      	ldr	r3, [pc, #412]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d8a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d94:	4963      	ldr	r1, [pc, #396]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	658b      	str	r3, [r1, #88]	; 0x58
 8007d9a:	e001      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d9c:	7dfb      	ldrb	r3, [r7, #23]
 8007d9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d044      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007db2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007db6:	d01b      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dbc:	d805      	bhi.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d022      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dc6:	d00a      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007dc8:	e01b      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dce:	d01d      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007dd0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007dd4:	d01c      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007dd6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007dda:	d01b      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007ddc:	e011      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	3304      	adds	r3, #4
 8007de2:	2100      	movs	r1, #0
 8007de4:	4618      	mov	r0, r3
 8007de6:	f001 f80b 	bl	8008e00 <RCCEx_PLL2_Config>
 8007dea:	4603      	mov	r3, r0
 8007dec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007dee:	e012      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3324      	adds	r3, #36	; 0x24
 8007df4:	2102      	movs	r1, #2
 8007df6:	4618      	mov	r0, r3
 8007df8:	f001 f8b4 	bl	8008f64 <RCCEx_PLL3_Config>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007e00:	e009      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	75fb      	strb	r3, [r7, #23]
      break;
 8007e06:	e006      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007e08:	bf00      	nop
 8007e0a:	e004      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007e0c:	bf00      	nop
 8007e0e:	e002      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007e10:	bf00      	nop
 8007e12:	e000      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007e1c:	4b41      	ldr	r3, [pc, #260]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e20:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e2a:	493e      	ldr	r1, [pc, #248]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	658b      	str	r3, [r1, #88]	; 0x58
 8007e30:	e001      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0308 	and.w	r3, r3, #8
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d01a      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e4c:	d10a      	bne.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	3324      	adds	r3, #36	; 0x24
 8007e52:	2102      	movs	r1, #2
 8007e54:	4618      	mov	r0, r3
 8007e56:	f001 f885 	bl	8008f64 <RCCEx_PLL3_Config>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007e64:	4b2f      	ldr	r3, [pc, #188]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e72:	492c      	ldr	r1, [pc, #176]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007e74:	4313      	orrs	r3, r2
 8007e76:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0310 	and.w	r3, r3, #16
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d01a      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e8e:	d10a      	bne.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3324      	adds	r3, #36	; 0x24
 8007e94:	2102      	movs	r1, #2
 8007e96:	4618      	mov	r0, r3
 8007e98:	f001 f864 	bl	8008f64 <RCCEx_PLL3_Config>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d001      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ea6:	4b1f      	ldr	r3, [pc, #124]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007eb4:	491b      	ldr	r1, [pc, #108]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d032      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ed0:	d00d      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007ed2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ed6:	d016      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d111      	bne.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 ff8c 	bl	8008e00 <RCCEx_PLL2_Config>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007eec:	e00c      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	3324      	adds	r3, #36	; 0x24
 8007ef2:	2102      	movs	r1, #2
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f001 f835 	bl	8008f64 <RCCEx_PLL3_Config>
 8007efa:	4603      	mov	r3, r0
 8007efc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007efe:	e003      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	75fb      	strb	r3, [r7, #23]
      break;
 8007f04:	e000      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007f06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f08:	7dfb      	ldrb	r3, [r7, #23]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10c      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f0e:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f1c:	4901      	ldr	r1, [pc, #4]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	658b      	str	r3, [r1, #88]	; 0x58
 8007f22:	e003      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007f24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
 8007f2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d02f      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f42:	d00c      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007f44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f48:	d015      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f4e:	d10f      	bne.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f50:	4b71      	ldr	r3, [pc, #452]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f54:	4a70      	ldr	r2, [pc, #448]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007f5c:	e00c      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3324      	adds	r3, #36	; 0x24
 8007f62:	2101      	movs	r1, #1
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 fffd 	bl	8008f64 <RCCEx_PLL3_Config>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007f6e:	e003      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	75fb      	strb	r3, [r7, #23]
      break;
 8007f74:	e000      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007f76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10a      	bne.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f7e:	4b66      	ldr	r3, [pc, #408]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f8c:	4962      	ldr	r1, [pc, #392]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	654b      	str	r3, [r1, #84]	; 0x54
 8007f92:	e001      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f94:	7dfb      	ldrb	r3, [r7, #23]
 8007f96:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d029      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d003      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb0:	d007      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007fb2:	e00f      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fb4:	4b58      	ldr	r3, [pc, #352]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb8:	4a57      	ldr	r2, [pc, #348]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007fc0:	e00b      	b.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	2102      	movs	r1, #2
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 ff19 	bl	8008e00 <RCCEx_PLL2_Config>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007fd2:	e002      	b.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fda:	7dfb      	ldrb	r3, [r7, #23]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d109      	bne.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007fe0:	4b4d      	ldr	r3, [pc, #308]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fe4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fec:	494a      	ldr	r1, [pc, #296]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007ff2:	e001      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff4:	7dfb      	ldrb	r3, [r7, #23]
 8007ff6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00a      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	3324      	adds	r3, #36	; 0x24
 8008008:	2102      	movs	r1, #2
 800800a:	4618      	mov	r0, r3
 800800c:	f000 ffaa 	bl	8008f64 <RCCEx_PLL3_Config>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d02f      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800802a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800802e:	d00c      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008034:	d802      	bhi.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8008036:	2b00      	cmp	r3, #0
 8008038:	d011      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800803a:	e00d      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800803c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008040:	d00f      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8008042:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008046:	d00e      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8008048:	e006      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800804a:	4b33      	ldr	r3, [pc, #204]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800804c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804e:	4a32      	ldr	r2, [pc, #200]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008054:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008056:	e007      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	75fb      	strb	r3, [r7, #23]
      break;
 800805c:	e004      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800805e:	bf00      	nop
 8008060:	e002      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008062:	bf00      	nop
 8008064:	e000      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008066:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008068:	7dfb      	ldrb	r3, [r7, #23]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d109      	bne.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800806e:	4b2a      	ldr	r3, [pc, #168]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008072:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800807a:	4927      	ldr	r1, [pc, #156]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800807c:	4313      	orrs	r3, r2
 800807e:	654b      	str	r3, [r1, #84]	; 0x54
 8008080:	e001      	b.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008082:	7dfb      	ldrb	r3, [r7, #23]
 8008084:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d008      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008092:	4b21      	ldr	r3, [pc, #132]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008096:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809e:	491e      	ldr	r1, [pc, #120]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d008      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80080b0:	4b19      	ldr	r3, [pc, #100]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080bc:	4916      	ldr	r1, [pc, #88]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00d      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080ce:	4b12      	ldr	r3, [pc, #72]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	4a11      	ldr	r2, [pc, #68]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080d8:	6113      	str	r3, [r2, #16]
 80080da:	4b0f      	ldr	r3, [pc, #60]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080dc:	691a      	ldr	r2, [r3, #16]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80080e4:	490c      	ldr	r1, [pc, #48]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	da08      	bge.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80080f2:	4b09      	ldr	r3, [pc, #36]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80080f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080fe:	4906      	ldr	r1, [pc, #24]	; (8008118 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008100:	4313      	orrs	r3, r2
 8008102:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008104:	7dbb      	ldrb	r3, [r7, #22]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	e000      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
}
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	58024400 	.word	0x58024400

0800811c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b090      	sub	sp, #64	; 0x40
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800812a:	d150      	bne.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800812c:	4ba1      	ldr	r3, [pc, #644]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800812e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008130:	f003 0307 	and.w	r3, r3, #7
 8008134:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	2b04      	cmp	r3, #4
 800813a:	d844      	bhi.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800813c:	a201      	add	r2, pc, #4	; (adr r2, 8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800813e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008142:	bf00      	nop
 8008144:	08008159 	.word	0x08008159
 8008148:	08008169 	.word	0x08008169
 800814c:	08008179 	.word	0x08008179
 8008150:	080081c1 	.word	0x080081c1
 8008154:	08008189 	.word	0x08008189
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800815c:	4618      	mov	r0, r3
 800815e:	f000 fd03 	bl	8008b68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008164:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008166:	e241      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008168:	f107 0318 	add.w	r3, r7, #24
 800816c:	4618      	mov	r0, r3
 800816e:	f000 fa63 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008176:	e239      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008178:	f107 030c 	add.w	r3, r7, #12
 800817c:	4618      	mov	r0, r3
 800817e:	f000 fba7 	bl	80088d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008186:	e231      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008188:	4b8a      	ldr	r3, [pc, #552]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800818a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800818c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008190:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008194:	2b00      	cmp	r3, #0
 8008196:	d102      	bne.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008198:	4b87      	ldr	r3, [pc, #540]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800819a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800819c:	e226      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800819e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081a4:	d102      	bne.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80081a6:	4b85      	ldr	r3, [pc, #532]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80081a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081aa:	e21f      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80081ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081b2:	d102      	bne.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80081b4:	4b82      	ldr	r3, [pc, #520]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80081b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081b8:	e218      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80081ba:	2300      	movs	r3, #0
 80081bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081be:	e215      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80081c0:	4b80      	ldr	r3, [pc, #512]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081c4:	e212      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081ca:	bf00      	nop
 80081cc:	e20e      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081d4:	d14f      	bne.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80081d6:	4b77      	ldr	r3, [pc, #476]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80081d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081da:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80081de:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	2b80      	cmp	r3, #128	; 0x80
 80081e4:	d01c      	beq.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80081e6:	2b80      	cmp	r3, #128	; 0x80
 80081e8:	d804      	bhi.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d008      	beq.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80081ee:	2b40      	cmp	r3, #64	; 0x40
 80081f0:	d00e      	beq.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80081f2:	e03c      	b.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80081f4:	2bc0      	cmp	r3, #192	; 0xc0
 80081f6:	d037      	beq.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80081f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081fc:	d018      	beq.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80081fe:	e036      	b.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008204:	4618      	mov	r0, r3
 8008206:	f000 fcaf 	bl	8008b68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800820a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800820e:	e1ed      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008210:	f107 0318 	add.w	r3, r7, #24
 8008214:	4618      	mov	r0, r3
 8008216:	f000 fa0f 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800821e:	e1e5      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008220:	f107 030c 	add.w	r3, r7, #12
 8008224:	4618      	mov	r0, r3
 8008226:	f000 fb53 	bl	80088d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800822e:	e1dd      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008230:	4b60      	ldr	r3, [pc, #384]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008238:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800823a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823c:	2b00      	cmp	r3, #0
 800823e:	d102      	bne.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008240:	4b5d      	ldr	r3, [pc, #372]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008242:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008244:	e1d2      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800824c:	d102      	bne.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800824e:	4b5b      	ldr	r3, [pc, #364]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008250:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008252:	e1cb      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800825a:	d102      	bne.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800825c:	4b58      	ldr	r3, [pc, #352]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800825e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008260:	e1c4      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008262:	2300      	movs	r3, #0
 8008264:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008266:	e1c1      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008268:	4b56      	ldr	r3, [pc, #344]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800826a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800826c:	e1be      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008272:	bf00      	nop
 8008274:	e1ba      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800827c:	d153      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800827e:	4b4d      	ldr	r3, [pc, #308]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008282:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008286:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800828e:	d01f      	beq.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008290:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008294:	d805      	bhi.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00a      	beq.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800829a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800829e:	d00f      	beq.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80082a0:	e03d      	b.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80082a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80082a6:	d037      	beq.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80082a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80082ac:	d018      	beq.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80082ae:	e036      	b.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 fc57 	bl	8008b68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082be:	e195      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082c0:	f107 0318 	add.w	r3, r7, #24
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 f9b7 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082ce:	e18d      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082d0:	f107 030c 	add.w	r3, r7, #12
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 fafb 	bl	80088d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082de:	e185      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80082e0:	4b34      	ldr	r3, [pc, #208]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082e8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80082ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d102      	bne.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80082f0:	4b31      	ldr	r3, [pc, #196]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80082f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80082f4:	e17a      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80082f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082fc:	d102      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80082fe:	4b2f      	ldr	r3, [pc, #188]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008300:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008302:	e173      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800830a:	d102      	bne.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800830c:	4b2c      	ldr	r3, [pc, #176]	; (80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800830e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008310:	e16c      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008312:	2300      	movs	r3, #0
 8008314:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008316:	e169      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008318:	4b2a      	ldr	r3, [pc, #168]	; (80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800831a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800831c:	e166      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800831e:	2300      	movs	r3, #0
 8008320:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008322:	bf00      	nop
 8008324:	e162      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800832c:	d15d      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800832e:	4b21      	ldr	r3, [pc, #132]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008332:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008336:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800833e:	d01f      	beq.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008344:	d805      	bhi.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00a      	beq.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800834a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800834e:	d00f      	beq.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008350:	e047      	b.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008352:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008356:	d041      	beq.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8008358:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800835c:	d018      	beq.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800835e:	e040      	b.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008364:	4618      	mov	r0, r3
 8008366:	f000 fbff 	bl	8008b68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800836a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800836e:	e13d      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008370:	f107 0318 	add.w	r3, r7, #24
 8008374:	4618      	mov	r0, r3
 8008376:	f000 f95f 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800837e:	e135      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008380:	f107 030c 	add.w	r3, r7, #12
 8008384:	4618      	mov	r0, r3
 8008386:	f000 faa3 	bl	80088d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800838e:	e12d      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008390:	4b08      	ldr	r3, [pc, #32]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008394:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008398:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800839a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839c:	2b00      	cmp	r3, #0
 800839e:	d102      	bne.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80083a0:	4b05      	ldr	r3, [pc, #20]	; (80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80083a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80083a4:	e122      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80083a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083ac:	d10c      	bne.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80083ae:	4b03      	ldr	r3, [pc, #12]	; (80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80083b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083b2:	e11b      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80083b4:	58024400 	.word	0x58024400
 80083b8:	03d09000 	.word	0x03d09000
 80083bc:	003d0900 	.word	0x003d0900
 80083c0:	017d7840 	.word	0x017d7840
 80083c4:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80083c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ce:	d102      	bne.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80083d0:	4b89      	ldr	r3, [pc, #548]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80083d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083d4:	e10a      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80083d6:	2300      	movs	r3, #0
 80083d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083da:	e107      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80083dc:	4b87      	ldr	r3, [pc, #540]	; (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80083de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083e0:	e104      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083e6:	bf00      	nop
 80083e8:	e100      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083f0:	d153      	bne.n	800849a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80083f2:	4b83      	ldr	r3, [pc, #524]	; (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80083f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083f6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80083fa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80083fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008402:	d01f      	beq.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008408:	d805      	bhi.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00a      	beq.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800840e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008412:	d00f      	beq.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008414:	e03d      	b.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008416:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800841a:	d037      	beq.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800841c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008420:	d018      	beq.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008422:	e036      	b.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008428:	4618      	mov	r0, r3
 800842a:	f000 fb9d 	bl	8008b68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800842e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008430:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008432:	e0db      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008434:	f107 0318 	add.w	r3, r7, #24
 8008438:	4618      	mov	r0, r3
 800843a:	f000 f8fd 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008442:	e0d3      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008444:	f107 030c 	add.w	r3, r7, #12
 8008448:	4618      	mov	r0, r3
 800844a:	f000 fa41 	bl	80088d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008452:	e0cb      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008454:	4b6a      	ldr	r3, [pc, #424]	; (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008458:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800845c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800845e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008460:	2b00      	cmp	r3, #0
 8008462:	d102      	bne.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008464:	4b67      	ldr	r3, [pc, #412]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008466:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008468:	e0c0      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800846a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008470:	d102      	bne.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8008472:	4b65      	ldr	r3, [pc, #404]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008474:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008476:	e0b9      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800847a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800847e:	d102      	bne.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8008480:	4b5d      	ldr	r3, [pc, #372]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008482:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008484:	e0b2      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800848a:	e0af      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800848c:	4b5b      	ldr	r3, [pc, #364]	; (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800848e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008490:	e0ac      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008496:	bf00      	nop
 8008498:	e0a8      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80084a0:	d13d      	bne.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80084a2:	4b57      	ldr	r3, [pc, #348]	; (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80084a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80084aa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80084ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084b2:	d00c      	beq.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80084b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084b8:	d011      	beq.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d12b      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084be:	f107 0318 	add.w	r3, r7, #24
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 f8b8 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084cc:	e08e      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084ce:	f107 030c 	add.w	r3, r7, #12
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 f9fc 	bl	80088d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084dc:	e086      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80084de:	4b48      	ldr	r3, [pc, #288]	; (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80084e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084e6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80084e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d102      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80084ee:	4b45      	ldr	r3, [pc, #276]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80084f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80084f2:	e07b      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80084f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084fa:	d102      	bne.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80084fc:	4b42      	ldr	r3, [pc, #264]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80084fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008500:	e074      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008508:	d102      	bne.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800850a:	4b3b      	ldr	r3, [pc, #236]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800850c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800850e:	e06d      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008514:	e06a      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008516:	2300      	movs	r3, #0
 8008518:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800851a:	bf00      	nop
 800851c:	e066      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008524:	d11f      	bne.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008526:	4b36      	ldr	r3, [pc, #216]	; (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800852a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800852e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008532:	2b00      	cmp	r3, #0
 8008534:	d003      	beq.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800853a:	d008      	beq.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800853c:	e00f      	b.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800853e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008542:	4618      	mov	r0, r3
 8008544:	f000 fb10 	bl	8008b68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800854c:	e04e      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800854e:	f107 0318 	add.w	r3, r7, #24
 8008552:	4618      	mov	r0, r3
 8008554:	f000 f870 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800855c:	e046      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008562:	bf00      	nop
 8008564:	e042      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800856c:	d13c      	bne.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800856e:	4b24      	ldr	r3, [pc, #144]	; (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008572:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008576:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800857e:	d01e      	beq.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8008580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008584:	d805      	bhi.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00d      	beq.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800858a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800858e:	d00e      	beq.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008590:	e026      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8008592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008596:	d01d      	beq.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800859c:	d01d      	beq.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800859e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085a2:	d014      	beq.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80085a4:	e01c      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80085a6:	f000 f831 	bl	800860c <HAL_RCCEx_GetD3PCLK1Freq>
 80085aa:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80085ac:	e01e      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085ae:	f107 0318 	add.w	r3, r7, #24
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 f840 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085bc:	e016      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085be:	f107 030c 	add.w	r3, r7, #12
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 f984 	bl	80088d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085cc:	e00e      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80085ce:	4b0d      	ldr	r3, [pc, #52]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80085d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085d2:	e00b      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80085d4:	4b0c      	ldr	r3, [pc, #48]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80085d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085d8:	e008      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80085da:	4b07      	ldr	r3, [pc, #28]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80085dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085de:	e005      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80085e0:	2300      	movs	r3, #0
 80085e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085e4:	bf00      	nop
 80085e6:	e001      	b.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80085e8:	2300      	movs	r3, #0
 80085ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80085ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3740      	adds	r7, #64	; 0x40
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	017d7840 	.word	0x017d7840
 80085fc:	00bb8000 	.word	0x00bb8000
 8008600:	58024400 	.word	0x58024400
 8008604:	03d09000 	.word	0x03d09000
 8008608:	003d0900 	.word	0x003d0900

0800860c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008610:	f7fe fe4a 	bl	80072a8 <HAL_RCC_GetHCLKFreq>
 8008614:	4601      	mov	r1, r0
 8008616:	4b06      	ldr	r3, [pc, #24]	; (8008630 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	091b      	lsrs	r3, r3, #4
 800861c:	f003 0307 	and.w	r3, r3, #7
 8008620:	4a04      	ldr	r2, [pc, #16]	; (8008634 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008622:	5cd3      	ldrb	r3, [r2, r3]
 8008624:	f003 031f 	and.w	r3, r3, #31
 8008628:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800862c:	4618      	mov	r0, r3
 800862e:	bd80      	pop	{r7, pc}
 8008630:	58024400 	.word	0x58024400
 8008634:	0800dfd0 	.word	0x0800dfd0

08008638 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008638:	b480      	push	{r7}
 800863a:	b089      	sub	sp, #36	; 0x24
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008640:	4b9d      	ldr	r3, [pc, #628]	; (80088b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008644:	f003 0303 	and.w	r3, r3, #3
 8008648:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800864a:	4b9b      	ldr	r3, [pc, #620]	; (80088b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800864c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864e:	0b1b      	lsrs	r3, r3, #12
 8008650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008654:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008656:	4b98      	ldr	r3, [pc, #608]	; (80088b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865a:	091b      	lsrs	r3, r3, #4
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008662:	4b95      	ldr	r3, [pc, #596]	; (80088b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008666:	08db      	lsrs	r3, r3, #3
 8008668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	fb02 f303 	mul.w	r3, r2, r3
 8008672:	ee07 3a90 	vmov	s15, r3
 8008676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 810a 	beq.w	800889a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d05a      	beq.n	8008742 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800868c:	2b01      	cmp	r3, #1
 800868e:	d302      	bcc.n	8008696 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008690:	2b02      	cmp	r3, #2
 8008692:	d078      	beq.n	8008786 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008694:	e099      	b.n	80087ca <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008696:	4b88      	ldr	r3, [pc, #544]	; (80088b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0320 	and.w	r3, r3, #32
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d02d      	beq.n	80086fe <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086a2:	4b85      	ldr	r3, [pc, #532]	; (80088b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	08db      	lsrs	r3, r3, #3
 80086a8:	f003 0303 	and.w	r3, r3, #3
 80086ac:	4a83      	ldr	r2, [pc, #524]	; (80088bc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80086ae:	fa22 f303 	lsr.w	r3, r2, r3
 80086b2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	ee07 3a90 	vmov	s15, r3
 80086ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	ee07 3a90 	vmov	s15, r3
 80086c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086cc:	4b7a      	ldr	r3, [pc, #488]	; (80088b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80086ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d4:	ee07 3a90 	vmov	s15, r3
 80086d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80086e0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80088c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80086e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086f8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80086fc:	e087      	b.n	800880e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	ee07 3a90 	vmov	s15, r3
 8008704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008708:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80088c4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800870c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008710:	4b69      	ldr	r3, [pc, #420]	; (80088b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008718:	ee07 3a90 	vmov	s15, r3
 800871c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008720:	ed97 6a03 	vldr	s12, [r7, #12]
 8008724:	eddf 5a66 	vldr	s11, [pc, #408]	; 80088c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008728:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800872c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008730:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008734:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800873c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008740:	e065      	b.n	800880e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	ee07 3a90 	vmov	s15, r3
 8008748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800874c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008750:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008754:	4b58      	ldr	r3, [pc, #352]	; (80088b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800875c:	ee07 3a90 	vmov	s15, r3
 8008760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008764:	ed97 6a03 	vldr	s12, [r7, #12]
 8008768:	eddf 5a55 	vldr	s11, [pc, #340]	; 80088c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800876c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008770:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008774:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008778:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800877c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008780:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008784:	e043      	b.n	800880e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	ee07 3a90 	vmov	s15, r3
 800878c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008790:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008794:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008798:	4b47      	ldr	r3, [pc, #284]	; (80088b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800879a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a0:	ee07 3a90 	vmov	s15, r3
 80087a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 80088c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80087b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087c8:	e021      	b.n	800880e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	ee07 3a90 	vmov	s15, r3
 80087d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80087d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087dc:	4b36      	ldr	r3, [pc, #216]	; (80088b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80087de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e4:	ee07 3a90 	vmov	s15, r3
 80087e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80087f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80088c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80087f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008800:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008808:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800880c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800880e:	4b2a      	ldr	r3, [pc, #168]	; (80088b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008812:	0a5b      	lsrs	r3, r3, #9
 8008814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008818:	ee07 3a90 	vmov	s15, r3
 800881c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008820:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008824:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008828:	edd7 6a07 	vldr	s13, [r7, #28]
 800882c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008834:	ee17 2a90 	vmov	r2, s15
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800883c:	4b1e      	ldr	r3, [pc, #120]	; (80088b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800883e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008840:	0c1b      	lsrs	r3, r3, #16
 8008842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008846:	ee07 3a90 	vmov	s15, r3
 800884a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800884e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008852:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008856:	edd7 6a07 	vldr	s13, [r7, #28]
 800885a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800885e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008862:	ee17 2a90 	vmov	r2, s15
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800886a:	4b13      	ldr	r3, [pc, #76]	; (80088b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800886c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886e:	0e1b      	lsrs	r3, r3, #24
 8008870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008874:	ee07 3a90 	vmov	s15, r3
 8008878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008880:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008884:	edd7 6a07 	vldr	s13, [r7, #28]
 8008888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800888c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008890:	ee17 2a90 	vmov	r2, s15
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008898:	e008      	b.n	80088ac <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	609a      	str	r2, [r3, #8]
}
 80088ac:	bf00      	nop
 80088ae:	3724      	adds	r7, #36	; 0x24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr
 80088b8:	58024400 	.word	0x58024400
 80088bc:	03d09000 	.word	0x03d09000
 80088c0:	46000000 	.word	0x46000000
 80088c4:	4c742400 	.word	0x4c742400
 80088c8:	4a742400 	.word	0x4a742400
 80088cc:	4bbebc20 	.word	0x4bbebc20

080088d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b089      	sub	sp, #36	; 0x24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088d8:	4b9d      	ldr	r3, [pc, #628]	; (8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088dc:	f003 0303 	and.w	r3, r3, #3
 80088e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80088e2:	4b9b      	ldr	r3, [pc, #620]	; (8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e6:	0d1b      	lsrs	r3, r3, #20
 80088e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80088ee:	4b98      	ldr	r3, [pc, #608]	; (8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f2:	0a1b      	lsrs	r3, r3, #8
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80088fa:	4b95      	ldr	r3, [pc, #596]	; (8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088fe:	08db      	lsrs	r3, r3, #3
 8008900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	fb02 f303 	mul.w	r3, r2, r3
 800890a:	ee07 3a90 	vmov	s15, r3
 800890e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008912:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2b00      	cmp	r3, #0
 800891a:	f000 810a 	beq.w	8008b32 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d05a      	beq.n	80089da <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008924:	2b01      	cmp	r3, #1
 8008926:	d302      	bcc.n	800892e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008928:	2b02      	cmp	r3, #2
 800892a:	d078      	beq.n	8008a1e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800892c:	e099      	b.n	8008a62 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800892e:	4b88      	ldr	r3, [pc, #544]	; (8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0320 	and.w	r3, r3, #32
 8008936:	2b00      	cmp	r3, #0
 8008938:	d02d      	beq.n	8008996 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800893a:	4b85      	ldr	r3, [pc, #532]	; (8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	08db      	lsrs	r3, r3, #3
 8008940:	f003 0303 	and.w	r3, r3, #3
 8008944:	4a83      	ldr	r2, [pc, #524]	; (8008b54 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8008946:	fa22 f303 	lsr.w	r3, r2, r3
 800894a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	ee07 3a90 	vmov	s15, r3
 8008952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	ee07 3a90 	vmov	s15, r3
 800895c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008960:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008964:	4b7a      	ldr	r3, [pc, #488]	; (8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800896c:	ee07 3a90 	vmov	s15, r3
 8008970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008974:	ed97 6a03 	vldr	s12, [r7, #12]
 8008978:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008b58 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800897c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008980:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008984:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008988:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800898c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008990:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008994:	e087      	b.n	8008aa6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	ee07 3a90 	vmov	s15, r3
 800899c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80089a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089a8:	4b69      	ldr	r3, [pc, #420]	; (8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80089aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089b0:	ee07 3a90 	vmov	s15, r3
 80089b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80089bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008b58 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80089c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089d8:	e065      	b.n	8008aa6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	ee07 3a90 	vmov	s15, r3
 80089e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80089e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ec:	4b58      	ldr	r3, [pc, #352]	; (8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80089ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f4:	ee07 3a90 	vmov	s15, r3
 80089f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a00:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008b58 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008a04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a1c:	e043      	b.n	8008aa6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	ee07 3a90 	vmov	s15, r3
 8008a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a28:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008b64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008a2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a30:	4b47      	ldr	r3, [pc, #284]	; (8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a38:	ee07 3a90 	vmov	s15, r3
 8008a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a40:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a44:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008b58 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008a48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a60:	e021      	b.n	8008aa6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	ee07 3a90 	vmov	s15, r3
 8008a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a6c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008a70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a74:	4b36      	ldr	r3, [pc, #216]	; (8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7c:	ee07 3a90 	vmov	s15, r3
 8008a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a84:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a88:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008b58 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008a8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aa0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008aa4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008aa6:	4b2a      	ldr	r3, [pc, #168]	; (8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aaa:	0a5b      	lsrs	r3, r3, #9
 8008aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ab0:	ee07 3a90 	vmov	s15, r3
 8008ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008abc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ac0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008acc:	ee17 2a90 	vmov	r2, s15
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008ad4:	4b1e      	ldr	r3, [pc, #120]	; (8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad8:	0c1b      	lsrs	r3, r3, #16
 8008ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008aee:	edd7 6a07 	vldr	s13, [r7, #28]
 8008af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008afa:	ee17 2a90 	vmov	r2, s15
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008b02:	4b13      	ldr	r3, [pc, #76]	; (8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b06:	0e1b      	lsrs	r3, r3, #24
 8008b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b0c:	ee07 3a90 	vmov	s15, r3
 8008b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b28:	ee17 2a90 	vmov	r2, s15
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b30:	e008      	b.n	8008b44 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	609a      	str	r2, [r3, #8]
}
 8008b44:	bf00      	nop
 8008b46:	3724      	adds	r7, #36	; 0x24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	58024400 	.word	0x58024400
 8008b54:	03d09000 	.word	0x03d09000
 8008b58:	46000000 	.word	0x46000000
 8008b5c:	4c742400 	.word	0x4c742400
 8008b60:	4a742400 	.word	0x4a742400
 8008b64:	4bbebc20 	.word	0x4bbebc20

08008b68 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b089      	sub	sp, #36	; 0x24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b70:	4b9d      	ldr	r3, [pc, #628]	; (8008de8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b74:	f003 0303 	and.w	r3, r3, #3
 8008b78:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008b7a:	4b9b      	ldr	r3, [pc, #620]	; (8008de8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7e:	091b      	lsrs	r3, r3, #4
 8008b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b84:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008b86:	4b98      	ldr	r3, [pc, #608]	; (8008de8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008b90:	4b95      	ldr	r3, [pc, #596]	; (8008de8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b94:	08db      	lsrs	r3, r3, #3
 8008b96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	fb02 f303 	mul.w	r3, r2, r3
 8008ba0:	ee07 3a90 	vmov	s15, r3
 8008ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 810a 	beq.w	8008dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d05a      	beq.n	8008c70 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d302      	bcc.n	8008bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d078      	beq.n	8008cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008bc2:	e099      	b.n	8008cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bc4:	4b88      	ldr	r3, [pc, #544]	; (8008de8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0320 	and.w	r3, r3, #32
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d02d      	beq.n	8008c2c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bd0:	4b85      	ldr	r3, [pc, #532]	; (8008de8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	08db      	lsrs	r3, r3, #3
 8008bd6:	f003 0303 	and.w	r3, r3, #3
 8008bda:	4a84      	ldr	r2, [pc, #528]	; (8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8008be0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	ee07 3a90 	vmov	s15, r3
 8008be8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	ee07 3a90 	vmov	s15, r3
 8008bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bfa:	4b7b      	ldr	r3, [pc, #492]	; (8008de8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c02:	ee07 3a90 	vmov	s15, r3
 8008c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008df0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008c2a:	e087      	b.n	8008d3c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	ee07 3a90 	vmov	s15, r3
 8008c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008df4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8008c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c3e:	4b6a      	ldr	r3, [pc, #424]	; (8008de8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c46:	ee07 3a90 	vmov	s15, r3
 8008c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008df0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c6e:	e065      	b.n	8008d3c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	ee07 3a90 	vmov	s15, r3
 8008c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008df8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c82:	4b59      	ldr	r3, [pc, #356]	; (8008de8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c8a:	ee07 3a90 	vmov	s15, r3
 8008c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008df0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cb2:	e043      	b.n	8008d3c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	ee07 3a90 	vmov	s15, r3
 8008cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008dfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cc6:	4b48      	ldr	r3, [pc, #288]	; (8008de8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cce:	ee07 3a90 	vmov	s15, r3
 8008cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cda:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008df0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cf6:	e021      	b.n	8008d3c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	ee07 3a90 	vmov	s15, r3
 8008cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008df8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d0a:	4b37      	ldr	r3, [pc, #220]	; (8008de8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d12:	ee07 3a90 	vmov	s15, r3
 8008d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008df0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d3a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008d3c:	4b2a      	ldr	r3, [pc, #168]	; (8008de8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d40:	0a5b      	lsrs	r3, r3, #9
 8008d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d46:	ee07 3a90 	vmov	s15, r3
 8008d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d56:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d62:	ee17 2a90 	vmov	r2, s15
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008d6a:	4b1f      	ldr	r3, [pc, #124]	; (8008de8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6e:	0c1b      	lsrs	r3, r3, #16
 8008d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d74:	ee07 3a90 	vmov	s15, r3
 8008d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d84:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d90:	ee17 2a90 	vmov	r2, s15
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008d98:	4b13      	ldr	r3, [pc, #76]	; (8008de8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9c:	0e1b      	lsrs	r3, r3, #24
 8008d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008da2:	ee07 3a90 	vmov	s15, r3
 8008da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008daa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008db2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dbe:	ee17 2a90 	vmov	r2, s15
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008dc6:	e008      	b.n	8008dda <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	609a      	str	r2, [r3, #8]
}
 8008dda:	bf00      	nop
 8008ddc:	3724      	adds	r7, #36	; 0x24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	58024400 	.word	0x58024400
 8008dec:	03d09000 	.word	0x03d09000
 8008df0:	46000000 	.word	0x46000000
 8008df4:	4c742400 	.word	0x4c742400
 8008df8:	4a742400 	.word	0x4a742400
 8008dfc:	4bbebc20 	.word	0x4bbebc20

08008e00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e0e:	4b53      	ldr	r3, [pc, #332]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e12:	f003 0303 	and.w	r3, r3, #3
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	d101      	bne.n	8008e1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e099      	b.n	8008f52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e1e:	4b4f      	ldr	r3, [pc, #316]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a4e      	ldr	r2, [pc, #312]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008e24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e2a:	f7f9 fb21 	bl	8002470 <HAL_GetTick>
 8008e2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e30:	e008      	b.n	8008e44 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008e32:	f7f9 fb1d 	bl	8002470 <HAL_GetTick>
 8008e36:	4602      	mov	r2, r0
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d901      	bls.n	8008e44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e086      	b.n	8008f52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e44:	4b45      	ldr	r3, [pc, #276]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1f0      	bne.n	8008e32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008e50:	4b42      	ldr	r3, [pc, #264]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	031b      	lsls	r3, r3, #12
 8008e5e:	493f      	ldr	r1, [pc, #252]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008e60:	4313      	orrs	r3, r2
 8008e62:	628b      	str	r3, [r1, #40]	; 0x28
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	3b01      	subs	r3, #1
 8008e74:	025b      	lsls	r3, r3, #9
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	041b      	lsls	r3, r3, #16
 8008e82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e86:	431a      	orrs	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	061b      	lsls	r3, r3, #24
 8008e90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e94:	4931      	ldr	r1, [pc, #196]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008e96:	4313      	orrs	r3, r2
 8008e98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008e9a:	4b30      	ldr	r3, [pc, #192]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	492d      	ldr	r1, [pc, #180]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008eac:	4b2b      	ldr	r3, [pc, #172]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb0:	f023 0220 	bic.w	r2, r3, #32
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	4928      	ldr	r1, [pc, #160]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008ebe:	4b27      	ldr	r3, [pc, #156]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec2:	4a26      	ldr	r2, [pc, #152]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008ec4:	f023 0310 	bic.w	r3, r3, #16
 8008ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008eca:	4b24      	ldr	r3, [pc, #144]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008ecc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ece:	4b24      	ldr	r3, [pc, #144]	; (8008f60 <RCCEx_PLL2_Config+0x160>)
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	69d2      	ldr	r2, [r2, #28]
 8008ed6:	00d2      	lsls	r2, r2, #3
 8008ed8:	4920      	ldr	r1, [pc, #128]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008eda:	4313      	orrs	r3, r2
 8008edc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008ede:	4b1f      	ldr	r3, [pc, #124]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee2:	4a1e      	ldr	r2, [pc, #120]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008ee4:	f043 0310 	orr.w	r3, r3, #16
 8008ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d106      	bne.n	8008efe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ef0:	4b1a      	ldr	r3, [pc, #104]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef4:	4a19      	ldr	r2, [pc, #100]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008ef6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008efa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008efc:	e00f      	b.n	8008f1e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d106      	bne.n	8008f12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008f04:	4b15      	ldr	r3, [pc, #84]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f08:	4a14      	ldr	r2, [pc, #80]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f10:	e005      	b.n	8008f1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f12:	4b12      	ldr	r3, [pc, #72]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f16:	4a11      	ldr	r2, [pc, #68]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008f18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f1e:	4b0f      	ldr	r3, [pc, #60]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a0e      	ldr	r2, [pc, #56]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008f24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f2a:	f7f9 faa1 	bl	8002470 <HAL_GetTick>
 8008f2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f30:	e008      	b.n	8008f44 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008f32:	f7f9 fa9d 	bl	8002470 <HAL_GetTick>
 8008f36:	4602      	mov	r2, r0
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d901      	bls.n	8008f44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f40:	2303      	movs	r3, #3
 8008f42:	e006      	b.n	8008f52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f44:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <RCCEx_PLL2_Config+0x15c>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d0f0      	beq.n	8008f32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	58024400 	.word	0x58024400
 8008f60:	ffff0007 	.word	0xffff0007

08008f64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f72:	4b53      	ldr	r3, [pc, #332]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 8008f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f76:	f003 0303 	and.w	r3, r3, #3
 8008f7a:	2b03      	cmp	r3, #3
 8008f7c:	d101      	bne.n	8008f82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e099      	b.n	80090b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008f82:	4b4f      	ldr	r3, [pc, #316]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a4e      	ldr	r2, [pc, #312]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 8008f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f8e:	f7f9 fa6f 	bl	8002470 <HAL_GetTick>
 8008f92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f94:	e008      	b.n	8008fa8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008f96:	f7f9 fa6b 	bl	8002470 <HAL_GetTick>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d901      	bls.n	8008fa8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e086      	b.n	80090b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fa8:	4b45      	ldr	r3, [pc, #276]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1f0      	bne.n	8008f96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008fb4:	4b42      	ldr	r3, [pc, #264]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 8008fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	051b      	lsls	r3, r3, #20
 8008fc2:	493f      	ldr	r1, [pc, #252]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	628b      	str	r3, [r1, #40]	; 0x28
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	025b      	lsls	r3, r3, #9
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	041b      	lsls	r3, r3, #16
 8008fe6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008fea:	431a      	orrs	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	061b      	lsls	r3, r3, #24
 8008ff4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ff8:	4931      	ldr	r1, [pc, #196]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008ffe:	4b30      	ldr	r3, [pc, #192]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 8009000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009002:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	492d      	ldr	r1, [pc, #180]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 800900c:	4313      	orrs	r3, r2
 800900e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009010:	4b2b      	ldr	r3, [pc, #172]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 8009012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009014:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	4928      	ldr	r1, [pc, #160]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 800901e:	4313      	orrs	r3, r2
 8009020:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009022:	4b27      	ldr	r3, [pc, #156]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 8009024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009026:	4a26      	ldr	r2, [pc, #152]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 8009028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800902c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800902e:	4b24      	ldr	r3, [pc, #144]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 8009030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009032:	4b24      	ldr	r3, [pc, #144]	; (80090c4 <RCCEx_PLL3_Config+0x160>)
 8009034:	4013      	ands	r3, r2
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	69d2      	ldr	r2, [r2, #28]
 800903a:	00d2      	lsls	r2, r2, #3
 800903c:	4920      	ldr	r1, [pc, #128]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 800903e:	4313      	orrs	r3, r2
 8009040:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009042:	4b1f      	ldr	r3, [pc, #124]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 8009044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009046:	4a1e      	ldr	r2, [pc, #120]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 8009048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800904c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d106      	bne.n	8009062 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009054:	4b1a      	ldr	r3, [pc, #104]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 8009056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009058:	4a19      	ldr	r2, [pc, #100]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 800905a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800905e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009060:	e00f      	b.n	8009082 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d106      	bne.n	8009076 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009068:	4b15      	ldr	r3, [pc, #84]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 800906a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906c:	4a14      	ldr	r2, [pc, #80]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 800906e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009072:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009074:	e005      	b.n	8009082 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009076:	4b12      	ldr	r3, [pc, #72]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 8009078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907a:	4a11      	ldr	r2, [pc, #68]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 800907c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009080:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009082:	4b0f      	ldr	r3, [pc, #60]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a0e      	ldr	r2, [pc, #56]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 8009088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800908c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800908e:	f7f9 f9ef 	bl	8002470 <HAL_GetTick>
 8009092:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009094:	e008      	b.n	80090a8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009096:	f7f9 f9eb 	bl	8002470 <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d901      	bls.n	80090a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e006      	b.n	80090b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090a8:	4b05      	ldr	r3, [pc, #20]	; (80090c0 <RCCEx_PLL3_Config+0x15c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d0f0      	beq.n	8009096 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	58024400 	.word	0x58024400
 80090c4:	ffff0007 	.word	0xffff0007

080090c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d101      	bne.n	80090da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e01d      	b.n	8009116 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d106      	bne.n	80090f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7f8 fe28 	bl	8001d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2202      	movs	r2, #2
 80090f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	3304      	adds	r3, #4
 8009104:	4619      	mov	r1, r3
 8009106:	4610      	mov	r0, r2
 8009108:	f000 f97c 	bl	8009404 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
	...

08009120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68da      	ldr	r2, [r3, #12]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f042 0201 	orr.w	r2, r2, #1
 8009136:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689a      	ldr	r2, [r3, #8]
 800913e:	4b0c      	ldr	r3, [pc, #48]	; (8009170 <HAL_TIM_Base_Start_IT+0x50>)
 8009140:	4013      	ands	r3, r2
 8009142:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2b06      	cmp	r3, #6
 8009148:	d00b      	beq.n	8009162 <HAL_TIM_Base_Start_IT+0x42>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009150:	d007      	beq.n	8009162 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f042 0201 	orr.w	r2, r2, #1
 8009160:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	00010007 	.word	0x00010007

08009174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	f003 0302 	and.w	r3, r3, #2
 8009186:	2b02      	cmp	r3, #2
 8009188:	d122      	bne.n	80091d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f003 0302 	and.w	r3, r3, #2
 8009194:	2b02      	cmp	r3, #2
 8009196:	d11b      	bne.n	80091d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f06f 0202 	mvn.w	r2, #2
 80091a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	f003 0303 	and.w	r3, r3, #3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d003      	beq.n	80091be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f905 	bl	80093c6 <HAL_TIM_IC_CaptureCallback>
 80091bc:	e005      	b.n	80091ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f8f7 	bl	80093b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f908 	bl	80093da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	f003 0304 	and.w	r3, r3, #4
 80091da:	2b04      	cmp	r3, #4
 80091dc:	d122      	bne.n	8009224 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	f003 0304 	and.w	r3, r3, #4
 80091e8:	2b04      	cmp	r3, #4
 80091ea:	d11b      	bne.n	8009224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f06f 0204 	mvn.w	r2, #4
 80091f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2202      	movs	r2, #2
 80091fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009206:	2b00      	cmp	r3, #0
 8009208:	d003      	beq.n	8009212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f8db 	bl	80093c6 <HAL_TIM_IC_CaptureCallback>
 8009210:	e005      	b.n	800921e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f8cd 	bl	80093b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f8de 	bl	80093da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	f003 0308 	and.w	r3, r3, #8
 800922e:	2b08      	cmp	r3, #8
 8009230:	d122      	bne.n	8009278 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	f003 0308 	and.w	r3, r3, #8
 800923c:	2b08      	cmp	r3, #8
 800923e:	d11b      	bne.n	8009278 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f06f 0208 	mvn.w	r2, #8
 8009248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2204      	movs	r2, #4
 800924e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	69db      	ldr	r3, [r3, #28]
 8009256:	f003 0303 	and.w	r3, r3, #3
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f8b1 	bl	80093c6 <HAL_TIM_IC_CaptureCallback>
 8009264:	e005      	b.n	8009272 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f8a3 	bl	80093b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f8b4 	bl	80093da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	f003 0310 	and.w	r3, r3, #16
 8009282:	2b10      	cmp	r3, #16
 8009284:	d122      	bne.n	80092cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	f003 0310 	and.w	r3, r3, #16
 8009290:	2b10      	cmp	r3, #16
 8009292:	d11b      	bne.n	80092cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f06f 0210 	mvn.w	r2, #16
 800929c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2208      	movs	r2, #8
 80092a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d003      	beq.n	80092ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f887 	bl	80093c6 <HAL_TIM_IC_CaptureCallback>
 80092b8:	e005      	b.n	80092c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f879 	bl	80093b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f88a 	bl	80093da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d10e      	bne.n	80092f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	f003 0301 	and.w	r3, r3, #1
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d107      	bne.n	80092f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f06f 0201 	mvn.w	r2, #1
 80092f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7f7 fefe 	bl	80010f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009302:	2b80      	cmp	r3, #128	; 0x80
 8009304:	d10e      	bne.n	8009324 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009310:	2b80      	cmp	r3, #128	; 0x80
 8009312:	d107      	bne.n	8009324 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800931c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f99c 	bl	800965c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800932e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009332:	d10e      	bne.n	8009352 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800933e:	2b80      	cmp	r3, #128	; 0x80
 8009340:	d107      	bne.n	8009352 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800934a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f98f 	bl	8009670 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935c:	2b40      	cmp	r3, #64	; 0x40
 800935e:	d10e      	bne.n	800937e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936a:	2b40      	cmp	r3, #64	; 0x40
 800936c:	d107      	bne.n	800937e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 f838 	bl	80093ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	f003 0320 	and.w	r3, r3, #32
 8009388:	2b20      	cmp	r3, #32
 800938a:	d10e      	bne.n	80093aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	f003 0320 	and.w	r3, r3, #32
 8009396:	2b20      	cmp	r3, #32
 8009398:	d107      	bne.n	80093aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f06f 0220 	mvn.w	r2, #32
 80093a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f94f 	bl	8009648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093aa:	bf00      	nop
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b083      	sub	sp, #12
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093ba:	bf00      	nop
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b083      	sub	sp, #12
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093ce:	bf00      	nop
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093da:	b480      	push	{r7}
 80093dc:	b083      	sub	sp, #12
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093e2:	bf00      	nop
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b083      	sub	sp, #12
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093f6:	bf00      	nop
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr
	...

08009404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a40      	ldr	r2, [pc, #256]	; (8009518 <TIM_Base_SetConfig+0x114>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d013      	beq.n	8009444 <TIM_Base_SetConfig+0x40>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009422:	d00f      	beq.n	8009444 <TIM_Base_SetConfig+0x40>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a3d      	ldr	r2, [pc, #244]	; (800951c <TIM_Base_SetConfig+0x118>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d00b      	beq.n	8009444 <TIM_Base_SetConfig+0x40>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a3c      	ldr	r2, [pc, #240]	; (8009520 <TIM_Base_SetConfig+0x11c>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d007      	beq.n	8009444 <TIM_Base_SetConfig+0x40>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a3b      	ldr	r2, [pc, #236]	; (8009524 <TIM_Base_SetConfig+0x120>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d003      	beq.n	8009444 <TIM_Base_SetConfig+0x40>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a3a      	ldr	r2, [pc, #232]	; (8009528 <TIM_Base_SetConfig+0x124>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d108      	bne.n	8009456 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800944a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	4313      	orrs	r3, r2
 8009454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a2f      	ldr	r2, [pc, #188]	; (8009518 <TIM_Base_SetConfig+0x114>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d01f      	beq.n	800949e <TIM_Base_SetConfig+0x9a>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009464:	d01b      	beq.n	800949e <TIM_Base_SetConfig+0x9a>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a2c      	ldr	r2, [pc, #176]	; (800951c <TIM_Base_SetConfig+0x118>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d017      	beq.n	800949e <TIM_Base_SetConfig+0x9a>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a2b      	ldr	r2, [pc, #172]	; (8009520 <TIM_Base_SetConfig+0x11c>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d013      	beq.n	800949e <TIM_Base_SetConfig+0x9a>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a2a      	ldr	r2, [pc, #168]	; (8009524 <TIM_Base_SetConfig+0x120>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d00f      	beq.n	800949e <TIM_Base_SetConfig+0x9a>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a29      	ldr	r2, [pc, #164]	; (8009528 <TIM_Base_SetConfig+0x124>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d00b      	beq.n	800949e <TIM_Base_SetConfig+0x9a>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a28      	ldr	r2, [pc, #160]	; (800952c <TIM_Base_SetConfig+0x128>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d007      	beq.n	800949e <TIM_Base_SetConfig+0x9a>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4a27      	ldr	r2, [pc, #156]	; (8009530 <TIM_Base_SetConfig+0x12c>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d003      	beq.n	800949e <TIM_Base_SetConfig+0x9a>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a26      	ldr	r2, [pc, #152]	; (8009534 <TIM_Base_SetConfig+0x130>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d108      	bne.n	80094b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a10      	ldr	r2, [pc, #64]	; (8009518 <TIM_Base_SetConfig+0x114>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d00f      	beq.n	80094fc <TIM_Base_SetConfig+0xf8>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a12      	ldr	r2, [pc, #72]	; (8009528 <TIM_Base_SetConfig+0x124>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d00b      	beq.n	80094fc <TIM_Base_SetConfig+0xf8>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a11      	ldr	r2, [pc, #68]	; (800952c <TIM_Base_SetConfig+0x128>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d007      	beq.n	80094fc <TIM_Base_SetConfig+0xf8>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a10      	ldr	r2, [pc, #64]	; (8009530 <TIM_Base_SetConfig+0x12c>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d003      	beq.n	80094fc <TIM_Base_SetConfig+0xf8>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a0f      	ldr	r2, [pc, #60]	; (8009534 <TIM_Base_SetConfig+0x130>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d103      	bne.n	8009504 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	691a      	ldr	r2, [r3, #16]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	615a      	str	r2, [r3, #20]
}
 800950a:	bf00      	nop
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	40010000 	.word	0x40010000
 800951c:	40000400 	.word	0x40000400
 8009520:	40000800 	.word	0x40000800
 8009524:	40000c00 	.word	0x40000c00
 8009528:	40010400 	.word	0x40010400
 800952c:	40014000 	.word	0x40014000
 8009530:	40014400 	.word	0x40014400
 8009534:	40014800 	.word	0x40014800

08009538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009548:	2b01      	cmp	r3, #1
 800954a:	d101      	bne.n	8009550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800954c:	2302      	movs	r3, #2
 800954e:	e068      	b.n	8009622 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2202      	movs	r2, #2
 800955c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a2e      	ldr	r2, [pc, #184]	; (8009630 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d004      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a2d      	ldr	r2, [pc, #180]	; (8009634 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d108      	bne.n	8009596 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800958a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	4313      	orrs	r3, r2
 8009594:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800959c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a1e      	ldr	r2, [pc, #120]	; (8009630 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d01d      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095c2:	d018      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a1b      	ldr	r2, [pc, #108]	; (8009638 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d013      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a1a      	ldr	r2, [pc, #104]	; (800963c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d00e      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a18      	ldr	r2, [pc, #96]	; (8009640 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d009      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a13      	ldr	r2, [pc, #76]	; (8009634 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d004      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a14      	ldr	r2, [pc, #80]	; (8009644 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d10c      	bne.n	8009610 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	4313      	orrs	r3, r2
 8009606:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3714      	adds	r7, #20
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	40010000 	.word	0x40010000
 8009634:	40010400 	.word	0x40010400
 8009638:	40000400 	.word	0x40000400
 800963c:	40000800 	.word	0x40000800
 8009640:	40000c00 	.word	0x40000c00
 8009644:	40001800 	.word	0x40001800

08009648 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e042      	b.n	800971c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800969c:	2b00      	cmp	r3, #0
 800969e:	d106      	bne.n	80096ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7f8 fb73 	bl	8001d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2224      	movs	r2, #36	; 0x24
 80096b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f022 0201 	bic.w	r2, r2, #1
 80096c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fc3a 	bl	8009f40 <UART_SetConfig>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d101      	bne.n	80096d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e022      	b.n	800971c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f002 fdac 	bl	800c23c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	685a      	ldr	r2, [r3, #4]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	689a      	ldr	r2, [r3, #8]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009702:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f042 0201 	orr.w	r2, r2, #1
 8009712:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f002 fe33 	bl	800c380 <UART_CheckIdleState>
 800971a:	4603      	mov	r3, r0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b08a      	sub	sp, #40	; 0x28
 8009728:	af02      	add	r7, sp, #8
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	603b      	str	r3, [r7, #0]
 8009730:	4613      	mov	r3, r2
 8009732:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800973a:	2b20      	cmp	r3, #32
 800973c:	f040 8083 	bne.w	8009846 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d002      	beq.n	800974c <HAL_UART_Transmit+0x28>
 8009746:	88fb      	ldrh	r3, [r7, #6]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d101      	bne.n	8009750 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	e07b      	b.n	8009848 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009756:	2b01      	cmp	r3, #1
 8009758:	d101      	bne.n	800975e <HAL_UART_Transmit+0x3a>
 800975a:	2302      	movs	r3, #2
 800975c:	e074      	b.n	8009848 <HAL_UART_Transmit+0x124>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2201      	movs	r2, #1
 8009762:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2221      	movs	r2, #33	; 0x21
 8009772:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009776:	f7f8 fe7b 	bl	8002470 <HAL_GetTick>
 800977a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	88fa      	ldrh	r2, [r7, #6]
 8009780:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	88fa      	ldrh	r2, [r7, #6]
 8009788:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009794:	d108      	bne.n	80097a8 <HAL_UART_Transmit+0x84>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d104      	bne.n	80097a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800979e:	2300      	movs	r3, #0
 80097a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	61bb      	str	r3, [r7, #24]
 80097a6:	e003      	b.n	80097b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097ac:	2300      	movs	r3, #0
 80097ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80097b0:	e02c      	b.n	800980c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	2200      	movs	r2, #0
 80097ba:	2180      	movs	r1, #128	; 0x80
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f002 fe27 	bl	800c410 <UART_WaitOnFlagUntilTimeout>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80097c8:	2303      	movs	r3, #3
 80097ca:	e03d      	b.n	8009848 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10b      	bne.n	80097ea <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	881b      	ldrh	r3, [r3, #0]
 80097d6:	461a      	mov	r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	3302      	adds	r3, #2
 80097e6:	61bb      	str	r3, [r7, #24]
 80097e8:	e007      	b.n	80097fa <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	781a      	ldrb	r2, [r3, #0]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	3301      	adds	r3, #1
 80097f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009800:	b29b      	uxth	r3, r3
 8009802:	3b01      	subs	r3, #1
 8009804:	b29a      	uxth	r2, r3
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009812:	b29b      	uxth	r3, r3
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1cc      	bne.n	80097b2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	2200      	movs	r2, #0
 8009820:	2140      	movs	r1, #64	; 0x40
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f002 fdf4 	bl	800c410 <UART_WaitOnFlagUntilTimeout>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d001      	beq.n	8009832 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	e00a      	b.n	8009848 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2220      	movs	r2, #32
 8009836:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	e000      	b.n	8009848 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009846:	2302      	movs	r3, #2
  }
}
 8009848:	4618      	mov	r0, r3
 800984a:	3720      	adds	r7, #32
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	4613      	mov	r3, r2
 800985c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009864:	2b20      	cmp	r3, #32
 8009866:	d168      	bne.n	800993a <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d002      	beq.n	8009874 <HAL_UART_Transmit_IT+0x24>
 800986e:	88fb      	ldrh	r3, [r7, #6]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d101      	bne.n	8009878 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e061      	b.n	800993c <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800987e:	2b01      	cmp	r3, #1
 8009880:	d101      	bne.n	8009886 <HAL_UART_Transmit_IT+0x36>
 8009882:	2302      	movs	r3, #2
 8009884:	e05a      	b.n	800993c <HAL_UART_Transmit_IT+0xec>
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2201      	movs	r2, #1
 800988a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	88fa      	ldrh	r2, [r7, #6]
 8009898:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	88fa      	ldrh	r2, [r7, #6]
 80098a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2221      	movs	r2, #33	; 0x21
 80098b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098c2:	d11c      	bne.n	80098fe <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098cc:	d107      	bne.n	80098de <HAL_UART_Transmit_IT+0x8e>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d103      	bne.n	80098de <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	4a1b      	ldr	r2, [pc, #108]	; (8009948 <HAL_UART_Transmit_IT+0xf8>)
 80098da:	671a      	str	r2, [r3, #112]	; 0x70
 80098dc:	e002      	b.n	80098e4 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	4a1a      	ldr	r2, [pc, #104]	; (800994c <HAL_UART_Transmit_IT+0xfc>)
 80098e2:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	689a      	ldr	r2, [r3, #8]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80098fa:	609a      	str	r2, [r3, #8]
 80098fc:	e01b      	b.n	8009936 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009906:	d107      	bne.n	8009918 <HAL_UART_Transmit_IT+0xc8>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d103      	bne.n	8009918 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	4a0f      	ldr	r2, [pc, #60]	; (8009950 <HAL_UART_Transmit_IT+0x100>)
 8009914:	671a      	str	r2, [r3, #112]	; 0x70
 8009916:	e002      	b.n	800991e <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	4a0e      	ldr	r2, [pc, #56]	; (8009954 <HAL_UART_Transmit_IT+0x104>)
 800991c:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009934:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	e000      	b.n	800993c <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800993a:	2302      	movs	r3, #2
  }
}
 800993c:	4618      	mov	r0, r3
 800993e:	3714      	adds	r7, #20
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	0800c84f 	.word	0x0800c84f
 800994c:	0800c7b5 	.word	0x0800c7b5
 8009950:	0800c737 	.word	0x0800c737
 8009954:	0800c6c3 	.word	0x0800c6c3

08009958 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	4613      	mov	r3, r2
 8009964:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800996c:	2b20      	cmp	r3, #32
 800996e:	f040 80bc 	bne.w	8009aea <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <HAL_UART_Receive_IT+0x26>
 8009978:	88fb      	ldrh	r3, [r7, #6]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d101      	bne.n	8009982 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e0b4      	b.n	8009aec <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009988:	2b01      	cmp	r3, #1
 800998a:	d101      	bne.n	8009990 <HAL_UART_Receive_IT+0x38>
 800998c:	2302      	movs	r3, #2
 800998e:	e0ad      	b.n	8009aec <HAL_UART_Receive_IT+0x194>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	88fa      	ldrh	r2, [r7, #6]
 80099a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	88fa      	ldrh	r2, [r7, #6]
 80099aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099bc:	d10e      	bne.n	80099dc <HAL_UART_Receive_IT+0x84>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d105      	bne.n	80099d2 <HAL_UART_Receive_IT+0x7a>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80099cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099d0:	e02d      	b.n	8009a2e <HAL_UART_Receive_IT+0xd6>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	22ff      	movs	r2, #255	; 0xff
 80099d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099da:	e028      	b.n	8009a2e <HAL_UART_Receive_IT+0xd6>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10d      	bne.n	8009a00 <HAL_UART_Receive_IT+0xa8>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d104      	bne.n	80099f6 <HAL_UART_Receive_IT+0x9e>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	22ff      	movs	r2, #255	; 0xff
 80099f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099f4:	e01b      	b.n	8009a2e <HAL_UART_Receive_IT+0xd6>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	227f      	movs	r2, #127	; 0x7f
 80099fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099fe:	e016      	b.n	8009a2e <HAL_UART_Receive_IT+0xd6>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a08:	d10d      	bne.n	8009a26 <HAL_UART_Receive_IT+0xce>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d104      	bne.n	8009a1c <HAL_UART_Receive_IT+0xc4>
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	227f      	movs	r2, #127	; 0x7f
 8009a16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009a1a:	e008      	b.n	8009a2e <HAL_UART_Receive_IT+0xd6>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	223f      	movs	r2, #63	; 0x3f
 8009a20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009a24:	e003      	b.n	8009a2e <HAL_UART_Receive_IT+0xd6>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2222      	movs	r2, #34	; 0x22
 8009a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689a      	ldr	r2, [r3, #8]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f042 0201 	orr.w	r2, r2, #1
 8009a4c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a56:	d12a      	bne.n	8009aae <HAL_UART_Receive_IT+0x156>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a5e:	88fa      	ldrh	r2, [r7, #6]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d324      	bcc.n	8009aae <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a6c:	d107      	bne.n	8009a7e <HAL_UART_Receive_IT+0x126>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d103      	bne.n	8009a7e <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	4a1f      	ldr	r2, [pc, #124]	; (8009af8 <HAL_UART_Receive_IT+0x1a0>)
 8009a7a:	66da      	str	r2, [r3, #108]	; 0x6c
 8009a7c:	e002      	b.n	8009a84 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	4a1e      	ldr	r2, [pc, #120]	; (8009afc <HAL_UART_Receive_IT+0x1a4>)
 8009a82:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a9a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	689a      	ldr	r2, [r3, #8]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009aaa:	609a      	str	r2, [r3, #8]
 8009aac:	e01b      	b.n	8009ae6 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ab6:	d107      	bne.n	8009ac8 <HAL_UART_Receive_IT+0x170>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d103      	bne.n	8009ac8 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	4a0f      	ldr	r2, [pc, #60]	; (8009b00 <HAL_UART_Receive_IT+0x1a8>)
 8009ac4:	66da      	str	r2, [r3, #108]	; 0x6c
 8009ac6:	e002      	b.n	8009ace <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	4a0e      	ldr	r2, [pc, #56]	; (8009b04 <HAL_UART_Receive_IT+0x1ac>)
 8009acc:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009ae4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	e000      	b.n	8009aec <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8009aea:	2302      	movs	r3, #2
  }
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	0800cb85 	.word	0x0800cb85
 8009afc:	0800ca7d 	.word	0x0800ca7d
 8009b00:	0800c9d1 	.word	0x0800c9d1
 8009b04:	0800c927 	.word	0x0800c927

08009b08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	4613      	mov	r3, r2
 8009b14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b1c:	2b20      	cmp	r3, #32
 8009b1e:	d170      	bne.n	8009c02 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d002      	beq.n	8009b2c <HAL_UART_Receive_DMA+0x24>
 8009b26:	88fb      	ldrh	r3, [r7, #6]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d101      	bne.n	8009b30 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e069      	b.n	8009c04 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d101      	bne.n	8009b3e <HAL_UART_Receive_DMA+0x36>
 8009b3a:	2302      	movs	r3, #2
 8009b3c:	e062      	b.n	8009c04 <HAL_UART_Receive_DMA+0xfc>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	88fa      	ldrh	r2, [r7, #6]
 8009b50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2222      	movs	r2, #34	; 0x22
 8009b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d02c      	beq.n	8009bc6 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b70:	4a26      	ldr	r2, [pc, #152]	; (8009c0c <HAL_UART_Receive_DMA+0x104>)
 8009b72:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b78:	4a25      	ldr	r2, [pc, #148]	; (8009c10 <HAL_UART_Receive_DMA+0x108>)
 8009b7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b80:	4a24      	ldr	r2, [pc, #144]	; (8009c14 <HAL_UART_Receive_DMA+0x10c>)
 8009b82:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b88:	2200      	movs	r2, #0
 8009b8a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	3324      	adds	r3, #36	; 0x24
 8009b96:	4619      	mov	r1, r3
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	88fb      	ldrh	r3, [r7, #6]
 8009ba0:	f7fa faa4 	bl	80040ec <HAL_DMA_Start_IT>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00d      	beq.n	8009bc6 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2210      	movs	r2, #16
 8009bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2220      	movs	r2, #32
 8009bbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e01e      	b.n	8009c04 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bdc:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	689a      	ldr	r2, [r3, #8]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f042 0201 	orr.w	r2, r2, #1
 8009bec:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	689a      	ldr	r2, [r3, #8]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bfc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	e000      	b.n	8009c04 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8009c02:	2302      	movs	r3, #2
  }
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	0800c595 	.word	0x0800c595
 8009c10:	0800c5fb 	.word	0x0800c5fb
 8009c14:	0800c617 	.word	0x0800c617

08009c18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b088      	sub	sp, #32
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	69db      	ldr	r3, [r3, #28]
 8009c26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009c38:	69fa      	ldr	r2, [r7, #28]
 8009c3a:	f640 030f 	movw	r3, #2063	; 0x80f
 8009c3e:	4013      	ands	r3, r2
 8009c40:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d118      	bne.n	8009c7a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	f003 0320 	and.w	r3, r3, #32
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d013      	beq.n	8009c7a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	f003 0320 	and.w	r3, r3, #32
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d104      	bne.n	8009c66 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d009      	beq.n	8009c7a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f000 8145 	beq.w	8009efa <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	4798      	blx	r3
      }
      return;
 8009c78:	e13f      	b.n	8009efa <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f000 80e8 	beq.w	8009e52 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009c82:	697a      	ldr	r2, [r7, #20]
 8009c84:	4ba1      	ldr	r3, [pc, #644]	; (8009f0c <HAL_UART_IRQHandler+0x2f4>)
 8009c86:	4013      	ands	r3, r2
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d105      	bne.n	8009c98 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009c8c:	69ba      	ldr	r2, [r7, #24]
 8009c8e:	4ba0      	ldr	r3, [pc, #640]	; (8009f10 <HAL_UART_IRQHandler+0x2f8>)
 8009c90:	4013      	ands	r3, r2
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f000 80dd 	beq.w	8009e52 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d010      	beq.n	8009cc4 <HAL_UART_IRQHandler+0xac>
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00b      	beq.n	8009cc4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cba:	f043 0201 	orr.w	r2, r3, #1
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	f003 0302 	and.w	r3, r3, #2
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d010      	beq.n	8009cf0 <HAL_UART_IRQHandler+0xd8>
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f003 0301 	and.w	r3, r3, #1
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00b      	beq.n	8009cf0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2202      	movs	r2, #2
 8009cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce6:	f043 0204 	orr.w	r2, r3, #4
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	f003 0304 	and.w	r3, r3, #4
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d010      	beq.n	8009d1c <HAL_UART_IRQHandler+0x104>
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	f003 0301 	and.w	r3, r3, #1
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00b      	beq.n	8009d1c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2204      	movs	r2, #4
 8009d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d12:	f043 0202 	orr.w	r2, r3, #2
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	f003 0308 	and.w	r3, r3, #8
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d015      	beq.n	8009d52 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	f003 0320 	and.w	r3, r3, #32
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d104      	bne.n	8009d3a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009d30:	697a      	ldr	r2, [r7, #20]
 8009d32:	4b76      	ldr	r3, [pc, #472]	; (8009f0c <HAL_UART_IRQHandler+0x2f4>)
 8009d34:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00b      	beq.n	8009d52 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2208      	movs	r2, #8
 8009d40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d48:	f043 0208 	orr.w	r2, r3, #8
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d011      	beq.n	8009d80 <HAL_UART_IRQHandler+0x168>
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00c      	beq.n	8009d80 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d76:	f043 0220 	orr.w	r2, r3, #32
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f000 80b9 	beq.w	8009efe <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	f003 0320 	and.w	r3, r3, #32
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d011      	beq.n	8009dba <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	f003 0320 	and.w	r3, r3, #32
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d104      	bne.n	8009daa <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d007      	beq.n	8009dba <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d003      	beq.n	8009dba <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dcc:	2b40      	cmp	r3, #64	; 0x40
 8009dce:	d004      	beq.n	8009dda <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d031      	beq.n	8009e3e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f002 fbb6 	bl	800c54c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dea:	2b40      	cmp	r3, #64	; 0x40
 8009dec:	d123      	bne.n	8009e36 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	689a      	ldr	r2, [r3, #8]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dfc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d013      	beq.n	8009e2e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e0a:	4a42      	ldr	r2, [pc, #264]	; (8009f14 <HAL_UART_IRQHandler+0x2fc>)
 8009e0c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fa fbd4 	bl	80045c0 <HAL_DMA_Abort_IT>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d017      	beq.n	8009e4e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009e28:	4610      	mov	r0, r2
 8009e2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e2c:	e00f      	b.n	8009e4e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f87c 	bl	8009f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e34:	e00b      	b.n	8009e4e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f878 	bl	8009f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e3c:	e007      	b.n	8009e4e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f874 	bl	8009f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009e4c:	e057      	b.n	8009efe <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e4e:	bf00      	nop
    return;
 8009e50:	e055      	b.n	8009efe <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00d      	beq.n	8009e78 <HAL_UART_IRQHandler+0x260>
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d008      	beq.n	8009e78 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009e6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f002 ff0b 	bl	800cc8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e76:	e045      	b.n	8009f04 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d012      	beq.n	8009ea8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d104      	bne.n	8009e96 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d008      	beq.n	8009ea8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d031      	beq.n	8009f02 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	4798      	blx	r3
    }
    return;
 8009ea6:	e02c      	b.n	8009f02 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d008      	beq.n	8009ec4 <HAL_UART_IRQHandler+0x2ac>
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d003      	beq.n	8009ec4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f002 fd18 	bl	800c8f2 <UART_EndTransmit_IT>
    return;
 8009ec2:	e01f      	b.n	8009f04 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d008      	beq.n	8009ee0 <HAL_UART_IRQHandler+0x2c8>
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d003      	beq.n	8009ee0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f002 feeb 	bl	800ccb4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ede:	e011      	b.n	8009f04 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00c      	beq.n	8009f04 <HAL_UART_IRQHandler+0x2ec>
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	da09      	bge.n	8009f04 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f002 fed5 	bl	800cca0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ef6:	bf00      	nop
 8009ef8:	e004      	b.n	8009f04 <HAL_UART_IRQHandler+0x2ec>
      return;
 8009efa:	bf00      	nop
 8009efc:	e002      	b.n	8009f04 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009efe:	bf00      	nop
 8009f00:	e000      	b.n	8009f04 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009f02:	bf00      	nop
  }
}
 8009f04:	3720      	adds	r7, #32
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	10000001 	.word	0x10000001
 8009f10:	04000120 	.word	0x04000120
 8009f14:	0800c697 	.word	0x0800c697

08009f18 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f40:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009f44:	b090      	sub	sp, #64	; 0x40
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009f54:	2300      	movs	r3, #0
 8009f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	689a      	ldr	r2, [r3, #8]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	431a      	orrs	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	431a      	orrs	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	69db      	ldr	r3, [r3, #28]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f76:	4313      	orrs	r3, r2
 8009f78:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	4bc1      	ldr	r3, [pc, #772]	; (800a288 <UART_SetConfig+0x348>)
 8009f82:	4013      	ands	r3, r2
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	6812      	ldr	r2, [r2, #0]
 8009f88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f8a:	430b      	orrs	r3, r1
 8009f8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	68da      	ldr	r2, [r3, #12]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	430a      	orrs	r2, r1
 8009fa2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4ab7      	ldr	r2, [pc, #732]	; (800a28c <UART_SetConfig+0x34c>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d004      	beq.n	8009fbe <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6a1b      	ldr	r3, [r3, #32]
 8009fb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	689a      	ldr	r2, [r3, #8]
 8009fc4:	4bb2      	ldr	r3, [pc, #712]	; (800a290 <UART_SetConfig+0x350>)
 8009fc6:	4013      	ands	r3, r2
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	6812      	ldr	r2, [r2, #0]
 8009fcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009fce:	430b      	orrs	r3, r1
 8009fd0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd8:	f023 010f 	bic.w	r1, r3, #15
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4aa9      	ldr	r2, [pc, #676]	; (800a294 <UART_SetConfig+0x354>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d177      	bne.n	800a0e2 <UART_SetConfig+0x1a2>
 8009ff2:	4ba9      	ldr	r3, [pc, #676]	; (800a298 <UART_SetConfig+0x358>)
 8009ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ff6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ffa:	2b28      	cmp	r3, #40	; 0x28
 8009ffc:	d86c      	bhi.n	800a0d8 <UART_SetConfig+0x198>
 8009ffe:	a201      	add	r2, pc, #4	; (adr r2, 800a004 <UART_SetConfig+0xc4>)
 800a000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a004:	0800a0a9 	.word	0x0800a0a9
 800a008:	0800a0d9 	.word	0x0800a0d9
 800a00c:	0800a0d9 	.word	0x0800a0d9
 800a010:	0800a0d9 	.word	0x0800a0d9
 800a014:	0800a0d9 	.word	0x0800a0d9
 800a018:	0800a0d9 	.word	0x0800a0d9
 800a01c:	0800a0d9 	.word	0x0800a0d9
 800a020:	0800a0d9 	.word	0x0800a0d9
 800a024:	0800a0b1 	.word	0x0800a0b1
 800a028:	0800a0d9 	.word	0x0800a0d9
 800a02c:	0800a0d9 	.word	0x0800a0d9
 800a030:	0800a0d9 	.word	0x0800a0d9
 800a034:	0800a0d9 	.word	0x0800a0d9
 800a038:	0800a0d9 	.word	0x0800a0d9
 800a03c:	0800a0d9 	.word	0x0800a0d9
 800a040:	0800a0d9 	.word	0x0800a0d9
 800a044:	0800a0b9 	.word	0x0800a0b9
 800a048:	0800a0d9 	.word	0x0800a0d9
 800a04c:	0800a0d9 	.word	0x0800a0d9
 800a050:	0800a0d9 	.word	0x0800a0d9
 800a054:	0800a0d9 	.word	0x0800a0d9
 800a058:	0800a0d9 	.word	0x0800a0d9
 800a05c:	0800a0d9 	.word	0x0800a0d9
 800a060:	0800a0d9 	.word	0x0800a0d9
 800a064:	0800a0c1 	.word	0x0800a0c1
 800a068:	0800a0d9 	.word	0x0800a0d9
 800a06c:	0800a0d9 	.word	0x0800a0d9
 800a070:	0800a0d9 	.word	0x0800a0d9
 800a074:	0800a0d9 	.word	0x0800a0d9
 800a078:	0800a0d9 	.word	0x0800a0d9
 800a07c:	0800a0d9 	.word	0x0800a0d9
 800a080:	0800a0d9 	.word	0x0800a0d9
 800a084:	0800a0c9 	.word	0x0800a0c9
 800a088:	0800a0d9 	.word	0x0800a0d9
 800a08c:	0800a0d9 	.word	0x0800a0d9
 800a090:	0800a0d9 	.word	0x0800a0d9
 800a094:	0800a0d9 	.word	0x0800a0d9
 800a098:	0800a0d9 	.word	0x0800a0d9
 800a09c:	0800a0d9 	.word	0x0800a0d9
 800a0a0:	0800a0d9 	.word	0x0800a0d9
 800a0a4:	0800a0d1 	.word	0x0800a0d1
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0ae:	e233      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a0b0:	2304      	movs	r3, #4
 800a0b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0b6:	e22f      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a0b8:	2308      	movs	r3, #8
 800a0ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0be:	e22b      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a0c0:	2310      	movs	r3, #16
 800a0c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0c6:	e227      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a0c8:	2320      	movs	r3, #32
 800a0ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0ce:	e223      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a0d0:	2340      	movs	r3, #64	; 0x40
 800a0d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0d6:	e21f      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a0d8:	2380      	movs	r3, #128	; 0x80
 800a0da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0de:	bf00      	nop
 800a0e0:	e21a      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a6d      	ldr	r2, [pc, #436]	; (800a29c <UART_SetConfig+0x35c>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d132      	bne.n	800a152 <UART_SetConfig+0x212>
 800a0ec:	4b6a      	ldr	r3, [pc, #424]	; (800a298 <UART_SetConfig+0x358>)
 800a0ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0f0:	f003 0307 	and.w	r3, r3, #7
 800a0f4:	2b05      	cmp	r3, #5
 800a0f6:	d827      	bhi.n	800a148 <UART_SetConfig+0x208>
 800a0f8:	a201      	add	r2, pc, #4	; (adr r2, 800a100 <UART_SetConfig+0x1c0>)
 800a0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fe:	bf00      	nop
 800a100:	0800a119 	.word	0x0800a119
 800a104:	0800a121 	.word	0x0800a121
 800a108:	0800a129 	.word	0x0800a129
 800a10c:	0800a131 	.word	0x0800a131
 800a110:	0800a139 	.word	0x0800a139
 800a114:	0800a141 	.word	0x0800a141
 800a118:	2300      	movs	r3, #0
 800a11a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a11e:	e1fb      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a120:	2304      	movs	r3, #4
 800a122:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a126:	e1f7      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a128:	2308      	movs	r3, #8
 800a12a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a12e:	e1f3      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a130:	2310      	movs	r3, #16
 800a132:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a136:	e1ef      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a138:	2320      	movs	r3, #32
 800a13a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a13e:	e1eb      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a140:	2340      	movs	r3, #64	; 0x40
 800a142:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a146:	e1e7      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a148:	2380      	movs	r3, #128	; 0x80
 800a14a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a14e:	bf00      	nop
 800a150:	e1e2      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a52      	ldr	r2, [pc, #328]	; (800a2a0 <UART_SetConfig+0x360>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d132      	bne.n	800a1c2 <UART_SetConfig+0x282>
 800a15c:	4b4e      	ldr	r3, [pc, #312]	; (800a298 <UART_SetConfig+0x358>)
 800a15e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a160:	f003 0307 	and.w	r3, r3, #7
 800a164:	2b05      	cmp	r3, #5
 800a166:	d827      	bhi.n	800a1b8 <UART_SetConfig+0x278>
 800a168:	a201      	add	r2, pc, #4	; (adr r2, 800a170 <UART_SetConfig+0x230>)
 800a16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a16e:	bf00      	nop
 800a170:	0800a189 	.word	0x0800a189
 800a174:	0800a191 	.word	0x0800a191
 800a178:	0800a199 	.word	0x0800a199
 800a17c:	0800a1a1 	.word	0x0800a1a1
 800a180:	0800a1a9 	.word	0x0800a1a9
 800a184:	0800a1b1 	.word	0x0800a1b1
 800a188:	2300      	movs	r3, #0
 800a18a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a18e:	e1c3      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a190:	2304      	movs	r3, #4
 800a192:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a196:	e1bf      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a198:	2308      	movs	r3, #8
 800a19a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a19e:	e1bb      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a1a0:	2310      	movs	r3, #16
 800a1a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1a6:	e1b7      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a1a8:	2320      	movs	r3, #32
 800a1aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1ae:	e1b3      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a1b0:	2340      	movs	r3, #64	; 0x40
 800a1b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1b6:	e1af      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a1b8:	2380      	movs	r3, #128	; 0x80
 800a1ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1be:	bf00      	nop
 800a1c0:	e1aa      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a37      	ldr	r2, [pc, #220]	; (800a2a4 <UART_SetConfig+0x364>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d132      	bne.n	800a232 <UART_SetConfig+0x2f2>
 800a1cc:	4b32      	ldr	r3, [pc, #200]	; (800a298 <UART_SetConfig+0x358>)
 800a1ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1d0:	f003 0307 	and.w	r3, r3, #7
 800a1d4:	2b05      	cmp	r3, #5
 800a1d6:	d827      	bhi.n	800a228 <UART_SetConfig+0x2e8>
 800a1d8:	a201      	add	r2, pc, #4	; (adr r2, 800a1e0 <UART_SetConfig+0x2a0>)
 800a1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1de:	bf00      	nop
 800a1e0:	0800a1f9 	.word	0x0800a1f9
 800a1e4:	0800a201 	.word	0x0800a201
 800a1e8:	0800a209 	.word	0x0800a209
 800a1ec:	0800a211 	.word	0x0800a211
 800a1f0:	0800a219 	.word	0x0800a219
 800a1f4:	0800a221 	.word	0x0800a221
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1fe:	e18b      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a200:	2304      	movs	r3, #4
 800a202:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a206:	e187      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a208:	2308      	movs	r3, #8
 800a20a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a20e:	e183      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a210:	2310      	movs	r3, #16
 800a212:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a216:	e17f      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a218:	2320      	movs	r3, #32
 800a21a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a21e:	e17b      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a220:	2340      	movs	r3, #64	; 0x40
 800a222:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a226:	e177      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a228:	2380      	movs	r3, #128	; 0x80
 800a22a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a22e:	bf00      	nop
 800a230:	e172      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a1c      	ldr	r2, [pc, #112]	; (800a2a8 <UART_SetConfig+0x368>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d144      	bne.n	800a2c6 <UART_SetConfig+0x386>
 800a23c:	4b16      	ldr	r3, [pc, #88]	; (800a298 <UART_SetConfig+0x358>)
 800a23e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a240:	f003 0307 	and.w	r3, r3, #7
 800a244:	2b05      	cmp	r3, #5
 800a246:	d839      	bhi.n	800a2bc <UART_SetConfig+0x37c>
 800a248:	a201      	add	r2, pc, #4	; (adr r2, 800a250 <UART_SetConfig+0x310>)
 800a24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a24e:	bf00      	nop
 800a250:	0800a269 	.word	0x0800a269
 800a254:	0800a271 	.word	0x0800a271
 800a258:	0800a279 	.word	0x0800a279
 800a25c:	0800a281 	.word	0x0800a281
 800a260:	0800a2ad 	.word	0x0800a2ad
 800a264:	0800a2b5 	.word	0x0800a2b5
 800a268:	2300      	movs	r3, #0
 800a26a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a26e:	e153      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a270:	2304      	movs	r3, #4
 800a272:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a276:	e14f      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a278:	2308      	movs	r3, #8
 800a27a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a27e:	e14b      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a280:	2310      	movs	r3, #16
 800a282:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a286:	e147      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a288:	cfff69f3 	.word	0xcfff69f3
 800a28c:	58000c00 	.word	0x58000c00
 800a290:	11fff4ff 	.word	0x11fff4ff
 800a294:	40011000 	.word	0x40011000
 800a298:	58024400 	.word	0x58024400
 800a29c:	40004400 	.word	0x40004400
 800a2a0:	40004800 	.word	0x40004800
 800a2a4:	40004c00 	.word	0x40004c00
 800a2a8:	40005000 	.word	0x40005000
 800a2ac:	2320      	movs	r3, #32
 800a2ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2b2:	e131      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a2b4:	2340      	movs	r3, #64	; 0x40
 800a2b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2ba:	e12d      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a2bc:	2380      	movs	r3, #128	; 0x80
 800a2be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2c2:	bf00      	nop
 800a2c4:	e128      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4ac3      	ldr	r2, [pc, #780]	; (800a5d8 <UART_SetConfig+0x698>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d178      	bne.n	800a3c2 <UART_SetConfig+0x482>
 800a2d0:	4bc2      	ldr	r3, [pc, #776]	; (800a5dc <UART_SetConfig+0x69c>)
 800a2d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2d8:	2b28      	cmp	r3, #40	; 0x28
 800a2da:	d86d      	bhi.n	800a3b8 <UART_SetConfig+0x478>
 800a2dc:	a201      	add	r2, pc, #4	; (adr r2, 800a2e4 <UART_SetConfig+0x3a4>)
 800a2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e2:	bf00      	nop
 800a2e4:	0800a389 	.word	0x0800a389
 800a2e8:	0800a3b9 	.word	0x0800a3b9
 800a2ec:	0800a3b9 	.word	0x0800a3b9
 800a2f0:	0800a3b9 	.word	0x0800a3b9
 800a2f4:	0800a3b9 	.word	0x0800a3b9
 800a2f8:	0800a3b9 	.word	0x0800a3b9
 800a2fc:	0800a3b9 	.word	0x0800a3b9
 800a300:	0800a3b9 	.word	0x0800a3b9
 800a304:	0800a391 	.word	0x0800a391
 800a308:	0800a3b9 	.word	0x0800a3b9
 800a30c:	0800a3b9 	.word	0x0800a3b9
 800a310:	0800a3b9 	.word	0x0800a3b9
 800a314:	0800a3b9 	.word	0x0800a3b9
 800a318:	0800a3b9 	.word	0x0800a3b9
 800a31c:	0800a3b9 	.word	0x0800a3b9
 800a320:	0800a3b9 	.word	0x0800a3b9
 800a324:	0800a399 	.word	0x0800a399
 800a328:	0800a3b9 	.word	0x0800a3b9
 800a32c:	0800a3b9 	.word	0x0800a3b9
 800a330:	0800a3b9 	.word	0x0800a3b9
 800a334:	0800a3b9 	.word	0x0800a3b9
 800a338:	0800a3b9 	.word	0x0800a3b9
 800a33c:	0800a3b9 	.word	0x0800a3b9
 800a340:	0800a3b9 	.word	0x0800a3b9
 800a344:	0800a3a1 	.word	0x0800a3a1
 800a348:	0800a3b9 	.word	0x0800a3b9
 800a34c:	0800a3b9 	.word	0x0800a3b9
 800a350:	0800a3b9 	.word	0x0800a3b9
 800a354:	0800a3b9 	.word	0x0800a3b9
 800a358:	0800a3b9 	.word	0x0800a3b9
 800a35c:	0800a3b9 	.word	0x0800a3b9
 800a360:	0800a3b9 	.word	0x0800a3b9
 800a364:	0800a3a9 	.word	0x0800a3a9
 800a368:	0800a3b9 	.word	0x0800a3b9
 800a36c:	0800a3b9 	.word	0x0800a3b9
 800a370:	0800a3b9 	.word	0x0800a3b9
 800a374:	0800a3b9 	.word	0x0800a3b9
 800a378:	0800a3b9 	.word	0x0800a3b9
 800a37c:	0800a3b9 	.word	0x0800a3b9
 800a380:	0800a3b9 	.word	0x0800a3b9
 800a384:	0800a3b1 	.word	0x0800a3b1
 800a388:	2301      	movs	r3, #1
 800a38a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a38e:	e0c3      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a390:	2304      	movs	r3, #4
 800a392:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a396:	e0bf      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a398:	2308      	movs	r3, #8
 800a39a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a39e:	e0bb      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a3a0:	2310      	movs	r3, #16
 800a3a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3a6:	e0b7      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a3a8:	2320      	movs	r3, #32
 800a3aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3ae:	e0b3      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a3b0:	2340      	movs	r3, #64	; 0x40
 800a3b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3b6:	e0af      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a3b8:	2380      	movs	r3, #128	; 0x80
 800a3ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3be:	bf00      	nop
 800a3c0:	e0aa      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a86      	ldr	r2, [pc, #536]	; (800a5e0 <UART_SetConfig+0x6a0>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d132      	bne.n	800a432 <UART_SetConfig+0x4f2>
 800a3cc:	4b83      	ldr	r3, [pc, #524]	; (800a5dc <UART_SetConfig+0x69c>)
 800a3ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3d0:	f003 0307 	and.w	r3, r3, #7
 800a3d4:	2b05      	cmp	r3, #5
 800a3d6:	d827      	bhi.n	800a428 <UART_SetConfig+0x4e8>
 800a3d8:	a201      	add	r2, pc, #4	; (adr r2, 800a3e0 <UART_SetConfig+0x4a0>)
 800a3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3de:	bf00      	nop
 800a3e0:	0800a3f9 	.word	0x0800a3f9
 800a3e4:	0800a401 	.word	0x0800a401
 800a3e8:	0800a409 	.word	0x0800a409
 800a3ec:	0800a411 	.word	0x0800a411
 800a3f0:	0800a419 	.word	0x0800a419
 800a3f4:	0800a421 	.word	0x0800a421
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3fe:	e08b      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a400:	2304      	movs	r3, #4
 800a402:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a406:	e087      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a408:	2308      	movs	r3, #8
 800a40a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a40e:	e083      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a410:	2310      	movs	r3, #16
 800a412:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a416:	e07f      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a418:	2320      	movs	r3, #32
 800a41a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a41e:	e07b      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a420:	2340      	movs	r3, #64	; 0x40
 800a422:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a426:	e077      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a428:	2380      	movs	r3, #128	; 0x80
 800a42a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a42e:	bf00      	nop
 800a430:	e072      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a6b      	ldr	r2, [pc, #428]	; (800a5e4 <UART_SetConfig+0x6a4>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d132      	bne.n	800a4a2 <UART_SetConfig+0x562>
 800a43c:	4b67      	ldr	r3, [pc, #412]	; (800a5dc <UART_SetConfig+0x69c>)
 800a43e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a440:	f003 0307 	and.w	r3, r3, #7
 800a444:	2b05      	cmp	r3, #5
 800a446:	d827      	bhi.n	800a498 <UART_SetConfig+0x558>
 800a448:	a201      	add	r2, pc, #4	; (adr r2, 800a450 <UART_SetConfig+0x510>)
 800a44a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44e:	bf00      	nop
 800a450:	0800a469 	.word	0x0800a469
 800a454:	0800a471 	.word	0x0800a471
 800a458:	0800a479 	.word	0x0800a479
 800a45c:	0800a481 	.word	0x0800a481
 800a460:	0800a489 	.word	0x0800a489
 800a464:	0800a491 	.word	0x0800a491
 800a468:	2300      	movs	r3, #0
 800a46a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a46e:	e053      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a470:	2304      	movs	r3, #4
 800a472:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a476:	e04f      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a478:	2308      	movs	r3, #8
 800a47a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a47e:	e04b      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a480:	2310      	movs	r3, #16
 800a482:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a486:	e047      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a488:	2320      	movs	r3, #32
 800a48a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a48e:	e043      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a490:	2340      	movs	r3, #64	; 0x40
 800a492:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a496:	e03f      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a498:	2380      	movs	r3, #128	; 0x80
 800a49a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a49e:	bf00      	nop
 800a4a0:	e03a      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a50      	ldr	r2, [pc, #320]	; (800a5e8 <UART_SetConfig+0x6a8>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d132      	bne.n	800a512 <UART_SetConfig+0x5d2>
 800a4ac:	4b4b      	ldr	r3, [pc, #300]	; (800a5dc <UART_SetConfig+0x69c>)
 800a4ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4b0:	f003 0307 	and.w	r3, r3, #7
 800a4b4:	2b05      	cmp	r3, #5
 800a4b6:	d827      	bhi.n	800a508 <UART_SetConfig+0x5c8>
 800a4b8:	a201      	add	r2, pc, #4	; (adr r2, 800a4c0 <UART_SetConfig+0x580>)
 800a4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4be:	bf00      	nop
 800a4c0:	0800a4d9 	.word	0x0800a4d9
 800a4c4:	0800a4e1 	.word	0x0800a4e1
 800a4c8:	0800a4e9 	.word	0x0800a4e9
 800a4cc:	0800a4f1 	.word	0x0800a4f1
 800a4d0:	0800a4f9 	.word	0x0800a4f9
 800a4d4:	0800a501 	.word	0x0800a501
 800a4d8:	2302      	movs	r3, #2
 800a4da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4de:	e01b      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a4e0:	2304      	movs	r3, #4
 800a4e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4e6:	e017      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a4e8:	2308      	movs	r3, #8
 800a4ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4ee:	e013      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a4f0:	2310      	movs	r3, #16
 800a4f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4f6:	e00f      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a4f8:	2320      	movs	r3, #32
 800a4fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4fe:	e00b      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a500:	2340      	movs	r3, #64	; 0x40
 800a502:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a506:	e007      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a508:	2380      	movs	r3, #128	; 0x80
 800a50a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a50e:	bf00      	nop
 800a510:	e002      	b.n	800a518 <UART_SetConfig+0x5d8>
 800a512:	2380      	movs	r3, #128	; 0x80
 800a514:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a32      	ldr	r2, [pc, #200]	; (800a5e8 <UART_SetConfig+0x6a8>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	f040 86f7 	bne.w	800b312 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a524:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a528:	2b08      	cmp	r3, #8
 800a52a:	f000 80c0 	beq.w	800a6ae <UART_SetConfig+0x76e>
 800a52e:	2b08      	cmp	r3, #8
 800a530:	dc04      	bgt.n	800a53c <UART_SetConfig+0x5fc>
 800a532:	2b02      	cmp	r3, #2
 800a534:	d00c      	beq.n	800a550 <UART_SetConfig+0x610>
 800a536:	2b04      	cmp	r3, #4
 800a538:	d065      	beq.n	800a606 <UART_SetConfig+0x6c6>
 800a53a:	e27a      	b.n	800aa32 <UART_SetConfig+0xaf2>
 800a53c:	2b20      	cmp	r3, #32
 800a53e:	f000 81b0 	beq.w	800a8a2 <UART_SetConfig+0x962>
 800a542:	2b40      	cmp	r3, #64	; 0x40
 800a544:	f000 821e 	beq.w	800a984 <UART_SetConfig+0xa44>
 800a548:	2b10      	cmp	r3, #16
 800a54a:	f000 8104 	beq.w	800a756 <UART_SetConfig+0x816>
 800a54e:	e270      	b.n	800aa32 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a550:	f7fe f85c 	bl	800860c <HAL_RCCEx_GetD3PCLK1Freq>
 800a554:	4602      	mov	r2, r0
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d04e      	beq.n	800a5fc <UART_SetConfig+0x6bc>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a562:	2b01      	cmp	r3, #1
 800a564:	d048      	beq.n	800a5f8 <UART_SetConfig+0x6b8>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d042      	beq.n	800a5f4 <UART_SetConfig+0x6b4>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a572:	2b03      	cmp	r3, #3
 800a574:	d03c      	beq.n	800a5f0 <UART_SetConfig+0x6b0>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57a:	2b04      	cmp	r3, #4
 800a57c:	d036      	beq.n	800a5ec <UART_SetConfig+0x6ac>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a582:	2b05      	cmp	r3, #5
 800a584:	d026      	beq.n	800a5d4 <UART_SetConfig+0x694>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58a:	2b06      	cmp	r3, #6
 800a58c:	d020      	beq.n	800a5d0 <UART_SetConfig+0x690>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a592:	2b07      	cmp	r3, #7
 800a594:	d01a      	beq.n	800a5cc <UART_SetConfig+0x68c>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59a:	2b08      	cmp	r3, #8
 800a59c:	d014      	beq.n	800a5c8 <UART_SetConfig+0x688>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a2:	2b09      	cmp	r3, #9
 800a5a4:	d00e      	beq.n	800a5c4 <UART_SetConfig+0x684>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5aa:	2b0a      	cmp	r3, #10
 800a5ac:	d008      	beq.n	800a5c0 <UART_SetConfig+0x680>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b2:	2b0b      	cmp	r3, #11
 800a5b4:	d102      	bne.n	800a5bc <UART_SetConfig+0x67c>
 800a5b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5ba:	e020      	b.n	800a5fe <UART_SetConfig+0x6be>
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e01e      	b.n	800a5fe <UART_SetConfig+0x6be>
 800a5c0:	2380      	movs	r3, #128	; 0x80
 800a5c2:	e01c      	b.n	800a5fe <UART_SetConfig+0x6be>
 800a5c4:	2340      	movs	r3, #64	; 0x40
 800a5c6:	e01a      	b.n	800a5fe <UART_SetConfig+0x6be>
 800a5c8:	2320      	movs	r3, #32
 800a5ca:	e018      	b.n	800a5fe <UART_SetConfig+0x6be>
 800a5cc:	2310      	movs	r3, #16
 800a5ce:	e016      	b.n	800a5fe <UART_SetConfig+0x6be>
 800a5d0:	230c      	movs	r3, #12
 800a5d2:	e014      	b.n	800a5fe <UART_SetConfig+0x6be>
 800a5d4:	230a      	movs	r3, #10
 800a5d6:	e012      	b.n	800a5fe <UART_SetConfig+0x6be>
 800a5d8:	40011400 	.word	0x40011400
 800a5dc:	58024400 	.word	0x58024400
 800a5e0:	40007800 	.word	0x40007800
 800a5e4:	40007c00 	.word	0x40007c00
 800a5e8:	58000c00 	.word	0x58000c00
 800a5ec:	2308      	movs	r3, #8
 800a5ee:	e006      	b.n	800a5fe <UART_SetConfig+0x6be>
 800a5f0:	2306      	movs	r3, #6
 800a5f2:	e004      	b.n	800a5fe <UART_SetConfig+0x6be>
 800a5f4:	2304      	movs	r3, #4
 800a5f6:	e002      	b.n	800a5fe <UART_SetConfig+0x6be>
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	e000      	b.n	800a5fe <UART_SetConfig+0x6be>
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a602:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a604:	e219      	b.n	800aa3a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a606:	f107 0318 	add.w	r3, r7, #24
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7fe f814 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a610:	69fa      	ldr	r2, [r7, #28]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a616:	2b00      	cmp	r3, #0
 800a618:	d044      	beq.n	800a6a4 <UART_SetConfig+0x764>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d03e      	beq.n	800a6a0 <UART_SetConfig+0x760>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a626:	2b02      	cmp	r3, #2
 800a628:	d038      	beq.n	800a69c <UART_SetConfig+0x75c>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62e:	2b03      	cmp	r3, #3
 800a630:	d032      	beq.n	800a698 <UART_SetConfig+0x758>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a636:	2b04      	cmp	r3, #4
 800a638:	d02c      	beq.n	800a694 <UART_SetConfig+0x754>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63e:	2b05      	cmp	r3, #5
 800a640:	d026      	beq.n	800a690 <UART_SetConfig+0x750>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a646:	2b06      	cmp	r3, #6
 800a648:	d020      	beq.n	800a68c <UART_SetConfig+0x74c>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64e:	2b07      	cmp	r3, #7
 800a650:	d01a      	beq.n	800a688 <UART_SetConfig+0x748>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a656:	2b08      	cmp	r3, #8
 800a658:	d014      	beq.n	800a684 <UART_SetConfig+0x744>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65e:	2b09      	cmp	r3, #9
 800a660:	d00e      	beq.n	800a680 <UART_SetConfig+0x740>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a666:	2b0a      	cmp	r3, #10
 800a668:	d008      	beq.n	800a67c <UART_SetConfig+0x73c>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66e:	2b0b      	cmp	r3, #11
 800a670:	d102      	bne.n	800a678 <UART_SetConfig+0x738>
 800a672:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a676:	e016      	b.n	800a6a6 <UART_SetConfig+0x766>
 800a678:	2301      	movs	r3, #1
 800a67a:	e014      	b.n	800a6a6 <UART_SetConfig+0x766>
 800a67c:	2380      	movs	r3, #128	; 0x80
 800a67e:	e012      	b.n	800a6a6 <UART_SetConfig+0x766>
 800a680:	2340      	movs	r3, #64	; 0x40
 800a682:	e010      	b.n	800a6a6 <UART_SetConfig+0x766>
 800a684:	2320      	movs	r3, #32
 800a686:	e00e      	b.n	800a6a6 <UART_SetConfig+0x766>
 800a688:	2310      	movs	r3, #16
 800a68a:	e00c      	b.n	800a6a6 <UART_SetConfig+0x766>
 800a68c:	230c      	movs	r3, #12
 800a68e:	e00a      	b.n	800a6a6 <UART_SetConfig+0x766>
 800a690:	230a      	movs	r3, #10
 800a692:	e008      	b.n	800a6a6 <UART_SetConfig+0x766>
 800a694:	2308      	movs	r3, #8
 800a696:	e006      	b.n	800a6a6 <UART_SetConfig+0x766>
 800a698:	2306      	movs	r3, #6
 800a69a:	e004      	b.n	800a6a6 <UART_SetConfig+0x766>
 800a69c:	2304      	movs	r3, #4
 800a69e:	e002      	b.n	800a6a6 <UART_SetConfig+0x766>
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	e000      	b.n	800a6a6 <UART_SetConfig+0x766>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6ac:	e1c5      	b.n	800aa3a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6ae:	f107 030c 	add.w	r3, r7, #12
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fe f90c 	bl	80088d0 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d044      	beq.n	800a74c <UART_SetConfig+0x80c>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d03e      	beq.n	800a748 <UART_SetConfig+0x808>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d038      	beq.n	800a744 <UART_SetConfig+0x804>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d032      	beq.n	800a740 <UART_SetConfig+0x800>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6de:	2b04      	cmp	r3, #4
 800a6e0:	d02c      	beq.n	800a73c <UART_SetConfig+0x7fc>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e6:	2b05      	cmp	r3, #5
 800a6e8:	d026      	beq.n	800a738 <UART_SetConfig+0x7f8>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ee:	2b06      	cmp	r3, #6
 800a6f0:	d020      	beq.n	800a734 <UART_SetConfig+0x7f4>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f6:	2b07      	cmp	r3, #7
 800a6f8:	d01a      	beq.n	800a730 <UART_SetConfig+0x7f0>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fe:	2b08      	cmp	r3, #8
 800a700:	d014      	beq.n	800a72c <UART_SetConfig+0x7ec>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a706:	2b09      	cmp	r3, #9
 800a708:	d00e      	beq.n	800a728 <UART_SetConfig+0x7e8>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70e:	2b0a      	cmp	r3, #10
 800a710:	d008      	beq.n	800a724 <UART_SetConfig+0x7e4>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a716:	2b0b      	cmp	r3, #11
 800a718:	d102      	bne.n	800a720 <UART_SetConfig+0x7e0>
 800a71a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a71e:	e016      	b.n	800a74e <UART_SetConfig+0x80e>
 800a720:	2301      	movs	r3, #1
 800a722:	e014      	b.n	800a74e <UART_SetConfig+0x80e>
 800a724:	2380      	movs	r3, #128	; 0x80
 800a726:	e012      	b.n	800a74e <UART_SetConfig+0x80e>
 800a728:	2340      	movs	r3, #64	; 0x40
 800a72a:	e010      	b.n	800a74e <UART_SetConfig+0x80e>
 800a72c:	2320      	movs	r3, #32
 800a72e:	e00e      	b.n	800a74e <UART_SetConfig+0x80e>
 800a730:	2310      	movs	r3, #16
 800a732:	e00c      	b.n	800a74e <UART_SetConfig+0x80e>
 800a734:	230c      	movs	r3, #12
 800a736:	e00a      	b.n	800a74e <UART_SetConfig+0x80e>
 800a738:	230a      	movs	r3, #10
 800a73a:	e008      	b.n	800a74e <UART_SetConfig+0x80e>
 800a73c:	2308      	movs	r3, #8
 800a73e:	e006      	b.n	800a74e <UART_SetConfig+0x80e>
 800a740:	2306      	movs	r3, #6
 800a742:	e004      	b.n	800a74e <UART_SetConfig+0x80e>
 800a744:	2304      	movs	r3, #4
 800a746:	e002      	b.n	800a74e <UART_SetConfig+0x80e>
 800a748:	2302      	movs	r3, #2
 800a74a:	e000      	b.n	800a74e <UART_SetConfig+0x80e>
 800a74c:	2301      	movs	r3, #1
 800a74e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a752:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a754:	e171      	b.n	800aa3a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a756:	4b7a      	ldr	r3, [pc, #488]	; (800a940 <UART_SetConfig+0xa00>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 0320 	and.w	r3, r3, #32
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d054      	beq.n	800a80c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a762:	4b77      	ldr	r3, [pc, #476]	; (800a940 <UART_SetConfig+0xa00>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	08db      	lsrs	r3, r3, #3
 800a768:	f003 0303 	and.w	r3, r3, #3
 800a76c:	4a75      	ldr	r2, [pc, #468]	; (800a944 <UART_SetConfig+0xa04>)
 800a76e:	40da      	lsrs	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a774:	2b00      	cmp	r3, #0
 800a776:	d044      	beq.n	800a802 <UART_SetConfig+0x8c2>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d03e      	beq.n	800a7fe <UART_SetConfig+0x8be>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a784:	2b02      	cmp	r3, #2
 800a786:	d038      	beq.n	800a7fa <UART_SetConfig+0x8ba>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78c:	2b03      	cmp	r3, #3
 800a78e:	d032      	beq.n	800a7f6 <UART_SetConfig+0x8b6>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a794:	2b04      	cmp	r3, #4
 800a796:	d02c      	beq.n	800a7f2 <UART_SetConfig+0x8b2>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79c:	2b05      	cmp	r3, #5
 800a79e:	d026      	beq.n	800a7ee <UART_SetConfig+0x8ae>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a4:	2b06      	cmp	r3, #6
 800a7a6:	d020      	beq.n	800a7ea <UART_SetConfig+0x8aa>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ac:	2b07      	cmp	r3, #7
 800a7ae:	d01a      	beq.n	800a7e6 <UART_SetConfig+0x8a6>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b4:	2b08      	cmp	r3, #8
 800a7b6:	d014      	beq.n	800a7e2 <UART_SetConfig+0x8a2>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7bc:	2b09      	cmp	r3, #9
 800a7be:	d00e      	beq.n	800a7de <UART_SetConfig+0x89e>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c4:	2b0a      	cmp	r3, #10
 800a7c6:	d008      	beq.n	800a7da <UART_SetConfig+0x89a>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7cc:	2b0b      	cmp	r3, #11
 800a7ce:	d102      	bne.n	800a7d6 <UART_SetConfig+0x896>
 800a7d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7d4:	e016      	b.n	800a804 <UART_SetConfig+0x8c4>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e014      	b.n	800a804 <UART_SetConfig+0x8c4>
 800a7da:	2380      	movs	r3, #128	; 0x80
 800a7dc:	e012      	b.n	800a804 <UART_SetConfig+0x8c4>
 800a7de:	2340      	movs	r3, #64	; 0x40
 800a7e0:	e010      	b.n	800a804 <UART_SetConfig+0x8c4>
 800a7e2:	2320      	movs	r3, #32
 800a7e4:	e00e      	b.n	800a804 <UART_SetConfig+0x8c4>
 800a7e6:	2310      	movs	r3, #16
 800a7e8:	e00c      	b.n	800a804 <UART_SetConfig+0x8c4>
 800a7ea:	230c      	movs	r3, #12
 800a7ec:	e00a      	b.n	800a804 <UART_SetConfig+0x8c4>
 800a7ee:	230a      	movs	r3, #10
 800a7f0:	e008      	b.n	800a804 <UART_SetConfig+0x8c4>
 800a7f2:	2308      	movs	r3, #8
 800a7f4:	e006      	b.n	800a804 <UART_SetConfig+0x8c4>
 800a7f6:	2306      	movs	r3, #6
 800a7f8:	e004      	b.n	800a804 <UART_SetConfig+0x8c4>
 800a7fa:	2304      	movs	r3, #4
 800a7fc:	e002      	b.n	800a804 <UART_SetConfig+0x8c4>
 800a7fe:	2302      	movs	r3, #2
 800a800:	e000      	b.n	800a804 <UART_SetConfig+0x8c4>
 800a802:	2301      	movs	r3, #1
 800a804:	fbb2 f3f3 	udiv	r3, r2, r3
 800a808:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a80a:	e116      	b.n	800aa3a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a810:	2b00      	cmp	r3, #0
 800a812:	d043      	beq.n	800a89c <UART_SetConfig+0x95c>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d03d      	beq.n	800a898 <UART_SetConfig+0x958>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a820:	2b02      	cmp	r3, #2
 800a822:	d037      	beq.n	800a894 <UART_SetConfig+0x954>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a828:	2b03      	cmp	r3, #3
 800a82a:	d031      	beq.n	800a890 <UART_SetConfig+0x950>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a830:	2b04      	cmp	r3, #4
 800a832:	d02b      	beq.n	800a88c <UART_SetConfig+0x94c>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a838:	2b05      	cmp	r3, #5
 800a83a:	d025      	beq.n	800a888 <UART_SetConfig+0x948>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a840:	2b06      	cmp	r3, #6
 800a842:	d01f      	beq.n	800a884 <UART_SetConfig+0x944>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a848:	2b07      	cmp	r3, #7
 800a84a:	d019      	beq.n	800a880 <UART_SetConfig+0x940>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a850:	2b08      	cmp	r3, #8
 800a852:	d013      	beq.n	800a87c <UART_SetConfig+0x93c>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a858:	2b09      	cmp	r3, #9
 800a85a:	d00d      	beq.n	800a878 <UART_SetConfig+0x938>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a860:	2b0a      	cmp	r3, #10
 800a862:	d007      	beq.n	800a874 <UART_SetConfig+0x934>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a868:	2b0b      	cmp	r3, #11
 800a86a:	d101      	bne.n	800a870 <UART_SetConfig+0x930>
 800a86c:	4b36      	ldr	r3, [pc, #216]	; (800a948 <UART_SetConfig+0xa08>)
 800a86e:	e016      	b.n	800a89e <UART_SetConfig+0x95e>
 800a870:	4b34      	ldr	r3, [pc, #208]	; (800a944 <UART_SetConfig+0xa04>)
 800a872:	e014      	b.n	800a89e <UART_SetConfig+0x95e>
 800a874:	4b35      	ldr	r3, [pc, #212]	; (800a94c <UART_SetConfig+0xa0c>)
 800a876:	e012      	b.n	800a89e <UART_SetConfig+0x95e>
 800a878:	4b35      	ldr	r3, [pc, #212]	; (800a950 <UART_SetConfig+0xa10>)
 800a87a:	e010      	b.n	800a89e <UART_SetConfig+0x95e>
 800a87c:	4b35      	ldr	r3, [pc, #212]	; (800a954 <UART_SetConfig+0xa14>)
 800a87e:	e00e      	b.n	800a89e <UART_SetConfig+0x95e>
 800a880:	4b35      	ldr	r3, [pc, #212]	; (800a958 <UART_SetConfig+0xa18>)
 800a882:	e00c      	b.n	800a89e <UART_SetConfig+0x95e>
 800a884:	4b35      	ldr	r3, [pc, #212]	; (800a95c <UART_SetConfig+0xa1c>)
 800a886:	e00a      	b.n	800a89e <UART_SetConfig+0x95e>
 800a888:	4b35      	ldr	r3, [pc, #212]	; (800a960 <UART_SetConfig+0xa20>)
 800a88a:	e008      	b.n	800a89e <UART_SetConfig+0x95e>
 800a88c:	4b35      	ldr	r3, [pc, #212]	; (800a964 <UART_SetConfig+0xa24>)
 800a88e:	e006      	b.n	800a89e <UART_SetConfig+0x95e>
 800a890:	4b35      	ldr	r3, [pc, #212]	; (800a968 <UART_SetConfig+0xa28>)
 800a892:	e004      	b.n	800a89e <UART_SetConfig+0x95e>
 800a894:	4b35      	ldr	r3, [pc, #212]	; (800a96c <UART_SetConfig+0xa2c>)
 800a896:	e002      	b.n	800a89e <UART_SetConfig+0x95e>
 800a898:	4b35      	ldr	r3, [pc, #212]	; (800a970 <UART_SetConfig+0xa30>)
 800a89a:	e000      	b.n	800a89e <UART_SetConfig+0x95e>
 800a89c:	4b29      	ldr	r3, [pc, #164]	; (800a944 <UART_SetConfig+0xa04>)
 800a89e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8a0:	e0cb      	b.n	800aa3a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d046      	beq.n	800a938 <UART_SetConfig+0x9f8>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d040      	beq.n	800a934 <UART_SetConfig+0x9f4>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d03a      	beq.n	800a930 <UART_SetConfig+0x9f0>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8be:	2b03      	cmp	r3, #3
 800a8c0:	d034      	beq.n	800a92c <UART_SetConfig+0x9ec>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	2b04      	cmp	r3, #4
 800a8c8:	d02e      	beq.n	800a928 <UART_SetConfig+0x9e8>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	2b05      	cmp	r3, #5
 800a8d0:	d028      	beq.n	800a924 <UART_SetConfig+0x9e4>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d6:	2b06      	cmp	r3, #6
 800a8d8:	d022      	beq.n	800a920 <UART_SetConfig+0x9e0>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8de:	2b07      	cmp	r3, #7
 800a8e0:	d01c      	beq.n	800a91c <UART_SetConfig+0x9dc>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e6:	2b08      	cmp	r3, #8
 800a8e8:	d016      	beq.n	800a918 <UART_SetConfig+0x9d8>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ee:	2b09      	cmp	r3, #9
 800a8f0:	d00f      	beq.n	800a912 <UART_SetConfig+0x9d2>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f6:	2b0a      	cmp	r3, #10
 800a8f8:	d008      	beq.n	800a90c <UART_SetConfig+0x9cc>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fe:	2b0b      	cmp	r3, #11
 800a900:	d102      	bne.n	800a908 <UART_SetConfig+0x9c8>
 800a902:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a906:	e018      	b.n	800a93a <UART_SetConfig+0x9fa>
 800a908:	4b13      	ldr	r3, [pc, #76]	; (800a958 <UART_SetConfig+0xa18>)
 800a90a:	e016      	b.n	800a93a <UART_SetConfig+0x9fa>
 800a90c:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a910:	e013      	b.n	800a93a <UART_SetConfig+0x9fa>
 800a912:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a916:	e010      	b.n	800a93a <UART_SetConfig+0x9fa>
 800a918:	4b16      	ldr	r3, [pc, #88]	; (800a974 <UART_SetConfig+0xa34>)
 800a91a:	e00e      	b.n	800a93a <UART_SetConfig+0x9fa>
 800a91c:	4b0a      	ldr	r3, [pc, #40]	; (800a948 <UART_SetConfig+0xa08>)
 800a91e:	e00c      	b.n	800a93a <UART_SetConfig+0x9fa>
 800a920:	4b15      	ldr	r3, [pc, #84]	; (800a978 <UART_SetConfig+0xa38>)
 800a922:	e00a      	b.n	800a93a <UART_SetConfig+0x9fa>
 800a924:	4b15      	ldr	r3, [pc, #84]	; (800a97c <UART_SetConfig+0xa3c>)
 800a926:	e008      	b.n	800a93a <UART_SetConfig+0x9fa>
 800a928:	4b08      	ldr	r3, [pc, #32]	; (800a94c <UART_SetConfig+0xa0c>)
 800a92a:	e006      	b.n	800a93a <UART_SetConfig+0x9fa>
 800a92c:	4b14      	ldr	r3, [pc, #80]	; (800a980 <UART_SetConfig+0xa40>)
 800a92e:	e004      	b.n	800a93a <UART_SetConfig+0x9fa>
 800a930:	4b07      	ldr	r3, [pc, #28]	; (800a950 <UART_SetConfig+0xa10>)
 800a932:	e002      	b.n	800a93a <UART_SetConfig+0x9fa>
 800a934:	4b07      	ldr	r3, [pc, #28]	; (800a954 <UART_SetConfig+0xa14>)
 800a936:	e000      	b.n	800a93a <UART_SetConfig+0x9fa>
 800a938:	4b07      	ldr	r3, [pc, #28]	; (800a958 <UART_SetConfig+0xa18>)
 800a93a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a93c:	e07d      	b.n	800aa3a <UART_SetConfig+0xafa>
 800a93e:	bf00      	nop
 800a940:	58024400 	.word	0x58024400
 800a944:	03d09000 	.word	0x03d09000
 800a948:	0003d090 	.word	0x0003d090
 800a94c:	0007a120 	.word	0x0007a120
 800a950:	000f4240 	.word	0x000f4240
 800a954:	001e8480 	.word	0x001e8480
 800a958:	003d0900 	.word	0x003d0900
 800a95c:	00516155 	.word	0x00516155
 800a960:	0061a800 	.word	0x0061a800
 800a964:	007a1200 	.word	0x007a1200
 800a968:	00a2c2aa 	.word	0x00a2c2aa
 800a96c:	00f42400 	.word	0x00f42400
 800a970:	01e84800 	.word	0x01e84800
 800a974:	0001e848 	.word	0x0001e848
 800a978:	00051615 	.word	0x00051615
 800a97c:	00061a80 	.word	0x00061a80
 800a980:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d04e      	beq.n	800aa2a <UART_SetConfig+0xaea>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a990:	2b01      	cmp	r3, #1
 800a992:	d047      	beq.n	800aa24 <UART_SetConfig+0xae4>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d040      	beq.n	800aa1e <UART_SetConfig+0xade>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a0:	2b03      	cmp	r3, #3
 800a9a2:	d039      	beq.n	800aa18 <UART_SetConfig+0xad8>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a8:	2b04      	cmp	r3, #4
 800a9aa:	d032      	beq.n	800aa12 <UART_SetConfig+0xad2>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b0:	2b05      	cmp	r3, #5
 800a9b2:	d02b      	beq.n	800aa0c <UART_SetConfig+0xacc>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b8:	2b06      	cmp	r3, #6
 800a9ba:	d024      	beq.n	800aa06 <UART_SetConfig+0xac6>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c0:	2b07      	cmp	r3, #7
 800a9c2:	d01d      	beq.n	800aa00 <UART_SetConfig+0xac0>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c8:	2b08      	cmp	r3, #8
 800a9ca:	d016      	beq.n	800a9fa <UART_SetConfig+0xaba>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d0:	2b09      	cmp	r3, #9
 800a9d2:	d00f      	beq.n	800a9f4 <UART_SetConfig+0xab4>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d8:	2b0a      	cmp	r3, #10
 800a9da:	d008      	beq.n	800a9ee <UART_SetConfig+0xaae>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e0:	2b0b      	cmp	r3, #11
 800a9e2:	d101      	bne.n	800a9e8 <UART_SetConfig+0xaa8>
 800a9e4:	2380      	movs	r3, #128	; 0x80
 800a9e6:	e022      	b.n	800aa2e <UART_SetConfig+0xaee>
 800a9e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9ec:	e01f      	b.n	800aa2e <UART_SetConfig+0xaee>
 800a9ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9f2:	e01c      	b.n	800aa2e <UART_SetConfig+0xaee>
 800a9f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9f8:	e019      	b.n	800aa2e <UART_SetConfig+0xaee>
 800a9fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9fe:	e016      	b.n	800aa2e <UART_SetConfig+0xaee>
 800aa00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa04:	e013      	b.n	800aa2e <UART_SetConfig+0xaee>
 800aa06:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800aa0a:	e010      	b.n	800aa2e <UART_SetConfig+0xaee>
 800aa0c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800aa10:	e00d      	b.n	800aa2e <UART_SetConfig+0xaee>
 800aa12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa16:	e00a      	b.n	800aa2e <UART_SetConfig+0xaee>
 800aa18:	f241 5355 	movw	r3, #5461	; 0x1555
 800aa1c:	e007      	b.n	800aa2e <UART_SetConfig+0xaee>
 800aa1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa22:	e004      	b.n	800aa2e <UART_SetConfig+0xaee>
 800aa24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa28:	e001      	b.n	800aa2e <UART_SetConfig+0xaee>
 800aa2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa30:	e003      	b.n	800aa3a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800aa38:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800aa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f001 83e8 	beq.w	800c212 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	685a      	ldr	r2, [r3, #4]
 800aa46:	4613      	mov	r3, r2
 800aa48:	005b      	lsls	r3, r3, #1
 800aa4a:	4413      	add	r3, r2
 800aa4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d305      	bcc.n	800aa5e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d904      	bls.n	800aa68 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa64:	f001 bbd5 	b.w	800c212 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800aa68:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aa6c:	2b08      	cmp	r3, #8
 800aa6e:	f000 8154 	beq.w	800ad1a <UART_SetConfig+0xdda>
 800aa72:	2b08      	cmp	r3, #8
 800aa74:	dc06      	bgt.n	800aa84 <UART_SetConfig+0xb44>
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	d00f      	beq.n	800aa9a <UART_SetConfig+0xb5a>
 800aa7a:	2b04      	cmp	r3, #4
 800aa7c:	f000 80ac 	beq.w	800abd8 <UART_SetConfig+0xc98>
 800aa80:	f000 bc30 	b.w	800b2e4 <UART_SetConfig+0x13a4>
 800aa84:	2b20      	cmp	r3, #32
 800aa86:	f000 832d 	beq.w	800b0e4 <UART_SetConfig+0x11a4>
 800aa8a:	2b40      	cmp	r3, #64	; 0x40
 800aa8c:	f000 83a5 	beq.w	800b1da <UART_SetConfig+0x129a>
 800aa90:	2b10      	cmp	r3, #16
 800aa92:	f000 81e3 	beq.w	800ae5c <UART_SetConfig+0xf1c>
 800aa96:	f000 bc25 	b.w	800b2e4 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aa9a:	f7fd fdb7 	bl	800860c <HAL_RCCEx_GetD3PCLK1Freq>
 800aa9e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f04f 0100 	mov.w	r1, #0
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d067      	beq.n	800ab80 <UART_SetConfig+0xc40>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d05e      	beq.n	800ab76 <UART_SetConfig+0xc36>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	d055      	beq.n	800ab6c <UART_SetConfig+0xc2c>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac4:	2b03      	cmp	r3, #3
 800aac6:	d04c      	beq.n	800ab62 <UART_SetConfig+0xc22>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aacc:	2b04      	cmp	r3, #4
 800aace:	d043      	beq.n	800ab58 <UART_SetConfig+0xc18>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad4:	2b05      	cmp	r3, #5
 800aad6:	d03a      	beq.n	800ab4e <UART_SetConfig+0xc0e>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aadc:	2b06      	cmp	r3, #6
 800aade:	d031      	beq.n	800ab44 <UART_SetConfig+0xc04>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae4:	2b07      	cmp	r3, #7
 800aae6:	d028      	beq.n	800ab3a <UART_SetConfig+0xbfa>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaec:	2b08      	cmp	r3, #8
 800aaee:	d01f      	beq.n	800ab30 <UART_SetConfig+0xbf0>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf4:	2b09      	cmp	r3, #9
 800aaf6:	d016      	beq.n	800ab26 <UART_SetConfig+0xbe6>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafc:	2b0a      	cmp	r3, #10
 800aafe:	d00d      	beq.n	800ab1c <UART_SetConfig+0xbdc>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab04:	2b0b      	cmp	r3, #11
 800ab06:	d104      	bne.n	800ab12 <UART_SetConfig+0xbd2>
 800ab08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab0c:	f04f 0400 	mov.w	r4, #0
 800ab10:	e03a      	b.n	800ab88 <UART_SetConfig+0xc48>
 800ab12:	f04f 0301 	mov.w	r3, #1
 800ab16:	f04f 0400 	mov.w	r4, #0
 800ab1a:	e035      	b.n	800ab88 <UART_SetConfig+0xc48>
 800ab1c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ab20:	f04f 0400 	mov.w	r4, #0
 800ab24:	e030      	b.n	800ab88 <UART_SetConfig+0xc48>
 800ab26:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ab2a:	f04f 0400 	mov.w	r4, #0
 800ab2e:	e02b      	b.n	800ab88 <UART_SetConfig+0xc48>
 800ab30:	f04f 0320 	mov.w	r3, #32
 800ab34:	f04f 0400 	mov.w	r4, #0
 800ab38:	e026      	b.n	800ab88 <UART_SetConfig+0xc48>
 800ab3a:	f04f 0310 	mov.w	r3, #16
 800ab3e:	f04f 0400 	mov.w	r4, #0
 800ab42:	e021      	b.n	800ab88 <UART_SetConfig+0xc48>
 800ab44:	f04f 030c 	mov.w	r3, #12
 800ab48:	f04f 0400 	mov.w	r4, #0
 800ab4c:	e01c      	b.n	800ab88 <UART_SetConfig+0xc48>
 800ab4e:	f04f 030a 	mov.w	r3, #10
 800ab52:	f04f 0400 	mov.w	r4, #0
 800ab56:	e017      	b.n	800ab88 <UART_SetConfig+0xc48>
 800ab58:	f04f 0308 	mov.w	r3, #8
 800ab5c:	f04f 0400 	mov.w	r4, #0
 800ab60:	e012      	b.n	800ab88 <UART_SetConfig+0xc48>
 800ab62:	f04f 0306 	mov.w	r3, #6
 800ab66:	f04f 0400 	mov.w	r4, #0
 800ab6a:	e00d      	b.n	800ab88 <UART_SetConfig+0xc48>
 800ab6c:	f04f 0304 	mov.w	r3, #4
 800ab70:	f04f 0400 	mov.w	r4, #0
 800ab74:	e008      	b.n	800ab88 <UART_SetConfig+0xc48>
 800ab76:	f04f 0302 	mov.w	r3, #2
 800ab7a:	f04f 0400 	mov.w	r4, #0
 800ab7e:	e003      	b.n	800ab88 <UART_SetConfig+0xc48>
 800ab80:	f04f 0301 	mov.w	r3, #1
 800ab84:	f04f 0400 	mov.w	r4, #0
 800ab88:	461a      	mov	r2, r3
 800ab8a:	4623      	mov	r3, r4
 800ab8c:	f7f5 fba4 	bl	80002d8 <__aeabi_uldivmod>
 800ab90:	4603      	mov	r3, r0
 800ab92:	460c      	mov	r4, r1
 800ab94:	4619      	mov	r1, r3
 800ab96:	4622      	mov	r2, r4
 800ab98:	f04f 0300 	mov.w	r3, #0
 800ab9c:	f04f 0400 	mov.w	r4, #0
 800aba0:	0214      	lsls	r4, r2, #8
 800aba2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800aba6:	020b      	lsls	r3, r1, #8
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	6852      	ldr	r2, [r2, #4]
 800abac:	0852      	lsrs	r2, r2, #1
 800abae:	4611      	mov	r1, r2
 800abb0:	f04f 0200 	mov.w	r2, #0
 800abb4:	eb13 0b01 	adds.w	fp, r3, r1
 800abb8:	eb44 0c02 	adc.w	ip, r4, r2
 800abbc:	4658      	mov	r0, fp
 800abbe:	4661      	mov	r1, ip
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	f04f 0400 	mov.w	r4, #0
 800abc8:	461a      	mov	r2, r3
 800abca:	4623      	mov	r3, r4
 800abcc:	f7f5 fb84 	bl	80002d8 <__aeabi_uldivmod>
 800abd0:	4603      	mov	r3, r0
 800abd2:	460c      	mov	r4, r1
 800abd4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800abd6:	e389      	b.n	800b2ec <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abd8:	f107 0318 	add.w	r3, r7, #24
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fd fd2b 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	4618      	mov	r0, r3
 800abe6:	f04f 0100 	mov.w	r1, #0
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d067      	beq.n	800acc2 <UART_SetConfig+0xd82>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d05e      	beq.n	800acb8 <UART_SetConfig+0xd78>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d055      	beq.n	800acae <UART_SetConfig+0xd6e>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	d04c      	beq.n	800aca4 <UART_SetConfig+0xd64>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0e:	2b04      	cmp	r3, #4
 800ac10:	d043      	beq.n	800ac9a <UART_SetConfig+0xd5a>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac16:	2b05      	cmp	r3, #5
 800ac18:	d03a      	beq.n	800ac90 <UART_SetConfig+0xd50>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1e:	2b06      	cmp	r3, #6
 800ac20:	d031      	beq.n	800ac86 <UART_SetConfig+0xd46>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac26:	2b07      	cmp	r3, #7
 800ac28:	d028      	beq.n	800ac7c <UART_SetConfig+0xd3c>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2e:	2b08      	cmp	r3, #8
 800ac30:	d01f      	beq.n	800ac72 <UART_SetConfig+0xd32>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac36:	2b09      	cmp	r3, #9
 800ac38:	d016      	beq.n	800ac68 <UART_SetConfig+0xd28>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3e:	2b0a      	cmp	r3, #10
 800ac40:	d00d      	beq.n	800ac5e <UART_SetConfig+0xd1e>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac46:	2b0b      	cmp	r3, #11
 800ac48:	d104      	bne.n	800ac54 <UART_SetConfig+0xd14>
 800ac4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac4e:	f04f 0400 	mov.w	r4, #0
 800ac52:	e03a      	b.n	800acca <UART_SetConfig+0xd8a>
 800ac54:	f04f 0301 	mov.w	r3, #1
 800ac58:	f04f 0400 	mov.w	r4, #0
 800ac5c:	e035      	b.n	800acca <UART_SetConfig+0xd8a>
 800ac5e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ac62:	f04f 0400 	mov.w	r4, #0
 800ac66:	e030      	b.n	800acca <UART_SetConfig+0xd8a>
 800ac68:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ac6c:	f04f 0400 	mov.w	r4, #0
 800ac70:	e02b      	b.n	800acca <UART_SetConfig+0xd8a>
 800ac72:	f04f 0320 	mov.w	r3, #32
 800ac76:	f04f 0400 	mov.w	r4, #0
 800ac7a:	e026      	b.n	800acca <UART_SetConfig+0xd8a>
 800ac7c:	f04f 0310 	mov.w	r3, #16
 800ac80:	f04f 0400 	mov.w	r4, #0
 800ac84:	e021      	b.n	800acca <UART_SetConfig+0xd8a>
 800ac86:	f04f 030c 	mov.w	r3, #12
 800ac8a:	f04f 0400 	mov.w	r4, #0
 800ac8e:	e01c      	b.n	800acca <UART_SetConfig+0xd8a>
 800ac90:	f04f 030a 	mov.w	r3, #10
 800ac94:	f04f 0400 	mov.w	r4, #0
 800ac98:	e017      	b.n	800acca <UART_SetConfig+0xd8a>
 800ac9a:	f04f 0308 	mov.w	r3, #8
 800ac9e:	f04f 0400 	mov.w	r4, #0
 800aca2:	e012      	b.n	800acca <UART_SetConfig+0xd8a>
 800aca4:	f04f 0306 	mov.w	r3, #6
 800aca8:	f04f 0400 	mov.w	r4, #0
 800acac:	e00d      	b.n	800acca <UART_SetConfig+0xd8a>
 800acae:	f04f 0304 	mov.w	r3, #4
 800acb2:	f04f 0400 	mov.w	r4, #0
 800acb6:	e008      	b.n	800acca <UART_SetConfig+0xd8a>
 800acb8:	f04f 0302 	mov.w	r3, #2
 800acbc:	f04f 0400 	mov.w	r4, #0
 800acc0:	e003      	b.n	800acca <UART_SetConfig+0xd8a>
 800acc2:	f04f 0301 	mov.w	r3, #1
 800acc6:	f04f 0400 	mov.w	r4, #0
 800acca:	461a      	mov	r2, r3
 800accc:	4623      	mov	r3, r4
 800acce:	f7f5 fb03 	bl	80002d8 <__aeabi_uldivmod>
 800acd2:	4603      	mov	r3, r0
 800acd4:	460c      	mov	r4, r1
 800acd6:	4619      	mov	r1, r3
 800acd8:	4622      	mov	r2, r4
 800acda:	f04f 0300 	mov.w	r3, #0
 800acde:	f04f 0400 	mov.w	r4, #0
 800ace2:	0214      	lsls	r4, r2, #8
 800ace4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ace8:	020b      	lsls	r3, r1, #8
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	6852      	ldr	r2, [r2, #4]
 800acee:	0852      	lsrs	r2, r2, #1
 800acf0:	4611      	mov	r1, r2
 800acf2:	f04f 0200 	mov.w	r2, #0
 800acf6:	eb13 0b01 	adds.w	fp, r3, r1
 800acfa:	eb44 0c02 	adc.w	ip, r4, r2
 800acfe:	4658      	mov	r0, fp
 800ad00:	4661      	mov	r1, ip
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	f04f 0400 	mov.w	r4, #0
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	4623      	mov	r3, r4
 800ad0e:	f7f5 fae3 	bl	80002d8 <__aeabi_uldivmod>
 800ad12:	4603      	mov	r3, r0
 800ad14:	460c      	mov	r4, r1
 800ad16:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ad18:	e2e8      	b.n	800b2ec <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad1a:	f107 030c 	add.w	r3, r7, #12
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fd fdd6 	bl	80088d0 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	4618      	mov	r0, r3
 800ad28:	f04f 0100 	mov.w	r1, #0
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d067      	beq.n	800ae04 <UART_SetConfig+0xec4>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d05e      	beq.n	800adfa <UART_SetConfig+0xeba>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d055      	beq.n	800adf0 <UART_SetConfig+0xeb0>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad48:	2b03      	cmp	r3, #3
 800ad4a:	d04c      	beq.n	800ade6 <UART_SetConfig+0xea6>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad50:	2b04      	cmp	r3, #4
 800ad52:	d043      	beq.n	800addc <UART_SetConfig+0xe9c>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad58:	2b05      	cmp	r3, #5
 800ad5a:	d03a      	beq.n	800add2 <UART_SetConfig+0xe92>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad60:	2b06      	cmp	r3, #6
 800ad62:	d031      	beq.n	800adc8 <UART_SetConfig+0xe88>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad68:	2b07      	cmp	r3, #7
 800ad6a:	d028      	beq.n	800adbe <UART_SetConfig+0xe7e>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad70:	2b08      	cmp	r3, #8
 800ad72:	d01f      	beq.n	800adb4 <UART_SetConfig+0xe74>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad78:	2b09      	cmp	r3, #9
 800ad7a:	d016      	beq.n	800adaa <UART_SetConfig+0xe6a>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad80:	2b0a      	cmp	r3, #10
 800ad82:	d00d      	beq.n	800ada0 <UART_SetConfig+0xe60>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad88:	2b0b      	cmp	r3, #11
 800ad8a:	d104      	bne.n	800ad96 <UART_SetConfig+0xe56>
 800ad8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad90:	f04f 0400 	mov.w	r4, #0
 800ad94:	e03a      	b.n	800ae0c <UART_SetConfig+0xecc>
 800ad96:	f04f 0301 	mov.w	r3, #1
 800ad9a:	f04f 0400 	mov.w	r4, #0
 800ad9e:	e035      	b.n	800ae0c <UART_SetConfig+0xecc>
 800ada0:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ada4:	f04f 0400 	mov.w	r4, #0
 800ada8:	e030      	b.n	800ae0c <UART_SetConfig+0xecc>
 800adaa:	f04f 0340 	mov.w	r3, #64	; 0x40
 800adae:	f04f 0400 	mov.w	r4, #0
 800adb2:	e02b      	b.n	800ae0c <UART_SetConfig+0xecc>
 800adb4:	f04f 0320 	mov.w	r3, #32
 800adb8:	f04f 0400 	mov.w	r4, #0
 800adbc:	e026      	b.n	800ae0c <UART_SetConfig+0xecc>
 800adbe:	f04f 0310 	mov.w	r3, #16
 800adc2:	f04f 0400 	mov.w	r4, #0
 800adc6:	e021      	b.n	800ae0c <UART_SetConfig+0xecc>
 800adc8:	f04f 030c 	mov.w	r3, #12
 800adcc:	f04f 0400 	mov.w	r4, #0
 800add0:	e01c      	b.n	800ae0c <UART_SetConfig+0xecc>
 800add2:	f04f 030a 	mov.w	r3, #10
 800add6:	f04f 0400 	mov.w	r4, #0
 800adda:	e017      	b.n	800ae0c <UART_SetConfig+0xecc>
 800addc:	f04f 0308 	mov.w	r3, #8
 800ade0:	f04f 0400 	mov.w	r4, #0
 800ade4:	e012      	b.n	800ae0c <UART_SetConfig+0xecc>
 800ade6:	f04f 0306 	mov.w	r3, #6
 800adea:	f04f 0400 	mov.w	r4, #0
 800adee:	e00d      	b.n	800ae0c <UART_SetConfig+0xecc>
 800adf0:	f04f 0304 	mov.w	r3, #4
 800adf4:	f04f 0400 	mov.w	r4, #0
 800adf8:	e008      	b.n	800ae0c <UART_SetConfig+0xecc>
 800adfa:	f04f 0302 	mov.w	r3, #2
 800adfe:	f04f 0400 	mov.w	r4, #0
 800ae02:	e003      	b.n	800ae0c <UART_SetConfig+0xecc>
 800ae04:	f04f 0301 	mov.w	r3, #1
 800ae08:	f04f 0400 	mov.w	r4, #0
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	4623      	mov	r3, r4
 800ae10:	f7f5 fa62 	bl	80002d8 <__aeabi_uldivmod>
 800ae14:	4603      	mov	r3, r0
 800ae16:	460c      	mov	r4, r1
 800ae18:	4619      	mov	r1, r3
 800ae1a:	4622      	mov	r2, r4
 800ae1c:	f04f 0300 	mov.w	r3, #0
 800ae20:	f04f 0400 	mov.w	r4, #0
 800ae24:	0214      	lsls	r4, r2, #8
 800ae26:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ae2a:	020b      	lsls	r3, r1, #8
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	6852      	ldr	r2, [r2, #4]
 800ae30:	0852      	lsrs	r2, r2, #1
 800ae32:	4611      	mov	r1, r2
 800ae34:	f04f 0200 	mov.w	r2, #0
 800ae38:	eb13 0b01 	adds.w	fp, r3, r1
 800ae3c:	eb44 0c02 	adc.w	ip, r4, r2
 800ae40:	4658      	mov	r0, fp
 800ae42:	4661      	mov	r1, ip
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	f04f 0400 	mov.w	r4, #0
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	4623      	mov	r3, r4
 800ae50:	f7f5 fa42 	bl	80002d8 <__aeabi_uldivmod>
 800ae54:	4603      	mov	r3, r0
 800ae56:	460c      	mov	r4, r1
 800ae58:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ae5a:	e247      	b.n	800b2ec <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae5c:	4b96      	ldr	r3, [pc, #600]	; (800b0b8 <UART_SetConfig+0x1178>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f003 0320 	and.w	r3, r3, #32
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f000 80a3 	beq.w	800afb0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae6a:	4b93      	ldr	r3, [pc, #588]	; (800b0b8 <UART_SetConfig+0x1178>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	08db      	lsrs	r3, r3, #3
 800ae70:	f003 0303 	and.w	r3, r3, #3
 800ae74:	4a91      	ldr	r2, [pc, #580]	; (800b0bc <UART_SetConfig+0x117c>)
 800ae76:	fa22 f303 	lsr.w	r3, r2, r3
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f04f 0100 	mov.w	r1, #0
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d067      	beq.n	800af58 <UART_SetConfig+0x1018>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d05e      	beq.n	800af4e <UART_SetConfig+0x100e>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d055      	beq.n	800af44 <UART_SetConfig+0x1004>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9c:	2b03      	cmp	r3, #3
 800ae9e:	d04c      	beq.n	800af3a <UART_SetConfig+0xffa>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea4:	2b04      	cmp	r3, #4
 800aea6:	d043      	beq.n	800af30 <UART_SetConfig+0xff0>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeac:	2b05      	cmp	r3, #5
 800aeae:	d03a      	beq.n	800af26 <UART_SetConfig+0xfe6>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb4:	2b06      	cmp	r3, #6
 800aeb6:	d031      	beq.n	800af1c <UART_SetConfig+0xfdc>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aebc:	2b07      	cmp	r3, #7
 800aebe:	d028      	beq.n	800af12 <UART_SetConfig+0xfd2>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec4:	2b08      	cmp	r3, #8
 800aec6:	d01f      	beq.n	800af08 <UART_SetConfig+0xfc8>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aecc:	2b09      	cmp	r3, #9
 800aece:	d016      	beq.n	800aefe <UART_SetConfig+0xfbe>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed4:	2b0a      	cmp	r3, #10
 800aed6:	d00d      	beq.n	800aef4 <UART_SetConfig+0xfb4>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aedc:	2b0b      	cmp	r3, #11
 800aede:	d104      	bne.n	800aeea <UART_SetConfig+0xfaa>
 800aee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aee4:	f04f 0400 	mov.w	r4, #0
 800aee8:	e03a      	b.n	800af60 <UART_SetConfig+0x1020>
 800aeea:	f04f 0301 	mov.w	r3, #1
 800aeee:	f04f 0400 	mov.w	r4, #0
 800aef2:	e035      	b.n	800af60 <UART_SetConfig+0x1020>
 800aef4:	f04f 0380 	mov.w	r3, #128	; 0x80
 800aef8:	f04f 0400 	mov.w	r4, #0
 800aefc:	e030      	b.n	800af60 <UART_SetConfig+0x1020>
 800aefe:	f04f 0340 	mov.w	r3, #64	; 0x40
 800af02:	f04f 0400 	mov.w	r4, #0
 800af06:	e02b      	b.n	800af60 <UART_SetConfig+0x1020>
 800af08:	f04f 0320 	mov.w	r3, #32
 800af0c:	f04f 0400 	mov.w	r4, #0
 800af10:	e026      	b.n	800af60 <UART_SetConfig+0x1020>
 800af12:	f04f 0310 	mov.w	r3, #16
 800af16:	f04f 0400 	mov.w	r4, #0
 800af1a:	e021      	b.n	800af60 <UART_SetConfig+0x1020>
 800af1c:	f04f 030c 	mov.w	r3, #12
 800af20:	f04f 0400 	mov.w	r4, #0
 800af24:	e01c      	b.n	800af60 <UART_SetConfig+0x1020>
 800af26:	f04f 030a 	mov.w	r3, #10
 800af2a:	f04f 0400 	mov.w	r4, #0
 800af2e:	e017      	b.n	800af60 <UART_SetConfig+0x1020>
 800af30:	f04f 0308 	mov.w	r3, #8
 800af34:	f04f 0400 	mov.w	r4, #0
 800af38:	e012      	b.n	800af60 <UART_SetConfig+0x1020>
 800af3a:	f04f 0306 	mov.w	r3, #6
 800af3e:	f04f 0400 	mov.w	r4, #0
 800af42:	e00d      	b.n	800af60 <UART_SetConfig+0x1020>
 800af44:	f04f 0304 	mov.w	r3, #4
 800af48:	f04f 0400 	mov.w	r4, #0
 800af4c:	e008      	b.n	800af60 <UART_SetConfig+0x1020>
 800af4e:	f04f 0302 	mov.w	r3, #2
 800af52:	f04f 0400 	mov.w	r4, #0
 800af56:	e003      	b.n	800af60 <UART_SetConfig+0x1020>
 800af58:	f04f 0301 	mov.w	r3, #1
 800af5c:	f04f 0400 	mov.w	r4, #0
 800af60:	461a      	mov	r2, r3
 800af62:	4623      	mov	r3, r4
 800af64:	f7f5 f9b8 	bl	80002d8 <__aeabi_uldivmod>
 800af68:	4603      	mov	r3, r0
 800af6a:	460c      	mov	r4, r1
 800af6c:	4619      	mov	r1, r3
 800af6e:	4622      	mov	r2, r4
 800af70:	f04f 0300 	mov.w	r3, #0
 800af74:	f04f 0400 	mov.w	r4, #0
 800af78:	0214      	lsls	r4, r2, #8
 800af7a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800af7e:	020b      	lsls	r3, r1, #8
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	6852      	ldr	r2, [r2, #4]
 800af84:	0852      	lsrs	r2, r2, #1
 800af86:	4611      	mov	r1, r2
 800af88:	f04f 0200 	mov.w	r2, #0
 800af8c:	eb13 0b01 	adds.w	fp, r3, r1
 800af90:	eb44 0c02 	adc.w	ip, r4, r2
 800af94:	4658      	mov	r0, fp
 800af96:	4661      	mov	r1, ip
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	f04f 0400 	mov.w	r4, #0
 800afa0:	461a      	mov	r2, r3
 800afa2:	4623      	mov	r3, r4
 800afa4:	f7f5 f998 	bl	80002d8 <__aeabi_uldivmod>
 800afa8:	4603      	mov	r3, r0
 800afaa:	460c      	mov	r4, r1
 800afac:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800afae:	e19d      	b.n	800b2ec <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d05b      	beq.n	800b070 <UART_SetConfig+0x1130>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d053      	beq.n	800b068 <UART_SetConfig+0x1128>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	d04b      	beq.n	800b060 <UART_SetConfig+0x1120>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afcc:	2b03      	cmp	r3, #3
 800afce:	d043      	beq.n	800b058 <UART_SetConfig+0x1118>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd4:	2b04      	cmp	r3, #4
 800afd6:	d03b      	beq.n	800b050 <UART_SetConfig+0x1110>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afdc:	2b05      	cmp	r3, #5
 800afde:	d033      	beq.n	800b048 <UART_SetConfig+0x1108>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe4:	2b06      	cmp	r3, #6
 800afe6:	d02b      	beq.n	800b040 <UART_SetConfig+0x1100>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afec:	2b07      	cmp	r3, #7
 800afee:	d023      	beq.n	800b038 <UART_SetConfig+0x10f8>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff4:	2b08      	cmp	r3, #8
 800aff6:	d01b      	beq.n	800b030 <UART_SetConfig+0x10f0>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affc:	2b09      	cmp	r3, #9
 800affe:	d013      	beq.n	800b028 <UART_SetConfig+0x10e8>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b004:	2b0a      	cmp	r3, #10
 800b006:	d00b      	beq.n	800b020 <UART_SetConfig+0x10e0>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00c:	2b0b      	cmp	r3, #11
 800b00e:	d103      	bne.n	800b018 <UART_SetConfig+0x10d8>
 800b010:	4b2a      	ldr	r3, [pc, #168]	; (800b0bc <UART_SetConfig+0x117c>)
 800b012:	f04f 0400 	mov.w	r4, #0
 800b016:	e02e      	b.n	800b076 <UART_SetConfig+0x1136>
 800b018:	4b29      	ldr	r3, [pc, #164]	; (800b0c0 <UART_SetConfig+0x1180>)
 800b01a:	f04f 0403 	mov.w	r4, #3
 800b01e:	e02a      	b.n	800b076 <UART_SetConfig+0x1136>
 800b020:	4b28      	ldr	r3, [pc, #160]	; (800b0c4 <UART_SetConfig+0x1184>)
 800b022:	f04f 0400 	mov.w	r4, #0
 800b026:	e026      	b.n	800b076 <UART_SetConfig+0x1136>
 800b028:	4b27      	ldr	r3, [pc, #156]	; (800b0c8 <UART_SetConfig+0x1188>)
 800b02a:	f04f 0400 	mov.w	r4, #0
 800b02e:	e022      	b.n	800b076 <UART_SetConfig+0x1136>
 800b030:	4b26      	ldr	r3, [pc, #152]	; (800b0cc <UART_SetConfig+0x118c>)
 800b032:	f04f 0400 	mov.w	r4, #0
 800b036:	e01e      	b.n	800b076 <UART_SetConfig+0x1136>
 800b038:	4b25      	ldr	r3, [pc, #148]	; (800b0d0 <UART_SetConfig+0x1190>)
 800b03a:	f04f 0400 	mov.w	r4, #0
 800b03e:	e01a      	b.n	800b076 <UART_SetConfig+0x1136>
 800b040:	a419      	add	r4, pc, #100	; (adr r4, 800b0a8 <UART_SetConfig+0x1168>)
 800b042:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b046:	e016      	b.n	800b076 <UART_SetConfig+0x1136>
 800b048:	4b22      	ldr	r3, [pc, #136]	; (800b0d4 <UART_SetConfig+0x1194>)
 800b04a:	f04f 0400 	mov.w	r4, #0
 800b04e:	e012      	b.n	800b076 <UART_SetConfig+0x1136>
 800b050:	4b21      	ldr	r3, [pc, #132]	; (800b0d8 <UART_SetConfig+0x1198>)
 800b052:	f04f 0400 	mov.w	r4, #0
 800b056:	e00e      	b.n	800b076 <UART_SetConfig+0x1136>
 800b058:	a415      	add	r4, pc, #84	; (adr r4, 800b0b0 <UART_SetConfig+0x1170>)
 800b05a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b05e:	e00a      	b.n	800b076 <UART_SetConfig+0x1136>
 800b060:	4b1e      	ldr	r3, [pc, #120]	; (800b0dc <UART_SetConfig+0x119c>)
 800b062:	f04f 0400 	mov.w	r4, #0
 800b066:	e006      	b.n	800b076 <UART_SetConfig+0x1136>
 800b068:	4b1d      	ldr	r3, [pc, #116]	; (800b0e0 <UART_SetConfig+0x11a0>)
 800b06a:	f04f 0401 	mov.w	r4, #1
 800b06e:	e002      	b.n	800b076 <UART_SetConfig+0x1136>
 800b070:	4b13      	ldr	r3, [pc, #76]	; (800b0c0 <UART_SetConfig+0x1180>)
 800b072:	f04f 0403 	mov.w	r4, #3
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	6852      	ldr	r2, [r2, #4]
 800b07a:	0852      	lsrs	r2, r2, #1
 800b07c:	4611      	mov	r1, r2
 800b07e:	f04f 0200 	mov.w	r2, #0
 800b082:	eb13 0b01 	adds.w	fp, r3, r1
 800b086:	eb44 0c02 	adc.w	ip, r4, r2
 800b08a:	4658      	mov	r0, fp
 800b08c:	4661      	mov	r1, ip
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	f04f 0400 	mov.w	r4, #0
 800b096:	461a      	mov	r2, r3
 800b098:	4623      	mov	r3, r4
 800b09a:	f7f5 f91d 	bl	80002d8 <__aeabi_uldivmod>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	460c      	mov	r4, r1
 800b0a2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b0a4:	e122      	b.n	800b2ec <UART_SetConfig+0x13ac>
 800b0a6:	bf00      	nop
 800b0a8:	51615500 	.word	0x51615500
 800b0ac:	00000000 	.word	0x00000000
 800b0b0:	a2c2aa00 	.word	0xa2c2aa00
 800b0b4:	00000000 	.word	0x00000000
 800b0b8:	58024400 	.word	0x58024400
 800b0bc:	03d09000 	.word	0x03d09000
 800b0c0:	d0900000 	.word	0xd0900000
 800b0c4:	07a12000 	.word	0x07a12000
 800b0c8:	0f424000 	.word	0x0f424000
 800b0cc:	1e848000 	.word	0x1e848000
 800b0d0:	3d090000 	.word	0x3d090000
 800b0d4:	61a80000 	.word	0x61a80000
 800b0d8:	7a120000 	.word	0x7a120000
 800b0dc:	f4240000 	.word	0xf4240000
 800b0e0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d05b      	beq.n	800b1a4 <UART_SetConfig+0x1264>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d053      	beq.n	800b19c <UART_SetConfig+0x125c>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	d04b      	beq.n	800b194 <UART_SetConfig+0x1254>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b100:	2b03      	cmp	r3, #3
 800b102:	d043      	beq.n	800b18c <UART_SetConfig+0x124c>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b108:	2b04      	cmp	r3, #4
 800b10a:	d03b      	beq.n	800b184 <UART_SetConfig+0x1244>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b110:	2b05      	cmp	r3, #5
 800b112:	d033      	beq.n	800b17c <UART_SetConfig+0x123c>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b118:	2b06      	cmp	r3, #6
 800b11a:	d02b      	beq.n	800b174 <UART_SetConfig+0x1234>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b120:	2b07      	cmp	r3, #7
 800b122:	d023      	beq.n	800b16c <UART_SetConfig+0x122c>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b128:	2b08      	cmp	r3, #8
 800b12a:	d01b      	beq.n	800b164 <UART_SetConfig+0x1224>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b130:	2b09      	cmp	r3, #9
 800b132:	d013      	beq.n	800b15c <UART_SetConfig+0x121c>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b138:	2b0a      	cmp	r3, #10
 800b13a:	d00b      	beq.n	800b154 <UART_SetConfig+0x1214>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b140:	2b0b      	cmp	r3, #11
 800b142:	d103      	bne.n	800b14c <UART_SetConfig+0x120c>
 800b144:	4bc0      	ldr	r3, [pc, #768]	; (800b448 <UART_SetConfig+0x1508>)
 800b146:	f04f 0400 	mov.w	r4, #0
 800b14a:	e02e      	b.n	800b1aa <UART_SetConfig+0x126a>
 800b14c:	4bbf      	ldr	r3, [pc, #764]	; (800b44c <UART_SetConfig+0x150c>)
 800b14e:	f04f 0400 	mov.w	r4, #0
 800b152:	e02a      	b.n	800b1aa <UART_SetConfig+0x126a>
 800b154:	4bbe      	ldr	r3, [pc, #760]	; (800b450 <UART_SetConfig+0x1510>)
 800b156:	f04f 0400 	mov.w	r4, #0
 800b15a:	e026      	b.n	800b1aa <UART_SetConfig+0x126a>
 800b15c:	4bbd      	ldr	r3, [pc, #756]	; (800b454 <UART_SetConfig+0x1514>)
 800b15e:	f04f 0400 	mov.w	r4, #0
 800b162:	e022      	b.n	800b1aa <UART_SetConfig+0x126a>
 800b164:	4bbc      	ldr	r3, [pc, #752]	; (800b458 <UART_SetConfig+0x1518>)
 800b166:	f04f 0400 	mov.w	r4, #0
 800b16a:	e01e      	b.n	800b1aa <UART_SetConfig+0x126a>
 800b16c:	4bbb      	ldr	r3, [pc, #748]	; (800b45c <UART_SetConfig+0x151c>)
 800b16e:	f04f 0400 	mov.w	r4, #0
 800b172:	e01a      	b.n	800b1aa <UART_SetConfig+0x126a>
 800b174:	a4b0      	add	r4, pc, #704	; (adr r4, 800b438 <UART_SetConfig+0x14f8>)
 800b176:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b17a:	e016      	b.n	800b1aa <UART_SetConfig+0x126a>
 800b17c:	4bb8      	ldr	r3, [pc, #736]	; (800b460 <UART_SetConfig+0x1520>)
 800b17e:	f04f 0400 	mov.w	r4, #0
 800b182:	e012      	b.n	800b1aa <UART_SetConfig+0x126a>
 800b184:	4bb7      	ldr	r3, [pc, #732]	; (800b464 <UART_SetConfig+0x1524>)
 800b186:	f04f 0400 	mov.w	r4, #0
 800b18a:	e00e      	b.n	800b1aa <UART_SetConfig+0x126a>
 800b18c:	a4ac      	add	r4, pc, #688	; (adr r4, 800b440 <UART_SetConfig+0x1500>)
 800b18e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b192:	e00a      	b.n	800b1aa <UART_SetConfig+0x126a>
 800b194:	4bb4      	ldr	r3, [pc, #720]	; (800b468 <UART_SetConfig+0x1528>)
 800b196:	f04f 0400 	mov.w	r4, #0
 800b19a:	e006      	b.n	800b1aa <UART_SetConfig+0x126a>
 800b19c:	4bb3      	ldr	r3, [pc, #716]	; (800b46c <UART_SetConfig+0x152c>)
 800b19e:	f04f 0400 	mov.w	r4, #0
 800b1a2:	e002      	b.n	800b1aa <UART_SetConfig+0x126a>
 800b1a4:	4ba9      	ldr	r3, [pc, #676]	; (800b44c <UART_SetConfig+0x150c>)
 800b1a6:	f04f 0400 	mov.w	r4, #0
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	6852      	ldr	r2, [r2, #4]
 800b1ae:	0852      	lsrs	r2, r2, #1
 800b1b0:	4611      	mov	r1, r2
 800b1b2:	f04f 0200 	mov.w	r2, #0
 800b1b6:	eb13 0b01 	adds.w	fp, r3, r1
 800b1ba:	eb44 0c02 	adc.w	ip, r4, r2
 800b1be:	4658      	mov	r0, fp
 800b1c0:	4661      	mov	r1, ip
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	f04f 0400 	mov.w	r4, #0
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	4623      	mov	r3, r4
 800b1ce:	f7f5 f883 	bl	80002d8 <__aeabi_uldivmod>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	460c      	mov	r4, r1
 800b1d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b1d8:	e088      	b.n	800b2ec <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d064      	beq.n	800b2ac <UART_SetConfig+0x136c>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d05b      	beq.n	800b2a2 <UART_SetConfig+0x1362>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d052      	beq.n	800b298 <UART_SetConfig+0x1358>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f6:	2b03      	cmp	r3, #3
 800b1f8:	d04a      	beq.n	800b290 <UART_SetConfig+0x1350>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fe:	2b04      	cmp	r3, #4
 800b200:	d041      	beq.n	800b286 <UART_SetConfig+0x1346>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b206:	2b05      	cmp	r3, #5
 800b208:	d039      	beq.n	800b27e <UART_SetConfig+0x133e>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20e:	2b06      	cmp	r3, #6
 800b210:	d031      	beq.n	800b276 <UART_SetConfig+0x1336>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b216:	2b07      	cmp	r3, #7
 800b218:	d028      	beq.n	800b26c <UART_SetConfig+0x132c>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21e:	2b08      	cmp	r3, #8
 800b220:	d01f      	beq.n	800b262 <UART_SetConfig+0x1322>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b226:	2b09      	cmp	r3, #9
 800b228:	d016      	beq.n	800b258 <UART_SetConfig+0x1318>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22e:	2b0a      	cmp	r3, #10
 800b230:	d00d      	beq.n	800b24e <UART_SetConfig+0x130e>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b236:	2b0b      	cmp	r3, #11
 800b238:	d104      	bne.n	800b244 <UART_SetConfig+0x1304>
 800b23a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b23e:	f04f 0400 	mov.w	r4, #0
 800b242:	e037      	b.n	800b2b4 <UART_SetConfig+0x1374>
 800b244:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b248:	f04f 0400 	mov.w	r4, #0
 800b24c:	e032      	b.n	800b2b4 <UART_SetConfig+0x1374>
 800b24e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b252:	f04f 0400 	mov.w	r4, #0
 800b256:	e02d      	b.n	800b2b4 <UART_SetConfig+0x1374>
 800b258:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b25c:	f04f 0400 	mov.w	r4, #0
 800b260:	e028      	b.n	800b2b4 <UART_SetConfig+0x1374>
 800b262:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b266:	f04f 0400 	mov.w	r4, #0
 800b26a:	e023      	b.n	800b2b4 <UART_SetConfig+0x1374>
 800b26c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b270:	f04f 0400 	mov.w	r4, #0
 800b274:	e01e      	b.n	800b2b4 <UART_SetConfig+0x1374>
 800b276:	4b7e      	ldr	r3, [pc, #504]	; (800b470 <UART_SetConfig+0x1530>)
 800b278:	f04f 0400 	mov.w	r4, #0
 800b27c:	e01a      	b.n	800b2b4 <UART_SetConfig+0x1374>
 800b27e:	4b7d      	ldr	r3, [pc, #500]	; (800b474 <UART_SetConfig+0x1534>)
 800b280:	f04f 0400 	mov.w	r4, #0
 800b284:	e016      	b.n	800b2b4 <UART_SetConfig+0x1374>
 800b286:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b28a:	f04f 0400 	mov.w	r4, #0
 800b28e:	e011      	b.n	800b2b4 <UART_SetConfig+0x1374>
 800b290:	4b79      	ldr	r3, [pc, #484]	; (800b478 <UART_SetConfig+0x1538>)
 800b292:	f04f 0400 	mov.w	r4, #0
 800b296:	e00d      	b.n	800b2b4 <UART_SetConfig+0x1374>
 800b298:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b29c:	f04f 0400 	mov.w	r4, #0
 800b2a0:	e008      	b.n	800b2b4 <UART_SetConfig+0x1374>
 800b2a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b2a6:	f04f 0400 	mov.w	r4, #0
 800b2aa:	e003      	b.n	800b2b4 <UART_SetConfig+0x1374>
 800b2ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b2b0:	f04f 0400 	mov.w	r4, #0
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	6852      	ldr	r2, [r2, #4]
 800b2b8:	0852      	lsrs	r2, r2, #1
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	f04f 0200 	mov.w	r2, #0
 800b2c0:	eb13 0b01 	adds.w	fp, r3, r1
 800b2c4:	eb44 0c02 	adc.w	ip, r4, r2
 800b2c8:	4658      	mov	r0, fp
 800b2ca:	4661      	mov	r1, ip
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	f04f 0400 	mov.w	r4, #0
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	4623      	mov	r3, r4
 800b2d8:	f7f4 fffe 	bl	80002d8 <__aeabi_uldivmod>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	460c      	mov	r4, r1
 800b2e0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b2e2:	e003      	b.n	800b2ec <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800b2ea:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2f2:	d309      	bcc.n	800b308 <UART_SetConfig+0x13c8>
 800b2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2fa:	d205      	bcs.n	800b308 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b302:	60da      	str	r2, [r3, #12]
 800b304:	f000 bf85 	b.w	800c212 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800b308:	2301      	movs	r3, #1
 800b30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b30e:	f000 bf80 	b.w	800c212 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	69db      	ldr	r3, [r3, #28]
 800b316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b31a:	f040 83da 	bne.w	800bad2 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800b31e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b322:	2b40      	cmp	r3, #64	; 0x40
 800b324:	f200 83b3 	bhi.w	800ba8e <UART_SetConfig+0x1b4e>
 800b328:	a201      	add	r2, pc, #4	; (adr r2, 800b330 <UART_SetConfig+0x13f0>)
 800b32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32e:	bf00      	nop
 800b330:	0800b47d 	.word	0x0800b47d
 800b334:	0800b535 	.word	0x0800b535
 800b338:	0800ba8f 	.word	0x0800ba8f
 800b33c:	0800ba8f 	.word	0x0800ba8f
 800b340:	0800b5ed 	.word	0x0800b5ed
 800b344:	0800ba8f 	.word	0x0800ba8f
 800b348:	0800ba8f 	.word	0x0800ba8f
 800b34c:	0800ba8f 	.word	0x0800ba8f
 800b350:	0800b6a9 	.word	0x0800b6a9
 800b354:	0800ba8f 	.word	0x0800ba8f
 800b358:	0800ba8f 	.word	0x0800ba8f
 800b35c:	0800ba8f 	.word	0x0800ba8f
 800b360:	0800ba8f 	.word	0x0800ba8f
 800b364:	0800ba8f 	.word	0x0800ba8f
 800b368:	0800ba8f 	.word	0x0800ba8f
 800b36c:	0800ba8f 	.word	0x0800ba8f
 800b370:	0800b765 	.word	0x0800b765
 800b374:	0800ba8f 	.word	0x0800ba8f
 800b378:	0800ba8f 	.word	0x0800ba8f
 800b37c:	0800ba8f 	.word	0x0800ba8f
 800b380:	0800ba8f 	.word	0x0800ba8f
 800b384:	0800ba8f 	.word	0x0800ba8f
 800b388:	0800ba8f 	.word	0x0800ba8f
 800b38c:	0800ba8f 	.word	0x0800ba8f
 800b390:	0800ba8f 	.word	0x0800ba8f
 800b394:	0800ba8f 	.word	0x0800ba8f
 800b398:	0800ba8f 	.word	0x0800ba8f
 800b39c:	0800ba8f 	.word	0x0800ba8f
 800b3a0:	0800ba8f 	.word	0x0800ba8f
 800b3a4:	0800ba8f 	.word	0x0800ba8f
 800b3a8:	0800ba8f 	.word	0x0800ba8f
 800b3ac:	0800ba8f 	.word	0x0800ba8f
 800b3b0:	0800b8d7 	.word	0x0800b8d7
 800b3b4:	0800ba8f 	.word	0x0800ba8f
 800b3b8:	0800ba8f 	.word	0x0800ba8f
 800b3bc:	0800ba8f 	.word	0x0800ba8f
 800b3c0:	0800ba8f 	.word	0x0800ba8f
 800b3c4:	0800ba8f 	.word	0x0800ba8f
 800b3c8:	0800ba8f 	.word	0x0800ba8f
 800b3cc:	0800ba8f 	.word	0x0800ba8f
 800b3d0:	0800ba8f 	.word	0x0800ba8f
 800b3d4:	0800ba8f 	.word	0x0800ba8f
 800b3d8:	0800ba8f 	.word	0x0800ba8f
 800b3dc:	0800ba8f 	.word	0x0800ba8f
 800b3e0:	0800ba8f 	.word	0x0800ba8f
 800b3e4:	0800ba8f 	.word	0x0800ba8f
 800b3e8:	0800ba8f 	.word	0x0800ba8f
 800b3ec:	0800ba8f 	.word	0x0800ba8f
 800b3f0:	0800ba8f 	.word	0x0800ba8f
 800b3f4:	0800ba8f 	.word	0x0800ba8f
 800b3f8:	0800ba8f 	.word	0x0800ba8f
 800b3fc:	0800ba8f 	.word	0x0800ba8f
 800b400:	0800ba8f 	.word	0x0800ba8f
 800b404:	0800ba8f 	.word	0x0800ba8f
 800b408:	0800ba8f 	.word	0x0800ba8f
 800b40c:	0800ba8f 	.word	0x0800ba8f
 800b410:	0800ba8f 	.word	0x0800ba8f
 800b414:	0800ba8f 	.word	0x0800ba8f
 800b418:	0800ba8f 	.word	0x0800ba8f
 800b41c:	0800ba8f 	.word	0x0800ba8f
 800b420:	0800ba8f 	.word	0x0800ba8f
 800b424:	0800ba8f 	.word	0x0800ba8f
 800b428:	0800ba8f 	.word	0x0800ba8f
 800b42c:	0800ba8f 	.word	0x0800ba8f
 800b430:	0800b9cd 	.word	0x0800b9cd
 800b434:	f3af 8000 	nop.w
 800b438:	05161500 	.word	0x05161500
 800b43c:	00000000 	.word	0x00000000
 800b440:	0a2c2a00 	.word	0x0a2c2a00
 800b444:	00000000 	.word	0x00000000
 800b448:	003d0900 	.word	0x003d0900
 800b44c:	3d090000 	.word	0x3d090000
 800b450:	007a1200 	.word	0x007a1200
 800b454:	00f42400 	.word	0x00f42400
 800b458:	01e84800 	.word	0x01e84800
 800b45c:	03d09000 	.word	0x03d09000
 800b460:	061a8000 	.word	0x061a8000
 800b464:	07a12000 	.word	0x07a12000
 800b468:	0f424000 	.word	0x0f424000
 800b46c:	1e848000 	.word	0x1e848000
 800b470:	000aaa00 	.word	0x000aaa00
 800b474:	000ccc00 	.word	0x000ccc00
 800b478:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b47c:	f7fb ff44 	bl	8007308 <HAL_RCC_GetPCLK1Freq>
 800b480:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b486:	2b00      	cmp	r3, #0
 800b488:	d044      	beq.n	800b514 <UART_SetConfig+0x15d4>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d03e      	beq.n	800b510 <UART_SetConfig+0x15d0>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b496:	2b02      	cmp	r3, #2
 800b498:	d038      	beq.n	800b50c <UART_SetConfig+0x15cc>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49e:	2b03      	cmp	r3, #3
 800b4a0:	d032      	beq.n	800b508 <UART_SetConfig+0x15c8>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a6:	2b04      	cmp	r3, #4
 800b4a8:	d02c      	beq.n	800b504 <UART_SetConfig+0x15c4>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ae:	2b05      	cmp	r3, #5
 800b4b0:	d026      	beq.n	800b500 <UART_SetConfig+0x15c0>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b6:	2b06      	cmp	r3, #6
 800b4b8:	d020      	beq.n	800b4fc <UART_SetConfig+0x15bc>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4be:	2b07      	cmp	r3, #7
 800b4c0:	d01a      	beq.n	800b4f8 <UART_SetConfig+0x15b8>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c6:	2b08      	cmp	r3, #8
 800b4c8:	d014      	beq.n	800b4f4 <UART_SetConfig+0x15b4>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ce:	2b09      	cmp	r3, #9
 800b4d0:	d00e      	beq.n	800b4f0 <UART_SetConfig+0x15b0>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d6:	2b0a      	cmp	r3, #10
 800b4d8:	d008      	beq.n	800b4ec <UART_SetConfig+0x15ac>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4de:	2b0b      	cmp	r3, #11
 800b4e0:	d102      	bne.n	800b4e8 <UART_SetConfig+0x15a8>
 800b4e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4e6:	e016      	b.n	800b516 <UART_SetConfig+0x15d6>
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e014      	b.n	800b516 <UART_SetConfig+0x15d6>
 800b4ec:	2380      	movs	r3, #128	; 0x80
 800b4ee:	e012      	b.n	800b516 <UART_SetConfig+0x15d6>
 800b4f0:	2340      	movs	r3, #64	; 0x40
 800b4f2:	e010      	b.n	800b516 <UART_SetConfig+0x15d6>
 800b4f4:	2320      	movs	r3, #32
 800b4f6:	e00e      	b.n	800b516 <UART_SetConfig+0x15d6>
 800b4f8:	2310      	movs	r3, #16
 800b4fa:	e00c      	b.n	800b516 <UART_SetConfig+0x15d6>
 800b4fc:	230c      	movs	r3, #12
 800b4fe:	e00a      	b.n	800b516 <UART_SetConfig+0x15d6>
 800b500:	230a      	movs	r3, #10
 800b502:	e008      	b.n	800b516 <UART_SetConfig+0x15d6>
 800b504:	2308      	movs	r3, #8
 800b506:	e006      	b.n	800b516 <UART_SetConfig+0x15d6>
 800b508:	2306      	movs	r3, #6
 800b50a:	e004      	b.n	800b516 <UART_SetConfig+0x15d6>
 800b50c:	2304      	movs	r3, #4
 800b50e:	e002      	b.n	800b516 <UART_SetConfig+0x15d6>
 800b510:	2302      	movs	r3, #2
 800b512:	e000      	b.n	800b516 <UART_SetConfig+0x15d6>
 800b514:	2301      	movs	r3, #1
 800b516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b518:	fbb2 f3f3 	udiv	r3, r2, r3
 800b51c:	005a      	lsls	r2, r3, #1
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	085b      	lsrs	r3, r3, #1
 800b524:	441a      	add	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b52e:	b29b      	uxth	r3, r3
 800b530:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b532:	e2b0      	b.n	800ba96 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b534:	f7fb fefe 	bl	8007334 <HAL_RCC_GetPCLK2Freq>
 800b538:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d044      	beq.n	800b5cc <UART_SetConfig+0x168c>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b546:	2b01      	cmp	r3, #1
 800b548:	d03e      	beq.n	800b5c8 <UART_SetConfig+0x1688>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d038      	beq.n	800b5c4 <UART_SetConfig+0x1684>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b556:	2b03      	cmp	r3, #3
 800b558:	d032      	beq.n	800b5c0 <UART_SetConfig+0x1680>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55e:	2b04      	cmp	r3, #4
 800b560:	d02c      	beq.n	800b5bc <UART_SetConfig+0x167c>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b566:	2b05      	cmp	r3, #5
 800b568:	d026      	beq.n	800b5b8 <UART_SetConfig+0x1678>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56e:	2b06      	cmp	r3, #6
 800b570:	d020      	beq.n	800b5b4 <UART_SetConfig+0x1674>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b576:	2b07      	cmp	r3, #7
 800b578:	d01a      	beq.n	800b5b0 <UART_SetConfig+0x1670>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57e:	2b08      	cmp	r3, #8
 800b580:	d014      	beq.n	800b5ac <UART_SetConfig+0x166c>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b586:	2b09      	cmp	r3, #9
 800b588:	d00e      	beq.n	800b5a8 <UART_SetConfig+0x1668>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58e:	2b0a      	cmp	r3, #10
 800b590:	d008      	beq.n	800b5a4 <UART_SetConfig+0x1664>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b596:	2b0b      	cmp	r3, #11
 800b598:	d102      	bne.n	800b5a0 <UART_SetConfig+0x1660>
 800b59a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b59e:	e016      	b.n	800b5ce <UART_SetConfig+0x168e>
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e014      	b.n	800b5ce <UART_SetConfig+0x168e>
 800b5a4:	2380      	movs	r3, #128	; 0x80
 800b5a6:	e012      	b.n	800b5ce <UART_SetConfig+0x168e>
 800b5a8:	2340      	movs	r3, #64	; 0x40
 800b5aa:	e010      	b.n	800b5ce <UART_SetConfig+0x168e>
 800b5ac:	2320      	movs	r3, #32
 800b5ae:	e00e      	b.n	800b5ce <UART_SetConfig+0x168e>
 800b5b0:	2310      	movs	r3, #16
 800b5b2:	e00c      	b.n	800b5ce <UART_SetConfig+0x168e>
 800b5b4:	230c      	movs	r3, #12
 800b5b6:	e00a      	b.n	800b5ce <UART_SetConfig+0x168e>
 800b5b8:	230a      	movs	r3, #10
 800b5ba:	e008      	b.n	800b5ce <UART_SetConfig+0x168e>
 800b5bc:	2308      	movs	r3, #8
 800b5be:	e006      	b.n	800b5ce <UART_SetConfig+0x168e>
 800b5c0:	2306      	movs	r3, #6
 800b5c2:	e004      	b.n	800b5ce <UART_SetConfig+0x168e>
 800b5c4:	2304      	movs	r3, #4
 800b5c6:	e002      	b.n	800b5ce <UART_SetConfig+0x168e>
 800b5c8:	2302      	movs	r3, #2
 800b5ca:	e000      	b.n	800b5ce <UART_SetConfig+0x168e>
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5d4:	005a      	lsls	r2, r3, #1
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	085b      	lsrs	r3, r3, #1
 800b5dc:	441a      	add	r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5ea:	e254      	b.n	800ba96 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5ec:	f107 0318 	add.w	r3, r7, #24
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7fd f821 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5f6:	69fa      	ldr	r2, [r7, #28]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d044      	beq.n	800b68a <UART_SetConfig+0x174a>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b604:	2b01      	cmp	r3, #1
 800b606:	d03e      	beq.n	800b686 <UART_SetConfig+0x1746>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	d038      	beq.n	800b682 <UART_SetConfig+0x1742>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b614:	2b03      	cmp	r3, #3
 800b616:	d032      	beq.n	800b67e <UART_SetConfig+0x173e>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61c:	2b04      	cmp	r3, #4
 800b61e:	d02c      	beq.n	800b67a <UART_SetConfig+0x173a>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b624:	2b05      	cmp	r3, #5
 800b626:	d026      	beq.n	800b676 <UART_SetConfig+0x1736>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62c:	2b06      	cmp	r3, #6
 800b62e:	d020      	beq.n	800b672 <UART_SetConfig+0x1732>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b634:	2b07      	cmp	r3, #7
 800b636:	d01a      	beq.n	800b66e <UART_SetConfig+0x172e>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63c:	2b08      	cmp	r3, #8
 800b63e:	d014      	beq.n	800b66a <UART_SetConfig+0x172a>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b644:	2b09      	cmp	r3, #9
 800b646:	d00e      	beq.n	800b666 <UART_SetConfig+0x1726>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64c:	2b0a      	cmp	r3, #10
 800b64e:	d008      	beq.n	800b662 <UART_SetConfig+0x1722>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b654:	2b0b      	cmp	r3, #11
 800b656:	d102      	bne.n	800b65e <UART_SetConfig+0x171e>
 800b658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b65c:	e016      	b.n	800b68c <UART_SetConfig+0x174c>
 800b65e:	2301      	movs	r3, #1
 800b660:	e014      	b.n	800b68c <UART_SetConfig+0x174c>
 800b662:	2380      	movs	r3, #128	; 0x80
 800b664:	e012      	b.n	800b68c <UART_SetConfig+0x174c>
 800b666:	2340      	movs	r3, #64	; 0x40
 800b668:	e010      	b.n	800b68c <UART_SetConfig+0x174c>
 800b66a:	2320      	movs	r3, #32
 800b66c:	e00e      	b.n	800b68c <UART_SetConfig+0x174c>
 800b66e:	2310      	movs	r3, #16
 800b670:	e00c      	b.n	800b68c <UART_SetConfig+0x174c>
 800b672:	230c      	movs	r3, #12
 800b674:	e00a      	b.n	800b68c <UART_SetConfig+0x174c>
 800b676:	230a      	movs	r3, #10
 800b678:	e008      	b.n	800b68c <UART_SetConfig+0x174c>
 800b67a:	2308      	movs	r3, #8
 800b67c:	e006      	b.n	800b68c <UART_SetConfig+0x174c>
 800b67e:	2306      	movs	r3, #6
 800b680:	e004      	b.n	800b68c <UART_SetConfig+0x174c>
 800b682:	2304      	movs	r3, #4
 800b684:	e002      	b.n	800b68c <UART_SetConfig+0x174c>
 800b686:	2302      	movs	r3, #2
 800b688:	e000      	b.n	800b68c <UART_SetConfig+0x174c>
 800b68a:	2301      	movs	r3, #1
 800b68c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b690:	005a      	lsls	r2, r3, #1
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	085b      	lsrs	r3, r3, #1
 800b698:	441a      	add	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6a6:	e1f6      	b.n	800ba96 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6a8:	f107 030c 	add.w	r3, r7, #12
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7fd f90f 	bl	80088d0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6b2:	693a      	ldr	r2, [r7, #16]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d044      	beq.n	800b746 <UART_SetConfig+0x1806>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d03e      	beq.n	800b742 <UART_SetConfig+0x1802>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d038      	beq.n	800b73e <UART_SetConfig+0x17fe>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d0:	2b03      	cmp	r3, #3
 800b6d2:	d032      	beq.n	800b73a <UART_SetConfig+0x17fa>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d8:	2b04      	cmp	r3, #4
 800b6da:	d02c      	beq.n	800b736 <UART_SetConfig+0x17f6>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e0:	2b05      	cmp	r3, #5
 800b6e2:	d026      	beq.n	800b732 <UART_SetConfig+0x17f2>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e8:	2b06      	cmp	r3, #6
 800b6ea:	d020      	beq.n	800b72e <UART_SetConfig+0x17ee>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f0:	2b07      	cmp	r3, #7
 800b6f2:	d01a      	beq.n	800b72a <UART_SetConfig+0x17ea>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f8:	2b08      	cmp	r3, #8
 800b6fa:	d014      	beq.n	800b726 <UART_SetConfig+0x17e6>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b700:	2b09      	cmp	r3, #9
 800b702:	d00e      	beq.n	800b722 <UART_SetConfig+0x17e2>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b708:	2b0a      	cmp	r3, #10
 800b70a:	d008      	beq.n	800b71e <UART_SetConfig+0x17de>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b710:	2b0b      	cmp	r3, #11
 800b712:	d102      	bne.n	800b71a <UART_SetConfig+0x17da>
 800b714:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b718:	e016      	b.n	800b748 <UART_SetConfig+0x1808>
 800b71a:	2301      	movs	r3, #1
 800b71c:	e014      	b.n	800b748 <UART_SetConfig+0x1808>
 800b71e:	2380      	movs	r3, #128	; 0x80
 800b720:	e012      	b.n	800b748 <UART_SetConfig+0x1808>
 800b722:	2340      	movs	r3, #64	; 0x40
 800b724:	e010      	b.n	800b748 <UART_SetConfig+0x1808>
 800b726:	2320      	movs	r3, #32
 800b728:	e00e      	b.n	800b748 <UART_SetConfig+0x1808>
 800b72a:	2310      	movs	r3, #16
 800b72c:	e00c      	b.n	800b748 <UART_SetConfig+0x1808>
 800b72e:	230c      	movs	r3, #12
 800b730:	e00a      	b.n	800b748 <UART_SetConfig+0x1808>
 800b732:	230a      	movs	r3, #10
 800b734:	e008      	b.n	800b748 <UART_SetConfig+0x1808>
 800b736:	2308      	movs	r3, #8
 800b738:	e006      	b.n	800b748 <UART_SetConfig+0x1808>
 800b73a:	2306      	movs	r3, #6
 800b73c:	e004      	b.n	800b748 <UART_SetConfig+0x1808>
 800b73e:	2304      	movs	r3, #4
 800b740:	e002      	b.n	800b748 <UART_SetConfig+0x1808>
 800b742:	2302      	movs	r3, #2
 800b744:	e000      	b.n	800b748 <UART_SetConfig+0x1808>
 800b746:	2301      	movs	r3, #1
 800b748:	fbb2 f3f3 	udiv	r3, r2, r3
 800b74c:	005a      	lsls	r2, r3, #1
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	085b      	lsrs	r3, r3, #1
 800b754:	441a      	add	r2, r3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b75e:	b29b      	uxth	r3, r3
 800b760:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b762:	e198      	b.n	800ba96 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b764:	4b87      	ldr	r3, [pc, #540]	; (800b984 <UART_SetConfig+0x1a44>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f003 0320 	and.w	r3, r3, #32
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d05e      	beq.n	800b82e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b770:	4b84      	ldr	r3, [pc, #528]	; (800b984 <UART_SetConfig+0x1a44>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	08db      	lsrs	r3, r3, #3
 800b776:	f003 0303 	and.w	r3, r3, #3
 800b77a:	4a83      	ldr	r2, [pc, #524]	; (800b988 <UART_SetConfig+0x1a48>)
 800b77c:	40da      	lsrs	r2, r3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b782:	2b00      	cmp	r3, #0
 800b784:	d044      	beq.n	800b810 <UART_SetConfig+0x18d0>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d03e      	beq.n	800b80c <UART_SetConfig+0x18cc>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b792:	2b02      	cmp	r3, #2
 800b794:	d038      	beq.n	800b808 <UART_SetConfig+0x18c8>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79a:	2b03      	cmp	r3, #3
 800b79c:	d032      	beq.n	800b804 <UART_SetConfig+0x18c4>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a2:	2b04      	cmp	r3, #4
 800b7a4:	d02c      	beq.n	800b800 <UART_SetConfig+0x18c0>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7aa:	2b05      	cmp	r3, #5
 800b7ac:	d026      	beq.n	800b7fc <UART_SetConfig+0x18bc>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b2:	2b06      	cmp	r3, #6
 800b7b4:	d020      	beq.n	800b7f8 <UART_SetConfig+0x18b8>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ba:	2b07      	cmp	r3, #7
 800b7bc:	d01a      	beq.n	800b7f4 <UART_SetConfig+0x18b4>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c2:	2b08      	cmp	r3, #8
 800b7c4:	d014      	beq.n	800b7f0 <UART_SetConfig+0x18b0>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ca:	2b09      	cmp	r3, #9
 800b7cc:	d00e      	beq.n	800b7ec <UART_SetConfig+0x18ac>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d2:	2b0a      	cmp	r3, #10
 800b7d4:	d008      	beq.n	800b7e8 <UART_SetConfig+0x18a8>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7da:	2b0b      	cmp	r3, #11
 800b7dc:	d102      	bne.n	800b7e4 <UART_SetConfig+0x18a4>
 800b7de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7e2:	e016      	b.n	800b812 <UART_SetConfig+0x18d2>
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e014      	b.n	800b812 <UART_SetConfig+0x18d2>
 800b7e8:	2380      	movs	r3, #128	; 0x80
 800b7ea:	e012      	b.n	800b812 <UART_SetConfig+0x18d2>
 800b7ec:	2340      	movs	r3, #64	; 0x40
 800b7ee:	e010      	b.n	800b812 <UART_SetConfig+0x18d2>
 800b7f0:	2320      	movs	r3, #32
 800b7f2:	e00e      	b.n	800b812 <UART_SetConfig+0x18d2>
 800b7f4:	2310      	movs	r3, #16
 800b7f6:	e00c      	b.n	800b812 <UART_SetConfig+0x18d2>
 800b7f8:	230c      	movs	r3, #12
 800b7fa:	e00a      	b.n	800b812 <UART_SetConfig+0x18d2>
 800b7fc:	230a      	movs	r3, #10
 800b7fe:	e008      	b.n	800b812 <UART_SetConfig+0x18d2>
 800b800:	2308      	movs	r3, #8
 800b802:	e006      	b.n	800b812 <UART_SetConfig+0x18d2>
 800b804:	2306      	movs	r3, #6
 800b806:	e004      	b.n	800b812 <UART_SetConfig+0x18d2>
 800b808:	2304      	movs	r3, #4
 800b80a:	e002      	b.n	800b812 <UART_SetConfig+0x18d2>
 800b80c:	2302      	movs	r3, #2
 800b80e:	e000      	b.n	800b812 <UART_SetConfig+0x18d2>
 800b810:	2301      	movs	r3, #1
 800b812:	fbb2 f3f3 	udiv	r3, r2, r3
 800b816:	005a      	lsls	r2, r3, #1
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	085b      	lsrs	r3, r3, #1
 800b81e:	441a      	add	r2, r3
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	fbb2 f3f3 	udiv	r3, r2, r3
 800b828:	b29b      	uxth	r3, r3
 800b82a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b82c:	e133      	b.n	800ba96 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b832:	2b00      	cmp	r3, #0
 800b834:	d043      	beq.n	800b8be <UART_SetConfig+0x197e>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d03d      	beq.n	800b8ba <UART_SetConfig+0x197a>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b842:	2b02      	cmp	r3, #2
 800b844:	d037      	beq.n	800b8b6 <UART_SetConfig+0x1976>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84a:	2b03      	cmp	r3, #3
 800b84c:	d031      	beq.n	800b8b2 <UART_SetConfig+0x1972>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b852:	2b04      	cmp	r3, #4
 800b854:	d02b      	beq.n	800b8ae <UART_SetConfig+0x196e>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85a:	2b05      	cmp	r3, #5
 800b85c:	d025      	beq.n	800b8aa <UART_SetConfig+0x196a>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b862:	2b06      	cmp	r3, #6
 800b864:	d01f      	beq.n	800b8a6 <UART_SetConfig+0x1966>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86a:	2b07      	cmp	r3, #7
 800b86c:	d019      	beq.n	800b8a2 <UART_SetConfig+0x1962>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b872:	2b08      	cmp	r3, #8
 800b874:	d013      	beq.n	800b89e <UART_SetConfig+0x195e>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87a:	2b09      	cmp	r3, #9
 800b87c:	d00d      	beq.n	800b89a <UART_SetConfig+0x195a>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b882:	2b0a      	cmp	r3, #10
 800b884:	d007      	beq.n	800b896 <UART_SetConfig+0x1956>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b88a:	2b0b      	cmp	r3, #11
 800b88c:	d101      	bne.n	800b892 <UART_SetConfig+0x1952>
 800b88e:	4b3f      	ldr	r3, [pc, #252]	; (800b98c <UART_SetConfig+0x1a4c>)
 800b890:	e016      	b.n	800b8c0 <UART_SetConfig+0x1980>
 800b892:	4b3f      	ldr	r3, [pc, #252]	; (800b990 <UART_SetConfig+0x1a50>)
 800b894:	e014      	b.n	800b8c0 <UART_SetConfig+0x1980>
 800b896:	4b3f      	ldr	r3, [pc, #252]	; (800b994 <UART_SetConfig+0x1a54>)
 800b898:	e012      	b.n	800b8c0 <UART_SetConfig+0x1980>
 800b89a:	4b3f      	ldr	r3, [pc, #252]	; (800b998 <UART_SetConfig+0x1a58>)
 800b89c:	e010      	b.n	800b8c0 <UART_SetConfig+0x1980>
 800b89e:	4b3f      	ldr	r3, [pc, #252]	; (800b99c <UART_SetConfig+0x1a5c>)
 800b8a0:	e00e      	b.n	800b8c0 <UART_SetConfig+0x1980>
 800b8a2:	4b3f      	ldr	r3, [pc, #252]	; (800b9a0 <UART_SetConfig+0x1a60>)
 800b8a4:	e00c      	b.n	800b8c0 <UART_SetConfig+0x1980>
 800b8a6:	4b3f      	ldr	r3, [pc, #252]	; (800b9a4 <UART_SetConfig+0x1a64>)
 800b8a8:	e00a      	b.n	800b8c0 <UART_SetConfig+0x1980>
 800b8aa:	4b3f      	ldr	r3, [pc, #252]	; (800b9a8 <UART_SetConfig+0x1a68>)
 800b8ac:	e008      	b.n	800b8c0 <UART_SetConfig+0x1980>
 800b8ae:	4b3f      	ldr	r3, [pc, #252]	; (800b9ac <UART_SetConfig+0x1a6c>)
 800b8b0:	e006      	b.n	800b8c0 <UART_SetConfig+0x1980>
 800b8b2:	4b3f      	ldr	r3, [pc, #252]	; (800b9b0 <UART_SetConfig+0x1a70>)
 800b8b4:	e004      	b.n	800b8c0 <UART_SetConfig+0x1980>
 800b8b6:	4b3f      	ldr	r3, [pc, #252]	; (800b9b4 <UART_SetConfig+0x1a74>)
 800b8b8:	e002      	b.n	800b8c0 <UART_SetConfig+0x1980>
 800b8ba:	4b33      	ldr	r3, [pc, #204]	; (800b988 <UART_SetConfig+0x1a48>)
 800b8bc:	e000      	b.n	800b8c0 <UART_SetConfig+0x1980>
 800b8be:	4b34      	ldr	r3, [pc, #208]	; (800b990 <UART_SetConfig+0x1a50>)
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	6852      	ldr	r2, [r2, #4]
 800b8c4:	0852      	lsrs	r2, r2, #1
 800b8c6:	441a      	add	r2, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8d4:	e0df      	b.n	800ba96 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d045      	beq.n	800b96a <UART_SetConfig+0x1a2a>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d03f      	beq.n	800b966 <UART_SetConfig+0x1a26>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ea:	2b02      	cmp	r3, #2
 800b8ec:	d039      	beq.n	800b962 <UART_SetConfig+0x1a22>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f2:	2b03      	cmp	r3, #3
 800b8f4:	d033      	beq.n	800b95e <UART_SetConfig+0x1a1e>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fa:	2b04      	cmp	r3, #4
 800b8fc:	d02d      	beq.n	800b95a <UART_SetConfig+0x1a1a>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b902:	2b05      	cmp	r3, #5
 800b904:	d027      	beq.n	800b956 <UART_SetConfig+0x1a16>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90a:	2b06      	cmp	r3, #6
 800b90c:	d021      	beq.n	800b952 <UART_SetConfig+0x1a12>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b912:	2b07      	cmp	r3, #7
 800b914:	d01b      	beq.n	800b94e <UART_SetConfig+0x1a0e>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91a:	2b08      	cmp	r3, #8
 800b91c:	d015      	beq.n	800b94a <UART_SetConfig+0x1a0a>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b922:	2b09      	cmp	r3, #9
 800b924:	d00f      	beq.n	800b946 <UART_SetConfig+0x1a06>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92a:	2b0a      	cmp	r3, #10
 800b92c:	d008      	beq.n	800b940 <UART_SetConfig+0x1a00>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b932:	2b0b      	cmp	r3, #11
 800b934:	d102      	bne.n	800b93c <UART_SetConfig+0x19fc>
 800b936:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b93a:	e017      	b.n	800b96c <UART_SetConfig+0x1a2c>
 800b93c:	4b18      	ldr	r3, [pc, #96]	; (800b9a0 <UART_SetConfig+0x1a60>)
 800b93e:	e015      	b.n	800b96c <UART_SetConfig+0x1a2c>
 800b940:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b944:	e012      	b.n	800b96c <UART_SetConfig+0x1a2c>
 800b946:	4b1c      	ldr	r3, [pc, #112]	; (800b9b8 <UART_SetConfig+0x1a78>)
 800b948:	e010      	b.n	800b96c <UART_SetConfig+0x1a2c>
 800b94a:	4b1c      	ldr	r3, [pc, #112]	; (800b9bc <UART_SetConfig+0x1a7c>)
 800b94c:	e00e      	b.n	800b96c <UART_SetConfig+0x1a2c>
 800b94e:	4b0f      	ldr	r3, [pc, #60]	; (800b98c <UART_SetConfig+0x1a4c>)
 800b950:	e00c      	b.n	800b96c <UART_SetConfig+0x1a2c>
 800b952:	4b1b      	ldr	r3, [pc, #108]	; (800b9c0 <UART_SetConfig+0x1a80>)
 800b954:	e00a      	b.n	800b96c <UART_SetConfig+0x1a2c>
 800b956:	4b1b      	ldr	r3, [pc, #108]	; (800b9c4 <UART_SetConfig+0x1a84>)
 800b958:	e008      	b.n	800b96c <UART_SetConfig+0x1a2c>
 800b95a:	4b0e      	ldr	r3, [pc, #56]	; (800b994 <UART_SetConfig+0x1a54>)
 800b95c:	e006      	b.n	800b96c <UART_SetConfig+0x1a2c>
 800b95e:	4b1a      	ldr	r3, [pc, #104]	; (800b9c8 <UART_SetConfig+0x1a88>)
 800b960:	e004      	b.n	800b96c <UART_SetConfig+0x1a2c>
 800b962:	4b0d      	ldr	r3, [pc, #52]	; (800b998 <UART_SetConfig+0x1a58>)
 800b964:	e002      	b.n	800b96c <UART_SetConfig+0x1a2c>
 800b966:	4b0d      	ldr	r3, [pc, #52]	; (800b99c <UART_SetConfig+0x1a5c>)
 800b968:	e000      	b.n	800b96c <UART_SetConfig+0x1a2c>
 800b96a:	4b0d      	ldr	r3, [pc, #52]	; (800b9a0 <UART_SetConfig+0x1a60>)
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	6852      	ldr	r2, [r2, #4]
 800b970:	0852      	lsrs	r2, r2, #1
 800b972:	441a      	add	r2, r3
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	fbb2 f3f3 	udiv	r3, r2, r3
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b980:	e089      	b.n	800ba96 <UART_SetConfig+0x1b56>
 800b982:	bf00      	nop
 800b984:	58024400 	.word	0x58024400
 800b988:	03d09000 	.word	0x03d09000
 800b98c:	0007a120 	.word	0x0007a120
 800b990:	07a12000 	.word	0x07a12000
 800b994:	000f4240 	.word	0x000f4240
 800b998:	001e8480 	.word	0x001e8480
 800b99c:	003d0900 	.word	0x003d0900
 800b9a0:	007a1200 	.word	0x007a1200
 800b9a4:	00a2c2aa 	.word	0x00a2c2aa
 800b9a8:	00c35000 	.word	0x00c35000
 800b9ac:	00f42400 	.word	0x00f42400
 800b9b0:	01458554 	.word	0x01458554
 800b9b4:	01e84800 	.word	0x01e84800
 800b9b8:	0001e848 	.word	0x0001e848
 800b9bc:	0003d090 	.word	0x0003d090
 800b9c0:	000a2c2a 	.word	0x000a2c2a
 800b9c4:	000c3500 	.word	0x000c3500
 800b9c8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d04f      	beq.n	800ba74 <UART_SetConfig+0x1b34>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d048      	beq.n	800ba6e <UART_SetConfig+0x1b2e>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d041      	beq.n	800ba68 <UART_SetConfig+0x1b28>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e8:	2b03      	cmp	r3, #3
 800b9ea:	d03a      	beq.n	800ba62 <UART_SetConfig+0x1b22>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f0:	2b04      	cmp	r3, #4
 800b9f2:	d033      	beq.n	800ba5c <UART_SetConfig+0x1b1c>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f8:	2b05      	cmp	r3, #5
 800b9fa:	d02c      	beq.n	800ba56 <UART_SetConfig+0x1b16>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba00:	2b06      	cmp	r3, #6
 800ba02:	d025      	beq.n	800ba50 <UART_SetConfig+0x1b10>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba08:	2b07      	cmp	r3, #7
 800ba0a:	d01e      	beq.n	800ba4a <UART_SetConfig+0x1b0a>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba10:	2b08      	cmp	r3, #8
 800ba12:	d017      	beq.n	800ba44 <UART_SetConfig+0x1b04>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba18:	2b09      	cmp	r3, #9
 800ba1a:	d010      	beq.n	800ba3e <UART_SetConfig+0x1afe>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba20:	2b0a      	cmp	r3, #10
 800ba22:	d009      	beq.n	800ba38 <UART_SetConfig+0x1af8>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba28:	2b0b      	cmp	r3, #11
 800ba2a:	d102      	bne.n	800ba32 <UART_SetConfig+0x1af2>
 800ba2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba30:	e022      	b.n	800ba78 <UART_SetConfig+0x1b38>
 800ba32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ba36:	e01f      	b.n	800ba78 <UART_SetConfig+0x1b38>
 800ba38:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba3c:	e01c      	b.n	800ba78 <UART_SetConfig+0x1b38>
 800ba3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba42:	e019      	b.n	800ba78 <UART_SetConfig+0x1b38>
 800ba44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba48:	e016      	b.n	800ba78 <UART_SetConfig+0x1b38>
 800ba4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba4e:	e013      	b.n	800ba78 <UART_SetConfig+0x1b38>
 800ba50:	f241 5354 	movw	r3, #5460	; 0x1554
 800ba54:	e010      	b.n	800ba78 <UART_SetConfig+0x1b38>
 800ba56:	f641 1398 	movw	r3, #6552	; 0x1998
 800ba5a:	e00d      	b.n	800ba78 <UART_SetConfig+0x1b38>
 800ba5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba60:	e00a      	b.n	800ba78 <UART_SetConfig+0x1b38>
 800ba62:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800ba66:	e007      	b.n	800ba78 <UART_SetConfig+0x1b38>
 800ba68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ba6c:	e004      	b.n	800ba78 <UART_SetConfig+0x1b38>
 800ba6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba72:	e001      	b.n	800ba78 <UART_SetConfig+0x1b38>
 800ba74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	6852      	ldr	r2, [r2, #4]
 800ba7c:	0852      	lsrs	r2, r2, #1
 800ba7e:	441a      	add	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba8c:	e003      	b.n	800ba96 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800ba94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba98:	2b0f      	cmp	r3, #15
 800ba9a:	d916      	bls.n	800baca <UART_SetConfig+0x1b8a>
 800ba9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baa2:	d212      	bcs.n	800baca <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800baa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	f023 030f 	bic.w	r3, r3, #15
 800baac:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800baae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bab0:	085b      	lsrs	r3, r3, #1
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	f003 0307 	and.w	r3, r3, #7
 800bab8:	b29a      	uxth	r2, r3
 800baba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800babc:	4313      	orrs	r3, r2
 800babe:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bac6:	60da      	str	r2, [r3, #12]
 800bac8:	e3a3      	b.n	800c212 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bad0:	e39f      	b.n	800c212 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800bad2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bad6:	2b40      	cmp	r3, #64	; 0x40
 800bad8:	f200 8388 	bhi.w	800c1ec <UART_SetConfig+0x22ac>
 800badc:	a201      	add	r2, pc, #4	; (adr r2, 800bae4 <UART_SetConfig+0x1ba4>)
 800bade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae2:	bf00      	nop
 800bae4:	0800bbe9 	.word	0x0800bbe9
 800bae8:	0800bc9f 	.word	0x0800bc9f
 800baec:	0800c1ed 	.word	0x0800c1ed
 800baf0:	0800c1ed 	.word	0x0800c1ed
 800baf4:	0800bd55 	.word	0x0800bd55
 800baf8:	0800c1ed 	.word	0x0800c1ed
 800bafc:	0800c1ed 	.word	0x0800c1ed
 800bb00:	0800c1ed 	.word	0x0800c1ed
 800bb04:	0800be0f 	.word	0x0800be0f
 800bb08:	0800c1ed 	.word	0x0800c1ed
 800bb0c:	0800c1ed 	.word	0x0800c1ed
 800bb10:	0800c1ed 	.word	0x0800c1ed
 800bb14:	0800c1ed 	.word	0x0800c1ed
 800bb18:	0800c1ed 	.word	0x0800c1ed
 800bb1c:	0800c1ed 	.word	0x0800c1ed
 800bb20:	0800c1ed 	.word	0x0800c1ed
 800bb24:	0800bec9 	.word	0x0800bec9
 800bb28:	0800c1ed 	.word	0x0800c1ed
 800bb2c:	0800c1ed 	.word	0x0800c1ed
 800bb30:	0800c1ed 	.word	0x0800c1ed
 800bb34:	0800c1ed 	.word	0x0800c1ed
 800bb38:	0800c1ed 	.word	0x0800c1ed
 800bb3c:	0800c1ed 	.word	0x0800c1ed
 800bb40:	0800c1ed 	.word	0x0800c1ed
 800bb44:	0800c1ed 	.word	0x0800c1ed
 800bb48:	0800c1ed 	.word	0x0800c1ed
 800bb4c:	0800c1ed 	.word	0x0800c1ed
 800bb50:	0800c1ed 	.word	0x0800c1ed
 800bb54:	0800c1ed 	.word	0x0800c1ed
 800bb58:	0800c1ed 	.word	0x0800c1ed
 800bb5c:	0800c1ed 	.word	0x0800c1ed
 800bb60:	0800c1ed 	.word	0x0800c1ed
 800bb64:	0800c039 	.word	0x0800c039
 800bb68:	0800c1ed 	.word	0x0800c1ed
 800bb6c:	0800c1ed 	.word	0x0800c1ed
 800bb70:	0800c1ed 	.word	0x0800c1ed
 800bb74:	0800c1ed 	.word	0x0800c1ed
 800bb78:	0800c1ed 	.word	0x0800c1ed
 800bb7c:	0800c1ed 	.word	0x0800c1ed
 800bb80:	0800c1ed 	.word	0x0800c1ed
 800bb84:	0800c1ed 	.word	0x0800c1ed
 800bb88:	0800c1ed 	.word	0x0800c1ed
 800bb8c:	0800c1ed 	.word	0x0800c1ed
 800bb90:	0800c1ed 	.word	0x0800c1ed
 800bb94:	0800c1ed 	.word	0x0800c1ed
 800bb98:	0800c1ed 	.word	0x0800c1ed
 800bb9c:	0800c1ed 	.word	0x0800c1ed
 800bba0:	0800c1ed 	.word	0x0800c1ed
 800bba4:	0800c1ed 	.word	0x0800c1ed
 800bba8:	0800c1ed 	.word	0x0800c1ed
 800bbac:	0800c1ed 	.word	0x0800c1ed
 800bbb0:	0800c1ed 	.word	0x0800c1ed
 800bbb4:	0800c1ed 	.word	0x0800c1ed
 800bbb8:	0800c1ed 	.word	0x0800c1ed
 800bbbc:	0800c1ed 	.word	0x0800c1ed
 800bbc0:	0800c1ed 	.word	0x0800c1ed
 800bbc4:	0800c1ed 	.word	0x0800c1ed
 800bbc8:	0800c1ed 	.word	0x0800c1ed
 800bbcc:	0800c1ed 	.word	0x0800c1ed
 800bbd0:	0800c1ed 	.word	0x0800c1ed
 800bbd4:	0800c1ed 	.word	0x0800c1ed
 800bbd8:	0800c1ed 	.word	0x0800c1ed
 800bbdc:	0800c1ed 	.word	0x0800c1ed
 800bbe0:	0800c1ed 	.word	0x0800c1ed
 800bbe4:	0800c12d 	.word	0x0800c12d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbe8:	f7fb fb8e 	bl	8007308 <HAL_RCC_GetPCLK1Freq>
 800bbec:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d044      	beq.n	800bc80 <UART_SetConfig+0x1d40>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d03e      	beq.n	800bc7c <UART_SetConfig+0x1d3c>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc02:	2b02      	cmp	r3, #2
 800bc04:	d038      	beq.n	800bc78 <UART_SetConfig+0x1d38>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0a:	2b03      	cmp	r3, #3
 800bc0c:	d032      	beq.n	800bc74 <UART_SetConfig+0x1d34>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc12:	2b04      	cmp	r3, #4
 800bc14:	d02c      	beq.n	800bc70 <UART_SetConfig+0x1d30>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1a:	2b05      	cmp	r3, #5
 800bc1c:	d026      	beq.n	800bc6c <UART_SetConfig+0x1d2c>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc22:	2b06      	cmp	r3, #6
 800bc24:	d020      	beq.n	800bc68 <UART_SetConfig+0x1d28>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2a:	2b07      	cmp	r3, #7
 800bc2c:	d01a      	beq.n	800bc64 <UART_SetConfig+0x1d24>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc32:	2b08      	cmp	r3, #8
 800bc34:	d014      	beq.n	800bc60 <UART_SetConfig+0x1d20>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc3a:	2b09      	cmp	r3, #9
 800bc3c:	d00e      	beq.n	800bc5c <UART_SetConfig+0x1d1c>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc42:	2b0a      	cmp	r3, #10
 800bc44:	d008      	beq.n	800bc58 <UART_SetConfig+0x1d18>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4a:	2b0b      	cmp	r3, #11
 800bc4c:	d102      	bne.n	800bc54 <UART_SetConfig+0x1d14>
 800bc4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc52:	e016      	b.n	800bc82 <UART_SetConfig+0x1d42>
 800bc54:	2301      	movs	r3, #1
 800bc56:	e014      	b.n	800bc82 <UART_SetConfig+0x1d42>
 800bc58:	2380      	movs	r3, #128	; 0x80
 800bc5a:	e012      	b.n	800bc82 <UART_SetConfig+0x1d42>
 800bc5c:	2340      	movs	r3, #64	; 0x40
 800bc5e:	e010      	b.n	800bc82 <UART_SetConfig+0x1d42>
 800bc60:	2320      	movs	r3, #32
 800bc62:	e00e      	b.n	800bc82 <UART_SetConfig+0x1d42>
 800bc64:	2310      	movs	r3, #16
 800bc66:	e00c      	b.n	800bc82 <UART_SetConfig+0x1d42>
 800bc68:	230c      	movs	r3, #12
 800bc6a:	e00a      	b.n	800bc82 <UART_SetConfig+0x1d42>
 800bc6c:	230a      	movs	r3, #10
 800bc6e:	e008      	b.n	800bc82 <UART_SetConfig+0x1d42>
 800bc70:	2308      	movs	r3, #8
 800bc72:	e006      	b.n	800bc82 <UART_SetConfig+0x1d42>
 800bc74:	2306      	movs	r3, #6
 800bc76:	e004      	b.n	800bc82 <UART_SetConfig+0x1d42>
 800bc78:	2304      	movs	r3, #4
 800bc7a:	e002      	b.n	800bc82 <UART_SetConfig+0x1d42>
 800bc7c:	2302      	movs	r3, #2
 800bc7e:	e000      	b.n	800bc82 <UART_SetConfig+0x1d42>
 800bc80:	2301      	movs	r3, #1
 800bc82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc84:	fbb2 f2f3 	udiv	r2, r2, r3
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	085b      	lsrs	r3, r3, #1
 800bc8e:	441a      	add	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc9c:	e2aa      	b.n	800c1f4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc9e:	f7fb fb49 	bl	8007334 <HAL_RCC_GetPCLK2Freq>
 800bca2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d044      	beq.n	800bd36 <UART_SetConfig+0x1df6>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d03e      	beq.n	800bd32 <UART_SetConfig+0x1df2>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb8:	2b02      	cmp	r3, #2
 800bcba:	d038      	beq.n	800bd2e <UART_SetConfig+0x1dee>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc0:	2b03      	cmp	r3, #3
 800bcc2:	d032      	beq.n	800bd2a <UART_SetConfig+0x1dea>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc8:	2b04      	cmp	r3, #4
 800bcca:	d02c      	beq.n	800bd26 <UART_SetConfig+0x1de6>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd0:	2b05      	cmp	r3, #5
 800bcd2:	d026      	beq.n	800bd22 <UART_SetConfig+0x1de2>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd8:	2b06      	cmp	r3, #6
 800bcda:	d020      	beq.n	800bd1e <UART_SetConfig+0x1dde>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce0:	2b07      	cmp	r3, #7
 800bce2:	d01a      	beq.n	800bd1a <UART_SetConfig+0x1dda>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce8:	2b08      	cmp	r3, #8
 800bcea:	d014      	beq.n	800bd16 <UART_SetConfig+0x1dd6>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf0:	2b09      	cmp	r3, #9
 800bcf2:	d00e      	beq.n	800bd12 <UART_SetConfig+0x1dd2>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf8:	2b0a      	cmp	r3, #10
 800bcfa:	d008      	beq.n	800bd0e <UART_SetConfig+0x1dce>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd00:	2b0b      	cmp	r3, #11
 800bd02:	d102      	bne.n	800bd0a <UART_SetConfig+0x1dca>
 800bd04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd08:	e016      	b.n	800bd38 <UART_SetConfig+0x1df8>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e014      	b.n	800bd38 <UART_SetConfig+0x1df8>
 800bd0e:	2380      	movs	r3, #128	; 0x80
 800bd10:	e012      	b.n	800bd38 <UART_SetConfig+0x1df8>
 800bd12:	2340      	movs	r3, #64	; 0x40
 800bd14:	e010      	b.n	800bd38 <UART_SetConfig+0x1df8>
 800bd16:	2320      	movs	r3, #32
 800bd18:	e00e      	b.n	800bd38 <UART_SetConfig+0x1df8>
 800bd1a:	2310      	movs	r3, #16
 800bd1c:	e00c      	b.n	800bd38 <UART_SetConfig+0x1df8>
 800bd1e:	230c      	movs	r3, #12
 800bd20:	e00a      	b.n	800bd38 <UART_SetConfig+0x1df8>
 800bd22:	230a      	movs	r3, #10
 800bd24:	e008      	b.n	800bd38 <UART_SetConfig+0x1df8>
 800bd26:	2308      	movs	r3, #8
 800bd28:	e006      	b.n	800bd38 <UART_SetConfig+0x1df8>
 800bd2a:	2306      	movs	r3, #6
 800bd2c:	e004      	b.n	800bd38 <UART_SetConfig+0x1df8>
 800bd2e:	2304      	movs	r3, #4
 800bd30:	e002      	b.n	800bd38 <UART_SetConfig+0x1df8>
 800bd32:	2302      	movs	r3, #2
 800bd34:	e000      	b.n	800bd38 <UART_SetConfig+0x1df8>
 800bd36:	2301      	movs	r3, #1
 800bd38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd3a:	fbb2 f2f3 	udiv	r2, r2, r3
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	085b      	lsrs	r3, r3, #1
 800bd44:	441a      	add	r2, r3
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd52:	e24f      	b.n	800c1f4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd54:	f107 0318 	add.w	r3, r7, #24
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7fc fc6d 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd5e:	69fa      	ldr	r2, [r7, #28]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d044      	beq.n	800bdf2 <UART_SetConfig+0x1eb2>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d03e      	beq.n	800bdee <UART_SetConfig+0x1eae>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd74:	2b02      	cmp	r3, #2
 800bd76:	d038      	beq.n	800bdea <UART_SetConfig+0x1eaa>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7c:	2b03      	cmp	r3, #3
 800bd7e:	d032      	beq.n	800bde6 <UART_SetConfig+0x1ea6>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd84:	2b04      	cmp	r3, #4
 800bd86:	d02c      	beq.n	800bde2 <UART_SetConfig+0x1ea2>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8c:	2b05      	cmp	r3, #5
 800bd8e:	d026      	beq.n	800bdde <UART_SetConfig+0x1e9e>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd94:	2b06      	cmp	r3, #6
 800bd96:	d020      	beq.n	800bdda <UART_SetConfig+0x1e9a>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9c:	2b07      	cmp	r3, #7
 800bd9e:	d01a      	beq.n	800bdd6 <UART_SetConfig+0x1e96>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda4:	2b08      	cmp	r3, #8
 800bda6:	d014      	beq.n	800bdd2 <UART_SetConfig+0x1e92>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdac:	2b09      	cmp	r3, #9
 800bdae:	d00e      	beq.n	800bdce <UART_SetConfig+0x1e8e>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb4:	2b0a      	cmp	r3, #10
 800bdb6:	d008      	beq.n	800bdca <UART_SetConfig+0x1e8a>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdbc:	2b0b      	cmp	r3, #11
 800bdbe:	d102      	bne.n	800bdc6 <UART_SetConfig+0x1e86>
 800bdc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bdc4:	e016      	b.n	800bdf4 <UART_SetConfig+0x1eb4>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e014      	b.n	800bdf4 <UART_SetConfig+0x1eb4>
 800bdca:	2380      	movs	r3, #128	; 0x80
 800bdcc:	e012      	b.n	800bdf4 <UART_SetConfig+0x1eb4>
 800bdce:	2340      	movs	r3, #64	; 0x40
 800bdd0:	e010      	b.n	800bdf4 <UART_SetConfig+0x1eb4>
 800bdd2:	2320      	movs	r3, #32
 800bdd4:	e00e      	b.n	800bdf4 <UART_SetConfig+0x1eb4>
 800bdd6:	2310      	movs	r3, #16
 800bdd8:	e00c      	b.n	800bdf4 <UART_SetConfig+0x1eb4>
 800bdda:	230c      	movs	r3, #12
 800bddc:	e00a      	b.n	800bdf4 <UART_SetConfig+0x1eb4>
 800bdde:	230a      	movs	r3, #10
 800bde0:	e008      	b.n	800bdf4 <UART_SetConfig+0x1eb4>
 800bde2:	2308      	movs	r3, #8
 800bde4:	e006      	b.n	800bdf4 <UART_SetConfig+0x1eb4>
 800bde6:	2306      	movs	r3, #6
 800bde8:	e004      	b.n	800bdf4 <UART_SetConfig+0x1eb4>
 800bdea:	2304      	movs	r3, #4
 800bdec:	e002      	b.n	800bdf4 <UART_SetConfig+0x1eb4>
 800bdee:	2302      	movs	r3, #2
 800bdf0:	e000      	b.n	800bdf4 <UART_SetConfig+0x1eb4>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	fbb2 f2f3 	udiv	r2, r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	085b      	lsrs	r3, r3, #1
 800bdfe:	441a      	add	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	fbb2 f3f3 	udiv	r3, r2, r3
 800be08:	b29b      	uxth	r3, r3
 800be0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be0c:	e1f2      	b.n	800c1f4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be0e:	f107 030c 	add.w	r3, r7, #12
 800be12:	4618      	mov	r0, r3
 800be14:	f7fc fd5c 	bl	80088d0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be18:	693a      	ldr	r2, [r7, #16]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d044      	beq.n	800beac <UART_SetConfig+0x1f6c>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be26:	2b01      	cmp	r3, #1
 800be28:	d03e      	beq.n	800bea8 <UART_SetConfig+0x1f68>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be2e:	2b02      	cmp	r3, #2
 800be30:	d038      	beq.n	800bea4 <UART_SetConfig+0x1f64>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be36:	2b03      	cmp	r3, #3
 800be38:	d032      	beq.n	800bea0 <UART_SetConfig+0x1f60>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3e:	2b04      	cmp	r3, #4
 800be40:	d02c      	beq.n	800be9c <UART_SetConfig+0x1f5c>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be46:	2b05      	cmp	r3, #5
 800be48:	d026      	beq.n	800be98 <UART_SetConfig+0x1f58>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be4e:	2b06      	cmp	r3, #6
 800be50:	d020      	beq.n	800be94 <UART_SetConfig+0x1f54>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be56:	2b07      	cmp	r3, #7
 800be58:	d01a      	beq.n	800be90 <UART_SetConfig+0x1f50>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5e:	2b08      	cmp	r3, #8
 800be60:	d014      	beq.n	800be8c <UART_SetConfig+0x1f4c>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be66:	2b09      	cmp	r3, #9
 800be68:	d00e      	beq.n	800be88 <UART_SetConfig+0x1f48>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6e:	2b0a      	cmp	r3, #10
 800be70:	d008      	beq.n	800be84 <UART_SetConfig+0x1f44>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be76:	2b0b      	cmp	r3, #11
 800be78:	d102      	bne.n	800be80 <UART_SetConfig+0x1f40>
 800be7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be7e:	e016      	b.n	800beae <UART_SetConfig+0x1f6e>
 800be80:	2301      	movs	r3, #1
 800be82:	e014      	b.n	800beae <UART_SetConfig+0x1f6e>
 800be84:	2380      	movs	r3, #128	; 0x80
 800be86:	e012      	b.n	800beae <UART_SetConfig+0x1f6e>
 800be88:	2340      	movs	r3, #64	; 0x40
 800be8a:	e010      	b.n	800beae <UART_SetConfig+0x1f6e>
 800be8c:	2320      	movs	r3, #32
 800be8e:	e00e      	b.n	800beae <UART_SetConfig+0x1f6e>
 800be90:	2310      	movs	r3, #16
 800be92:	e00c      	b.n	800beae <UART_SetConfig+0x1f6e>
 800be94:	230c      	movs	r3, #12
 800be96:	e00a      	b.n	800beae <UART_SetConfig+0x1f6e>
 800be98:	230a      	movs	r3, #10
 800be9a:	e008      	b.n	800beae <UART_SetConfig+0x1f6e>
 800be9c:	2308      	movs	r3, #8
 800be9e:	e006      	b.n	800beae <UART_SetConfig+0x1f6e>
 800bea0:	2306      	movs	r3, #6
 800bea2:	e004      	b.n	800beae <UART_SetConfig+0x1f6e>
 800bea4:	2304      	movs	r3, #4
 800bea6:	e002      	b.n	800beae <UART_SetConfig+0x1f6e>
 800bea8:	2302      	movs	r3, #2
 800beaa:	e000      	b.n	800beae <UART_SetConfig+0x1f6e>
 800beac:	2301      	movs	r3, #1
 800beae:	fbb2 f2f3 	udiv	r2, r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	085b      	lsrs	r3, r3, #1
 800beb8:	441a      	add	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	fbb2 f3f3 	udiv	r3, r2, r3
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bec6:	e195      	b.n	800c1f4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bec8:	4b87      	ldr	r3, [pc, #540]	; (800c0e8 <UART_SetConfig+0x21a8>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f003 0320 	and.w	r3, r3, #32
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d05d      	beq.n	800bf90 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bed4:	4b84      	ldr	r3, [pc, #528]	; (800c0e8 <UART_SetConfig+0x21a8>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	08db      	lsrs	r3, r3, #3
 800beda:	f003 0303 	and.w	r3, r3, #3
 800bede:	4a83      	ldr	r2, [pc, #524]	; (800c0ec <UART_SetConfig+0x21ac>)
 800bee0:	40da      	lsrs	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d044      	beq.n	800bf74 <UART_SetConfig+0x2034>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d03e      	beq.n	800bf70 <UART_SetConfig+0x2030>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef6:	2b02      	cmp	r3, #2
 800bef8:	d038      	beq.n	800bf6c <UART_SetConfig+0x202c>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befe:	2b03      	cmp	r3, #3
 800bf00:	d032      	beq.n	800bf68 <UART_SetConfig+0x2028>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf06:	2b04      	cmp	r3, #4
 800bf08:	d02c      	beq.n	800bf64 <UART_SetConfig+0x2024>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0e:	2b05      	cmp	r3, #5
 800bf10:	d026      	beq.n	800bf60 <UART_SetConfig+0x2020>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf16:	2b06      	cmp	r3, #6
 800bf18:	d020      	beq.n	800bf5c <UART_SetConfig+0x201c>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf1e:	2b07      	cmp	r3, #7
 800bf20:	d01a      	beq.n	800bf58 <UART_SetConfig+0x2018>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf26:	2b08      	cmp	r3, #8
 800bf28:	d014      	beq.n	800bf54 <UART_SetConfig+0x2014>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf2e:	2b09      	cmp	r3, #9
 800bf30:	d00e      	beq.n	800bf50 <UART_SetConfig+0x2010>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf36:	2b0a      	cmp	r3, #10
 800bf38:	d008      	beq.n	800bf4c <UART_SetConfig+0x200c>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf3e:	2b0b      	cmp	r3, #11
 800bf40:	d102      	bne.n	800bf48 <UART_SetConfig+0x2008>
 800bf42:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf46:	e016      	b.n	800bf76 <UART_SetConfig+0x2036>
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e014      	b.n	800bf76 <UART_SetConfig+0x2036>
 800bf4c:	2380      	movs	r3, #128	; 0x80
 800bf4e:	e012      	b.n	800bf76 <UART_SetConfig+0x2036>
 800bf50:	2340      	movs	r3, #64	; 0x40
 800bf52:	e010      	b.n	800bf76 <UART_SetConfig+0x2036>
 800bf54:	2320      	movs	r3, #32
 800bf56:	e00e      	b.n	800bf76 <UART_SetConfig+0x2036>
 800bf58:	2310      	movs	r3, #16
 800bf5a:	e00c      	b.n	800bf76 <UART_SetConfig+0x2036>
 800bf5c:	230c      	movs	r3, #12
 800bf5e:	e00a      	b.n	800bf76 <UART_SetConfig+0x2036>
 800bf60:	230a      	movs	r3, #10
 800bf62:	e008      	b.n	800bf76 <UART_SetConfig+0x2036>
 800bf64:	2308      	movs	r3, #8
 800bf66:	e006      	b.n	800bf76 <UART_SetConfig+0x2036>
 800bf68:	2306      	movs	r3, #6
 800bf6a:	e004      	b.n	800bf76 <UART_SetConfig+0x2036>
 800bf6c:	2304      	movs	r3, #4
 800bf6e:	e002      	b.n	800bf76 <UART_SetConfig+0x2036>
 800bf70:	2302      	movs	r3, #2
 800bf72:	e000      	b.n	800bf76 <UART_SetConfig+0x2036>
 800bf74:	2301      	movs	r3, #1
 800bf76:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	085b      	lsrs	r3, r3, #1
 800bf80:	441a      	add	r2, r3
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800bf8e:	e131      	b.n	800c1f4 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d043      	beq.n	800c020 <UART_SetConfig+0x20e0>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d03d      	beq.n	800c01c <UART_SetConfig+0x20dc>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	d037      	beq.n	800c018 <UART_SetConfig+0x20d8>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfac:	2b03      	cmp	r3, #3
 800bfae:	d031      	beq.n	800c014 <UART_SetConfig+0x20d4>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb4:	2b04      	cmp	r3, #4
 800bfb6:	d02b      	beq.n	800c010 <UART_SetConfig+0x20d0>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfbc:	2b05      	cmp	r3, #5
 800bfbe:	d025      	beq.n	800c00c <UART_SetConfig+0x20cc>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc4:	2b06      	cmp	r3, #6
 800bfc6:	d01f      	beq.n	800c008 <UART_SetConfig+0x20c8>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfcc:	2b07      	cmp	r3, #7
 800bfce:	d019      	beq.n	800c004 <UART_SetConfig+0x20c4>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd4:	2b08      	cmp	r3, #8
 800bfd6:	d013      	beq.n	800c000 <UART_SetConfig+0x20c0>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfdc:	2b09      	cmp	r3, #9
 800bfde:	d00d      	beq.n	800bffc <UART_SetConfig+0x20bc>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe4:	2b0a      	cmp	r3, #10
 800bfe6:	d007      	beq.n	800bff8 <UART_SetConfig+0x20b8>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfec:	2b0b      	cmp	r3, #11
 800bfee:	d101      	bne.n	800bff4 <UART_SetConfig+0x20b4>
 800bff0:	4b3f      	ldr	r3, [pc, #252]	; (800c0f0 <UART_SetConfig+0x21b0>)
 800bff2:	e016      	b.n	800c022 <UART_SetConfig+0x20e2>
 800bff4:	4b3d      	ldr	r3, [pc, #244]	; (800c0ec <UART_SetConfig+0x21ac>)
 800bff6:	e014      	b.n	800c022 <UART_SetConfig+0x20e2>
 800bff8:	4b3e      	ldr	r3, [pc, #248]	; (800c0f4 <UART_SetConfig+0x21b4>)
 800bffa:	e012      	b.n	800c022 <UART_SetConfig+0x20e2>
 800bffc:	4b3e      	ldr	r3, [pc, #248]	; (800c0f8 <UART_SetConfig+0x21b8>)
 800bffe:	e010      	b.n	800c022 <UART_SetConfig+0x20e2>
 800c000:	4b3e      	ldr	r3, [pc, #248]	; (800c0fc <UART_SetConfig+0x21bc>)
 800c002:	e00e      	b.n	800c022 <UART_SetConfig+0x20e2>
 800c004:	4b3e      	ldr	r3, [pc, #248]	; (800c100 <UART_SetConfig+0x21c0>)
 800c006:	e00c      	b.n	800c022 <UART_SetConfig+0x20e2>
 800c008:	4b3e      	ldr	r3, [pc, #248]	; (800c104 <UART_SetConfig+0x21c4>)
 800c00a:	e00a      	b.n	800c022 <UART_SetConfig+0x20e2>
 800c00c:	4b3e      	ldr	r3, [pc, #248]	; (800c108 <UART_SetConfig+0x21c8>)
 800c00e:	e008      	b.n	800c022 <UART_SetConfig+0x20e2>
 800c010:	4b3e      	ldr	r3, [pc, #248]	; (800c10c <UART_SetConfig+0x21cc>)
 800c012:	e006      	b.n	800c022 <UART_SetConfig+0x20e2>
 800c014:	4b3e      	ldr	r3, [pc, #248]	; (800c110 <UART_SetConfig+0x21d0>)
 800c016:	e004      	b.n	800c022 <UART_SetConfig+0x20e2>
 800c018:	4b3e      	ldr	r3, [pc, #248]	; (800c114 <UART_SetConfig+0x21d4>)
 800c01a:	e002      	b.n	800c022 <UART_SetConfig+0x20e2>
 800c01c:	4b3e      	ldr	r3, [pc, #248]	; (800c118 <UART_SetConfig+0x21d8>)
 800c01e:	e000      	b.n	800c022 <UART_SetConfig+0x20e2>
 800c020:	4b32      	ldr	r3, [pc, #200]	; (800c0ec <UART_SetConfig+0x21ac>)
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	6852      	ldr	r2, [r2, #4]
 800c026:	0852      	lsrs	r2, r2, #1
 800c028:	441a      	add	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c032:	b29b      	uxth	r3, r3
 800c034:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c036:	e0dd      	b.n	800c1f4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d046      	beq.n	800c0ce <UART_SetConfig+0x218e>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c044:	2b01      	cmp	r3, #1
 800c046:	d040      	beq.n	800c0ca <UART_SetConfig+0x218a>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d03a      	beq.n	800c0c6 <UART_SetConfig+0x2186>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c054:	2b03      	cmp	r3, #3
 800c056:	d034      	beq.n	800c0c2 <UART_SetConfig+0x2182>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05c:	2b04      	cmp	r3, #4
 800c05e:	d02e      	beq.n	800c0be <UART_SetConfig+0x217e>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c064:	2b05      	cmp	r3, #5
 800c066:	d028      	beq.n	800c0ba <UART_SetConfig+0x217a>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06c:	2b06      	cmp	r3, #6
 800c06e:	d022      	beq.n	800c0b6 <UART_SetConfig+0x2176>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c074:	2b07      	cmp	r3, #7
 800c076:	d01c      	beq.n	800c0b2 <UART_SetConfig+0x2172>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07c:	2b08      	cmp	r3, #8
 800c07e:	d016      	beq.n	800c0ae <UART_SetConfig+0x216e>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c084:	2b09      	cmp	r3, #9
 800c086:	d00f      	beq.n	800c0a8 <UART_SetConfig+0x2168>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08c:	2b0a      	cmp	r3, #10
 800c08e:	d008      	beq.n	800c0a2 <UART_SetConfig+0x2162>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c094:	2b0b      	cmp	r3, #11
 800c096:	d102      	bne.n	800c09e <UART_SetConfig+0x215e>
 800c098:	f643 5309 	movw	r3, #15625	; 0x3d09
 800c09c:	e018      	b.n	800c0d0 <UART_SetConfig+0x2190>
 800c09e:	4b18      	ldr	r3, [pc, #96]	; (800c100 <UART_SetConfig+0x21c0>)
 800c0a0:	e016      	b.n	800c0d0 <UART_SetConfig+0x2190>
 800c0a2:	f647 2312 	movw	r3, #31250	; 0x7a12
 800c0a6:	e013      	b.n	800c0d0 <UART_SetConfig+0x2190>
 800c0a8:	f24f 4324 	movw	r3, #62500	; 0xf424
 800c0ac:	e010      	b.n	800c0d0 <UART_SetConfig+0x2190>
 800c0ae:	4b1b      	ldr	r3, [pc, #108]	; (800c11c <UART_SetConfig+0x21dc>)
 800c0b0:	e00e      	b.n	800c0d0 <UART_SetConfig+0x2190>
 800c0b2:	4b0f      	ldr	r3, [pc, #60]	; (800c0f0 <UART_SetConfig+0x21b0>)
 800c0b4:	e00c      	b.n	800c0d0 <UART_SetConfig+0x2190>
 800c0b6:	4b1a      	ldr	r3, [pc, #104]	; (800c120 <UART_SetConfig+0x21e0>)
 800c0b8:	e00a      	b.n	800c0d0 <UART_SetConfig+0x2190>
 800c0ba:	4b1a      	ldr	r3, [pc, #104]	; (800c124 <UART_SetConfig+0x21e4>)
 800c0bc:	e008      	b.n	800c0d0 <UART_SetConfig+0x2190>
 800c0be:	4b0d      	ldr	r3, [pc, #52]	; (800c0f4 <UART_SetConfig+0x21b4>)
 800c0c0:	e006      	b.n	800c0d0 <UART_SetConfig+0x2190>
 800c0c2:	4b19      	ldr	r3, [pc, #100]	; (800c128 <UART_SetConfig+0x21e8>)
 800c0c4:	e004      	b.n	800c0d0 <UART_SetConfig+0x2190>
 800c0c6:	4b0c      	ldr	r3, [pc, #48]	; (800c0f8 <UART_SetConfig+0x21b8>)
 800c0c8:	e002      	b.n	800c0d0 <UART_SetConfig+0x2190>
 800c0ca:	4b0c      	ldr	r3, [pc, #48]	; (800c0fc <UART_SetConfig+0x21bc>)
 800c0cc:	e000      	b.n	800c0d0 <UART_SetConfig+0x2190>
 800c0ce:	4b0c      	ldr	r3, [pc, #48]	; (800c100 <UART_SetConfig+0x21c0>)
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	6852      	ldr	r2, [r2, #4]
 800c0d4:	0852      	lsrs	r2, r2, #1
 800c0d6:	441a      	add	r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0e4:	e086      	b.n	800c1f4 <UART_SetConfig+0x22b4>
 800c0e6:	bf00      	nop
 800c0e8:	58024400 	.word	0x58024400
 800c0ec:	03d09000 	.word	0x03d09000
 800c0f0:	0003d090 	.word	0x0003d090
 800c0f4:	0007a120 	.word	0x0007a120
 800c0f8:	000f4240 	.word	0x000f4240
 800c0fc:	001e8480 	.word	0x001e8480
 800c100:	003d0900 	.word	0x003d0900
 800c104:	00516155 	.word	0x00516155
 800c108:	0061a800 	.word	0x0061a800
 800c10c:	007a1200 	.word	0x007a1200
 800c110:	00a2c2aa 	.word	0x00a2c2aa
 800c114:	00f42400 	.word	0x00f42400
 800c118:	01e84800 	.word	0x01e84800
 800c11c:	0001e848 	.word	0x0001e848
 800c120:	00051615 	.word	0x00051615
 800c124:	00061a80 	.word	0x00061a80
 800c128:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c130:	2b00      	cmp	r3, #0
 800c132:	d04e      	beq.n	800c1d2 <UART_SetConfig+0x2292>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d047      	beq.n	800c1cc <UART_SetConfig+0x228c>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c140:	2b02      	cmp	r3, #2
 800c142:	d040      	beq.n	800c1c6 <UART_SetConfig+0x2286>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c148:	2b03      	cmp	r3, #3
 800c14a:	d039      	beq.n	800c1c0 <UART_SetConfig+0x2280>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c150:	2b04      	cmp	r3, #4
 800c152:	d032      	beq.n	800c1ba <UART_SetConfig+0x227a>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c158:	2b05      	cmp	r3, #5
 800c15a:	d02b      	beq.n	800c1b4 <UART_SetConfig+0x2274>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c160:	2b06      	cmp	r3, #6
 800c162:	d024      	beq.n	800c1ae <UART_SetConfig+0x226e>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c168:	2b07      	cmp	r3, #7
 800c16a:	d01d      	beq.n	800c1a8 <UART_SetConfig+0x2268>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c170:	2b08      	cmp	r3, #8
 800c172:	d016      	beq.n	800c1a2 <UART_SetConfig+0x2262>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c178:	2b09      	cmp	r3, #9
 800c17a:	d00f      	beq.n	800c19c <UART_SetConfig+0x225c>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c180:	2b0a      	cmp	r3, #10
 800c182:	d008      	beq.n	800c196 <UART_SetConfig+0x2256>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c188:	2b0b      	cmp	r3, #11
 800c18a:	d101      	bne.n	800c190 <UART_SetConfig+0x2250>
 800c18c:	2380      	movs	r3, #128	; 0x80
 800c18e:	e022      	b.n	800c1d6 <UART_SetConfig+0x2296>
 800c190:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c194:	e01f      	b.n	800c1d6 <UART_SetConfig+0x2296>
 800c196:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c19a:	e01c      	b.n	800c1d6 <UART_SetConfig+0x2296>
 800c19c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1a0:	e019      	b.n	800c1d6 <UART_SetConfig+0x2296>
 800c1a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1a6:	e016      	b.n	800c1d6 <UART_SetConfig+0x2296>
 800c1a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c1ac:	e013      	b.n	800c1d6 <UART_SetConfig+0x2296>
 800c1ae:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800c1b2:	e010      	b.n	800c1d6 <UART_SetConfig+0x2296>
 800c1b4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800c1b8:	e00d      	b.n	800c1d6 <UART_SetConfig+0x2296>
 800c1ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c1be:	e00a      	b.n	800c1d6 <UART_SetConfig+0x2296>
 800c1c0:	f241 5355 	movw	r3, #5461	; 0x1555
 800c1c4:	e007      	b.n	800c1d6 <UART_SetConfig+0x2296>
 800c1c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c1ca:	e004      	b.n	800c1d6 <UART_SetConfig+0x2296>
 800c1cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c1d0:	e001      	b.n	800c1d6 <UART_SetConfig+0x2296>
 800c1d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	6852      	ldr	r2, [r2, #4]
 800c1da:	0852      	lsrs	r2, r2, #1
 800c1dc:	441a      	add	r2, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c1ea:	e003      	b.n	800c1f4 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800c1f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f6:	2b0f      	cmp	r3, #15
 800c1f8:	d908      	bls.n	800c20c <UART_SetConfig+0x22cc>
 800c1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c200:	d204      	bcs.n	800c20c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c208:	60da      	str	r2, [r3, #12]
 800c20a:	e002      	b.n	800c212 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800c20c:	2301      	movs	r3, #1
 800c20e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2201      	movs	r2, #1
 800c216:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2201      	movs	r2, #1
 800c21e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800c22e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800c232:	4618      	mov	r0, r3
 800c234:	3740      	adds	r7, #64	; 0x40
 800c236:	46bd      	mov	sp, r7
 800c238:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800c23c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c248:	f003 0301 	and.w	r3, r3, #1
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00a      	beq.n	800c266 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	430a      	orrs	r2, r1
 800c264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c26a:	f003 0302 	and.w	r3, r3, #2
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d00a      	beq.n	800c288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	430a      	orrs	r2, r1
 800c286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c28c:	f003 0304 	and.w	r3, r3, #4
 800c290:	2b00      	cmp	r3, #0
 800c292:	d00a      	beq.n	800c2aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	430a      	orrs	r2, r1
 800c2a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ae:	f003 0308 	and.w	r3, r3, #8
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d00a      	beq.n	800c2cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	430a      	orrs	r2, r1
 800c2ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2d0:	f003 0310 	and.w	r3, r3, #16
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d00a      	beq.n	800c2ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	430a      	orrs	r2, r1
 800c2ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2f2:	f003 0320 	and.w	r3, r3, #32
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d00a      	beq.n	800c310 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	430a      	orrs	r2, r1
 800c30e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d01a      	beq.n	800c352 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	430a      	orrs	r2, r1
 800c330:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c33a:	d10a      	bne.n	800c352 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	430a      	orrs	r2, r1
 800c350:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00a      	beq.n	800c374 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	430a      	orrs	r2, r1
 800c372:	605a      	str	r2, [r3, #4]
  }
}
 800c374:	bf00      	nop
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr

0800c380 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af02      	add	r7, sp, #8
 800c386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c390:	f7f6 f86e 	bl	8002470 <HAL_GetTick>
 800c394:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f003 0308 	and.w	r3, r3, #8
 800c3a0:	2b08      	cmp	r3, #8
 800c3a2:	d10e      	bne.n	800c3c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 f82c 	bl	800c410 <UART_WaitOnFlagUntilTimeout>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d001      	beq.n	800c3c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3be:	2303      	movs	r3, #3
 800c3c0:	e022      	b.n	800c408 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f003 0304 	and.w	r3, r3, #4
 800c3cc:	2b04      	cmp	r3, #4
 800c3ce:	d10e      	bne.n	800c3ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c3d4:	9300      	str	r3, [sp, #0]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 f816 	bl	800c410 <UART_WaitOnFlagUntilTimeout>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d001      	beq.n	800c3ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3ea:	2303      	movs	r3, #3
 800c3ec:	e00c      	b.n	800c408 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2220      	movs	r2, #32
 800c3f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2220      	movs	r2, #32
 800c3fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3710      	adds	r7, #16
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	603b      	str	r3, [r7, #0]
 800c41c:	4613      	mov	r3, r2
 800c41e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c420:	e062      	b.n	800c4e8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c428:	d05e      	beq.n	800c4e8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c42a:	f7f6 f821 	bl	8002470 <HAL_GetTick>
 800c42e:	4602      	mov	r2, r0
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	1ad3      	subs	r3, r2, r3
 800c434:	69ba      	ldr	r2, [r7, #24]
 800c436:	429a      	cmp	r2, r3
 800c438:	d302      	bcc.n	800c440 <UART_WaitOnFlagUntilTimeout+0x30>
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d11d      	bne.n	800c47c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c44e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	689a      	ldr	r2, [r3, #8]
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f022 0201 	bic.w	r2, r2, #1
 800c45e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2220      	movs	r2, #32
 800c464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2220      	movs	r2, #32
 800c46c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2200      	movs	r2, #0
 800c474:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c478:	2303      	movs	r3, #3
 800c47a:	e045      	b.n	800c508 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f003 0304 	and.w	r3, r3, #4
 800c486:	2b00      	cmp	r3, #0
 800c488:	d02e      	beq.n	800c4e8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	69db      	ldr	r3, [r3, #28]
 800c490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c498:	d126      	bne.n	800c4e8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c4a2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c4b2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	689a      	ldr	r2, [r3, #8]
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f022 0201 	bic.w	r2, r2, #1
 800c4c2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2220      	movs	r2, #32
 800c4c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2220      	movs	r2, #32
 800c4d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2220      	movs	r2, #32
 800c4d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800c4e4:	2303      	movs	r3, #3
 800c4e6:	e00f      	b.n	800c508 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	69da      	ldr	r2, [r3, #28]
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	4013      	ands	r3, r2
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	bf0c      	ite	eq
 800c4f8:	2301      	moveq	r3, #1
 800c4fa:	2300      	movne	r3, #0
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	461a      	mov	r2, r3
 800c500:	79fb      	ldrb	r3, [r7, #7]
 800c502:	429a      	cmp	r2, r3
 800c504:	d08d      	beq.n	800c422 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c506:	2300      	movs	r3, #0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c526:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	689a      	ldr	r2, [r3, #8]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c536:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2220      	movs	r2, #32
 800c53c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800c540:	bf00      	nop
 800c542:	370c      	adds	r7, #12
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr

0800c54c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c562:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	6899      	ldr	r1, [r3, #8]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	4b08      	ldr	r3, [pc, #32]	; (800c590 <UART_EndRxTransfer+0x44>)
 800c570:	400b      	ands	r3, r1
 800c572:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2220      	movs	r2, #32
 800c578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800c582:	bf00      	nop
 800c584:	370c      	adds	r7, #12
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr
 800c58e:	bf00      	nop
 800c590:	effffffe 	.word	0xeffffffe

0800c594 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5a0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	69db      	ldr	r3, [r3, #28]
 800c5a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5aa:	d01f      	beq.n	800c5ec <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c5c2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	689a      	ldr	r2, [r3, #8]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f022 0201 	bic.w	r2, r2, #1
 800c5d2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	689a      	ldr	r2, [r3, #8]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5e2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2220      	movs	r2, #32
 800c5e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	f7f4 f8ab 	bl	8000748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5f2:	bf00      	nop
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b084      	sub	sp, #16
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c606:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800c608:	68f8      	ldr	r0, [r7, #12]
 800c60a:	f7fd fc85 	bl	8009f18 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c60e:	bf00      	nop
 800c610:	3710      	adds	r7, #16
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}

0800c616 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c616:	b580      	push	{r7, lr}
 800c618:	b086      	sub	sp, #24
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c622:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c62a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c632:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c63e:	2b80      	cmp	r3, #128	; 0x80
 800c640:	d109      	bne.n	800c656 <UART_DMAError+0x40>
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	2b21      	cmp	r3, #33	; 0x21
 800c646:	d106      	bne.n	800c656 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c650:	6978      	ldr	r0, [r7, #20]
 800c652:	f7ff ff5d 	bl	800c510 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	689b      	ldr	r3, [r3, #8]
 800c65c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c660:	2b40      	cmp	r3, #64	; 0x40
 800c662:	d109      	bne.n	800c678 <UART_DMAError+0x62>
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2b22      	cmp	r3, #34	; 0x22
 800c668:	d106      	bne.n	800c678 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c672:	6978      	ldr	r0, [r7, #20]
 800c674:	f7ff ff6a 	bl	800c54c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c67e:	f043 0210 	orr.w	r2, r3, #16
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c688:	6978      	ldr	r0, [r7, #20]
 800c68a:	f7fd fc4f 	bl	8009f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c68e:	bf00      	nop
 800c690:	3718      	adds	r7, #24
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b084      	sub	sp, #16
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	f7fd fc39 	bl	8009f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6ba:	bf00      	nop
 800c6bc:	3710      	adds	r7, #16
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c6c2:	b480      	push	{r7}
 800c6c4:	b083      	sub	sp, #12
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6d0:	2b21      	cmp	r3, #33	; 0x21
 800c6d2:	d12a      	bne.n	800c72a <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d110      	bne.n	800c702 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c6ee:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6fe:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c700:	e013      	b.n	800c72a <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c706:	781a      	ldrb	r2, [r3, #0]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c712:	1c5a      	adds	r2, r3, #1
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c71e:	b29b      	uxth	r3, r3
 800c720:	3b01      	subs	r3, #1
 800c722:	b29a      	uxth	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c72a:	bf00      	nop
 800c72c:	370c      	adds	r7, #12
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr

0800c736 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c736:	b480      	push	{r7}
 800c738:	b085      	sub	sp, #20
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c744:	2b21      	cmp	r3, #33	; 0x21
 800c746:	d12f      	bne.n	800c7a8 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c74e:	b29b      	uxth	r3, r3
 800c750:	2b00      	cmp	r3, #0
 800c752:	d110      	bne.n	800c776 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	681a      	ldr	r2, [r3, #0]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c762:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c772:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c774:	e018      	b.n	800c7a8 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c77a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	881b      	ldrh	r3, [r3, #0]
 800c780:	461a      	mov	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c78a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c790:	1c9a      	adds	r2, r3, #2
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	3b01      	subs	r3, #1
 800c7a0:	b29a      	uxth	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c7a8:	bf00      	nop
 800c7aa:	3714      	adds	r7, #20
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b085      	sub	sp, #20
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7c2:	2b21      	cmp	r3, #33	; 0x21
 800c7c4:	d13d      	bne.n	800c842 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7cc:	81fb      	strh	r3, [r7, #14]
 800c7ce:	e035      	b.n	800c83c <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d111      	bne.n	800c800 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	689a      	ldr	r2, [r3, #8]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c7ea:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7fa:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c7fc:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c7fe:	e020      	b.n	800c842 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	69db      	ldr	r3, [r3, #28]
 800c806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d013      	beq.n	800c836 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c812:	781a      	ldrb	r2, [r3, #0]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c81e:	1c5a      	adds	r2, r3, #1
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	3b01      	subs	r3, #1
 800c82e:	b29a      	uxth	r2, r3
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c836:	89fb      	ldrh	r3, [r7, #14]
 800c838:	3b01      	subs	r3, #1
 800c83a:	81fb      	strh	r3, [r7, #14]
 800c83c:	89fb      	ldrh	r3, [r7, #14]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1c6      	bne.n	800c7d0 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800c842:	bf00      	nop
 800c844:	3714      	adds	r7, #20
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr

0800c84e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c84e:	b480      	push	{r7}
 800c850:	b085      	sub	sp, #20
 800c852:	af00      	add	r7, sp, #0
 800c854:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c85c:	2b21      	cmp	r3, #33	; 0x21
 800c85e:	d142      	bne.n	800c8e6 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c866:	81fb      	strh	r3, [r7, #14]
 800c868:	e03a      	b.n	800c8e0 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c870:	b29b      	uxth	r3, r3
 800c872:	2b00      	cmp	r3, #0
 800c874:	d111      	bne.n	800c89a <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	689a      	ldr	r2, [r3, #8]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c884:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c894:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c896:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c898:	e025      	b.n	800c8e6 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	69db      	ldr	r3, [r3, #28]
 800c8a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d018      	beq.n	800c8da <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8ac:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	881b      	ldrh	r3, [r3, #0]
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c8bc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8c2:	1c9a      	adds	r2, r3, #2
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	3b01      	subs	r3, #1
 800c8d2:	b29a      	uxth	r2, r3
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c8da:	89fb      	ldrh	r3, [r7, #14]
 800c8dc:	3b01      	subs	r3, #1
 800c8de:	81fb      	strh	r3, [r7, #14]
 800c8e0:	89fb      	ldrh	r3, [r7, #14]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d1c1      	bne.n	800c86a <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800c8e6:	bf00      	nop
 800c8e8:	3714      	adds	r7, #20
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr

0800c8f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b082      	sub	sp, #8
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c908:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2220      	movs	r2, #32
 800c90e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f7f3 fed3 	bl	80006c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c91e:	bf00      	nop
 800c920:	3708      	adds	r7, #8
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c926:	b580      	push	{r7, lr}
 800c928:	b084      	sub	sp, #16
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c934:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c93c:	2b22      	cmp	r3, #34	; 0x22
 800c93e:	d13b      	bne.n	800c9b8 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c946:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c948:	89bb      	ldrh	r3, [r7, #12]
 800c94a:	b2d9      	uxtb	r1, r3
 800c94c:	89fb      	ldrh	r3, [r7, #14]
 800c94e:	b2da      	uxtb	r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c954:	400a      	ands	r2, r1
 800c956:	b2d2      	uxtb	r2, r2
 800c958:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c95e:	1c5a      	adds	r2, r3, #1
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	3b01      	subs	r3, #1
 800c96e:	b29a      	uxth	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d122      	bne.n	800c9c8 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c990:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	689a      	ldr	r2, [r3, #8]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f022 0201 	bic.w	r2, r2, #1
 800c9a0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2220      	movs	r2, #32
 800c9a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7f3 fec9 	bl	8000748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c9b6:	e007      	b.n	800c9c8 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	699a      	ldr	r2, [r3, #24]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f042 0208 	orr.w	r2, r2, #8
 800c9c6:	619a      	str	r2, [r3, #24]
}
 800c9c8:	bf00      	nop
 800c9ca:	3710      	adds	r7, #16
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c9de:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9e6:	2b22      	cmp	r3, #34	; 0x22
 800c9e8:	d13b      	bne.n	800ca62 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9f6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c9f8:	89ba      	ldrh	r2, [r7, #12]
 800c9fa:	89fb      	ldrh	r3, [r7, #14]
 800c9fc:	4013      	ands	r3, r2
 800c9fe:	b29a      	uxth	r2, r3
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca08:	1c9a      	adds	r2, r3, #2
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca14:	b29b      	uxth	r3, r3
 800ca16:	3b01      	subs	r3, #1
 800ca18:	b29a      	uxth	r2, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d122      	bne.n	800ca72 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ca3a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	689a      	ldr	r2, [r3, #8]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f022 0201 	bic.w	r2, r2, #1
 800ca4a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2220      	movs	r2, #32
 800ca50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f7f3 fe74 	bl	8000748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca60:	e007      	b.n	800ca72 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	699a      	ldr	r2, [r3, #24]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f042 0208 	orr.w	r2, r2, #8
 800ca70:	619a      	str	r2, [r3, #24]
}
 800ca72:	bf00      	nop
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
	...

0800ca7c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca8a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca92:	2b22      	cmp	r3, #34	; 0x22
 800ca94:	d166      	bne.n	800cb64 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ca9c:	81fb      	strh	r3, [r7, #14]
 800ca9e:	e03d      	b.n	800cb1c <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa6:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800caa8:	893b      	ldrh	r3, [r7, #8]
 800caaa:	b2d9      	uxtb	r1, r3
 800caac:	89bb      	ldrh	r3, [r7, #12]
 800caae:	b2da      	uxtb	r2, r3
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cab4:	400a      	ands	r2, r1
 800cab6:	b2d2      	uxtb	r2, r2
 800cab8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cabe:	1c5a      	adds	r2, r3, #1
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800caca:	b29b      	uxth	r3, r3
 800cacc:	3b01      	subs	r3, #1
 800cace:	b29a      	uxth	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cadc:	b29b      	uxth	r3, r3
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d119      	bne.n	800cb16 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800caf0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	6899      	ldr	r1, [r3, #8]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	4b1f      	ldr	r3, [pc, #124]	; (800cb7c <UART_RxISR_8BIT_FIFOEN+0x100>)
 800cafe:	400b      	ands	r3, r1
 800cb00:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2220      	movs	r2, #32
 800cb06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f7f3 fe19 	bl	8000748 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cb16:	89fb      	ldrh	r3, [r7, #14]
 800cb18:	3b01      	subs	r3, #1
 800cb1a:	81fb      	strh	r3, [r7, #14]
 800cb1c:	89fb      	ldrh	r3, [r7, #14]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d1be      	bne.n	800caa0 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb28:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cb2a:	897b      	ldrh	r3, [r7, #10]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d021      	beq.n	800cb74 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb36:	897a      	ldrh	r2, [r7, #10]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d21b      	bcs.n	800cb74 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	689a      	ldr	r2, [r3, #8]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cb4a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4a0c      	ldr	r2, [pc, #48]	; (800cb80 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800cb50:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	681a      	ldr	r2, [r3, #0]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f042 0220 	orr.w	r2, r2, #32
 800cb60:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cb62:	e007      	b.n	800cb74 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	699a      	ldr	r2, [r3, #24]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f042 0208 	orr.w	r2, r2, #8
 800cb72:	619a      	str	r2, [r3, #24]
}
 800cb74:	bf00      	nop
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}
 800cb7c:	effffffe 	.word	0xeffffffe
 800cb80:	0800c927 	.word	0x0800c927

0800cb84 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b086      	sub	sp, #24
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb92:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb9a:	2b22      	cmp	r3, #34	; 0x22
 800cb9c:	d166      	bne.n	800cc6c <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cba4:	82fb      	strh	r3, [r7, #22]
 800cba6:	e03d      	b.n	800cc24 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbae:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbb4:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800cbb6:	8a3a      	ldrh	r2, [r7, #16]
 800cbb8:	8abb      	ldrh	r3, [r7, #20]
 800cbba:	4013      	ands	r3, r2
 800cbbc:	b29a      	uxth	r2, r3
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbc6:	1c9a      	adds	r2, r3, #2
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cbe4:	b29b      	uxth	r3, r3
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d119      	bne.n	800cc1e <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cbf8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	6899      	ldr	r1, [r3, #8]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	4b1f      	ldr	r3, [pc, #124]	; (800cc84 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800cc06:	400b      	ands	r3, r1
 800cc08:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2220      	movs	r2, #32
 800cc0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f7f3 fd95 	bl	8000748 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cc1e:	8afb      	ldrh	r3, [r7, #22]
 800cc20:	3b01      	subs	r3, #1
 800cc22:	82fb      	strh	r3, [r7, #22]
 800cc24:	8afb      	ldrh	r3, [r7, #22]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d1be      	bne.n	800cba8 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc30:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cc32:	8a7b      	ldrh	r3, [r7, #18]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d021      	beq.n	800cc7c <UART_RxISR_16BIT_FIFOEN+0xf8>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cc3e:	8a7a      	ldrh	r2, [r7, #18]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d21b      	bcs.n	800cc7c <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	689a      	ldr	r2, [r3, #8]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cc52:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	4a0c      	ldr	r2, [pc, #48]	; (800cc88 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800cc58:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f042 0220 	orr.w	r2, r2, #32
 800cc68:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cc6a:	e007      	b.n	800cc7c <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	699a      	ldr	r2, [r3, #24]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f042 0208 	orr.w	r2, r2, #8
 800cc7a:	619a      	str	r2, [r3, #24]
}
 800cc7c:	bf00      	nop
 800cc7e:	3718      	adds	r7, #24
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}
 800cc84:	effffffe 	.word	0xeffffffe
 800cc88:	0800c9d1 	.word	0x0800c9d1

0800cc8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cc94:	bf00      	nop
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b083      	sub	sp, #12
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cca8:	bf00      	nop
 800ccaa:	370c      	adds	r7, #12
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr

0800ccb4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b083      	sub	sp, #12
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ccbc:	bf00      	nop
 800ccbe:	370c      	adds	r7, #12
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr

0800ccc8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d101      	bne.n	800ccde <HAL_UARTEx_DisableFifoMode+0x16>
 800ccda:	2302      	movs	r3, #2
 800ccdc:	e027      	b.n	800cd2e <HAL_UARTEx_DisableFifoMode+0x66>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2201      	movs	r2, #1
 800cce2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2224      	movs	r2, #36	; 0x24
 800ccea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f022 0201 	bic.w	r2, r2, #1
 800cd04:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cd0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2200      	movs	r2, #0
 800cd12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2220      	movs	r2, #32
 800cd20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2200      	movs	r2, #0
 800cd28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cd2c:	2300      	movs	r3, #0
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3714      	adds	r7, #20
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr

0800cd3a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b084      	sub	sp, #16
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
 800cd42:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d101      	bne.n	800cd52 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cd4e:	2302      	movs	r3, #2
 800cd50:	e02d      	b.n	800cdae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2201      	movs	r2, #1
 800cd56:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2224      	movs	r2, #36	; 0x24
 800cd5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	681a      	ldr	r2, [r3, #0]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f022 0201 	bic.w	r2, r2, #1
 800cd78:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	683a      	ldr	r2, [r7, #0]
 800cd8a:	430a      	orrs	r2, r1
 800cd8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 f850 	bl	800ce34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2220      	movs	r2, #32
 800cda0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cdac:	2300      	movs	r3, #0
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3710      	adds	r7, #16
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}

0800cdb6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b084      	sub	sp, #16
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
 800cdbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d101      	bne.n	800cdce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cdca:	2302      	movs	r3, #2
 800cdcc:	e02d      	b.n	800ce2a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2224      	movs	r2, #36	; 0x24
 800cdda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f022 0201 	bic.w	r2, r2, #1
 800cdf4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	689b      	ldr	r3, [r3, #8]
 800cdfc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	683a      	ldr	r2, [r7, #0]
 800ce06:	430a      	orrs	r2, r1
 800ce08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 f812 	bl	800ce34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	68fa      	ldr	r2, [r7, #12]
 800ce16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2220      	movs	r2, #32
 800ce1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
	...

0800ce34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b089      	sub	sp, #36	; 0x24
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800ce3c:	4a2f      	ldr	r2, [pc, #188]	; (800cefc <UARTEx_SetNbDataToProcess+0xc8>)
 800ce3e:	f107 0314 	add.w	r3, r7, #20
 800ce42:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce46:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ce4a:	4a2d      	ldr	r2, [pc, #180]	; (800cf00 <UARTEx_SetNbDataToProcess+0xcc>)
 800ce4c:	f107 030c 	add.w	r3, r7, #12
 800ce50:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce54:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d108      	bne.n	800ce72 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2201      	movs	r2, #1
 800ce64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ce70:	e03d      	b.n	800ceee <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ce72:	2308      	movs	r3, #8
 800ce74:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ce76:	2308      	movs	r3, #8
 800ce78:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	689b      	ldr	r3, [r3, #8]
 800ce80:	0e5b      	lsrs	r3, r3, #25
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	f003 0307 	and.w	r3, r3, #7
 800ce88:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	689b      	ldr	r3, [r3, #8]
 800ce90:	0f5b      	lsrs	r3, r3, #29
 800ce92:	b2db      	uxtb	r3, r3
 800ce94:	f003 0307 	and.w	r3, r3, #7
 800ce98:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ce9a:	7fbb      	ldrb	r3, [r7, #30]
 800ce9c:	7f3a      	ldrb	r2, [r7, #28]
 800ce9e:	f107 0120 	add.w	r1, r7, #32
 800cea2:	440a      	add	r2, r1
 800cea4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800cea8:	fb02 f303 	mul.w	r3, r2, r3
 800ceac:	7f3a      	ldrb	r2, [r7, #28]
 800ceae:	f107 0120 	add.w	r1, r7, #32
 800ceb2:	440a      	add	r2, r1
 800ceb4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ceb8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800cec4:	7ffb      	ldrb	r3, [r7, #31]
 800cec6:	7f7a      	ldrb	r2, [r7, #29]
 800cec8:	f107 0120 	add.w	r1, r7, #32
 800cecc:	440a      	add	r2, r1
 800cece:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ced2:	fb02 f303 	mul.w	r3, r2, r3
 800ced6:	7f7a      	ldrb	r2, [r7, #29]
 800ced8:	f107 0120 	add.w	r1, r7, #32
 800cedc:	440a      	add	r2, r1
 800cede:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800cee2:	fb93 f3f2 	sdiv	r3, r3, r2
 800cee6:	b29a      	uxth	r2, r3
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ceee:	bf00      	nop
 800cef0:	3724      	adds	r7, #36	; 0x24
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr
 800cefa:	bf00      	nop
 800cefc:	0800dfc0 	.word	0x0800dfc0
 800cf00:	0800dfc8 	.word	0x0800dfc8

0800cf04 <__errno>:
 800cf04:	4b01      	ldr	r3, [pc, #4]	; (800cf0c <__errno+0x8>)
 800cf06:	6818      	ldr	r0, [r3, #0]
 800cf08:	4770      	bx	lr
 800cf0a:	bf00      	nop
 800cf0c:	24000050 	.word	0x24000050

0800cf10 <__libc_init_array>:
 800cf10:	b570      	push	{r4, r5, r6, lr}
 800cf12:	4e0d      	ldr	r6, [pc, #52]	; (800cf48 <__libc_init_array+0x38>)
 800cf14:	4c0d      	ldr	r4, [pc, #52]	; (800cf4c <__libc_init_array+0x3c>)
 800cf16:	1ba4      	subs	r4, r4, r6
 800cf18:	10a4      	asrs	r4, r4, #2
 800cf1a:	2500      	movs	r5, #0
 800cf1c:	42a5      	cmp	r5, r4
 800cf1e:	d109      	bne.n	800cf34 <__libc_init_array+0x24>
 800cf20:	4e0b      	ldr	r6, [pc, #44]	; (800cf50 <__libc_init_array+0x40>)
 800cf22:	4c0c      	ldr	r4, [pc, #48]	; (800cf54 <__libc_init_array+0x44>)
 800cf24:	f001 f83e 	bl	800dfa4 <_init>
 800cf28:	1ba4      	subs	r4, r4, r6
 800cf2a:	10a4      	asrs	r4, r4, #2
 800cf2c:	2500      	movs	r5, #0
 800cf2e:	42a5      	cmp	r5, r4
 800cf30:	d105      	bne.n	800cf3e <__libc_init_array+0x2e>
 800cf32:	bd70      	pop	{r4, r5, r6, pc}
 800cf34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf38:	4798      	blx	r3
 800cf3a:	3501      	adds	r5, #1
 800cf3c:	e7ee      	b.n	800cf1c <__libc_init_array+0xc>
 800cf3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf42:	4798      	blx	r3
 800cf44:	3501      	adds	r5, #1
 800cf46:	e7f2      	b.n	800cf2e <__libc_init_array+0x1e>
 800cf48:	0800e210 	.word	0x0800e210
 800cf4c:	0800e210 	.word	0x0800e210
 800cf50:	0800e210 	.word	0x0800e210
 800cf54:	0800e214 	.word	0x0800e214

0800cf58 <memset>:
 800cf58:	4402      	add	r2, r0
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d100      	bne.n	800cf62 <memset+0xa>
 800cf60:	4770      	bx	lr
 800cf62:	f803 1b01 	strb.w	r1, [r3], #1
 800cf66:	e7f9      	b.n	800cf5c <memset+0x4>

0800cf68 <cos>:
 800cf68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf6a:	eeb0 7b40 	vmov.f64	d7, d0
 800cf6e:	ee17 3a90 	vmov	r3, s15
 800cf72:	4a19      	ldr	r2, [pc, #100]	; (800cfd8 <cos+0x70>)
 800cf74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	dc04      	bgt.n	800cf86 <cos+0x1e>
 800cf7c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800cfd0 <cos+0x68>
 800cf80:	f000 faa2 	bl	800d4c8 <__kernel_cos>
 800cf84:	e004      	b.n	800cf90 <cos+0x28>
 800cf86:	4a15      	ldr	r2, [pc, #84]	; (800cfdc <cos+0x74>)
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	dd04      	ble.n	800cf96 <cos+0x2e>
 800cf8c:	ee30 0b40 	vsub.f64	d0, d0, d0
 800cf90:	b005      	add	sp, #20
 800cf92:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf96:	4668      	mov	r0, sp
 800cf98:	f000 f956 	bl	800d248 <__ieee754_rem_pio2>
 800cf9c:	f000 0003 	and.w	r0, r0, #3
 800cfa0:	2801      	cmp	r0, #1
 800cfa2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfa6:	ed9d 0b00 	vldr	d0, [sp]
 800cfaa:	d007      	beq.n	800cfbc <cos+0x54>
 800cfac:	2802      	cmp	r0, #2
 800cfae:	d00a      	beq.n	800cfc6 <cos+0x5e>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	d0e5      	beq.n	800cf80 <cos+0x18>
 800cfb4:	2001      	movs	r0, #1
 800cfb6:	f000 fd8f 	bl	800dad8 <__kernel_sin>
 800cfba:	e7e9      	b.n	800cf90 <cos+0x28>
 800cfbc:	f000 fd8c 	bl	800dad8 <__kernel_sin>
 800cfc0:	eeb1 0b40 	vneg.f64	d0, d0
 800cfc4:	e7e4      	b.n	800cf90 <cos+0x28>
 800cfc6:	f000 fa7f 	bl	800d4c8 <__kernel_cos>
 800cfca:	e7f9      	b.n	800cfc0 <cos+0x58>
 800cfcc:	f3af 8000 	nop.w
	...
 800cfd8:	3fe921fb 	.word	0x3fe921fb
 800cfdc:	7fefffff 	.word	0x7fefffff

0800cfe0 <atan2>:
 800cfe0:	f000 b84e 	b.w	800d080 <__ieee754_atan2>
 800cfe4:	0000      	movs	r0, r0
	...

0800cfe8 <sqrt>:
 800cfe8:	b500      	push	{lr}
 800cfea:	ed2d 8b02 	vpush	{d8}
 800cfee:	eeb0 8b40 	vmov.f64	d8, d0
 800cff2:	b08b      	sub	sp, #44	; 0x2c
 800cff4:	f000 fa64 	bl	800d4c0 <__ieee754_sqrt>
 800cff8:	4b1f      	ldr	r3, [pc, #124]	; (800d078 <sqrt+0x90>)
 800cffa:	f993 3000 	ldrsb.w	r3, [r3]
 800cffe:	1c5a      	adds	r2, r3, #1
 800d000:	d024      	beq.n	800d04c <sqrt+0x64>
 800d002:	eeb4 8b48 	vcmp.f64	d8, d8
 800d006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d00a:	d61f      	bvs.n	800d04c <sqrt+0x64>
 800d00c:	ed9f 7b18 	vldr	d7, [pc, #96]	; 800d070 <sqrt+0x88>
 800d010:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d018:	d518      	bpl.n	800d04c <sqrt+0x64>
 800d01a:	2201      	movs	r2, #1
 800d01c:	9200      	str	r2, [sp, #0]
 800d01e:	4a17      	ldr	r2, [pc, #92]	; (800d07c <sqrt+0x94>)
 800d020:	9201      	str	r2, [sp, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	9208      	str	r2, [sp, #32]
 800d026:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d02a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d02e:	b993      	cbnz	r3, 800d056 <sqrt+0x6e>
 800d030:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d034:	4668      	mov	r0, sp
 800d036:	f000 ff23 	bl	800de80 <matherr>
 800d03a:	b190      	cbz	r0, 800d062 <sqrt+0x7a>
 800d03c:	9b08      	ldr	r3, [sp, #32]
 800d03e:	b11b      	cbz	r3, 800d048 <sqrt+0x60>
 800d040:	f7ff ff60 	bl	800cf04 <__errno>
 800d044:	9b08      	ldr	r3, [sp, #32]
 800d046:	6003      	str	r3, [r0, #0]
 800d048:	ed9d 0b06 	vldr	d0, [sp, #24]
 800d04c:	b00b      	add	sp, #44	; 0x2c
 800d04e:	ecbd 8b02 	vpop	{d8}
 800d052:	f85d fb04 	ldr.w	pc, [sp], #4
 800d056:	2b02      	cmp	r3, #2
 800d058:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800d05c:	ed8d 6b06 	vstr	d6, [sp, #24]
 800d060:	d1e8      	bne.n	800d034 <sqrt+0x4c>
 800d062:	f7ff ff4f 	bl	800cf04 <__errno>
 800d066:	2321      	movs	r3, #33	; 0x21
 800d068:	6003      	str	r3, [r0, #0]
 800d06a:	e7e7      	b.n	800d03c <sqrt+0x54>
 800d06c:	f3af 8000 	nop.w
	...
 800d078:	240000b4 	.word	0x240000b4
 800d07c:	0800dfe8 	.word	0x0800dfe8

0800d080 <__ieee754_atan2>:
 800d080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d082:	ee11 6a10 	vmov	r6, s2
 800d086:	ee11 0a90 	vmov	r0, s3
 800d08a:	4273      	negs	r3, r6
 800d08c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800d090:	4333      	orrs	r3, r6
 800d092:	4f6b      	ldr	r7, [pc, #428]	; (800d240 <__ieee754_atan2+0x1c0>)
 800d094:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d098:	42bb      	cmp	r3, r7
 800d09a:	ed8d 0b00 	vstr	d0, [sp]
 800d09e:	d80b      	bhi.n	800d0b8 <__ieee754_atan2+0x38>
 800d0a0:	e9dd c500 	ldrd	ip, r5, [sp]
 800d0a4:	f1cc 0100 	rsb	r1, ip, #0
 800d0a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d0ac:	ea41 010c 	orr.w	r1, r1, ip
 800d0b0:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 800d0b4:	42b9      	cmp	r1, r7
 800d0b6:	d906      	bls.n	800d0c6 <__ieee754_atan2+0x46>
 800d0b8:	ed9d 7b00 	vldr	d7, [sp]
 800d0bc:	ee37 7b01 	vadd.f64	d7, d7, d1
 800d0c0:	ed8d 7b00 	vstr	d7, [sp]
 800d0c4:	e063      	b.n	800d18e <__ieee754_atan2+0x10e>
 800d0c6:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 800d0ca:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800d0ce:	4331      	orrs	r1, r6
 800d0d0:	d104      	bne.n	800d0dc <__ieee754_atan2+0x5c>
 800d0d2:	b003      	add	sp, #12
 800d0d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d0d8:	f000 bd56 	b.w	800db88 <atan>
 800d0dc:	1784      	asrs	r4, r0, #30
 800d0de:	f004 0402 	and.w	r4, r4, #2
 800d0e2:	ea53 010c 	orrs.w	r1, r3, ip
 800d0e6:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 800d0ea:	d109      	bne.n	800d100 <__ieee754_atan2+0x80>
 800d0ec:	2c02      	cmp	r4, #2
 800d0ee:	d078      	beq.n	800d1e2 <__ieee754_atan2+0x162>
 800d0f0:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 800d1e8 <__ieee754_atan2+0x168>
 800d0f4:	ed9d 6b00 	vldr	d6, [sp]
 800d0f8:	2c03      	cmp	r4, #3
 800d0fa:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800d0fe:	e7df      	b.n	800d0c0 <__ieee754_atan2+0x40>
 800d100:	ea52 0106 	orrs.w	r1, r2, r6
 800d104:	d107      	bne.n	800d116 <__ieee754_atan2+0x96>
 800d106:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 800d1f0 <__ieee754_atan2+0x170>
 800d10a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800d1f8 <__ieee754_atan2+0x178>
 800d10e:	2d00      	cmp	r5, #0
 800d110:	fe26 7b07 	vselge.f64	d7, d6, d7
 800d114:	e7d4      	b.n	800d0c0 <__ieee754_atan2+0x40>
 800d116:	42ba      	cmp	r2, r7
 800d118:	d120      	bne.n	800d15c <__ieee754_atan2+0xdc>
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d111      	bne.n	800d142 <__ieee754_atan2+0xc2>
 800d11e:	2c02      	cmp	r4, #2
 800d120:	d009      	beq.n	800d136 <__ieee754_atan2+0xb6>
 800d122:	2c03      	cmp	r4, #3
 800d124:	d00a      	beq.n	800d13c <__ieee754_atan2+0xbc>
 800d126:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800d200 <__ieee754_atan2+0x180>
 800d12a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800d208 <__ieee754_atan2+0x188>
 800d12e:	2c01      	cmp	r4, #1
 800d130:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800d134:	e7c4      	b.n	800d0c0 <__ieee754_atan2+0x40>
 800d136:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800d210 <__ieee754_atan2+0x190>
 800d13a:	e7c1      	b.n	800d0c0 <__ieee754_atan2+0x40>
 800d13c:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800d218 <__ieee754_atan2+0x198>
 800d140:	e7be      	b.n	800d0c0 <__ieee754_atan2+0x40>
 800d142:	2c02      	cmp	r4, #2
 800d144:	d04d      	beq.n	800d1e2 <__ieee754_atan2+0x162>
 800d146:	2c03      	cmp	r4, #3
 800d148:	d005      	beq.n	800d156 <__ieee754_atan2+0xd6>
 800d14a:	2c01      	cmp	r4, #1
 800d14c:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800d220 <__ieee754_atan2+0x1a0>
 800d150:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800d228 <__ieee754_atan2+0x1a8>
 800d154:	e7ec      	b.n	800d130 <__ieee754_atan2+0xb0>
 800d156:	ed9f 7b24 	vldr	d7, [pc, #144]	; 800d1e8 <__ieee754_atan2+0x168>
 800d15a:	e7b1      	b.n	800d0c0 <__ieee754_atan2+0x40>
 800d15c:	42bb      	cmp	r3, r7
 800d15e:	d0d2      	beq.n	800d106 <__ieee754_atan2+0x86>
 800d160:	1a9b      	subs	r3, r3, r2
 800d162:	151b      	asrs	r3, r3, #20
 800d164:	2b3c      	cmp	r3, #60	; 0x3c
 800d166:	dc16      	bgt.n	800d196 <__ieee754_atan2+0x116>
 800d168:	2800      	cmp	r0, #0
 800d16a:	da01      	bge.n	800d170 <__ieee754_atan2+0xf0>
 800d16c:	333c      	adds	r3, #60	; 0x3c
 800d16e:	db17      	blt.n	800d1a0 <__ieee754_atan2+0x120>
 800d170:	ed9d 7b00 	vldr	d7, [sp]
 800d174:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800d178:	f000 fe00 	bl	800dd7c <fabs>
 800d17c:	f000 fd04 	bl	800db88 <atan>
 800d180:	ed8d 0b00 	vstr	d0, [sp]
 800d184:	2c01      	cmp	r4, #1
 800d186:	d00e      	beq.n	800d1a6 <__ieee754_atan2+0x126>
 800d188:	2c02      	cmp	r4, #2
 800d18a:	d014      	beq.n	800d1b6 <__ieee754_atan2+0x136>
 800d18c:	b9f4      	cbnz	r4, 800d1cc <__ieee754_atan2+0x14c>
 800d18e:	ed9d 0b00 	vldr	d0, [sp]
 800d192:	b003      	add	sp, #12
 800d194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d196:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800d1f0 <__ieee754_atan2+0x170>
 800d19a:	ed8d 7b00 	vstr	d7, [sp]
 800d19e:	e7f1      	b.n	800d184 <__ieee754_atan2+0x104>
 800d1a0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800d228 <__ieee754_atan2+0x1a8>
 800d1a4:	e7f9      	b.n	800d19a <__ieee754_atan2+0x11a>
 800d1a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1aa:	9901      	ldr	r1, [sp, #4]
 800d1ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d1b0:	e9cd 2300 	strd	r2, r3, [sp]
 800d1b4:	e7eb      	b.n	800d18e <__ieee754_atan2+0x10e>
 800d1b6:	ed9d 6b00 	vldr	d6, [sp]
 800d1ba:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 800d230 <__ieee754_atan2+0x1b0>
 800d1be:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d1c2:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 800d238 <__ieee754_atan2+0x1b8>
 800d1c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d1ca:	e779      	b.n	800d0c0 <__ieee754_atan2+0x40>
 800d1cc:	ed9d 6b00 	vldr	d6, [sp]
 800d1d0:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800d230 <__ieee754_atan2+0x1b0>
 800d1d4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d1d8:	ed9f 6b17 	vldr	d6, [pc, #92]	; 800d238 <__ieee754_atan2+0x1b8>
 800d1dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d1e0:	e76e      	b.n	800d0c0 <__ieee754_atan2+0x40>
 800d1e2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800d238 <__ieee754_atan2+0x1b8>
 800d1e6:	e76b      	b.n	800d0c0 <__ieee754_atan2+0x40>
 800d1e8:	54442d18 	.word	0x54442d18
 800d1ec:	c00921fb 	.word	0xc00921fb
 800d1f0:	54442d18 	.word	0x54442d18
 800d1f4:	3ff921fb 	.word	0x3ff921fb
 800d1f8:	54442d18 	.word	0x54442d18
 800d1fc:	bff921fb 	.word	0xbff921fb
 800d200:	54442d18 	.word	0x54442d18
 800d204:	bfe921fb 	.word	0xbfe921fb
 800d208:	54442d18 	.word	0x54442d18
 800d20c:	3fe921fb 	.word	0x3fe921fb
 800d210:	7f3321d2 	.word	0x7f3321d2
 800d214:	4002d97c 	.word	0x4002d97c
 800d218:	7f3321d2 	.word	0x7f3321d2
 800d21c:	c002d97c 	.word	0xc002d97c
 800d220:	00000000 	.word	0x00000000
 800d224:	80000000 	.word	0x80000000
	...
 800d230:	33145c07 	.word	0x33145c07
 800d234:	3ca1a626 	.word	0x3ca1a626
 800d238:	54442d18 	.word	0x54442d18
 800d23c:	400921fb 	.word	0x400921fb
 800d240:	7ff00000 	.word	0x7ff00000
 800d244:	00000000 	.word	0x00000000

0800d248 <__ieee754_rem_pio2>:
 800d248:	b570      	push	{r4, r5, r6, lr}
 800d24a:	eeb0 7b40 	vmov.f64	d7, d0
 800d24e:	ee17 5a90 	vmov	r5, s15
 800d252:	4b95      	ldr	r3, [pc, #596]	; (800d4a8 <__ieee754_rem_pio2+0x260>)
 800d254:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d258:	429e      	cmp	r6, r3
 800d25a:	b088      	sub	sp, #32
 800d25c:	4604      	mov	r4, r0
 800d25e:	dc07      	bgt.n	800d270 <__ieee754_rem_pio2+0x28>
 800d260:	2200      	movs	r2, #0
 800d262:	2300      	movs	r3, #0
 800d264:	ed84 0b00 	vstr	d0, [r4]
 800d268:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d26c:	2000      	movs	r0, #0
 800d26e:	e01b      	b.n	800d2a8 <__ieee754_rem_pio2+0x60>
 800d270:	4b8e      	ldr	r3, [pc, #568]	; (800d4ac <__ieee754_rem_pio2+0x264>)
 800d272:	429e      	cmp	r6, r3
 800d274:	dc3b      	bgt.n	800d2ee <__ieee754_rem_pio2+0xa6>
 800d276:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800d27a:	2d00      	cmp	r5, #0
 800d27c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800d468 <__ieee754_rem_pio2+0x220>
 800d280:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800d284:	dd19      	ble.n	800d2ba <__ieee754_rem_pio2+0x72>
 800d286:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d28a:	429e      	cmp	r6, r3
 800d28c:	d00e      	beq.n	800d2ac <__ieee754_rem_pio2+0x64>
 800d28e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800d470 <__ieee754_rem_pio2+0x228>
 800d292:	ee37 5b46 	vsub.f64	d5, d7, d6
 800d296:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d29a:	ed84 5b00 	vstr	d5, [r4]
 800d29e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d2a2:	ed84 7b02 	vstr	d7, [r4, #8]
 800d2a6:	2001      	movs	r0, #1
 800d2a8:	b008      	add	sp, #32
 800d2aa:	bd70      	pop	{r4, r5, r6, pc}
 800d2ac:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800d478 <__ieee754_rem_pio2+0x230>
 800d2b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d2b4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800d480 <__ieee754_rem_pio2+0x238>
 800d2b8:	e7eb      	b.n	800d292 <__ieee754_rem_pio2+0x4a>
 800d2ba:	429e      	cmp	r6, r3
 800d2bc:	ee30 7b06 	vadd.f64	d7, d0, d6
 800d2c0:	d00e      	beq.n	800d2e0 <__ieee754_rem_pio2+0x98>
 800d2c2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800d470 <__ieee754_rem_pio2+0x228>
 800d2c6:	ee37 5b06 	vadd.f64	d5, d7, d6
 800d2ca:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d2ce:	ed84 5b00 	vstr	d5, [r4]
 800d2d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d2d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2da:	ed84 7b02 	vstr	d7, [r4, #8]
 800d2de:	e7e3      	b.n	800d2a8 <__ieee754_rem_pio2+0x60>
 800d2e0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800d478 <__ieee754_rem_pio2+0x230>
 800d2e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d2e8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800d480 <__ieee754_rem_pio2+0x238>
 800d2ec:	e7eb      	b.n	800d2c6 <__ieee754_rem_pio2+0x7e>
 800d2ee:	4b70      	ldr	r3, [pc, #448]	; (800d4b0 <__ieee754_rem_pio2+0x268>)
 800d2f0:	429e      	cmp	r6, r3
 800d2f2:	dc6c      	bgt.n	800d3ce <__ieee754_rem_pio2+0x186>
 800d2f4:	f000 fd42 	bl	800dd7c <fabs>
 800d2f8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d2fc:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800d488 <__ieee754_rem_pio2+0x240>
 800d300:	eea0 7b06 	vfma.f64	d7, d0, d6
 800d304:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d308:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d30c:	ee17 0a90 	vmov	r0, s15
 800d310:	eeb1 5b44 	vneg.f64	d5, d4
 800d314:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800d468 <__ieee754_rem_pio2+0x220>
 800d318:	eea5 0b07 	vfma.f64	d0, d5, d7
 800d31c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800d470 <__ieee754_rem_pio2+0x228>
 800d320:	281f      	cmp	r0, #31
 800d322:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d326:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d32a:	dc08      	bgt.n	800d33e <__ieee754_rem_pio2+0xf6>
 800d32c:	1e42      	subs	r2, r0, #1
 800d32e:	4b61      	ldr	r3, [pc, #388]	; (800d4b4 <__ieee754_rem_pio2+0x26c>)
 800d330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d334:	42b3      	cmp	r3, r6
 800d336:	d002      	beq.n	800d33e <__ieee754_rem_pio2+0xf6>
 800d338:	ed84 6b00 	vstr	d6, [r4]
 800d33c:	e022      	b.n	800d384 <__ieee754_rem_pio2+0x13c>
 800d33e:	ee16 3a90 	vmov	r3, s13
 800d342:	1536      	asrs	r6, r6, #20
 800d344:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d348:	1af3      	subs	r3, r6, r3
 800d34a:	2b10      	cmp	r3, #16
 800d34c:	ddf4      	ble.n	800d338 <__ieee754_rem_pio2+0xf0>
 800d34e:	eeb0 6b40 	vmov.f64	d6, d0
 800d352:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800d478 <__ieee754_rem_pio2+0x230>
 800d356:	eea5 6b03 	vfma.f64	d6, d5, d3
 800d35a:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d35e:	eea5 7b03 	vfma.f64	d7, d5, d3
 800d362:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800d480 <__ieee754_rem_pio2+0x238>
 800d366:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800d36a:	ee36 3b47 	vsub.f64	d3, d6, d7
 800d36e:	ee13 3a90 	vmov	r3, s7
 800d372:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d376:	1af6      	subs	r6, r6, r3
 800d378:	2e31      	cmp	r6, #49	; 0x31
 800d37a:	dc17      	bgt.n	800d3ac <__ieee754_rem_pio2+0x164>
 800d37c:	eeb0 0b46 	vmov.f64	d0, d6
 800d380:	ed84 3b00 	vstr	d3, [r4]
 800d384:	ed94 6b00 	vldr	d6, [r4]
 800d388:	2d00      	cmp	r5, #0
 800d38a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d38e:	ee30 7b47 	vsub.f64	d7, d0, d7
 800d392:	ed84 7b02 	vstr	d7, [r4, #8]
 800d396:	da87      	bge.n	800d2a8 <__ieee754_rem_pio2+0x60>
 800d398:	eeb1 6b46 	vneg.f64	d6, d6
 800d39c:	ed84 6b00 	vstr	d6, [r4]
 800d3a0:	eeb1 7b47 	vneg.f64	d7, d7
 800d3a4:	4240      	negs	r0, r0
 800d3a6:	ed84 7b02 	vstr	d7, [r4, #8]
 800d3aa:	e77d      	b.n	800d2a8 <__ieee754_rem_pio2+0x60>
 800d3ac:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800d490 <__ieee754_rem_pio2+0x248>
 800d3b0:	eeb0 0b46 	vmov.f64	d0, d6
 800d3b4:	eea5 0b03 	vfma.f64	d0, d5, d3
 800d3b8:	ee36 7b40 	vsub.f64	d7, d6, d0
 800d3bc:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800d498 <__ieee754_rem_pio2+0x250>
 800d3c0:	eea5 7b03 	vfma.f64	d7, d5, d3
 800d3c4:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800d3c8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d3cc:	e7b4      	b.n	800d338 <__ieee754_rem_pio2+0xf0>
 800d3ce:	4b3a      	ldr	r3, [pc, #232]	; (800d4b8 <__ieee754_rem_pio2+0x270>)
 800d3d0:	429e      	cmp	r6, r3
 800d3d2:	dd06      	ble.n	800d3e2 <__ieee754_rem_pio2+0x19a>
 800d3d4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800d3d8:	ed80 7b02 	vstr	d7, [r0, #8]
 800d3dc:	ed80 7b00 	vstr	d7, [r0]
 800d3e0:	e744      	b.n	800d26c <__ieee754_rem_pio2+0x24>
 800d3e2:	1532      	asrs	r2, r6, #20
 800d3e4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800d3e8:	ee10 0a10 	vmov	r0, s0
 800d3ec:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800d3f0:	ec41 0b17 	vmov	d7, r0, r1
 800d3f4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d3f8:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800d4a0 <__ieee754_rem_pio2+0x258>
 800d3fc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d400:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d404:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d408:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d40c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d410:	a908      	add	r1, sp, #32
 800d412:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d416:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d41a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d41e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d422:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d426:	2303      	movs	r3, #3
 800d428:	ed31 7b02 	vldmdb	r1!, {d7}
 800d42c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d434:	f103 30ff 	add.w	r0, r3, #4294967295
 800d438:	d013      	beq.n	800d462 <__ieee754_rem_pio2+0x21a>
 800d43a:	4920      	ldr	r1, [pc, #128]	; (800d4bc <__ieee754_rem_pio2+0x274>)
 800d43c:	9101      	str	r1, [sp, #4]
 800d43e:	2102      	movs	r1, #2
 800d440:	9100      	str	r1, [sp, #0]
 800d442:	a802      	add	r0, sp, #8
 800d444:	4621      	mov	r1, r4
 800d446:	f000 f8ab 	bl	800d5a0 <__kernel_rem_pio2>
 800d44a:	2d00      	cmp	r5, #0
 800d44c:	f6bf af2c 	bge.w	800d2a8 <__ieee754_rem_pio2+0x60>
 800d450:	ed94 7b00 	vldr	d7, [r4]
 800d454:	eeb1 7b47 	vneg.f64	d7, d7
 800d458:	ed84 7b00 	vstr	d7, [r4]
 800d45c:	ed94 7b02 	vldr	d7, [r4, #8]
 800d460:	e79e      	b.n	800d3a0 <__ieee754_rem_pio2+0x158>
 800d462:	4603      	mov	r3, r0
 800d464:	e7e0      	b.n	800d428 <__ieee754_rem_pio2+0x1e0>
 800d466:	bf00      	nop
 800d468:	54400000 	.word	0x54400000
 800d46c:	3ff921fb 	.word	0x3ff921fb
 800d470:	1a626331 	.word	0x1a626331
 800d474:	3dd0b461 	.word	0x3dd0b461
 800d478:	1a600000 	.word	0x1a600000
 800d47c:	3dd0b461 	.word	0x3dd0b461
 800d480:	2e037073 	.word	0x2e037073
 800d484:	3ba3198a 	.word	0x3ba3198a
 800d488:	6dc9c883 	.word	0x6dc9c883
 800d48c:	3fe45f30 	.word	0x3fe45f30
 800d490:	2e000000 	.word	0x2e000000
 800d494:	3ba3198a 	.word	0x3ba3198a
 800d498:	252049c1 	.word	0x252049c1
 800d49c:	397b839a 	.word	0x397b839a
 800d4a0:	00000000 	.word	0x00000000
 800d4a4:	41700000 	.word	0x41700000
 800d4a8:	3fe921fb 	.word	0x3fe921fb
 800d4ac:	4002d97b 	.word	0x4002d97b
 800d4b0:	413921fb 	.word	0x413921fb
 800d4b4:	0800dff0 	.word	0x0800dff0
 800d4b8:	7fefffff 	.word	0x7fefffff
 800d4bc:	0800e070 	.word	0x0800e070

0800d4c0 <__ieee754_sqrt>:
 800d4c0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800d4c4:	4770      	bx	lr
	...

0800d4c8 <__kernel_cos>:
 800d4c8:	ee10 1a90 	vmov	r1, s1
 800d4cc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d4d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d4d4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800d4d8:	da05      	bge.n	800d4e6 <__kernel_cos+0x1e>
 800d4da:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800d4de:	ee16 3a90 	vmov	r3, s13
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d03d      	beq.n	800d562 <__kernel_cos+0x9a>
 800d4e6:	ee20 4b00 	vmul.f64	d4, d0, d0
 800d4ea:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d4ee:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800d568 <__kernel_cos+0xa0>
 800d4f2:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800d4f6:	ee24 6b06 	vmul.f64	d6, d4, d6
 800d4fa:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800d570 <__kernel_cos+0xa8>
 800d4fe:	eea4 5b03 	vfma.f64	d5, d4, d3
 800d502:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800d578 <__kernel_cos+0xb0>
 800d506:	eea5 3b04 	vfma.f64	d3, d5, d4
 800d50a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800d580 <__kernel_cos+0xb8>
 800d50e:	eea3 5b04 	vfma.f64	d5, d3, d4
 800d512:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800d588 <__kernel_cos+0xc0>
 800d516:	4b20      	ldr	r3, [pc, #128]	; (800d598 <__kernel_cos+0xd0>)
 800d518:	eea5 3b04 	vfma.f64	d3, d5, d4
 800d51c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800d590 <__kernel_cos+0xc8>
 800d520:	4299      	cmp	r1, r3
 800d522:	eea3 5b04 	vfma.f64	d5, d3, d4
 800d526:	ee25 5b04 	vmul.f64	d5, d5, d4
 800d52a:	eea4 1b05 	vfma.f64	d1, d4, d5
 800d52e:	dc04      	bgt.n	800d53a <__kernel_cos+0x72>
 800d530:	ee36 6b41 	vsub.f64	d6, d6, d1
 800d534:	ee37 0b46 	vsub.f64	d0, d7, d6
 800d538:	4770      	bx	lr
 800d53a:	4b18      	ldr	r3, [pc, #96]	; (800d59c <__kernel_cos+0xd4>)
 800d53c:	4299      	cmp	r1, r3
 800d53e:	dc0d      	bgt.n	800d55c <__kernel_cos+0x94>
 800d540:	2200      	movs	r2, #0
 800d542:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800d546:	ec43 2b15 	vmov	d5, r2, r3
 800d54a:	ee37 0b45 	vsub.f64	d0, d7, d5
 800d54e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d552:	ee36 6b41 	vsub.f64	d6, d6, d1
 800d556:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d55a:	4770      	bx	lr
 800d55c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800d560:	e7f3      	b.n	800d54a <__kernel_cos+0x82>
 800d562:	eeb0 0b47 	vmov.f64	d0, d7
 800d566:	4770      	bx	lr
 800d568:	be8838d4 	.word	0xbe8838d4
 800d56c:	bda8fae9 	.word	0xbda8fae9
 800d570:	bdb4b1c4 	.word	0xbdb4b1c4
 800d574:	3e21ee9e 	.word	0x3e21ee9e
 800d578:	809c52ad 	.word	0x809c52ad
 800d57c:	be927e4f 	.word	0xbe927e4f
 800d580:	19cb1590 	.word	0x19cb1590
 800d584:	3efa01a0 	.word	0x3efa01a0
 800d588:	16c15177 	.word	0x16c15177
 800d58c:	bf56c16c 	.word	0xbf56c16c
 800d590:	5555554c 	.word	0x5555554c
 800d594:	3fa55555 	.word	0x3fa55555
 800d598:	3fd33332 	.word	0x3fd33332
 800d59c:	3fe90000 	.word	0x3fe90000

0800d5a0 <__kernel_rem_pio2>:
 800d5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a4:	ed2d 8b06 	vpush	{d8-d10}
 800d5a8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800d5ac:	469b      	mov	fp, r3
 800d5ae:	460e      	mov	r6, r1
 800d5b0:	4bc7      	ldr	r3, [pc, #796]	; (800d8d0 <__kernel_rem_pio2+0x330>)
 800d5b2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800d5b4:	9002      	str	r0, [sp, #8]
 800d5b6:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800d5ba:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800d5bc:	1ed1      	subs	r1, r2, #3
 800d5be:	2318      	movs	r3, #24
 800d5c0:	f06f 0417 	mvn.w	r4, #23
 800d5c4:	fb91 f1f3 	sdiv	r1, r1, r3
 800d5c8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800d5cc:	f10b 3aff 	add.w	sl, fp, #4294967295
 800d5d0:	fb01 4404 	mla	r4, r1, r4, r4
 800d5d4:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800d8b8 <__kernel_rem_pio2+0x318>
 800d5d8:	4414      	add	r4, r2
 800d5da:	eba1 050a 	sub.w	r5, r1, sl
 800d5de:	aa1a      	add	r2, sp, #104	; 0x68
 800d5e0:	eb09 070a 	add.w	r7, r9, sl
 800d5e4:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800d5e8:	4696      	mov	lr, r2
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	42bb      	cmp	r3, r7
 800d5ee:	dd0f      	ble.n	800d610 <__kernel_rem_pio2+0x70>
 800d5f0:	af6a      	add	r7, sp, #424	; 0x1a8
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	454a      	cmp	r2, r9
 800d5f6:	dc28      	bgt.n	800d64a <__kernel_rem_pio2+0xaa>
 800d5f8:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800d5fc:	eb0b 0302 	add.w	r3, fp, r2
 800d600:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800d604:	9d02      	ldr	r5, [sp, #8]
 800d606:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800d8b8 <__kernel_rem_pio2+0x318>
 800d60a:	f04f 0c00 	mov.w	ip, #0
 800d60e:	e016      	b.n	800d63e <__kernel_rem_pio2+0x9e>
 800d610:	42dd      	cmn	r5, r3
 800d612:	d409      	bmi.n	800d628 <__kernel_rem_pio2+0x88>
 800d614:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800d618:	ee07 2a90 	vmov	s15, r2
 800d61c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d620:	ecae 7b02 	vstmia	lr!, {d7}
 800d624:	3301      	adds	r3, #1
 800d626:	e7e1      	b.n	800d5ec <__kernel_rem_pio2+0x4c>
 800d628:	eeb0 7b46 	vmov.f64	d7, d6
 800d62c:	e7f8      	b.n	800d620 <__kernel_rem_pio2+0x80>
 800d62e:	ecb5 5b02 	vldmia	r5!, {d5}
 800d632:	ed33 6b02 	vldmdb	r3!, {d6}
 800d636:	f10c 0c01 	add.w	ip, ip, #1
 800d63a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d63e:	45d4      	cmp	ip, sl
 800d640:	ddf5      	ble.n	800d62e <__kernel_rem_pio2+0x8e>
 800d642:	eca7 7b02 	vstmia	r7!, {d7}
 800d646:	3201      	adds	r2, #1
 800d648:	e7d4      	b.n	800d5f4 <__kernel_rem_pio2+0x54>
 800d64a:	ab06      	add	r3, sp, #24
 800d64c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d650:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800d8c0 <__kernel_rem_pio2+0x320>
 800d654:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800d8c8 <__kernel_rem_pio2+0x328>
 800d658:	9304      	str	r3, [sp, #16]
 800d65a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800d65e:	9303      	str	r3, [sp, #12]
 800d660:	464d      	mov	r5, r9
 800d662:	ab92      	add	r3, sp, #584	; 0x248
 800d664:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800d668:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d66c:	3f01      	subs	r7, #1
 800d66e:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800d672:	00ff      	lsls	r7, r7, #3
 800d674:	ab92      	add	r3, sp, #584	; 0x248
 800d676:	19da      	adds	r2, r3, r7
 800d678:	3a98      	subs	r2, #152	; 0x98
 800d67a:	2300      	movs	r3, #0
 800d67c:	1ae9      	subs	r1, r5, r3
 800d67e:	2900      	cmp	r1, #0
 800d680:	dc4e      	bgt.n	800d720 <__kernel_rem_pio2+0x180>
 800d682:	4620      	mov	r0, r4
 800d684:	f000 fc00 	bl	800de88 <scalbn>
 800d688:	eeb0 8b40 	vmov.f64	d8, d0
 800d68c:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800d690:	ee28 0b00 	vmul.f64	d0, d8, d0
 800d694:	f000 fb7c 	bl	800dd90 <floor>
 800d698:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800d69c:	eea0 8b47 	vfms.f64	d8, d0, d7
 800d6a0:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800d6a4:	2c00      	cmp	r4, #0
 800d6a6:	edcd 7a01 	vstr	s15, [sp, #4]
 800d6aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d6ae:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d6b2:	dd4a      	ble.n	800d74a <__kernel_rem_pio2+0x1aa>
 800d6b4:	1e69      	subs	r1, r5, #1
 800d6b6:	ab06      	add	r3, sp, #24
 800d6b8:	f1c4 0018 	rsb	r0, r4, #24
 800d6bc:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800d6c0:	9a01      	ldr	r2, [sp, #4]
 800d6c2:	fa4c f300 	asr.w	r3, ip, r0
 800d6c6:	441a      	add	r2, r3
 800d6c8:	4083      	lsls	r3, r0
 800d6ca:	9201      	str	r2, [sp, #4]
 800d6cc:	ebac 0203 	sub.w	r2, ip, r3
 800d6d0:	ab06      	add	r3, sp, #24
 800d6d2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800d6d6:	f1c4 0317 	rsb	r3, r4, #23
 800d6da:	fa42 f803 	asr.w	r8, r2, r3
 800d6de:	f1b8 0f00 	cmp.w	r8, #0
 800d6e2:	dd43      	ble.n	800d76c <__kernel_rem_pio2+0x1cc>
 800d6e4:	9b01      	ldr	r3, [sp, #4]
 800d6e6:	2000      	movs	r0, #0
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	9301      	str	r3, [sp, #4]
 800d6ec:	4601      	mov	r1, r0
 800d6ee:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800d6f2:	4285      	cmp	r5, r0
 800d6f4:	dc6e      	bgt.n	800d7d4 <__kernel_rem_pio2+0x234>
 800d6f6:	2c00      	cmp	r4, #0
 800d6f8:	dd04      	ble.n	800d704 <__kernel_rem_pio2+0x164>
 800d6fa:	2c01      	cmp	r4, #1
 800d6fc:	d07f      	beq.n	800d7fe <__kernel_rem_pio2+0x25e>
 800d6fe:	2c02      	cmp	r4, #2
 800d700:	f000 8087 	beq.w	800d812 <__kernel_rem_pio2+0x272>
 800d704:	f1b8 0f02 	cmp.w	r8, #2
 800d708:	d130      	bne.n	800d76c <__kernel_rem_pio2+0x1cc>
 800d70a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d70e:	ee30 8b48 	vsub.f64	d8, d0, d8
 800d712:	b359      	cbz	r1, 800d76c <__kernel_rem_pio2+0x1cc>
 800d714:	4620      	mov	r0, r4
 800d716:	f000 fbb7 	bl	800de88 <scalbn>
 800d71a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800d71e:	e025      	b.n	800d76c <__kernel_rem_pio2+0x1cc>
 800d720:	ee20 7b09 	vmul.f64	d7, d0, d9
 800d724:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d728:	a806      	add	r0, sp, #24
 800d72a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800d72e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800d732:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d736:	ee10 1a10 	vmov	r1, s0
 800d73a:	ed32 0b02 	vldmdb	r2!, {d0}
 800d73e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800d742:	ee37 0b00 	vadd.f64	d0, d7, d0
 800d746:	3301      	adds	r3, #1
 800d748:	e798      	b.n	800d67c <__kernel_rem_pio2+0xdc>
 800d74a:	d106      	bne.n	800d75a <__kernel_rem_pio2+0x1ba>
 800d74c:	1e6b      	subs	r3, r5, #1
 800d74e:	aa06      	add	r2, sp, #24
 800d750:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d754:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800d758:	e7c1      	b.n	800d6de <__kernel_rem_pio2+0x13e>
 800d75a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d75e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d766:	da32      	bge.n	800d7ce <__kernel_rem_pio2+0x22e>
 800d768:	f04f 0800 	mov.w	r8, #0
 800d76c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d774:	f040 80b0 	bne.w	800d8d8 <__kernel_rem_pio2+0x338>
 800d778:	1e6b      	subs	r3, r5, #1
 800d77a:	4618      	mov	r0, r3
 800d77c:	2200      	movs	r2, #0
 800d77e:	4548      	cmp	r0, r9
 800d780:	da4e      	bge.n	800d820 <__kernel_rem_pio2+0x280>
 800d782:	2a00      	cmp	r2, #0
 800d784:	f000 8088 	beq.w	800d898 <__kernel_rem_pio2+0x2f8>
 800d788:	aa06      	add	r2, sp, #24
 800d78a:	3c18      	subs	r4, #24
 800d78c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d790:	2900      	cmp	r1, #0
 800d792:	f000 808e 	beq.w	800d8b2 <__kernel_rem_pio2+0x312>
 800d796:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d79a:	4620      	mov	r0, r4
 800d79c:	9302      	str	r3, [sp, #8]
 800d79e:	f000 fb73 	bl	800de88 <scalbn>
 800d7a2:	9b02      	ldr	r3, [sp, #8]
 800d7a4:	aa6a      	add	r2, sp, #424	; 0x1a8
 800d7a6:	00d9      	lsls	r1, r3, #3
 800d7a8:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800d8c0 <__kernel_rem_pio2+0x320>
 800d7ac:	1850      	adds	r0, r2, r1
 800d7ae:	f100 0508 	add.w	r5, r0, #8
 800d7b2:	461c      	mov	r4, r3
 800d7b4:	2c00      	cmp	r4, #0
 800d7b6:	f280 80bd 	bge.w	800d934 <__kernel_rem_pio2+0x394>
 800d7ba:	2500      	movs	r5, #0
 800d7bc:	1b5c      	subs	r4, r3, r5
 800d7be:	2c00      	cmp	r4, #0
 800d7c0:	f2c0 80dd 	blt.w	800d97e <__kernel_rem_pio2+0x3de>
 800d7c4:	4f43      	ldr	r7, [pc, #268]	; (800d8d4 <__kernel_rem_pio2+0x334>)
 800d7c6:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800d8b8 <__kernel_rem_pio2+0x318>
 800d7ca:	2400      	movs	r4, #0
 800d7cc:	e0cb      	b.n	800d966 <__kernel_rem_pio2+0x3c6>
 800d7ce:	f04f 0802 	mov.w	r8, #2
 800d7d2:	e787      	b.n	800d6e4 <__kernel_rem_pio2+0x144>
 800d7d4:	ab06      	add	r3, sp, #24
 800d7d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d7da:	b949      	cbnz	r1, 800d7f0 <__kernel_rem_pio2+0x250>
 800d7dc:	b12b      	cbz	r3, 800d7ea <__kernel_rem_pio2+0x24a>
 800d7de:	aa06      	add	r2, sp, #24
 800d7e0:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d7e4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	3001      	adds	r0, #1
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	e780      	b.n	800d6f2 <__kernel_rem_pio2+0x152>
 800d7f0:	aa06      	add	r2, sp, #24
 800d7f2:	ebac 0303 	sub.w	r3, ip, r3
 800d7f6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	e7f5      	b.n	800d7ea <__kernel_rem_pio2+0x24a>
 800d7fe:	1e68      	subs	r0, r5, #1
 800d800:	ab06      	add	r3, sp, #24
 800d802:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d806:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d80a:	aa06      	add	r2, sp, #24
 800d80c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d810:	e778      	b.n	800d704 <__kernel_rem_pio2+0x164>
 800d812:	1e68      	subs	r0, r5, #1
 800d814:	ab06      	add	r3, sp, #24
 800d816:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d81a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d81e:	e7f4      	b.n	800d80a <__kernel_rem_pio2+0x26a>
 800d820:	a906      	add	r1, sp, #24
 800d822:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d826:	3801      	subs	r0, #1
 800d828:	430a      	orrs	r2, r1
 800d82a:	e7a8      	b.n	800d77e <__kernel_rem_pio2+0x1de>
 800d82c:	f10c 0c01 	add.w	ip, ip, #1
 800d830:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d834:	2a00      	cmp	r2, #0
 800d836:	d0f9      	beq.n	800d82c <__kernel_rem_pio2+0x28c>
 800d838:	eb0b 0305 	add.w	r3, fp, r5
 800d83c:	aa1a      	add	r2, sp, #104	; 0x68
 800d83e:	00db      	lsls	r3, r3, #3
 800d840:	1898      	adds	r0, r3, r2
 800d842:	3008      	adds	r0, #8
 800d844:	1c69      	adds	r1, r5, #1
 800d846:	3708      	adds	r7, #8
 800d848:	2200      	movs	r2, #0
 800d84a:	4465      	add	r5, ip
 800d84c:	9005      	str	r0, [sp, #20]
 800d84e:	428d      	cmp	r5, r1
 800d850:	f6ff af07 	blt.w	800d662 <__kernel_rem_pio2+0xc2>
 800d854:	a81a      	add	r0, sp, #104	; 0x68
 800d856:	eb02 0c03 	add.w	ip, r2, r3
 800d85a:	4484      	add	ip, r0
 800d85c:	9803      	ldr	r0, [sp, #12]
 800d85e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d862:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800d866:	9001      	str	r0, [sp, #4]
 800d868:	ee07 0a90 	vmov	s15, r0
 800d86c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d870:	9805      	ldr	r0, [sp, #20]
 800d872:	ed8c 7b00 	vstr	d7, [ip]
 800d876:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800d8b8 <__kernel_rem_pio2+0x318>
 800d87a:	eb00 0802 	add.w	r8, r0, r2
 800d87e:	f04f 0c00 	mov.w	ip, #0
 800d882:	45d4      	cmp	ip, sl
 800d884:	dd0c      	ble.n	800d8a0 <__kernel_rem_pio2+0x300>
 800d886:	eb02 0c07 	add.w	ip, r2, r7
 800d88a:	a86a      	add	r0, sp, #424	; 0x1a8
 800d88c:	4484      	add	ip, r0
 800d88e:	ed8c 7b02 	vstr	d7, [ip, #8]
 800d892:	3101      	adds	r1, #1
 800d894:	3208      	adds	r2, #8
 800d896:	e7da      	b.n	800d84e <__kernel_rem_pio2+0x2ae>
 800d898:	9b04      	ldr	r3, [sp, #16]
 800d89a:	f04f 0c01 	mov.w	ip, #1
 800d89e:	e7c7      	b.n	800d830 <__kernel_rem_pio2+0x290>
 800d8a0:	ecbe 5b02 	vldmia	lr!, {d5}
 800d8a4:	ed38 6b02 	vldmdb	r8!, {d6}
 800d8a8:	f10c 0c01 	add.w	ip, ip, #1
 800d8ac:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d8b0:	e7e7      	b.n	800d882 <__kernel_rem_pio2+0x2e2>
 800d8b2:	3b01      	subs	r3, #1
 800d8b4:	e768      	b.n	800d788 <__kernel_rem_pio2+0x1e8>
 800d8b6:	bf00      	nop
	...
 800d8c4:	3e700000 	.word	0x3e700000
 800d8c8:	00000000 	.word	0x00000000
 800d8cc:	41700000 	.word	0x41700000
 800d8d0:	0800e1b8 	.word	0x0800e1b8
 800d8d4:	0800e178 	.word	0x0800e178
 800d8d8:	4260      	negs	r0, r4
 800d8da:	eeb0 0b48 	vmov.f64	d0, d8
 800d8de:	f000 fad3 	bl	800de88 <scalbn>
 800d8e2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800dac0 <__kernel_rem_pio2+0x520>
 800d8e6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800d8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ee:	db18      	blt.n	800d922 <__kernel_rem_pio2+0x382>
 800d8f0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800dac8 <__kernel_rem_pio2+0x528>
 800d8f4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d8f8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d8fc:	aa06      	add	r2, sp, #24
 800d8fe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800d902:	eea5 0b46 	vfms.f64	d0, d5, d6
 800d906:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d90a:	a906      	add	r1, sp, #24
 800d90c:	ee10 3a10 	vmov	r3, s0
 800d910:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d914:	1c6b      	adds	r3, r5, #1
 800d916:	ee17 2a10 	vmov	r2, s14
 800d91a:	3418      	adds	r4, #24
 800d91c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d920:	e739      	b.n	800d796 <__kernel_rem_pio2+0x1f6>
 800d922:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d926:	aa06      	add	r2, sp, #24
 800d928:	ee10 3a10 	vmov	r3, s0
 800d92c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d930:	462b      	mov	r3, r5
 800d932:	e730      	b.n	800d796 <__kernel_rem_pio2+0x1f6>
 800d934:	aa06      	add	r2, sp, #24
 800d936:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800d93a:	9202      	str	r2, [sp, #8]
 800d93c:	ee07 2a90 	vmov	s15, r2
 800d940:	3c01      	subs	r4, #1
 800d942:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d946:	ee27 7b00 	vmul.f64	d7, d7, d0
 800d94a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800d94e:	ed25 7b02 	vstmdb	r5!, {d7}
 800d952:	e72f      	b.n	800d7b4 <__kernel_rem_pio2+0x214>
 800d954:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800d958:	ecb7 5b02 	vldmia	r7!, {d5}
 800d95c:	ed9c 6b00 	vldr	d6, [ip]
 800d960:	3401      	adds	r4, #1
 800d962:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d966:	454c      	cmp	r4, r9
 800d968:	dc01      	bgt.n	800d96e <__kernel_rem_pio2+0x3ce>
 800d96a:	42a5      	cmp	r5, r4
 800d96c:	daf2      	bge.n	800d954 <__kernel_rem_pio2+0x3b4>
 800d96e:	aa42      	add	r2, sp, #264	; 0x108
 800d970:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800d974:	ed84 7b00 	vstr	d7, [r4]
 800d978:	3501      	adds	r5, #1
 800d97a:	3808      	subs	r0, #8
 800d97c:	e71e      	b.n	800d7bc <__kernel_rem_pio2+0x21c>
 800d97e:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800d980:	2a03      	cmp	r2, #3
 800d982:	d84e      	bhi.n	800da22 <__kernel_rem_pio2+0x482>
 800d984:	e8df f002 	tbb	[pc, r2]
 800d988:	021f1f3e 	.word	0x021f1f3e
 800d98c:	3108      	adds	r1, #8
 800d98e:	aa42      	add	r2, sp, #264	; 0x108
 800d990:	4411      	add	r1, r2
 800d992:	4608      	mov	r0, r1
 800d994:	461c      	mov	r4, r3
 800d996:	2c00      	cmp	r4, #0
 800d998:	dc61      	bgt.n	800da5e <__kernel_rem_pio2+0x4be>
 800d99a:	4608      	mov	r0, r1
 800d99c:	461c      	mov	r4, r3
 800d99e:	2c01      	cmp	r4, #1
 800d9a0:	dc6d      	bgt.n	800da7e <__kernel_rem_pio2+0x4de>
 800d9a2:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800dad0 <__kernel_rem_pio2+0x530>
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	dc79      	bgt.n	800da9e <__kernel_rem_pio2+0x4fe>
 800d9aa:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800d9ae:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800d9b2:	f1b8 0f00 	cmp.w	r8, #0
 800d9b6:	d178      	bne.n	800daaa <__kernel_rem_pio2+0x50a>
 800d9b8:	ed86 5b00 	vstr	d5, [r6]
 800d9bc:	ed86 6b02 	vstr	d6, [r6, #8]
 800d9c0:	ed86 7b04 	vstr	d7, [r6, #16]
 800d9c4:	e02d      	b.n	800da22 <__kernel_rem_pio2+0x482>
 800d9c6:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800dad0 <__kernel_rem_pio2+0x530>
 800d9ca:	3108      	adds	r1, #8
 800d9cc:	aa42      	add	r2, sp, #264	; 0x108
 800d9ce:	4411      	add	r1, r2
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	da34      	bge.n	800da40 <__kernel_rem_pio2+0x4a0>
 800d9d6:	f1b8 0f00 	cmp.w	r8, #0
 800d9da:	d037      	beq.n	800da4c <__kernel_rem_pio2+0x4ac>
 800d9dc:	eeb1 7b46 	vneg.f64	d7, d6
 800d9e0:	ed86 7b00 	vstr	d7, [r6]
 800d9e4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800d9e8:	a844      	add	r0, sp, #272	; 0x110
 800d9ea:	2101      	movs	r1, #1
 800d9ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d9f0:	428b      	cmp	r3, r1
 800d9f2:	da2e      	bge.n	800da52 <__kernel_rem_pio2+0x4b2>
 800d9f4:	f1b8 0f00 	cmp.w	r8, #0
 800d9f8:	d001      	beq.n	800d9fe <__kernel_rem_pio2+0x45e>
 800d9fa:	eeb1 7b47 	vneg.f64	d7, d7
 800d9fe:	ed86 7b02 	vstr	d7, [r6, #8]
 800da02:	e00e      	b.n	800da22 <__kernel_rem_pio2+0x482>
 800da04:	aa92      	add	r2, sp, #584	; 0x248
 800da06:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800dad0 <__kernel_rem_pio2+0x530>
 800da0a:	4411      	add	r1, r2
 800da0c:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800da10:	2b00      	cmp	r3, #0
 800da12:	da0f      	bge.n	800da34 <__kernel_rem_pio2+0x494>
 800da14:	f1b8 0f00 	cmp.w	r8, #0
 800da18:	d001      	beq.n	800da1e <__kernel_rem_pio2+0x47e>
 800da1a:	eeb1 7b47 	vneg.f64	d7, d7
 800da1e:	ed86 7b00 	vstr	d7, [r6]
 800da22:	9b01      	ldr	r3, [sp, #4]
 800da24:	f003 0007 	and.w	r0, r3, #7
 800da28:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800da2c:	ecbd 8b06 	vpop	{d8-d10}
 800da30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da34:	ed31 6b02 	vldmdb	r1!, {d6}
 800da38:	3b01      	subs	r3, #1
 800da3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800da3e:	e7e7      	b.n	800da10 <__kernel_rem_pio2+0x470>
 800da40:	ed31 7b02 	vldmdb	r1!, {d7}
 800da44:	3801      	subs	r0, #1
 800da46:	ee36 6b07 	vadd.f64	d6, d6, d7
 800da4a:	e7c2      	b.n	800d9d2 <__kernel_rem_pio2+0x432>
 800da4c:	eeb0 7b46 	vmov.f64	d7, d6
 800da50:	e7c6      	b.n	800d9e0 <__kernel_rem_pio2+0x440>
 800da52:	ecb0 6b02 	vldmia	r0!, {d6}
 800da56:	3101      	adds	r1, #1
 800da58:	ee37 7b06 	vadd.f64	d7, d7, d6
 800da5c:	e7c8      	b.n	800d9f0 <__kernel_rem_pio2+0x450>
 800da5e:	ed10 7b04 	vldr	d7, [r0, #-16]
 800da62:	ed30 5b02 	vldmdb	r0!, {d5}
 800da66:	3c01      	subs	r4, #1
 800da68:	ee37 6b05 	vadd.f64	d6, d7, d5
 800da6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da70:	ed00 6b02 	vstr	d6, [r0, #-8]
 800da74:	ee37 7b05 	vadd.f64	d7, d7, d5
 800da78:	ed80 7b00 	vstr	d7, [r0]
 800da7c:	e78b      	b.n	800d996 <__kernel_rem_pio2+0x3f6>
 800da7e:	ed10 7b04 	vldr	d7, [r0, #-16]
 800da82:	ed30 5b02 	vldmdb	r0!, {d5}
 800da86:	3c01      	subs	r4, #1
 800da88:	ee37 6b05 	vadd.f64	d6, d7, d5
 800da8c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da90:	ed00 6b02 	vstr	d6, [r0, #-8]
 800da94:	ee37 7b05 	vadd.f64	d7, d7, d5
 800da98:	ed80 7b00 	vstr	d7, [r0]
 800da9c:	e77f      	b.n	800d99e <__kernel_rem_pio2+0x3fe>
 800da9e:	ed31 6b02 	vldmdb	r1!, {d6}
 800daa2:	3b01      	subs	r3, #1
 800daa4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800daa8:	e77d      	b.n	800d9a6 <__kernel_rem_pio2+0x406>
 800daaa:	eeb1 5b45 	vneg.f64	d5, d5
 800daae:	eeb1 6b46 	vneg.f64	d6, d6
 800dab2:	ed86 5b00 	vstr	d5, [r6]
 800dab6:	eeb1 7b47 	vneg.f64	d7, d7
 800daba:	ed86 6b02 	vstr	d6, [r6, #8]
 800dabe:	e77f      	b.n	800d9c0 <__kernel_rem_pio2+0x420>
 800dac0:	00000000 	.word	0x00000000
 800dac4:	41700000 	.word	0x41700000
 800dac8:	00000000 	.word	0x00000000
 800dacc:	3e700000 	.word	0x3e700000
	...

0800dad8 <__kernel_sin>:
 800dad8:	ee10 3a90 	vmov	r3, s1
 800dadc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dae0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dae4:	da04      	bge.n	800daf0 <__kernel_sin+0x18>
 800dae6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800daea:	ee17 3a90 	vmov	r3, s15
 800daee:	b35b      	cbz	r3, 800db48 <__kernel_sin+0x70>
 800daf0:	ee20 6b00 	vmul.f64	d6, d0, d0
 800daf4:	ee20 5b06 	vmul.f64	d5, d0, d6
 800daf8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800db50 <__kernel_sin+0x78>
 800dafc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800db58 <__kernel_sin+0x80>
 800db00:	eea6 4b07 	vfma.f64	d4, d6, d7
 800db04:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800db60 <__kernel_sin+0x88>
 800db08:	eea4 7b06 	vfma.f64	d7, d4, d6
 800db0c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800db68 <__kernel_sin+0x90>
 800db10:	eea7 4b06 	vfma.f64	d4, d7, d6
 800db14:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800db70 <__kernel_sin+0x98>
 800db18:	eea4 7b06 	vfma.f64	d7, d4, d6
 800db1c:	b930      	cbnz	r0, 800db2c <__kernel_sin+0x54>
 800db1e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800db78 <__kernel_sin+0xa0>
 800db22:	eea6 4b07 	vfma.f64	d4, d6, d7
 800db26:	eea4 0b05 	vfma.f64	d0, d4, d5
 800db2a:	4770      	bx	lr
 800db2c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800db30:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800db34:	eea1 7b04 	vfma.f64	d7, d1, d4
 800db38:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800db3c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800db80 <__kernel_sin+0xa8>
 800db40:	eea5 1b07 	vfma.f64	d1, d5, d7
 800db44:	ee30 0b41 	vsub.f64	d0, d0, d1
 800db48:	4770      	bx	lr
 800db4a:	bf00      	nop
 800db4c:	f3af 8000 	nop.w
 800db50:	5acfd57c 	.word	0x5acfd57c
 800db54:	3de5d93a 	.word	0x3de5d93a
 800db58:	8a2b9ceb 	.word	0x8a2b9ceb
 800db5c:	be5ae5e6 	.word	0xbe5ae5e6
 800db60:	57b1fe7d 	.word	0x57b1fe7d
 800db64:	3ec71de3 	.word	0x3ec71de3
 800db68:	19c161d5 	.word	0x19c161d5
 800db6c:	bf2a01a0 	.word	0xbf2a01a0
 800db70:	1110f8a6 	.word	0x1110f8a6
 800db74:	3f811111 	.word	0x3f811111
 800db78:	55555549 	.word	0x55555549
 800db7c:	bfc55555 	.word	0xbfc55555
 800db80:	55555549 	.word	0x55555549
 800db84:	3fc55555 	.word	0x3fc55555

0800db88 <atan>:
 800db88:	b538      	push	{r3, r4, r5, lr}
 800db8a:	eeb0 7b40 	vmov.f64	d7, d0
 800db8e:	ee17 5a90 	vmov	r5, s15
 800db92:	4b73      	ldr	r3, [pc, #460]	; (800dd60 <atan+0x1d8>)
 800db94:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800db98:	429c      	cmp	r4, r3
 800db9a:	dd13      	ble.n	800dbc4 <atan+0x3c>
 800db9c:	4b71      	ldr	r3, [pc, #452]	; (800dd64 <atan+0x1dc>)
 800db9e:	429c      	cmp	r4, r3
 800dba0:	dc03      	bgt.n	800dbaa <atan+0x22>
 800dba2:	d107      	bne.n	800dbb4 <atan+0x2c>
 800dba4:	ee10 3a10 	vmov	r3, s0
 800dba8:	b123      	cbz	r3, 800dbb4 <atan+0x2c>
 800dbaa:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dbae:	eeb0 0b47 	vmov.f64	d0, d7
 800dbb2:	bd38      	pop	{r3, r4, r5, pc}
 800dbb4:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800dcf0 <atan+0x168>
 800dbb8:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800dcf8 <atan+0x170>
 800dbbc:	2d00      	cmp	r5, #0
 800dbbe:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800dbc2:	e7f4      	b.n	800dbae <atan+0x26>
 800dbc4:	4b68      	ldr	r3, [pc, #416]	; (800dd68 <atan+0x1e0>)
 800dbc6:	429c      	cmp	r4, r3
 800dbc8:	dc11      	bgt.n	800dbee <atan+0x66>
 800dbca:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800dbce:	429c      	cmp	r4, r3
 800dbd0:	dc0a      	bgt.n	800dbe8 <atan+0x60>
 800dbd2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800dbd6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800dd00 <atan+0x178>
 800dbda:	ee30 6b06 	vadd.f64	d6, d0, d6
 800dbde:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800dbe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbe6:	dce2      	bgt.n	800dbae <atan+0x26>
 800dbe8:	f04f 33ff 	mov.w	r3, #4294967295
 800dbec:	e013      	b.n	800dc16 <atan+0x8e>
 800dbee:	f000 f8c5 	bl	800dd7c <fabs>
 800dbf2:	4b5e      	ldr	r3, [pc, #376]	; (800dd6c <atan+0x1e4>)
 800dbf4:	429c      	cmp	r4, r3
 800dbf6:	dc4f      	bgt.n	800dc98 <atan+0x110>
 800dbf8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800dbfc:	429c      	cmp	r4, r3
 800dbfe:	dc41      	bgt.n	800dc84 <atan+0xfc>
 800dc00:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800dc04:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800dc08:	2300      	movs	r3, #0
 800dc0a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800dc0e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dc12:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800dc16:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800dd08 <atan+0x180>
 800dc1a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800dc1e:	ee24 5b04 	vmul.f64	d5, d4, d4
 800dc22:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800dd10 <atan+0x188>
 800dc26:	eea5 3b06 	vfma.f64	d3, d5, d6
 800dc2a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800dd18 <atan+0x190>
 800dc2e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800dc32:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800dd20 <atan+0x198>
 800dc36:	eea6 3b05 	vfma.f64	d3, d6, d5
 800dc3a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800dd28 <atan+0x1a0>
 800dc3e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800dc42:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800dd30 <atan+0x1a8>
 800dc46:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800dd38 <atan+0x1b0>
 800dc4a:	eea6 3b05 	vfma.f64	d3, d6, d5
 800dc4e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800dd40 <atan+0x1b8>
 800dc52:	eea5 2b06 	vfma.f64	d2, d5, d6
 800dc56:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800dd48 <atan+0x1c0>
 800dc5a:	eea2 6b05 	vfma.f64	d6, d2, d5
 800dc5e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800dd50 <atan+0x1c8>
 800dc62:	eea6 2b05 	vfma.f64	d2, d6, d5
 800dc66:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800dd58 <atan+0x1d0>
 800dc6a:	1c5a      	adds	r2, r3, #1
 800dc6c:	eea2 6b05 	vfma.f64	d6, d2, d5
 800dc70:	ee26 6b05 	vmul.f64	d6, d6, d5
 800dc74:	eea3 6b04 	vfma.f64	d6, d3, d4
 800dc78:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dc7c:	d121      	bne.n	800dcc2 <atan+0x13a>
 800dc7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dc82:	e794      	b.n	800dbae <atan+0x26>
 800dc84:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800dc88:	2301      	movs	r3, #1
 800dc8a:	ee30 6b47 	vsub.f64	d6, d0, d7
 800dc8e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dc92:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800dc96:	e7be      	b.n	800dc16 <atan+0x8e>
 800dc98:	4b35      	ldr	r3, [pc, #212]	; (800dd70 <atan+0x1e8>)
 800dc9a:	429c      	cmp	r4, r3
 800dc9c:	dc0b      	bgt.n	800dcb6 <atan+0x12e>
 800dc9e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800dca2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800dca6:	ee30 5b47 	vsub.f64	d5, d0, d7
 800dcaa:	eea0 6b07 	vfma.f64	d6, d0, d7
 800dcae:	2302      	movs	r3, #2
 800dcb0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800dcb4:	e7af      	b.n	800dc16 <atan+0x8e>
 800dcb6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800dcba:	2303      	movs	r3, #3
 800dcbc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800dcc0:	e7a9      	b.n	800dc16 <atan+0x8e>
 800dcc2:	4a2c      	ldr	r2, [pc, #176]	; (800dd74 <atan+0x1ec>)
 800dcc4:	492c      	ldr	r1, [pc, #176]	; (800dd78 <atan+0x1f0>)
 800dcc6:	00db      	lsls	r3, r3, #3
 800dcc8:	441a      	add	r2, r3
 800dcca:	440b      	add	r3, r1
 800dccc:	ed93 5b00 	vldr	d5, [r3]
 800dcd0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dcd4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dcd8:	ed92 6b00 	vldr	d6, [r2]
 800dcdc:	2d00      	cmp	r5, #0
 800dcde:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dce2:	bfb8      	it	lt
 800dce4:	eeb1 7b47 	vneglt.f64	d7, d7
 800dce8:	e761      	b.n	800dbae <atan+0x26>
 800dcea:	bf00      	nop
 800dcec:	f3af 8000 	nop.w
 800dcf0:	54442d18 	.word	0x54442d18
 800dcf4:	bff921fb 	.word	0xbff921fb
 800dcf8:	54442d18 	.word	0x54442d18
 800dcfc:	3ff921fb 	.word	0x3ff921fb
 800dd00:	8800759c 	.word	0x8800759c
 800dd04:	7e37e43c 	.word	0x7e37e43c
 800dd08:	e322da11 	.word	0xe322da11
 800dd0c:	3f90ad3a 	.word	0x3f90ad3a
 800dd10:	24760deb 	.word	0x24760deb
 800dd14:	3fa97b4b 	.word	0x3fa97b4b
 800dd18:	a0d03d51 	.word	0xa0d03d51
 800dd1c:	3fb10d66 	.word	0x3fb10d66
 800dd20:	c54c206e 	.word	0xc54c206e
 800dd24:	3fb745cd 	.word	0x3fb745cd
 800dd28:	920083ff 	.word	0x920083ff
 800dd2c:	3fc24924 	.word	0x3fc24924
 800dd30:	5555550d 	.word	0x5555550d
 800dd34:	3fd55555 	.word	0x3fd55555
 800dd38:	52defd9a 	.word	0x52defd9a
 800dd3c:	bfadde2d 	.word	0xbfadde2d
 800dd40:	2c6a6c2f 	.word	0x2c6a6c2f
 800dd44:	bfa2b444 	.word	0xbfa2b444
 800dd48:	af749a6d 	.word	0xaf749a6d
 800dd4c:	bfb3b0f2 	.word	0xbfb3b0f2
 800dd50:	fe231671 	.word	0xfe231671
 800dd54:	bfbc71c6 	.word	0xbfbc71c6
 800dd58:	9998ebc4 	.word	0x9998ebc4
 800dd5c:	bfc99999 	.word	0xbfc99999
 800dd60:	440fffff 	.word	0x440fffff
 800dd64:	7ff00000 	.word	0x7ff00000
 800dd68:	3fdbffff 	.word	0x3fdbffff
 800dd6c:	3ff2ffff 	.word	0x3ff2ffff
 800dd70:	40037fff 	.word	0x40037fff
 800dd74:	0800e1c8 	.word	0x0800e1c8
 800dd78:	0800e1e8 	.word	0x0800e1e8

0800dd7c <fabs>:
 800dd7c:	ec51 0b10 	vmov	r0, r1, d0
 800dd80:	ee10 2a10 	vmov	r2, s0
 800dd84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dd88:	ec43 2b10 	vmov	d0, r2, r3
 800dd8c:	4770      	bx	lr
	...

0800dd90 <floor>:
 800dd90:	ee10 1a90 	vmov	r1, s1
 800dd94:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dd98:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800dd9c:	2b13      	cmp	r3, #19
 800dd9e:	b530      	push	{r4, r5, lr}
 800dda0:	ee10 0a10 	vmov	r0, s0
 800dda4:	ee10 5a10 	vmov	r5, s0
 800dda8:	dc33      	bgt.n	800de12 <floor+0x82>
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	da17      	bge.n	800ddde <floor+0x4e>
 800ddae:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800de70 <floor+0xe0>
 800ddb2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ddb6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ddba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddbe:	dd09      	ble.n	800ddd4 <floor+0x44>
 800ddc0:	2900      	cmp	r1, #0
 800ddc2:	da50      	bge.n	800de66 <floor+0xd6>
 800ddc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ddc8:	4a2b      	ldr	r2, [pc, #172]	; (800de78 <floor+0xe8>)
 800ddca:	4303      	orrs	r3, r0
 800ddcc:	2000      	movs	r0, #0
 800ddce:	4283      	cmp	r3, r0
 800ddd0:	bf18      	it	ne
 800ddd2:	4611      	movne	r1, r2
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	ec43 2b10 	vmov	d0, r2, r3
 800dddc:	e020      	b.n	800de20 <floor+0x90>
 800ddde:	4a27      	ldr	r2, [pc, #156]	; (800de7c <floor+0xec>)
 800dde0:	411a      	asrs	r2, r3
 800dde2:	ea01 0402 	and.w	r4, r1, r2
 800dde6:	4304      	orrs	r4, r0
 800dde8:	d01a      	beq.n	800de20 <floor+0x90>
 800ddea:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800de70 <floor+0xe0>
 800ddee:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ddf2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ddf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddfa:	ddeb      	ble.n	800ddd4 <floor+0x44>
 800ddfc:	2900      	cmp	r1, #0
 800ddfe:	bfbe      	ittt	lt
 800de00:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800de04:	fa40 f303 	asrlt.w	r3, r0, r3
 800de08:	18c9      	addlt	r1, r1, r3
 800de0a:	ea21 0102 	bic.w	r1, r1, r2
 800de0e:	2000      	movs	r0, #0
 800de10:	e7e0      	b.n	800ddd4 <floor+0x44>
 800de12:	2b33      	cmp	r3, #51	; 0x33
 800de14:	dd05      	ble.n	800de22 <floor+0x92>
 800de16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de1a:	d101      	bne.n	800de20 <floor+0x90>
 800de1c:	ee30 0b00 	vadd.f64	d0, d0, d0
 800de20:	bd30      	pop	{r4, r5, pc}
 800de22:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800de26:	f04f 32ff 	mov.w	r2, #4294967295
 800de2a:	40e2      	lsrs	r2, r4
 800de2c:	4202      	tst	r2, r0
 800de2e:	d0f7      	beq.n	800de20 <floor+0x90>
 800de30:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800de70 <floor+0xe0>
 800de34:	ee30 0b07 	vadd.f64	d0, d0, d7
 800de38:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800de3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de40:	ddc8      	ble.n	800ddd4 <floor+0x44>
 800de42:	2900      	cmp	r1, #0
 800de44:	da02      	bge.n	800de4c <floor+0xbc>
 800de46:	2b14      	cmp	r3, #20
 800de48:	d103      	bne.n	800de52 <floor+0xc2>
 800de4a:	3101      	adds	r1, #1
 800de4c:	ea20 0002 	bic.w	r0, r0, r2
 800de50:	e7c0      	b.n	800ddd4 <floor+0x44>
 800de52:	2401      	movs	r4, #1
 800de54:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800de58:	fa04 f303 	lsl.w	r3, r4, r3
 800de5c:	4418      	add	r0, r3
 800de5e:	42a8      	cmp	r0, r5
 800de60:	bf38      	it	cc
 800de62:	1909      	addcc	r1, r1, r4
 800de64:	e7f2      	b.n	800de4c <floor+0xbc>
 800de66:	2000      	movs	r0, #0
 800de68:	4601      	mov	r1, r0
 800de6a:	e7b3      	b.n	800ddd4 <floor+0x44>
 800de6c:	f3af 8000 	nop.w
 800de70:	8800759c 	.word	0x8800759c
 800de74:	7e37e43c 	.word	0x7e37e43c
 800de78:	bff00000 	.word	0xbff00000
 800de7c:	000fffff 	.word	0x000fffff

0800de80 <matherr>:
 800de80:	2000      	movs	r0, #0
 800de82:	4770      	bx	lr
 800de84:	0000      	movs	r0, r0
	...

0800de88 <scalbn>:
 800de88:	b500      	push	{lr}
 800de8a:	ed2d 8b02 	vpush	{d8}
 800de8e:	b083      	sub	sp, #12
 800de90:	ed8d 0b00 	vstr	d0, [sp]
 800de94:	9b01      	ldr	r3, [sp, #4]
 800de96:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800de9a:	b9a2      	cbnz	r2, 800dec6 <scalbn+0x3e>
 800de9c:	9a00      	ldr	r2, [sp, #0]
 800de9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dea2:	4313      	orrs	r3, r2
 800dea4:	d03a      	beq.n	800df1c <scalbn+0x94>
 800dea6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800df60 <scalbn+0xd8>
 800deaa:	4b35      	ldr	r3, [pc, #212]	; (800df80 <scalbn+0xf8>)
 800deac:	ee20 7b07 	vmul.f64	d7, d0, d7
 800deb0:	4298      	cmp	r0, r3
 800deb2:	ed8d 7b00 	vstr	d7, [sp]
 800deb6:	da11      	bge.n	800dedc <scalbn+0x54>
 800deb8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800df68 <scalbn+0xe0>
 800debc:	ed9d 6b00 	vldr	d6, [sp]
 800dec0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dec4:	e007      	b.n	800ded6 <scalbn+0x4e>
 800dec6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800deca:	428a      	cmp	r2, r1
 800decc:	d10a      	bne.n	800dee4 <scalbn+0x5c>
 800dece:	ed9d 7b00 	vldr	d7, [sp]
 800ded2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ded6:	ed8d 7b00 	vstr	d7, [sp]
 800deda:	e01f      	b.n	800df1c <scalbn+0x94>
 800dedc:	9b01      	ldr	r3, [sp, #4]
 800dede:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dee2:	3a36      	subs	r2, #54	; 0x36
 800dee4:	4402      	add	r2, r0
 800dee6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800deea:	428a      	cmp	r2, r1
 800deec:	dd0a      	ble.n	800df04 <scalbn+0x7c>
 800deee:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800df70 <scalbn+0xe8>
 800def2:	eeb0 0b48 	vmov.f64	d0, d8
 800def6:	ed9d 1b00 	vldr	d1, [sp]
 800defa:	f000 f843 	bl	800df84 <copysign>
 800defe:	ee20 7b08 	vmul.f64	d7, d0, d8
 800df02:	e7e8      	b.n	800ded6 <scalbn+0x4e>
 800df04:	2a00      	cmp	r2, #0
 800df06:	dd10      	ble.n	800df2a <scalbn+0xa2>
 800df08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df0c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800df10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800df14:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800df18:	e9cd 0100 	strd	r0, r1, [sp]
 800df1c:	ed9d 0b00 	vldr	d0, [sp]
 800df20:	b003      	add	sp, #12
 800df22:	ecbd 8b02 	vpop	{d8}
 800df26:	f85d fb04 	ldr.w	pc, [sp], #4
 800df2a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800df2e:	da06      	bge.n	800df3e <scalbn+0xb6>
 800df30:	f24c 3350 	movw	r3, #50000	; 0xc350
 800df34:	4298      	cmp	r0, r3
 800df36:	dcda      	bgt.n	800deee <scalbn+0x66>
 800df38:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800df68 <scalbn+0xe0>
 800df3c:	e7d9      	b.n	800def2 <scalbn+0x6a>
 800df3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800df46:	3236      	adds	r2, #54	; 0x36
 800df48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800df4c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800df50:	ec41 0b17 	vmov	d7, r0, r1
 800df54:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800df78 <scalbn+0xf0>
 800df58:	e7b2      	b.n	800dec0 <scalbn+0x38>
 800df5a:	bf00      	nop
 800df5c:	f3af 8000 	nop.w
 800df60:	00000000 	.word	0x00000000
 800df64:	43500000 	.word	0x43500000
 800df68:	c2f8f359 	.word	0xc2f8f359
 800df6c:	01a56e1f 	.word	0x01a56e1f
 800df70:	8800759c 	.word	0x8800759c
 800df74:	7e37e43c 	.word	0x7e37e43c
 800df78:	00000000 	.word	0x00000000
 800df7c:	3c900000 	.word	0x3c900000
 800df80:	ffff3cb0 	.word	0xffff3cb0

0800df84 <copysign>:
 800df84:	ec51 0b10 	vmov	r0, r1, d0
 800df88:	ee11 0a90 	vmov	r0, s3
 800df8c:	ee10 2a10 	vmov	r2, s0
 800df90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800df94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800df98:	ea41 0300 	orr.w	r3, r1, r0
 800df9c:	ec43 2b10 	vmov	d0, r2, r3
 800dfa0:	4770      	bx	lr
	...

0800dfa4 <_init>:
 800dfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfa6:	bf00      	nop
 800dfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfaa:	bc08      	pop	{r3}
 800dfac:	469e      	mov	lr, r3
 800dfae:	4770      	bx	lr

0800dfb0 <_fini>:
 800dfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfb2:	bf00      	nop
 800dfb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfb6:	bc08      	pop	{r3}
 800dfb8:	469e      	mov	lr, r3
 800dfba:	4770      	bx	lr
