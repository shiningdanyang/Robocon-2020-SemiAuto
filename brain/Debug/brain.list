
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c97c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800cc14  0800cc14  0001cc14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc3c  0800cc3c  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc3c  0800cc3c  0001cc3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc44  0800cc44  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc44  0800cc44  0001cc44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc48  0800cc48  0001cc48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  24000000  0800cc4c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  24000030  0800cc7c  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000764  0800cc7c  00020764  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020966  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f16  00000000  00000000  000409c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001618  00000000  00000000  000438e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001500  00000000  00000000  00044ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000386bc  00000000  00000000  000463f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012302  00000000  00000000  0007eab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00173a14  00000000  00000000  00090db6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002047ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f50  00000000  00000000  00204848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000030 	.word	0x24000030
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800cbfc 	.word	0x0800cbfc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000034 	.word	0x24000034
 80002d4:	0800cbfc 	.word	0x0800cbfc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayUs_Init+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <delayUs_Init+0x38>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <delayUs_Init+0x38>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delayUs_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delayUs_Init+0x3c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <delayUs_Init+0x3c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
    }
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000

08000618 <peripheralUART_Init>:
int trackingWait4CompassTx;
int trackingWait4CompassRx;
int trackingWait4SpinalCordTx;
int trackingWait4SpinalCordRx;
void peripheralUART_Init()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	4905      	ldr	r1, [pc, #20]	; (8000634 <peripheralUART_Init+0x1c>)
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <peripheralUART_Init+0x20>)
 8000622:	f008 ffe7 	bl	80095f4 <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000626:	2201      	movs	r2, #1
 8000628:	4904      	ldr	r1, [pc, #16]	; (800063c <peripheralUART_Init+0x24>)
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <peripheralUART_Init+0x28>)
 800062c:	f009 f8ba 	bl	80097a4 <HAL_UART_Receive_DMA>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	240006a4 	.word	0x240006a4
 8000638:	240005e8 	.word	0x240005e8
 800063c:	24000674 	.word	0x24000674
 8000640:	240001b4 	.word	0x240001b4

08000644 <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <compassReset+0x1c>)
 800064a:	2261      	movs	r2, #97	; 0x61
 800064c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 800064e:	2201      	movs	r2, #1
 8000650:	4903      	ldr	r1, [pc, #12]	; (8000660 <compassReset+0x1c>)
 8000652:	4804      	ldr	r0, [pc, #16]	; (8000664 <compassReset+0x20>)
 8000654:	f008 ff4a 	bl	80094ec <HAL_UART_Transmit_IT>
	wait4CompassTx();
 8000658:	f000 f83a 	bl	80006d0 <wait4CompassTx>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	24000000 	.word	0x24000000
 8000664:	24000470 	.word	0x24000470

08000668 <compassRequest>:
void compassRequest(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'z';
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <compassRequest+0x24>)
 800066e:	227a      	movs	r2, #122	; 0x7a
 8000670:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 8000672:	2201      	movs	r2, #1
 8000674:	4905      	ldr	r1, [pc, #20]	; (800068c <compassRequest+0x24>)
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <compassRequest+0x28>)
 8000678:	f008 ff38 	bl	80094ec <HAL_UART_Transmit_IT>
	trackingWait4CompassTx = 0;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <compassRequest+0x2c>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
	wait4CompassTx();
 8000682:	f000 f825 	bl	80006d0 <wait4CompassTx>
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	24000000 	.word	0x24000000
 8000690:	24000470 	.word	0x24000470
 8000694:	2400075c 	.word	0x2400075c

08000698 <compassGetData>:
void compassGetData(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&compass, compassRxPacket, 2);
 800069c:	2202      	movs	r2, #2
 800069e:	4909      	ldr	r1, [pc, #36]	; (80006c4 <compassGetData+0x2c>)
 80006a0:	4809      	ldr	r0, [pc, #36]	; (80006c8 <compassGetData+0x30>)
 80006a2:	f008 ffa7 	bl	80095f4 <HAL_UART_Receive_IT>
	wait4CompassRx();
 80006a6:	f000 f82b 	bl	8000700 <wait4CompassRx>
//	HAL_UART_Receive(&compass, compassRxPacket, 2, 50);

	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <compassGetData+0x2c>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	021b      	lsls	r3, r3, #8
 80006b0:	b21a      	sxth	r2, r3
 80006b2:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <compassGetData+0x2c>)
 80006b4:	785b      	ldrb	r3, [r3, #1]
 80006b6:	b21b      	sxth	r3, r3
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b21a      	sxth	r2, r3
 80006bc:	4b03      	ldr	r3, [pc, #12]	; (80006cc <compassGetData+0x34>)
 80006be:	801a      	strh	r2, [r3, #0]
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	240002a8 	.word	0x240002a8
 80006c8:	24000470 	.word	0x24000470
 80006cc:	2400035c 	.word	0x2400035c

080006d0 <wait4CompassTx>:

void wait4CompassTx(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
	while(compassTxCplt == 0)
 80006d4:	e004      	b.n	80006e0 <wait4CompassTx+0x10>
	{
		trackingWait4CompassTx++;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <wait4CompassTx+0x28>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <wait4CompassTx+0x28>)
 80006de:	6013      	str	r3, [r2, #0]
	while(compassTxCplt == 0)
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <wait4CompassTx+0x2c>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0f6      	beq.n	80006d6 <wait4CompassTx+0x6>
	}
	compassTxCplt = 0;
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <wait4CompassTx+0x2c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	2400075c 	.word	0x2400075c
 80006fc:	240006a0 	.word	0x240006a0

08000700 <wait4CompassRx>:

void wait4CompassRx(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
	while(compassRxCplt == 0)
 8000704:	e004      	b.n	8000710 <wait4CompassRx+0x10>
	{
		trackingWait4CompassRx++;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <wait4CompassRx+0x28>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	4a06      	ldr	r2, [pc, #24]	; (8000728 <wait4CompassRx+0x28>)
 800070e:	6013      	str	r3, [r2, #0]
	while(compassRxCplt == 0)
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <wait4CompassRx+0x2c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0f6      	beq.n	8000706 <wait4CompassRx+0x6>
	}
	compassRxCplt = 0;
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <wait4CompassRx+0x2c>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	24000748 	.word	0x24000748
 800072c:	24000378 	.word	0x24000378

08000730 <controlMotor1>:
int trackingControlMotor4;

#define BRAKE_SPEED 1

void controlMotor1(int _speed)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor1Dir_Pin, motor1Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor1Speed] = abs(_speed);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b00      	cmp	r3, #0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <controlMotor1+0x40>)
 8000744:	701a      	strb	r2, [r3, #0]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor1Dir] = ccw) : (spinalCordTxPacket[motor1Dir] = fcw);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db03      	blt.n	8000754 <controlMotor1+0x24>
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <controlMotor1+0x40>)
 800074e:	2200      	movs	r2, #0
 8000750:	711a      	strb	r2, [r3, #4]
 8000752:	e002      	b.n	800075a <controlMotor1+0x2a>
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <controlMotor1+0x40>)
 8000756:	2201      	movs	r2, #1
 8000758:	711a      	strb	r2, [r3, #4]
	trackingControlMotor1++;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <controlMotor1+0x44>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	3301      	adds	r3, #1
 8000760:	4a04      	ldr	r2, [pc, #16]	; (8000774 <controlMotor1+0x44>)
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	2400000c 	.word	0x2400000c
 8000774:	24000464 	.word	0x24000464

08000778 <controlMotor2>:
void controlMotor2(int _speed)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor2Dir_Pin, motor2Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor2Speed] = abs(_speed);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	bfb8      	it	lt
 8000786:	425b      	neglt	r3, r3
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <controlMotor2+0x40>)
 800078c:	705a      	strb	r2, [r3, #1]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor2Dir] = ccw) : (spinalCordTxPacket[motor2Dir] = fcw);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db03      	blt.n	800079c <controlMotor2+0x24>
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <controlMotor2+0x40>)
 8000796:	2200      	movs	r2, #0
 8000798:	715a      	strb	r2, [r3, #5]
 800079a:	e002      	b.n	80007a2 <controlMotor2+0x2a>
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <controlMotor2+0x40>)
 800079e:	2201      	movs	r2, #1
 80007a0:	715a      	strb	r2, [r3, #5]
	trackingControlMotor2++;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <controlMotor2+0x44>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <controlMotor2+0x44>)
 80007aa:	6013      	str	r3, [r2, #0]
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	2400000c 	.word	0x2400000c
 80007bc:	240002c4 	.word	0x240002c4

080007c0 <controlMotor3>:
void controlMotor3(int _speed)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor3Dir_Pin, motor3Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor3Speed] = abs(_speed);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	bfb8      	it	lt
 80007ce:	425b      	neglt	r3, r3
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <controlMotor3+0x40>)
 80007d4:	709a      	strb	r2, [r3, #2]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor3Dir] = ccw) : (spinalCordTxPacket[motor3Dir] = fcw);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	db03      	blt.n	80007e4 <controlMotor3+0x24>
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <controlMotor3+0x40>)
 80007de:	2200      	movs	r2, #0
 80007e0:	719a      	strb	r2, [r3, #6]
 80007e2:	e002      	b.n	80007ea <controlMotor3+0x2a>
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <controlMotor3+0x40>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	719a      	strb	r2, [r3, #6]
	trackingControlMotor3++;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <controlMotor3+0x44>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	3301      	adds	r3, #1
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <controlMotor3+0x44>)
 80007f2:	6013      	str	r3, [r2, #0]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	2400000c 	.word	0x2400000c
 8000804:	24000240 	.word	0x24000240

08000808 <controlMotor4>:
void controlMotor4(int _speed)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor3Dir_Pin, motor3Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor4Speed] = abs(_speed);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	bfb8      	it	lt
 8000816:	425b      	neglt	r3, r3
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <controlMotor4+0x40>)
 800081c:	70da      	strb	r2, [r3, #3]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor4Dir] = ccw) : (spinalCordTxPacket[motor4Dir] = fcw);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db03      	blt.n	800082c <controlMotor4+0x24>
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <controlMotor4+0x40>)
 8000826:	2200      	movs	r2, #0
 8000828:	71da      	strb	r2, [r3, #7]
 800082a:	e002      	b.n	8000832 <controlMotor4+0x2a>
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <controlMotor4+0x40>)
 800082e:	2201      	movs	r2, #1
 8000830:	71da      	strb	r2, [r3, #7]
	trackingControlMotor4++;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <controlMotor4+0x44>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <controlMotor4+0x44>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	2400000c 	.word	0x2400000c
 800084c:	240005a0 	.word	0x240005a0

08000850 <PIDyaw>:

double PIDyaw(int _yawValue, int _yawSetpoint)
{
 8000850:	b490      	push	{r4, r7}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
	yawError = _yawSetpoint - _yawValue;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	b29a      	uxth	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	b29b      	uxth	r3, r3
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	b29b      	uxth	r3, r3
 8000866:	b21a      	sxth	r2, r3
 8000868:	4b41      	ldr	r3, [pc, #260]	; (8000970 <PIDyaw+0x120>)
 800086a:	801a      	strh	r2, [r3, #0]
	yawP = yawError;
 800086c:	4b40      	ldr	r3, [pc, #256]	; (8000970 <PIDyaw+0x120>)
 800086e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000872:	ee07 3a90 	vmov	s15, r3
 8000876:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800087a:	4b3e      	ldr	r3, [pc, #248]	; (8000974 <PIDyaw+0x124>)
 800087c:	ed83 7b00 	vstr	d7, [r3]
	yawD = yawError - yawPreError;
 8000880:	4b3b      	ldr	r3, [pc, #236]	; (8000970 <PIDyaw+0x120>)
 8000882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000886:	461a      	mov	r2, r3
 8000888:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <PIDyaw+0x128>)
 800088a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	ee07 3a90 	vmov	s15, r3
 8000894:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000898:	4b38      	ldr	r3, [pc, #224]	; (800097c <PIDyaw+0x12c>)
 800089a:	ed83 7b00 	vstr	d7, [r3]
	yawI = yawError + yawI;
 800089e:	4b34      	ldr	r3, [pc, #208]	; (8000970 <PIDyaw+0x120>)
 80008a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a4:	ee07 3a90 	vmov	s15, r3
 80008a8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80008ac:	4b34      	ldr	r3, [pc, #208]	; (8000980 <PIDyaw+0x130>)
 80008ae:	ed93 7b00 	vldr	d7, [r3]
 80008b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008b6:	4b32      	ldr	r3, [pc, #200]	; (8000980 <PIDyaw+0x130>)
 80008b8:	ed83 7b00 	vstr	d7, [r3]
	yawPID = yawKp*yawP + yawKd*yawD + yawKi*yawI;
 80008bc:	4b31      	ldr	r3, [pc, #196]	; (8000984 <PIDyaw+0x134>)
 80008be:	ed93 6b00 	vldr	d6, [r3]
 80008c2:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <PIDyaw+0x124>)
 80008c4:	ed93 7b00 	vldr	d7, [r3]
 80008c8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80008cc:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <PIDyaw+0x138>)
 80008ce:	ed93 5b00 	vldr	d5, [r3]
 80008d2:	4b2a      	ldr	r3, [pc, #168]	; (800097c <PIDyaw+0x12c>)
 80008d4:	ed93 7b00 	vldr	d7, [r3]
 80008d8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80008dc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008e0:	4b2a      	ldr	r3, [pc, #168]	; (800098c <PIDyaw+0x13c>)
 80008e2:	ed93 5b00 	vldr	d5, [r3]
 80008e6:	4b26      	ldr	r3, [pc, #152]	; (8000980 <PIDyaw+0x130>)
 80008e8:	ed93 7b00 	vldr	d7, [r3]
 80008ec:	ee25 7b07 	vmul.f64	d7, d5, d7
 80008f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008f4:	4b26      	ldr	r3, [pc, #152]	; (8000990 <PIDyaw+0x140>)
 80008f6:	ed83 7b00 	vstr	d7, [r3]
	if(yawPID > MAX_YAW_PID)
 80008fa:	4b25      	ldr	r3, [pc, #148]	; (8000990 <PIDyaw+0x140>)
 80008fc:	ed93 7b00 	vldr	d7, [r3]
 8000900:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000960 <PIDyaw+0x110>
 8000904:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800090c:	dd05      	ble.n	800091a <PIDyaw+0xca>
	{
		yawPID = MAX_YAW_PID;
 800090e:	4a20      	ldr	r2, [pc, #128]	; (8000990 <PIDyaw+0x140>)
 8000910:	f04f 0300 	mov.w	r3, #0
 8000914:	4c1f      	ldr	r4, [pc, #124]	; (8000994 <PIDyaw+0x144>)
 8000916:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(yawPID < MIN_YAW_PID)
 800091a:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <PIDyaw+0x140>)
 800091c:	ed93 7b00 	vldr	d7, [r3]
 8000920:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000968 <PIDyaw+0x118>
 8000924:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800092c:	d505      	bpl.n	800093a <PIDyaw+0xea>
	{
		yawPID = MIN_YAW_PID;
 800092e:	4a18      	ldr	r2, [pc, #96]	; (8000990 <PIDyaw+0x140>)
 8000930:	f04f 0300 	mov.w	r3, #0
 8000934:	4c18      	ldr	r4, [pc, #96]	; (8000998 <PIDyaw+0x148>)
 8000936:	e9c2 3400 	strd	r3, r4, [r2]
	}
	yawPreError = yawError;
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <PIDyaw+0x120>)
 800093c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <PIDyaw+0x128>)
 8000942:	801a      	strh	r2, [r3, #0]
	return yawPID;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <PIDyaw+0x140>)
 8000946:	e9d3 3400 	ldrd	r3, r4, [r3]
 800094a:	ec44 3b17 	vmov	d7, r3, r4
}
 800094e:	eeb0 0b47 	vmov.f64	d0, d7
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bc90      	pop	{r4, r7}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	f3af 8000 	nop.w
 8000960:	00000000 	.word	0x00000000
 8000964:	40590000 	.word	0x40590000
 8000968:	00000000 	.word	0x00000000
 800096c:	c0590000 	.word	0xc0590000
 8000970:	24000350 	.word	0x24000350
 8000974:	24000360 	.word	0x24000360
 8000978:	240001b0 	.word	0x240001b0
 800097c:	24000078 	.word	0x24000078
 8000980:	24000348 	.word	0x24000348
 8000984:	24000018 	.word	0x24000018
 8000988:	24000050 	.word	0x24000050
 800098c:	24000058 	.word	0x24000058
 8000990:	240005e0 	.word	0x240005e0
 8000994:	40590000 	.word	0x40590000
 8000998:	c0590000 	.word	0xc0590000

0800099c <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <positionControl_Init+0x1c>)
 80009a2:	f008 f933 	bl	8008c0c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&leftArm);
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <positionControl_Init+0x20>)
 80009a8:	f008 f930 	bl	8008c0c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&rigtArm);
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <positionControl_Init+0x24>)
 80009ae:	f008 f92d 	bl	8008c0c <HAL_TIM_Base_Start_IT>
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	24000708 	.word	0x24000708
 80009bc:	24000248 	.word	0x24000248
 80009c0:	240006c0 	.word	0x240006c0

080009c4 <HAL_UART_TxCpltCallback>:
//include cuối "USER CODE BEGIN 0"
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_UART_TxCpltCallback+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d103      	bne.n	80009e0 <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt = 1;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <HAL_UART_TxCpltCallback+0x68>)
 80009da:	2201      	movs	r2, #1
 80009dc:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == manualRobot.Instance)
	{
		manualRobotTxCplt = 1;
	}
}
 80009de:	e01c      	b.n	8000a1a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_UART_TxCpltCallback+0x6c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d103      	bne.n	80009f4 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt = 1;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_UART_TxCpltCallback+0x70>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
}
 80009f2:	e012      	b.n	8000a1a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_UART_TxCpltCallback+0x74>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d103      	bne.n	8000a08 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt = 1;
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_UART_TxCpltCallback+0x78>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
}
 8000a06:	e008      	b.n	8000a1a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == manualRobot.Instance)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_UART_TxCpltCallback+0x7c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d102      	bne.n	8000a1a <HAL_UART_TxCpltCallback+0x56>
		manualRobotTxCplt = 1;
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <HAL_UART_TxCpltCallback+0x80>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	24000470 	.word	0x24000470
 8000a2c:	240006a0 	.word	0x240006a0
 8000a30:	240001b4 	.word	0x240001b4
 8000a34:	240002c0 	.word	0x240002c0
 8000a38:	240005e8 	.word	0x240005e8
 8000a3c:	2400050e 	.word	0x2400050e
 8000a40:	24000088 	.word	0x24000088
 8000a44:	240005b4 	.word	0x240005b4

08000a48 <HAL_UART_RxCpltCallback>:
int trackingReceiSpinalCord;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <HAL_UART_RxCpltCallback+0x84>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d103      	bne.n	8000a64 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt = 1;
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <HAL_UART_RxCpltCallback+0x88>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == manualRobot.Instance)
	{
		manualRobotRxCplt = 1;
	}
}
 8000a62:	e02f      	b.n	8000ac4 <HAL_UART_RxCpltCallback+0x7c>
	else if(huart->Instance == PS2.Instance)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <HAL_UART_RxCpltCallback+0x8c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d103      	bne.n	8000a78 <HAL_UART_RxCpltCallback+0x30>
		PS2RxCplt = 1;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <HAL_UART_RxCpltCallback+0x90>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	701a      	strb	r2, [r3, #0]
}
 8000a76:	e025      	b.n	8000ac4 <HAL_UART_RxCpltCallback+0x7c>
	else if(huart->Instance == spinalCord.Instance)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <HAL_UART_RxCpltCallback+0x94>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d116      	bne.n	8000ab2 <HAL_UART_RxCpltCallback+0x6a>
		if(spinalCordRxPacket[0]!=0)
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <HAL_UART_RxCpltCallback+0x98>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d009      	beq.n	8000aa0 <HAL_UART_RxCpltCallback+0x58>
			trackingReceiSpinalCord++;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_UART_RxCpltCallback+0x9c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <HAL_UART_RxCpltCallback+0x9c>)
 8000a94:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_IT(&spinalCord, spinalCordTxPacket, 9);
 8000a96:	2209      	movs	r2, #9
 8000a98:	4913      	ldr	r1, [pc, #76]	; (8000ae8 <HAL_UART_RxCpltCallback+0xa0>)
 8000a9a:	4810      	ldr	r0, [pc, #64]	; (8000adc <HAL_UART_RxCpltCallback+0x94>)
 8000a9c:	f008 fd26 	bl	80094ec <HAL_UART_Transmit_IT>
		spinalCordRxCplt = 1;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_UART_RxCpltCallback+0xa4>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <HAL_UART_RxCpltCallback+0x98>)
 8000aaa:	480c      	ldr	r0, [pc, #48]	; (8000adc <HAL_UART_RxCpltCallback+0x94>)
 8000aac:	f008 fda2 	bl	80095f4 <HAL_UART_Receive_IT>
}
 8000ab0:	e008      	b.n	8000ac4 <HAL_UART_RxCpltCallback+0x7c>
	else if(huart->Instance == manualRobot.Instance)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_UART_RxCpltCallback+0xa8>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d102      	bne.n	8000ac4 <HAL_UART_RxCpltCallback+0x7c>
		manualRobotRxCplt = 1;
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_UART_RxCpltCallback+0xac>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	24000470 	.word	0x24000470
 8000ad0:	24000378 	.word	0x24000378
 8000ad4:	240001b4 	.word	0x240001b4
 8000ad8:	24000512 	.word	0x24000512
 8000adc:	240005e8 	.word	0x240005e8
 8000ae0:	240006a4 	.word	0x240006a4
 8000ae4:	24000704 	.word	0x24000704
 8000ae8:	2400000c 	.word	0x2400000c
 8000aec:	24000700 	.word	0x24000700
 8000af0:	24000088 	.word	0x24000088
 8000af4:	240003e9 	.word	0x240003e9

08000af8 <HAL_TIM_PeriodElapsedCallback>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4ba3      	ldr	r3, [pc, #652]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	f040 8170 	bne.w	8000dee <HAL_TIM_PeriodElapsedCallback+0x2f6>
	{
		if(legEn == 1)
 8000b0e:	4ba2      	ldr	r3, [pc, #648]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d16b      	bne.n	8000bee <HAL_TIM_PeriodElapsedCallback+0xf6>
		{
			if(legStatus == legInitShoot)
 8000b16:	4ba1      	ldr	r3, [pc, #644]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d11f      	bne.n	8000b5e <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b24:	489e      	ldr	r0, [pc, #632]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b26:	f005 f9c7 	bl	8005eb8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);
 8000b2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b2e:	489c      	ldr	r0, [pc, #624]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b30:	f005 f9db 	bl	8005eea <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000b34:	4b9b      	ldr	r3, [pc, #620]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	4a9a      	ldr	r2, [pc, #616]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b3c:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;
 8000b3e:	4b9a      	ldr	r3, [pc, #616]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	3301      	adds	r3, #1
 8000b44:	4a98      	ldr	r2, [pc, #608]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b46:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legInitShootPulse)
 8000b48:	4b97      	ldr	r3, [pc, #604]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000b50:	db05      	blt.n	8000b5e <HAL_TIM_PeriodElapsedCallback+0x66>
				{
					legEn = 0;
 8000b52:	4b91      	ldr	r3, [pc, #580]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;
 8000b58:	4b93      	ldr	r3, [pc, #588]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legReInitShoot)
 8000b5e:	4b8f      	ldr	r3, [pc, #572]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d11f      	bne.n	8000ba6 <HAL_TIM_PeriodElapsedCallback+0xae>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b6c:	488c      	ldr	r0, [pc, #560]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b6e:	f005 f9a3 	bl	8005eb8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);
 8000b72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b76:	488a      	ldr	r0, [pc, #552]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b78:	f005 f9b7 	bl	8005eea <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000b7c:	4b89      	ldr	r3, [pc, #548]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	4a88      	ldr	r2, [pc, #544]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b84:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;
 8000b86:	4b88      	ldr	r3, [pc, #544]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	4a86      	ldr	r2, [pc, #536]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b8e:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legReInitShootPulse)
 8000b90:	4b85      	ldr	r3, [pc, #532]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000b98:	db05      	blt.n	8000ba6 <HAL_TIM_PeriodElapsedCallback+0xae>
				{
					legEn = 0;
 8000b9a:	4b7f      	ldr	r3, [pc, #508]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;
 8000ba0:	4b81      	ldr	r3, [pc, #516]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 8000ba6:	4b7d      	ldr	r3, [pc, #500]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d11f      	bne.n	8000bee <HAL_TIM_PeriodElapsedCallback+0xf6>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bb4:	487a      	ldr	r0, [pc, #488]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000bb6:	f005 f97f 	bl	8005eb8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);
 8000bba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bbe:	4878      	ldr	r0, [pc, #480]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000bc0:	f005 f993 	bl	8005eea <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000bc4:	4b77      	ldr	r3, [pc, #476]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	4a76      	ldr	r2, [pc, #472]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000bcc:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;
 8000bce:	4b76      	ldr	r3, [pc, #472]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	4a74      	ldr	r2, [pc, #464]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000bd6:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legEndPulse)
 8000bd8:	4b73      	ldr	r3, [pc, #460]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000be0:	db05      	blt.n	8000bee <HAL_TIM_PeriodElapsedCallback+0xf6>
				{
					legEn = 0;
 8000be2:	4b6d      	ldr	r3, [pc, #436]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;
 8000be8:	4b6f      	ldr	r3, [pc, #444]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if(rigtArmEn == 1)
 8000bee:	4b6f      	ldr	r3, [pc, #444]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d16b      	bne.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x1d6>
		{
			if(rigtArmStatus == rigtArmInit)
 8000bf6:	4b6e      	ldr	r3, [pc, #440]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d11f      	bne.n	8000c3e <HAL_TIM_PeriodElapsedCallback+0x146>
			{
				HAL_GPIO_WritePin(rigtArmDir_GPIO_Port, rigtArmDir_Pin, rigtArm_CCW);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c04:	486b      	ldr	r0, [pc, #428]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c06:	f005 f957 	bl	8005eb8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(rigtArmPul_GPIO_Port, rigtArmPul_Pin);
 8000c0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c0e:	4869      	ldr	r0, [pc, #420]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c10:	f005 f96b 	bl	8005eea <HAL_GPIO_TogglePin>
				trackingRigtArm++;
 8000c14:	4b68      	ldr	r3, [pc, #416]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	4a67      	ldr	r2, [pc, #412]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c1c:	6013      	str	r3, [r2, #0]
				rigtArmElapsedPulses++;
 8000c1e:	4b67      	ldr	r3, [pc, #412]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	4a65      	ldr	r2, [pc, #404]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c26:	6013      	str	r3, [r2, #0]
				if (rigtArmElapsedPulses >= rigtArmInitPulse)
 8000c28:	4b64      	ldr	r3, [pc, #400]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000c30:	db05      	blt.n	8000c3e <HAL_TIM_PeriodElapsedCallback+0x146>
				{
					rigtArmEn = 0;
 8000c32:	4b5e      	ldr	r3, [pc, #376]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
					rigtArmElapsedPulses = 0;
 8000c38:	4b60      	ldr	r3, [pc, #384]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
				}
			}
			if(rigtArmStatus == rigtArmSetBall)
 8000c3e:	4b5c      	ldr	r3, [pc, #368]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d11f      	bne.n	8000c86 <HAL_TIM_PeriodElapsedCallback+0x18e>
			{
				HAL_GPIO_WritePin(rigtArmDir_GPIO_Port, rigtArmDir_Pin, rigtArm_CCW);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4c:	4859      	ldr	r0, [pc, #356]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c4e:	f005 f933 	bl	8005eb8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(rigtArmPul_GPIO_Port, rigtArmPul_Pin);
 8000c52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c56:	4857      	ldr	r0, [pc, #348]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c58:	f005 f947 	bl	8005eea <HAL_GPIO_TogglePin>
				trackingRigtArm++;
 8000c5c:	4b56      	ldr	r3, [pc, #344]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	4a55      	ldr	r2, [pc, #340]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c64:	6013      	str	r3, [r2, #0]
				rigtArmElapsedPulses++;
 8000c66:	4b55      	ldr	r3, [pc, #340]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	4a53      	ldr	r2, [pc, #332]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c6e:	6013      	str	r3, [r2, #0]
				if (rigtArmElapsedPulses >= rigtArmSetBallPulse)
 8000c70:	4b52      	ldr	r3, [pc, #328]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c78:	db05      	blt.n	8000c86 <HAL_TIM_PeriodElapsedCallback+0x18e>
				{
					rigtArmEn = 0;
 8000c7a:	4b4c      	ldr	r3, [pc, #304]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
					rigtArmElapsedPulses = 0;
 8000c80:	4b4e      	ldr	r3, [pc, #312]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
				}
			}
			if(rigtArmStatus == rigtArmReturn)
 8000c86:	4b4a      	ldr	r3, [pc, #296]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d11f      	bne.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x1d6>
			{
				HAL_GPIO_WritePin(rigtArmDir_GPIO_Port, rigtArmDir_Pin, rigtArm_FCW);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c94:	4847      	ldr	r0, [pc, #284]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c96:	f005 f90f 	bl	8005eb8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(rigtArmPul_GPIO_Port, rigtArmPul_Pin);
 8000c9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c9e:	4845      	ldr	r0, [pc, #276]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000ca0:	f005 f923 	bl	8005eea <HAL_GPIO_TogglePin>
				trackingRigtArm++;
 8000ca4:	4b44      	ldr	r3, [pc, #272]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	4a43      	ldr	r2, [pc, #268]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000cac:	6013      	str	r3, [r2, #0]
				rigtArmElapsedPulses++;
 8000cae:	4b43      	ldr	r3, [pc, #268]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	4a41      	ldr	r2, [pc, #260]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000cb6:	6013      	str	r3, [r2, #0]
				if (rigtArmElapsedPulses >= rigtArmSetBallPulse)
 8000cb8:	4b40      	ldr	r3, [pc, #256]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000cc0:	db05      	blt.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x1d6>
				{
					rigtArmEn = 0;
 8000cc2:	4b3a      	ldr	r3, [pc, #232]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
					rigtArmElapsedPulses = 0;
 8000cc8:	4b3c      	ldr	r3, [pc, #240]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if(leftArmEn == 1)
 8000cce:	4b3c      	ldr	r3, [pc, #240]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	f040 808b 	bne.w	8000dee <HAL_TIM_PeriodElapsedCallback+0x2f6>
		{
			if(leftArmStatus == leftArmInit)
 8000cd8:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d11e      	bne.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x226>
			{
				HAL_GPIO_WritePin(leftArmDir_GPIO_Port, leftArmDir_Pin, leftArm_CCW);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce6:	4833      	ldr	r0, [pc, #204]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000ce8:	f005 f8e6 	bl	8005eb8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(leftArmPul_GPIO_Port, leftArmPul_Pin);
 8000cec:	2102      	movs	r1, #2
 8000cee:	4836      	ldr	r0, [pc, #216]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000cf0:	f005 f8fb 	bl	8005eea <HAL_GPIO_TogglePin>
				trackingLeftArm++;
 8000cf4:	4b35      	ldr	r3, [pc, #212]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	4a34      	ldr	r2, [pc, #208]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000cfc:	6013      	str	r3, [r2, #0]
				leftArmElapsedPulses++;
 8000cfe:	4b34      	ldr	r3, [pc, #208]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	3301      	adds	r3, #1
 8000d04:	4a32      	ldr	r2, [pc, #200]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d06:	6013      	str	r3, [r2, #0]
				if (leftArmElapsedPulses >= leftArmInitPulse)
 8000d08:	4b31      	ldr	r3, [pc, #196]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000d10:	db05      	blt.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x226>
				{
					leftArmEn = 0;
 8000d12:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
					leftArmElapsedPulses = 0;
 8000d18:	4b2d      	ldr	r3, [pc, #180]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
				}
			}
			if(leftArmStatus == leftArmSetBall)
 8000d1e:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d11e      	bne.n	8000d64 <HAL_TIM_PeriodElapsedCallback+0x26c>
			{
				HAL_GPIO_WritePin(leftArmDir_GPIO_Port, leftArmDir_Pin, leftArm_CCW);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d2c:	4821      	ldr	r0, [pc, #132]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000d2e:	f005 f8c3 	bl	8005eb8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(leftArmPul_GPIO_Port, leftArmPul_Pin);
 8000d32:	2102      	movs	r1, #2
 8000d34:	4824      	ldr	r0, [pc, #144]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000d36:	f005 f8d8 	bl	8005eea <HAL_GPIO_TogglePin>
				trackingLeftArm++;
 8000d3a:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	4a22      	ldr	r2, [pc, #136]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000d42:	6013      	str	r3, [r2, #0]
				leftArmElapsedPulses++;
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d4c:	6013      	str	r3, [r2, #0]
				if (leftArmElapsedPulses >= leftArmSetBallPulse)
 8000d4e:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000d56:	db05      	blt.n	8000d64 <HAL_TIM_PeriodElapsedCallback+0x26c>
				{
					leftArmEn = 0;
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
					leftArmElapsedPulses = 0;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
				}
			}
			if(leftArmStatus == leftArmReturn)
 8000d64:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d140      	bne.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x2f6>
			{
				HAL_GPIO_WritePin(leftArmDir_GPIO_Port, leftArmDir_Pin, leftArm_FCW);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d72:	4810      	ldr	r0, [pc, #64]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000d74:	f005 f8a0 	bl	8005eb8 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(leftArmPul_GPIO_Port, leftArmPul_Pin);
 8000d78:	2102      	movs	r1, #2
 8000d7a:	4813      	ldr	r0, [pc, #76]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000d7c:	f005 f8b5 	bl	8005eea <HAL_GPIO_TogglePin>
				trackingLeftArm++;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	3301      	adds	r3, #1
 8000d86:	4a11      	ldr	r2, [pc, #68]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000d88:	6013      	str	r3, [r2, #0]
				leftArmElapsedPulses++;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	e020      	b.n	8000dd4 <HAL_TIM_PeriodElapsedCallback+0x2dc>
 8000d92:	bf00      	nop
 8000d94:	24000708 	.word	0x24000708
 8000d98:	24000508 	.word	0x24000508
 8000d9c:	2400067c 	.word	0x2400067c
 8000da0:	58020c00 	.word	0x58020c00
 8000da4:	24000500 	.word	0x24000500
 8000da8:	240005c0 	.word	0x240005c0
 8000dac:	240005b0 	.word	0x240005b0
 8000db0:	24000084 	.word	0x24000084
 8000db4:	58021800 	.word	0x58021800
 8000db8:	24000680 	.word	0x24000680
 8000dbc:	240005d4 	.word	0x240005d4
 8000dc0:	2400074c 	.word	0x2400074c
 8000dc4:	2400058c 	.word	0x2400058c
 8000dc8:	58021000 	.word	0x58021000
 8000dcc:	240006b0 	.word	0x240006b0
 8000dd0:	2400037c 	.word	0x2400037c
 8000dd4:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000dd6:	6013      	str	r3, [r2, #0]
				if (leftArmElapsedPulses >= leftArmSetBallPulse)
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000de0:	db05      	blt.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x2f6>
				{
					leftArmEn = 0;
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
					leftArmElapsedPulses = 0;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == leftArm.Instance)
	{

	}
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2400037c 	.word	0x2400037c
 8000dfc:	2400074c 	.word	0x2400074c

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e04:	f001 f97a 	bl	80020fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e08:	f000 f872 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0c:	f000 fc46 	bl	800169c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e10:	f000 fc04 	bl	800161c <MX_DMA_Init>
  MX_ADC1_Init();
 8000e14:	f000 f922 	bl	800105c <MX_ADC1_Init>
  MX_ADC3_Init();
 8000e18:	f000 f9a8 	bl	800116c <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8000e1c:	f000 fb1a 	bl	8001454 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000e20:	f000 fb64 	bl	80014ec <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000e24:	f000 fa06 	bl	8001234 <MX_TIM7_Init>
  MX_TIM12_Init();
 8000e28:	f000 fa3c 	bl	80012a4 <MX_TIM12_Init>
  MX_TIM15_Init();
 8000e2c:	f000 fa74 	bl	8001318 <MX_TIM15_Init>
  MX_UART7_Init();
 8000e30:	f000 fac4 	bl	80013bc <MX_UART7_Init>
  MX_USART6_UART_Init();
 8000e34:	f000 fba6 	bl	8001584 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  peripheralUART_Init();
 8000e38:	f7ff fbee 	bl	8000618 <peripheralUART_Init>
  compassReset();
 8000e3c:	f7ff fc02 	bl	8000644 <compassReset>
  delayUs_Init();
 8000e40:	f7ff fbca 	bl	80005d8 <delayUs_Init>
  positionControl_Init();
 8000e44:	f7ff fdaa 	bl	800099c <positionControl_Init>

//  legEn = 1;
//  legStatus = legInitShoot;
//  leftArmEn = 1;
//  leftArmStatus = leftArmInit;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	4823      	ldr	r0, [pc, #140]	; (8000edc <main+0xdc>)
 8000e4e:	f005 f833 	bl	8005eb8 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000e52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e56:	f001 f9e3 	bl	8002220 <HAL_Delay>
//	  HAL_Delay(5000);
//	  HAL_Delay(500);
///////////////////////////////////////////////////////////////////////

//////////////////////test xoay la bàn////////////////////////////////
	  compassRequest();
 8000e5a:	f7ff fc05 	bl	8000668 <compassRequest>
	  compassGetData();
 8000e5e:	f7ff fc1b 	bl	8000698 <compassGetData>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2101      	movs	r1, #1
 8000e66:	481d      	ldr	r0, [pc, #116]	; (8000edc <main+0xdc>)
 8000e68:	f005 f826 	bl	8005eb8 <HAL_GPIO_WritePin>
	  PIDyaw(300, compassData);
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <main+0xe0>)
 8000e6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e72:	4619      	mov	r1, r3
 8000e74:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e78:	f7ff fcea 	bl	8000850 <PIDyaw>
	  controlMotor1(yawPID);
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <main+0xe4>)
 8000e7e:	ed93 7b00 	vldr	d7, [r3]
 8000e82:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e86:	ee17 0a90 	vmov	r0, s15
 8000e8a:	f7ff fc51 	bl	8000730 <controlMotor1>
	  controlMotor2(yawPID);
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <main+0xe4>)
 8000e90:	ed93 7b00 	vldr	d7, [r3]
 8000e94:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e98:	ee17 0a90 	vmov	r0, s15
 8000e9c:	f7ff fc6c 	bl	8000778 <controlMotor2>
	  controlMotor3(yawPID);
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <main+0xe4>)
 8000ea2:	ed93 7b00 	vldr	d7, [r3]
 8000ea6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000eaa:	ee17 0a90 	vmov	r0, s15
 8000eae:	f7ff fc87 	bl	80007c0 <controlMotor3>
	  controlMotor4(yawPID);
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <main+0xe4>)
 8000eb4:	ed93 7b00 	vldr	d7, [r3]
 8000eb8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ebc:	ee17 0a90 	vmov	r0, s15
 8000ec0:	f7ff fca2 	bl	8000808 <controlMotor4>
	  spinalCordTxPacket[8] = compassData;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <main+0xe0>)
 8000ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <main+0xe8>)
 8000ece:	721a      	strb	r2, [r3, #8]
	  tracking++;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <main+0xec>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <main+0xec>)
 8000ed8:	6013      	str	r3, [r2, #0]
	  compassRequest();
 8000eda:	e7be      	b.n	8000e5a <main+0x5a>
 8000edc:	58020400 	.word	0x58020400
 8000ee0:	2400035c 	.word	0x2400035c
 8000ee4:	240005e0 	.word	0x240005e0
 8000ee8:	2400000c 	.word	0x2400000c
 8000eec:	24000590 	.word	0x24000590

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0cc      	sub	sp, #304	; 0x130
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000efa:	224c      	movs	r2, #76	; 0x4c
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f00b fe74 	bl	800cbec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f08:	2220      	movs	r2, #32
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f00b fe6d 	bl	800cbec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f12:	f107 0308 	add.w	r3, r7, #8
 8000f16:	4618      	mov	r0, r3
 8000f18:	23bc      	movs	r3, #188	; 0xbc
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	f00b fe65 	bl	800cbec <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f22:	2002      	movs	r0, #2
 8000f24:	f004 fffc 	bl	8005f20 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	4b49      	ldr	r3, [pc, #292]	; (8001054 <SystemClock_Config+0x164>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	4a48      	ldr	r2, [pc, #288]	; (8001054 <SystemClock_Config+0x164>)
 8000f34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f38:	6193      	str	r3, [r2, #24]
 8000f3a:	4b46      	ldr	r3, [pc, #280]	; (8001054 <SystemClock_Config+0x164>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	4b44      	ldr	r3, [pc, #272]	; (8001058 <SystemClock_Config+0x168>)
 8000f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4a:	4a43      	ldr	r2, [pc, #268]	; (8001058 <SystemClock_Config+0x168>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f52:	4b41      	ldr	r3, [pc, #260]	; (8001058 <SystemClock_Config+0x168>)
 8000f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f56:	f003 0201 	and.w	r2, r3, #1
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f62:	bf00      	nop
 8000f64:	4b3b      	ldr	r3, [pc, #236]	; (8001054 <SystemClock_Config+0x164>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f70:	d1f8      	bne.n	8000f64 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f72:	2302      	movs	r3, #2
 8000f74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f7e:	2340      	movs	r3, #64	; 0x40
 8000f80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f84:	2302      	movs	r3, #2
 8000f86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f90:	2304      	movs	r3, #4
 8000f92:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000f96:	233c      	movs	r3, #60	; 0x3c
 8000f98:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fae:	230c      	movs	r3, #12
 8000fb0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f004 ffe5 	bl	8005f94 <HAL_RCC_OscConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000fd0:	f000 fc6c 	bl	80018ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd4:	233f      	movs	r3, #63	; 0x3f
 8000fd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fec:	2340      	movs	r3, #64	; 0x40
 8000fee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ffc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001000:	2340      	movs	r3, #64	; 0x40
 8001002:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001006:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800100a:	2104      	movs	r1, #4
 800100c:	4618      	mov	r0, r3
 800100e:	f005 fb99 	bl	8006744 <HAL_RCC_ClockConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001018:	f000 fc48 	bl	80018ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	2203      	movs	r2, #3
 8001022:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	2200      	movs	r2, #0
 800102a:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	2200      	movs	r2, #0
 8001032:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	4618      	mov	r0, r3
 800103a:	f005 ff07 	bl	8006e4c <HAL_RCCEx_PeriphCLKConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8001044:	f000 fc32 	bl	80018ac <Error_Handler>
  }
}
 8001048:	bf00      	nop
 800104a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	58024800 	.word	0x58024800
 8001058:	58000400 	.word	0x58000400

0800105c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800106e:	463b      	mov	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
 800107c:	615a      	str	r2, [r3, #20]
 800107e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001080:	4b36      	ldr	r3, [pc, #216]	; (800115c <MX_ADC1_Init+0x100>)
 8001082:	4a37      	ldr	r2, [pc, #220]	; (8001160 <MX_ADC1_Init+0x104>)
 8001084:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001086:	4b35      	ldr	r3, [pc, #212]	; (800115c <MX_ADC1_Init+0x100>)
 8001088:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800108c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800108e:	4b33      	ldr	r3, [pc, #204]	; (800115c <MX_ADC1_Init+0x100>)
 8001090:	2208      	movs	r2, #8
 8001092:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001094:	4b31      	ldr	r3, [pc, #196]	; (800115c <MX_ADC1_Init+0x100>)
 8001096:	2201      	movs	r2, #1
 8001098:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b30      	ldr	r3, [pc, #192]	; (800115c <MX_ADC1_Init+0x100>)
 800109c:	2204      	movs	r2, #4
 800109e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010a0:	4b2e      	ldr	r3, [pc, #184]	; (800115c <MX_ADC1_Init+0x100>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010a6:	4b2d      	ldr	r3, [pc, #180]	; (800115c <MX_ADC1_Init+0x100>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 80010ac:	4b2b      	ldr	r3, [pc, #172]	; (800115c <MX_ADC1_Init+0x100>)
 80010ae:	2202      	movs	r2, #2
 80010b0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b2:	4b2a      	ldr	r3, [pc, #168]	; (800115c <MX_ADC1_Init+0x100>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b8:	4b28      	ldr	r3, [pc, #160]	; (800115c <MX_ADC1_Init+0x100>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010be:	4b27      	ldr	r3, [pc, #156]	; (800115c <MX_ADC1_Init+0x100>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <MX_ADC1_Init+0x100>)
 80010c6:	2203      	movs	r2, #3
 80010c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <MX_ADC1_Init+0x100>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <MX_ADC1_Init+0x100>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <MX_ADC1_Init+0x100>)
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010de:	481f      	ldr	r0, [pc, #124]	; (800115c <MX_ADC1_Init+0x100>)
 80010e0:	f001 fa62 	bl	80025a8 <HAL_ADC_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80010ea:	f000 fbdf 	bl	80018ac <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	4619      	mov	r1, r3
 80010f8:	4818      	ldr	r0, [pc, #96]	; (800115c <MX_ADC1_Init+0x100>)
 80010fa:	f002 f827 	bl	800314c <HAL_ADCEx_MultiModeConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001104:	f000 fbd2 	bl	80018ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_ADC1_Init+0x108>)
 800110a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110c:	2306      	movs	r3, #6
 800110e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001114:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001118:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111a:	2304      	movs	r3, #4
 800111c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	4619      	mov	r1, r3
 8001126:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_ADC1_Init+0x100>)
 8001128:	f001 fbde 	bl	80028e8 <HAL_ADC_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001132:	f000 fbbb 	bl	80018ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_ADC1_Init+0x10c>)
 8001138:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800113a:	230c      	movs	r3, #12
 800113c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113e:	463b      	mov	r3, r7
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <MX_ADC1_Init+0x100>)
 8001144:	f001 fbd0 	bl	80028e8 <HAL_ADC_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 800114e:	f000 fbad 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	; 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	24000384 	.word	0x24000384
 8001160:	40022000 	.word	0x40022000
 8001164:	2a000400 	.word	0x2a000400
 8001168:	3ef08000 	.word	0x3ef08000

0800116c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	615a      	str	r2, [r3, #20]
 8001182:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8001184:	4b28      	ldr	r3, [pc, #160]	; (8001228 <MX_ADC3_Init+0xbc>)
 8001186:	4a29      	ldr	r2, [pc, #164]	; (800122c <MX_ADC3_Init+0xc0>)
 8001188:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800118a:	4b27      	ldr	r3, [pc, #156]	; (8001228 <MX_ADC3_Init+0xbc>)
 800118c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001190:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <MX_ADC3_Init+0xbc>)
 8001194:	2208      	movs	r2, #8
 8001196:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <MX_ADC3_Init+0xbc>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119e:	4b22      	ldr	r3, [pc, #136]	; (8001228 <MX_ADC3_Init+0xbc>)
 80011a0:	2204      	movs	r2, #4
 80011a2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80011a4:	4b20      	ldr	r3, [pc, #128]	; (8001228 <MX_ADC3_Init+0xbc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <MX_ADC3_Init+0xbc>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <MX_ADC3_Init+0xbc>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <MX_ADC3_Init+0xbc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <MX_ADC3_Init+0xbc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <MX_ADC3_Init+0xbc>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_ADC3_Init+0xbc>)
 80011ca:	2203      	movs	r2, #3
 80011cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_ADC3_Init+0xbc>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_ADC3_Init+0xbc>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <MX_ADC3_Init+0xbc>)
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011e2:	4811      	ldr	r0, [pc, #68]	; (8001228 <MX_ADC3_Init+0xbc>)
 80011e4:	f001 f9e0 	bl	80025a8 <HAL_ADC_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80011ee:	f000 fb5d 	bl	80018ac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_ADC3_Init+0xc4>)
 80011f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011f6:	2306      	movs	r3, #6
 80011f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001202:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001204:	2304      	movs	r3, #4
 8001206:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_ADC3_Init+0xbc>)
 8001212:	f001 fb69 	bl	80028e8 <HAL_ADC_ConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 800121c:	f000 fb46 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	3720      	adds	r7, #32
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	240003f0 	.word	0x240003f0
 800122c:	58026000 	.word	0x58026000
 8001230:	04300002 	.word	0x04300002

08001234 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <MX_TIM7_Init+0x68>)
 8001246:	4a16      	ldr	r2, [pc, #88]	; (80012a0 <MX_TIM7_Init+0x6c>)
 8001248:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_TIM7_Init+0x68>)
 800124c:	f640 125f 	movw	r2, #2399	; 0x95f
 8001250:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_TIM7_Init+0x68>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <MX_TIM7_Init+0x68>)
 800125a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800125e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_TIM7_Init+0x68>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_TIM7_Init+0x68>)
 8001268:	f007 fca4 	bl	8008bb4 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001272:	f000 fb1b 	bl	80018ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	4619      	mov	r1, r3
 8001282:	4806      	ldr	r0, [pc, #24]	; (800129c <MX_TIM7_Init+0x68>)
 8001284:	f008 f83c 	bl	8009300 <HAL_TIMEx_MasterConfigSynchronization>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800128e:	f000 fb0d 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	24000708 	.word	0x24000708
 80012a0:	40001400 	.word	0x40001400

080012a4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012aa:	463b      	mov	r3, r7
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <MX_TIM12_Init+0x6c>)
 80012b8:	4a16      	ldr	r2, [pc, #88]	; (8001314 <MX_TIM12_Init+0x70>)
 80012ba:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2399;
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <MX_TIM12_Init+0x6c>)
 80012be:	f640 125f 	movw	r2, #2399	; 0x95f
 80012c2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MX_TIM12_Init+0x6c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_TIM12_Init+0x6c>)
 80012cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012d0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_TIM12_Init+0x6c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <MX_TIM12_Init+0x6c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80012de:	480c      	ldr	r0, [pc, #48]	; (8001310 <MX_TIM12_Init+0x6c>)
 80012e0:	f007 fc68 	bl	8008bb4 <HAL_TIM_Base_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 80012ea:	f000 fadf 	bl	80018ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80012f4:	463b      	mov	r3, r7
 80012f6:	4619      	mov	r1, r3
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_TIM12_Init+0x6c>)
 80012fa:	f007 fdd1 	bl	8008ea0 <HAL_TIM_ConfigClockSource>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8001304:	f000 fad2 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	240006c0 	.word	0x240006c0
 8001314:	40001800 	.word	0x40001800

08001318 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001336:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <MX_TIM15_Init+0x9c>)
 8001338:	4a1f      	ldr	r2, [pc, #124]	; (80013b8 <MX_TIM15_Init+0xa0>)
 800133a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2399;
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_TIM15_Init+0x9c>)
 800133e:	f640 125f 	movw	r2, #2399	; 0x95f
 8001342:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <MX_TIM15_Init+0x9c>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <MX_TIM15_Init+0x9c>)
 800134c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001350:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <MX_TIM15_Init+0x9c>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <MX_TIM15_Init+0x9c>)
 800135a:	2200      	movs	r2, #0
 800135c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <MX_TIM15_Init+0x9c>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001364:	4813      	ldr	r0, [pc, #76]	; (80013b4 <MX_TIM15_Init+0x9c>)
 8001366:	f007 fc25 	bl	8008bb4 <HAL_TIM_Base_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001370:	f000 fa9c 	bl	80018ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001378:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800137a:	f107 0310 	add.w	r3, r7, #16
 800137e:	4619      	mov	r1, r3
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <MX_TIM15_Init+0x9c>)
 8001382:	f007 fd8d 	bl	8008ea0 <HAL_TIM_ConfigClockSource>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800138c:	f000 fa8e 	bl	80018ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_TIM15_Init+0x9c>)
 800139e:	f007 ffaf 	bl	8009300 <HAL_TIMEx_MasterConfigSynchronization>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80013a8:	f000 fa80 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	24000248 	.word	0x24000248
 80013b8:	40014000 	.word	0x40014000

080013bc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <MX_UART7_Init+0x90>)
 80013c2:	4a23      	ldr	r2, [pc, #140]	; (8001450 <MX_UART7_Init+0x94>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <MX_UART7_Init+0x90>)
 80013c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013cc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <MX_UART7_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <MX_UART7_Init+0x90>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_UART7_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_UART7_Init+0x90>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <MX_UART7_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b17      	ldr	r3, [pc, #92]	; (800144c <MX_UART7_Init+0x90>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <MX_UART7_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_UART7_Init+0x90>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <MX_UART7_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001404:	4811      	ldr	r0, [pc, #68]	; (800144c <MX_UART7_Init+0x90>)
 8001406:	f008 f821 	bl	800944c <HAL_UART_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001410:	f000 fa4c 	bl	80018ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001414:	2100      	movs	r1, #0
 8001416:	480d      	ldr	r0, [pc, #52]	; (800144c <MX_UART7_Init+0x90>)
 8001418:	f00b fadf 	bl	800c9da <HAL_UARTEx_SetTxFifoThreshold>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001422:	f000 fa43 	bl	80018ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001426:	2100      	movs	r1, #0
 8001428:	4808      	ldr	r0, [pc, #32]	; (800144c <MX_UART7_Init+0x90>)
 800142a:	f00b fb14 	bl	800ca56 <HAL_UARTEx_SetRxFifoThreshold>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001434:	f000 fa3a 	bl	80018ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001438:	4804      	ldr	r0, [pc, #16]	; (800144c <MX_UART7_Init+0x90>)
 800143a:	f00b fa95 	bl	800c968 <HAL_UARTEx_DisableFifoMode>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001444:	f000 fa32 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	24000088 	.word	0x24000088
 8001450:	40007800 	.word	0x40007800

08001454 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001458:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 800145a:	4a23      	ldr	r2, [pc, #140]	; (80014e8 <MX_USART1_UART_Init+0x94>)
 800145c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 8001460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001464:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800149c:	4811      	ldr	r0, [pc, #68]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 800149e:	f007 ffd5 	bl	800944c <HAL_UART_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014a8:	f000 fa00 	bl	80018ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ac:	2100      	movs	r1, #0
 80014ae:	480d      	ldr	r0, [pc, #52]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 80014b0:	f00b fa93 	bl	800c9da <HAL_UARTEx_SetTxFifoThreshold>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014ba:	f000 f9f7 	bl	80018ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014be:	2100      	movs	r1, #0
 80014c0:	4808      	ldr	r0, [pc, #32]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 80014c2:	f00b fac8 	bl	800ca56 <HAL_UARTEx_SetRxFifoThreshold>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014cc:	f000 f9ee 	bl	80018ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 80014d2:	f00b fa49 	bl	800c968 <HAL_UARTEx_DisableFifoMode>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014dc:	f000 f9e6 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	24000470 	.word	0x24000470
 80014e8:	40011000 	.word	0x40011000

080014ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <MX_USART3_UART_Init+0x90>)
 80014f2:	4a23      	ldr	r2, [pc, #140]	; (8001580 <MX_USART3_UART_Init+0x94>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <MX_USART3_UART_Init+0x90>)
 80014f8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80014fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <MX_USART3_UART_Init+0x90>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <MX_USART3_UART_Init+0x90>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <MX_USART3_UART_Init+0x90>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <MX_USART3_UART_Init+0x90>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <MX_USART3_UART_Init+0x90>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_USART3_UART_Init+0x90>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <MX_USART3_UART_Init+0x90>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_USART3_UART_Init+0x90>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <MX_USART3_UART_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001534:	4811      	ldr	r0, [pc, #68]	; (800157c <MX_USART3_UART_Init+0x90>)
 8001536:	f007 ff89 	bl	800944c <HAL_UART_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001540:	f000 f9b4 	bl	80018ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001544:	2100      	movs	r1, #0
 8001546:	480d      	ldr	r0, [pc, #52]	; (800157c <MX_USART3_UART_Init+0x90>)
 8001548:	f00b fa47 	bl	800c9da <HAL_UARTEx_SetTxFifoThreshold>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001552:	f000 f9ab 	bl	80018ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001556:	2100      	movs	r1, #0
 8001558:	4808      	ldr	r0, [pc, #32]	; (800157c <MX_USART3_UART_Init+0x90>)
 800155a:	f00b fa7c 	bl	800ca56 <HAL_UARTEx_SetRxFifoThreshold>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001564:	f000 f9a2 	bl	80018ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_USART3_UART_Init+0x90>)
 800156a:	f00b f9fd 	bl	800c968 <HAL_UARTEx_DisableFifoMode>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001574:	f000 f99a 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	240001b4 	.word	0x240001b4
 8001580:	40004800 	.word	0x40004800

08001584 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <MX_USART6_UART_Init+0x90>)
 800158a:	4a23      	ldr	r2, [pc, #140]	; (8001618 <MX_USART6_UART_Init+0x94>)
 800158c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800158e:	4b21      	ldr	r3, [pc, #132]	; (8001614 <MX_USART6_UART_Init+0x90>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <MX_USART6_UART_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <MX_USART6_UART_Init+0x90>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <MX_USART6_UART_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <MX_USART6_UART_Init+0x90>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <MX_USART6_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <MX_USART6_UART_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <MX_USART6_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_USART6_UART_Init+0x90>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_USART6_UART_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015cc:	4811      	ldr	r0, [pc, #68]	; (8001614 <MX_USART6_UART_Init+0x90>)
 80015ce:	f007 ff3d 	bl	800944c <HAL_UART_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80015d8:	f000 f968 	bl	80018ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015dc:	2100      	movs	r1, #0
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_USART6_UART_Init+0x90>)
 80015e0:	f00b f9fb 	bl	800c9da <HAL_UARTEx_SetTxFifoThreshold>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80015ea:	f000 f95f 	bl	80018ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ee:	2100      	movs	r1, #0
 80015f0:	4808      	ldr	r0, [pc, #32]	; (8001614 <MX_USART6_UART_Init+0x90>)
 80015f2:	f00b fa30 	bl	800ca56 <HAL_UARTEx_SetRxFifoThreshold>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80015fc:	f000 f956 	bl	80018ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001600:	4804      	ldr	r0, [pc, #16]	; (8001614 <MX_USART6_UART_Init+0x90>)
 8001602:	f00b f9b1 	bl	800c968 <HAL_UARTEx_DisableFifoMode>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800160c:	f000 f94e 	bl	80018ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	240005e8 	.word	0x240005e8
 8001618:	40011400 	.word	0x40011400

0800161c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <MX_DMA_Init+0x7c>)
 8001624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001628:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <MX_DMA_Init+0x7c>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <MX_DMA_Init+0x7c>)
 8001634:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001640:	4b15      	ldr	r3, [pc, #84]	; (8001698 <MX_DMA_Init+0x7c>)
 8001642:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001646:	4a14      	ldr	r2, [pc, #80]	; (8001698 <MX_DMA_Init+0x7c>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <MX_DMA_Init+0x7c>)
 8001652:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	200b      	movs	r0, #11
 8001664:	f001 ff27 	bl	80034b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001668:	200b      	movs	r0, #11
 800166a:	f001 ff3e 	bl	80034ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	200c      	movs	r0, #12
 8001674:	f001 ff1f 	bl	80034b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001678:	200c      	movs	r0, #12
 800167a:	f001 ff36 	bl	80034ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	203a      	movs	r0, #58	; 0x3a
 8001684:	f001 ff17 	bl	80034b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001688:	203a      	movs	r0, #58	; 0x3a
 800168a:	f001 ff2e 	bl	80034ea <HAL_NVIC_EnableIRQ>

}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	58024400 	.word	0x58024400

0800169c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08c      	sub	sp, #48	; 0x30
 80016a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016b2:	4b78      	ldr	r3, [pc, #480]	; (8001894 <MX_GPIO_Init+0x1f8>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b8:	4a76      	ldr	r2, [pc, #472]	; (8001894 <MX_GPIO_Init+0x1f8>)
 80016ba:	f043 0320 	orr.w	r3, r3, #32
 80016be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c2:	4b74      	ldr	r3, [pc, #464]	; (8001894 <MX_GPIO_Init+0x1f8>)
 80016c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c8:	f003 0320 	and.w	r3, r3, #32
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d0:	4b70      	ldr	r3, [pc, #448]	; (8001894 <MX_GPIO_Init+0x1f8>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d6:	4a6f      	ldr	r2, [pc, #444]	; (8001894 <MX_GPIO_Init+0x1f8>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e0:	4b6c      	ldr	r3, [pc, #432]	; (8001894 <MX_GPIO_Init+0x1f8>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	4b69      	ldr	r3, [pc, #420]	; (8001894 <MX_GPIO_Init+0x1f8>)
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f4:	4a67      	ldr	r2, [pc, #412]	; (8001894 <MX_GPIO_Init+0x1f8>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016fe:	4b65      	ldr	r3, [pc, #404]	; (8001894 <MX_GPIO_Init+0x1f8>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170c:	4b61      	ldr	r3, [pc, #388]	; (8001894 <MX_GPIO_Init+0x1f8>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001712:	4a60      	ldr	r2, [pc, #384]	; (8001894 <MX_GPIO_Init+0x1f8>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171c:	4b5d      	ldr	r3, [pc, #372]	; (8001894 <MX_GPIO_Init+0x1f8>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800172a:	4b5a      	ldr	r3, [pc, #360]	; (8001894 <MX_GPIO_Init+0x1f8>)
 800172c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001730:	4a58      	ldr	r2, [pc, #352]	; (8001894 <MX_GPIO_Init+0x1f8>)
 8001732:	f043 0310 	orr.w	r3, r3, #16
 8001736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800173a:	4b56      	ldr	r3, [pc, #344]	; (8001894 <MX_GPIO_Init+0x1f8>)
 800173c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001748:	4b52      	ldr	r3, [pc, #328]	; (8001894 <MX_GPIO_Init+0x1f8>)
 800174a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174e:	4a51      	ldr	r2, [pc, #324]	; (8001894 <MX_GPIO_Init+0x1f8>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001758:	4b4e      	ldr	r3, [pc, #312]	; (8001894 <MX_GPIO_Init+0x1f8>)
 800175a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001766:	4b4b      	ldr	r3, [pc, #300]	; (8001894 <MX_GPIO_Init+0x1f8>)
 8001768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176c:	4a49      	ldr	r2, [pc, #292]	; (8001894 <MX_GPIO_Init+0x1f8>)
 800176e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <MX_GPIO_Init+0x1f8>)
 8001778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	f240 7104 	movw	r1, #1796	; 0x704
 800178a:	4843      	ldr	r0, [pc, #268]	; (8001898 <MX_GPIO_Init+0x1fc>)
 800178c:	f004 fb94 	bl	8005eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 8001790:	2200      	movs	r2, #0
 8001792:	f242 0167 	movw	r1, #8295	; 0x2067
 8001796:	4841      	ldr	r0, [pc, #260]	; (800189c <MX_GPIO_Init+0x200>)
 8001798:	f004 fb8e 	bl	8005eb8 <HAL_GPIO_WritePin>
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	2182      	movs	r1, #130	; 0x82
 80017a0:	483f      	ldr	r0, [pc, #252]	; (80018a0 <MX_GPIO_Init+0x204>)
 80017a2:	f004 fb89 	bl	8005eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80017ac:	483d      	ldr	r0, [pc, #244]	; (80018a4 <MX_GPIO_Init+0x208>)
 80017ae:	f004 fb83 	bl	8005eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 80017b2:	2200      	movs	r2, #0
 80017b4:	f44f 5178 	mov.w	r1, #15872	; 0x3e00
 80017b8:	483b      	ldr	r0, [pc, #236]	; (80018a8 <MX_GPIO_Init+0x20c>)
 80017ba:	f004 fb7d 	bl	8005eb8 <HAL_GPIO_WritePin>
                          |rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : cylinder_SetTee_Pin cylinder_RigtArmHoldBallTop_Pin cylinder_HoldBall_Pin cylinder_LeftArmHoldBall_Pin */
  GPIO_InitStruct.Pin = cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin;
 80017be:	f240 7304 	movw	r3, #1796	; 0x704
 80017c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	4619      	mov	r1, r3
 80017d6:	4830      	ldr	r0, [pc, #192]	; (8001898 <MX_GPIO_Init+0x1fc>)
 80017d8:	f004 f9be 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 cylinder_RigtArmTrans_Pin cylinder_PassBall_Pin cylinder_LeftArmTrans_Pin 
                           cylinder_RigtArmHoldBallBot_Pin cylinder_LiftBall_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 80017dc:	f242 0367 	movw	r3, #8295	; 0x2067
 80017e0:	61fb      	str	r3, [r7, #28]
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	4619      	mov	r1, r3
 80017f4:	4829      	ldr	r0, [pc, #164]	; (800189c <MX_GPIO_Init+0x200>)
 80017f6:	f004 f9af 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fe:	2301      	movs	r3, #1
 8001800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 800180a:	f107 031c 	add.w	r3, r7, #28
 800180e:	4619      	mov	r1, r3
 8001810:	4823      	ldr	r0, [pc, #140]	; (80018a0 <MX_GPIO_Init+0x204>)
 8001812:	f004 f9a1 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : legDir_Pin */
  GPIO_InitStruct.Pin = legDir_Pin;
 8001816:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800181a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181c:	2301      	movs	r3, #1
 800181e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legDir_GPIO_Port, &GPIO_InitStruct);
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	4619      	mov	r1, r3
 800182e:	481d      	ldr	r0, [pc, #116]	; (80018a4 <MX_GPIO_Init+0x208>)
 8001830:	f004 f992 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 8001834:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	4619      	mov	r1, r3
 800184c:	4815      	ldr	r0, [pc, #84]	; (80018a4 <MX_GPIO_Init+0x208>)
 800184e:	f004 f983 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8001852:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 8001856:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	2301      	movs	r3, #1
 800185a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	4619      	mov	r1, r3
 800186a:	480f      	ldr	r0, [pc, #60]	; (80018a8 <MX_GPIO_Init+0x20c>)
 800186c:	f004 f974 	bl	8005b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 8001870:	2302      	movs	r3, #2
 8001872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	2301      	movs	r3, #1
 8001876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	4619      	mov	r1, r3
 8001886:	4806      	ldr	r0, [pc, #24]	; (80018a0 <MX_GPIO_Init+0x204>)
 8001888:	f004 f966 	bl	8005b58 <HAL_GPIO_Init>

}
 800188c:	bf00      	nop
 800188e:	3730      	adds	r7, #48	; 0x30
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	58024400 	.word	0x58024400
 8001898:	58020000 	.word	0x58020000
 800189c:	58020400 	.word	0x58020400
 80018a0:	58021000 	.word	0x58021000
 80018a4:	58020c00 	.word	0x58020c00
 80018a8:	58021800 	.word	0x58021800

080018ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_MspInit+0x30>)
 80018c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018c8:	4a08      	ldr	r2, [pc, #32]	; (80018ec <HAL_MspInit+0x30>)
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_MspInit+0x30>)
 80018d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	58024400 	.word	0x58024400

080018f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08c      	sub	sp, #48	; 0x30
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a6a      	ldr	r2, [pc, #424]	; (8001ab8 <HAL_ADC_MspInit+0x1c8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d175      	bne.n	80019fe <HAL_ADC_MspInit+0x10e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001912:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <HAL_ADC_MspInit+0x1cc>)
 8001914:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001918:	4a68      	ldr	r2, [pc, #416]	; (8001abc <HAL_ADC_MspInit+0x1cc>)
 800191a:	f043 0320 	orr.w	r3, r3, #32
 800191e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001922:	4b66      	ldr	r3, [pc, #408]	; (8001abc <HAL_ADC_MspInit+0x1cc>)
 8001924:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001930:	4b62      	ldr	r3, [pc, #392]	; (8001abc <HAL_ADC_MspInit+0x1cc>)
 8001932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001936:	4a61      	ldr	r2, [pc, #388]	; (8001abc <HAL_ADC_MspInit+0x1cc>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001940:	4b5e      	ldr	r3, [pc, #376]	; (8001abc <HAL_ADC_MspInit+0x1cc>)
 8001942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	4b5b      	ldr	r3, [pc, #364]	; (8001abc <HAL_ADC_MspInit+0x1cc>)
 8001950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001954:	4a59      	ldr	r2, [pc, #356]	; (8001abc <HAL_ADC_MspInit+0x1cc>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800195e:	4b57      	ldr	r3, [pc, #348]	; (8001abc <HAL_ADC_MspInit+0x1cc>)
 8001960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_INP10
    PA3     ------> ADC1_INP15 
    */
    GPIO_InitStruct.Pin = RollRigt_Pin;
 800196c:	2301      	movs	r3, #1
 800196e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001970:	2303      	movs	r3, #3
 8001972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RollRigt_GPIO_Port, &GPIO_InitStruct);
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	4850      	ldr	r0, [pc, #320]	; (8001ac0 <HAL_ADC_MspInit+0x1d0>)
 8001980:	f004 f8ea 	bl	8005b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RollLeft_Pin;
 8001984:	2308      	movs	r3, #8
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001988:	2303      	movs	r3, #3
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RollLeft_GPIO_Port, &GPIO_InitStruct);
 8001990:	f107 031c 	add.w	r3, r7, #28
 8001994:	4619      	mov	r1, r3
 8001996:	484b      	ldr	r0, [pc, #300]	; (8001ac4 <HAL_ADC_MspInit+0x1d4>)
 8001998:	f004 f8de 	bl	8005b58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800199c:	4b4a      	ldr	r3, [pc, #296]	; (8001ac8 <HAL_ADC_MspInit+0x1d8>)
 800199e:	4a4b      	ldr	r2, [pc, #300]	; (8001acc <HAL_ADC_MspInit+0x1dc>)
 80019a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80019a2:	4b49      	ldr	r3, [pc, #292]	; (8001ac8 <HAL_ADC_MspInit+0x1d8>)
 80019a4:	2209      	movs	r2, #9
 80019a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019a8:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <HAL_ADC_MspInit+0x1d8>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ae:	4b46      	ldr	r3, [pc, #280]	; (8001ac8 <HAL_ADC_MspInit+0x1d8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019b4:	4b44      	ldr	r3, [pc, #272]	; (8001ac8 <HAL_ADC_MspInit+0x1d8>)
 80019b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019bc:	4b42      	ldr	r3, [pc, #264]	; (8001ac8 <HAL_ADC_MspInit+0x1d8>)
 80019be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019c4:	4b40      	ldr	r3, [pc, #256]	; (8001ac8 <HAL_ADC_MspInit+0x1d8>)
 80019c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ca:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019cc:	4b3e      	ldr	r3, [pc, #248]	; (8001ac8 <HAL_ADC_MspInit+0x1d8>)
 80019ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019d2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019d4:	4b3c      	ldr	r3, [pc, #240]	; (8001ac8 <HAL_ADC_MspInit+0x1d8>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019da:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <HAL_ADC_MspInit+0x1d8>)
 80019dc:	2200      	movs	r2, #0
 80019de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019e0:	4839      	ldr	r0, [pc, #228]	; (8001ac8 <HAL_ADC_MspInit+0x1d8>)
 80019e2:	f001 fd9d 	bl	8003520 <HAL_DMA_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 80019ec:	f7ff ff5e 	bl	80018ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a35      	ldr	r2, [pc, #212]	; (8001ac8 <HAL_ADC_MspInit+0x1d8>)
 80019f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80019f6:	4a34      	ldr	r2, [pc, #208]	; (8001ac8 <HAL_ADC_MspInit+0x1d8>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80019fc:	e058      	b.n	8001ab0 <HAL_ADC_MspInit+0x1c0>
  else if(hadc->Instance==ADC3)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a33      	ldr	r2, [pc, #204]	; (8001ad0 <HAL_ADC_MspInit+0x1e0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d153      	bne.n	8001ab0 <HAL_ADC_MspInit+0x1c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a08:	4b2c      	ldr	r3, [pc, #176]	; (8001abc <HAL_ADC_MspInit+0x1cc>)
 8001a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0e:	4a2b      	ldr	r2, [pc, #172]	; (8001abc <HAL_ADC_MspInit+0x1cc>)
 8001a10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a18:	4b28      	ldr	r3, [pc, #160]	; (8001abc <HAL_ADC_MspInit+0x1cc>)
 8001a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a26:	4b25      	ldr	r3, [pc, #148]	; (8001abc <HAL_ADC_MspInit+0x1cc>)
 8001a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2c:	4a23      	ldr	r2, [pc, #140]	; (8001abc <HAL_ADC_MspInit+0x1cc>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a36:	4b21      	ldr	r3, [pc, #132]	; (8001abc <HAL_ADC_MspInit+0x1cc>)
 8001a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001a44:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001a48:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001a4c:	f000 fc16 	bl	800227c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001a50:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <HAL_ADC_MspInit+0x1e4>)
 8001a52:	4a21      	ldr	r2, [pc, #132]	; (8001ad8 <HAL_ADC_MspInit+0x1e8>)
 8001a54:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001a56:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <HAL_ADC_MspInit+0x1e4>)
 8001a58:	2273      	movs	r2, #115	; 0x73
 8001a5a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <HAL_ADC_MspInit+0x1e4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <HAL_ADC_MspInit+0x1e4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001a68:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <HAL_ADC_MspInit+0x1e4>)
 8001a6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a6e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a70:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <HAL_ADC_MspInit+0x1e4>)
 8001a72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a76:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a78:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <HAL_ADC_MspInit+0x1e4>)
 8001a7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a7e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <HAL_ADC_MspInit+0x1e4>)
 8001a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a86:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_ADC_MspInit+0x1e4>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_ADC_MspInit+0x1e4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001a94:	480f      	ldr	r0, [pc, #60]	; (8001ad4 <HAL_ADC_MspInit+0x1e4>)
 8001a96:	f001 fd43 	bl	8003520 <HAL_DMA_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_ADC_MspInit+0x1b4>
      Error_Handler();
 8001aa0:	f7ff ff04 	bl	80018ac <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <HAL_ADC_MspInit+0x1e4>)
 8001aa8:	64da      	str	r2, [r3, #76]	; 0x4c
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <HAL_ADC_MspInit+0x1e4>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001ab0:	bf00      	nop
 8001ab2:	3730      	adds	r7, #48	; 0x30
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40022000 	.word	0x40022000
 8001abc:	58024400 	.word	0x58024400
 8001ac0:	58020800 	.word	0x58020800
 8001ac4:	58020000 	.word	0x58020000
 8001ac8:	24000514 	.word	0x24000514
 8001acc:	40020010 	.word	0x40020010
 8001ad0:	58026000 	.word	0x58026000
 8001ad4:	240002d0 	.word	0x240002d0
 8001ad8:	40020028 	.word	0x40020028

08001adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a2b      	ldr	r2, [pc, #172]	; (8001b98 <HAL_TIM_Base_MspInit+0xbc>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d117      	bne.n	8001b1e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001aee:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <HAL_TIM_Base_MspInit+0xc0>)
 8001af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001af4:	4a29      	ldr	r2, [pc, #164]	; (8001b9c <HAL_TIM_Base_MspInit+0xc0>)
 8001af6:	f043 0320 	orr.w	r3, r3, #32
 8001afa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001afe:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <HAL_TIM_Base_MspInit+0xc0>)
 8001b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b04:	f003 0320 	and.w	r3, r3, #32
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2100      	movs	r1, #0
 8001b10:	2037      	movs	r0, #55	; 0x37
 8001b12:	f001 fcd0 	bl	80034b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b16:	2037      	movs	r0, #55	; 0x37
 8001b18:	f001 fce7 	bl	80034ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001b1c:	e038      	b.n	8001b90 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM12)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a1f      	ldr	r2, [pc, #124]	; (8001ba0 <HAL_TIM_Base_MspInit+0xc4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d117      	bne.n	8001b58 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001b28:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <HAL_TIM_Base_MspInit+0xc0>)
 8001b2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b2e:	4a1b      	ldr	r2, [pc, #108]	; (8001b9c <HAL_TIM_Base_MspInit+0xc0>)
 8001b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b34:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_TIM_Base_MspInit+0xc0>)
 8001b3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	202b      	movs	r0, #43	; 0x2b
 8001b4c:	f001 fcb3 	bl	80034b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001b50:	202b      	movs	r0, #43	; 0x2b
 8001b52:	f001 fcca 	bl	80034ea <HAL_NVIC_EnableIRQ>
}
 8001b56:	e01b      	b.n	8001b90 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM15)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <HAL_TIM_Base_MspInit+0xc8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d116      	bne.n	8001b90 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_TIM_Base_MspInit+0xc0>)
 8001b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b68:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <HAL_TIM_Base_MspInit+0xc0>)
 8001b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_TIM_Base_MspInit+0xc0>)
 8001b74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2100      	movs	r1, #0
 8001b84:	2074      	movs	r0, #116	; 0x74
 8001b86:	f001 fc96 	bl	80034b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001b8a:	2074      	movs	r0, #116	; 0x74
 8001b8c:	f001 fcad 	bl	80034ea <HAL_NVIC_EnableIRQ>
}
 8001b90:	bf00      	nop
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40001400 	.word	0x40001400
 8001b9c:	58024400 	.word	0x58024400
 8001ba0:	40001800 	.word	0x40001800
 8001ba4:	40014000 	.word	0x40014000

08001ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b090      	sub	sp, #64	; 0x40
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a8c      	ldr	r2, [pc, #560]	; (8001df8 <HAL_UART_MspInit+0x250>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d136      	bne.n	8001c38 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001bca:	4b8c      	ldr	r3, [pc, #560]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bd0:	4a8a      	ldr	r2, [pc, #552]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001bd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001bd6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bda:	4b88      	ldr	r3, [pc, #544]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001be0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001be8:	4b84      	ldr	r3, [pc, #528]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bee:	4a83      	ldr	r2, [pc, #524]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001bf0:	f043 0320 	orr.w	r3, r3, #32
 8001bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bf8:	4b80      	ldr	r3, [pc, #512]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 8001c06:	23c0      	movs	r3, #192	; 0xc0
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001c16:	2307      	movs	r3, #7
 8001c18:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4877      	ldr	r0, [pc, #476]	; (8001e00 <HAL_UART_MspInit+0x258>)
 8001c22:	f003 ff99 	bl	8005b58 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2104      	movs	r1, #4
 8001c2a:	2052      	movs	r0, #82	; 0x52
 8001c2c:	f001 fc43 	bl	80034b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001c30:	2052      	movs	r0, #82	; 0x52
 8001c32:	f001 fc5a 	bl	80034ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001c36:	e0da      	b.n	8001dee <HAL_UART_MspInit+0x246>
  else if(huart->Instance==USART1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a71      	ldr	r2, [pc, #452]	; (8001e04 <HAL_UART_MspInit+0x25c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d137      	bne.n	8001cb2 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c42:	4b6e      	ldr	r3, [pc, #440]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c48:	4a6c      	ldr	r2, [pc, #432]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001c4a:	f043 0310 	orr.w	r3, r3, #16
 8001c4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c52:	4b6a      	ldr	r3, [pc, #424]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	623b      	str	r3, [r7, #32]
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c60:	4b66      	ldr	r3, [pc, #408]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c66:	4a65      	ldr	r2, [pc, #404]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c70:	4b62      	ldr	r3, [pc, #392]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 8001c7e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001c90:	2304      	movs	r3, #4
 8001c92:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c98:	4619      	mov	r1, r3
 8001c9a:	485b      	ldr	r0, [pc, #364]	; (8001e08 <HAL_UART_MspInit+0x260>)
 8001c9c:	f003 ff5c 	bl	8005b58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	2025      	movs	r0, #37	; 0x25
 8001ca6:	f001 fc06 	bl	80034b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001caa:	2025      	movs	r0, #37	; 0x25
 8001cac:	f001 fc1d 	bl	80034ea <HAL_NVIC_EnableIRQ>
}
 8001cb0:	e09d      	b.n	8001dee <HAL_UART_MspInit+0x246>
  else if(huart->Instance==USART3)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a55      	ldr	r2, [pc, #340]	; (8001e0c <HAL_UART_MspInit+0x264>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d15d      	bne.n	8001d78 <HAL_UART_MspInit+0x1d0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cbc:	4b4f      	ldr	r3, [pc, #316]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001cbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cc2:	4a4e      	ldr	r2, [pc, #312]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ccc:	4b4b      	ldr	r3, [pc, #300]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001cce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	4b48      	ldr	r3, [pc, #288]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce0:	4a46      	ldr	r2, [pc, #280]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001ce2:	f043 0302 	orr.w	r3, r3, #2
 8001ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cea:	4b44      	ldr	r3, [pc, #272]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 8001cf8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d12:	4619      	mov	r1, r3
 8001d14:	483c      	ldr	r0, [pc, #240]	; (8001e08 <HAL_UART_MspInit+0x260>)
 8001d16:	f003 ff1f 	bl	8005b58 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <HAL_UART_MspInit+0x268>)
 8001d1c:	4a3d      	ldr	r2, [pc, #244]	; (8001e14 <HAL_UART_MspInit+0x26c>)
 8001d1e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001d20:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <HAL_UART_MspInit+0x268>)
 8001d22:	222d      	movs	r2, #45	; 0x2d
 8001d24:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d26:	4b3a      	ldr	r3, [pc, #232]	; (8001e10 <HAL_UART_MspInit+0x268>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d2c:	4b38      	ldr	r3, [pc, #224]	; (8001e10 <HAL_UART_MspInit+0x268>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d32:	4b37      	ldr	r3, [pc, #220]	; (8001e10 <HAL_UART_MspInit+0x268>)
 8001d34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d38:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d3a:	4b35      	ldr	r3, [pc, #212]	; (8001e10 <HAL_UART_MspInit+0x268>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d40:	4b33      	ldr	r3, [pc, #204]	; (8001e10 <HAL_UART_MspInit+0x268>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001d46:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <HAL_UART_MspInit+0x268>)
 8001d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d4c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d4e:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <HAL_UART_MspInit+0x268>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d54:	4b2e      	ldr	r3, [pc, #184]	; (8001e10 <HAL_UART_MspInit+0x268>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001d5a:	482d      	ldr	r0, [pc, #180]	; (8001e10 <HAL_UART_MspInit+0x268>)
 8001d5c:	f001 fbe0 	bl	8003520 <HAL_DMA_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 8001d66:	f7ff fda1 	bl	80018ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a28      	ldr	r2, [pc, #160]	; (8001e10 <HAL_UART_MspInit+0x268>)
 8001d6e:	679a      	str	r2, [r3, #120]	; 0x78
 8001d70:	4a27      	ldr	r2, [pc, #156]	; (8001e10 <HAL_UART_MspInit+0x268>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001d76:	e03a      	b.n	8001dee <HAL_UART_MspInit+0x246>
  else if(huart->Instance==USART6)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a26      	ldr	r2, [pc, #152]	; (8001e18 <HAL_UART_MspInit+0x270>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d135      	bne.n	8001dee <HAL_UART_MspInit+0x246>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d82:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d88:	4a1c      	ldr	r2, [pc, #112]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001d8a:	f043 0320 	orr.w	r3, r3, #32
 8001d8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d92:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d98:	f003 0320 	and.w	r3, r3, #32
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da6:	4a15      	ldr	r2, [pc, #84]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_UART_MspInit+0x254>)
 8001db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 8001dbe:	23c0      	movs	r3, #192	; 0xc0
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001dce:	2307      	movs	r3, #7
 8001dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4810      	ldr	r0, [pc, #64]	; (8001e1c <HAL_UART_MspInit+0x274>)
 8001dda:	f003 febd 	bl	8005b58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2102      	movs	r1, #2
 8001de2:	2047      	movs	r0, #71	; 0x47
 8001de4:	f001 fb67 	bl	80034b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001de8:	2047      	movs	r0, #71	; 0x47
 8001dea:	f001 fb7e 	bl	80034ea <HAL_NVIC_EnableIRQ>
}
 8001dee:	bf00      	nop
 8001df0:	3740      	adds	r7, #64	; 0x40
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40007800 	.word	0x40007800
 8001dfc:	58024400 	.word	0x58024400
 8001e00:	58021400 	.word	0x58021400
 8001e04:	40011000 	.word	0x40011000
 8001e08:	58020400 	.word	0x58020400
 8001e0c:	40004800 	.word	0x40004800
 8001e10:	2400012c 	.word	0x2400012c
 8001e14:	40020440 	.word	0x40020440
 8001e18:	40011400 	.word	0x40011400
 8001e1c:	58020800 	.word	0x58020800

08001e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e32:	e7fe      	b.n	8001e32 <HardFault_Handler+0x4>

08001e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <MemManage_Handler+0x4>

08001e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <BusFault_Handler+0x4>

08001e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <UsageFault_Handler+0x4>

08001e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e74:	f000 f9b4 	bl	80021e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <DMA1_Stream0_IRQHandler+0x10>)
 8001e82:	f002 fb57 	bl	8004534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	24000514 	.word	0x24000514

08001e90 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <DMA1_Stream1_IRQHandler+0x10>)
 8001e96:	f002 fb4d 	bl	8004534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	240002d0 	.word	0x240002d0

08001ea4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ea8:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <USART1_IRQHandler+0x10>)
 8001eaa:	f007 fd03 	bl	80098b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	24000470 	.word	0x24000470

08001eb8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001ebc:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001ebe:	f006 fecf 	bl	8008c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	240006c0 	.word	0x240006c0

08001ecc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <TIM7_IRQHandler+0x10>)
 8001ed2:	f006 fec5 	bl	8008c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	24000708 	.word	0x24000708

08001ee0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 8001ee4:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <DMA2_Stream2_IRQHandler+0xa8>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d135      	bne.n	8001f58 <DMA2_Stream2_IRQHandler+0x78>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <DMA2_Stream2_IRQHandler+0xac>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	b2d1      	uxtb	r1, r2
 8001ef4:	4a25      	ldr	r2, [pc, #148]	; (8001f8c <DMA2_Stream2_IRQHandler+0xac>)
 8001ef6:	7011      	strb	r1, [r2, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <DMA2_Stream2_IRQHandler+0xb0>)
 8001efc:	7819      	ldrb	r1, [r3, #0]
 8001efe:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <DMA2_Stream2_IRQHandler+0xb4>)
 8001f00:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 8001f02:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <DMA2_Stream2_IRQHandler+0xac>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b05      	cmp	r3, #5
 8001f08:	d926      	bls.n	8001f58 <DMA2_Stream2_IRQHandler+0x78>
		{
			PS2DataIndex = 0;
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <DMA2_Stream2_IRQHandler+0xac>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 8001f10:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <DMA2_Stream2_IRQHandler+0xa8>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 8001f16:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <DMA2_Stream2_IRQHandler+0xb4>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	b21a      	sxth	r2, r3
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <DMA2_Stream2_IRQHandler+0xb4>)
 8001f20:	785b      	ldrb	r3, [r3, #1]
 8001f22:	b21b      	sxth	r3, r3
 8001f24:	4313      	orrs	r3, r2
 8001f26:	b21a      	sxth	r2, r3
 8001f28:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <DMA2_Stream2_IRQHandler+0xb8>)
 8001f2a:	801a      	strh	r2, [r3, #0]
			PS2JoyRigt = (PS2Data[2]<<8) | PS2Data[3];
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <DMA2_Stream2_IRQHandler+0xb4>)
 8001f2e:	789b      	ldrb	r3, [r3, #2]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	b21a      	sxth	r2, r3
 8001f34:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <DMA2_Stream2_IRQHandler+0xb4>)
 8001f36:	78db      	ldrb	r3, [r3, #3]
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	b21a      	sxth	r2, r3
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <DMA2_Stream2_IRQHandler+0xbc>)
 8001f40:	801a      	strh	r2, [r3, #0]
			PS2JoyLeft = (PS2Data[4]<<8) | PS2Data[5];
 8001f42:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <DMA2_Stream2_IRQHandler+0xb4>)
 8001f44:	791b      	ldrb	r3, [r3, #4]
 8001f46:	021b      	lsls	r3, r3, #8
 8001f48:	b21a      	sxth	r2, r3
 8001f4a:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <DMA2_Stream2_IRQHandler+0xb4>)
 8001f4c:	795b      	ldrb	r3, [r3, #5]
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	4313      	orrs	r3, r2
 8001f52:	b21a      	sxth	r2, r3
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <DMA2_Stream2_IRQHandler+0xc0>)
 8001f56:	801a      	strh	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 8001f58:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <DMA2_Stream2_IRQHandler+0xb0>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2baa      	cmp	r3, #170	; 0xaa
 8001f5e:	d106      	bne.n	8001f6e <DMA2_Stream2_IRQHandler+0x8e>
		PS2CheckbyteCount++;
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <DMA2_Stream2_IRQHandler+0xa8>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	3301      	adds	r3, #1
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <DMA2_Stream2_IRQHandler+0xa8>)
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	e006      	b.n	8001f7c <DMA2_Stream2_IRQHandler+0x9c>
	else
		if(PS2CheckbyteCount != 4)
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <DMA2_Stream2_IRQHandler+0xa8>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d002      	beq.n	8001f7c <DMA2_Stream2_IRQHandler+0x9c>
			PS2CheckbyteCount = 0;
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <DMA2_Stream2_IRQHandler+0xa8>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001f7c:	4809      	ldr	r0, [pc, #36]	; (8001fa4 <DMA2_Stream2_IRQHandler+0xc4>)
 8001f7e:	f002 fad9 	bl	8004534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2400004c 	.word	0x2400004c
 8001f8c:	240003e8 	.word	0x240003e8
 8001f90:	24000674 	.word	0x24000674
 8001f94:	240002a0 	.word	0x240002a0
 8001f98:	2400050c 	.word	0x2400050c
 8001f9c:	24000510 	.word	0x24000510
 8001fa0:	24000690 	.word	0x24000690
 8001fa4:	2400012c 	.word	0x2400012c

08001fa8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <USART6_IRQHandler+0x10>)
 8001fae:	f007 fc81 	bl	80098b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	240005e8 	.word	0x240005e8

08001fbc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <UART7_IRQHandler+0x10>)
 8001fc2:	f007 fc77 	bl	80098b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	24000088 	.word	0x24000088

08001fd0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <TIM15_IRQHandler+0x10>)
 8001fd6:	f006 fe43 	bl	8008c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	24000248 	.word	0x24000248

08001fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fe8:	4b29      	ldr	r3, [pc, #164]	; (8002090 <SystemInit+0xac>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	4a28      	ldr	r2, [pc, #160]	; (8002090 <SystemInit+0xac>)
 8001ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ff8:	4b26      	ldr	r3, [pc, #152]	; (8002094 <SystemInit+0xb0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a25      	ldr	r2, [pc, #148]	; (8002094 <SystemInit+0xb0>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002004:	4b23      	ldr	r3, [pc, #140]	; (8002094 <SystemInit+0xb0>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800200a:	4b22      	ldr	r3, [pc, #136]	; (8002094 <SystemInit+0xb0>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4921      	ldr	r1, [pc, #132]	; (8002094 <SystemInit+0xb0>)
 8002010:	4b21      	ldr	r3, [pc, #132]	; (8002098 <SystemInit+0xb4>)
 8002012:	4013      	ands	r3, r2
 8002014:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002016:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <SystemInit+0xb0>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <SystemInit+0xb0>)
 800201e:	2200      	movs	r2, #0
 8002020:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002022:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <SystemInit+0xb0>)
 8002024:	2200      	movs	r2, #0
 8002026:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002028:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <SystemInit+0xb0>)
 800202a:	2200      	movs	r2, #0
 800202c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800202e:	4b19      	ldr	r3, [pc, #100]	; (8002094 <SystemInit+0xb0>)
 8002030:	2200      	movs	r2, #0
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <SystemInit+0xb0>)
 8002036:	2200      	movs	r2, #0
 8002038:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800203a:	4b16      	ldr	r3, [pc, #88]	; (8002094 <SystemInit+0xb0>)
 800203c:	2200      	movs	r2, #0
 800203e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <SystemInit+0xb0>)
 8002042:	2200      	movs	r2, #0
 8002044:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <SystemInit+0xb0>)
 8002048:	2200      	movs	r2, #0
 800204a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <SystemInit+0xb0>)
 800204e:	2200      	movs	r2, #0
 8002050:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <SystemInit+0xb0>)
 8002054:	2200      	movs	r2, #0
 8002056:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002058:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <SystemInit+0xb0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <SystemInit+0xb0>)
 800205e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002062:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <SystemInit+0xb0>)
 8002066:	2200      	movs	r2, #0
 8002068:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <SystemInit+0xb8>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <SystemInit+0xbc>)
 8002070:	4013      	ands	r3, r2
 8002072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002076:	d202      	bcs.n	800207e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <SystemInit+0xc0>)
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800207e:	4b04      	ldr	r3, [pc, #16]	; (8002090 <SystemInit+0xac>)
 8002080:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002084:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00
 8002094:	58024400 	.word	0x58024400
 8002098:	eaf6ed7f 	.word	0xeaf6ed7f
 800209c:	5c001000 	.word	0x5c001000
 80020a0:	ffff0000 	.word	0xffff0000
 80020a4:	51008108 	.word	0x51008108

080020a8 <Reset_Handler>:
 80020a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e0 <LoopFillZerobss+0x14>
 80020ac:	2100      	movs	r1, #0
 80020ae:	e003      	b.n	80020b8 <LoopCopyDataInit>

080020b0 <CopyDataInit>:
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <LoopFillZerobss+0x18>)
 80020b2:	585b      	ldr	r3, [r3, r1]
 80020b4:	5043      	str	r3, [r0, r1]
 80020b6:	3104      	adds	r1, #4

080020b8 <LoopCopyDataInit>:
 80020b8:	480b      	ldr	r0, [pc, #44]	; (80020e8 <LoopFillZerobss+0x1c>)
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <LoopFillZerobss+0x20>)
 80020bc:	1842      	adds	r2, r0, r1
 80020be:	429a      	cmp	r2, r3
 80020c0:	d3f6      	bcc.n	80020b0 <CopyDataInit>
 80020c2:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <LoopFillZerobss+0x24>)
 80020c4:	e002      	b.n	80020cc <LoopFillZerobss>

080020c6 <FillZerobss>:
 80020c6:	2300      	movs	r3, #0
 80020c8:	f842 3b04 	str.w	r3, [r2], #4

080020cc <LoopFillZerobss>:
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <LoopFillZerobss+0x28>)
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d3f9      	bcc.n	80020c6 <FillZerobss>
 80020d2:	f7ff ff87 	bl	8001fe4 <SystemInit>
 80020d6:	f00a fd65 	bl	800cba4 <__libc_init_array>
 80020da:	f7fe fe91 	bl	8000e00 <main>
 80020de:	4770      	bx	lr
 80020e0:	24080000 	.word	0x24080000
 80020e4:	0800cc4c 	.word	0x0800cc4c
 80020e8:	24000000 	.word	0x24000000
 80020ec:	24000030 	.word	0x24000030
 80020f0:	24000030 	.word	0x24000030
 80020f4:	24000764 	.word	0x24000764

080020f8 <ADC3_IRQHandler>:
 80020f8:	e7fe      	b.n	80020f8 <ADC3_IRQHandler>
	...

080020fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002102:	2003      	movs	r0, #3
 8002104:	f001 f9cc 	bl	80034a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002108:	f004 fcd2 	bl	8006ab0 <HAL_RCC_GetSysClockFreq>
 800210c:	4601      	mov	r1, r0
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_Init+0x68>)
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	0a1b      	lsrs	r3, r3, #8
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	4a13      	ldr	r2, [pc, #76]	; (8002168 <HAL_Init+0x6c>)
 800211a:	5cd3      	ldrb	r3, [r2, r3]
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	fa21 f303 	lsr.w	r3, r1, r3
 8002124:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002126:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <HAL_Init+0x68>)
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <HAL_Init+0x6c>)
 8002130:	5cd3      	ldrb	r3, [r2, r3]
 8002132:	f003 031f 	and.w	r3, r3, #31
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
 800213c:	4a0b      	ldr	r2, [pc, #44]	; (800216c <HAL_Init+0x70>)
 800213e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002140:	4a0b      	ldr	r2, [pc, #44]	; (8002170 <HAL_Init+0x74>)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002146:	2000      	movs	r0, #0
 8002148:	f000 f814 	bl	8002174 <HAL_InitTick>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e002      	b.n	800215c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002156:	f7ff fbb1 	bl	80018bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	58024400 	.word	0x58024400
 8002168:	0800cc24 	.word	0x0800cc24
 800216c:	24000024 	.word	0x24000024
 8002170:	24000020 	.word	0x24000020

08002174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800217c:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <HAL_InitTick+0x60>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e021      	b.n	80021cc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <HAL_InitTick+0x64>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_InitTick+0x60>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002196:	fbb3 f3f1 	udiv	r3, r3, r1
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f001 f9b1 	bl	8003506 <HAL_SYSTICK_Config>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00e      	b.n	80021cc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b0f      	cmp	r3, #15
 80021b2:	d80a      	bhi.n	80021ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b4:	2200      	movs	r2, #0
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	f001 f97b 	bl	80034b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c0:	4a06      	ldr	r2, [pc, #24]	; (80021dc <HAL_InitTick+0x68>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e000      	b.n	80021cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	2400002c 	.word	0x2400002c
 80021d8:	24000020 	.word	0x24000020
 80021dc:	24000028 	.word	0x24000028

080021e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_IncTick+0x20>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_IncTick+0x24>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <HAL_IncTick+0x24>)
 80021f2:	6013      	str	r3, [r2, #0]
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	2400002c 	.word	0x2400002c
 8002204:	24000760 	.word	0x24000760

08002208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return uwTick;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_GetTick+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	24000760 	.word	0x24000760

08002220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002228:	f7ff ffee 	bl	8002208 <HAL_GetTick>
 800222c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002238:	d005      	beq.n	8002246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800223a:	4b09      	ldr	r3, [pc, #36]	; (8002260 <HAL_Delay+0x40>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4413      	add	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002246:	bf00      	nop
 8002248:	f7ff ffde 	bl	8002208 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	429a      	cmp	r2, r3
 8002256:	d8f7      	bhi.n	8002248 <HAL_Delay+0x28>
  {
  }
}
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	2400002c 	.word	0x2400002c

08002264 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002268:	4b03      	ldr	r3, [pc, #12]	; (8002278 <HAL_GetREVID+0x14>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	0c1b      	lsrs	r3, r3, #16
}
 800226e:	4618      	mov	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	5c001000 	.word	0x5c001000

0800227c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002286:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	43db      	mvns	r3, r3
 800228e:	401a      	ands	r2, r3
 8002290:	4904      	ldr	r1, [pc, #16]	; (80022a4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	58000400 	.word	0x58000400

080022a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	609a      	str	r2, [r3, #8]
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	609a      	str	r2, [r3, #8]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002310:	b490      	push	{r4, r7}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	3360      	adds	r3, #96	; 0x60
 8002322:	461a      	mov	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	430b      	orrs	r3, r1
 800233c:	4313      	orrs	r3, r2
 800233e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002340:	bf00      	nop
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bc90      	pop	{r4, r7}
 8002348:	4770      	bx	lr

0800234a <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	431a      	orrs	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	611a      	str	r2, [r3, #16]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800237c:	b490      	push	{r4, r7}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3360      	adds	r3, #96	; 0x60
 800238c:	461a      	mov	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4313      	orrs	r3, r2
 80023a0:	6023      	str	r3, [r4, #0]
}
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc90      	pop	{r4, r7}
 80023aa:	4770      	bx	lr

080023ac <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023ac:	b490      	push	{r4, r7}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3330      	adds	r3, #48	; 0x30
 80023bc:	461a      	mov	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	f003 030c 	and.w	r3, r3, #12
 80023c8:	4413      	add	r3, r2
 80023ca:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80023cc:	6822      	ldr	r2, [r4, #0]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	211f      	movs	r1, #31
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	401a      	ands	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	0e9b      	lsrs	r3, r3, #26
 80023e2:	f003 011f 	and.w	r1, r3, #31
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	fa01 f303 	lsl.w	r3, r1, r3
 80023f0:	4313      	orrs	r3, r2
 80023f2:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc90      	pop	{r4, r7}
 80023fc:	4770      	bx	lr

080023fe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023fe:	b490      	push	{r4, r7}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	3314      	adds	r3, #20
 800240e:	461a      	mov	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	0e5b      	lsrs	r3, r3, #25
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	4413      	add	r3, r2
 800241c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800241e:	6822      	ldr	r2, [r4, #0]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	0d1b      	lsrs	r3, r3, #20
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2107      	movs	r1, #7
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	401a      	ands	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	0d1b      	lsrs	r3, r3, #20
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	4313      	orrs	r3, r2
 8002442:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002444:	bf00      	nop
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bc90      	pop	{r4, r7}
 800244c:	4770      	bx	lr
	...

08002450 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002468:	43db      	mvns	r3, r3
 800246a:	401a      	ands	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f003 0318 	and.w	r3, r3, #24
 8002472:	4908      	ldr	r1, [pc, #32]	; (8002494 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002474:	40d9      	lsrs	r1, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	400b      	ands	r3, r1
 800247a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800247e:	431a      	orrs	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	000fffff 	.word	0x000fffff

08002498 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6093      	str	r3, [r2, #8]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	5fffffc0 	.word	0x5fffffc0

080024bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024d0:	d101      	bne.n	80024d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <LL_ADC_EnableInternalRegulator+0x24>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	6fffffc0 	.word	0x6fffffc0

0800250c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002520:	d101      	bne.n	8002526 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <LL_ADC_IsEnabled+0x18>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <LL_ADC_IsEnabled+0x1a>
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b04      	cmp	r3, #4
 800256c:	d101      	bne.n	8002572 <LL_ADC_REG_IsConversionOngoing+0x18>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b08      	cmp	r3, #8
 8002592:	d101      	bne.n	8002598 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b089      	sub	sp, #36	; 0x24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e18e      	b.n	80028e0 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d109      	bne.n	80025e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff f98d 	bl	80018f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff67 	bl	80024bc <LL_ADC_IsDeepPowerDownEnabled>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff4d 	bl	8002498 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff ff82 	bl	800250c <LL_ADC_IsInternalRegulatorEnabled>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d113      	bne.n	8002636 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff ff66 	bl	80024e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002618:	4b9a      	ldr	r3, [pc, #616]	; (8002884 <HAL_ADC_Init+0x2dc>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	099b      	lsrs	r3, r3, #6
 800261e:	4a9a      	ldr	r2, [pc, #616]	; (8002888 <HAL_ADC_Init+0x2e0>)
 8002620:	fba2 2303 	umull	r2, r3, r2, r3
 8002624:	099b      	lsrs	r3, r3, #6
 8002626:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002628:	e002      	b.n	8002630 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	3b01      	subs	r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f9      	bne.n	800262a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ff66 	bl	800250c <LL_ADC_IsInternalRegulatorEnabled>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10d      	bne.n	8002662 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264a:	f043 0210 	orr.w	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	f043 0201 	orr.w	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff ff77 	bl	800255a <LL_ADC_REG_IsConversionOngoing>
 800266c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 8129 	bne.w	80028ce <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 8125 	bne.w	80028ce <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002688:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800268c:	f043 0202 	orr.w	r2, r3, #2
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff4b 	bl	8002534 <LL_ADC_IsEnabled>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d136      	bne.n	8002712 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a78      	ldr	r2, [pc, #480]	; (800288c <HAL_ADC_Init+0x2e4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d004      	beq.n	80026b8 <HAL_ADC_Init+0x110>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a77      	ldr	r2, [pc, #476]	; (8002890 <HAL_ADC_Init+0x2e8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d10e      	bne.n	80026d6 <HAL_ADC_Init+0x12e>
 80026b8:	4874      	ldr	r0, [pc, #464]	; (800288c <HAL_ADC_Init+0x2e4>)
 80026ba:	f7ff ff3b 	bl	8002534 <LL_ADC_IsEnabled>
 80026be:	4604      	mov	r4, r0
 80026c0:	4873      	ldr	r0, [pc, #460]	; (8002890 <HAL_ADC_Init+0x2e8>)
 80026c2:	f7ff ff37 	bl	8002534 <LL_ADC_IsEnabled>
 80026c6:	4603      	mov	r3, r0
 80026c8:	4323      	orrs	r3, r4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	bf0c      	ite	eq
 80026ce:	2301      	moveq	r3, #1
 80026d0:	2300      	movne	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	e008      	b.n	80026e8 <HAL_ADC_Init+0x140>
 80026d6:	486f      	ldr	r0, [pc, #444]	; (8002894 <HAL_ADC_Init+0x2ec>)
 80026d8:	f7ff ff2c 	bl	8002534 <LL_ADC_IsEnabled>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bf0c      	ite	eq
 80026e2:	2301      	moveq	r3, #1
 80026e4:	2300      	movne	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d012      	beq.n	8002712 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a66      	ldr	r2, [pc, #408]	; (800288c <HAL_ADC_Init+0x2e4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d004      	beq.n	8002700 <HAL_ADC_Init+0x158>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a65      	ldr	r2, [pc, #404]	; (8002890 <HAL_ADC_Init+0x2e8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d101      	bne.n	8002704 <HAL_ADC_Init+0x15c>
 8002700:	4a65      	ldr	r2, [pc, #404]	; (8002898 <HAL_ADC_Init+0x2f0>)
 8002702:	e000      	b.n	8002706 <HAL_ADC_Init+0x15e>
 8002704:	4a65      	ldr	r2, [pc, #404]	; (800289c <HAL_ADC_Init+0x2f4>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4619      	mov	r1, r3
 800270c:	4610      	mov	r0, r2
 800270e:	f7ff fdcb 	bl	80022a8 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002712:	f7ff fda7 	bl	8002264 <HAL_GetREVID>
 8002716:	4602      	mov	r2, r0
 8002718:	f241 0303 	movw	r3, #4099	; 0x1003
 800271c:	429a      	cmp	r2, r3
 800271e:	d914      	bls.n	800274a <HAL_ADC_Init+0x1a2>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b10      	cmp	r3, #16
 8002726:	d110      	bne.n	800274a <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7d5b      	ldrb	r3, [r3, #21]
 800272c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002732:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002738:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	7f1b      	ldrb	r3, [r3, #28]
 800273e:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002740:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002742:	f043 030c 	orr.w	r3, r3, #12
 8002746:	61bb      	str	r3, [r7, #24]
 8002748:	e00d      	b.n	8002766 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	7d5b      	ldrb	r3, [r3, #21]
 800274e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002754:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800275a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7f1b      	ldrb	r3, [r3, #28]
 8002760:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	7f1b      	ldrb	r3, [r3, #28]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d106      	bne.n	800277c <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	3b01      	subs	r3, #1
 8002774:	045b      	lsls	r3, r3, #17
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	2b00      	cmp	r3, #0
 8002782:	d009      	beq.n	8002798 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	4b40      	ldr	r3, [pc, #256]	; (80028a0 <HAL_ADC_Init+0x2f8>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	69b9      	ldr	r1, [r7, #24]
 80027a8:	430b      	orrs	r3, r1
 80027aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fed2 	bl	800255a <LL_ADC_REG_IsConversionOngoing>
 80027b6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fedf 	bl	8002580 <LL_ADC_INJ_IsConversionOngoing>
 80027c2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d14a      	bne.n	8002860 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d147      	bne.n	8002860 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7d1b      	ldrb	r3, [r3, #20]
 80027d4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	4b2f      	ldr	r3, [pc, #188]	; (80028a4 <HAL_ADC_Init+0x2fc>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	69b9      	ldr	r1, [r7, #24]
 80027ee:	430b      	orrs	r3, r1
 80027f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d11b      	bne.n	8002834 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	4b27      	ldr	r3, [pc, #156]	; (80028a8 <HAL_ADC_Init+0x300>)
 800280a:	4013      	ands	r3, r2
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002810:	3a01      	subs	r2, #1
 8002812:	0411      	lsls	r1, r2, #16
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002818:	4311      	orrs	r1, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800281e:	4311      	orrs	r1, r2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002824:	430a      	orrs	r2, r1
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0201 	orr.w	r2, r2, #1
 8002830:	611a      	str	r2, [r3, #16]
 8002832:	e007      	b.n	8002844 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0201 	bic.w	r2, r2, #1
 8002842:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fb58 	bl	8002f10 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d121      	bne.n	80028ac <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f023 010f 	bic.w	r1, r3, #15
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	1e5a      	subs	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
 8002880:	e01c      	b.n	80028bc <HAL_ADC_Init+0x314>
 8002882:	bf00      	nop
 8002884:	24000020 	.word	0x24000020
 8002888:	053e2d63 	.word	0x053e2d63
 800288c:	40022000 	.word	0x40022000
 8002890:	40022100 	.word	0x40022100
 8002894:	58026000 	.word	0x58026000
 8002898:	40022300 	.word	0x40022300
 800289c:	58026300 	.word	0x58026300
 80028a0:	fff0c003 	.word	0xfff0c003
 80028a4:	ffffbffc 	.word	0xffffbffc
 80028a8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 020f 	bic.w	r2, r2, #15
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	f023 0303 	bic.w	r3, r3, #3
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	655a      	str	r2, [r3, #84]	; 0x54
 80028cc:	e007      	b.n	80028de <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d2:	f043 0210 	orr.w	r2, r3, #16
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028de:	7ffb      	ldrb	r3, [r7, #31]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3724      	adds	r7, #36	; 0x24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd90      	pop	{r4, r7, pc}

080028e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b099      	sub	sp, #100	; 0x64
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a99      	ldr	r2, [pc, #612]	; (8002b68 <HAL_ADC_ConfigChannel+0x280>)
 8002902:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x2a>
 800290e:	2302      	movs	r3, #2
 8002910:	e2e6      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x5f8>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fe1b 	bl	800255a <LL_ADC_REG_IsConversionOngoing>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 82cb 	bne.w	8002ec2 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002934:	2b00      	cmp	r3, #0
 8002936:	d108      	bne.n	800294a <HAL_ADC_ConfigChannel+0x62>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	0e9b      	lsrs	r3, r3, #26
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	2201      	movs	r2, #1
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	e00f      	b.n	800296a <HAL_ADC_ConfigChannel+0x82>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	2201      	movs	r2, #1
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	69d1      	ldr	r1, [r2, #28]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	430b      	orrs	r3, r1
 8002976:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	f7ff fd11 	bl	80023ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fde3 	bl	800255a <LL_ADC_REG_IsConversionOngoing>
 8002994:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fdf0 	bl	8002580 <LL_ADC_INJ_IsConversionOngoing>
 80029a0:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f040 80b3 	bne.w	8002b10 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f040 80af 	bne.w	8002b10 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6819      	ldr	r1, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	461a      	mov	r2, r3
 80029c0:	f7ff fd1d 	bl	80023fe <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029c4:	4b69      	ldr	r3, [pc, #420]	; (8002b6c <HAL_ADC_ConfigChannel+0x284>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80029cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029d0:	d10b      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x102>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	089b      	lsrs	r3, r3, #2
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	e01d      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x13e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10b      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x128>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	e00a      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x13e>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d027      	beq.n	8002a80 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	6919      	ldr	r1, [r3, #16]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a3e:	f7ff fc67 	bl	8002310 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6919      	ldr	r1, [r3, #16]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	7e5b      	ldrb	r3, [r3, #25]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d102      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x170>
 8002a52:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002a56:	e000      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x172>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f7ff fc8e 	bl	800237c <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	6919      	ldr	r1, [r3, #16]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	7e1b      	ldrb	r3, [r3, #24]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d102      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x18e>
 8002a70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a74:	e000      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x190>
 8002a76:	2300      	movs	r3, #0
 8002a78:	461a      	mov	r2, r3
 8002a7a:	f7ff fc66 	bl	800234a <LL_ADC_SetDataRightShift>
 8002a7e:	e047      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	069b      	lsls	r3, r3, #26
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d107      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aa2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	069b      	lsls	r3, r3, #26
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d107      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ac6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ace:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	069b      	lsls	r3, r3, #26
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d107      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aea:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	069b      	lsls	r3, r3, #26
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d107      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b0e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fd0d 	bl	8002534 <LL_ADC_IsEnabled>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f040 81d9 	bne.w	8002ed4 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6819      	ldr	r1, [r3, #0]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f7ff fc8e 	bl	8002450 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	4a0b      	ldr	r2, [pc, #44]	; (8002b68 <HAL_ADC_ConfigChannel+0x280>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	f040 8101 	bne.w	8002d42 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10f      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x288>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	0e9b      	lsrs	r3, r3, #26
 8002b56:	3301      	adds	r3, #1
 8002b58:	f003 031f 	and.w	r3, r3, #31
 8002b5c:	2b09      	cmp	r3, #9
 8002b5e:	bf94      	ite	ls
 8002b60:	2301      	movls	r3, #1
 8002b62:	2300      	movhi	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e016      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x2ae>
 8002b68:	47ff0000 	.word	0x47ff0000
 8002b6c:	5c001000 	.word	0x5c001000
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b80:	fab3 f383 	clz	r3, r3
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	3301      	adds	r3, #1
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	2b09      	cmp	r3, #9
 8002b8e:	bf94      	ite	ls
 8002b90:	2301      	movls	r3, #1
 8002b92:	2300      	movhi	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d064      	beq.n	8002c64 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d107      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x2ce>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	0e9b      	lsrs	r3, r3, #26
 8002bac:	3301      	adds	r3, #1
 8002bae:	069b      	lsls	r3, r3, #26
 8002bb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bb4:	e00e      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x2ec>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	3301      	adds	r3, #1
 8002bce:	069b      	lsls	r3, r3, #26
 8002bd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d109      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x30c>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	0e9b      	lsrs	r3, r3, #26
 8002be6:	3301      	adds	r3, #1
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	2101      	movs	r1, #1
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	e010      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x32e>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	fa93 f3a3 	rbit	r3, r3
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	2101      	movs	r1, #1
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	ea42 0103 	orr.w	r1, r2, r3
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10a      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x354>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	0e9b      	lsrs	r3, r3, #26
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	f003 021f 	and.w	r2, r3, #31
 8002c32:	4613      	mov	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	051b      	lsls	r3, r3, #20
 8002c3a:	e011      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x378>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	fab3 f383 	clz	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	3301      	adds	r3, #1
 8002c54:	f003 021f 	and.w	r2, r3, #31
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c60:	430b      	orrs	r3, r1
 8002c62:	e069      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d107      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x398>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	0e9b      	lsrs	r3, r3, #26
 8002c76:	3301      	adds	r3, #1
 8002c78:	069b      	lsls	r3, r3, #26
 8002c7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c7e:	e00e      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x3b6>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	61fb      	str	r3, [r7, #28]
  return result;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	fab3 f383 	clz	r3, r3
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	3301      	adds	r3, #1
 8002c98:	069b      	lsls	r3, r3, #26
 8002c9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x3d6>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	0e9b      	lsrs	r3, r3, #26
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	f003 031f 	and.w	r3, r3, #31
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbc:	e010      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x3f8>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	617b      	str	r3, [r7, #20]
  return result;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	f003 031f 	and.w	r3, r3, #31
 8002cda:	2101      	movs	r1, #1
 8002cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce0:	ea42 0103 	orr.w	r1, r2, r3
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10d      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x424>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	0e9b      	lsrs	r3, r3, #26
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	f003 021f 	and.w	r2, r3, #31
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	3b1e      	subs	r3, #30
 8002d04:	051b      	lsls	r3, r3, #20
 8002d06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d0a:	e014      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x44e>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	60fb      	str	r3, [r7, #12]
  return result;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	fab3 f383 	clz	r3, r3
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	3301      	adds	r3, #1
 8002d24:	f003 021f 	and.w	r2, r3, #31
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3b1e      	subs	r3, #30
 8002d30:	051b      	lsls	r3, r3, #20
 8002d32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d36:	430b      	orrs	r3, r1
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	6892      	ldr	r2, [r2, #8]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f7ff fb5e 	bl	80023fe <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f280 80c4 	bge.w	8002ed4 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a65      	ldr	r2, [pc, #404]	; (8002ee8 <HAL_ADC_ConfigChannel+0x600>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d004      	beq.n	8002d60 <HAL_ADC_ConfigChannel+0x478>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a64      	ldr	r2, [pc, #400]	; (8002eec <HAL_ADC_ConfigChannel+0x604>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x47c>
 8002d60:	4b63      	ldr	r3, [pc, #396]	; (8002ef0 <HAL_ADC_ConfigChannel+0x608>)
 8002d62:	e000      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x47e>
 8002d64:	4b63      	ldr	r3, [pc, #396]	; (8002ef4 <HAL_ADC_ConfigChannel+0x60c>)
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fac4 	bl	80022f4 <LL_ADC_GetCommonPathInternalCh>
 8002d6c:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a5d      	ldr	r2, [pc, #372]	; (8002ee8 <HAL_ADC_ConfigChannel+0x600>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d004      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x49a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a5b      	ldr	r2, [pc, #364]	; (8002eec <HAL_ADC_ConfigChannel+0x604>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d10e      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x4b8>
 8002d82:	4859      	ldr	r0, [pc, #356]	; (8002ee8 <HAL_ADC_ConfigChannel+0x600>)
 8002d84:	f7ff fbd6 	bl	8002534 <LL_ADC_IsEnabled>
 8002d88:	4604      	mov	r4, r0
 8002d8a:	4858      	ldr	r0, [pc, #352]	; (8002eec <HAL_ADC_ConfigChannel+0x604>)
 8002d8c:	f7ff fbd2 	bl	8002534 <LL_ADC_IsEnabled>
 8002d90:	4603      	mov	r3, r0
 8002d92:	4323      	orrs	r3, r4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e008      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x4ca>
 8002da0:	4855      	ldr	r0, [pc, #340]	; (8002ef8 <HAL_ADC_ConfigChannel+0x610>)
 8002da2:	f7ff fbc7 	bl	8002534 <LL_ADC_IsEnabled>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d07b      	beq.n	8002eae <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a50      	ldr	r2, [pc, #320]	; (8002efc <HAL_ADC_ConfigChannel+0x614>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d12e      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x536>
 8002dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d129      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a4a      	ldr	r2, [pc, #296]	; (8002ef8 <HAL_ADC_ConfigChannel+0x610>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d17f      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a43      	ldr	r2, [pc, #268]	; (8002ee8 <HAL_ADC_ConfigChannel+0x600>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d004      	beq.n	8002de8 <HAL_ADC_ConfigChannel+0x500>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a42      	ldr	r2, [pc, #264]	; (8002eec <HAL_ADC_ConfigChannel+0x604>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x504>
 8002de8:	4a41      	ldr	r2, [pc, #260]	; (8002ef0 <HAL_ADC_ConfigChannel+0x608>)
 8002dea:	e000      	b.n	8002dee <HAL_ADC_ConfigChannel+0x506>
 8002dec:	4a41      	ldr	r2, [pc, #260]	; (8002ef4 <HAL_ADC_ConfigChannel+0x60c>)
 8002dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f7ff fa69 	bl	80022ce <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002dfc:	4b40      	ldr	r3, [pc, #256]	; (8002f00 <HAL_ADC_ConfigChannel+0x618>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	099b      	lsrs	r3, r3, #6
 8002e02:	4a40      	ldr	r2, [pc, #256]	; (8002f04 <HAL_ADC_ConfigChannel+0x61c>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	099b      	lsrs	r3, r3, #6
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002e0e:	e002      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f9      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e1c:	e05a      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a39      	ldr	r2, [pc, #228]	; (8002f08 <HAL_ADC_ConfigChannel+0x620>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d11e      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x57e>
 8002e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d119      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a30      	ldr	r2, [pc, #192]	; (8002ef8 <HAL_ADC_ConfigChannel+0x610>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d14b      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a29      	ldr	r2, [pc, #164]	; (8002ee8 <HAL_ADC_ConfigChannel+0x600>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d004      	beq.n	8002e50 <HAL_ADC_ConfigChannel+0x568>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a28      	ldr	r2, [pc, #160]	; (8002eec <HAL_ADC_ConfigChannel+0x604>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d101      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x56c>
 8002e50:	4a27      	ldr	r2, [pc, #156]	; (8002ef0 <HAL_ADC_ConfigChannel+0x608>)
 8002e52:	e000      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x56e>
 8002e54:	4a27      	ldr	r2, [pc, #156]	; (8002ef4 <HAL_ADC_ConfigChannel+0x60c>)
 8002e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f7ff fa35 	bl	80022ce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e64:	e036      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a28      	ldr	r2, [pc, #160]	; (8002f0c <HAL_ADC_ConfigChannel+0x624>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d131      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x5ec>
 8002e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d12c      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a1e      	ldr	r2, [pc, #120]	; (8002ef8 <HAL_ADC_ConfigChannel+0x610>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d127      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a17      	ldr	r2, [pc, #92]	; (8002ee8 <HAL_ADC_ConfigChannel+0x600>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d004      	beq.n	8002e98 <HAL_ADC_ConfigChannel+0x5b0>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a16      	ldr	r2, [pc, #88]	; (8002eec <HAL_ADC_ConfigChannel+0x604>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d101      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x5b4>
 8002e98:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <HAL_ADC_ConfigChannel+0x608>)
 8002e9a:	e000      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x5b6>
 8002e9c:	4a15      	ldr	r2, [pc, #84]	; (8002ef4 <HAL_ADC_ConfigChannel+0x60c>)
 8002e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	f7ff fa11 	bl	80022ce <LL_ADC_SetCommonPathInternalCh>
 8002eac:	e012      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb2:	f043 0220 	orr.w	r2, r3, #32
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002ec0:	e008      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	f043 0220 	orr.w	r2, r3, #32
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002edc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3764      	adds	r7, #100	; 0x64
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd90      	pop	{r4, r7, pc}
 8002ee8:	40022000 	.word	0x40022000
 8002eec:	40022100 	.word	0x40022100
 8002ef0:	40022300 	.word	0x40022300
 8002ef4:	58026300 	.word	0x58026300
 8002ef8:	58026000 	.word	0x58026000
 8002efc:	cb840000 	.word	0xcb840000
 8002f00:	24000020 	.word	0x24000020
 8002f04:	053e2d63 	.word	0x053e2d63
 8002f08:	c7520000 	.word	0xc7520000
 8002f0c:	cfb80000 	.word	0xcfb80000

08002f10 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a70      	ldr	r2, [pc, #448]	; (80030e0 <ADC_ConfigureBoostMode+0x1d0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d004      	beq.n	8002f2c <ADC_ConfigureBoostMode+0x1c>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a6f      	ldr	r2, [pc, #444]	; (80030e4 <ADC_ConfigureBoostMode+0x1d4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d109      	bne.n	8002f40 <ADC_ConfigureBoostMode+0x30>
 8002f2c:	4b6e      	ldr	r3, [pc, #440]	; (80030e8 <ADC_ConfigureBoostMode+0x1d8>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf14      	ite	ne
 8002f38:	2301      	movne	r3, #1
 8002f3a:	2300      	moveq	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e008      	b.n	8002f52 <ADC_ConfigureBoostMode+0x42>
 8002f40:	4b6a      	ldr	r3, [pc, #424]	; (80030ec <ADC_ConfigureBoostMode+0x1dc>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bf14      	ite	ne
 8002f4c:	2301      	movne	r3, #1
 8002f4e:	2300      	moveq	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d01a      	beq.n	8002f8c <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002f56:	f003 ff1d 	bl	8006d94 <HAL_RCC_GetHCLKFreq>
 8002f5a:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f64:	d006      	beq.n	8002f74 <ADC_ConfigureBoostMode+0x64>
 8002f66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f6a:	d00b      	beq.n	8002f84 <ADC_ConfigureBoostMode+0x74>
 8002f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f70:	d000      	beq.n	8002f74 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002f72:	e05d      	b.n	8003030 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f80:	60fb      	str	r3, [r7, #12]
        break;
 8002f82:	e055      	b.n	8003030 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	089b      	lsrs	r3, r3, #2
 8002f88:	60fb      	str	r3, [r7, #12]
        break;
 8002f8a:	e051      	b.n	8003030 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f8c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f90:	f004 fe3a 	bl	8007c08 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f94:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002f9e:	d02a      	beq.n	8002ff6 <ADC_ConfigureBoostMode+0xe6>
 8002fa0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002fa4:	d813      	bhi.n	8002fce <ADC_ConfigureBoostMode+0xbe>
 8002fa6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002faa:	d024      	beq.n	8002ff6 <ADC_ConfigureBoostMode+0xe6>
 8002fac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fb0:	d806      	bhi.n	8002fc0 <ADC_ConfigureBoostMode+0xb0>
 8002fb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fb6:	d01e      	beq.n	8002ff6 <ADC_ConfigureBoostMode+0xe6>
 8002fb8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fbc:	d01b      	beq.n	8002ff6 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002fbe:	e037      	b.n	8003030 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002fc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fc4:	d017      	beq.n	8002ff6 <ADC_ConfigureBoostMode+0xe6>
 8002fc6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002fca:	d014      	beq.n	8002ff6 <ADC_ConfigureBoostMode+0xe6>
        break;
 8002fcc:	e030      	b.n	8003030 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002fce:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002fd2:	d021      	beq.n	8003018 <ADC_ConfigureBoostMode+0x108>
 8002fd4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002fd8:	d806      	bhi.n	8002fe8 <ADC_ConfigureBoostMode+0xd8>
 8002fda:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002fde:	d013      	beq.n	8003008 <ADC_ConfigureBoostMode+0xf8>
 8002fe0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fe4:	d014      	beq.n	8003010 <ADC_ConfigureBoostMode+0x100>
        break;
 8002fe6:	e023      	b.n	8003030 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002fe8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002fec:	d018      	beq.n	8003020 <ADC_ConfigureBoostMode+0x110>
 8002fee:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002ff2:	d019      	beq.n	8003028 <ADC_ConfigureBoostMode+0x118>
        break;
 8002ff4:	e01c      	b.n	8003030 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	0c9b      	lsrs	r3, r3, #18
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	fbb2 f3f3 	udiv	r3, r2, r3
 8003004:	60fb      	str	r3, [r7, #12]
        break;
 8003006:	e013      	b.n	8003030 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	60fb      	str	r3, [r7, #12]
      break;
 800300e:	e00f      	b.n	8003030 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	60fb      	str	r3, [r7, #12]
        break;
 8003016:	e00b      	b.n	8003030 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	099b      	lsrs	r3, r3, #6
 800301c:	60fb      	str	r3, [r7, #12]
        break;
 800301e:	e007      	b.n	8003030 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	09db      	lsrs	r3, r3, #7
 8003024:	60fb      	str	r3, [r7, #12]
        break;
 8003026:	e003      	b.n	8003030 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	0a1b      	lsrs	r3, r3, #8
 800302c:	60fb      	str	r3, [r7, #12]
        break;
 800302e:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003030:	f7ff f918 	bl	8002264 <HAL_GetREVID>
 8003034:	4602      	mov	r2, r0
 8003036:	f241 0303 	movw	r3, #4099	; 0x1003
 800303a:	429a      	cmp	r2, r3
 800303c:	d815      	bhi.n	800306a <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4a2b      	ldr	r2, [pc, #172]	; (80030f0 <ADC_ConfigureBoostMode+0x1e0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d908      	bls.n	8003058 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003054:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003056:	e03e      	b.n	80030d6 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003066:	609a      	str	r2, [r3, #8]
}
 8003068:	e035      	b.n	80030d6 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	085b      	lsrs	r3, r3, #1
 800306e:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4a20      	ldr	r2, [pc, #128]	; (80030f4 <ADC_ConfigureBoostMode+0x1e4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d808      	bhi.n	800308a <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003086:	609a      	str	r2, [r3, #8]
}
 8003088:	e025      	b.n	80030d6 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4a1a      	ldr	r2, [pc, #104]	; (80030f8 <ADC_ConfigureBoostMode+0x1e8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d80a      	bhi.n	80030a8 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030a4:	609a      	str	r2, [r3, #8]
}
 80030a6:	e016      	b.n	80030d6 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4a14      	ldr	r2, [pc, #80]	; (80030fc <ADC_ConfigureBoostMode+0x1ec>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d80a      	bhi.n	80030c6 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c2:	609a      	str	r2, [r3, #8]
}
 80030c4:	e007      	b.n	80030d6 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80030d4:	609a      	str	r2, [r3, #8]
}
 80030d6:	bf00      	nop
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40022000 	.word	0x40022000
 80030e4:	40022100 	.word	0x40022100
 80030e8:	40022300 	.word	0x40022300
 80030ec:	58026300 	.word	0x58026300
 80030f0:	01312d00 	.word	0x01312d00
 80030f4:	005f5e10 	.word	0x005f5e10
 80030f8:	00bebc20 	.word	0x00bebc20
 80030fc:	017d7840 	.word	0x017d7840

08003100 <LL_ADC_IsEnabled>:
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <LL_ADC_IsEnabled+0x18>
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <LL_ADC_IsEnabled+0x1a>
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <LL_ADC_REG_IsConversionOngoing>:
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b04      	cmp	r3, #4
 8003138:	d101      	bne.n	800313e <LL_ADC_REG_IsConversionOngoing+0x18>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b09f      	sub	sp, #124	; 0x7c
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003166:	2302      	movs	r3, #2
 8003168:	e0ba      	b.n	80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a5c      	ldr	r2, [pc, #368]	; (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d102      	bne.n	8003182 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800317c:	4b5b      	ldr	r3, [pc, #364]	; (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	e001      	b.n	8003186 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003182:	2300      	movs	r3, #0
 8003184:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10b      	bne.n	80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003190:	f043 0220 	orr.w	r2, r3, #32
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e09d      	b.n	80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ffbd 	bl	8003126 <LL_ADC_REG_IsConversionOngoing>
 80031ac:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ffb7 	bl	8003126 <LL_ADC_REG_IsConversionOngoing>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d17f      	bne.n	80032be <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80031be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d17c      	bne.n	80032be <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a47      	ldr	r2, [pc, #284]	; (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d004      	beq.n	80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a46      	ldr	r2, [pc, #280]	; (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d101      	bne.n	80031dc <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80031d8:	4b45      	ldr	r3, [pc, #276]	; (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031da:	e000      	b.n	80031de <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80031dc:	4b45      	ldr	r3, [pc, #276]	; (80032f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031de:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d039      	beq.n	800325c <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80031e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a3a      	ldr	r2, [pc, #232]	; (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d004      	beq.n	800320e <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a38      	ldr	r2, [pc, #224]	; (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d10e      	bne.n	800322c <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800320e:	4836      	ldr	r0, [pc, #216]	; (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003210:	f7ff ff76 	bl	8003100 <LL_ADC_IsEnabled>
 8003214:	4604      	mov	r4, r0
 8003216:	4835      	ldr	r0, [pc, #212]	; (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003218:	f7ff ff72 	bl	8003100 <LL_ADC_IsEnabled>
 800321c:	4603      	mov	r3, r0
 800321e:	4323      	orrs	r3, r4
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	e008      	b.n	800323e <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 800322c:	4832      	ldr	r0, [pc, #200]	; (80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800322e:	f7ff ff67 	bl	8003100 <LL_ADC_IsEnabled>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d047      	beq.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	4b2d      	ldr	r3, [pc, #180]	; (80032fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003248:	4013      	ands	r3, r2
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	6811      	ldr	r1, [r2, #0]
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	6892      	ldr	r2, [r2, #8]
 8003252:	430a      	orrs	r2, r1
 8003254:	431a      	orrs	r2, r3
 8003256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003258:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800325a:	e03a      	b.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800325c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003266:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a1e      	ldr	r2, [pc, #120]	; (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d004      	beq.n	800327c <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a1d      	ldr	r2, [pc, #116]	; (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d10e      	bne.n	800329a <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 800327c:	481a      	ldr	r0, [pc, #104]	; (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800327e:	f7ff ff3f 	bl	8003100 <LL_ADC_IsEnabled>
 8003282:	4604      	mov	r4, r0
 8003284:	4819      	ldr	r0, [pc, #100]	; (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003286:	f7ff ff3b 	bl	8003100 <LL_ADC_IsEnabled>
 800328a:	4603      	mov	r3, r0
 800328c:	4323      	orrs	r3, r4
 800328e:	2b00      	cmp	r3, #0
 8003290:	bf0c      	ite	eq
 8003292:	2301      	moveq	r3, #1
 8003294:	2300      	movne	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	e008      	b.n	80032ac <HAL_ADCEx_MultiModeConfigChannel+0x160>
 800329a:	4817      	ldr	r0, [pc, #92]	; (80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800329c:	f7ff ff30 	bl	8003100 <LL_ADC_IsEnabled>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	bf0c      	ite	eq
 80032a6:	2301      	moveq	r3, #1
 80032a8:	2300      	movne	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d010      	beq.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032ba:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032bc:	e009      	b.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c2:	f043 0220 	orr.w	r2, r3, #32
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80032d0:	e000      	b.n	80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032d2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	377c      	adds	r7, #124	; 0x7c
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd90      	pop	{r4, r7, pc}
 80032e8:	40022000 	.word	0x40022000
 80032ec:	40022100 	.word	0x40022100
 80032f0:	40022300 	.word	0x40022300
 80032f4:	58026300 	.word	0x58026300
 80032f8:	58026000 	.word	0x58026000
 80032fc:	fffff0e0 	.word	0xfffff0e0

08003300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <__NVIC_SetPriorityGrouping+0x40>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800331c:	4013      	ands	r3, r2
 800331e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003328:	4b06      	ldr	r3, [pc, #24]	; (8003344 <__NVIC_SetPriorityGrouping+0x44>)
 800332a:	4313      	orrs	r3, r2
 800332c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800332e:	4a04      	ldr	r2, [pc, #16]	; (8003340 <__NVIC_SetPriorityGrouping+0x40>)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	60d3      	str	r3, [r2, #12]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	e000ed00 	.word	0xe000ed00
 8003344:	05fa0000 	.word	0x05fa0000

08003348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800334c:	4b04      	ldr	r3, [pc, #16]	; (8003360 <__NVIC_GetPriorityGrouping+0x18>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	0a1b      	lsrs	r3, r3, #8
 8003352:	f003 0307 	and.w	r3, r3, #7
}
 8003356:	4618      	mov	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	e000ed00 	.word	0xe000ed00

08003364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800336e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003372:	2b00      	cmp	r3, #0
 8003374:	db0b      	blt.n	800338e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	f003 021f 	and.w	r2, r3, #31
 800337c:	4907      	ldr	r1, [pc, #28]	; (800339c <__NVIC_EnableIRQ+0x38>)
 800337e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	2001      	movs	r0, #1
 8003386:	fa00 f202 	lsl.w	r2, r0, r2
 800338a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	e000e100 	.word	0xe000e100

080033a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	6039      	str	r1, [r7, #0]
 80033aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	db0a      	blt.n	80033ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	490c      	ldr	r1, [pc, #48]	; (80033ec <__NVIC_SetPriority+0x4c>)
 80033ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033be:	0112      	lsls	r2, r2, #4
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	440b      	add	r3, r1
 80033c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c8:	e00a      	b.n	80033e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	4908      	ldr	r1, [pc, #32]	; (80033f0 <__NVIC_SetPriority+0x50>)
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	3b04      	subs	r3, #4
 80033d8:	0112      	lsls	r2, r2, #4
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	440b      	add	r3, r1
 80033de:	761a      	strb	r2, [r3, #24]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	e000e100 	.word	0xe000e100
 80033f0:	e000ed00 	.word	0xe000ed00

080033f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b089      	sub	sp, #36	; 0x24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f1c3 0307 	rsb	r3, r3, #7
 800340e:	2b04      	cmp	r3, #4
 8003410:	bf28      	it	cs
 8003412:	2304      	movcs	r3, #4
 8003414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3304      	adds	r3, #4
 800341a:	2b06      	cmp	r3, #6
 800341c:	d902      	bls.n	8003424 <NVIC_EncodePriority+0x30>
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3b03      	subs	r3, #3
 8003422:	e000      	b.n	8003426 <NVIC_EncodePriority+0x32>
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003428:	f04f 32ff 	mov.w	r2, #4294967295
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43da      	mvns	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	401a      	ands	r2, r3
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800343c:	f04f 31ff 	mov.w	r1, #4294967295
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	fa01 f303 	lsl.w	r3, r1, r3
 8003446:	43d9      	mvns	r1, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800344c:	4313      	orrs	r3, r2
         );
}
 800344e:	4618      	mov	r0, r3
 8003450:	3724      	adds	r7, #36	; 0x24
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
	...

0800345c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3b01      	subs	r3, #1
 8003468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800346c:	d301      	bcc.n	8003472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800346e:	2301      	movs	r3, #1
 8003470:	e00f      	b.n	8003492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003472:	4a0a      	ldr	r2, [pc, #40]	; (800349c <SysTick_Config+0x40>)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3b01      	subs	r3, #1
 8003478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800347a:	210f      	movs	r1, #15
 800347c:	f04f 30ff 	mov.w	r0, #4294967295
 8003480:	f7ff ff8e 	bl	80033a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <SysTick_Config+0x40>)
 8003486:	2200      	movs	r2, #0
 8003488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800348a:	4b04      	ldr	r3, [pc, #16]	; (800349c <SysTick_Config+0x40>)
 800348c:	2207      	movs	r2, #7
 800348e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	e000e010 	.word	0xe000e010

080034a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ff29 	bl	8003300 <__NVIC_SetPriorityGrouping>
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b086      	sub	sp, #24
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	4603      	mov	r3, r0
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034c4:	f7ff ff40 	bl	8003348 <__NVIC_GetPriorityGrouping>
 80034c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	6978      	ldr	r0, [r7, #20]
 80034d0:	f7ff ff90 	bl	80033f4 <NVIC_EncodePriority>
 80034d4:	4602      	mov	r2, r0
 80034d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ff5f 	bl	80033a0 <__NVIC_SetPriority>
}
 80034e2:	bf00      	nop
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4603      	mov	r3, r0
 80034f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff33 	bl	8003364 <__NVIC_EnableIRQ>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ffa4 	bl	800345c <SysTick_Config>
 8003514:	4603      	mov	r3, r0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003528:	f7fe fe6e 	bl	8002208 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e316      	b.n	8003b66 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a66      	ldr	r2, [pc, #408]	; (80036d8 <HAL_DMA_Init+0x1b8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d04a      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a65      	ldr	r2, [pc, #404]	; (80036dc <HAL_DMA_Init+0x1bc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d045      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a63      	ldr	r2, [pc, #396]	; (80036e0 <HAL_DMA_Init+0x1c0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d040      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a62      	ldr	r2, [pc, #392]	; (80036e4 <HAL_DMA_Init+0x1c4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d03b      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a60      	ldr	r2, [pc, #384]	; (80036e8 <HAL_DMA_Init+0x1c8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d036      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a5f      	ldr	r2, [pc, #380]	; (80036ec <HAL_DMA_Init+0x1cc>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d031      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a5d      	ldr	r2, [pc, #372]	; (80036f0 <HAL_DMA_Init+0x1d0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d02c      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a5c      	ldr	r2, [pc, #368]	; (80036f4 <HAL_DMA_Init+0x1d4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d027      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a5a      	ldr	r2, [pc, #360]	; (80036f8 <HAL_DMA_Init+0x1d8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d022      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a59      	ldr	r2, [pc, #356]	; (80036fc <HAL_DMA_Init+0x1dc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d01d      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a57      	ldr	r2, [pc, #348]	; (8003700 <HAL_DMA_Init+0x1e0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d018      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a56      	ldr	r2, [pc, #344]	; (8003704 <HAL_DMA_Init+0x1e4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d013      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a54      	ldr	r2, [pc, #336]	; (8003708 <HAL_DMA_Init+0x1e8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00e      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a53      	ldr	r2, [pc, #332]	; (800370c <HAL_DMA_Init+0x1ec>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d009      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a51      	ldr	r2, [pc, #324]	; (8003710 <HAL_DMA_Init+0x1f0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a50      	ldr	r2, [pc, #320]	; (8003714 <HAL_DMA_Init+0x1f4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d101      	bne.n	80035dc <HAL_DMA_Init+0xbc>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <HAL_DMA_Init+0xbe>
 80035dc:	2300      	movs	r3, #0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 813b 	beq.w	800385a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a37      	ldr	r2, [pc, #220]	; (80036d8 <HAL_DMA_Init+0x1b8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d04a      	beq.n	8003694 <HAL_DMA_Init+0x174>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a36      	ldr	r2, [pc, #216]	; (80036dc <HAL_DMA_Init+0x1bc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d045      	beq.n	8003694 <HAL_DMA_Init+0x174>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a34      	ldr	r2, [pc, #208]	; (80036e0 <HAL_DMA_Init+0x1c0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d040      	beq.n	8003694 <HAL_DMA_Init+0x174>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a33      	ldr	r2, [pc, #204]	; (80036e4 <HAL_DMA_Init+0x1c4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d03b      	beq.n	8003694 <HAL_DMA_Init+0x174>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a31      	ldr	r2, [pc, #196]	; (80036e8 <HAL_DMA_Init+0x1c8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d036      	beq.n	8003694 <HAL_DMA_Init+0x174>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a30      	ldr	r2, [pc, #192]	; (80036ec <HAL_DMA_Init+0x1cc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d031      	beq.n	8003694 <HAL_DMA_Init+0x174>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a2e      	ldr	r2, [pc, #184]	; (80036f0 <HAL_DMA_Init+0x1d0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d02c      	beq.n	8003694 <HAL_DMA_Init+0x174>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a2d      	ldr	r2, [pc, #180]	; (80036f4 <HAL_DMA_Init+0x1d4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d027      	beq.n	8003694 <HAL_DMA_Init+0x174>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a2b      	ldr	r2, [pc, #172]	; (80036f8 <HAL_DMA_Init+0x1d8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d022      	beq.n	8003694 <HAL_DMA_Init+0x174>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a2a      	ldr	r2, [pc, #168]	; (80036fc <HAL_DMA_Init+0x1dc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d01d      	beq.n	8003694 <HAL_DMA_Init+0x174>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a28      	ldr	r2, [pc, #160]	; (8003700 <HAL_DMA_Init+0x1e0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d018      	beq.n	8003694 <HAL_DMA_Init+0x174>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a27      	ldr	r2, [pc, #156]	; (8003704 <HAL_DMA_Init+0x1e4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d013      	beq.n	8003694 <HAL_DMA_Init+0x174>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a25      	ldr	r2, [pc, #148]	; (8003708 <HAL_DMA_Init+0x1e8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00e      	beq.n	8003694 <HAL_DMA_Init+0x174>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a24      	ldr	r2, [pc, #144]	; (800370c <HAL_DMA_Init+0x1ec>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d009      	beq.n	8003694 <HAL_DMA_Init+0x174>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a22      	ldr	r2, [pc, #136]	; (8003710 <HAL_DMA_Init+0x1f0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d004      	beq.n	8003694 <HAL_DMA_Init+0x174>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a21      	ldr	r2, [pc, #132]	; (8003714 <HAL_DMA_Init+0x1f4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d108      	bne.n	80036a6 <HAL_DMA_Init+0x186>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e007      	b.n	80036b6 <HAL_DMA_Init+0x196>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0201 	bic.w	r2, r2, #1
 80036b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036b6:	e02f      	b.n	8003718 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036b8:	f7fe fda6 	bl	8002208 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b05      	cmp	r3, #5
 80036c4:	d928      	bls.n	8003718 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2203      	movs	r2, #3
 80036d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e246      	b.n	8003b66 <HAL_DMA_Init+0x646>
 80036d8:	40020010 	.word	0x40020010
 80036dc:	40020028 	.word	0x40020028
 80036e0:	40020040 	.word	0x40020040
 80036e4:	40020058 	.word	0x40020058
 80036e8:	40020070 	.word	0x40020070
 80036ec:	40020088 	.word	0x40020088
 80036f0:	400200a0 	.word	0x400200a0
 80036f4:	400200b8 	.word	0x400200b8
 80036f8:	40020410 	.word	0x40020410
 80036fc:	40020428 	.word	0x40020428
 8003700:	40020440 	.word	0x40020440
 8003704:	40020458 	.word	0x40020458
 8003708:	40020470 	.word	0x40020470
 800370c:	40020488 	.word	0x40020488
 8003710:	400204a0 	.word	0x400204a0
 8003714:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1c8      	bne.n	80036b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4b83      	ldr	r3, [pc, #524]	; (8003940 <HAL_DMA_Init+0x420>)
 8003732:	4013      	ands	r3, r2
 8003734:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800373e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800374a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003756:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	2b04      	cmp	r3, #4
 800376a:	d107      	bne.n	800377c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	4313      	orrs	r3, r2
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800377c:	4b71      	ldr	r3, [pc, #452]	; (8003944 <HAL_DMA_Init+0x424>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4b71      	ldr	r3, [pc, #452]	; (8003948 <HAL_DMA_Init+0x428>)
 8003782:	4013      	ands	r3, r2
 8003784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003788:	d328      	bcc.n	80037dc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b28      	cmp	r3, #40	; 0x28
 8003790:	d903      	bls.n	800379a <HAL_DMA_Init+0x27a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b2e      	cmp	r3, #46	; 0x2e
 8003798:	d917      	bls.n	80037ca <HAL_DMA_Init+0x2aa>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b3e      	cmp	r3, #62	; 0x3e
 80037a0:	d903      	bls.n	80037aa <HAL_DMA_Init+0x28a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b42      	cmp	r3, #66	; 0x42
 80037a8:	d90f      	bls.n	80037ca <HAL_DMA_Init+0x2aa>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b46      	cmp	r3, #70	; 0x46
 80037b0:	d903      	bls.n	80037ba <HAL_DMA_Init+0x29a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b48      	cmp	r3, #72	; 0x48
 80037b8:	d907      	bls.n	80037ca <HAL_DMA_Init+0x2aa>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b4e      	cmp	r3, #78	; 0x4e
 80037c0:	d905      	bls.n	80037ce <HAL_DMA_Init+0x2ae>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b52      	cmp	r3, #82	; 0x52
 80037c8:	d801      	bhi.n	80037ce <HAL_DMA_Init+0x2ae>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <HAL_DMA_Init+0x2b0>
 80037ce:	2300      	movs	r3, #0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037da:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f023 0307 	bic.w	r3, r3, #7
 80037f2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	2b04      	cmp	r3, #4
 8003804:	d117      	bne.n	8003836 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00e      	beq.n	8003836 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f002 f813 	bl	8005844 <DMA_CheckFifoParam>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2240      	movs	r2, #64	; 0x40
 8003828:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e197      	b.n	8003b66 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f001 ff4e 	bl	80056e0 <DMA_CalcBaseAndBitshift>
 8003844:	4603      	mov	r3, r0
 8003846:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	223f      	movs	r2, #63	; 0x3f
 8003852:	409a      	lsls	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	609a      	str	r2, [r3, #8]
 8003858:	e0cd      	b.n	80039f6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a3b      	ldr	r2, [pc, #236]	; (800394c <HAL_DMA_Init+0x42c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d022      	beq.n	80038aa <HAL_DMA_Init+0x38a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a39      	ldr	r2, [pc, #228]	; (8003950 <HAL_DMA_Init+0x430>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01d      	beq.n	80038aa <HAL_DMA_Init+0x38a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a38      	ldr	r2, [pc, #224]	; (8003954 <HAL_DMA_Init+0x434>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d018      	beq.n	80038aa <HAL_DMA_Init+0x38a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a36      	ldr	r2, [pc, #216]	; (8003958 <HAL_DMA_Init+0x438>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d013      	beq.n	80038aa <HAL_DMA_Init+0x38a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a35      	ldr	r2, [pc, #212]	; (800395c <HAL_DMA_Init+0x43c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00e      	beq.n	80038aa <HAL_DMA_Init+0x38a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a33      	ldr	r2, [pc, #204]	; (8003960 <HAL_DMA_Init+0x440>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d009      	beq.n	80038aa <HAL_DMA_Init+0x38a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a32      	ldr	r2, [pc, #200]	; (8003964 <HAL_DMA_Init+0x444>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <HAL_DMA_Init+0x38a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a30      	ldr	r2, [pc, #192]	; (8003968 <HAL_DMA_Init+0x448>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <HAL_DMA_Init+0x38e>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <HAL_DMA_Init+0x390>
 80038ae:	2300      	movs	r3, #0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 8097 	beq.w	80039e4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a24      	ldr	r2, [pc, #144]	; (800394c <HAL_DMA_Init+0x42c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d021      	beq.n	8003904 <HAL_DMA_Init+0x3e4>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a22      	ldr	r2, [pc, #136]	; (8003950 <HAL_DMA_Init+0x430>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01c      	beq.n	8003904 <HAL_DMA_Init+0x3e4>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a21      	ldr	r2, [pc, #132]	; (8003954 <HAL_DMA_Init+0x434>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d017      	beq.n	8003904 <HAL_DMA_Init+0x3e4>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1f      	ldr	r2, [pc, #124]	; (8003958 <HAL_DMA_Init+0x438>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d012      	beq.n	8003904 <HAL_DMA_Init+0x3e4>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1e      	ldr	r2, [pc, #120]	; (800395c <HAL_DMA_Init+0x43c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00d      	beq.n	8003904 <HAL_DMA_Init+0x3e4>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1c      	ldr	r2, [pc, #112]	; (8003960 <HAL_DMA_Init+0x440>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d008      	beq.n	8003904 <HAL_DMA_Init+0x3e4>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <HAL_DMA_Init+0x444>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d003      	beq.n	8003904 <HAL_DMA_Init+0x3e4>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a19      	ldr	r2, [pc, #100]	; (8003968 <HAL_DMA_Init+0x448>)
 8003902:	4293      	cmp	r3, r2
 8003904:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2202      	movs	r2, #2
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4b12      	ldr	r3, [pc, #72]	; (800396c <HAL_DMA_Init+0x44c>)
 8003922:	4013      	ands	r3, r2
 8003924:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d020      	beq.n	8003970 <HAL_DMA_Init+0x450>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b80      	cmp	r3, #128	; 0x80
 8003934:	d102      	bne.n	800393c <HAL_DMA_Init+0x41c>
 8003936:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800393a:	e01a      	b.n	8003972 <HAL_DMA_Init+0x452>
 800393c:	2300      	movs	r3, #0
 800393e:	e018      	b.n	8003972 <HAL_DMA_Init+0x452>
 8003940:	fe10803f 	.word	0xfe10803f
 8003944:	5c001000 	.word	0x5c001000
 8003948:	ffff0000 	.word	0xffff0000
 800394c:	58025408 	.word	0x58025408
 8003950:	5802541c 	.word	0x5802541c
 8003954:	58025430 	.word	0x58025430
 8003958:	58025444 	.word	0x58025444
 800395c:	58025458 	.word	0x58025458
 8003960:	5802546c 	.word	0x5802546c
 8003964:	58025480 	.word	0x58025480
 8003968:	58025494 	.word	0x58025494
 800396c:	fffe000f 	.word	0xfffe000f
 8003970:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68d2      	ldr	r2, [r2, #12]
 8003976:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003978:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003980:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003988:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003990:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003998:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039a0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	4b6e      	ldr	r3, [pc, #440]	; (8003b70 <HAL_DMA_Init+0x650>)
 80039b8:	4413      	add	r3, r2
 80039ba:	4a6e      	ldr	r2, [pc, #440]	; (8003b74 <HAL_DMA_Init+0x654>)
 80039bc:	fba2 2303 	umull	r2, r3, r2, r3
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	009a      	lsls	r2, r3, #2
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f001 fe89 	bl	80056e0 <DMA_CalcBaseAndBitshift>
 80039ce:	4603      	mov	r3, r0
 80039d0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d6:	f003 031f 	and.w	r3, r3, #31
 80039da:	2201      	movs	r2, #1
 80039dc:	409a      	lsls	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	e008      	b.n	80039f6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2240      	movs	r2, #64	; 0x40
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2203      	movs	r2, #3
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0b7      	b.n	8003b66 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a5f      	ldr	r2, [pc, #380]	; (8003b78 <HAL_DMA_Init+0x658>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d072      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a5d      	ldr	r2, [pc, #372]	; (8003b7c <HAL_DMA_Init+0x65c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d06d      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a5c      	ldr	r2, [pc, #368]	; (8003b80 <HAL_DMA_Init+0x660>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d068      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a5a      	ldr	r2, [pc, #360]	; (8003b84 <HAL_DMA_Init+0x664>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d063      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a59      	ldr	r2, [pc, #356]	; (8003b88 <HAL_DMA_Init+0x668>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d05e      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a57      	ldr	r2, [pc, #348]	; (8003b8c <HAL_DMA_Init+0x66c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d059      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a56      	ldr	r2, [pc, #344]	; (8003b90 <HAL_DMA_Init+0x670>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d054      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a54      	ldr	r2, [pc, #336]	; (8003b94 <HAL_DMA_Init+0x674>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d04f      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a53      	ldr	r2, [pc, #332]	; (8003b98 <HAL_DMA_Init+0x678>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d04a      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a51      	ldr	r2, [pc, #324]	; (8003b9c <HAL_DMA_Init+0x67c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d045      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a50      	ldr	r2, [pc, #320]	; (8003ba0 <HAL_DMA_Init+0x680>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d040      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a4e      	ldr	r2, [pc, #312]	; (8003ba4 <HAL_DMA_Init+0x684>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d03b      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a4d      	ldr	r2, [pc, #308]	; (8003ba8 <HAL_DMA_Init+0x688>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d036      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a4b      	ldr	r2, [pc, #300]	; (8003bac <HAL_DMA_Init+0x68c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d031      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a4a      	ldr	r2, [pc, #296]	; (8003bb0 <HAL_DMA_Init+0x690>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d02c      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a48      	ldr	r2, [pc, #288]	; (8003bb4 <HAL_DMA_Init+0x694>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d027      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a47      	ldr	r2, [pc, #284]	; (8003bb8 <HAL_DMA_Init+0x698>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d022      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a45      	ldr	r2, [pc, #276]	; (8003bbc <HAL_DMA_Init+0x69c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01d      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a44      	ldr	r2, [pc, #272]	; (8003bc0 <HAL_DMA_Init+0x6a0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d018      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a42      	ldr	r2, [pc, #264]	; (8003bc4 <HAL_DMA_Init+0x6a4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a41      	ldr	r2, [pc, #260]	; (8003bc8 <HAL_DMA_Init+0x6a8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a3f      	ldr	r2, [pc, #252]	; (8003bcc <HAL_DMA_Init+0x6ac>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a3e      	ldr	r2, [pc, #248]	; (8003bd0 <HAL_DMA_Init+0x6b0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a3c      	ldr	r2, [pc, #240]	; (8003bd4 <HAL_DMA_Init+0x6b4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <HAL_DMA_Init+0x5ca>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <HAL_DMA_Init+0x5cc>
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d032      	beq.n	8003b56 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f001 ff23 	bl	800593c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b80      	cmp	r3, #128	; 0x80
 8003afc:	d102      	bne.n	8003b04 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b18:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d010      	beq.n	8003b44 <HAL_DMA_Init+0x624>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d80c      	bhi.n	8003b44 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f001 ffa0 	bl	8005a70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	e008      	b.n	8003b56 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	a7fdabf8 	.word	0xa7fdabf8
 8003b74:	cccccccd 	.word	0xcccccccd
 8003b78:	40020010 	.word	0x40020010
 8003b7c:	40020028 	.word	0x40020028
 8003b80:	40020040 	.word	0x40020040
 8003b84:	40020058 	.word	0x40020058
 8003b88:	40020070 	.word	0x40020070
 8003b8c:	40020088 	.word	0x40020088
 8003b90:	400200a0 	.word	0x400200a0
 8003b94:	400200b8 	.word	0x400200b8
 8003b98:	40020410 	.word	0x40020410
 8003b9c:	40020428 	.word	0x40020428
 8003ba0:	40020440 	.word	0x40020440
 8003ba4:	40020458 	.word	0x40020458
 8003ba8:	40020470 	.word	0x40020470
 8003bac:	40020488 	.word	0x40020488
 8003bb0:	400204a0 	.word	0x400204a0
 8003bb4:	400204b8 	.word	0x400204b8
 8003bb8:	58025408 	.word	0x58025408
 8003bbc:	5802541c 	.word	0x5802541c
 8003bc0:	58025430 	.word	0x58025430
 8003bc4:	58025444 	.word	0x58025444
 8003bc8:	58025458 	.word	0x58025458
 8003bcc:	5802546c 	.word	0x5802546c
 8003bd0:	58025480 	.word	0x58025480
 8003bd4:	58025494 	.word	0x58025494

08003bd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e226      	b.n	8004042 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_DMA_Start_IT+0x2a>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e21f      	b.n	8004042 <HAL_DMA_Start_IT+0x46a>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	f040 820a 	bne.w	800402c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a68      	ldr	r2, [pc, #416]	; (8003dcc <HAL_DMA_Start_IT+0x1f4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d04a      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a66      	ldr	r2, [pc, #408]	; (8003dd0 <HAL_DMA_Start_IT+0x1f8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d045      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a65      	ldr	r2, [pc, #404]	; (8003dd4 <HAL_DMA_Start_IT+0x1fc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d040      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a63      	ldr	r2, [pc, #396]	; (8003dd8 <HAL_DMA_Start_IT+0x200>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d03b      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a62      	ldr	r2, [pc, #392]	; (8003ddc <HAL_DMA_Start_IT+0x204>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d036      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a60      	ldr	r2, [pc, #384]	; (8003de0 <HAL_DMA_Start_IT+0x208>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d031      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a5f      	ldr	r2, [pc, #380]	; (8003de4 <HAL_DMA_Start_IT+0x20c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d02c      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a5d      	ldr	r2, [pc, #372]	; (8003de8 <HAL_DMA_Start_IT+0x210>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d027      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a5c      	ldr	r2, [pc, #368]	; (8003dec <HAL_DMA_Start_IT+0x214>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d022      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a5a      	ldr	r2, [pc, #360]	; (8003df0 <HAL_DMA_Start_IT+0x218>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d01d      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a59      	ldr	r2, [pc, #356]	; (8003df4 <HAL_DMA_Start_IT+0x21c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d018      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a57      	ldr	r2, [pc, #348]	; (8003df8 <HAL_DMA_Start_IT+0x220>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d013      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a56      	ldr	r2, [pc, #344]	; (8003dfc <HAL_DMA_Start_IT+0x224>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a54      	ldr	r2, [pc, #336]	; (8003e00 <HAL_DMA_Start_IT+0x228>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d009      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a53      	ldr	r2, [pc, #332]	; (8003e04 <HAL_DMA_Start_IT+0x22c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d004      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a51      	ldr	r2, [pc, #324]	; (8003e08 <HAL_DMA_Start_IT+0x230>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d108      	bne.n	8003cd8 <HAL_DMA_Start_IT+0x100>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e007      	b.n	8003ce8 <HAL_DMA_Start_IT+0x110>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0201 	bic.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f001 fb4a 	bl	8005388 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a34      	ldr	r2, [pc, #208]	; (8003dcc <HAL_DMA_Start_IT+0x1f4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d04a      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a33      	ldr	r2, [pc, #204]	; (8003dd0 <HAL_DMA_Start_IT+0x1f8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d045      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a31      	ldr	r2, [pc, #196]	; (8003dd4 <HAL_DMA_Start_IT+0x1fc>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d040      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a30      	ldr	r2, [pc, #192]	; (8003dd8 <HAL_DMA_Start_IT+0x200>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d03b      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a2e      	ldr	r2, [pc, #184]	; (8003ddc <HAL_DMA_Start_IT+0x204>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d036      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a2d      	ldr	r2, [pc, #180]	; (8003de0 <HAL_DMA_Start_IT+0x208>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d031      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a2b      	ldr	r2, [pc, #172]	; (8003de4 <HAL_DMA_Start_IT+0x20c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d02c      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a2a      	ldr	r2, [pc, #168]	; (8003de8 <HAL_DMA_Start_IT+0x210>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d027      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a28      	ldr	r2, [pc, #160]	; (8003dec <HAL_DMA_Start_IT+0x214>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d022      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a27      	ldr	r2, [pc, #156]	; (8003df0 <HAL_DMA_Start_IT+0x218>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d01d      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a25      	ldr	r2, [pc, #148]	; (8003df4 <HAL_DMA_Start_IT+0x21c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d018      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a24      	ldr	r2, [pc, #144]	; (8003df8 <HAL_DMA_Start_IT+0x220>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d013      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a22      	ldr	r2, [pc, #136]	; (8003dfc <HAL_DMA_Start_IT+0x224>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00e      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a21      	ldr	r2, [pc, #132]	; (8003e00 <HAL_DMA_Start_IT+0x228>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d009      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1f      	ldr	r2, [pc, #124]	; (8003e04 <HAL_DMA_Start_IT+0x22c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d004      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1e      	ldr	r2, [pc, #120]	; (8003e08 <HAL_DMA_Start_IT+0x230>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d101      	bne.n	8003d98 <HAL_DMA_Start_IT+0x1c0>
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <HAL_DMA_Start_IT+0x1c2>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d036      	beq.n	8003e0c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f023 021e 	bic.w	r2, r3, #30
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0216 	orr.w	r2, r2, #22
 8003db0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d03e      	beq.n	8003e38 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0208 	orr.w	r2, r2, #8
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	e035      	b.n	8003e38 <HAL_DMA_Start_IT+0x260>
 8003dcc:	40020010 	.word	0x40020010
 8003dd0:	40020028 	.word	0x40020028
 8003dd4:	40020040 	.word	0x40020040
 8003dd8:	40020058 	.word	0x40020058
 8003ddc:	40020070 	.word	0x40020070
 8003de0:	40020088 	.word	0x40020088
 8003de4:	400200a0 	.word	0x400200a0
 8003de8:	400200b8 	.word	0x400200b8
 8003dec:	40020410 	.word	0x40020410
 8003df0:	40020428 	.word	0x40020428
 8003df4:	40020440 	.word	0x40020440
 8003df8:	40020458 	.word	0x40020458
 8003dfc:	40020470 	.word	0x40020470
 8003e00:	40020488 	.word	0x40020488
 8003e04:	400204a0 	.word	0x400204a0
 8003e08:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f023 020e 	bic.w	r2, r3, #14
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 020a 	orr.w	r2, r2, #10
 8003e1e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0204 	orr.w	r2, r2, #4
 8003e36:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a83      	ldr	r2, [pc, #524]	; (800404c <HAL_DMA_Start_IT+0x474>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d072      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a82      	ldr	r2, [pc, #520]	; (8004050 <HAL_DMA_Start_IT+0x478>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d06d      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a80      	ldr	r2, [pc, #512]	; (8004054 <HAL_DMA_Start_IT+0x47c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d068      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a7f      	ldr	r2, [pc, #508]	; (8004058 <HAL_DMA_Start_IT+0x480>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d063      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a7d      	ldr	r2, [pc, #500]	; (800405c <HAL_DMA_Start_IT+0x484>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d05e      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a7c      	ldr	r2, [pc, #496]	; (8004060 <HAL_DMA_Start_IT+0x488>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d059      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a7a      	ldr	r2, [pc, #488]	; (8004064 <HAL_DMA_Start_IT+0x48c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d054      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a79      	ldr	r2, [pc, #484]	; (8004068 <HAL_DMA_Start_IT+0x490>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d04f      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a77      	ldr	r2, [pc, #476]	; (800406c <HAL_DMA_Start_IT+0x494>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d04a      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a76      	ldr	r2, [pc, #472]	; (8004070 <HAL_DMA_Start_IT+0x498>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d045      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a74      	ldr	r2, [pc, #464]	; (8004074 <HAL_DMA_Start_IT+0x49c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d040      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a73      	ldr	r2, [pc, #460]	; (8004078 <HAL_DMA_Start_IT+0x4a0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d03b      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a71      	ldr	r2, [pc, #452]	; (800407c <HAL_DMA_Start_IT+0x4a4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d036      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a70      	ldr	r2, [pc, #448]	; (8004080 <HAL_DMA_Start_IT+0x4a8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d031      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a6e      	ldr	r2, [pc, #440]	; (8004084 <HAL_DMA_Start_IT+0x4ac>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d02c      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a6d      	ldr	r2, [pc, #436]	; (8004088 <HAL_DMA_Start_IT+0x4b0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d027      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a6b      	ldr	r2, [pc, #428]	; (800408c <HAL_DMA_Start_IT+0x4b4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d022      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a6a      	ldr	r2, [pc, #424]	; (8004090 <HAL_DMA_Start_IT+0x4b8>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d01d      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a68      	ldr	r2, [pc, #416]	; (8004094 <HAL_DMA_Start_IT+0x4bc>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d018      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a67      	ldr	r2, [pc, #412]	; (8004098 <HAL_DMA_Start_IT+0x4c0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d013      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a65      	ldr	r2, [pc, #404]	; (800409c <HAL_DMA_Start_IT+0x4c4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00e      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a64      	ldr	r2, [pc, #400]	; (80040a0 <HAL_DMA_Start_IT+0x4c8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d009      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a62      	ldr	r2, [pc, #392]	; (80040a4 <HAL_DMA_Start_IT+0x4cc>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d004      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a61      	ldr	r2, [pc, #388]	; (80040a8 <HAL_DMA_Start_IT+0x4d0>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d101      	bne.n	8003f2c <HAL_DMA_Start_IT+0x354>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <HAL_DMA_Start_IT+0x356>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01a      	beq.n	8003f68 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d007      	beq.n	8003f50 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f4e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f66:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a37      	ldr	r2, [pc, #220]	; (800404c <HAL_DMA_Start_IT+0x474>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d04a      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a36      	ldr	r2, [pc, #216]	; (8004050 <HAL_DMA_Start_IT+0x478>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d045      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a34      	ldr	r2, [pc, #208]	; (8004054 <HAL_DMA_Start_IT+0x47c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d040      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a33      	ldr	r2, [pc, #204]	; (8004058 <HAL_DMA_Start_IT+0x480>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d03b      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a31      	ldr	r2, [pc, #196]	; (800405c <HAL_DMA_Start_IT+0x484>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d036      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a30      	ldr	r2, [pc, #192]	; (8004060 <HAL_DMA_Start_IT+0x488>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d031      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a2e      	ldr	r2, [pc, #184]	; (8004064 <HAL_DMA_Start_IT+0x48c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d02c      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2d      	ldr	r2, [pc, #180]	; (8004068 <HAL_DMA_Start_IT+0x490>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d027      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a2b      	ldr	r2, [pc, #172]	; (800406c <HAL_DMA_Start_IT+0x494>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d022      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2a      	ldr	r2, [pc, #168]	; (8004070 <HAL_DMA_Start_IT+0x498>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d01d      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a28      	ldr	r2, [pc, #160]	; (8004074 <HAL_DMA_Start_IT+0x49c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d018      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a27      	ldr	r2, [pc, #156]	; (8004078 <HAL_DMA_Start_IT+0x4a0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d013      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a25      	ldr	r2, [pc, #148]	; (800407c <HAL_DMA_Start_IT+0x4a4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00e      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a24      	ldr	r2, [pc, #144]	; (8004080 <HAL_DMA_Start_IT+0x4a8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d009      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a22      	ldr	r2, [pc, #136]	; (8004084 <HAL_DMA_Start_IT+0x4ac>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d004      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a21      	ldr	r2, [pc, #132]	; (8004088 <HAL_DMA_Start_IT+0x4b0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d108      	bne.n	800401a <HAL_DMA_Start_IT+0x442>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	e012      	b.n	8004040 <HAL_DMA_Start_IT+0x468>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0201 	orr.w	r2, r2, #1
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e009      	b.n	8004040 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800403a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004040:	7dfb      	ldrb	r3, [r7, #23]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40020010 	.word	0x40020010
 8004050:	40020028 	.word	0x40020028
 8004054:	40020040 	.word	0x40020040
 8004058:	40020058 	.word	0x40020058
 800405c:	40020070 	.word	0x40020070
 8004060:	40020088 	.word	0x40020088
 8004064:	400200a0 	.word	0x400200a0
 8004068:	400200b8 	.word	0x400200b8
 800406c:	40020410 	.word	0x40020410
 8004070:	40020428 	.word	0x40020428
 8004074:	40020440 	.word	0x40020440
 8004078:	40020458 	.word	0x40020458
 800407c:	40020470 	.word	0x40020470
 8004080:	40020488 	.word	0x40020488
 8004084:	400204a0 	.word	0x400204a0
 8004088:	400204b8 	.word	0x400204b8
 800408c:	58025408 	.word	0x58025408
 8004090:	5802541c 	.word	0x5802541c
 8004094:	58025430 	.word	0x58025430
 8004098:	58025444 	.word	0x58025444
 800409c:	58025458 	.word	0x58025458
 80040a0:	5802546c 	.word	0x5802546c
 80040a4:	58025480 	.word	0x58025480
 80040a8:	58025494 	.word	0x58025494

080040ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e205      	b.n	80044ca <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d004      	beq.n	80040d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2280      	movs	r2, #128	; 0x80
 80040ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e1fa      	b.n	80044ca <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a8c      	ldr	r2, [pc, #560]	; (800430c <HAL_DMA_Abort_IT+0x260>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d04a      	beq.n	8004174 <HAL_DMA_Abort_IT+0xc8>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a8b      	ldr	r2, [pc, #556]	; (8004310 <HAL_DMA_Abort_IT+0x264>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d045      	beq.n	8004174 <HAL_DMA_Abort_IT+0xc8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a89      	ldr	r2, [pc, #548]	; (8004314 <HAL_DMA_Abort_IT+0x268>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d040      	beq.n	8004174 <HAL_DMA_Abort_IT+0xc8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a88      	ldr	r2, [pc, #544]	; (8004318 <HAL_DMA_Abort_IT+0x26c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d03b      	beq.n	8004174 <HAL_DMA_Abort_IT+0xc8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a86      	ldr	r2, [pc, #536]	; (800431c <HAL_DMA_Abort_IT+0x270>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d036      	beq.n	8004174 <HAL_DMA_Abort_IT+0xc8>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a85      	ldr	r2, [pc, #532]	; (8004320 <HAL_DMA_Abort_IT+0x274>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d031      	beq.n	8004174 <HAL_DMA_Abort_IT+0xc8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a83      	ldr	r2, [pc, #524]	; (8004324 <HAL_DMA_Abort_IT+0x278>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d02c      	beq.n	8004174 <HAL_DMA_Abort_IT+0xc8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a82      	ldr	r2, [pc, #520]	; (8004328 <HAL_DMA_Abort_IT+0x27c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d027      	beq.n	8004174 <HAL_DMA_Abort_IT+0xc8>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a80      	ldr	r2, [pc, #512]	; (800432c <HAL_DMA_Abort_IT+0x280>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d022      	beq.n	8004174 <HAL_DMA_Abort_IT+0xc8>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a7f      	ldr	r2, [pc, #508]	; (8004330 <HAL_DMA_Abort_IT+0x284>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d01d      	beq.n	8004174 <HAL_DMA_Abort_IT+0xc8>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a7d      	ldr	r2, [pc, #500]	; (8004334 <HAL_DMA_Abort_IT+0x288>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d018      	beq.n	8004174 <HAL_DMA_Abort_IT+0xc8>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a7c      	ldr	r2, [pc, #496]	; (8004338 <HAL_DMA_Abort_IT+0x28c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d013      	beq.n	8004174 <HAL_DMA_Abort_IT+0xc8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a7a      	ldr	r2, [pc, #488]	; (800433c <HAL_DMA_Abort_IT+0x290>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00e      	beq.n	8004174 <HAL_DMA_Abort_IT+0xc8>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a79      	ldr	r2, [pc, #484]	; (8004340 <HAL_DMA_Abort_IT+0x294>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d009      	beq.n	8004174 <HAL_DMA_Abort_IT+0xc8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a77      	ldr	r2, [pc, #476]	; (8004344 <HAL_DMA_Abort_IT+0x298>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d004      	beq.n	8004174 <HAL_DMA_Abort_IT+0xc8>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a76      	ldr	r2, [pc, #472]	; (8004348 <HAL_DMA_Abort_IT+0x29c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d101      	bne.n	8004178 <HAL_DMA_Abort_IT+0xcc>
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <HAL_DMA_Abort_IT+0xce>
 8004178:	2300      	movs	r3, #0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d065      	beq.n	800424a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2204      	movs	r2, #4
 8004182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a60      	ldr	r2, [pc, #384]	; (800430c <HAL_DMA_Abort_IT+0x260>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d04a      	beq.n	8004226 <HAL_DMA_Abort_IT+0x17a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a5e      	ldr	r2, [pc, #376]	; (8004310 <HAL_DMA_Abort_IT+0x264>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d045      	beq.n	8004226 <HAL_DMA_Abort_IT+0x17a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a5d      	ldr	r2, [pc, #372]	; (8004314 <HAL_DMA_Abort_IT+0x268>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d040      	beq.n	8004226 <HAL_DMA_Abort_IT+0x17a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a5b      	ldr	r2, [pc, #364]	; (8004318 <HAL_DMA_Abort_IT+0x26c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d03b      	beq.n	8004226 <HAL_DMA_Abort_IT+0x17a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a5a      	ldr	r2, [pc, #360]	; (800431c <HAL_DMA_Abort_IT+0x270>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d036      	beq.n	8004226 <HAL_DMA_Abort_IT+0x17a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a58      	ldr	r2, [pc, #352]	; (8004320 <HAL_DMA_Abort_IT+0x274>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d031      	beq.n	8004226 <HAL_DMA_Abort_IT+0x17a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a57      	ldr	r2, [pc, #348]	; (8004324 <HAL_DMA_Abort_IT+0x278>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d02c      	beq.n	8004226 <HAL_DMA_Abort_IT+0x17a>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a55      	ldr	r2, [pc, #340]	; (8004328 <HAL_DMA_Abort_IT+0x27c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d027      	beq.n	8004226 <HAL_DMA_Abort_IT+0x17a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a54      	ldr	r2, [pc, #336]	; (800432c <HAL_DMA_Abort_IT+0x280>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d022      	beq.n	8004226 <HAL_DMA_Abort_IT+0x17a>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a52      	ldr	r2, [pc, #328]	; (8004330 <HAL_DMA_Abort_IT+0x284>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01d      	beq.n	8004226 <HAL_DMA_Abort_IT+0x17a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a51      	ldr	r2, [pc, #324]	; (8004334 <HAL_DMA_Abort_IT+0x288>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d018      	beq.n	8004226 <HAL_DMA_Abort_IT+0x17a>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a4f      	ldr	r2, [pc, #316]	; (8004338 <HAL_DMA_Abort_IT+0x28c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <HAL_DMA_Abort_IT+0x17a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a4e      	ldr	r2, [pc, #312]	; (800433c <HAL_DMA_Abort_IT+0x290>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00e      	beq.n	8004226 <HAL_DMA_Abort_IT+0x17a>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a4c      	ldr	r2, [pc, #304]	; (8004340 <HAL_DMA_Abort_IT+0x294>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d009      	beq.n	8004226 <HAL_DMA_Abort_IT+0x17a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a4b      	ldr	r2, [pc, #300]	; (8004344 <HAL_DMA_Abort_IT+0x298>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_DMA_Abort_IT+0x17a>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a49      	ldr	r2, [pc, #292]	; (8004348 <HAL_DMA_Abort_IT+0x29c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d108      	bne.n	8004238 <HAL_DMA_Abort_IT+0x18c>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0201 	bic.w	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	e147      	b.n	80044c8 <HAL_DMA_Abort_IT+0x41c>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0201 	bic.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	e13e      	b.n	80044c8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 020e 	bic.w	r2, r2, #14
 8004258:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a2b      	ldr	r2, [pc, #172]	; (800430c <HAL_DMA_Abort_IT+0x260>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d04a      	beq.n	80042fa <HAL_DMA_Abort_IT+0x24e>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a29      	ldr	r2, [pc, #164]	; (8004310 <HAL_DMA_Abort_IT+0x264>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d045      	beq.n	80042fa <HAL_DMA_Abort_IT+0x24e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a28      	ldr	r2, [pc, #160]	; (8004314 <HAL_DMA_Abort_IT+0x268>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d040      	beq.n	80042fa <HAL_DMA_Abort_IT+0x24e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a26      	ldr	r2, [pc, #152]	; (8004318 <HAL_DMA_Abort_IT+0x26c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d03b      	beq.n	80042fa <HAL_DMA_Abort_IT+0x24e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a25      	ldr	r2, [pc, #148]	; (800431c <HAL_DMA_Abort_IT+0x270>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d036      	beq.n	80042fa <HAL_DMA_Abort_IT+0x24e>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a23      	ldr	r2, [pc, #140]	; (8004320 <HAL_DMA_Abort_IT+0x274>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d031      	beq.n	80042fa <HAL_DMA_Abort_IT+0x24e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a22      	ldr	r2, [pc, #136]	; (8004324 <HAL_DMA_Abort_IT+0x278>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d02c      	beq.n	80042fa <HAL_DMA_Abort_IT+0x24e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a20      	ldr	r2, [pc, #128]	; (8004328 <HAL_DMA_Abort_IT+0x27c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d027      	beq.n	80042fa <HAL_DMA_Abort_IT+0x24e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1f      	ldr	r2, [pc, #124]	; (800432c <HAL_DMA_Abort_IT+0x280>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d022      	beq.n	80042fa <HAL_DMA_Abort_IT+0x24e>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1d      	ldr	r2, [pc, #116]	; (8004330 <HAL_DMA_Abort_IT+0x284>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d01d      	beq.n	80042fa <HAL_DMA_Abort_IT+0x24e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <HAL_DMA_Abort_IT+0x288>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d018      	beq.n	80042fa <HAL_DMA_Abort_IT+0x24e>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1a      	ldr	r2, [pc, #104]	; (8004338 <HAL_DMA_Abort_IT+0x28c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d013      	beq.n	80042fa <HAL_DMA_Abort_IT+0x24e>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a19      	ldr	r2, [pc, #100]	; (800433c <HAL_DMA_Abort_IT+0x290>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00e      	beq.n	80042fa <HAL_DMA_Abort_IT+0x24e>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a17      	ldr	r2, [pc, #92]	; (8004340 <HAL_DMA_Abort_IT+0x294>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d009      	beq.n	80042fa <HAL_DMA_Abort_IT+0x24e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a16      	ldr	r2, [pc, #88]	; (8004344 <HAL_DMA_Abort_IT+0x298>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d004      	beq.n	80042fa <HAL_DMA_Abort_IT+0x24e>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a14      	ldr	r2, [pc, #80]	; (8004348 <HAL_DMA_Abort_IT+0x29c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d128      	bne.n	800434c <HAL_DMA_Abort_IT+0x2a0>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0201 	bic.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	e027      	b.n	800435c <HAL_DMA_Abort_IT+0x2b0>
 800430c:	40020010 	.word	0x40020010
 8004310:	40020028 	.word	0x40020028
 8004314:	40020040 	.word	0x40020040
 8004318:	40020058 	.word	0x40020058
 800431c:	40020070 	.word	0x40020070
 8004320:	40020088 	.word	0x40020088
 8004324:	400200a0 	.word	0x400200a0
 8004328:	400200b8 	.word	0x400200b8
 800432c:	40020410 	.word	0x40020410
 8004330:	40020428 	.word	0x40020428
 8004334:	40020440 	.word	0x40020440
 8004338:	40020458 	.word	0x40020458
 800433c:	40020470 	.word	0x40020470
 8004340:	40020488 	.word	0x40020488
 8004344:	400204a0 	.word	0x400204a0
 8004348:	400204b8 	.word	0x400204b8
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0201 	bic.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a5c      	ldr	r2, [pc, #368]	; (80044d4 <HAL_DMA_Abort_IT+0x428>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d072      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a5b      	ldr	r2, [pc, #364]	; (80044d8 <HAL_DMA_Abort_IT+0x42c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d06d      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a59      	ldr	r2, [pc, #356]	; (80044dc <HAL_DMA_Abort_IT+0x430>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d068      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a58      	ldr	r2, [pc, #352]	; (80044e0 <HAL_DMA_Abort_IT+0x434>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d063      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a56      	ldr	r2, [pc, #344]	; (80044e4 <HAL_DMA_Abort_IT+0x438>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d05e      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a55      	ldr	r2, [pc, #340]	; (80044e8 <HAL_DMA_Abort_IT+0x43c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d059      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a53      	ldr	r2, [pc, #332]	; (80044ec <HAL_DMA_Abort_IT+0x440>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d054      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a52      	ldr	r2, [pc, #328]	; (80044f0 <HAL_DMA_Abort_IT+0x444>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d04f      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a50      	ldr	r2, [pc, #320]	; (80044f4 <HAL_DMA_Abort_IT+0x448>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d04a      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a4f      	ldr	r2, [pc, #316]	; (80044f8 <HAL_DMA_Abort_IT+0x44c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d045      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a4d      	ldr	r2, [pc, #308]	; (80044fc <HAL_DMA_Abort_IT+0x450>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d040      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a4c      	ldr	r2, [pc, #304]	; (8004500 <HAL_DMA_Abort_IT+0x454>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d03b      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a4a      	ldr	r2, [pc, #296]	; (8004504 <HAL_DMA_Abort_IT+0x458>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d036      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a49      	ldr	r2, [pc, #292]	; (8004508 <HAL_DMA_Abort_IT+0x45c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d031      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a47      	ldr	r2, [pc, #284]	; (800450c <HAL_DMA_Abort_IT+0x460>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d02c      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a46      	ldr	r2, [pc, #280]	; (8004510 <HAL_DMA_Abort_IT+0x464>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d027      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a44      	ldr	r2, [pc, #272]	; (8004514 <HAL_DMA_Abort_IT+0x468>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d022      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a43      	ldr	r2, [pc, #268]	; (8004518 <HAL_DMA_Abort_IT+0x46c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d01d      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a41      	ldr	r2, [pc, #260]	; (800451c <HAL_DMA_Abort_IT+0x470>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d018      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a40      	ldr	r2, [pc, #256]	; (8004520 <HAL_DMA_Abort_IT+0x474>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d013      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a3e      	ldr	r2, [pc, #248]	; (8004524 <HAL_DMA_Abort_IT+0x478>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00e      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a3d      	ldr	r2, [pc, #244]	; (8004528 <HAL_DMA_Abort_IT+0x47c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d009      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a3b      	ldr	r2, [pc, #236]	; (800452c <HAL_DMA_Abort_IT+0x480>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <HAL_DMA_Abort_IT+0x3a0>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a3a      	ldr	r2, [pc, #232]	; (8004530 <HAL_DMA_Abort_IT+0x484>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d101      	bne.n	8004450 <HAL_DMA_Abort_IT+0x3a4>
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <HAL_DMA_Abort_IT+0x3a6>
 8004450:	2300      	movs	r3, #0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d028      	beq.n	80044a8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004460:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004464:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	2201      	movs	r2, #1
 8004476:	409a      	lsls	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004484:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800449c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80044a6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40020010 	.word	0x40020010
 80044d8:	40020028 	.word	0x40020028
 80044dc:	40020040 	.word	0x40020040
 80044e0:	40020058 	.word	0x40020058
 80044e4:	40020070 	.word	0x40020070
 80044e8:	40020088 	.word	0x40020088
 80044ec:	400200a0 	.word	0x400200a0
 80044f0:	400200b8 	.word	0x400200b8
 80044f4:	40020410 	.word	0x40020410
 80044f8:	40020428 	.word	0x40020428
 80044fc:	40020440 	.word	0x40020440
 8004500:	40020458 	.word	0x40020458
 8004504:	40020470 	.word	0x40020470
 8004508:	40020488 	.word	0x40020488
 800450c:	400204a0 	.word	0x400204a0
 8004510:	400204b8 	.word	0x400204b8
 8004514:	58025408 	.word	0x58025408
 8004518:	5802541c 	.word	0x5802541c
 800451c:	58025430 	.word	0x58025430
 8004520:	58025444 	.word	0x58025444
 8004524:	58025458 	.word	0x58025458
 8004528:	5802546c 	.word	0x5802546c
 800452c:	58025480 	.word	0x58025480
 8004530:	58025494 	.word	0x58025494

08004534 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08a      	sub	sp, #40	; 0x28
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004540:	4b67      	ldr	r3, [pc, #412]	; (80046e0 <HAL_DMA_IRQHandler+0x1ac>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a67      	ldr	r2, [pc, #412]	; (80046e4 <HAL_DMA_IRQHandler+0x1b0>)
 8004546:	fba2 2303 	umull	r2, r3, r2, r3
 800454a:	0a9b      	lsrs	r3, r3, #10
 800454c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004552:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004558:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a5f      	ldr	r2, [pc, #380]	; (80046e8 <HAL_DMA_IRQHandler+0x1b4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d04a      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a5d      	ldr	r2, [pc, #372]	; (80046ec <HAL_DMA_IRQHandler+0x1b8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d045      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a5c      	ldr	r2, [pc, #368]	; (80046f0 <HAL_DMA_IRQHandler+0x1bc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d040      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a5a      	ldr	r2, [pc, #360]	; (80046f4 <HAL_DMA_IRQHandler+0x1c0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d03b      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a59      	ldr	r2, [pc, #356]	; (80046f8 <HAL_DMA_IRQHandler+0x1c4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d036      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a57      	ldr	r2, [pc, #348]	; (80046fc <HAL_DMA_IRQHandler+0x1c8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d031      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a56      	ldr	r2, [pc, #344]	; (8004700 <HAL_DMA_IRQHandler+0x1cc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d02c      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a54      	ldr	r2, [pc, #336]	; (8004704 <HAL_DMA_IRQHandler+0x1d0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d027      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a53      	ldr	r2, [pc, #332]	; (8004708 <HAL_DMA_IRQHandler+0x1d4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d022      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a51      	ldr	r2, [pc, #324]	; (800470c <HAL_DMA_IRQHandler+0x1d8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d01d      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a50      	ldr	r2, [pc, #320]	; (8004710 <HAL_DMA_IRQHandler+0x1dc>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d018      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a4e      	ldr	r2, [pc, #312]	; (8004714 <HAL_DMA_IRQHandler+0x1e0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d013      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a4d      	ldr	r2, [pc, #308]	; (8004718 <HAL_DMA_IRQHandler+0x1e4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00e      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a4b      	ldr	r2, [pc, #300]	; (800471c <HAL_DMA_IRQHandler+0x1e8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d009      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a4a      	ldr	r2, [pc, #296]	; (8004720 <HAL_DMA_IRQHandler+0x1ec>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d004      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a48      	ldr	r2, [pc, #288]	; (8004724 <HAL_DMA_IRQHandler+0x1f0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d101      	bne.n	800460a <HAL_DMA_IRQHandler+0xd6>
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <HAL_DMA_IRQHandler+0xd8>
 800460a:	2300      	movs	r3, #0
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 842b 	beq.w	8004e68 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004616:	f003 031f 	and.w	r3, r3, #31
 800461a:	2208      	movs	r2, #8
 800461c:	409a      	lsls	r2, r3
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80a2 	beq.w	800476c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a2e      	ldr	r2, [pc, #184]	; (80046e8 <HAL_DMA_IRQHandler+0x1b4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d04a      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a2d      	ldr	r2, [pc, #180]	; (80046ec <HAL_DMA_IRQHandler+0x1b8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d045      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a2b      	ldr	r2, [pc, #172]	; (80046f0 <HAL_DMA_IRQHandler+0x1bc>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d040      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a2a      	ldr	r2, [pc, #168]	; (80046f4 <HAL_DMA_IRQHandler+0x1c0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d03b      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a28      	ldr	r2, [pc, #160]	; (80046f8 <HAL_DMA_IRQHandler+0x1c4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d036      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a27      	ldr	r2, [pc, #156]	; (80046fc <HAL_DMA_IRQHandler+0x1c8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d031      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a25      	ldr	r2, [pc, #148]	; (8004700 <HAL_DMA_IRQHandler+0x1cc>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d02c      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a24      	ldr	r2, [pc, #144]	; (8004704 <HAL_DMA_IRQHandler+0x1d0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d027      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a22      	ldr	r2, [pc, #136]	; (8004708 <HAL_DMA_IRQHandler+0x1d4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d022      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a21      	ldr	r2, [pc, #132]	; (800470c <HAL_DMA_IRQHandler+0x1d8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d01d      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1f      	ldr	r2, [pc, #124]	; (8004710 <HAL_DMA_IRQHandler+0x1dc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d018      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1e      	ldr	r2, [pc, #120]	; (8004714 <HAL_DMA_IRQHandler+0x1e0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d013      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1c      	ldr	r2, [pc, #112]	; (8004718 <HAL_DMA_IRQHandler+0x1e4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00e      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1b      	ldr	r2, [pc, #108]	; (800471c <HAL_DMA_IRQHandler+0x1e8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d009      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a19      	ldr	r2, [pc, #100]	; (8004720 <HAL_DMA_IRQHandler+0x1ec>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d004      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a18      	ldr	r2, [pc, #96]	; (8004724 <HAL_DMA_IRQHandler+0x1f0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d12f      	bne.n	8004728 <HAL_DMA_IRQHandler+0x1f4>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bf14      	ite	ne
 80046d6:	2301      	movne	r3, #1
 80046d8:	2300      	moveq	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	e02e      	b.n	800473c <HAL_DMA_IRQHandler+0x208>
 80046de:	bf00      	nop
 80046e0:	24000020 	.word	0x24000020
 80046e4:	1b4e81b5 	.word	0x1b4e81b5
 80046e8:	40020010 	.word	0x40020010
 80046ec:	40020028 	.word	0x40020028
 80046f0:	40020040 	.word	0x40020040
 80046f4:	40020058 	.word	0x40020058
 80046f8:	40020070 	.word	0x40020070
 80046fc:	40020088 	.word	0x40020088
 8004700:	400200a0 	.word	0x400200a0
 8004704:	400200b8 	.word	0x400200b8
 8004708:	40020410 	.word	0x40020410
 800470c:	40020428 	.word	0x40020428
 8004710:	40020440 	.word	0x40020440
 8004714:	40020458 	.word	0x40020458
 8004718:	40020470 	.word	0x40020470
 800471c:	40020488 	.word	0x40020488
 8004720:	400204a0 	.word	0x400204a0
 8004724:	400204b8 	.word	0x400204b8
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	bf14      	ite	ne
 8004736:	2301      	movne	r3, #1
 8004738:	2300      	moveq	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d015      	beq.n	800476c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0204 	bic.w	r2, r2, #4
 800474e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004754:	f003 031f 	and.w	r3, r3, #31
 8004758:	2208      	movs	r2, #8
 800475a:	409a      	lsls	r2, r3
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004764:	f043 0201 	orr.w	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	fa22 f303 	lsr.w	r3, r2, r3
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d06e      	beq.n	8004860 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a69      	ldr	r2, [pc, #420]	; (800492c <HAL_DMA_IRQHandler+0x3f8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d04a      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a67      	ldr	r2, [pc, #412]	; (8004930 <HAL_DMA_IRQHandler+0x3fc>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d045      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a66      	ldr	r2, [pc, #408]	; (8004934 <HAL_DMA_IRQHandler+0x400>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d040      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a64      	ldr	r2, [pc, #400]	; (8004938 <HAL_DMA_IRQHandler+0x404>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d03b      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a63      	ldr	r2, [pc, #396]	; (800493c <HAL_DMA_IRQHandler+0x408>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d036      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a61      	ldr	r2, [pc, #388]	; (8004940 <HAL_DMA_IRQHandler+0x40c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d031      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a60      	ldr	r2, [pc, #384]	; (8004944 <HAL_DMA_IRQHandler+0x410>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d02c      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a5e      	ldr	r2, [pc, #376]	; (8004948 <HAL_DMA_IRQHandler+0x414>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d027      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a5d      	ldr	r2, [pc, #372]	; (800494c <HAL_DMA_IRQHandler+0x418>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d022      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a5b      	ldr	r2, [pc, #364]	; (8004950 <HAL_DMA_IRQHandler+0x41c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d01d      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a5a      	ldr	r2, [pc, #360]	; (8004954 <HAL_DMA_IRQHandler+0x420>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d018      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a58      	ldr	r2, [pc, #352]	; (8004958 <HAL_DMA_IRQHandler+0x424>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d013      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a57      	ldr	r2, [pc, #348]	; (800495c <HAL_DMA_IRQHandler+0x428>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00e      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a55      	ldr	r2, [pc, #340]	; (8004960 <HAL_DMA_IRQHandler+0x42c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d009      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a54      	ldr	r2, [pc, #336]	; (8004964 <HAL_DMA_IRQHandler+0x430>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d004      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a52      	ldr	r2, [pc, #328]	; (8004968 <HAL_DMA_IRQHandler+0x434>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d10a      	bne.n	8004838 <HAL_DMA_IRQHandler+0x304>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482c:	2b00      	cmp	r3, #0
 800482e:	bf14      	ite	ne
 8004830:	2301      	movne	r3, #1
 8004832:	2300      	moveq	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	e003      	b.n	8004840 <HAL_DMA_IRQHandler+0x30c>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2300      	movs	r3, #0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00d      	beq.n	8004860 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	2201      	movs	r2, #1
 800484e:	409a      	lsls	r2, r3
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	f043 0202 	orr.w	r2, r3, #2
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	2204      	movs	r2, #4
 800486a:	409a      	lsls	r2, r3
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 808f 	beq.w	8004994 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a2c      	ldr	r2, [pc, #176]	; (800492c <HAL_DMA_IRQHandler+0x3f8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d04a      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a2a      	ldr	r2, [pc, #168]	; (8004930 <HAL_DMA_IRQHandler+0x3fc>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d045      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a29      	ldr	r2, [pc, #164]	; (8004934 <HAL_DMA_IRQHandler+0x400>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d040      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a27      	ldr	r2, [pc, #156]	; (8004938 <HAL_DMA_IRQHandler+0x404>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d03b      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a26      	ldr	r2, [pc, #152]	; (800493c <HAL_DMA_IRQHandler+0x408>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d036      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a24      	ldr	r2, [pc, #144]	; (8004940 <HAL_DMA_IRQHandler+0x40c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d031      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a23      	ldr	r2, [pc, #140]	; (8004944 <HAL_DMA_IRQHandler+0x410>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d02c      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a21      	ldr	r2, [pc, #132]	; (8004948 <HAL_DMA_IRQHandler+0x414>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d027      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a20      	ldr	r2, [pc, #128]	; (800494c <HAL_DMA_IRQHandler+0x418>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d022      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1e      	ldr	r2, [pc, #120]	; (8004950 <HAL_DMA_IRQHandler+0x41c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d01d      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <HAL_DMA_IRQHandler+0x420>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d018      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1b      	ldr	r2, [pc, #108]	; (8004958 <HAL_DMA_IRQHandler+0x424>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d013      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1a      	ldr	r2, [pc, #104]	; (800495c <HAL_DMA_IRQHandler+0x428>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00e      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a18      	ldr	r2, [pc, #96]	; (8004960 <HAL_DMA_IRQHandler+0x42c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d009      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a17      	ldr	r2, [pc, #92]	; (8004964 <HAL_DMA_IRQHandler+0x430>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d004      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a15      	ldr	r2, [pc, #84]	; (8004968 <HAL_DMA_IRQHandler+0x434>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d12a      	bne.n	800496c <HAL_DMA_IRQHandler+0x438>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	bf14      	ite	ne
 8004924:	2301      	movne	r3, #1
 8004926:	2300      	moveq	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	e023      	b.n	8004974 <HAL_DMA_IRQHandler+0x440>
 800492c:	40020010 	.word	0x40020010
 8004930:	40020028 	.word	0x40020028
 8004934:	40020040 	.word	0x40020040
 8004938:	40020058 	.word	0x40020058
 800493c:	40020070 	.word	0x40020070
 8004940:	40020088 	.word	0x40020088
 8004944:	400200a0 	.word	0x400200a0
 8004948:	400200b8 	.word	0x400200b8
 800494c:	40020410 	.word	0x40020410
 8004950:	40020428 	.word	0x40020428
 8004954:	40020440 	.word	0x40020440
 8004958:	40020458 	.word	0x40020458
 800495c:	40020470 	.word	0x40020470
 8004960:	40020488 	.word	0x40020488
 8004964:	400204a0 	.word	0x400204a0
 8004968:	400204b8 	.word	0x400204b8
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00d      	beq.n	8004994 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	2204      	movs	r2, #4
 8004982:	409a      	lsls	r2, r3
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	f043 0204 	orr.w	r2, r3, #4
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	2210      	movs	r2, #16
 800499e:	409a      	lsls	r2, r3
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80a6 	beq.w	8004af6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a85      	ldr	r2, [pc, #532]	; (8004bc4 <HAL_DMA_IRQHandler+0x690>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d04a      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a83      	ldr	r2, [pc, #524]	; (8004bc8 <HAL_DMA_IRQHandler+0x694>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d045      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a82      	ldr	r2, [pc, #520]	; (8004bcc <HAL_DMA_IRQHandler+0x698>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d040      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a80      	ldr	r2, [pc, #512]	; (8004bd0 <HAL_DMA_IRQHandler+0x69c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d03b      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a7f      	ldr	r2, [pc, #508]	; (8004bd4 <HAL_DMA_IRQHandler+0x6a0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d036      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a7d      	ldr	r2, [pc, #500]	; (8004bd8 <HAL_DMA_IRQHandler+0x6a4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d031      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a7c      	ldr	r2, [pc, #496]	; (8004bdc <HAL_DMA_IRQHandler+0x6a8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d02c      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a7a      	ldr	r2, [pc, #488]	; (8004be0 <HAL_DMA_IRQHandler+0x6ac>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d027      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a79      	ldr	r2, [pc, #484]	; (8004be4 <HAL_DMA_IRQHandler+0x6b0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d022      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a77      	ldr	r2, [pc, #476]	; (8004be8 <HAL_DMA_IRQHandler+0x6b4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d01d      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a76      	ldr	r2, [pc, #472]	; (8004bec <HAL_DMA_IRQHandler+0x6b8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d018      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a74      	ldr	r2, [pc, #464]	; (8004bf0 <HAL_DMA_IRQHandler+0x6bc>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d013      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a73      	ldr	r2, [pc, #460]	; (8004bf4 <HAL_DMA_IRQHandler+0x6c0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d00e      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a71      	ldr	r2, [pc, #452]	; (8004bf8 <HAL_DMA_IRQHandler+0x6c4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d009      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a70      	ldr	r2, [pc, #448]	; (8004bfc <HAL_DMA_IRQHandler+0x6c8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d004      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a6e      	ldr	r2, [pc, #440]	; (8004c00 <HAL_DMA_IRQHandler+0x6cc>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d10a      	bne.n	8004a60 <HAL_DMA_IRQHandler+0x52c>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	bf14      	ite	ne
 8004a58:	2301      	movne	r3, #1
 8004a5a:	2300      	moveq	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e009      	b.n	8004a74 <HAL_DMA_IRQHandler+0x540>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	bf14      	ite	ne
 8004a6e:	2301      	movne	r3, #1
 8004a70:	2300      	moveq	r3, #0
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d03e      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	2210      	movs	r2, #16
 8004a82:	409a      	lsls	r2, r3
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d018      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d108      	bne.n	8004ab6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d024      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	4798      	blx	r3
 8004ab4:	e01f      	b.n	8004af6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d01b      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	4798      	blx	r3
 8004ac6:	e016      	b.n	8004af6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d107      	bne.n	8004ae6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0208 	bic.w	r2, r2, #8
 8004ae4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	2220      	movs	r2, #32
 8004b00:	409a      	lsls	r2, r3
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8110 	beq.w	8004d2c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a2c      	ldr	r2, [pc, #176]	; (8004bc4 <HAL_DMA_IRQHandler+0x690>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d04a      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a2b      	ldr	r2, [pc, #172]	; (8004bc8 <HAL_DMA_IRQHandler+0x694>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d045      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a29      	ldr	r2, [pc, #164]	; (8004bcc <HAL_DMA_IRQHandler+0x698>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d040      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a28      	ldr	r2, [pc, #160]	; (8004bd0 <HAL_DMA_IRQHandler+0x69c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d03b      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a26      	ldr	r2, [pc, #152]	; (8004bd4 <HAL_DMA_IRQHandler+0x6a0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d036      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a25      	ldr	r2, [pc, #148]	; (8004bd8 <HAL_DMA_IRQHandler+0x6a4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d031      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a23      	ldr	r2, [pc, #140]	; (8004bdc <HAL_DMA_IRQHandler+0x6a8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d02c      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a22      	ldr	r2, [pc, #136]	; (8004be0 <HAL_DMA_IRQHandler+0x6ac>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d027      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a20      	ldr	r2, [pc, #128]	; (8004be4 <HAL_DMA_IRQHandler+0x6b0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d022      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1f      	ldr	r2, [pc, #124]	; (8004be8 <HAL_DMA_IRQHandler+0x6b4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d01d      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1d      	ldr	r2, [pc, #116]	; (8004bec <HAL_DMA_IRQHandler+0x6b8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d018      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1c      	ldr	r2, [pc, #112]	; (8004bf0 <HAL_DMA_IRQHandler+0x6bc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d013      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1a      	ldr	r2, [pc, #104]	; (8004bf4 <HAL_DMA_IRQHandler+0x6c0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00e      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a19      	ldr	r2, [pc, #100]	; (8004bf8 <HAL_DMA_IRQHandler+0x6c4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d009      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <HAL_DMA_IRQHandler+0x6c8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d004      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a16      	ldr	r2, [pc, #88]	; (8004c00 <HAL_DMA_IRQHandler+0x6cc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d12b      	bne.n	8004c04 <HAL_DMA_IRQHandler+0x6d0>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0310 	and.w	r3, r3, #16
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	bf14      	ite	ne
 8004bba:	2301      	movne	r3, #1
 8004bbc:	2300      	moveq	r3, #0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	e02a      	b.n	8004c18 <HAL_DMA_IRQHandler+0x6e4>
 8004bc2:	bf00      	nop
 8004bc4:	40020010 	.word	0x40020010
 8004bc8:	40020028 	.word	0x40020028
 8004bcc:	40020040 	.word	0x40020040
 8004bd0:	40020058 	.word	0x40020058
 8004bd4:	40020070 	.word	0x40020070
 8004bd8:	40020088 	.word	0x40020088
 8004bdc:	400200a0 	.word	0x400200a0
 8004be0:	400200b8 	.word	0x400200b8
 8004be4:	40020410 	.word	0x40020410
 8004be8:	40020428 	.word	0x40020428
 8004bec:	40020440 	.word	0x40020440
 8004bf0:	40020458 	.word	0x40020458
 8004bf4:	40020470 	.word	0x40020470
 8004bf8:	40020488 	.word	0x40020488
 8004bfc:	400204a0 	.word	0x400204a0
 8004c00:	400204b8 	.word	0x400204b8
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	bf14      	ite	ne
 8004c12:	2301      	movne	r3, #1
 8004c14:	2300      	moveq	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 8087 	beq.w	8004d2c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c22:	f003 031f 	and.w	r3, r3, #31
 8004c26:	2220      	movs	r2, #32
 8004c28:	409a      	lsls	r2, r3
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d139      	bne.n	8004cae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0216 	bic.w	r2, r2, #22
 8004c48:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695a      	ldr	r2, [r3, #20]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c58:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d103      	bne.n	8004c6a <HAL_DMA_IRQHandler+0x736>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0208 	bic.w	r2, r2, #8
 8004c78:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	223f      	movs	r2, #63	; 0x3f
 8004c84:	409a      	lsls	r2, r3
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 834a 	beq.w	8005338 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	4798      	blx	r3
          }
          return;
 8004cac:	e344      	b.n	8005338 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d018      	beq.n	8004cee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d108      	bne.n	8004cdc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d02c      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	4798      	blx	r3
 8004cda:	e027      	b.n	8004d2c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d023      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	4798      	blx	r3
 8004cec:	e01e      	b.n	8004d2c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10f      	bne.n	8004d1c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0210 	bic.w	r2, r2, #16
 8004d0a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 8306 	beq.w	8005342 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 8088 	beq.w	8004e54 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2204      	movs	r2, #4
 8004d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a7a      	ldr	r2, [pc, #488]	; (8004f3c <HAL_DMA_IRQHandler+0xa08>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d04a      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a79      	ldr	r2, [pc, #484]	; (8004f40 <HAL_DMA_IRQHandler+0xa0c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d045      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a77      	ldr	r2, [pc, #476]	; (8004f44 <HAL_DMA_IRQHandler+0xa10>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d040      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a76      	ldr	r2, [pc, #472]	; (8004f48 <HAL_DMA_IRQHandler+0xa14>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d03b      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a74      	ldr	r2, [pc, #464]	; (8004f4c <HAL_DMA_IRQHandler+0xa18>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d036      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a73      	ldr	r2, [pc, #460]	; (8004f50 <HAL_DMA_IRQHandler+0xa1c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d031      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a71      	ldr	r2, [pc, #452]	; (8004f54 <HAL_DMA_IRQHandler+0xa20>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d02c      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a70      	ldr	r2, [pc, #448]	; (8004f58 <HAL_DMA_IRQHandler+0xa24>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d027      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a6e      	ldr	r2, [pc, #440]	; (8004f5c <HAL_DMA_IRQHandler+0xa28>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d022      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a6d      	ldr	r2, [pc, #436]	; (8004f60 <HAL_DMA_IRQHandler+0xa2c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d01d      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a6b      	ldr	r2, [pc, #428]	; (8004f64 <HAL_DMA_IRQHandler+0xa30>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d018      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a6a      	ldr	r2, [pc, #424]	; (8004f68 <HAL_DMA_IRQHandler+0xa34>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d013      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a68      	ldr	r2, [pc, #416]	; (8004f6c <HAL_DMA_IRQHandler+0xa38>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00e      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a67      	ldr	r2, [pc, #412]	; (8004f70 <HAL_DMA_IRQHandler+0xa3c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d009      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a65      	ldr	r2, [pc, #404]	; (8004f74 <HAL_DMA_IRQHandler+0xa40>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d004      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a64      	ldr	r2, [pc, #400]	; (8004f78 <HAL_DMA_IRQHandler+0xa44>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d108      	bne.n	8004dfe <HAL_DMA_IRQHandler+0x8ca>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0201 	bic.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	e007      	b.n	8004e0e <HAL_DMA_IRQHandler+0x8da>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0201 	bic.w	r2, r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d307      	bcc.n	8004e2a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1f2      	bne.n	8004e0e <HAL_DMA_IRQHandler+0x8da>
 8004e28:	e000      	b.n	8004e2c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004e2a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d004      	beq.n	8004e4c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2203      	movs	r2, #3
 8004e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004e4a:	e003      	b.n	8004e54 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 8272 	beq.w	8005342 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	4798      	blx	r3
 8004e66:	e26c      	b.n	8005342 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a43      	ldr	r2, [pc, #268]	; (8004f7c <HAL_DMA_IRQHandler+0xa48>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d022      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x984>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a42      	ldr	r2, [pc, #264]	; (8004f80 <HAL_DMA_IRQHandler+0xa4c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d01d      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x984>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a40      	ldr	r2, [pc, #256]	; (8004f84 <HAL_DMA_IRQHandler+0xa50>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d018      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x984>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a3f      	ldr	r2, [pc, #252]	; (8004f88 <HAL_DMA_IRQHandler+0xa54>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d013      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x984>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a3d      	ldr	r2, [pc, #244]	; (8004f8c <HAL_DMA_IRQHandler+0xa58>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00e      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x984>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a3c      	ldr	r2, [pc, #240]	; (8004f90 <HAL_DMA_IRQHandler+0xa5c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d009      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x984>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a3a      	ldr	r2, [pc, #232]	; (8004f94 <HAL_DMA_IRQHandler+0xa60>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d004      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x984>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a39      	ldr	r2, [pc, #228]	; (8004f98 <HAL_DMA_IRQHandler+0xa64>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d101      	bne.n	8004ebc <HAL_DMA_IRQHandler+0x988>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e000      	b.n	8004ebe <HAL_DMA_IRQHandler+0x98a>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 823f 	beq.w	8005342 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	2204      	movs	r2, #4
 8004ed6:	409a      	lsls	r2, r3
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	4013      	ands	r3, r2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 80cd 	beq.w	800507c <HAL_DMA_IRQHandler+0xb48>
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 80c7 	beq.w	800507c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef2:	f003 031f 	and.w	r3, r3, #31
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	409a      	lsls	r2, r3
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d049      	beq.n	8004f9c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d109      	bne.n	8004f26 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 8210 	beq.w	800533c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f24:	e20a      	b.n	800533c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 8206 	beq.w	800533c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f38:	e200      	b.n	800533c <HAL_DMA_IRQHandler+0xe08>
 8004f3a:	bf00      	nop
 8004f3c:	40020010 	.word	0x40020010
 8004f40:	40020028 	.word	0x40020028
 8004f44:	40020040 	.word	0x40020040
 8004f48:	40020058 	.word	0x40020058
 8004f4c:	40020070 	.word	0x40020070
 8004f50:	40020088 	.word	0x40020088
 8004f54:	400200a0 	.word	0x400200a0
 8004f58:	400200b8 	.word	0x400200b8
 8004f5c:	40020410 	.word	0x40020410
 8004f60:	40020428 	.word	0x40020428
 8004f64:	40020440 	.word	0x40020440
 8004f68:	40020458 	.word	0x40020458
 8004f6c:	40020470 	.word	0x40020470
 8004f70:	40020488 	.word	0x40020488
 8004f74:	400204a0 	.word	0x400204a0
 8004f78:	400204b8 	.word	0x400204b8
 8004f7c:	58025408 	.word	0x58025408
 8004f80:	5802541c 	.word	0x5802541c
 8004f84:	58025430 	.word	0x58025430
 8004f88:	58025444 	.word	0x58025444
 8004f8c:	58025458 	.word	0x58025458
 8004f90:	5802546c 	.word	0x5802546c
 8004f94:	58025480 	.word	0x58025480
 8004f98:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d160      	bne.n	8005068 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a8c      	ldr	r2, [pc, #560]	; (80051dc <HAL_DMA_IRQHandler+0xca8>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d04a      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a8a      	ldr	r2, [pc, #552]	; (80051e0 <HAL_DMA_IRQHandler+0xcac>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d045      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a89      	ldr	r2, [pc, #548]	; (80051e4 <HAL_DMA_IRQHandler+0xcb0>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d040      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a87      	ldr	r2, [pc, #540]	; (80051e8 <HAL_DMA_IRQHandler+0xcb4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d03b      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a86      	ldr	r2, [pc, #536]	; (80051ec <HAL_DMA_IRQHandler+0xcb8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d036      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a84      	ldr	r2, [pc, #528]	; (80051f0 <HAL_DMA_IRQHandler+0xcbc>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d031      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a83      	ldr	r2, [pc, #524]	; (80051f4 <HAL_DMA_IRQHandler+0xcc0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d02c      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a81      	ldr	r2, [pc, #516]	; (80051f8 <HAL_DMA_IRQHandler+0xcc4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d027      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a80      	ldr	r2, [pc, #512]	; (80051fc <HAL_DMA_IRQHandler+0xcc8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d022      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a7e      	ldr	r2, [pc, #504]	; (8005200 <HAL_DMA_IRQHandler+0xccc>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d01d      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a7d      	ldr	r2, [pc, #500]	; (8005204 <HAL_DMA_IRQHandler+0xcd0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d018      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a7b      	ldr	r2, [pc, #492]	; (8005208 <HAL_DMA_IRQHandler+0xcd4>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d013      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a7a      	ldr	r2, [pc, #488]	; (800520c <HAL_DMA_IRQHandler+0xcd8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d00e      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a78      	ldr	r2, [pc, #480]	; (8005210 <HAL_DMA_IRQHandler+0xcdc>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d009      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a77      	ldr	r2, [pc, #476]	; (8005214 <HAL_DMA_IRQHandler+0xce0>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d004      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a75      	ldr	r2, [pc, #468]	; (8005218 <HAL_DMA_IRQHandler+0xce4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d108      	bne.n	8005058 <HAL_DMA_IRQHandler+0xb24>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0208 	bic.w	r2, r2, #8
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	e007      	b.n	8005068 <HAL_DMA_IRQHandler+0xb34>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0204 	bic.w	r2, r2, #4
 8005066:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8165 	beq.w	800533c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800507a:	e15f      	b.n	800533c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005080:	f003 031f 	and.w	r3, r3, #31
 8005084:	2202      	movs	r2, #2
 8005086:	409a      	lsls	r2, r3
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 80c5 	beq.w	800521c <HAL_DMA_IRQHandler+0xce8>
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80bf 	beq.w	800521c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a2:	f003 031f 	and.w	r3, r3, #31
 80050a6:	2202      	movs	r2, #2
 80050a8:	409a      	lsls	r2, r3
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d018      	beq.n	80050ea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d109      	bne.n	80050d6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 813a 	beq.w	8005340 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050d4:	e134      	b.n	8005340 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 8130 	beq.w	8005340 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050e8:	e12a      	b.n	8005340 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d168      	bne.n	80051c6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a38      	ldr	r2, [pc, #224]	; (80051dc <HAL_DMA_IRQHandler+0xca8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d04a      	beq.n	8005194 <HAL_DMA_IRQHandler+0xc60>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a37      	ldr	r2, [pc, #220]	; (80051e0 <HAL_DMA_IRQHandler+0xcac>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d045      	beq.n	8005194 <HAL_DMA_IRQHandler+0xc60>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a35      	ldr	r2, [pc, #212]	; (80051e4 <HAL_DMA_IRQHandler+0xcb0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d040      	beq.n	8005194 <HAL_DMA_IRQHandler+0xc60>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a34      	ldr	r2, [pc, #208]	; (80051e8 <HAL_DMA_IRQHandler+0xcb4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d03b      	beq.n	8005194 <HAL_DMA_IRQHandler+0xc60>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a32      	ldr	r2, [pc, #200]	; (80051ec <HAL_DMA_IRQHandler+0xcb8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d036      	beq.n	8005194 <HAL_DMA_IRQHandler+0xc60>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a31      	ldr	r2, [pc, #196]	; (80051f0 <HAL_DMA_IRQHandler+0xcbc>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d031      	beq.n	8005194 <HAL_DMA_IRQHandler+0xc60>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a2f      	ldr	r2, [pc, #188]	; (80051f4 <HAL_DMA_IRQHandler+0xcc0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d02c      	beq.n	8005194 <HAL_DMA_IRQHandler+0xc60>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a2e      	ldr	r2, [pc, #184]	; (80051f8 <HAL_DMA_IRQHandler+0xcc4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d027      	beq.n	8005194 <HAL_DMA_IRQHandler+0xc60>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a2c      	ldr	r2, [pc, #176]	; (80051fc <HAL_DMA_IRQHandler+0xcc8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d022      	beq.n	8005194 <HAL_DMA_IRQHandler+0xc60>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a2b      	ldr	r2, [pc, #172]	; (8005200 <HAL_DMA_IRQHandler+0xccc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d01d      	beq.n	8005194 <HAL_DMA_IRQHandler+0xc60>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a29      	ldr	r2, [pc, #164]	; (8005204 <HAL_DMA_IRQHandler+0xcd0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d018      	beq.n	8005194 <HAL_DMA_IRQHandler+0xc60>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a28      	ldr	r2, [pc, #160]	; (8005208 <HAL_DMA_IRQHandler+0xcd4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d013      	beq.n	8005194 <HAL_DMA_IRQHandler+0xc60>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a26      	ldr	r2, [pc, #152]	; (800520c <HAL_DMA_IRQHandler+0xcd8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00e      	beq.n	8005194 <HAL_DMA_IRQHandler+0xc60>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a25      	ldr	r2, [pc, #148]	; (8005210 <HAL_DMA_IRQHandler+0xcdc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d009      	beq.n	8005194 <HAL_DMA_IRQHandler+0xc60>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a23      	ldr	r2, [pc, #140]	; (8005214 <HAL_DMA_IRQHandler+0xce0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d004      	beq.n	8005194 <HAL_DMA_IRQHandler+0xc60>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a22      	ldr	r2, [pc, #136]	; (8005218 <HAL_DMA_IRQHandler+0xce4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d108      	bne.n	80051a6 <HAL_DMA_IRQHandler+0xc72>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0214 	bic.w	r2, r2, #20
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	e007      	b.n	80051b6 <HAL_DMA_IRQHandler+0xc82>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 020a 	bic.w	r2, r2, #10
 80051b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 80b8 	beq.w	8005340 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051d8:	e0b2      	b.n	8005340 <HAL_DMA_IRQHandler+0xe0c>
 80051da:	bf00      	nop
 80051dc:	40020010 	.word	0x40020010
 80051e0:	40020028 	.word	0x40020028
 80051e4:	40020040 	.word	0x40020040
 80051e8:	40020058 	.word	0x40020058
 80051ec:	40020070 	.word	0x40020070
 80051f0:	40020088 	.word	0x40020088
 80051f4:	400200a0 	.word	0x400200a0
 80051f8:	400200b8 	.word	0x400200b8
 80051fc:	40020410 	.word	0x40020410
 8005200:	40020428 	.word	0x40020428
 8005204:	40020440 	.word	0x40020440
 8005208:	40020458 	.word	0x40020458
 800520c:	40020470 	.word	0x40020470
 8005210:	40020488 	.word	0x40020488
 8005214:	400204a0 	.word	0x400204a0
 8005218:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	2208      	movs	r2, #8
 8005226:	409a      	lsls	r2, r3
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	4013      	ands	r3, r2
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 8088 	beq.w	8005342 <HAL_DMA_IRQHandler+0xe0e>
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f003 0308 	and.w	r3, r3, #8
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8082 	beq.w	8005342 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a41      	ldr	r2, [pc, #260]	; (8005348 <HAL_DMA_IRQHandler+0xe14>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d04a      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a3f      	ldr	r2, [pc, #252]	; (800534c <HAL_DMA_IRQHandler+0xe18>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d045      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a3e      	ldr	r2, [pc, #248]	; (8005350 <HAL_DMA_IRQHandler+0xe1c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d040      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a3c      	ldr	r2, [pc, #240]	; (8005354 <HAL_DMA_IRQHandler+0xe20>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d03b      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a3b      	ldr	r2, [pc, #236]	; (8005358 <HAL_DMA_IRQHandler+0xe24>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d036      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a39      	ldr	r2, [pc, #228]	; (800535c <HAL_DMA_IRQHandler+0xe28>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d031      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a38      	ldr	r2, [pc, #224]	; (8005360 <HAL_DMA_IRQHandler+0xe2c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d02c      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a36      	ldr	r2, [pc, #216]	; (8005364 <HAL_DMA_IRQHandler+0xe30>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d027      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a35      	ldr	r2, [pc, #212]	; (8005368 <HAL_DMA_IRQHandler+0xe34>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d022      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a33      	ldr	r2, [pc, #204]	; (800536c <HAL_DMA_IRQHandler+0xe38>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d01d      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a32      	ldr	r2, [pc, #200]	; (8005370 <HAL_DMA_IRQHandler+0xe3c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d018      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a30      	ldr	r2, [pc, #192]	; (8005374 <HAL_DMA_IRQHandler+0xe40>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d013      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a2f      	ldr	r2, [pc, #188]	; (8005378 <HAL_DMA_IRQHandler+0xe44>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00e      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a2d      	ldr	r2, [pc, #180]	; (800537c <HAL_DMA_IRQHandler+0xe48>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d009      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a2c      	ldr	r2, [pc, #176]	; (8005380 <HAL_DMA_IRQHandler+0xe4c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d004      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a2a      	ldr	r2, [pc, #168]	; (8005384 <HAL_DMA_IRQHandler+0xe50>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d108      	bne.n	80052f0 <HAL_DMA_IRQHandler+0xdbc>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 021c 	bic.w	r2, r2, #28
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	e007      	b.n	8005300 <HAL_DMA_IRQHandler+0xdcc>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 020e 	bic.w	r2, r2, #14
 80052fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	2201      	movs	r2, #1
 800530a:	409a      	lsls	r2, r3
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d009      	beq.n	8005342 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	4798      	blx	r3
 8005336:	e004      	b.n	8005342 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005338:	bf00      	nop
 800533a:	e002      	b.n	8005342 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800533c:	bf00      	nop
 800533e:	e000      	b.n	8005342 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005340:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005342:	3728      	adds	r7, #40	; 0x28
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40020010 	.word	0x40020010
 800534c:	40020028 	.word	0x40020028
 8005350:	40020040 	.word	0x40020040
 8005354:	40020058 	.word	0x40020058
 8005358:	40020070 	.word	0x40020070
 800535c:	40020088 	.word	0x40020088
 8005360:	400200a0 	.word	0x400200a0
 8005364:	400200b8 	.word	0x400200b8
 8005368:	40020410 	.word	0x40020410
 800536c:	40020428 	.word	0x40020428
 8005370:	40020440 	.word	0x40020440
 8005374:	40020458 	.word	0x40020458
 8005378:	40020470 	.word	0x40020470
 800537c:	40020488 	.word	0x40020488
 8005380:	400204a0 	.word	0x400204a0
 8005384:	400204b8 	.word	0x400204b8

08005388 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a84      	ldr	r2, [pc, #528]	; (80055b8 <DMA_SetConfig+0x230>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d072      	beq.n	8005492 <DMA_SetConfig+0x10a>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a82      	ldr	r2, [pc, #520]	; (80055bc <DMA_SetConfig+0x234>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d06d      	beq.n	8005492 <DMA_SetConfig+0x10a>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a81      	ldr	r2, [pc, #516]	; (80055c0 <DMA_SetConfig+0x238>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d068      	beq.n	8005492 <DMA_SetConfig+0x10a>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a7f      	ldr	r2, [pc, #508]	; (80055c4 <DMA_SetConfig+0x23c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d063      	beq.n	8005492 <DMA_SetConfig+0x10a>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a7e      	ldr	r2, [pc, #504]	; (80055c8 <DMA_SetConfig+0x240>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d05e      	beq.n	8005492 <DMA_SetConfig+0x10a>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a7c      	ldr	r2, [pc, #496]	; (80055cc <DMA_SetConfig+0x244>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d059      	beq.n	8005492 <DMA_SetConfig+0x10a>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a7b      	ldr	r2, [pc, #492]	; (80055d0 <DMA_SetConfig+0x248>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d054      	beq.n	8005492 <DMA_SetConfig+0x10a>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a79      	ldr	r2, [pc, #484]	; (80055d4 <DMA_SetConfig+0x24c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d04f      	beq.n	8005492 <DMA_SetConfig+0x10a>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a78      	ldr	r2, [pc, #480]	; (80055d8 <DMA_SetConfig+0x250>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d04a      	beq.n	8005492 <DMA_SetConfig+0x10a>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a76      	ldr	r2, [pc, #472]	; (80055dc <DMA_SetConfig+0x254>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d045      	beq.n	8005492 <DMA_SetConfig+0x10a>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a75      	ldr	r2, [pc, #468]	; (80055e0 <DMA_SetConfig+0x258>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d040      	beq.n	8005492 <DMA_SetConfig+0x10a>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a73      	ldr	r2, [pc, #460]	; (80055e4 <DMA_SetConfig+0x25c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d03b      	beq.n	8005492 <DMA_SetConfig+0x10a>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a72      	ldr	r2, [pc, #456]	; (80055e8 <DMA_SetConfig+0x260>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d036      	beq.n	8005492 <DMA_SetConfig+0x10a>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a70      	ldr	r2, [pc, #448]	; (80055ec <DMA_SetConfig+0x264>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d031      	beq.n	8005492 <DMA_SetConfig+0x10a>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a6f      	ldr	r2, [pc, #444]	; (80055f0 <DMA_SetConfig+0x268>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d02c      	beq.n	8005492 <DMA_SetConfig+0x10a>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a6d      	ldr	r2, [pc, #436]	; (80055f4 <DMA_SetConfig+0x26c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d027      	beq.n	8005492 <DMA_SetConfig+0x10a>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a6c      	ldr	r2, [pc, #432]	; (80055f8 <DMA_SetConfig+0x270>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d022      	beq.n	8005492 <DMA_SetConfig+0x10a>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a6a      	ldr	r2, [pc, #424]	; (80055fc <DMA_SetConfig+0x274>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d01d      	beq.n	8005492 <DMA_SetConfig+0x10a>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a69      	ldr	r2, [pc, #420]	; (8005600 <DMA_SetConfig+0x278>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d018      	beq.n	8005492 <DMA_SetConfig+0x10a>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a67      	ldr	r2, [pc, #412]	; (8005604 <DMA_SetConfig+0x27c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d013      	beq.n	8005492 <DMA_SetConfig+0x10a>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a66      	ldr	r2, [pc, #408]	; (8005608 <DMA_SetConfig+0x280>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00e      	beq.n	8005492 <DMA_SetConfig+0x10a>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a64      	ldr	r2, [pc, #400]	; (800560c <DMA_SetConfig+0x284>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d009      	beq.n	8005492 <DMA_SetConfig+0x10a>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a63      	ldr	r2, [pc, #396]	; (8005610 <DMA_SetConfig+0x288>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <DMA_SetConfig+0x10a>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a61      	ldr	r2, [pc, #388]	; (8005614 <DMA_SetConfig+0x28c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d101      	bne.n	8005496 <DMA_SetConfig+0x10e>
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <DMA_SetConfig+0x110>
 8005496:	2300      	movs	r3, #0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00d      	beq.n	80054b8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80054a4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d004      	beq.n	80054b8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80054b6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a3e      	ldr	r2, [pc, #248]	; (80055b8 <DMA_SetConfig+0x230>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d04a      	beq.n	8005558 <DMA_SetConfig+0x1d0>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a3d      	ldr	r2, [pc, #244]	; (80055bc <DMA_SetConfig+0x234>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d045      	beq.n	8005558 <DMA_SetConfig+0x1d0>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a3b      	ldr	r2, [pc, #236]	; (80055c0 <DMA_SetConfig+0x238>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d040      	beq.n	8005558 <DMA_SetConfig+0x1d0>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a3a      	ldr	r2, [pc, #232]	; (80055c4 <DMA_SetConfig+0x23c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d03b      	beq.n	8005558 <DMA_SetConfig+0x1d0>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a38      	ldr	r2, [pc, #224]	; (80055c8 <DMA_SetConfig+0x240>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d036      	beq.n	8005558 <DMA_SetConfig+0x1d0>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a37      	ldr	r2, [pc, #220]	; (80055cc <DMA_SetConfig+0x244>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d031      	beq.n	8005558 <DMA_SetConfig+0x1d0>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a35      	ldr	r2, [pc, #212]	; (80055d0 <DMA_SetConfig+0x248>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d02c      	beq.n	8005558 <DMA_SetConfig+0x1d0>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a34      	ldr	r2, [pc, #208]	; (80055d4 <DMA_SetConfig+0x24c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d027      	beq.n	8005558 <DMA_SetConfig+0x1d0>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a32      	ldr	r2, [pc, #200]	; (80055d8 <DMA_SetConfig+0x250>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d022      	beq.n	8005558 <DMA_SetConfig+0x1d0>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a31      	ldr	r2, [pc, #196]	; (80055dc <DMA_SetConfig+0x254>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d01d      	beq.n	8005558 <DMA_SetConfig+0x1d0>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a2f      	ldr	r2, [pc, #188]	; (80055e0 <DMA_SetConfig+0x258>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d018      	beq.n	8005558 <DMA_SetConfig+0x1d0>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a2e      	ldr	r2, [pc, #184]	; (80055e4 <DMA_SetConfig+0x25c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d013      	beq.n	8005558 <DMA_SetConfig+0x1d0>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a2c      	ldr	r2, [pc, #176]	; (80055e8 <DMA_SetConfig+0x260>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d00e      	beq.n	8005558 <DMA_SetConfig+0x1d0>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a2b      	ldr	r2, [pc, #172]	; (80055ec <DMA_SetConfig+0x264>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d009      	beq.n	8005558 <DMA_SetConfig+0x1d0>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a29      	ldr	r2, [pc, #164]	; (80055f0 <DMA_SetConfig+0x268>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d004      	beq.n	8005558 <DMA_SetConfig+0x1d0>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a28      	ldr	r2, [pc, #160]	; (80055f4 <DMA_SetConfig+0x26c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d101      	bne.n	800555c <DMA_SetConfig+0x1d4>
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <DMA_SetConfig+0x1d6>
 800555c:	2300      	movs	r3, #0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d05a      	beq.n	8005618 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005566:	f003 031f 	and.w	r3, r3, #31
 800556a:	223f      	movs	r2, #63	; 0x3f
 800556c:	409a      	lsls	r2, r3
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005580:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	2b40      	cmp	r3, #64	; 0x40
 8005590:	d108      	bne.n	80055a4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80055a2:	e087      	b.n	80056b4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	60da      	str	r2, [r3, #12]
}
 80055b4:	e07e      	b.n	80056b4 <DMA_SetConfig+0x32c>
 80055b6:	bf00      	nop
 80055b8:	40020010 	.word	0x40020010
 80055bc:	40020028 	.word	0x40020028
 80055c0:	40020040 	.word	0x40020040
 80055c4:	40020058 	.word	0x40020058
 80055c8:	40020070 	.word	0x40020070
 80055cc:	40020088 	.word	0x40020088
 80055d0:	400200a0 	.word	0x400200a0
 80055d4:	400200b8 	.word	0x400200b8
 80055d8:	40020410 	.word	0x40020410
 80055dc:	40020428 	.word	0x40020428
 80055e0:	40020440 	.word	0x40020440
 80055e4:	40020458 	.word	0x40020458
 80055e8:	40020470 	.word	0x40020470
 80055ec:	40020488 	.word	0x40020488
 80055f0:	400204a0 	.word	0x400204a0
 80055f4:	400204b8 	.word	0x400204b8
 80055f8:	58025408 	.word	0x58025408
 80055fc:	5802541c 	.word	0x5802541c
 8005600:	58025430 	.word	0x58025430
 8005604:	58025444 	.word	0x58025444
 8005608:	58025458 	.word	0x58025458
 800560c:	5802546c 	.word	0x5802546c
 8005610:	58025480 	.word	0x58025480
 8005614:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a28      	ldr	r2, [pc, #160]	; (80056c0 <DMA_SetConfig+0x338>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d022      	beq.n	8005668 <DMA_SetConfig+0x2e0>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a27      	ldr	r2, [pc, #156]	; (80056c4 <DMA_SetConfig+0x33c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d01d      	beq.n	8005668 <DMA_SetConfig+0x2e0>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a25      	ldr	r2, [pc, #148]	; (80056c8 <DMA_SetConfig+0x340>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d018      	beq.n	8005668 <DMA_SetConfig+0x2e0>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a24      	ldr	r2, [pc, #144]	; (80056cc <DMA_SetConfig+0x344>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d013      	beq.n	8005668 <DMA_SetConfig+0x2e0>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a22      	ldr	r2, [pc, #136]	; (80056d0 <DMA_SetConfig+0x348>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00e      	beq.n	8005668 <DMA_SetConfig+0x2e0>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a21      	ldr	r2, [pc, #132]	; (80056d4 <DMA_SetConfig+0x34c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d009      	beq.n	8005668 <DMA_SetConfig+0x2e0>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a1f      	ldr	r2, [pc, #124]	; (80056d8 <DMA_SetConfig+0x350>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d004      	beq.n	8005668 <DMA_SetConfig+0x2e0>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a1e      	ldr	r2, [pc, #120]	; (80056dc <DMA_SetConfig+0x354>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d101      	bne.n	800566c <DMA_SetConfig+0x2e4>
 8005668:	2301      	movs	r3, #1
 800566a:	e000      	b.n	800566e <DMA_SetConfig+0x2e6>
 800566c:	2300      	movs	r3, #0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d020      	beq.n	80056b4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	2201      	movs	r2, #1
 800567c:	409a      	lsls	r2, r3
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b40      	cmp	r3, #64	; 0x40
 8005690:	d108      	bne.n	80056a4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	60da      	str	r2, [r3, #12]
}
 80056a2:	e007      	b.n	80056b4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	60da      	str	r2, [r3, #12]
}
 80056b4:	bf00      	nop
 80056b6:	371c      	adds	r7, #28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	58025408 	.word	0x58025408
 80056c4:	5802541c 	.word	0x5802541c
 80056c8:	58025430 	.word	0x58025430
 80056cc:	58025444 	.word	0x58025444
 80056d0:	58025458 	.word	0x58025458
 80056d4:	5802546c 	.word	0x5802546c
 80056d8:	58025480 	.word	0x58025480
 80056dc:	58025494 	.word	0x58025494

080056e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a42      	ldr	r2, [pc, #264]	; (80057f8 <DMA_CalcBaseAndBitshift+0x118>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d04a      	beq.n	8005788 <DMA_CalcBaseAndBitshift+0xa8>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a41      	ldr	r2, [pc, #260]	; (80057fc <DMA_CalcBaseAndBitshift+0x11c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d045      	beq.n	8005788 <DMA_CalcBaseAndBitshift+0xa8>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a3f      	ldr	r2, [pc, #252]	; (8005800 <DMA_CalcBaseAndBitshift+0x120>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d040      	beq.n	8005788 <DMA_CalcBaseAndBitshift+0xa8>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a3e      	ldr	r2, [pc, #248]	; (8005804 <DMA_CalcBaseAndBitshift+0x124>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d03b      	beq.n	8005788 <DMA_CalcBaseAndBitshift+0xa8>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a3c      	ldr	r2, [pc, #240]	; (8005808 <DMA_CalcBaseAndBitshift+0x128>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d036      	beq.n	8005788 <DMA_CalcBaseAndBitshift+0xa8>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a3b      	ldr	r2, [pc, #236]	; (800580c <DMA_CalcBaseAndBitshift+0x12c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d031      	beq.n	8005788 <DMA_CalcBaseAndBitshift+0xa8>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a39      	ldr	r2, [pc, #228]	; (8005810 <DMA_CalcBaseAndBitshift+0x130>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d02c      	beq.n	8005788 <DMA_CalcBaseAndBitshift+0xa8>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a38      	ldr	r2, [pc, #224]	; (8005814 <DMA_CalcBaseAndBitshift+0x134>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d027      	beq.n	8005788 <DMA_CalcBaseAndBitshift+0xa8>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a36      	ldr	r2, [pc, #216]	; (8005818 <DMA_CalcBaseAndBitshift+0x138>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d022      	beq.n	8005788 <DMA_CalcBaseAndBitshift+0xa8>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a35      	ldr	r2, [pc, #212]	; (800581c <DMA_CalcBaseAndBitshift+0x13c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d01d      	beq.n	8005788 <DMA_CalcBaseAndBitshift+0xa8>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a33      	ldr	r2, [pc, #204]	; (8005820 <DMA_CalcBaseAndBitshift+0x140>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d018      	beq.n	8005788 <DMA_CalcBaseAndBitshift+0xa8>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a32      	ldr	r2, [pc, #200]	; (8005824 <DMA_CalcBaseAndBitshift+0x144>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d013      	beq.n	8005788 <DMA_CalcBaseAndBitshift+0xa8>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a30      	ldr	r2, [pc, #192]	; (8005828 <DMA_CalcBaseAndBitshift+0x148>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00e      	beq.n	8005788 <DMA_CalcBaseAndBitshift+0xa8>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a2f      	ldr	r2, [pc, #188]	; (800582c <DMA_CalcBaseAndBitshift+0x14c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d009      	beq.n	8005788 <DMA_CalcBaseAndBitshift+0xa8>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a2d      	ldr	r2, [pc, #180]	; (8005830 <DMA_CalcBaseAndBitshift+0x150>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d004      	beq.n	8005788 <DMA_CalcBaseAndBitshift+0xa8>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a2c      	ldr	r2, [pc, #176]	; (8005834 <DMA_CalcBaseAndBitshift+0x154>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d101      	bne.n	800578c <DMA_CalcBaseAndBitshift+0xac>
 8005788:	2301      	movs	r3, #1
 800578a:	e000      	b.n	800578e <DMA_CalcBaseAndBitshift+0xae>
 800578c:	2300      	movs	r3, #0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d024      	beq.n	80057dc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	b2db      	uxtb	r3, r3
 8005798:	3b10      	subs	r3, #16
 800579a:	4a27      	ldr	r2, [pc, #156]	; (8005838 <DMA_CalcBaseAndBitshift+0x158>)
 800579c:	fba2 2303 	umull	r2, r3, r2, r3
 80057a0:	091b      	lsrs	r3, r3, #4
 80057a2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	4a24      	ldr	r2, [pc, #144]	; (800583c <DMA_CalcBaseAndBitshift+0x15c>)
 80057ac:	5cd3      	ldrb	r3, [r2, r3]
 80057ae:	461a      	mov	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d908      	bls.n	80057cc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	4b1f      	ldr	r3, [pc, #124]	; (8005840 <DMA_CalcBaseAndBitshift+0x160>)
 80057c2:	4013      	ands	r3, r2
 80057c4:	1d1a      	adds	r2, r3, #4
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	659a      	str	r2, [r3, #88]	; 0x58
 80057ca:	e00d      	b.n	80057e8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	461a      	mov	r2, r3
 80057d2:	4b1b      	ldr	r3, [pc, #108]	; (8005840 <DMA_CalcBaseAndBitshift+0x160>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6593      	str	r3, [r2, #88]	; 0x58
 80057da:	e005      	b.n	80057e8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	40020010 	.word	0x40020010
 80057fc:	40020028 	.word	0x40020028
 8005800:	40020040 	.word	0x40020040
 8005804:	40020058 	.word	0x40020058
 8005808:	40020070 	.word	0x40020070
 800580c:	40020088 	.word	0x40020088
 8005810:	400200a0 	.word	0x400200a0
 8005814:	400200b8 	.word	0x400200b8
 8005818:	40020410 	.word	0x40020410
 800581c:	40020428 	.word	0x40020428
 8005820:	40020440 	.word	0x40020440
 8005824:	40020458 	.word	0x40020458
 8005828:	40020470 	.word	0x40020470
 800582c:	40020488 	.word	0x40020488
 8005830:	400204a0 	.word	0x400204a0
 8005834:	400204b8 	.word	0x400204b8
 8005838:	aaaaaaab 	.word	0xaaaaaaab
 800583c:	0800cc34 	.word	0x0800cc34
 8005840:	fffffc00 	.word	0xfffffc00

08005844 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800584c:	2300      	movs	r3, #0
 800584e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d120      	bne.n	800589a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	2b03      	cmp	r3, #3
 800585e:	d858      	bhi.n	8005912 <DMA_CheckFifoParam+0xce>
 8005860:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <DMA_CheckFifoParam+0x24>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	08005879 	.word	0x08005879
 800586c:	0800588b 	.word	0x0800588b
 8005870:	08005879 	.word	0x08005879
 8005874:	08005913 	.word	0x08005913
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d048      	beq.n	8005916 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005888:	e045      	b.n	8005916 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005892:	d142      	bne.n	800591a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005898:	e03f      	b.n	800591a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a2:	d123      	bne.n	80058ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a8:	2b03      	cmp	r3, #3
 80058aa:	d838      	bhi.n	800591e <DMA_CheckFifoParam+0xda>
 80058ac:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <DMA_CheckFifoParam+0x70>)
 80058ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b2:	bf00      	nop
 80058b4:	080058c5 	.word	0x080058c5
 80058b8:	080058cb 	.word	0x080058cb
 80058bc:	080058c5 	.word	0x080058c5
 80058c0:	080058dd 	.word	0x080058dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	73fb      	strb	r3, [r7, #15]
        break;
 80058c8:	e030      	b.n	800592c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d025      	beq.n	8005922 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058da:	e022      	b.n	8005922 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058e4:	d11f      	bne.n	8005926 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058ea:	e01c      	b.n	8005926 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d902      	bls.n	80058fa <DMA_CheckFifoParam+0xb6>
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d003      	beq.n	8005900 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80058f8:	e018      	b.n	800592c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	73fb      	strb	r3, [r7, #15]
        break;
 80058fe:	e015      	b.n	800592c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00e      	beq.n	800592a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	73fb      	strb	r3, [r7, #15]
    break;
 8005910:	e00b      	b.n	800592a <DMA_CheckFifoParam+0xe6>
        break;
 8005912:	bf00      	nop
 8005914:	e00a      	b.n	800592c <DMA_CheckFifoParam+0xe8>
        break;
 8005916:	bf00      	nop
 8005918:	e008      	b.n	800592c <DMA_CheckFifoParam+0xe8>
        break;
 800591a:	bf00      	nop
 800591c:	e006      	b.n	800592c <DMA_CheckFifoParam+0xe8>
        break;
 800591e:	bf00      	nop
 8005920:	e004      	b.n	800592c <DMA_CheckFifoParam+0xe8>
        break;
 8005922:	bf00      	nop
 8005924:	e002      	b.n	800592c <DMA_CheckFifoParam+0xe8>
        break;
 8005926:	bf00      	nop
 8005928:	e000      	b.n	800592c <DMA_CheckFifoParam+0xe8>
    break;
 800592a:	bf00      	nop
    }
  }

  return status;
 800592c:	7bfb      	ldrb	r3, [r7, #15]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop

0800593c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a38      	ldr	r2, [pc, #224]	; (8005a30 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d022      	beq.n	800599a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a36      	ldr	r2, [pc, #216]	; (8005a34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d01d      	beq.n	800599a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a35      	ldr	r2, [pc, #212]	; (8005a38 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d018      	beq.n	800599a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a33      	ldr	r2, [pc, #204]	; (8005a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d013      	beq.n	800599a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a32      	ldr	r2, [pc, #200]	; (8005a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00e      	beq.n	800599a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a30      	ldr	r2, [pc, #192]	; (8005a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d009      	beq.n	800599a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a2f      	ldr	r2, [pc, #188]	; (8005a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d004      	beq.n	800599a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a2d      	ldr	r2, [pc, #180]	; (8005a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d101      	bne.n	800599e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800599e:	2300      	movs	r3, #0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01a      	beq.n	80059da <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	3b08      	subs	r3, #8
 80059ac:	4a28      	ldr	r2, [pc, #160]	; (8005a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80059ae:	fba2 2303 	umull	r2, r3, r2, r3
 80059b2:	091b      	lsrs	r3, r3, #4
 80059b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4b26      	ldr	r3, [pc, #152]	; (8005a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80059ba:	4413      	add	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	461a      	mov	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a24      	ldr	r2, [pc, #144]	; (8005a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80059c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f003 031f 	and.w	r3, r3, #31
 80059d0:	2201      	movs	r2, #1
 80059d2:	409a      	lsls	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80059d8:	e024      	b.n	8005a24 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	3b10      	subs	r3, #16
 80059e2:	4a1e      	ldr	r2, [pc, #120]	; (8005a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80059e4:	fba2 2303 	umull	r2, r3, r2, r3
 80059e8:	091b      	lsrs	r3, r3, #4
 80059ea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4a1c      	ldr	r2, [pc, #112]	; (8005a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d806      	bhi.n	8005a02 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4a1b      	ldr	r2, [pc, #108]	; (8005a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d902      	bls.n	8005a02 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3308      	adds	r3, #8
 8005a00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a16      	ldr	r2, [pc, #88]	; (8005a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005a14:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f003 031f 	and.w	r3, r3, #31
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	409a      	lsls	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a24:	bf00      	nop
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	58025408 	.word	0x58025408
 8005a34:	5802541c 	.word	0x5802541c
 8005a38:	58025430 	.word	0x58025430
 8005a3c:	58025444 	.word	0x58025444
 8005a40:	58025458 	.word	0x58025458
 8005a44:	5802546c 	.word	0x5802546c
 8005a48:	58025480 	.word	0x58025480
 8005a4c:	58025494 	.word	0x58025494
 8005a50:	cccccccd 	.word	0xcccccccd
 8005a54:	16009600 	.word	0x16009600
 8005a58:	58025880 	.word	0x58025880
 8005a5c:	aaaaaaab 	.word	0xaaaaaaab
 8005a60:	400204b8 	.word	0x400204b8
 8005a64:	4002040f 	.word	0x4002040f
 8005a68:	10008200 	.word	0x10008200
 8005a6c:	40020880 	.word	0x40020880

08005a70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d04a      	beq.n	8005b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d847      	bhi.n	8005b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a25      	ldr	r2, [pc, #148]	; (8005b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d022      	beq.n	8005adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a24      	ldr	r2, [pc, #144]	; (8005b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d01d      	beq.n	8005adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a22      	ldr	r2, [pc, #136]	; (8005b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d018      	beq.n	8005adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a21      	ldr	r2, [pc, #132]	; (8005b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d013      	beq.n	8005adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a1f      	ldr	r2, [pc, #124]	; (8005b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00e      	beq.n	8005adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a1e      	ldr	r2, [pc, #120]	; (8005b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d009      	beq.n	8005adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1c      	ldr	r2, [pc, #112]	; (8005b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d004      	beq.n	8005adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a1b      	ldr	r2, [pc, #108]	; (8005b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d101      	bne.n	8005ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005adc:	2301      	movs	r3, #1
 8005ade:	e000      	b.n	8005ae2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4b17      	ldr	r3, [pc, #92]	; (8005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005aea:	4413      	add	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	461a      	mov	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a15      	ldr	r2, [pc, #84]	; (8005b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005af8:	671a      	str	r2, [r3, #112]	; 0x70
 8005afa:	e009      	b.n	8005b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4b14      	ldr	r3, [pc, #80]	; (8005b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005b00:	4413      	add	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	461a      	mov	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a11      	ldr	r2, [pc, #68]	; (8005b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005b0e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	2201      	movs	r2, #1
 8005b16:	409a      	lsls	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005b1c:	bf00      	nop
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	58025408 	.word	0x58025408
 8005b2c:	5802541c 	.word	0x5802541c
 8005b30:	58025430 	.word	0x58025430
 8005b34:	58025444 	.word	0x58025444
 8005b38:	58025458 	.word	0x58025458
 8005b3c:	5802546c 	.word	0x5802546c
 8005b40:	58025480 	.word	0x58025480
 8005b44:	58025494 	.word	0x58025494
 8005b48:	1600963f 	.word	0x1600963f
 8005b4c:	58025940 	.word	0x58025940
 8005b50:	1000823f 	.word	0x1000823f
 8005b54:	40020940 	.word	0x40020940

08005b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b089      	sub	sp, #36	; 0x24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b66:	4b89      	ldr	r3, [pc, #548]	; (8005d8c <HAL_GPIO_Init+0x234>)
 8005b68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b6a:	e194      	b.n	8005e96 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	2101      	movs	r1, #1
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	fa01 f303 	lsl.w	r3, r1, r3
 8005b78:	4013      	ands	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 8186 	beq.w	8005e90 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d00b      	beq.n	8005ba4 <HAL_GPIO_Init+0x4c>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d007      	beq.n	8005ba4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b98:	2b11      	cmp	r3, #17
 8005b9a:	d003      	beq.n	8005ba4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b12      	cmp	r3, #18
 8005ba2:	d130      	bne.n	8005c06 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	2203      	movs	r2, #3
 8005bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb4:	43db      	mvns	r3, r3
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bda:	2201      	movs	r2, #1
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	43db      	mvns	r3, r3
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4013      	ands	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	091b      	lsrs	r3, r3, #4
 8005bf0:	f003 0201 	and.w	r2, r3, #1
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	2203      	movs	r2, #3
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	43db      	mvns	r3, r3
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d003      	beq.n	8005c46 <HAL_GPIO_Init+0xee>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b12      	cmp	r3, #18
 8005c44:	d123      	bne.n	8005c8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	08da      	lsrs	r2, r3, #3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3208      	adds	r2, #8
 8005c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	220f      	movs	r2, #15
 8005c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c62:	43db      	mvns	r3, r3
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	4013      	ands	r3, r2
 8005c68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	691a      	ldr	r2, [r3, #16]
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	08da      	lsrs	r2, r3, #3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3208      	adds	r2, #8
 8005c88:	69b9      	ldr	r1, [r7, #24]
 8005c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	2203      	movs	r2, #3
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f003 0203 	and.w	r2, r3, #3
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 80e0 	beq.w	8005e90 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cd0:	4b2f      	ldr	r3, [pc, #188]	; (8005d90 <HAL_GPIO_Init+0x238>)
 8005cd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cd6:	4a2e      	ldr	r2, [pc, #184]	; (8005d90 <HAL_GPIO_Init+0x238>)
 8005cd8:	f043 0302 	orr.w	r3, r3, #2
 8005cdc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005ce0:	4b2b      	ldr	r3, [pc, #172]	; (8005d90 <HAL_GPIO_Init+0x238>)
 8005ce2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cee:	4a29      	ldr	r2, [pc, #164]	; (8005d94 <HAL_GPIO_Init+0x23c>)
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	089b      	lsrs	r3, r3, #2
 8005cf4:	3302      	adds	r3, #2
 8005cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	220f      	movs	r2, #15
 8005d06:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0a:	43db      	mvns	r3, r3
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a20      	ldr	r2, [pc, #128]	; (8005d98 <HAL_GPIO_Init+0x240>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d052      	beq.n	8005dc0 <HAL_GPIO_Init+0x268>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a1f      	ldr	r2, [pc, #124]	; (8005d9c <HAL_GPIO_Init+0x244>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d031      	beq.n	8005d86 <HAL_GPIO_Init+0x22e>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a1e      	ldr	r2, [pc, #120]	; (8005da0 <HAL_GPIO_Init+0x248>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d02b      	beq.n	8005d82 <HAL_GPIO_Init+0x22a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a1d      	ldr	r2, [pc, #116]	; (8005da4 <HAL_GPIO_Init+0x24c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d025      	beq.n	8005d7e <HAL_GPIO_Init+0x226>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a1c      	ldr	r2, [pc, #112]	; (8005da8 <HAL_GPIO_Init+0x250>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d01f      	beq.n	8005d7a <HAL_GPIO_Init+0x222>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a1b      	ldr	r2, [pc, #108]	; (8005dac <HAL_GPIO_Init+0x254>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d019      	beq.n	8005d76 <HAL_GPIO_Init+0x21e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a1a      	ldr	r2, [pc, #104]	; (8005db0 <HAL_GPIO_Init+0x258>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d013      	beq.n	8005d72 <HAL_GPIO_Init+0x21a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a19      	ldr	r2, [pc, #100]	; (8005db4 <HAL_GPIO_Init+0x25c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00d      	beq.n	8005d6e <HAL_GPIO_Init+0x216>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a18      	ldr	r2, [pc, #96]	; (8005db8 <HAL_GPIO_Init+0x260>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d007      	beq.n	8005d6a <HAL_GPIO_Init+0x212>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a17      	ldr	r2, [pc, #92]	; (8005dbc <HAL_GPIO_Init+0x264>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d101      	bne.n	8005d66 <HAL_GPIO_Init+0x20e>
 8005d62:	2309      	movs	r3, #9
 8005d64:	e02d      	b.n	8005dc2 <HAL_GPIO_Init+0x26a>
 8005d66:	230a      	movs	r3, #10
 8005d68:	e02b      	b.n	8005dc2 <HAL_GPIO_Init+0x26a>
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	e029      	b.n	8005dc2 <HAL_GPIO_Init+0x26a>
 8005d6e:	2307      	movs	r3, #7
 8005d70:	e027      	b.n	8005dc2 <HAL_GPIO_Init+0x26a>
 8005d72:	2306      	movs	r3, #6
 8005d74:	e025      	b.n	8005dc2 <HAL_GPIO_Init+0x26a>
 8005d76:	2305      	movs	r3, #5
 8005d78:	e023      	b.n	8005dc2 <HAL_GPIO_Init+0x26a>
 8005d7a:	2304      	movs	r3, #4
 8005d7c:	e021      	b.n	8005dc2 <HAL_GPIO_Init+0x26a>
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e01f      	b.n	8005dc2 <HAL_GPIO_Init+0x26a>
 8005d82:	2302      	movs	r3, #2
 8005d84:	e01d      	b.n	8005dc2 <HAL_GPIO_Init+0x26a>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e01b      	b.n	8005dc2 <HAL_GPIO_Init+0x26a>
 8005d8a:	bf00      	nop
 8005d8c:	58000080 	.word	0x58000080
 8005d90:	58024400 	.word	0x58024400
 8005d94:	58000400 	.word	0x58000400
 8005d98:	58020000 	.word	0x58020000
 8005d9c:	58020400 	.word	0x58020400
 8005da0:	58020800 	.word	0x58020800
 8005da4:	58020c00 	.word	0x58020c00
 8005da8:	58021000 	.word	0x58021000
 8005dac:	58021400 	.word	0x58021400
 8005db0:	58021800 	.word	0x58021800
 8005db4:	58021c00 	.word	0x58021c00
 8005db8:	58022000 	.word	0x58022000
 8005dbc:	58022400 	.word	0x58022400
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	69fa      	ldr	r2, [r7, #28]
 8005dc4:	f002 0203 	and.w	r2, r2, #3
 8005dc8:	0092      	lsls	r2, r2, #2
 8005dca:	4093      	lsls	r3, r2
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dd2:	4938      	ldr	r1, [pc, #224]	; (8005eb4 <HAL_GPIO_Init+0x35c>)
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	089b      	lsrs	r3, r3, #2
 8005dd8:	3302      	adds	r3, #2
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	43db      	mvns	r3, r3
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	4013      	ands	r3, r2
 8005dee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	43db      	mvns	r3, r3
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	4013      	ands	r3, r2
 8005e18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	4013      	ands	r3, r2
 8005e44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	43db      	mvns	r3, r3
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	4013      	ands	r3, r2
 8005e72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	3301      	adds	r3, #1
 8005e94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f47f ae63 	bne.w	8005b6c <HAL_GPIO_Init+0x14>
  }
}
 8005ea6:	bf00      	nop
 8005ea8:	3724      	adds	r7, #36	; 0x24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	58000400 	.word	0x58000400

08005eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	807b      	strh	r3, [r7, #2]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ec8:	787b      	ldrb	r3, [r7, #1]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ece:	887a      	ldrh	r2, [r7, #2]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ed4:	e003      	b.n	8005ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ed6:	887b      	ldrh	r3, [r7, #2]
 8005ed8:	041a      	lsls	r2, r3, #16
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	619a      	str	r2, [r3, #24]
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695a      	ldr	r2, [r3, #20]
 8005efa:	887b      	ldrh	r3, [r7, #2]
 8005efc:	401a      	ands	r2, r3
 8005efe:	887b      	ldrh	r3, [r7, #2]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d104      	bne.n	8005f0e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005f04:	887b      	ldrh	r3, [r7, #2]
 8005f06:	041a      	lsls	r2, r3, #16
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005f0c:	e002      	b.n	8005f14 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005f0e:	887a      	ldrh	r2, [r7, #2]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	619a      	str	r2, [r3, #24]
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005f28:	4b19      	ldr	r3, [pc, #100]	; (8005f90 <HAL_PWREx_ConfigSupply+0x70>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d00a      	beq.n	8005f4a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f34:	4b16      	ldr	r3, [pc, #88]	; (8005f90 <HAL_PWREx_ConfigSupply+0x70>)
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d001      	beq.n	8005f46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e01f      	b.n	8005f86 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	e01d      	b.n	8005f86 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005f4a:	4b11      	ldr	r3, [pc, #68]	; (8005f90 <HAL_PWREx_ConfigSupply+0x70>)
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f023 0207 	bic.w	r2, r3, #7
 8005f52:	490f      	ldr	r1, [pc, #60]	; (8005f90 <HAL_PWREx_ConfigSupply+0x70>)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005f5a:	f7fc f955 	bl	8002208 <HAL_GetTick>
 8005f5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f60:	e009      	b.n	8005f76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f62:	f7fc f951 	bl	8002208 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f70:	d901      	bls.n	8005f76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e007      	b.n	8005f86 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f76:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <HAL_PWREx_ConfigSupply+0x70>)
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f82:	d1ee      	bne.n	8005f62 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	58024800 	.word	0x58024800

08005f94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08c      	sub	sp, #48	; 0x30
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e3c4      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 8087 	beq.w	80060c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fb4:	4ba2      	ldr	r3, [pc, #648]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fbe:	4ba0      	ldr	r3, [pc, #640]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc6:	2b10      	cmp	r3, #16
 8005fc8:	d007      	beq.n	8005fda <HAL_RCC_OscConfig+0x46>
 8005fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fcc:	2b18      	cmp	r3, #24
 8005fce:	d110      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x5e>
 8005fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d10b      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fda:	4b99      	ldr	r3, [pc, #612]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d06c      	beq.n	80060c0 <HAL_RCC_OscConfig+0x12c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d168      	bne.n	80060c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e39e      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ffa:	d106      	bne.n	800600a <HAL_RCC_OscConfig+0x76>
 8005ffc:	4b90      	ldr	r3, [pc, #576]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a8f      	ldr	r2, [pc, #572]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8006002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	e02e      	b.n	8006068 <HAL_RCC_OscConfig+0xd4>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10c      	bne.n	800602c <HAL_RCC_OscConfig+0x98>
 8006012:	4b8b      	ldr	r3, [pc, #556]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a8a      	ldr	r2, [pc, #552]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8006018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	4b88      	ldr	r3, [pc, #544]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a87      	ldr	r2, [pc, #540]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8006024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	e01d      	b.n	8006068 <HAL_RCC_OscConfig+0xd4>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006034:	d10c      	bne.n	8006050 <HAL_RCC_OscConfig+0xbc>
 8006036:	4b82      	ldr	r3, [pc, #520]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a81      	ldr	r2, [pc, #516]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 800603c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006040:	6013      	str	r3, [r2, #0]
 8006042:	4b7f      	ldr	r3, [pc, #508]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a7e      	ldr	r2, [pc, #504]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8006048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800604c:	6013      	str	r3, [r2, #0]
 800604e:	e00b      	b.n	8006068 <HAL_RCC_OscConfig+0xd4>
 8006050:	4b7b      	ldr	r3, [pc, #492]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a7a      	ldr	r2, [pc, #488]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8006056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800605a:	6013      	str	r3, [r2, #0]
 800605c:	4b78      	ldr	r3, [pc, #480]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a77      	ldr	r2, [pc, #476]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8006062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d013      	beq.n	8006098 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006070:	f7fc f8ca 	bl	8002208 <HAL_GetTick>
 8006074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006076:	e008      	b.n	800608a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006078:	f7fc f8c6 	bl	8002208 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b64      	cmp	r3, #100	; 0x64
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e352      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800608a:	4b6d      	ldr	r3, [pc, #436]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0f0      	beq.n	8006078 <HAL_RCC_OscConfig+0xe4>
 8006096:	e014      	b.n	80060c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006098:	f7fc f8b6 	bl	8002208 <HAL_GetTick>
 800609c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800609e:	e008      	b.n	80060b2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060a0:	f7fc f8b2 	bl	8002208 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b64      	cmp	r3, #100	; 0x64
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e33e      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060b2:	4b63      	ldr	r3, [pc, #396]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1f0      	bne.n	80060a0 <HAL_RCC_OscConfig+0x10c>
 80060be:	e000      	b.n	80060c2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 8092 	beq.w	80061f4 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060d0:	4b5b      	ldr	r3, [pc, #364]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060da:	4b59      	ldr	r3, [pc, #356]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d007      	beq.n	80060f6 <HAL_RCC_OscConfig+0x162>
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	2b18      	cmp	r3, #24
 80060ea:	d12d      	bne.n	8006148 <HAL_RCC_OscConfig+0x1b4>
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d128      	bne.n	8006148 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060f6:	4b52      	ldr	r3, [pc, #328]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d005      	beq.n	800610e <HAL_RCC_OscConfig+0x17a>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e310      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800610e:	f7fc f8a9 	bl	8002264 <HAL_GetREVID>
 8006112:	4602      	mov	r2, r0
 8006114:	f241 0303 	movw	r3, #4099	; 0x1003
 8006118:	429a      	cmp	r2, r3
 800611a:	d80a      	bhi.n	8006132 <HAL_RCC_OscConfig+0x19e>
 800611c:	4b48      	ldr	r3, [pc, #288]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	031b      	lsls	r3, r3, #12
 800612a:	4945      	ldr	r1, [pc, #276]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 800612c:	4313      	orrs	r3, r2
 800612e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006130:	e060      	b.n	80061f4 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006132:	4b43      	ldr	r3, [pc, #268]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	061b      	lsls	r3, r3, #24
 8006140:	493f      	ldr	r1, [pc, #252]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8006142:	4313      	orrs	r3, r2
 8006144:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006146:	e055      	b.n	80061f4 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d038      	beq.n	80061c2 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006150:	4b3b      	ldr	r3, [pc, #236]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f023 0219 	bic.w	r2, r3, #25
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	4938      	ldr	r1, [pc, #224]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 800615e:	4313      	orrs	r3, r2
 8006160:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006162:	f7fc f851 	bl	8002208 <HAL_GetTick>
 8006166:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006168:	e008      	b.n	800617c <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800616a:	f7fc f84d 	bl	8002208 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d901      	bls.n	800617c <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e2d9      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800617c:	4b30      	ldr	r3, [pc, #192]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f0      	beq.n	800616a <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006188:	f7fc f86c 	bl	8002264 <HAL_GetREVID>
 800618c:	4602      	mov	r2, r0
 800618e:	f241 0303 	movw	r3, #4099	; 0x1003
 8006192:	429a      	cmp	r2, r3
 8006194:	d80a      	bhi.n	80061ac <HAL_RCC_OscConfig+0x218>
 8006196:	4b2a      	ldr	r3, [pc, #168]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	031b      	lsls	r3, r3, #12
 80061a4:	4926      	ldr	r1, [pc, #152]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	604b      	str	r3, [r1, #4]
 80061aa:	e023      	b.n	80061f4 <HAL_RCC_OscConfig+0x260>
 80061ac:	4b24      	ldr	r3, [pc, #144]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	061b      	lsls	r3, r3, #24
 80061ba:	4921      	ldr	r1, [pc, #132]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	604b      	str	r3, [r1, #4]
 80061c0:	e018      	b.n	80061f4 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061c2:	4b1f      	ldr	r3, [pc, #124]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a1e      	ldr	r2, [pc, #120]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 80061c8:	f023 0301 	bic.w	r3, r3, #1
 80061cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ce:	f7fc f81b 	bl	8002208 <HAL_GetTick>
 80061d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061d4:	e008      	b.n	80061e8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061d6:	f7fc f817 	bl	8002208 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d901      	bls.n	80061e8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e2a3      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061e8:	4b15      	ldr	r3, [pc, #84]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1f0      	bne.n	80061d6 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 8091 	beq.w	8006324 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006202:	4b0f      	ldr	r3, [pc, #60]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800620a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800620c:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 800620e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006210:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b08      	cmp	r3, #8
 8006216:	d007      	beq.n	8006228 <HAL_RCC_OscConfig+0x294>
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	2b18      	cmp	r3, #24
 800621c:	d12f      	bne.n	800627e <HAL_RCC_OscConfig+0x2ea>
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	2b01      	cmp	r3, #1
 8006226:	d12a      	bne.n	800627e <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006228:	4b05      	ldr	r3, [pc, #20]	; (8006240 <HAL_RCC_OscConfig+0x2ac>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <HAL_RCC_OscConfig+0x2b0>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	2b80      	cmp	r3, #128	; 0x80
 800623a:	d003      	beq.n	8006244 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e277      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
 8006240:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006244:	f7fc f80e 	bl	8002264 <HAL_GetREVID>
 8006248:	4602      	mov	r2, r0
 800624a:	f241 0303 	movw	r3, #4099	; 0x1003
 800624e:	429a      	cmp	r2, r3
 8006250:	d80a      	bhi.n	8006268 <HAL_RCC_OscConfig+0x2d4>
 8006252:	4ba2      	ldr	r3, [pc, #648]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	069b      	lsls	r3, r3, #26
 8006260:	499e      	ldr	r1, [pc, #632]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 8006262:	4313      	orrs	r3, r2
 8006264:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006266:	e05d      	b.n	8006324 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006268:	4b9c      	ldr	r3, [pc, #624]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	061b      	lsls	r3, r3, #24
 8006276:	4999      	ldr	r1, [pc, #612]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 8006278:	4313      	orrs	r3, r2
 800627a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800627c:	e052      	b.n	8006324 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d035      	beq.n	80062f2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006286:	4b95      	ldr	r3, [pc, #596]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a94      	ldr	r2, [pc, #592]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 800628c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006292:	f7fb ffb9 	bl	8002208 <HAL_GetTick>
 8006296:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006298:	e008      	b.n	80062ac <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800629a:	f7fb ffb5 	bl	8002208 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e241      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062ac:	4b8b      	ldr	r3, [pc, #556]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0f0      	beq.n	800629a <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062b8:	f7fb ffd4 	bl	8002264 <HAL_GetREVID>
 80062bc:	4602      	mov	r2, r0
 80062be:	f241 0303 	movw	r3, #4099	; 0x1003
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d80a      	bhi.n	80062dc <HAL_RCC_OscConfig+0x348>
 80062c6:	4b85      	ldr	r3, [pc, #532]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	069b      	lsls	r3, r3, #26
 80062d4:	4981      	ldr	r1, [pc, #516]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	604b      	str	r3, [r1, #4]
 80062da:	e023      	b.n	8006324 <HAL_RCC_OscConfig+0x390>
 80062dc:	4b7f      	ldr	r3, [pc, #508]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	061b      	lsls	r3, r3, #24
 80062ea:	497c      	ldr	r1, [pc, #496]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60cb      	str	r3, [r1, #12]
 80062f0:	e018      	b.n	8006324 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80062f2:	4b7a      	ldr	r3, [pc, #488]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a79      	ldr	r2, [pc, #484]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 80062f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062fe:	f7fb ff83 	bl	8002208 <HAL_GetTick>
 8006302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006304:	e008      	b.n	8006318 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006306:	f7fb ff7f 	bl	8002208 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d901      	bls.n	8006318 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e20b      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006318:	4b70      	ldr	r3, [pc, #448]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1f0      	bne.n	8006306 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0308 	and.w	r3, r3, #8
 800632c:	2b00      	cmp	r3, #0
 800632e:	d036      	beq.n	800639e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d019      	beq.n	800636c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006338:	4b68      	ldr	r3, [pc, #416]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 800633a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800633c:	4a67      	ldr	r2, [pc, #412]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 800633e:	f043 0301 	orr.w	r3, r3, #1
 8006342:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006344:	f7fb ff60 	bl	8002208 <HAL_GetTick>
 8006348:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800634a:	e008      	b.n	800635e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800634c:	f7fb ff5c 	bl	8002208 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b02      	cmp	r3, #2
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e1e8      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800635e:	4b5f      	ldr	r3, [pc, #380]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 8006360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0f0      	beq.n	800634c <HAL_RCC_OscConfig+0x3b8>
 800636a:	e018      	b.n	800639e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800636c:	4b5b      	ldr	r3, [pc, #364]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 800636e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006370:	4a5a      	ldr	r2, [pc, #360]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 8006372:	f023 0301 	bic.w	r3, r3, #1
 8006376:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006378:	f7fb ff46 	bl	8002208 <HAL_GetTick>
 800637c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006380:	f7fb ff42 	bl	8002208 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e1ce      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006392:	4b52      	ldr	r3, [pc, #328]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 8006394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1f0      	bne.n	8006380 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0320 	and.w	r3, r3, #32
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d036      	beq.n	8006418 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d019      	beq.n	80063e6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063b2:	4b4a      	ldr	r3, [pc, #296]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a49      	ldr	r2, [pc, #292]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 80063b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063be:	f7fb ff23 	bl	8002208 <HAL_GetTick>
 80063c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063c4:	e008      	b.n	80063d8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80063c6:	f7fb ff1f 	bl	8002208 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e1ab      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063d8:	4b40      	ldr	r3, [pc, #256]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0f0      	beq.n	80063c6 <HAL_RCC_OscConfig+0x432>
 80063e4:	e018      	b.n	8006418 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063e6:	4b3d      	ldr	r3, [pc, #244]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a3c      	ldr	r2, [pc, #240]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 80063ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063f2:	f7fb ff09 	bl	8002208 <HAL_GetTick>
 80063f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063f8:	e008      	b.n	800640c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80063fa:	f7fb ff05 	bl	8002208 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e191      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800640c:	4b33      	ldr	r3, [pc, #204]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1f0      	bne.n	80063fa <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8086 	beq.w	8006532 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006426:	4b2e      	ldr	r3, [pc, #184]	; (80064e0 <HAL_RCC_OscConfig+0x54c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a2d      	ldr	r2, [pc, #180]	; (80064e0 <HAL_RCC_OscConfig+0x54c>)
 800642c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006430:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006432:	f7fb fee9 	bl	8002208 <HAL_GetTick>
 8006436:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006438:	e008      	b.n	800644c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800643a:	f7fb fee5 	bl	8002208 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b64      	cmp	r3, #100	; 0x64
 8006446:	d901      	bls.n	800644c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e171      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800644c:	4b24      	ldr	r3, [pc, #144]	; (80064e0 <HAL_RCC_OscConfig+0x54c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0f0      	beq.n	800643a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d106      	bne.n	800646e <HAL_RCC_OscConfig+0x4da>
 8006460:	4b1e      	ldr	r3, [pc, #120]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 8006462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006464:	4a1d      	ldr	r2, [pc, #116]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 8006466:	f043 0301 	orr.w	r3, r3, #1
 800646a:	6713      	str	r3, [r2, #112]	; 0x70
 800646c:	e02d      	b.n	80064ca <HAL_RCC_OscConfig+0x536>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10c      	bne.n	8006490 <HAL_RCC_OscConfig+0x4fc>
 8006476:	4b19      	ldr	r3, [pc, #100]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 8006478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647a:	4a18      	ldr	r2, [pc, #96]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 800647c:	f023 0301 	bic.w	r3, r3, #1
 8006480:	6713      	str	r3, [r2, #112]	; 0x70
 8006482:	4b16      	ldr	r3, [pc, #88]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 8006484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006486:	4a15      	ldr	r2, [pc, #84]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 8006488:	f023 0304 	bic.w	r3, r3, #4
 800648c:	6713      	str	r3, [r2, #112]	; 0x70
 800648e:	e01c      	b.n	80064ca <HAL_RCC_OscConfig+0x536>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	2b05      	cmp	r3, #5
 8006496:	d10c      	bne.n	80064b2 <HAL_RCC_OscConfig+0x51e>
 8006498:	4b10      	ldr	r3, [pc, #64]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 800649a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649c:	4a0f      	ldr	r2, [pc, #60]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 800649e:	f043 0304 	orr.w	r3, r3, #4
 80064a2:	6713      	str	r3, [r2, #112]	; 0x70
 80064a4:	4b0d      	ldr	r3, [pc, #52]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 80064a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a8:	4a0c      	ldr	r2, [pc, #48]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 80064aa:	f043 0301 	orr.w	r3, r3, #1
 80064ae:	6713      	str	r3, [r2, #112]	; 0x70
 80064b0:	e00b      	b.n	80064ca <HAL_RCC_OscConfig+0x536>
 80064b2:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 80064b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b6:	4a09      	ldr	r2, [pc, #36]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 80064b8:	f023 0301 	bic.w	r3, r3, #1
 80064bc:	6713      	str	r3, [r2, #112]	; 0x70
 80064be:	4b07      	ldr	r3, [pc, #28]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 80064c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c2:	4a06      	ldr	r2, [pc, #24]	; (80064dc <HAL_RCC_OscConfig+0x548>)
 80064c4:	f023 0304 	bic.w	r3, r3, #4
 80064c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d01a      	beq.n	8006508 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064d2:	f7fb fe99 	bl	8002208 <HAL_GetTick>
 80064d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064d8:	e00f      	b.n	80064fa <HAL_RCC_OscConfig+0x566>
 80064da:	bf00      	nop
 80064dc:	58024400 	.word	0x58024400
 80064e0:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064e4:	f7fb fe90 	bl	8002208 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e11a      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064fa:	4b8f      	ldr	r3, [pc, #572]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 80064fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0ee      	beq.n	80064e4 <HAL_RCC_OscConfig+0x550>
 8006506:	e014      	b.n	8006532 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006508:	f7fb fe7e 	bl	8002208 <HAL_GetTick>
 800650c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800650e:	e00a      	b.n	8006526 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006510:	f7fb fe7a 	bl	8002208 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	f241 3288 	movw	r2, #5000	; 0x1388
 800651e:	4293      	cmp	r3, r2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e104      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006526:	4b84      	ldr	r3, [pc, #528]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 8006528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1ee      	bne.n	8006510 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 80f9 	beq.w	800672e <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800653c:	4b7e      	ldr	r3, [pc, #504]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006544:	2b18      	cmp	r3, #24
 8006546:	f000 80b4 	beq.w	80066b2 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	2b02      	cmp	r3, #2
 8006550:	f040 8095 	bne.w	800667e <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006554:	4b78      	ldr	r3, [pc, #480]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a77      	ldr	r2, [pc, #476]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 800655a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800655e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006560:	f7fb fe52 	bl	8002208 <HAL_GetTick>
 8006564:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006568:	f7fb fe4e 	bl	8002208 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e0da      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800657a:	4b6f      	ldr	r3, [pc, #444]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f0      	bne.n	8006568 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006586:	4b6c      	ldr	r3, [pc, #432]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 8006588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800658a:	4b6c      	ldr	r3, [pc, #432]	; (800673c <HAL_RCC_OscConfig+0x7a8>)
 800658c:	4013      	ands	r3, r2
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006596:	0112      	lsls	r2, r2, #4
 8006598:	430a      	orrs	r2, r1
 800659a:	4967      	ldr	r1, [pc, #412]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 800659c:	4313      	orrs	r3, r2
 800659e:	628b      	str	r3, [r1, #40]	; 0x28
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a4:	3b01      	subs	r3, #1
 80065a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ae:	3b01      	subs	r3, #1
 80065b0:	025b      	lsls	r3, r3, #9
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	3b01      	subs	r3, #1
 80065bc:	041b      	lsls	r3, r3, #16
 80065be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c8:	3b01      	subs	r3, #1
 80065ca:	061b      	lsls	r3, r3, #24
 80065cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80065d0:	4959      	ldr	r1, [pc, #356]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80065d6:	4b58      	ldr	r3, [pc, #352]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 80065d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065da:	4a57      	ldr	r2, [pc, #348]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 80065dc:	f023 0301 	bic.w	r3, r3, #1
 80065e0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065e2:	4b55      	ldr	r3, [pc, #340]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 80065e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065e6:	4b56      	ldr	r3, [pc, #344]	; (8006740 <HAL_RCC_OscConfig+0x7ac>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80065ee:	00d2      	lsls	r2, r2, #3
 80065f0:	4951      	ldr	r1, [pc, #324]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80065f6:	4b50      	ldr	r3, [pc, #320]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	f023 020c 	bic.w	r2, r3, #12
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	494d      	ldr	r1, [pc, #308]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 8006604:	4313      	orrs	r3, r2
 8006606:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006608:	4b4b      	ldr	r3, [pc, #300]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	f023 0202 	bic.w	r2, r3, #2
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006614:	4948      	ldr	r1, [pc, #288]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 8006616:	4313      	orrs	r3, r2
 8006618:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800661a:	4b47      	ldr	r3, [pc, #284]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 800661c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661e:	4a46      	ldr	r2, [pc, #280]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 8006620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006624:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006626:	4b44      	ldr	r3, [pc, #272]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 8006628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662a:	4a43      	ldr	r2, [pc, #268]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 800662c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006630:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006632:	4b41      	ldr	r3, [pc, #260]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	4a40      	ldr	r2, [pc, #256]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 8006638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800663c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800663e:	4b3e      	ldr	r3, [pc, #248]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 8006640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006642:	4a3d      	ldr	r2, [pc, #244]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 8006644:	f043 0301 	orr.w	r3, r3, #1
 8006648:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800664a:	4b3b      	ldr	r3, [pc, #236]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a3a      	ldr	r2, [pc, #232]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 8006650:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006656:	f7fb fdd7 	bl	8002208 <HAL_GetTick>
 800665a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800665c:	e008      	b.n	8006670 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800665e:	f7fb fdd3 	bl	8002208 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	d901      	bls.n	8006670 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e05f      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006670:	4b31      	ldr	r3, [pc, #196]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0f0      	beq.n	800665e <HAL_RCC_OscConfig+0x6ca>
 800667c:	e057      	b.n	800672e <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800667e:	4b2e      	ldr	r3, [pc, #184]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a2d      	ldr	r2, [pc, #180]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 8006684:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668a:	f7fb fdbd 	bl	8002208 <HAL_GetTick>
 800668e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006690:	e008      	b.n	80066a4 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006692:	f7fb fdb9 	bl	8002208 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b02      	cmp	r3, #2
 800669e:	d901      	bls.n	80066a4 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e045      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066a4:	4b24      	ldr	r3, [pc, #144]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1f0      	bne.n	8006692 <HAL_RCC_OscConfig+0x6fe>
 80066b0:	e03d      	b.n	800672e <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80066b2:	4b21      	ldr	r3, [pc, #132]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 80066b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80066b8:	4b1f      	ldr	r3, [pc, #124]	; (8006738 <HAL_RCC_OscConfig+0x7a4>)
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d031      	beq.n	800672a <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f003 0203 	and.w	r2, r3, #3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d12a      	bne.n	800672a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	091b      	lsrs	r3, r3, #4
 80066d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d122      	bne.n	800672a <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d11a      	bne.n	800672a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	0a5b      	lsrs	r3, r3, #9
 80066f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006700:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006702:	429a      	cmp	r2, r3
 8006704:	d111      	bne.n	800672a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	0c1b      	lsrs	r3, r3, #16
 800670a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006714:	429a      	cmp	r2, r3
 8006716:	d108      	bne.n	800672a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	0e1b      	lsrs	r3, r3, #24
 800671c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006724:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006726:	429a      	cmp	r2, r3
 8006728:	d001      	beq.n	800672e <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e000      	b.n	8006730 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3730      	adds	r7, #48	; 0x30
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	58024400 	.word	0x58024400
 800673c:	fffffc0c 	.word	0xfffffc0c
 8006740:	ffff0007 	.word	0xffff0007

08006744 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e19c      	b.n	8006a92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006758:	4b8a      	ldr	r3, [pc, #552]	; (8006984 <HAL_RCC_ClockConfig+0x240>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 030f 	and.w	r3, r3, #15
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d910      	bls.n	8006788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006766:	4b87      	ldr	r3, [pc, #540]	; (8006984 <HAL_RCC_ClockConfig+0x240>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f023 020f 	bic.w	r2, r3, #15
 800676e:	4985      	ldr	r1, [pc, #532]	; (8006984 <HAL_RCC_ClockConfig+0x240>)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	4313      	orrs	r3, r2
 8006774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006776:	4b83      	ldr	r3, [pc, #524]	; (8006984 <HAL_RCC_ClockConfig+0x240>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 030f 	and.w	r3, r3, #15
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	429a      	cmp	r2, r3
 8006782:	d001      	beq.n	8006788 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e184      	b.n	8006a92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d010      	beq.n	80067b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	691a      	ldr	r2, [r3, #16]
 8006798:	4b7b      	ldr	r3, [pc, #492]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d908      	bls.n	80067b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067a4:	4b78      	ldr	r3, [pc, #480]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	4975      	ldr	r1, [pc, #468]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0308 	and.w	r3, r3, #8
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d010      	beq.n	80067e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	695a      	ldr	r2, [r3, #20]
 80067c6:	4b70      	ldr	r3, [pc, #448]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d908      	bls.n	80067e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067d2:	4b6d      	ldr	r3, [pc, #436]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	496a      	ldr	r1, [pc, #424]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0310 	and.w	r3, r3, #16
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d010      	beq.n	8006812 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	699a      	ldr	r2, [r3, #24]
 80067f4:	4b64      	ldr	r3, [pc, #400]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d908      	bls.n	8006812 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006800:	4b61      	ldr	r3, [pc, #388]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	495e      	ldr	r1, [pc, #376]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 800680e:	4313      	orrs	r3, r2
 8006810:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b00      	cmp	r3, #0
 800681c:	d010      	beq.n	8006840 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	69da      	ldr	r2, [r3, #28]
 8006822:	4b59      	ldr	r3, [pc, #356]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800682a:	429a      	cmp	r2, r3
 800682c:	d908      	bls.n	8006840 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800682e:	4b56      	ldr	r3, [pc, #344]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	4953      	ldr	r1, [pc, #332]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 800683c:	4313      	orrs	r3, r2
 800683e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d010      	beq.n	800686e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	4b4d      	ldr	r3, [pc, #308]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	f003 030f 	and.w	r3, r3, #15
 8006858:	429a      	cmp	r2, r3
 800685a:	d908      	bls.n	800686e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800685c:	4b4a      	ldr	r3, [pc, #296]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	f023 020f 	bic.w	r2, r3, #15
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	4947      	ldr	r1, [pc, #284]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 800686a:	4313      	orrs	r3, r2
 800686c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d055      	beq.n	8006926 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800687a:	4b43      	ldr	r3, [pc, #268]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	4940      	ldr	r1, [pc, #256]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 8006888:	4313      	orrs	r3, r2
 800688a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	2b02      	cmp	r3, #2
 8006892:	d107      	bne.n	80068a4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006894:	4b3c      	ldr	r3, [pc, #240]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d121      	bne.n	80068e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e0f6      	b.n	8006a92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	d107      	bne.n	80068bc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068ac:	4b36      	ldr	r3, [pc, #216]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d115      	bne.n	80068e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e0ea      	b.n	8006a92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d107      	bne.n	80068d4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068c4:	4b30      	ldr	r3, [pc, #192]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d109      	bne.n	80068e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e0de      	b.n	8006a92 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068d4:	4b2c      	ldr	r3, [pc, #176]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0304 	and.w	r3, r3, #4
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e0d6      	b.n	8006a92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068e4:	4b28      	ldr	r3, [pc, #160]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	f023 0207 	bic.w	r2, r3, #7
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	4925      	ldr	r1, [pc, #148]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f6:	f7fb fc87 	bl	8002208 <HAL_GetTick>
 80068fa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068fc:	e00a      	b.n	8006914 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068fe:	f7fb fc83 	bl	8002208 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	f241 3288 	movw	r2, #5000	; 0x1388
 800690c:	4293      	cmp	r3, r2
 800690e:	d901      	bls.n	8006914 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e0be      	b.n	8006a92 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006914:	4b1c      	ldr	r3, [pc, #112]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	429a      	cmp	r2, r3
 8006924:	d1eb      	bne.n	80068fe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d010      	beq.n	8006954 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	4b14      	ldr	r3, [pc, #80]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	429a      	cmp	r2, r3
 8006940:	d208      	bcs.n	8006954 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006942:	4b11      	ldr	r3, [pc, #68]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	f023 020f 	bic.w	r2, r3, #15
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	490e      	ldr	r1, [pc, #56]	; (8006988 <HAL_RCC_ClockConfig+0x244>)
 8006950:	4313      	orrs	r3, r2
 8006952:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006954:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <HAL_RCC_ClockConfig+0x240>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d214      	bcs.n	800698c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006962:	4b08      	ldr	r3, [pc, #32]	; (8006984 <HAL_RCC_ClockConfig+0x240>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f023 020f 	bic.w	r2, r3, #15
 800696a:	4906      	ldr	r1, [pc, #24]	; (8006984 <HAL_RCC_ClockConfig+0x240>)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	4313      	orrs	r3, r2
 8006970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006972:	4b04      	ldr	r3, [pc, #16]	; (8006984 <HAL_RCC_ClockConfig+0x240>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 030f 	and.w	r3, r3, #15
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d005      	beq.n	800698c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e086      	b.n	8006a92 <HAL_RCC_ClockConfig+0x34e>
 8006984:	52002000 	.word	0x52002000
 8006988:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b00      	cmp	r3, #0
 8006996:	d010      	beq.n	80069ba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691a      	ldr	r2, [r3, #16]
 800699c:	4b3f      	ldr	r3, [pc, #252]	; (8006a9c <HAL_RCC_ClockConfig+0x358>)
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d208      	bcs.n	80069ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069a8:	4b3c      	ldr	r3, [pc, #240]	; (8006a9c <HAL_RCC_ClockConfig+0x358>)
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	4939      	ldr	r1, [pc, #228]	; (8006a9c <HAL_RCC_ClockConfig+0x358>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d010      	beq.n	80069e8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	695a      	ldr	r2, [r3, #20]
 80069ca:	4b34      	ldr	r3, [pc, #208]	; (8006a9c <HAL_RCC_ClockConfig+0x358>)
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d208      	bcs.n	80069e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069d6:	4b31      	ldr	r3, [pc, #196]	; (8006a9c <HAL_RCC_ClockConfig+0x358>)
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	492e      	ldr	r1, [pc, #184]	; (8006a9c <HAL_RCC_ClockConfig+0x358>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0310 	and.w	r3, r3, #16
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d010      	beq.n	8006a16 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	699a      	ldr	r2, [r3, #24]
 80069f8:	4b28      	ldr	r3, [pc, #160]	; (8006a9c <HAL_RCC_ClockConfig+0x358>)
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d208      	bcs.n	8006a16 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a04:	4b25      	ldr	r3, [pc, #148]	; (8006a9c <HAL_RCC_ClockConfig+0x358>)
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	4922      	ldr	r1, [pc, #136]	; (8006a9c <HAL_RCC_ClockConfig+0x358>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d010      	beq.n	8006a44 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69da      	ldr	r2, [r3, #28]
 8006a26:	4b1d      	ldr	r3, [pc, #116]	; (8006a9c <HAL_RCC_ClockConfig+0x358>)
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d208      	bcs.n	8006a44 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a32:	4b1a      	ldr	r3, [pc, #104]	; (8006a9c <HAL_RCC_ClockConfig+0x358>)
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	4917      	ldr	r1, [pc, #92]	; (8006a9c <HAL_RCC_ClockConfig+0x358>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a44:	f000 f834 	bl	8006ab0 <HAL_RCC_GetSysClockFreq>
 8006a48:	4601      	mov	r1, r0
 8006a4a:	4b14      	ldr	r3, [pc, #80]	; (8006a9c <HAL_RCC_ClockConfig+0x358>)
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	0a1b      	lsrs	r3, r3, #8
 8006a50:	f003 030f 	and.w	r3, r3, #15
 8006a54:	4a12      	ldr	r2, [pc, #72]	; (8006aa0 <HAL_RCC_ClockConfig+0x35c>)
 8006a56:	5cd3      	ldrb	r3, [r2, r3]
 8006a58:	f003 031f 	and.w	r3, r3, #31
 8006a5c:	fa21 f303 	lsr.w	r3, r1, r3
 8006a60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a62:	4b0e      	ldr	r3, [pc, #56]	; (8006a9c <HAL_RCC_ClockConfig+0x358>)
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	f003 030f 	and.w	r3, r3, #15
 8006a6a:	4a0d      	ldr	r2, [pc, #52]	; (8006aa0 <HAL_RCC_ClockConfig+0x35c>)
 8006a6c:	5cd3      	ldrb	r3, [r2, r3]
 8006a6e:	f003 031f 	and.w	r3, r3, #31
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	fa22 f303 	lsr.w	r3, r2, r3
 8006a78:	4a0a      	ldr	r2, [pc, #40]	; (8006aa4 <HAL_RCC_ClockConfig+0x360>)
 8006a7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a7c:	4a0a      	ldr	r2, [pc, #40]	; (8006aa8 <HAL_RCC_ClockConfig+0x364>)
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006a82:	4b0a      	ldr	r3, [pc, #40]	; (8006aac <HAL_RCC_ClockConfig+0x368>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fb fb74 	bl	8002174 <HAL_InitTick>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	58024400 	.word	0x58024400
 8006aa0:	0800cc24 	.word	0x0800cc24
 8006aa4:	24000024 	.word	0x24000024
 8006aa8:	24000020 	.word	0x24000020
 8006aac:	24000028 	.word	0x24000028

08006ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b089      	sub	sp, #36	; 0x24
 8006ab4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ab6:	4baf      	ldr	r3, [pc, #700]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006abe:	2b18      	cmp	r3, #24
 8006ac0:	f200 814e 	bhi.w	8006d60 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006ac4:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <HAL_RCC_GetSysClockFreq+0x1c>)
 8006ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aca:	bf00      	nop
 8006acc:	08006b31 	.word	0x08006b31
 8006ad0:	08006d61 	.word	0x08006d61
 8006ad4:	08006d61 	.word	0x08006d61
 8006ad8:	08006d61 	.word	0x08006d61
 8006adc:	08006d61 	.word	0x08006d61
 8006ae0:	08006d61 	.word	0x08006d61
 8006ae4:	08006d61 	.word	0x08006d61
 8006ae8:	08006d61 	.word	0x08006d61
 8006aec:	08006b57 	.word	0x08006b57
 8006af0:	08006d61 	.word	0x08006d61
 8006af4:	08006d61 	.word	0x08006d61
 8006af8:	08006d61 	.word	0x08006d61
 8006afc:	08006d61 	.word	0x08006d61
 8006b00:	08006d61 	.word	0x08006d61
 8006b04:	08006d61 	.word	0x08006d61
 8006b08:	08006d61 	.word	0x08006d61
 8006b0c:	08006b5d 	.word	0x08006b5d
 8006b10:	08006d61 	.word	0x08006d61
 8006b14:	08006d61 	.word	0x08006d61
 8006b18:	08006d61 	.word	0x08006d61
 8006b1c:	08006d61 	.word	0x08006d61
 8006b20:	08006d61 	.word	0x08006d61
 8006b24:	08006d61 	.word	0x08006d61
 8006b28:	08006d61 	.word	0x08006d61
 8006b2c:	08006b63 	.word	0x08006b63
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b30:	4b90      	ldr	r3, [pc, #576]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0320 	and.w	r3, r3, #32
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d009      	beq.n	8006b50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b3c:	4b8d      	ldr	r3, [pc, #564]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	08db      	lsrs	r3, r3, #3
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	4a8c      	ldr	r2, [pc, #560]	; (8006d78 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006b48:	fa22 f303 	lsr.w	r3, r2, r3
 8006b4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006b4e:	e10a      	b.n	8006d66 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b50:	4b89      	ldr	r3, [pc, #548]	; (8006d78 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006b52:	61bb      	str	r3, [r7, #24]
    break;
 8006b54:	e107      	b.n	8006d66 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006b56:	4b89      	ldr	r3, [pc, #548]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006b58:	61bb      	str	r3, [r7, #24]
    break;
 8006b5a:	e104      	b.n	8006d66 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006b5c:	4b88      	ldr	r3, [pc, #544]	; (8006d80 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006b5e:	61bb      	str	r3, [r7, #24]
    break;
 8006b60:	e101      	b.n	8006d66 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b62:	4b84      	ldr	r3, [pc, #528]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b66:	f003 0303 	and.w	r3, r3, #3
 8006b6a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006b6c:	4b81      	ldr	r3, [pc, #516]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b70:	091b      	lsrs	r3, r3, #4
 8006b72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b76:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b78:	4b7e      	ldr	r3, [pc, #504]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006b82:	4b7c      	ldr	r3, [pc, #496]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b86:	08db      	lsrs	r3, r3, #3
 8006b88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	fb02 f303 	mul.w	r3, r2, r3
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80da 	beq.w	8006d5a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d05a      	beq.n	8006c62 <HAL_RCC_GetSysClockFreq+0x1b2>
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d302      	bcc.n	8006bb6 <HAL_RCC_GetSysClockFreq+0x106>
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d078      	beq.n	8006ca6 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006bb4:	e099      	b.n	8006cea <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bb6:	4b6f      	ldr	r3, [pc, #444]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d02d      	beq.n	8006c1e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bc2:	4b6c      	ldr	r3, [pc, #432]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	08db      	lsrs	r3, r3, #3
 8006bc8:	f003 0303 	and.w	r3, r3, #3
 8006bcc:	4a6a      	ldr	r2, [pc, #424]	; (8006d78 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006bce:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	ee07 3a90 	vmov	s15, r3
 8006be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bec:	4b61      	ldr	r3, [pc, #388]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf4:	ee07 3a90 	vmov	s15, r3
 8006bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bfc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c00:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006d84 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006c04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c18:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006c1c:	e087      	b.n	8006d2e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	ee07 3a90 	vmov	s15, r3
 8006c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c28:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006d88 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006c2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c30:	4b50      	ldr	r3, [pc, #320]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c38:	ee07 3a90 	vmov	s15, r3
 8006c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c40:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c44:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006d84 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006c48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c60:	e065      	b.n	8006d2e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	ee07 3a90 	vmov	s15, r3
 8006c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c6c:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006d8c <HAL_RCC_GetSysClockFreq+0x2dc>
 8006c70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c74:	4b3f      	ldr	r3, [pc, #252]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c7c:	ee07 3a90 	vmov	s15, r3
 8006c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c84:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c88:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006d84 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006c8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ca0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ca4:	e043      	b.n	8006d2e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	ee07 3a90 	vmov	s15, r3
 8006cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006d90 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006cb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cb8:	4b2e      	ldr	r3, [pc, #184]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc0:	ee07 3a90 	vmov	s15, r3
 8006cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ccc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006d84 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006cd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ce4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ce8:	e021      	b.n	8006d2e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	ee07 3a90 	vmov	s15, r3
 8006cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf4:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006d8c <HAL_RCC_GetSysClockFreq+0x2dc>
 8006cf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cfc:	4b1d      	ldr	r3, [pc, #116]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d04:	ee07 3a90 	vmov	s15, r3
 8006d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d10:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006d84 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006d14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d2c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006d2e:	4b11      	ldr	r3, [pc, #68]	; (8006d74 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d32:	0a5b      	lsrs	r3, r3, #9
 8006d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d38:	3301      	adds	r3, #1
 8006d3a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d46:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d52:	ee17 3a90 	vmov	r3, s15
 8006d56:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006d58:	e005      	b.n	8006d66 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61bb      	str	r3, [r7, #24]
    break;
 8006d5e:	e002      	b.n	8006d66 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006d60:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006d62:	61bb      	str	r3, [r7, #24]
    break;
 8006d64:	bf00      	nop
  }

  return sysclockfreq;
 8006d66:	69bb      	ldr	r3, [r7, #24]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3724      	adds	r7, #36	; 0x24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	58024400 	.word	0x58024400
 8006d78:	03d09000 	.word	0x03d09000
 8006d7c:	003d0900 	.word	0x003d0900
 8006d80:	017d7840 	.word	0x017d7840
 8006d84:	46000000 	.word	0x46000000
 8006d88:	4c742400 	.word	0x4c742400
 8006d8c:	4a742400 	.word	0x4a742400
 8006d90:	4bbebc20 	.word	0x4bbebc20

08006d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d9a:	f7ff fe89 	bl	8006ab0 <HAL_RCC_GetSysClockFreq>
 8006d9e:	4601      	mov	r1, r0
 8006da0:	4b10      	ldr	r3, [pc, #64]	; (8006de4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	0a1b      	lsrs	r3, r3, #8
 8006da6:	f003 030f 	and.w	r3, r3, #15
 8006daa:	4a0f      	ldr	r2, [pc, #60]	; (8006de8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006dac:	5cd3      	ldrb	r3, [r2, r3]
 8006dae:	f003 031f 	and.w	r3, r3, #31
 8006db2:	fa21 f303 	lsr.w	r3, r1, r3
 8006db6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006db8:	4b0a      	ldr	r3, [pc, #40]	; (8006de4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	f003 030f 	and.w	r3, r3, #15
 8006dc0:	4a09      	ldr	r2, [pc, #36]	; (8006de8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006dc2:	5cd3      	ldrb	r3, [r2, r3]
 8006dc4:	f003 031f 	and.w	r3, r3, #31
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	fa22 f303 	lsr.w	r3, r2, r3
 8006dce:	4a07      	ldr	r2, [pc, #28]	; (8006dec <HAL_RCC_GetHCLKFreq+0x58>)
 8006dd0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006dd2:	4a07      	ldr	r2, [pc, #28]	; (8006df0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006dd8:	4b04      	ldr	r3, [pc, #16]	; (8006dec <HAL_RCC_GetHCLKFreq+0x58>)
 8006dda:	681b      	ldr	r3, [r3, #0]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	58024400 	.word	0x58024400
 8006de8:	0800cc24 	.word	0x0800cc24
 8006dec:	24000024 	.word	0x24000024
 8006df0:	24000020 	.word	0x24000020

08006df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006df8:	f7ff ffcc 	bl	8006d94 <HAL_RCC_GetHCLKFreq>
 8006dfc:	4601      	mov	r1, r0
 8006dfe:	4b06      	ldr	r3, [pc, #24]	; (8006e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	091b      	lsrs	r3, r3, #4
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	4a04      	ldr	r2, [pc, #16]	; (8006e1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e0a:	5cd3      	ldrb	r3, [r2, r3]
 8006e0c:	f003 031f 	and.w	r3, r3, #31
 8006e10:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	58024400 	.word	0x58024400
 8006e1c:	0800cc24 	.word	0x0800cc24

08006e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006e24:	f7ff ffb6 	bl	8006d94 <HAL_RCC_GetHCLKFreq>
 8006e28:	4601      	mov	r1, r0
 8006e2a:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	0a1b      	lsrs	r3, r3, #8
 8006e30:	f003 0307 	and.w	r3, r3, #7
 8006e34:	4a04      	ldr	r2, [pc, #16]	; (8006e48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e36:	5cd3      	ldrb	r3, [r2, r3]
 8006e38:	f003 031f 	and.w	r3, r3, #31
 8006e3c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	58024400 	.word	0x58024400
 8006e48:	0800cc24 	.word	0x0800cc24

08006e4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e54:	2300      	movs	r3, #0
 8006e56:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e58:	2300      	movs	r3, #0
 8006e5a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d03d      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e70:	d013      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e76:	d802      	bhi.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d007      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006e7c:	e01f      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006e7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e82:	d013      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006e84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e88:	d01c      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006e8a:	e018      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e8c:	4baf      	ldr	r3, [pc, #700]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e90:	4aae      	ldr	r2, [pc, #696]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006e98:	e015      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	2102      	movs	r1, #2
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f001 fd23 	bl	80088ec <RCCEx_PLL2_Config>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006eaa:	e00c      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	3324      	adds	r3, #36	; 0x24
 8006eb0:	2102      	movs	r1, #2
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f001 fdcc 	bl	8008a50 <RCCEx_PLL3_Config>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ebc:	e003      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec2:	e000      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d109      	bne.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ecc:	4b9f      	ldr	r3, [pc, #636]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ed8:	499c      	ldr	r1, [pc, #624]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	650b      	str	r3, [r1, #80]	; 0x50
 8006ede:	e001      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee0:	7dfb      	ldrb	r3, [r7, #23]
 8006ee2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d03d      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d826      	bhi.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006ef8:	a201      	add	r2, pc, #4	; (adr r2, 8006f00 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efe:	bf00      	nop
 8006f00:	08006f15 	.word	0x08006f15
 8006f04:	08006f23 	.word	0x08006f23
 8006f08:	08006f35 	.word	0x08006f35
 8006f0c:	08006f4d 	.word	0x08006f4d
 8006f10:	08006f4d 	.word	0x08006f4d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f14:	4b8d      	ldr	r3, [pc, #564]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f18:	4a8c      	ldr	r2, [pc, #560]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f20:	e015      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	3304      	adds	r3, #4
 8006f26:	2100      	movs	r1, #0
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f001 fcdf 	bl	80088ec <RCCEx_PLL2_Config>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f32:	e00c      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3324      	adds	r3, #36	; 0x24
 8006f38:	2100      	movs	r1, #0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f001 fd88 	bl	8008a50 <RCCEx_PLL3_Config>
 8006f40:	4603      	mov	r3, r0
 8006f42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f44:	e003      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	75fb      	strb	r3, [r7, #23]
      break;
 8006f4a:	e000      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d109      	bne.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f54:	4b7d      	ldr	r3, [pc, #500]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f58:	f023 0207 	bic.w	r2, r3, #7
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f60:	497a      	ldr	r1, [pc, #488]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	650b      	str	r3, [r1, #80]	; 0x50
 8006f66:	e001      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f68:	7dfb      	ldrb	r3, [r7, #23]
 8006f6a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d03e      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7c:	2b80      	cmp	r3, #128	; 0x80
 8006f7e:	d01c      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006f80:	2b80      	cmp	r3, #128	; 0x80
 8006f82:	d804      	bhi.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d008      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006f88:	2b40      	cmp	r3, #64	; 0x40
 8006f8a:	d00d      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006f8c:	e01e      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006f8e:	2bc0      	cmp	r3, #192	; 0xc0
 8006f90:	d01f      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f96:	d01e      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006f98:	e018      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f9a:	4b6c      	ldr	r3, [pc, #432]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9e:	4a6b      	ldr	r2, [pc, #428]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006fa6:	e017      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3304      	adds	r3, #4
 8006fac:	2100      	movs	r1, #0
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f001 fc9c 	bl	80088ec <RCCEx_PLL2_Config>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006fb8:	e00e      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	3324      	adds	r3, #36	; 0x24
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f001 fd45 	bl	8008a50 <RCCEx_PLL3_Config>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006fca:	e005      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd0:	e002      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006fd2:	bf00      	nop
 8006fd4:	e000      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d109      	bne.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006fde:	4b5b      	ldr	r3, [pc, #364]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fea:	4958      	ldr	r1, [pc, #352]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	650b      	str	r3, [r1, #80]	; 0x50
 8006ff0:	e001      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
 8006ff4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d044      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800700c:	d01f      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800700e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007012:	d805      	bhi.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00a      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007018:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800701c:	d00e      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800701e:	e01f      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007020:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007024:	d01f      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007026:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800702a:	d01e      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800702c:	e018      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800702e:	4b47      	ldr	r3, [pc, #284]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007032:	4a46      	ldr	r2, [pc, #280]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007038:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800703a:	e017      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3304      	adds	r3, #4
 8007040:	2100      	movs	r1, #0
 8007042:	4618      	mov	r0, r3
 8007044:	f001 fc52 	bl	80088ec <RCCEx_PLL2_Config>
 8007048:	4603      	mov	r3, r0
 800704a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800704c:	e00e      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	3324      	adds	r3, #36	; 0x24
 8007052:	2100      	movs	r1, #0
 8007054:	4618      	mov	r0, r3
 8007056:	f001 fcfb 	bl	8008a50 <RCCEx_PLL3_Config>
 800705a:	4603      	mov	r3, r0
 800705c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800705e:	e005      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	75fb      	strb	r3, [r7, #23]
      break;
 8007064:	e002      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007066:	bf00      	nop
 8007068:	e000      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800706a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800706c:	7dfb      	ldrb	r3, [r7, #23]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10a      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007072:	4b36      	ldr	r3, [pc, #216]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007076:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007080:	4932      	ldr	r1, [pc, #200]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007082:	4313      	orrs	r3, r2
 8007084:	658b      	str	r3, [r1, #88]	; 0x58
 8007086:	e001      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007088:	7dfb      	ldrb	r3, [r7, #23]
 800708a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007094:	2b00      	cmp	r3, #0
 8007096:	d044      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800709e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070a2:	d01f      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80070a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070a8:	d805      	bhi.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00a      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80070ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070b2:	d00e      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80070b4:	e01f      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80070b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80070ba:	d01f      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80070bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070c0:	d01e      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80070c2:	e018      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070c4:	4b21      	ldr	r3, [pc, #132]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c8:	4a20      	ldr	r2, [pc, #128]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070d0:	e017      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	3304      	adds	r3, #4
 80070d6:	2100      	movs	r1, #0
 80070d8:	4618      	mov	r0, r3
 80070da:	f001 fc07 	bl	80088ec <RCCEx_PLL2_Config>
 80070de:	4603      	mov	r3, r0
 80070e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80070e2:	e00e      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	3324      	adds	r3, #36	; 0x24
 80070e8:	2100      	movs	r1, #0
 80070ea:	4618      	mov	r0, r3
 80070ec:	f001 fcb0 	bl	8008a50 <RCCEx_PLL3_Config>
 80070f0:	4603      	mov	r3, r0
 80070f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80070f4:	e005      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	75fb      	strb	r3, [r7, #23]
      break;
 80070fa:	e002      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80070fc:	bf00      	nop
 80070fe:	e000      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007102:	7dfb      	ldrb	r3, [r7, #23]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10a      	bne.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007108:	4b10      	ldr	r3, [pc, #64]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800710a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800710c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007116:	490d      	ldr	r1, [pc, #52]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007118:	4313      	orrs	r3, r2
 800711a:	658b      	str	r3, [r1, #88]	; 0x58
 800711c:	e001      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800711e:	7dfb      	ldrb	r3, [r7, #23]
 8007120:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d035      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007132:	2b10      	cmp	r3, #16
 8007134:	d00c      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8007136:	2b10      	cmp	r3, #16
 8007138:	d802      	bhi.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d01b      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800713e:	e017      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007140:	2b20      	cmp	r3, #32
 8007142:	d00c      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007144:	2b30      	cmp	r3, #48	; 0x30
 8007146:	d018      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007148:	e012      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800714a:	bf00      	nop
 800714c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007150:	4baf      	ldr	r3, [pc, #700]	; (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007154:	4aae      	ldr	r2, [pc, #696]	; (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800715a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800715c:	e00e      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3304      	adds	r3, #4
 8007162:	2102      	movs	r1, #2
 8007164:	4618      	mov	r0, r3
 8007166:	f001 fbc1 	bl	80088ec <RCCEx_PLL2_Config>
 800716a:	4603      	mov	r3, r0
 800716c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800716e:	e005      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	75fb      	strb	r3, [r7, #23]
      break;
 8007174:	e002      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007176:	bf00      	nop
 8007178:	e000      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800717a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d109      	bne.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007182:	4ba3      	ldr	r3, [pc, #652]	; (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007186:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800718e:	49a0      	ldr	r1, [pc, #640]	; (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007190:	4313      	orrs	r3, r2
 8007192:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007194:	e001      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007196:	7dfb      	ldrb	r3, [r7, #23]
 8007198:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d042      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071ae:	d01f      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80071b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071b4:	d805      	bhi.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80071ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071be:	d00e      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x392>
 80071c0:	e01f      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80071c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071c6:	d01f      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80071c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071cc:	d01e      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80071ce:	e018      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071d0:	4b8f      	ldr	r3, [pc, #572]	; (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d4:	4a8e      	ldr	r2, [pc, #568]	; (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071dc:	e017      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3304      	adds	r3, #4
 80071e2:	2100      	movs	r1, #0
 80071e4:	4618      	mov	r0, r3
 80071e6:	f001 fb81 	bl	80088ec <RCCEx_PLL2_Config>
 80071ea:	4603      	mov	r3, r0
 80071ec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071ee:	e00e      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3324      	adds	r3, #36	; 0x24
 80071f4:	2100      	movs	r1, #0
 80071f6:	4618      	mov	r0, r3
 80071f8:	f001 fc2a 	bl	8008a50 <RCCEx_PLL3_Config>
 80071fc:	4603      	mov	r3, r0
 80071fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007200:	e005      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	75fb      	strb	r3, [r7, #23]
      break;
 8007206:	e002      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007208:	bf00      	nop
 800720a:	e000      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800720c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800720e:	7dfb      	ldrb	r3, [r7, #23]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d109      	bne.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007214:	4b7e      	ldr	r3, [pc, #504]	; (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007218:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007220:	497b      	ldr	r1, [pc, #492]	; (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007222:	4313      	orrs	r3, r2
 8007224:	650b      	str	r3, [r1, #80]	; 0x50
 8007226:	e001      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007228:	7dfb      	ldrb	r3, [r7, #23]
 800722a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d042      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800723c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007240:	d01b      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007246:	d805      	bhi.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007248:	2b00      	cmp	r3, #0
 800724a:	d022      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800724c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007250:	d00a      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007252:	e01b      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007254:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007258:	d01d      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800725a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800725e:	d01c      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007260:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007264:	d01b      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007266:	e011      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	3304      	adds	r3, #4
 800726c:	2101      	movs	r1, #1
 800726e:	4618      	mov	r0, r3
 8007270:	f001 fb3c 	bl	80088ec <RCCEx_PLL2_Config>
 8007274:	4603      	mov	r3, r0
 8007276:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007278:	e012      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	3324      	adds	r3, #36	; 0x24
 800727e:	2101      	movs	r1, #1
 8007280:	4618      	mov	r0, r3
 8007282:	f001 fbe5 	bl	8008a50 <RCCEx_PLL3_Config>
 8007286:	4603      	mov	r3, r0
 8007288:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800728a:	e009      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	75fb      	strb	r3, [r7, #23]
      break;
 8007290:	e006      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007292:	bf00      	nop
 8007294:	e004      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007296:	bf00      	nop
 8007298:	e002      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800729a:	bf00      	nop
 800729c:	e000      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800729e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072a0:	7dfb      	ldrb	r3, [r7, #23]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d109      	bne.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80072a6:	4b5a      	ldr	r3, [pc, #360]	; (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072aa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072b2:	4957      	ldr	r1, [pc, #348]	; (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	650b      	str	r3, [r1, #80]	; 0x50
 80072b8:	e001      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
 80072bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d044      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072d4:	d01b      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80072d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072da:	d805      	bhi.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d022      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80072e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072e4:	d00a      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80072e6:	e01b      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80072e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ec:	d01d      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80072ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072f2:	d01c      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80072f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072f8:	d01b      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80072fa:	e011      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3304      	adds	r3, #4
 8007300:	2101      	movs	r1, #1
 8007302:	4618      	mov	r0, r3
 8007304:	f001 faf2 	bl	80088ec <RCCEx_PLL2_Config>
 8007308:	4603      	mov	r3, r0
 800730a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800730c:	e012      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3324      	adds	r3, #36	; 0x24
 8007312:	2101      	movs	r1, #1
 8007314:	4618      	mov	r0, r3
 8007316:	f001 fb9b 	bl	8008a50 <RCCEx_PLL3_Config>
 800731a:	4603      	mov	r3, r0
 800731c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800731e:	e009      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	75fb      	strb	r3, [r7, #23]
      break;
 8007324:	e006      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007326:	bf00      	nop
 8007328:	e004      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800732a:	bf00      	nop
 800732c:	e002      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800732e:	bf00      	nop
 8007330:	e000      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10a      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800733a:	4b35      	ldr	r3, [pc, #212]	; (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800733c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800733e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007348:	4931      	ldr	r1, [pc, #196]	; (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800734a:	4313      	orrs	r3, r2
 800734c:	658b      	str	r3, [r1, #88]	; 0x58
 800734e:	e001      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007350:	7dfb      	ldrb	r3, [r7, #23]
 8007352:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d02d      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007364:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007368:	d005      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800736a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800736e:	d009      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007370:	2b00      	cmp	r3, #0
 8007372:	d013      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007374:	e00f      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007376:	4b26      	ldr	r3, [pc, #152]	; (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737a:	4a25      	ldr	r2, [pc, #148]	; (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800737c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007380:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007382:	e00c      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	3304      	adds	r3, #4
 8007388:	2101      	movs	r1, #1
 800738a:	4618      	mov	r0, r3
 800738c:	f001 faae 	bl	80088ec <RCCEx_PLL2_Config>
 8007390:	4603      	mov	r3, r0
 8007392:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007394:	e003      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	75fb      	strb	r3, [r7, #23]
      break;
 800739a:	e000      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800739c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800739e:	7dfb      	ldrb	r3, [r7, #23]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d109      	bne.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80073a4:	4b1a      	ldr	r3, [pc, #104]	; (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073b0:	4917      	ldr	r1, [pc, #92]	; (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	650b      	str	r3, [r1, #80]	; 0x50
 80073b6:	e001      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d035      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073cc:	2b03      	cmp	r3, #3
 80073ce:	d81b      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80073d0:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80073d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d6:	bf00      	nop
 80073d8:	08007415 	.word	0x08007415
 80073dc:	080073e9 	.word	0x080073e9
 80073e0:	080073f7 	.word	0x080073f7
 80073e4:	08007415 	.word	0x08007415
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073e8:	4b09      	ldr	r3, [pc, #36]	; (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	4a08      	ldr	r2, [pc, #32]	; (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80073f4:	e00f      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	3304      	adds	r3, #4
 80073fa:	2102      	movs	r1, #2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f001 fa75 	bl	80088ec <RCCEx_PLL2_Config>
 8007402:	4603      	mov	r3, r0
 8007404:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007406:	e006      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	75fb      	strb	r3, [r7, #23]
      break;
 800740c:	e003      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800740e:	bf00      	nop
 8007410:	58024400 	.word	0x58024400
      break;
 8007414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d109      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800741c:	4bba      	ldr	r3, [pc, #744]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800741e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007420:	f023 0203 	bic.w	r2, r3, #3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007428:	49b7      	ldr	r1, [pc, #732]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800742a:	4313      	orrs	r3, r2
 800742c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800742e:	e001      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007430:	7dfb      	ldrb	r3, [r7, #23]
 8007432:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 8086 	beq.w	800754e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007442:	4bb2      	ldr	r3, [pc, #712]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4ab1      	ldr	r2, [pc, #708]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800744c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800744e:	f7fa fedb 	bl	8002208 <HAL_GetTick>
 8007452:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007454:	e009      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007456:	f7fa fed7 	bl	8002208 <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	2b64      	cmp	r3, #100	; 0x64
 8007462:	d902      	bls.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	75fb      	strb	r3, [r7, #23]
        break;
 8007468:	e005      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800746a:	4ba8      	ldr	r3, [pc, #672]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0ef      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8007476:	7dfb      	ldrb	r3, [r7, #23]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d166      	bne.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800747c:	4ba2      	ldr	r3, [pc, #648]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800747e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007486:	4053      	eors	r3, r2
 8007488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800748c:	2b00      	cmp	r3, #0
 800748e:	d013      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007490:	4b9d      	ldr	r3, [pc, #628]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007498:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800749a:	4b9b      	ldr	r3, [pc, #620]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800749c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749e:	4a9a      	ldr	r2, [pc, #616]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074a4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074a6:	4b98      	ldr	r3, [pc, #608]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074aa:	4a97      	ldr	r2, [pc, #604]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074b0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80074b2:	4a95      	ldr	r2, [pc, #596]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074c2:	d115      	bne.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c4:	f7fa fea0 	bl	8002208 <HAL_GetTick>
 80074c8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074ca:	e00b      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074cc:	f7fa fe9c 	bl	8002208 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074da:	4293      	cmp	r3, r2
 80074dc:	d902      	bls.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	75fb      	strb	r3, [r7, #23]
            break;
 80074e2:	e005      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074e4:	4b88      	ldr	r3, [pc, #544]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80074e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d0ed      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80074f0:	7dfb      	ldrb	r3, [r7, #23]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d126      	bne.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007500:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007504:	d10d      	bne.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007506:	4b80      	ldr	r3, [pc, #512]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007514:	0919      	lsrs	r1, r3, #4
 8007516:	4b7e      	ldr	r3, [pc, #504]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007518:	400b      	ands	r3, r1
 800751a:	497b      	ldr	r1, [pc, #492]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800751c:	4313      	orrs	r3, r2
 800751e:	610b      	str	r3, [r1, #16]
 8007520:	e005      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007522:	4b79      	ldr	r3, [pc, #484]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	4a78      	ldr	r2, [pc, #480]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007528:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800752c:	6113      	str	r3, [r2, #16]
 800752e:	4b76      	ldr	r3, [pc, #472]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007530:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800753c:	4972      	ldr	r1, [pc, #456]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800753e:	4313      	orrs	r3, r2
 8007540:	670b      	str	r3, [r1, #112]	; 0x70
 8007542:	e004      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007544:	7dfb      	ldrb	r3, [r7, #23]
 8007546:	75bb      	strb	r3, [r7, #22]
 8007548:	e001      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754a:	7dfb      	ldrb	r3, [r7, #23]
 800754c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	d07d      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800755e:	2b28      	cmp	r3, #40	; 0x28
 8007560:	d866      	bhi.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007562:	a201      	add	r2, pc, #4	; (adr r2, 8007568 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007568:	08007637 	.word	0x08007637
 800756c:	08007631 	.word	0x08007631
 8007570:	08007631 	.word	0x08007631
 8007574:	08007631 	.word	0x08007631
 8007578:	08007631 	.word	0x08007631
 800757c:	08007631 	.word	0x08007631
 8007580:	08007631 	.word	0x08007631
 8007584:	08007631 	.word	0x08007631
 8007588:	0800760d 	.word	0x0800760d
 800758c:	08007631 	.word	0x08007631
 8007590:	08007631 	.word	0x08007631
 8007594:	08007631 	.word	0x08007631
 8007598:	08007631 	.word	0x08007631
 800759c:	08007631 	.word	0x08007631
 80075a0:	08007631 	.word	0x08007631
 80075a4:	08007631 	.word	0x08007631
 80075a8:	0800761f 	.word	0x0800761f
 80075ac:	08007631 	.word	0x08007631
 80075b0:	08007631 	.word	0x08007631
 80075b4:	08007631 	.word	0x08007631
 80075b8:	08007631 	.word	0x08007631
 80075bc:	08007631 	.word	0x08007631
 80075c0:	08007631 	.word	0x08007631
 80075c4:	08007631 	.word	0x08007631
 80075c8:	08007637 	.word	0x08007637
 80075cc:	08007631 	.word	0x08007631
 80075d0:	08007631 	.word	0x08007631
 80075d4:	08007631 	.word	0x08007631
 80075d8:	08007631 	.word	0x08007631
 80075dc:	08007631 	.word	0x08007631
 80075e0:	08007631 	.word	0x08007631
 80075e4:	08007631 	.word	0x08007631
 80075e8:	08007637 	.word	0x08007637
 80075ec:	08007631 	.word	0x08007631
 80075f0:	08007631 	.word	0x08007631
 80075f4:	08007631 	.word	0x08007631
 80075f8:	08007631 	.word	0x08007631
 80075fc:	08007631 	.word	0x08007631
 8007600:	08007631 	.word	0x08007631
 8007604:	08007631 	.word	0x08007631
 8007608:	08007637 	.word	0x08007637
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	3304      	adds	r3, #4
 8007610:	2101      	movs	r1, #1
 8007612:	4618      	mov	r0, r3
 8007614:	f001 f96a 	bl	80088ec <RCCEx_PLL2_Config>
 8007618:	4603      	mov	r3, r0
 800761a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800761c:	e00c      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3324      	adds	r3, #36	; 0x24
 8007622:	2101      	movs	r1, #1
 8007624:	4618      	mov	r0, r3
 8007626:	f001 fa13 	bl	8008a50 <RCCEx_PLL3_Config>
 800762a:	4603      	mov	r3, r0
 800762c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800762e:	e003      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	75fb      	strb	r3, [r7, #23]
      break;
 8007634:	e000      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007638:	7dfb      	ldrb	r3, [r7, #23]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d109      	bne.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800763e:	4b32      	ldr	r3, [pc, #200]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007642:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800764a:	492f      	ldr	r1, [pc, #188]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800764c:	4313      	orrs	r3, r2
 800764e:	654b      	str	r3, [r1, #84]	; 0x54
 8007650:	e001      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007652:	7dfb      	ldrb	r3, [r7, #23]
 8007654:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d037      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007666:	2b05      	cmp	r3, #5
 8007668:	d820      	bhi.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x860>
 800766a:	a201      	add	r2, pc, #4	; (adr r2, 8007670 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800766c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007670:	080076b3 	.word	0x080076b3
 8007674:	08007689 	.word	0x08007689
 8007678:	0800769b 	.word	0x0800769b
 800767c:	080076b3 	.word	0x080076b3
 8007680:	080076b3 	.word	0x080076b3
 8007684:	080076b3 	.word	0x080076b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3304      	adds	r3, #4
 800768c:	2101      	movs	r1, #1
 800768e:	4618      	mov	r0, r3
 8007690:	f001 f92c 	bl	80088ec <RCCEx_PLL2_Config>
 8007694:	4603      	mov	r3, r0
 8007696:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007698:	e00c      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	3324      	adds	r3, #36	; 0x24
 800769e:	2101      	movs	r1, #1
 80076a0:	4618      	mov	r0, r3
 80076a2:	f001 f9d5 	bl	8008a50 <RCCEx_PLL3_Config>
 80076a6:	4603      	mov	r3, r0
 80076a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80076aa:	e003      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	75fb      	strb	r3, [r7, #23]
      break;
 80076b0:	e000      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80076b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d109      	bne.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80076ba:	4b13      	ldr	r3, [pc, #76]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80076bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076be:	f023 0207 	bic.w	r2, r3, #7
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076c6:	4910      	ldr	r1, [pc, #64]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	654b      	str	r3, [r1, #84]	; 0x54
 80076cc:	e001      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ce:	7dfb      	ldrb	r3, [r7, #23]
 80076d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0304 	and.w	r3, r3, #4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d040      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e4:	2b05      	cmp	r3, #5
 80076e6:	d827      	bhi.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80076e8:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80076ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	0800773f 	.word	0x0800773f
 80076f4:	08007715 	.word	0x08007715
 80076f8:	08007727 	.word	0x08007727
 80076fc:	0800773f 	.word	0x0800773f
 8007700:	0800773f 	.word	0x0800773f
 8007704:	0800773f 	.word	0x0800773f
 8007708:	58024400 	.word	0x58024400
 800770c:	58024800 	.word	0x58024800
 8007710:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	3304      	adds	r3, #4
 8007718:	2101      	movs	r1, #1
 800771a:	4618      	mov	r0, r3
 800771c:	f001 f8e6 	bl	80088ec <RCCEx_PLL2_Config>
 8007720:	4603      	mov	r3, r0
 8007722:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007724:	e00c      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	3324      	adds	r3, #36	; 0x24
 800772a:	2101      	movs	r1, #1
 800772c:	4618      	mov	r0, r3
 800772e:	f001 f98f 	bl	8008a50 <RCCEx_PLL3_Config>
 8007732:	4603      	mov	r3, r0
 8007734:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007736:	e003      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	75fb      	strb	r3, [r7, #23]
      break;
 800773c:	e000      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800773e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007740:	7dfb      	ldrb	r3, [r7, #23]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10a      	bne.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007746:	4bb2      	ldr	r3, [pc, #712]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774a:	f023 0207 	bic.w	r2, r3, #7
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007754:	49ae      	ldr	r1, [pc, #696]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007756:	4313      	orrs	r3, r2
 8007758:	658b      	str	r3, [r1, #88]	; 0x58
 800775a:	e001      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800775c:	7dfb      	ldrb	r3, [r7, #23]
 800775e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0320 	and.w	r3, r3, #32
 8007768:	2b00      	cmp	r3, #0
 800776a:	d044      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007776:	d01b      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800777c:	d805      	bhi.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800777e:	2b00      	cmp	r3, #0
 8007780:	d022      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007786:	d00a      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007788:	e01b      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800778a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800778e:	d01d      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007794:	d01c      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007796:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800779a:	d01b      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800779c:	e011      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3304      	adds	r3, #4
 80077a2:	2100      	movs	r1, #0
 80077a4:	4618      	mov	r0, r3
 80077a6:	f001 f8a1 	bl	80088ec <RCCEx_PLL2_Config>
 80077aa:	4603      	mov	r3, r0
 80077ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80077ae:	e012      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	3324      	adds	r3, #36	; 0x24
 80077b4:	2102      	movs	r1, #2
 80077b6:	4618      	mov	r0, r3
 80077b8:	f001 f94a 	bl	8008a50 <RCCEx_PLL3_Config>
 80077bc:	4603      	mov	r3, r0
 80077be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80077c0:	e009      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	75fb      	strb	r3, [r7, #23]
      break;
 80077c6:	e006      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80077c8:	bf00      	nop
 80077ca:	e004      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80077cc:	bf00      	nop
 80077ce:	e002      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80077d0:	bf00      	nop
 80077d2:	e000      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80077d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10a      	bne.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077dc:	4b8c      	ldr	r3, [pc, #560]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077ea:	4989      	ldr	r1, [pc, #548]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	654b      	str	r3, [r1, #84]	; 0x54
 80077f0:	e001      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
 80077f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d044      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800780c:	d01b      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800780e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007812:	d805      	bhi.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007814:	2b00      	cmp	r3, #0
 8007816:	d022      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800781c:	d00a      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800781e:	e01b      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007824:	d01d      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007826:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800782a:	d01c      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800782c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007830:	d01b      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007832:	e011      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	3304      	adds	r3, #4
 8007838:	2100      	movs	r1, #0
 800783a:	4618      	mov	r0, r3
 800783c:	f001 f856 	bl	80088ec <RCCEx_PLL2_Config>
 8007840:	4603      	mov	r3, r0
 8007842:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007844:	e012      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	3324      	adds	r3, #36	; 0x24
 800784a:	2102      	movs	r1, #2
 800784c:	4618      	mov	r0, r3
 800784e:	f001 f8ff 	bl	8008a50 <RCCEx_PLL3_Config>
 8007852:	4603      	mov	r3, r0
 8007854:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007856:	e009      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	75fb      	strb	r3, [r7, #23]
      break;
 800785c:	e006      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800785e:	bf00      	nop
 8007860:	e004      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007862:	bf00      	nop
 8007864:	e002      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007866:	bf00      	nop
 8007868:	e000      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800786a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10a      	bne.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007872:	4b67      	ldr	r3, [pc, #412]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007876:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007880:	4963      	ldr	r1, [pc, #396]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007882:	4313      	orrs	r3, r2
 8007884:	658b      	str	r3, [r1, #88]	; 0x58
 8007886:	e001      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007888:	7dfb      	ldrb	r3, [r7, #23]
 800788a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007894:	2b00      	cmp	r3, #0
 8007896:	d044      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800789e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078a2:	d01b      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80078a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078a8:	d805      	bhi.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d022      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80078ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078b2:	d00a      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80078b4:	e01b      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80078b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078ba:	d01d      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80078bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80078c0:	d01c      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80078c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80078c6:	d01b      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80078c8:	e011      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	3304      	adds	r3, #4
 80078ce:	2100      	movs	r1, #0
 80078d0:	4618      	mov	r0, r3
 80078d2:	f001 f80b 	bl	80088ec <RCCEx_PLL2_Config>
 80078d6:	4603      	mov	r3, r0
 80078d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80078da:	e012      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	3324      	adds	r3, #36	; 0x24
 80078e0:	2102      	movs	r1, #2
 80078e2:	4618      	mov	r0, r3
 80078e4:	f001 f8b4 	bl	8008a50 <RCCEx_PLL3_Config>
 80078e8:	4603      	mov	r3, r0
 80078ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80078ec:	e009      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	75fb      	strb	r3, [r7, #23]
      break;
 80078f2:	e006      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80078f4:	bf00      	nop
 80078f6:	e004      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80078f8:	bf00      	nop
 80078fa:	e002      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80078fc:	bf00      	nop
 80078fe:	e000      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007900:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007902:	7dfb      	ldrb	r3, [r7, #23]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10a      	bne.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007908:	4b41      	ldr	r3, [pc, #260]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800790a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800790c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007916:	493e      	ldr	r1, [pc, #248]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007918:	4313      	orrs	r3, r2
 800791a:	658b      	str	r3, [r1, #88]	; 0x58
 800791c:	e001      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0308 	and.w	r3, r3, #8
 800792a:	2b00      	cmp	r3, #0
 800792c:	d01a      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007938:	d10a      	bne.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3324      	adds	r3, #36	; 0x24
 800793e:	2102      	movs	r1, #2
 8007940:	4618      	mov	r0, r3
 8007942:	f001 f885 	bl	8008a50 <RCCEx_PLL3_Config>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007950:	4b2f      	ldr	r3, [pc, #188]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007954:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800795e:	492c      	ldr	r1, [pc, #176]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007960:	4313      	orrs	r3, r2
 8007962:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0310 	and.w	r3, r3, #16
 800796c:	2b00      	cmp	r3, #0
 800796e:	d01a      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800797a:	d10a      	bne.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3324      	adds	r3, #36	; 0x24
 8007980:	2102      	movs	r1, #2
 8007982:	4618      	mov	r0, r3
 8007984:	f001 f864 	bl	8008a50 <RCCEx_PLL3_Config>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007992:	4b1f      	ldr	r3, [pc, #124]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007996:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079a0:	491b      	ldr	r1, [pc, #108]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d032      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80079b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079bc:	d00d      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80079be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079c2:	d016      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d111      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	3304      	adds	r3, #4
 80079cc:	2100      	movs	r1, #0
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 ff8c 	bl	80088ec <RCCEx_PLL2_Config>
 80079d4:	4603      	mov	r3, r0
 80079d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80079d8:	e00c      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	3324      	adds	r3, #36	; 0x24
 80079de:	2102      	movs	r1, #2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f001 f835 	bl	8008a50 <RCCEx_PLL3_Config>
 80079e6:	4603      	mov	r3, r0
 80079e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80079ea:	e003      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	75fb      	strb	r3, [r7, #23]
      break;
 80079f0:	e000      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80079f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10c      	bne.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80079fa:	4b05      	ldr	r3, [pc, #20]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80079fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a08:	4901      	ldr	r1, [pc, #4]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	658b      	str	r3, [r1, #88]	; 0x58
 8007a0e:	e003      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007a10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
 8007a16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d02f      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a2e:	d00c      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007a30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a34:	d015      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a3a:	d10f      	bne.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a3c:	4b71      	ldr	r3, [pc, #452]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a40:	4a70      	ldr	r2, [pc, #448]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007a48:	e00c      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	3324      	adds	r3, #36	; 0x24
 8007a4e:	2101      	movs	r1, #1
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fffd 	bl	8008a50 <RCCEx_PLL3_Config>
 8007a56:	4603      	mov	r3, r0
 8007a58:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007a5a:	e003      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a60:	e000      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007a62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a64:	7dfb      	ldrb	r3, [r7, #23]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10a      	bne.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a6a:	4b66      	ldr	r3, [pc, #408]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a78:	4962      	ldr	r1, [pc, #392]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	654b      	str	r3, [r1, #84]	; 0x54
 8007a7e:	e001      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
 8007a82:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d029      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d003      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a9c:	d007      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007a9e:	e00f      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aa0:	4b58      	ldr	r3, [pc, #352]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa4:	4a57      	ldr	r2, [pc, #348]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007aac:	e00b      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	2102      	movs	r1, #2
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 ff19 	bl	80088ec <RCCEx_PLL2_Config>
 8007aba:	4603      	mov	r3, r0
 8007abc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007abe:	e002      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d109      	bne.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007acc:	4b4d      	ldr	r3, [pc, #308]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ad0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ad8:	494a      	ldr	r1, [pc, #296]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007ade:	e001      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
 8007ae2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3324      	adds	r3, #36	; 0x24
 8007af4:	2102      	movs	r1, #2
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 ffaa 	bl	8008a50 <RCCEx_PLL3_Config>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d02f      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b1a:	d00c      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b20:	d802      	bhi.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d011      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007b26:	e00d      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b2c:	d00f      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007b2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b32:	d00e      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007b34:	e006      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b36:	4b33      	ldr	r3, [pc, #204]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3a:	4a32      	ldr	r2, [pc, #200]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007b42:	e007      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	75fb      	strb	r3, [r7, #23]
      break;
 8007b48:	e004      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007b4a:	bf00      	nop
 8007b4c:	e002      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007b4e:	bf00      	nop
 8007b50:	e000      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d109      	bne.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b5a:	4b2a      	ldr	r3, [pc, #168]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b66:	4927      	ldr	r1, [pc, #156]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	654b      	str	r3, [r1, #84]	; 0x54
 8007b6c:	e001      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
 8007b70:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d008      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b7e:	4b21      	ldr	r3, [pc, #132]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b8a:	491e      	ldr	r1, [pc, #120]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d008      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b9c:	4b19      	ldr	r3, [pc, #100]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ba8:	4916      	ldr	r1, [pc, #88]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00d      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bba:	4b12      	ldr	r3, [pc, #72]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	4a11      	ldr	r2, [pc, #68]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007bc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bc4:	6113      	str	r3, [r2, #16]
 8007bc6:	4b0f      	ldr	r3, [pc, #60]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007bc8:	691a      	ldr	r2, [r3, #16]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007bd0:	490c      	ldr	r1, [pc, #48]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	da08      	bge.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007bde:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007be2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bea:	4906      	ldr	r1, [pc, #24]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007bf0:	7dbb      	ldrb	r3, [r7, #22]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	e000      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	58024400 	.word	0x58024400

08007c08 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b090      	sub	sp, #64	; 0x40
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c16:	d150      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007c18:	4ba1      	ldr	r3, [pc, #644]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c1c:	f003 0307 	and.w	r3, r3, #7
 8007c20:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c24:	2b04      	cmp	r3, #4
 8007c26:	d844      	bhi.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007c28:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2e:	bf00      	nop
 8007c30:	08007c45 	.word	0x08007c45
 8007c34:	08007c55 	.word	0x08007c55
 8007c38:	08007c65 	.word	0x08007c65
 8007c3c:	08007cad 	.word	0x08007cad
 8007c40:	08007c75 	.word	0x08007c75
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 fd03 	bl	8008654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c52:	e241      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c54:	f107 0318 	add.w	r3, r7, #24
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 fa63 	bl	8008124 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c62:	e239      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c64:	f107 030c 	add.w	r3, r7, #12
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 fba7 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c72:	e231      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c74:	4b8a      	ldr	r3, [pc, #552]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d102      	bne.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007c84:	4b87      	ldr	r3, [pc, #540]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007c86:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007c88:	e226      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c90:	d102      	bne.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007c92:	4b85      	ldr	r3, [pc, #532]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007c94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c96:	e21f      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c9e:	d102      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007ca0:	4b82      	ldr	r3, [pc, #520]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ca4:	e218      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007caa:	e215      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007cac:	4b80      	ldr	r3, [pc, #512]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007cae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb0:	e212      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb6:	bf00      	nop
 8007cb8:	e20e      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cc0:	d14f      	bne.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007cc2:	4b77      	ldr	r3, [pc, #476]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007cca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cce:	2b80      	cmp	r3, #128	; 0x80
 8007cd0:	d01c      	beq.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007cd2:	2b80      	cmp	r3, #128	; 0x80
 8007cd4:	d804      	bhi.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d008      	beq.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007cda:	2b40      	cmp	r3, #64	; 0x40
 8007cdc:	d00e      	beq.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007cde:	e03c      	b.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007ce0:	2bc0      	cmp	r3, #192	; 0xc0
 8007ce2:	d037      	beq.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ce8:	d018      	beq.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007cea:	e036      	b.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 fcaf 	bl	8008654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cfa:	e1ed      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cfc:	f107 0318 	add.w	r3, r7, #24
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 fa0f 	bl	8008124 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d0a:	e1e5      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d0c:	f107 030c 	add.w	r3, r7, #12
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 fb53 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d1a:	e1dd      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d1c:	4b60      	ldr	r3, [pc, #384]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d24:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d102      	bne.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007d2c:	4b5d      	ldr	r3, [pc, #372]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007d30:	e1d2      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d38:	d102      	bne.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007d3a:	4b5b      	ldr	r3, [pc, #364]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d3e:	e1cb      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d46:	d102      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007d48:	4b58      	ldr	r3, [pc, #352]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d4c:	e1c4      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d52:	e1c1      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d54:	4b56      	ldr	r3, [pc, #344]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007d56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d58:	e1be      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d5e:	bf00      	nop
 8007d60:	e1ba      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d68:	d153      	bne.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007d6a:	4b4d      	ldr	r3, [pc, #308]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d6e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007d72:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d7a:	d01f      	beq.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d80:	d805      	bhi.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00a      	beq.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007d86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d8a:	d00f      	beq.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007d8c:	e03d      	b.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007d8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007d92:	d037      	beq.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007d94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d98:	d018      	beq.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007d9a:	e036      	b.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 fc57 	bl	8008654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007daa:	e195      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dac:	f107 0318 	add.w	r3, r7, #24
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 f9b7 	bl	8008124 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dba:	e18d      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dbc:	f107 030c 	add.w	r3, r7, #12
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 fafb 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dca:	e185      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007dcc:	4b34      	ldr	r3, [pc, #208]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007dd4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d102      	bne.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007ddc:	4b31      	ldr	r3, [pc, #196]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007dde:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007de0:	e17a      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007de8:	d102      	bne.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007dea:	4b2f      	ldr	r3, [pc, #188]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dee:	e173      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007df6:	d102      	bne.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007df8:	4b2c      	ldr	r3, [pc, #176]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dfc:	e16c      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e02:	e169      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e04:	4b2a      	ldr	r3, [pc, #168]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007e06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e08:	e166      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e0e:	bf00      	nop
 8007e10:	e162      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e18:	d15d      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007e1a:	4b21      	ldr	r3, [pc, #132]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e1e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007e22:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e2a:	d01f      	beq.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007e2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e30:	d805      	bhi.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007e36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e3a:	d00f      	beq.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007e3c:	e047      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007e3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007e42:	d041      	beq.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007e44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e48:	d018      	beq.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007e4a:	e040      	b.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 fbff 	bl	8008654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e5a:	e13d      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e5c:	f107 0318 	add.w	r3, r7, #24
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 f95f 	bl	8008124 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e6a:	e135      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e6c:	f107 030c 	add.w	r3, r7, #12
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 faa3 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e7a:	e12d      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e7c:	4b08      	ldr	r3, [pc, #32]	; (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e84:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d102      	bne.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007e8c:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007e90:	e122      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e98:	d10c      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007e9a:	4b03      	ldr	r3, [pc, #12]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e9e:	e11b      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007ea0:	58024400 	.word	0x58024400
 8007ea4:	03d09000 	.word	0x03d09000
 8007ea8:	003d0900 	.word	0x003d0900
 8007eac:	017d7840 	.word	0x017d7840
 8007eb0:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eba:	d102      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007ebc:	4b89      	ldr	r3, [pc, #548]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ec0:	e10a      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ec6:	e107      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007ec8:	4b87      	ldr	r3, [pc, #540]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007eca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ecc:	e104      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ed2:	bf00      	nop
 8007ed4:	e100      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007edc:	d153      	bne.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007ede:	4b83      	ldr	r3, [pc, #524]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007ee6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eee:	d01f      	beq.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ef4:	d805      	bhi.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007efe:	d00f      	beq.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007f00:	e03d      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007f02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f06:	d037      	beq.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f0c:	d018      	beq.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007f0e:	e036      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 fb9d 	bl	8008654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f1e:	e0db      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f20:	f107 0318 	add.w	r3, r7, #24
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 f8fd 	bl	8008124 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f2e:	e0d3      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f30:	f107 030c 	add.w	r3, r7, #12
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 fa41 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f3e:	e0cb      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007f40:	4b6a      	ldr	r3, [pc, #424]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f48:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d102      	bne.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007f50:	4b67      	ldr	r3, [pc, #412]	; (80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007f52:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007f54:	e0c0      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f5c:	d102      	bne.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007f5e:	4b65      	ldr	r3, [pc, #404]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f62:	e0b9      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f6a:	d102      	bne.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007f6c:	4b5d      	ldr	r3, [pc, #372]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f70:	e0b2      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007f72:	2300      	movs	r3, #0
 8007f74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f76:	e0af      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f78:	4b5b      	ldr	r3, [pc, #364]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f7c:	e0ac      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f82:	bf00      	nop
 8007f84:	e0a8      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f8c:	d13d      	bne.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007f8e:	4b57      	ldr	r3, [pc, #348]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f96:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f9e:	d00c      	beq.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007fa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fa4:	d011      	beq.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d12b      	bne.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007faa:	f107 0318 	add.w	r3, r7, #24
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 f8b8 	bl	8008124 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fb8:	e08e      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fba:	f107 030c 	add.w	r3, r7, #12
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 f9fc 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fc8:	e086      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007fca:	4b48      	ldr	r3, [pc, #288]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fd2:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d102      	bne.n	8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007fda:	4b45      	ldr	r3, [pc, #276]	; (80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007fde:	e07b      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fe6:	d102      	bne.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007fe8:	4b42      	ldr	r3, [pc, #264]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007fea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fec:	e074      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ff4:	d102      	bne.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007ff6:	4b3b      	ldr	r3, [pc, #236]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ffa:	e06d      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008000:	e06a      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008002:	2300      	movs	r3, #0
 8008004:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008006:	bf00      	nop
 8008008:	e066      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008010:	d11f      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008012:	4b36      	ldr	r3, [pc, #216]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800801a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800801c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008026:	d008      	beq.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008028:	e00f      	b.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800802a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800802e:	4618      	mov	r0, r3
 8008030:	f000 fb10 	bl	8008654 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008036:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008038:	e04e      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800803a:	f107 0318 	add.w	r3, r7, #24
 800803e:	4618      	mov	r0, r3
 8008040:	f000 f870 	bl	8008124 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008048:	e046      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800804a:	2300      	movs	r3, #0
 800804c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800804e:	bf00      	nop
 8008050:	e042      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008058:	d13c      	bne.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800805a:	4b24      	ldr	r3, [pc, #144]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800805c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800805e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008062:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800806a:	d01e      	beq.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800806c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008070:	d805      	bhi.n	800807e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00d      	beq.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800807a:	d00e      	beq.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800807c:	e026      	b.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800807e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008082:	d01d      	beq.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008084:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008088:	d01d      	beq.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800808a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800808e:	d014      	beq.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008090:	e01c      	b.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008092:	f000 f831 	bl	80080f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008096:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008098:	e01e      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800809a:	f107 0318 	add.w	r3, r7, #24
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 f840 	bl	8008124 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080a8:	e016      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080aa:	f107 030c 	add.w	r3, r7, #12
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 f984 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080b8:	e00e      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80080ba:	4b0d      	ldr	r3, [pc, #52]	; (80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80080bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080be:	e00b      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80080c0:	4b0c      	ldr	r3, [pc, #48]	; (80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80080c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080c4:	e008      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80080c6:	4b07      	ldr	r3, [pc, #28]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80080c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080ca:	e005      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80080cc:	2300      	movs	r3, #0
 80080ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080d0:	bf00      	nop
 80080d2:	e001      	b.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80080d4:	2300      	movs	r3, #0
 80080d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80080d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3740      	adds	r7, #64	; 0x40
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	017d7840 	.word	0x017d7840
 80080e8:	00bb8000 	.word	0x00bb8000
 80080ec:	58024400 	.word	0x58024400
 80080f0:	03d09000 	.word	0x03d09000
 80080f4:	003d0900 	.word	0x003d0900

080080f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80080fc:	f7fe fe4a 	bl	8006d94 <HAL_RCC_GetHCLKFreq>
 8008100:	4601      	mov	r1, r0
 8008102:	4b06      	ldr	r3, [pc, #24]	; (800811c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	091b      	lsrs	r3, r3, #4
 8008108:	f003 0307 	and.w	r3, r3, #7
 800810c:	4a04      	ldr	r2, [pc, #16]	; (8008120 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800810e:	5cd3      	ldrb	r3, [r2, r3]
 8008110:	f003 031f 	and.w	r3, r3, #31
 8008114:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008118:	4618      	mov	r0, r3
 800811a:	bd80      	pop	{r7, pc}
 800811c:	58024400 	.word	0x58024400
 8008120:	0800cc24 	.word	0x0800cc24

08008124 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008124:	b480      	push	{r7}
 8008126:	b089      	sub	sp, #36	; 0x24
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800812c:	4b9d      	ldr	r3, [pc, #628]	; (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800812e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008130:	f003 0303 	and.w	r3, r3, #3
 8008134:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008136:	4b9b      	ldr	r3, [pc, #620]	; (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813a:	0b1b      	lsrs	r3, r3, #12
 800813c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008140:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008142:	4b98      	ldr	r3, [pc, #608]	; (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008146:	091b      	lsrs	r3, r3, #4
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800814e:	4b95      	ldr	r3, [pc, #596]	; (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008152:	08db      	lsrs	r3, r3, #3
 8008154:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	fb02 f303 	mul.w	r3, r2, r3
 800815e:	ee07 3a90 	vmov	s15, r3
 8008162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008166:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 810a 	beq.w	8008386 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d05a      	beq.n	800822e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008178:	2b01      	cmp	r3, #1
 800817a:	d302      	bcc.n	8008182 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800817c:	2b02      	cmp	r3, #2
 800817e:	d078      	beq.n	8008272 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008180:	e099      	b.n	80082b6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008182:	4b88      	ldr	r3, [pc, #544]	; (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b00      	cmp	r3, #0
 800818c:	d02d      	beq.n	80081ea <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800818e:	4b85      	ldr	r3, [pc, #532]	; (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	08db      	lsrs	r3, r3, #3
 8008194:	f003 0303 	and.w	r3, r3, #3
 8008198:	4a83      	ldr	r2, [pc, #524]	; (80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800819a:	fa22 f303 	lsr.w	r3, r2, r3
 800819e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	ee07 3a90 	vmov	s15, r3
 80081a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	ee07 3a90 	vmov	s15, r3
 80081b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b8:	4b7a      	ldr	r3, [pc, #488]	; (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081c0:	ee07 3a90 	vmov	s15, r3
 80081c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80081cc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80081d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081e4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80081e8:	e087      	b.n	80082fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	ee07 3a90 	vmov	s15, r3
 80081f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80083b0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80081f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081fc:	4b69      	ldr	r3, [pc, #420]	; (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80081fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008204:	ee07 3a90 	vmov	s15, r3
 8008208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800820c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008210:	eddf 5a66 	vldr	s11, [pc, #408]	; 80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008214:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800821c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008220:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008228:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800822c:	e065      	b.n	80082fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	ee07 3a90 	vmov	s15, r3
 8008234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008238:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80083b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800823c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008240:	4b58      	ldr	r3, [pc, #352]	; (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008248:	ee07 3a90 	vmov	s15, r3
 800824c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008250:	ed97 6a03 	vldr	s12, [r7, #12]
 8008254:	eddf 5a55 	vldr	s11, [pc, #340]	; 80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008258:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800825c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008260:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008264:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800826c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008270:	e043      	b.n	80082fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	ee07 3a90 	vmov	s15, r3
 8008278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008280:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008284:	4b47      	ldr	r3, [pc, #284]	; (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800828c:	ee07 3a90 	vmov	s15, r3
 8008290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008294:	ed97 6a03 	vldr	s12, [r7, #12]
 8008298:	eddf 5a44 	vldr	s11, [pc, #272]	; 80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800829c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082b4:	e021      	b.n	80082fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	ee07 3a90 	vmov	s15, r3
 80082bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80083b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80082c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082c8:	4b36      	ldr	r3, [pc, #216]	; (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d0:	ee07 3a90 	vmov	s15, r3
 80082d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80082dc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80082e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082f8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80082fa:	4b2a      	ldr	r3, [pc, #168]	; (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fe:	0a5b      	lsrs	r3, r3, #9
 8008300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008304:	ee07 3a90 	vmov	s15, r3
 8008308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008310:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008314:	edd7 6a07 	vldr	s13, [r7, #28]
 8008318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800831c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008320:	ee17 2a90 	vmov	r2, s15
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008328:	4b1e      	ldr	r3, [pc, #120]	; (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800832a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832c:	0c1b      	lsrs	r3, r3, #16
 800832e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800833e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008342:	edd7 6a07 	vldr	s13, [r7, #28]
 8008346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800834a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800834e:	ee17 2a90 	vmov	r2, s15
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008356:	4b13      	ldr	r3, [pc, #76]	; (80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835a:	0e1b      	lsrs	r3, r3, #24
 800835c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008360:	ee07 3a90 	vmov	s15, r3
 8008364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008368:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800836c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008370:	edd7 6a07 	vldr	s13, [r7, #28]
 8008374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800837c:	ee17 2a90 	vmov	r2, s15
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008384:	e008      	b.n	8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	609a      	str	r2, [r3, #8]
}
 8008398:	bf00      	nop
 800839a:	3724      	adds	r7, #36	; 0x24
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	58024400 	.word	0x58024400
 80083a8:	03d09000 	.word	0x03d09000
 80083ac:	46000000 	.word	0x46000000
 80083b0:	4c742400 	.word	0x4c742400
 80083b4:	4a742400 	.word	0x4a742400
 80083b8:	4bbebc20 	.word	0x4bbebc20

080083bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80083bc:	b480      	push	{r7}
 80083be:	b089      	sub	sp, #36	; 0x24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083c4:	4b9d      	ldr	r3, [pc, #628]	; (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c8:	f003 0303 	and.w	r3, r3, #3
 80083cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80083ce:	4b9b      	ldr	r3, [pc, #620]	; (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d2:	0d1b      	lsrs	r3, r3, #20
 80083d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80083da:	4b98      	ldr	r3, [pc, #608]	; (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083de:	0a1b      	lsrs	r3, r3, #8
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80083e6:	4b95      	ldr	r3, [pc, #596]	; (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ea:	08db      	lsrs	r3, r3, #3
 80083ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	fb02 f303 	mul.w	r3, r2, r3
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2b00      	cmp	r3, #0
 8008406:	f000 810a 	beq.w	800861e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d05a      	beq.n	80084c6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008410:	2b01      	cmp	r3, #1
 8008412:	d302      	bcc.n	800841a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008414:	2b02      	cmp	r3, #2
 8008416:	d078      	beq.n	800850a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008418:	e099      	b.n	800854e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800841a:	4b88      	ldr	r3, [pc, #544]	; (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0320 	and.w	r3, r3, #32
 8008422:	2b00      	cmp	r3, #0
 8008424:	d02d      	beq.n	8008482 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008426:	4b85      	ldr	r3, [pc, #532]	; (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	08db      	lsrs	r3, r3, #3
 800842c:	f003 0303 	and.w	r3, r3, #3
 8008430:	4a83      	ldr	r2, [pc, #524]	; (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8008432:	fa22 f303 	lsr.w	r3, r2, r3
 8008436:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	ee07 3a90 	vmov	s15, r3
 800843e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	ee07 3a90 	vmov	s15, r3
 8008448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008450:	4b7a      	ldr	r3, [pc, #488]	; (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008458:	ee07 3a90 	vmov	s15, r3
 800845c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008460:	ed97 6a03 	vldr	s12, [r7, #12]
 8008464:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008468:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008470:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008474:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008480:	e087      	b.n	8008592 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	ee07 3a90 	vmov	s15, r3
 8008488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008494:	4b69      	ldr	r3, [pc, #420]	; (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849c:	ee07 3a90 	vmov	s15, r3
 80084a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80084a8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80084ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084c4:	e065      	b.n	8008592 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	ee07 3a90 	vmov	s15, r3
 80084cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084d0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800864c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80084d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084d8:	4b58      	ldr	r3, [pc, #352]	; (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80084da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e0:	ee07 3a90 	vmov	s15, r3
 80084e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80084ec:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80084f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008504:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008508:	e043      	b.n	8008592 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	ee07 3a90 	vmov	s15, r3
 8008510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008514:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800851c:	4b47      	ldr	r3, [pc, #284]	; (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800851e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008524:	ee07 3a90 	vmov	s15, r3
 8008528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800852c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008530:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800853c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008548:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800854c:	e021      	b.n	8008592 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	ee07 3a90 	vmov	s15, r3
 8008554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008558:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800864c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800855c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008560:	4b36      	ldr	r3, [pc, #216]	; (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008568:	ee07 3a90 	vmov	s15, r3
 800856c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008570:	ed97 6a03 	vldr	s12, [r7, #12]
 8008574:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800857c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008590:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008592:	4b2a      	ldr	r3, [pc, #168]	; (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008596:	0a5b      	lsrs	r3, r3, #9
 8008598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800859c:	ee07 3a90 	vmov	s15, r3
 80085a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80085b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085b8:	ee17 2a90 	vmov	r2, s15
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80085c0:	4b1e      	ldr	r3, [pc, #120]	; (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80085c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c4:	0c1b      	lsrs	r3, r3, #16
 80085c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085ca:	ee07 3a90 	vmov	s15, r3
 80085ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085da:	edd7 6a07 	vldr	s13, [r7, #28]
 80085de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085e6:	ee17 2a90 	vmov	r2, s15
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80085ee:	4b13      	ldr	r3, [pc, #76]	; (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80085f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f2:	0e1b      	lsrs	r3, r3, #24
 80085f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085f8:	ee07 3a90 	vmov	s15, r3
 80085fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008604:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008608:	edd7 6a07 	vldr	s13, [r7, #28]
 800860c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008614:	ee17 2a90 	vmov	r2, s15
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800861c:	e008      	b.n	8008630 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	609a      	str	r2, [r3, #8]
}
 8008630:	bf00      	nop
 8008632:	3724      	adds	r7, #36	; 0x24
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	58024400 	.word	0x58024400
 8008640:	03d09000 	.word	0x03d09000
 8008644:	46000000 	.word	0x46000000
 8008648:	4c742400 	.word	0x4c742400
 800864c:	4a742400 	.word	0x4a742400
 8008650:	4bbebc20 	.word	0x4bbebc20

08008654 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008654:	b480      	push	{r7}
 8008656:	b089      	sub	sp, #36	; 0x24
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800865c:	4b9d      	ldr	r3, [pc, #628]	; (80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800865e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008660:	f003 0303 	and.w	r3, r3, #3
 8008664:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008666:	4b9b      	ldr	r3, [pc, #620]	; (80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866a:	091b      	lsrs	r3, r3, #4
 800866c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008670:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008672:	4b98      	ldr	r3, [pc, #608]	; (80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800867c:	4b95      	ldr	r3, [pc, #596]	; (80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800867e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008680:	08db      	lsrs	r3, r3, #3
 8008682:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	fb02 f303 	mul.w	r3, r2, r3
 800868c:	ee07 3a90 	vmov	s15, r3
 8008690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008694:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	2b00      	cmp	r3, #0
 800869c:	f000 810a 	beq.w	80088b4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d05a      	beq.n	800875c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d302      	bcc.n	80086b0 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d078      	beq.n	80087a0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80086ae:	e099      	b.n	80087e4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086b0:	4b88      	ldr	r3, [pc, #544]	; (80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0320 	and.w	r3, r3, #32
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d02d      	beq.n	8008718 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086bc:	4b85      	ldr	r3, [pc, #532]	; (80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	08db      	lsrs	r3, r3, #3
 80086c2:	f003 0303 	and.w	r3, r3, #3
 80086c6:	4a84      	ldr	r2, [pc, #528]	; (80088d8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80086c8:	fa22 f303 	lsr.w	r3, r2, r3
 80086cc:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	ee07 3a90 	vmov	s15, r3
 80086d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	ee07 3a90 	vmov	s15, r3
 80086de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086e6:	4b7b      	ldr	r3, [pc, #492]	; (80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80086e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ee:	ee07 3a90 	vmov	s15, r3
 80086f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80088dc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80086fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800870a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800870e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008712:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008716:	e087      	b.n	8008828 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008722:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80088e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8008726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800872a:	4b6a      	ldr	r3, [pc, #424]	; (80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800872c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008732:	ee07 3a90 	vmov	s15, r3
 8008736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800873a:	ed97 6a03 	vldr	s12, [r7, #12]
 800873e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80088dc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800874a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800874e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008756:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800875a:	e065      	b.n	8008828 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	ee07 3a90 	vmov	s15, r3
 8008762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008766:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80088e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800876a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800876e:	4b59      	ldr	r3, [pc, #356]	; (80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008776:	ee07 3a90 	vmov	s15, r3
 800877a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800877e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008782:	eddf 5a56 	vldr	s11, [pc, #344]	; 80088dc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800878a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800878e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800879a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800879e:	e043      	b.n	8008828 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80088e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087b2:	4b48      	ldr	r3, [pc, #288]	; (80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80087b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ba:	ee07 3a90 	vmov	s15, r3
 80087be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80087c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80088dc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80087ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087e2:	e021      	b.n	8008828 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	ee07 3a90 	vmov	s15, r3
 80087ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80088e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80087f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087f6:	4b37      	ldr	r3, [pc, #220]	; (80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80087f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087fe:	ee07 3a90 	vmov	s15, r3
 8008802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008806:	ed97 6a03 	vldr	s12, [r7, #12]
 800880a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80088dc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800880e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800881a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800881e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008822:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008826:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008828:	4b2a      	ldr	r3, [pc, #168]	; (80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800882a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882c:	0a5b      	lsrs	r3, r3, #9
 800882e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800883e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008842:	edd7 6a07 	vldr	s13, [r7, #28]
 8008846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800884a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800884e:	ee17 2a90 	vmov	r2, s15
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008856:	4b1f      	ldr	r3, [pc, #124]	; (80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885a:	0c1b      	lsrs	r3, r3, #16
 800885c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008860:	ee07 3a90 	vmov	s15, r3
 8008864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008868:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800886c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008870:	edd7 6a07 	vldr	s13, [r7, #28]
 8008874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800887c:	ee17 2a90 	vmov	r2, s15
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008884:	4b13      	ldr	r3, [pc, #76]	; (80088d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008888:	0e1b      	lsrs	r3, r3, #24
 800888a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800888e:	ee07 3a90 	vmov	s15, r3
 8008892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008896:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800889a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800889e:	edd7 6a07 	vldr	s13, [r7, #28]
 80088a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088aa:	ee17 2a90 	vmov	r2, s15
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80088b2:	e008      	b.n	80088c6 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	609a      	str	r2, [r3, #8]
}
 80088c6:	bf00      	nop
 80088c8:	3724      	adds	r7, #36	; 0x24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	58024400 	.word	0x58024400
 80088d8:	03d09000 	.word	0x03d09000
 80088dc:	46000000 	.word	0x46000000
 80088e0:	4c742400 	.word	0x4c742400
 80088e4:	4a742400 	.word	0x4a742400
 80088e8:	4bbebc20 	.word	0x4bbebc20

080088ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088fa:	4b53      	ldr	r3, [pc, #332]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 80088fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fe:	f003 0303 	and.w	r3, r3, #3
 8008902:	2b03      	cmp	r3, #3
 8008904:	d101      	bne.n	800890a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e099      	b.n	8008a3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800890a:	4b4f      	ldr	r3, [pc, #316]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a4e      	ldr	r2, [pc, #312]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 8008910:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008916:	f7f9 fc77 	bl	8002208 <HAL_GetTick>
 800891a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800891c:	e008      	b.n	8008930 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800891e:	f7f9 fc73 	bl	8002208 <HAL_GetTick>
 8008922:	4602      	mov	r2, r0
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	2b02      	cmp	r3, #2
 800892a:	d901      	bls.n	8008930 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e086      	b.n	8008a3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008930:	4b45      	ldr	r3, [pc, #276]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1f0      	bne.n	800891e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800893c:	4b42      	ldr	r3, [pc, #264]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 800893e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008940:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	031b      	lsls	r3, r3, #12
 800894a:	493f      	ldr	r1, [pc, #252]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 800894c:	4313      	orrs	r3, r2
 800894e:	628b      	str	r3, [r1, #40]	; 0x28
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	3b01      	subs	r3, #1
 8008956:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	3b01      	subs	r3, #1
 8008960:	025b      	lsls	r3, r3, #9
 8008962:	b29b      	uxth	r3, r3
 8008964:	431a      	orrs	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	3b01      	subs	r3, #1
 800896c:	041b      	lsls	r3, r3, #16
 800896e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008972:	431a      	orrs	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	3b01      	subs	r3, #1
 800897a:	061b      	lsls	r3, r3, #24
 800897c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008980:	4931      	ldr	r1, [pc, #196]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 8008982:	4313      	orrs	r3, r2
 8008984:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008986:	4b30      	ldr	r3, [pc, #192]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 8008988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	492d      	ldr	r1, [pc, #180]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 8008994:	4313      	orrs	r3, r2
 8008996:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008998:	4b2b      	ldr	r3, [pc, #172]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 800899a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899c:	f023 0220 	bic.w	r2, r3, #32
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	4928      	ldr	r1, [pc, #160]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 80089a6:	4313      	orrs	r3, r2
 80089a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80089aa:	4b27      	ldr	r3, [pc, #156]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 80089ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ae:	4a26      	ldr	r2, [pc, #152]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 80089b0:	f023 0310 	bic.w	r3, r3, #16
 80089b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80089b6:	4b24      	ldr	r3, [pc, #144]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 80089b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089ba:	4b24      	ldr	r3, [pc, #144]	; (8008a4c <RCCEx_PLL2_Config+0x160>)
 80089bc:	4013      	ands	r3, r2
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	69d2      	ldr	r2, [r2, #28]
 80089c2:	00d2      	lsls	r2, r2, #3
 80089c4:	4920      	ldr	r1, [pc, #128]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 80089c6:	4313      	orrs	r3, r2
 80089c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80089ca:	4b1f      	ldr	r3, [pc, #124]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 80089cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ce:	4a1e      	ldr	r2, [pc, #120]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 80089d0:	f043 0310 	orr.w	r3, r3, #16
 80089d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d106      	bne.n	80089ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80089dc:	4b1a      	ldr	r3, [pc, #104]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 80089de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e0:	4a19      	ldr	r2, [pc, #100]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 80089e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089e8:	e00f      	b.n	8008a0a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d106      	bne.n	80089fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80089f0:	4b15      	ldr	r3, [pc, #84]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 80089f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f4:	4a14      	ldr	r2, [pc, #80]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 80089f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089fc:	e005      	b.n	8008a0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80089fe:	4b12      	ldr	r3, [pc, #72]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 8008a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a02:	4a11      	ldr	r2, [pc, #68]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 8008a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008a0a:	4b0f      	ldr	r3, [pc, #60]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a0e      	ldr	r2, [pc, #56]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 8008a10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a16:	f7f9 fbf7 	bl	8002208 <HAL_GetTick>
 8008a1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a1c:	e008      	b.n	8008a30 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008a1e:	f7f9 fbf3 	bl	8002208 <HAL_GetTick>
 8008a22:	4602      	mov	r2, r0
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d901      	bls.n	8008a30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e006      	b.n	8008a3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a30:	4b05      	ldr	r3, [pc, #20]	; (8008a48 <RCCEx_PLL2_Config+0x15c>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d0f0      	beq.n	8008a1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	58024400 	.word	0x58024400
 8008a4c:	ffff0007 	.word	0xffff0007

08008a50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a5e:	4b53      	ldr	r3, [pc, #332]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a62:	f003 0303 	and.w	r3, r3, #3
 8008a66:	2b03      	cmp	r3, #3
 8008a68:	d101      	bne.n	8008a6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e099      	b.n	8008ba2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008a6e:	4b4f      	ldr	r3, [pc, #316]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a4e      	ldr	r2, [pc, #312]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a7a:	f7f9 fbc5 	bl	8002208 <HAL_GetTick>
 8008a7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a80:	e008      	b.n	8008a94 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008a82:	f7f9 fbc1 	bl	8002208 <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d901      	bls.n	8008a94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e086      	b.n	8008ba2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a94:	4b45      	ldr	r3, [pc, #276]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1f0      	bne.n	8008a82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008aa0:	4b42      	ldr	r3, [pc, #264]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	051b      	lsls	r3, r3, #20
 8008aae:	493f      	ldr	r1, [pc, #252]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	628b      	str	r3, [r1, #40]	; 0x28
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	025b      	lsls	r3, r3, #9
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	431a      	orrs	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	041b      	lsls	r3, r3, #16
 8008ad2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ad6:	431a      	orrs	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	061b      	lsls	r3, r3, #24
 8008ae0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ae4:	4931      	ldr	r1, [pc, #196]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008aea:	4b30      	ldr	r3, [pc, #192]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	492d      	ldr	r1, [pc, #180]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008afc:	4b2b      	ldr	r3, [pc, #172]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	4928      	ldr	r1, [pc, #160]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008b0e:	4b27      	ldr	r3, [pc, #156]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b12:	4a26      	ldr	r2, [pc, #152]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008b1a:	4b24      	ldr	r3, [pc, #144]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008b1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b1e:	4b24      	ldr	r3, [pc, #144]	; (8008bb0 <RCCEx_PLL3_Config+0x160>)
 8008b20:	4013      	ands	r3, r2
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	69d2      	ldr	r2, [r2, #28]
 8008b26:	00d2      	lsls	r2, r2, #3
 8008b28:	4920      	ldr	r1, [pc, #128]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008b2e:	4b1f      	ldr	r3, [pc, #124]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b32:	4a1e      	ldr	r2, [pc, #120]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d106      	bne.n	8008b4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008b40:	4b1a      	ldr	r3, [pc, #104]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b44:	4a19      	ldr	r2, [pc, #100]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008b46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008b4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b4c:	e00f      	b.n	8008b6e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d106      	bne.n	8008b62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008b54:	4b15      	ldr	r3, [pc, #84]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b58:	4a14      	ldr	r2, [pc, #80]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008b5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b60:	e005      	b.n	8008b6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008b62:	4b12      	ldr	r3, [pc, #72]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b66:	4a11      	ldr	r2, [pc, #68]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008b68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008b6e:	4b0f      	ldr	r3, [pc, #60]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a0e      	ldr	r2, [pc, #56]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b7a:	f7f9 fb45 	bl	8002208 <HAL_GetTick>
 8008b7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b80:	e008      	b.n	8008b94 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008b82:	f7f9 fb41 	bl	8002208 <HAL_GetTick>
 8008b86:	4602      	mov	r2, r0
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d901      	bls.n	8008b94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e006      	b.n	8008ba2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b94:	4b05      	ldr	r3, [pc, #20]	; (8008bac <RCCEx_PLL3_Config+0x15c>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d0f0      	beq.n	8008b82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	58024400 	.word	0x58024400
 8008bb0:	ffff0007 	.word	0xffff0007

08008bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e01d      	b.n	8008c02 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d106      	bne.n	8008be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f7f8 ff7e 	bl	8001adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2202      	movs	r2, #2
 8008be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f000 fa4c 	bl	8009090 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3708      	adds	r7, #8
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
	...

08008c0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68da      	ldr	r2, [r3, #12]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f042 0201 	orr.w	r2, r2, #1
 8008c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689a      	ldr	r2, [r3, #8]
 8008c2a:	4b0c      	ldr	r3, [pc, #48]	; (8008c5c <HAL_TIM_Base_Start_IT+0x50>)
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2b06      	cmp	r3, #6
 8008c34:	d00b      	beq.n	8008c4e <HAL_TIM_Base_Start_IT+0x42>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c3c:	d007      	beq.n	8008c4e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f042 0201 	orr.w	r2, r2, #1
 8008c4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	00010007 	.word	0x00010007

08008c60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	f003 0302 	and.w	r3, r3, #2
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d122      	bne.n	8008cbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	f003 0302 	and.w	r3, r3, #2
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d11b      	bne.n	8008cbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f06f 0202 	mvn.w	r2, #2
 8008c8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	f003 0303 	and.w	r3, r3, #3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d003      	beq.n	8008caa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f9d6 	bl	8009054 <HAL_TIM_IC_CaptureCallback>
 8008ca8:	e005      	b.n	8008cb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f9c8 	bl	8009040 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f9d9 	bl	8009068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	f003 0304 	and.w	r3, r3, #4
 8008cc6:	2b04      	cmp	r3, #4
 8008cc8:	d122      	bne.n	8008d10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	f003 0304 	and.w	r3, r3, #4
 8008cd4:	2b04      	cmp	r3, #4
 8008cd6:	d11b      	bne.n	8008d10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f06f 0204 	mvn.w	r2, #4
 8008ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2202      	movs	r2, #2
 8008ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f9ac 	bl	8009054 <HAL_TIM_IC_CaptureCallback>
 8008cfc:	e005      	b.n	8008d0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f99e 	bl	8009040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f9af 	bl	8009068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	f003 0308 	and.w	r3, r3, #8
 8008d1a:	2b08      	cmp	r3, #8
 8008d1c:	d122      	bne.n	8008d64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	f003 0308 	and.w	r3, r3, #8
 8008d28:	2b08      	cmp	r3, #8
 8008d2a:	d11b      	bne.n	8008d64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f06f 0208 	mvn.w	r2, #8
 8008d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2204      	movs	r2, #4
 8008d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	f003 0303 	and.w	r3, r3, #3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f982 	bl	8009054 <HAL_TIM_IC_CaptureCallback>
 8008d50:	e005      	b.n	8008d5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f974 	bl	8009040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f985 	bl	8009068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	f003 0310 	and.w	r3, r3, #16
 8008d6e:	2b10      	cmp	r3, #16
 8008d70:	d122      	bne.n	8008db8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	f003 0310 	and.w	r3, r3, #16
 8008d7c:	2b10      	cmp	r3, #16
 8008d7e:	d11b      	bne.n	8008db8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f06f 0210 	mvn.w	r2, #16
 8008d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2208      	movs	r2, #8
 8008d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	69db      	ldr	r3, [r3, #28]
 8008d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f958 	bl	8009054 <HAL_TIM_IC_CaptureCallback>
 8008da4:	e005      	b.n	8008db2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f94a 	bl	8009040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f95b 	bl	8009068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d10e      	bne.n	8008de4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d107      	bne.n	8008de4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f06f 0201 	mvn.w	r2, #1
 8008ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7f7 fe8a 	bl	8000af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dee:	2b80      	cmp	r3, #128	; 0x80
 8008df0:	d10e      	bne.n	8008e10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dfc:	2b80      	cmp	r3, #128	; 0x80
 8008dfe:	d107      	bne.n	8008e10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fb0a 	bl	8009424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e1e:	d10e      	bne.n	8008e3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e2a:	2b80      	cmp	r3, #128	; 0x80
 8008e2c:	d107      	bne.n	8008e3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fafd 	bl	8009438 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e48:	2b40      	cmp	r3, #64	; 0x40
 8008e4a:	d10e      	bne.n	8008e6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e56:	2b40      	cmp	r3, #64	; 0x40
 8008e58:	d107      	bne.n	8008e6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f909 	bl	800907c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	f003 0320 	and.w	r3, r3, #32
 8008e74:	2b20      	cmp	r3, #32
 8008e76:	d10e      	bne.n	8008e96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	f003 0320 	and.w	r3, r3, #32
 8008e82:	2b20      	cmp	r3, #32
 8008e84:	d107      	bne.n	8008e96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f06f 0220 	mvn.w	r2, #32
 8008e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fabd 	bl	8009410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e96:	bf00      	nop
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d101      	bne.n	8008eb8 <HAL_TIM_ConfigClockSource+0x18>
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	e0b7      	b.n	8009028 <HAL_TIM_ConfigClockSource+0x188>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	4b57      	ldr	r3, [pc, #348]	; (8009030 <HAL_TIM_ConfigClockSource+0x190>)
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ede:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b70      	cmp	r3, #112	; 0x70
 8008eee:	d02e      	beq.n	8008f4e <HAL_TIM_ConfigClockSource+0xae>
 8008ef0:	2b70      	cmp	r3, #112	; 0x70
 8008ef2:	d812      	bhi.n	8008f1a <HAL_TIM_ConfigClockSource+0x7a>
 8008ef4:	2b30      	cmp	r3, #48	; 0x30
 8008ef6:	f000 8084 	beq.w	8009002 <HAL_TIM_ConfigClockSource+0x162>
 8008efa:	2b30      	cmp	r3, #48	; 0x30
 8008efc:	d806      	bhi.n	8008f0c <HAL_TIM_ConfigClockSource+0x6c>
 8008efe:	2b10      	cmp	r3, #16
 8008f00:	d07f      	beq.n	8009002 <HAL_TIM_ConfigClockSource+0x162>
 8008f02:	2b20      	cmp	r3, #32
 8008f04:	d07d      	beq.n	8009002 <HAL_TIM_ConfigClockSource+0x162>
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d07b      	beq.n	8009002 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008f0a:	e084      	b.n	8009016 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008f0c:	2b50      	cmp	r3, #80	; 0x50
 8008f0e:	d048      	beq.n	8008fa2 <HAL_TIM_ConfigClockSource+0x102>
 8008f10:	2b60      	cmp	r3, #96	; 0x60
 8008f12:	d056      	beq.n	8008fc2 <HAL_TIM_ConfigClockSource+0x122>
 8008f14:	2b40      	cmp	r3, #64	; 0x40
 8008f16:	d064      	beq.n	8008fe2 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8008f18:	e07d      	b.n	8009016 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008f1a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008f1e:	d070      	beq.n	8009002 <HAL_TIM_ConfigClockSource+0x162>
 8008f20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008f24:	d809      	bhi.n	8008f3a <HAL_TIM_ConfigClockSource+0x9a>
 8008f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f2a:	d027      	beq.n	8008f7c <HAL_TIM_ConfigClockSource+0xdc>
 8008f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f30:	d067      	beq.n	8009002 <HAL_TIM_ConfigClockSource+0x162>
 8008f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f36:	d06d      	beq.n	8009014 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008f38:	e06d      	b.n	8009016 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008f3a:	4a3e      	ldr	r2, [pc, #248]	; (8009034 <HAL_TIM_ConfigClockSource+0x194>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d060      	beq.n	8009002 <HAL_TIM_ConfigClockSource+0x162>
 8008f40:	4a3d      	ldr	r2, [pc, #244]	; (8009038 <HAL_TIM_ConfigClockSource+0x198>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d05d      	beq.n	8009002 <HAL_TIM_ConfigClockSource+0x162>
 8008f46:	4a3d      	ldr	r2, [pc, #244]	; (800903c <HAL_TIM_ConfigClockSource+0x19c>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d05a      	beq.n	8009002 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8008f4c:	e063      	b.n	8009016 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6818      	ldr	r0, [r3, #0]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	6899      	ldr	r1, [r3, #8]
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	685a      	ldr	r2, [r3, #4]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f000 f9af 	bl	80092c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	609a      	str	r2, [r3, #8]
      break;
 8008f7a:	e04c      	b.n	8009016 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6818      	ldr	r0, [r3, #0]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	6899      	ldr	r1, [r3, #8]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f000 f998 	bl	80092c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	689a      	ldr	r2, [r3, #8]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f9e:	609a      	str	r2, [r3, #8]
      break;
 8008fa0:	e039      	b.n	8009016 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6818      	ldr	r0, [r3, #0]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	6859      	ldr	r1, [r3, #4]
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	f000 f908 	bl	80091c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2150      	movs	r1, #80	; 0x50
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 f962 	bl	8009284 <TIM_ITRx_SetConfig>
      break;
 8008fc0:	e029      	b.n	8009016 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6818      	ldr	r0, [r3, #0]
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	6859      	ldr	r1, [r3, #4]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f000 f927 	bl	8009222 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2160      	movs	r1, #96	; 0x60
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 f952 	bl	8009284 <TIM_ITRx_SetConfig>
      break;
 8008fe0:	e019      	b.n	8009016 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6818      	ldr	r0, [r3, #0]
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	6859      	ldr	r1, [r3, #4]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	f000 f8e8 	bl	80091c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2140      	movs	r1, #64	; 0x40
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 f942 	bl	8009284 <TIM_ITRx_SetConfig>
      break;
 8009000:	e009      	b.n	8009016 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4619      	mov	r1, r3
 800900c:	4610      	mov	r0, r2
 800900e:	f000 f939 	bl	8009284 <TIM_ITRx_SetConfig>
      break;
 8009012:	e000      	b.n	8009016 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8009014:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2201      	movs	r2, #1
 800901a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	ffceff88 	.word	0xffceff88
 8009034:	00100030 	.word	0x00100030
 8009038:	00100040 	.word	0x00100040
 800903c:	00100020 	.word	0x00100020

08009040 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800905c:	bf00      	nop
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009084:	bf00      	nop
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a40      	ldr	r2, [pc, #256]	; (80091a4 <TIM_Base_SetConfig+0x114>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d013      	beq.n	80090d0 <TIM_Base_SetConfig+0x40>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090ae:	d00f      	beq.n	80090d0 <TIM_Base_SetConfig+0x40>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a3d      	ldr	r2, [pc, #244]	; (80091a8 <TIM_Base_SetConfig+0x118>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d00b      	beq.n	80090d0 <TIM_Base_SetConfig+0x40>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a3c      	ldr	r2, [pc, #240]	; (80091ac <TIM_Base_SetConfig+0x11c>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d007      	beq.n	80090d0 <TIM_Base_SetConfig+0x40>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a3b      	ldr	r2, [pc, #236]	; (80091b0 <TIM_Base_SetConfig+0x120>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d003      	beq.n	80090d0 <TIM_Base_SetConfig+0x40>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a3a      	ldr	r2, [pc, #232]	; (80091b4 <TIM_Base_SetConfig+0x124>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d108      	bne.n	80090e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	4313      	orrs	r3, r2
 80090e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a2f      	ldr	r2, [pc, #188]	; (80091a4 <TIM_Base_SetConfig+0x114>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d01f      	beq.n	800912a <TIM_Base_SetConfig+0x9a>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090f0:	d01b      	beq.n	800912a <TIM_Base_SetConfig+0x9a>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a2c      	ldr	r2, [pc, #176]	; (80091a8 <TIM_Base_SetConfig+0x118>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d017      	beq.n	800912a <TIM_Base_SetConfig+0x9a>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a2b      	ldr	r2, [pc, #172]	; (80091ac <TIM_Base_SetConfig+0x11c>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d013      	beq.n	800912a <TIM_Base_SetConfig+0x9a>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a2a      	ldr	r2, [pc, #168]	; (80091b0 <TIM_Base_SetConfig+0x120>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d00f      	beq.n	800912a <TIM_Base_SetConfig+0x9a>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a29      	ldr	r2, [pc, #164]	; (80091b4 <TIM_Base_SetConfig+0x124>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d00b      	beq.n	800912a <TIM_Base_SetConfig+0x9a>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a28      	ldr	r2, [pc, #160]	; (80091b8 <TIM_Base_SetConfig+0x128>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d007      	beq.n	800912a <TIM_Base_SetConfig+0x9a>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a27      	ldr	r2, [pc, #156]	; (80091bc <TIM_Base_SetConfig+0x12c>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d003      	beq.n	800912a <TIM_Base_SetConfig+0x9a>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4a26      	ldr	r2, [pc, #152]	; (80091c0 <TIM_Base_SetConfig+0x130>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d108      	bne.n	800913c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	4313      	orrs	r3, r2
 800913a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	4313      	orrs	r3, r2
 8009148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a10      	ldr	r2, [pc, #64]	; (80091a4 <TIM_Base_SetConfig+0x114>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d00f      	beq.n	8009188 <TIM_Base_SetConfig+0xf8>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a12      	ldr	r2, [pc, #72]	; (80091b4 <TIM_Base_SetConfig+0x124>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d00b      	beq.n	8009188 <TIM_Base_SetConfig+0xf8>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a11      	ldr	r2, [pc, #68]	; (80091b8 <TIM_Base_SetConfig+0x128>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d007      	beq.n	8009188 <TIM_Base_SetConfig+0xf8>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a10      	ldr	r2, [pc, #64]	; (80091bc <TIM_Base_SetConfig+0x12c>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d003      	beq.n	8009188 <TIM_Base_SetConfig+0xf8>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a0f      	ldr	r2, [pc, #60]	; (80091c0 <TIM_Base_SetConfig+0x130>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d103      	bne.n	8009190 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	691a      	ldr	r2, [r3, #16]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	615a      	str	r2, [r3, #20]
}
 8009196:	bf00      	nop
 8009198:	3714      	adds	r7, #20
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	40010000 	.word	0x40010000
 80091a8:	40000400 	.word	0x40000400
 80091ac:	40000800 	.word	0x40000800
 80091b0:	40000c00 	.word	0x40000c00
 80091b4:	40010400 	.word	0x40010400
 80091b8:	40014000 	.word	0x40014000
 80091bc:	40014400 	.word	0x40014400
 80091c0:	40014800 	.word	0x40014800

080091c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b087      	sub	sp, #28
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6a1b      	ldr	r3, [r3, #32]
 80091d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	f023 0201 	bic.w	r2, r3, #1
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	011b      	lsls	r3, r3, #4
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f023 030a 	bic.w	r3, r3, #10
 8009200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009202:	697a      	ldr	r2, [r7, #20]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	4313      	orrs	r3, r2
 8009208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	697a      	ldr	r2, [r7, #20]
 8009214:	621a      	str	r2, [r3, #32]
}
 8009216:	bf00      	nop
 8009218:	371c      	adds	r7, #28
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009222:	b480      	push	{r7}
 8009224:	b087      	sub	sp, #28
 8009226:	af00      	add	r7, sp, #0
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	f023 0210 	bic.w	r2, r3, #16
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6a1b      	ldr	r3, [r3, #32]
 8009244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800924c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	031b      	lsls	r3, r3, #12
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	4313      	orrs	r3, r2
 8009256:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800925e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	011b      	lsls	r3, r3, #4
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	4313      	orrs	r3, r2
 8009268:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	697a      	ldr	r2, [r7, #20]
 800926e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	621a      	str	r2, [r3, #32]
}
 8009276:	bf00      	nop
 8009278:	371c      	adds	r7, #28
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
	...

08009284 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	4b09      	ldr	r3, [pc, #36]	; (80092bc <TIM_ITRx_SetConfig+0x38>)
 8009298:	4013      	ands	r3, r2
 800929a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	f043 0307 	orr.w	r3, r3, #7
 80092a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	609a      	str	r2, [r3, #8]
}
 80092ae:	bf00      	nop
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	ffcfff8f 	.word	0xffcfff8f

080092c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b087      	sub	sp, #28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
 80092cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	021a      	lsls	r2, r3, #8
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	431a      	orrs	r2, r3
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	697a      	ldr	r2, [r7, #20]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	609a      	str	r2, [r3, #8]
}
 80092f4:	bf00      	nop
 80092f6:	371c      	adds	r7, #28
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009310:	2b01      	cmp	r3, #1
 8009312:	d101      	bne.n	8009318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009314:	2302      	movs	r3, #2
 8009316:	e068      	b.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2202      	movs	r2, #2
 8009324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a2e      	ldr	r2, [pc, #184]	; (80093f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d004      	beq.n	800934c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a2d      	ldr	r2, [pc, #180]	; (80093fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d108      	bne.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009352:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	4313      	orrs	r3, r2
 800935c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009364:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	4313      	orrs	r3, r2
 800936e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a1e      	ldr	r2, [pc, #120]	; (80093f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d01d      	beq.n	80093be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800938a:	d018      	beq.n	80093be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a1b      	ldr	r2, [pc, #108]	; (8009400 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d013      	beq.n	80093be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a1a      	ldr	r2, [pc, #104]	; (8009404 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d00e      	beq.n	80093be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a18      	ldr	r2, [pc, #96]	; (8009408 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d009      	beq.n	80093be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a13      	ldr	r2, [pc, #76]	; (80093fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d004      	beq.n	80093be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a14      	ldr	r2, [pc, #80]	; (800940c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d10c      	bne.n	80093d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3714      	adds	r7, #20
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	40010000 	.word	0x40010000
 80093fc:	40010400 	.word	0x40010400
 8009400:	40000400 	.word	0x40000400
 8009404:	40000800 	.word	0x40000800
 8009408:	40000c00 	.word	0x40000c00
 800940c:	40001800 	.word	0x40001800

08009410 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d101      	bne.n	800945e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e042      	b.n	80094e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009464:	2b00      	cmp	r3, #0
 8009466:	d106      	bne.n	8009476 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7f8 fb99 	bl	8001ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2224      	movs	r2, #36	; 0x24
 800947a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f022 0201 	bic.w	r2, r2, #1
 800948c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fba6 	bl	8009be0 <UART_SetConfig>
 8009494:	4603      	mov	r3, r0
 8009496:	2b01      	cmp	r3, #1
 8009498:	d101      	bne.n	800949e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e022      	b.n	80094e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d002      	beq.n	80094ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f002 fd18 	bl	800bedc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	689a      	ldr	r2, [r3, #8]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f042 0201 	orr.w	r2, r2, #1
 80094da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f002 fd9f 	bl	800c020 <UART_CheckIdleState>
 80094e2:	4603      	mov	r3, r0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	4613      	mov	r3, r2
 80094f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009500:	2b20      	cmp	r3, #32
 8009502:	d168      	bne.n	80095d6 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d002      	beq.n	8009510 <HAL_UART_Transmit_IT+0x24>
 800950a:	88fb      	ldrh	r3, [r7, #6]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d101      	bne.n	8009514 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e061      	b.n	80095d8 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800951a:	2b01      	cmp	r3, #1
 800951c:	d101      	bne.n	8009522 <HAL_UART_Transmit_IT+0x36>
 800951e:	2302      	movs	r3, #2
 8009520:	e05a      	b.n	80095d8 <HAL_UART_Transmit_IT+0xec>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	88fa      	ldrh	r2, [r7, #6]
 8009534:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	88fa      	ldrh	r2, [r7, #6]
 800953c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2200      	movs	r2, #0
 800954a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2221      	movs	r2, #33	; 0x21
 8009552:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800955a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800955e:	d11c      	bne.n	800959a <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009568:	d107      	bne.n	800957a <HAL_UART_Transmit_IT+0x8e>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d103      	bne.n	800957a <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	4a1b      	ldr	r2, [pc, #108]	; (80095e4 <HAL_UART_Transmit_IT+0xf8>)
 8009576:	671a      	str	r2, [r3, #112]	; 0x70
 8009578:	e002      	b.n	8009580 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	4a1a      	ldr	r2, [pc, #104]	; (80095e8 <HAL_UART_Transmit_IT+0xfc>)
 800957e:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	689a      	ldr	r2, [r3, #8]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009596:	609a      	str	r2, [r3, #8]
 8009598:	e01b      	b.n	80095d2 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095a2:	d107      	bne.n	80095b4 <HAL_UART_Transmit_IT+0xc8>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d103      	bne.n	80095b4 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	4a0f      	ldr	r2, [pc, #60]	; (80095ec <HAL_UART_Transmit_IT+0x100>)
 80095b0:	671a      	str	r2, [r3, #112]	; 0x70
 80095b2:	e002      	b.n	80095ba <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	4a0e      	ldr	r2, [pc, #56]	; (80095f0 <HAL_UART_Transmit_IT+0x104>)
 80095b8:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80095d0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	e000      	b.n	80095d8 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 80095d6:	2302      	movs	r3, #2
  }
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	0800c4ef 	.word	0x0800c4ef
 80095e8:	0800c455 	.word	0x0800c455
 80095ec:	0800c3d7 	.word	0x0800c3d7
 80095f0:	0800c363 	.word	0x0800c363

080095f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	4613      	mov	r3, r2
 8009600:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009608:	2b20      	cmp	r3, #32
 800960a:	f040 80bc 	bne.w	8009786 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d002      	beq.n	800961a <HAL_UART_Receive_IT+0x26>
 8009614:	88fb      	ldrh	r3, [r7, #6]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e0b4      	b.n	8009788 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009624:	2b01      	cmp	r3, #1
 8009626:	d101      	bne.n	800962c <HAL_UART_Receive_IT+0x38>
 8009628:	2302      	movs	r3, #2
 800962a:	e0ad      	b.n	8009788 <HAL_UART_Receive_IT+0x194>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	88fa      	ldrh	r2, [r7, #6]
 800963e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	88fa      	ldrh	r2, [r7, #6]
 8009646:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009658:	d10e      	bne.n	8009678 <HAL_UART_Receive_IT+0x84>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d105      	bne.n	800966e <HAL_UART_Receive_IT+0x7a>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009668:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800966c:	e02d      	b.n	80096ca <HAL_UART_Receive_IT+0xd6>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	22ff      	movs	r2, #255	; 0xff
 8009672:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009676:	e028      	b.n	80096ca <HAL_UART_Receive_IT+0xd6>
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d10d      	bne.n	800969c <HAL_UART_Receive_IT+0xa8>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d104      	bne.n	8009692 <HAL_UART_Receive_IT+0x9e>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	22ff      	movs	r2, #255	; 0xff
 800968c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009690:	e01b      	b.n	80096ca <HAL_UART_Receive_IT+0xd6>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	227f      	movs	r2, #127	; 0x7f
 8009696:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800969a:	e016      	b.n	80096ca <HAL_UART_Receive_IT+0xd6>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096a4:	d10d      	bne.n	80096c2 <HAL_UART_Receive_IT+0xce>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d104      	bne.n	80096b8 <HAL_UART_Receive_IT+0xc4>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	227f      	movs	r2, #127	; 0x7f
 80096b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096b6:	e008      	b.n	80096ca <HAL_UART_Receive_IT+0xd6>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	223f      	movs	r2, #63	; 0x3f
 80096bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096c0:	e003      	b.n	80096ca <HAL_UART_Receive_IT+0xd6>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2222      	movs	r2, #34	; 0x22
 80096d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	689a      	ldr	r2, [r3, #8]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f042 0201 	orr.w	r2, r2, #1
 80096e8:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096f2:	d12a      	bne.n	800974a <HAL_UART_Receive_IT+0x156>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80096fa:	88fa      	ldrh	r2, [r7, #6]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d324      	bcc.n	800974a <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009708:	d107      	bne.n	800971a <HAL_UART_Receive_IT+0x126>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d103      	bne.n	800971a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4a1f      	ldr	r2, [pc, #124]	; (8009794 <HAL_UART_Receive_IT+0x1a0>)
 8009716:	66da      	str	r2, [r3, #108]	; 0x6c
 8009718:	e002      	b.n	8009720 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	4a1e      	ldr	r2, [pc, #120]	; (8009798 <HAL_UART_Receive_IT+0x1a4>)
 800971e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009736:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689a      	ldr	r2, [r3, #8]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009746:	609a      	str	r2, [r3, #8]
 8009748:	e01b      	b.n	8009782 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009752:	d107      	bne.n	8009764 <HAL_UART_Receive_IT+0x170>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d103      	bne.n	8009764 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	4a0f      	ldr	r2, [pc, #60]	; (800979c <HAL_UART_Receive_IT+0x1a8>)
 8009760:	66da      	str	r2, [r3, #108]	; 0x6c
 8009762:	e002      	b.n	800976a <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	4a0e      	ldr	r2, [pc, #56]	; (80097a0 <HAL_UART_Receive_IT+0x1ac>)
 8009768:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2200      	movs	r2, #0
 800976e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009780:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	e000      	b.n	8009788 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8009786:	2302      	movs	r3, #2
  }
}
 8009788:	4618      	mov	r0, r3
 800978a:	3714      	adds	r7, #20
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr
 8009794:	0800c825 	.word	0x0800c825
 8009798:	0800c71d 	.word	0x0800c71d
 800979c:	0800c671 	.word	0x0800c671
 80097a0:	0800c5c7 	.word	0x0800c5c7

080097a4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	4613      	mov	r3, r2
 80097b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097b8:	2b20      	cmp	r3, #32
 80097ba:	d170      	bne.n	800989e <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d002      	beq.n	80097c8 <HAL_UART_Receive_DMA+0x24>
 80097c2:	88fb      	ldrh	r3, [r7, #6]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e069      	b.n	80098a0 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d101      	bne.n	80097da <HAL_UART_Receive_DMA+0x36>
 80097d6:	2302      	movs	r3, #2
 80097d8:	e062      	b.n	80098a0 <HAL_UART_Receive_DMA+0xfc>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	88fa      	ldrh	r2, [r7, #6]
 80097ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2222      	movs	r2, #34	; 0x22
 80097fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009804:	2b00      	cmp	r3, #0
 8009806:	d02c      	beq.n	8009862 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800980c:	4a26      	ldr	r2, [pc, #152]	; (80098a8 <HAL_UART_Receive_DMA+0x104>)
 800980e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009814:	4a25      	ldr	r2, [pc, #148]	; (80098ac <HAL_UART_Receive_DMA+0x108>)
 8009816:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800981c:	4a24      	ldr	r2, [pc, #144]	; (80098b0 <HAL_UART_Receive_DMA+0x10c>)
 800981e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009824:	2200      	movs	r2, #0
 8009826:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	3324      	adds	r3, #36	; 0x24
 8009832:	4619      	mov	r1, r3
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009838:	461a      	mov	r2, r3
 800983a:	88fb      	ldrh	r3, [r7, #6]
 800983c:	f7fa f9cc 	bl	8003bd8 <HAL_DMA_Start_IT>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00d      	beq.n	8009862 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2210      	movs	r2, #16
 800984a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2220      	movs	r2, #32
 800985a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e01e      	b.n	80098a0 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2200      	movs	r2, #0
 8009866:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009878:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	689a      	ldr	r2, [r3, #8]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f042 0201 	orr.w	r2, r2, #1
 8009888:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	689a      	ldr	r2, [r3, #8]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009898:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	e000      	b.n	80098a0 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800989e:	2302      	movs	r3, #2
  }
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	0800c235 	.word	0x0800c235
 80098ac:	0800c29b 	.word	0x0800c29b
 80098b0:	0800c2b7 	.word	0x0800c2b7

080098b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b088      	sub	sp, #32
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80098d4:	69fa      	ldr	r2, [r7, #28]
 80098d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80098da:	4013      	ands	r3, r2
 80098dc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d118      	bne.n	8009916 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	f003 0320 	and.w	r3, r3, #32
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d013      	beq.n	8009916 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	f003 0320 	and.w	r3, r3, #32
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d104      	bne.n	8009902 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d009      	beq.n	8009916 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009906:	2b00      	cmp	r3, #0
 8009908:	f000 8145 	beq.w	8009b96 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	4798      	blx	r3
      }
      return;
 8009914:	e13f      	b.n	8009b96 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 80e8 	beq.w	8009aee <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	4ba1      	ldr	r3, [pc, #644]	; (8009ba8 <HAL_UART_IRQHandler+0x2f4>)
 8009922:	4013      	ands	r3, r2
 8009924:	2b00      	cmp	r3, #0
 8009926:	d105      	bne.n	8009934 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009928:	69ba      	ldr	r2, [r7, #24]
 800992a:	4ba0      	ldr	r3, [pc, #640]	; (8009bac <HAL_UART_IRQHandler+0x2f8>)
 800992c:	4013      	ands	r3, r2
 800992e:	2b00      	cmp	r3, #0
 8009930:	f000 80dd 	beq.w	8009aee <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	2b00      	cmp	r3, #0
 800993c:	d010      	beq.n	8009960 <HAL_UART_IRQHandler+0xac>
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00b      	beq.n	8009960 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2201      	movs	r2, #1
 800994e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009956:	f043 0201 	orr.w	r2, r3, #1
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	f003 0302 	and.w	r3, r3, #2
 8009966:	2b00      	cmp	r3, #0
 8009968:	d010      	beq.n	800998c <HAL_UART_IRQHandler+0xd8>
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f003 0301 	and.w	r3, r3, #1
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00b      	beq.n	800998c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2202      	movs	r2, #2
 800997a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009982:	f043 0204 	orr.w	r2, r3, #4
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	f003 0304 	and.w	r3, r3, #4
 8009992:	2b00      	cmp	r3, #0
 8009994:	d010      	beq.n	80099b8 <HAL_UART_IRQHandler+0x104>
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	f003 0301 	and.w	r3, r3, #1
 800999c:	2b00      	cmp	r3, #0
 800999e:	d00b      	beq.n	80099b8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2204      	movs	r2, #4
 80099a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ae:	f043 0202 	orr.w	r2, r3, #2
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	f003 0308 	and.w	r3, r3, #8
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d015      	beq.n	80099ee <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	f003 0320 	and.w	r3, r3, #32
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d104      	bne.n	80099d6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80099cc:	697a      	ldr	r2, [r7, #20]
 80099ce:	4b76      	ldr	r3, [pc, #472]	; (8009ba8 <HAL_UART_IRQHandler+0x2f4>)
 80099d0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00b      	beq.n	80099ee <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2208      	movs	r2, #8
 80099dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099e4:	f043 0208 	orr.w	r2, r3, #8
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80099ee:	69fb      	ldr	r3, [r7, #28]
 80099f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d011      	beq.n	8009a1c <HAL_UART_IRQHandler+0x168>
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00c      	beq.n	8009a1c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a12:	f043 0220 	orr.w	r2, r3, #32
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f000 80b9 	beq.w	8009b9a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	f003 0320 	and.w	r3, r3, #32
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d011      	beq.n	8009a56 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	f003 0320 	and.w	r3, r3, #32
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d104      	bne.n	8009a46 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d007      	beq.n	8009a56 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d003      	beq.n	8009a56 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a5c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a68:	2b40      	cmp	r3, #64	; 0x40
 8009a6a:	d004      	beq.n	8009a76 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d031      	beq.n	8009ada <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f002 fbb8 	bl	800c1ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a86:	2b40      	cmp	r3, #64	; 0x40
 8009a88:	d123      	bne.n	8009ad2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	689a      	ldr	r2, [r3, #8]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a98:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d013      	beq.n	8009aca <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aa6:	4a42      	ldr	r2, [pc, #264]	; (8009bb0 <HAL_UART_IRQHandler+0x2fc>)
 8009aa8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fa fafc 	bl	80040ac <HAL_DMA_Abort_IT>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d017      	beq.n	8009aea <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009ac4:	4610      	mov	r0, r2
 8009ac6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ac8:	e00f      	b.n	8009aea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f87c 	bl	8009bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ad0:	e00b      	b.n	8009aea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f878 	bl	8009bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ad8:	e007      	b.n	8009aea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f874 	bl	8009bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009ae8:	e057      	b.n	8009b9a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009aea:	bf00      	nop
    return;
 8009aec:	e055      	b.n	8009b9a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00d      	beq.n	8009b14 <HAL_UART_IRQHandler+0x260>
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d008      	beq.n	8009b14 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009b0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f002 ff0d 	bl	800c92c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b12:	e045      	b.n	8009ba0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d012      	beq.n	8009b44 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d104      	bne.n	8009b32 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d008      	beq.n	8009b44 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d031      	beq.n	8009b9e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	4798      	blx	r3
    }
    return;
 8009b42:	e02c      	b.n	8009b9e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d008      	beq.n	8009b60 <HAL_UART_IRQHandler+0x2ac>
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d003      	beq.n	8009b60 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f002 fd1a 	bl	800c592 <UART_EndTransmit_IT>
    return;
 8009b5e:	e01f      	b.n	8009ba0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d008      	beq.n	8009b7c <HAL_UART_IRQHandler+0x2c8>
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d003      	beq.n	8009b7c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f002 feed 	bl	800c954 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b7a:	e011      	b.n	8009ba0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00c      	beq.n	8009ba0 <HAL_UART_IRQHandler+0x2ec>
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	da09      	bge.n	8009ba0 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f002 fed7 	bl	800c940 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b92:	bf00      	nop
 8009b94:	e004      	b.n	8009ba0 <HAL_UART_IRQHandler+0x2ec>
      return;
 8009b96:	bf00      	nop
 8009b98:	e002      	b.n	8009ba0 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009b9a:	bf00      	nop
 8009b9c:	e000      	b.n	8009ba0 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009b9e:	bf00      	nop
  }
}
 8009ba0:	3720      	adds	r7, #32
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	10000001 	.word	0x10000001
 8009bac:	04000120 	.word	0x04000120
 8009bb0:	0800c337 	.word	0x0800c337

08009bb4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009bbc:	bf00      	nop
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr
 8009bdc:	0000      	movs	r0, r0
	...

08009be0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009be0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009be4:	b090      	sub	sp, #64	; 0x40
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009bea:	2300      	movs	r3, #0
 8009bec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	689a      	ldr	r2, [r3, #8]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	691b      	ldr	r3, [r3, #16]
 8009c00:	431a      	orrs	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	431a      	orrs	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	69db      	ldr	r3, [r3, #28]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c16:	4313      	orrs	r3, r2
 8009c18:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	4bc1      	ldr	r3, [pc, #772]	; (8009f28 <UART_SetConfig+0x348>)
 8009c22:	4013      	ands	r3, r2
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	6812      	ldr	r2, [r2, #0]
 8009c28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c2a:	430b      	orrs	r3, r1
 8009c2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	68da      	ldr	r2, [r3, #12]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	430a      	orrs	r2, r1
 8009c42:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4ab7      	ldr	r2, [pc, #732]	; (8009f2c <UART_SetConfig+0x34c>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d004      	beq.n	8009c5e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a1b      	ldr	r3, [r3, #32]
 8009c58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	689a      	ldr	r2, [r3, #8]
 8009c64:	4bb2      	ldr	r3, [pc, #712]	; (8009f30 <UART_SetConfig+0x350>)
 8009c66:	4013      	ands	r3, r2
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	6812      	ldr	r2, [r2, #0]
 8009c6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c6e:	430b      	orrs	r3, r1
 8009c70:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c78:	f023 010f 	bic.w	r1, r3, #15
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	430a      	orrs	r2, r1
 8009c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4aa9      	ldr	r2, [pc, #676]	; (8009f34 <UART_SetConfig+0x354>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d177      	bne.n	8009d82 <UART_SetConfig+0x1a2>
 8009c92:	4ba9      	ldr	r3, [pc, #676]	; (8009f38 <UART_SetConfig+0x358>)
 8009c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c9a:	2b28      	cmp	r3, #40	; 0x28
 8009c9c:	d86c      	bhi.n	8009d78 <UART_SetConfig+0x198>
 8009c9e:	a201      	add	r2, pc, #4	; (adr r2, 8009ca4 <UART_SetConfig+0xc4>)
 8009ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca4:	08009d49 	.word	0x08009d49
 8009ca8:	08009d79 	.word	0x08009d79
 8009cac:	08009d79 	.word	0x08009d79
 8009cb0:	08009d79 	.word	0x08009d79
 8009cb4:	08009d79 	.word	0x08009d79
 8009cb8:	08009d79 	.word	0x08009d79
 8009cbc:	08009d79 	.word	0x08009d79
 8009cc0:	08009d79 	.word	0x08009d79
 8009cc4:	08009d51 	.word	0x08009d51
 8009cc8:	08009d79 	.word	0x08009d79
 8009ccc:	08009d79 	.word	0x08009d79
 8009cd0:	08009d79 	.word	0x08009d79
 8009cd4:	08009d79 	.word	0x08009d79
 8009cd8:	08009d79 	.word	0x08009d79
 8009cdc:	08009d79 	.word	0x08009d79
 8009ce0:	08009d79 	.word	0x08009d79
 8009ce4:	08009d59 	.word	0x08009d59
 8009ce8:	08009d79 	.word	0x08009d79
 8009cec:	08009d79 	.word	0x08009d79
 8009cf0:	08009d79 	.word	0x08009d79
 8009cf4:	08009d79 	.word	0x08009d79
 8009cf8:	08009d79 	.word	0x08009d79
 8009cfc:	08009d79 	.word	0x08009d79
 8009d00:	08009d79 	.word	0x08009d79
 8009d04:	08009d61 	.word	0x08009d61
 8009d08:	08009d79 	.word	0x08009d79
 8009d0c:	08009d79 	.word	0x08009d79
 8009d10:	08009d79 	.word	0x08009d79
 8009d14:	08009d79 	.word	0x08009d79
 8009d18:	08009d79 	.word	0x08009d79
 8009d1c:	08009d79 	.word	0x08009d79
 8009d20:	08009d79 	.word	0x08009d79
 8009d24:	08009d69 	.word	0x08009d69
 8009d28:	08009d79 	.word	0x08009d79
 8009d2c:	08009d79 	.word	0x08009d79
 8009d30:	08009d79 	.word	0x08009d79
 8009d34:	08009d79 	.word	0x08009d79
 8009d38:	08009d79 	.word	0x08009d79
 8009d3c:	08009d79 	.word	0x08009d79
 8009d40:	08009d79 	.word	0x08009d79
 8009d44:	08009d71 	.word	0x08009d71
 8009d48:	2301      	movs	r3, #1
 8009d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d4e:	e233      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009d50:	2304      	movs	r3, #4
 8009d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d56:	e22f      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009d58:	2308      	movs	r3, #8
 8009d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d5e:	e22b      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009d60:	2310      	movs	r3, #16
 8009d62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d66:	e227      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009d68:	2320      	movs	r3, #32
 8009d6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d6e:	e223      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009d70:	2340      	movs	r3, #64	; 0x40
 8009d72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d76:	e21f      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009d78:	2380      	movs	r3, #128	; 0x80
 8009d7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d7e:	bf00      	nop
 8009d80:	e21a      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a6d      	ldr	r2, [pc, #436]	; (8009f3c <UART_SetConfig+0x35c>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d132      	bne.n	8009df2 <UART_SetConfig+0x212>
 8009d8c:	4b6a      	ldr	r3, [pc, #424]	; (8009f38 <UART_SetConfig+0x358>)
 8009d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d90:	f003 0307 	and.w	r3, r3, #7
 8009d94:	2b05      	cmp	r3, #5
 8009d96:	d827      	bhi.n	8009de8 <UART_SetConfig+0x208>
 8009d98:	a201      	add	r2, pc, #4	; (adr r2, 8009da0 <UART_SetConfig+0x1c0>)
 8009d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9e:	bf00      	nop
 8009da0:	08009db9 	.word	0x08009db9
 8009da4:	08009dc1 	.word	0x08009dc1
 8009da8:	08009dc9 	.word	0x08009dc9
 8009dac:	08009dd1 	.word	0x08009dd1
 8009db0:	08009dd9 	.word	0x08009dd9
 8009db4:	08009de1 	.word	0x08009de1
 8009db8:	2300      	movs	r3, #0
 8009dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dbe:	e1fb      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009dc0:	2304      	movs	r3, #4
 8009dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dc6:	e1f7      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009dc8:	2308      	movs	r3, #8
 8009dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dce:	e1f3      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009dd0:	2310      	movs	r3, #16
 8009dd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dd6:	e1ef      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009dd8:	2320      	movs	r3, #32
 8009dda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dde:	e1eb      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009de0:	2340      	movs	r3, #64	; 0x40
 8009de2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009de6:	e1e7      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009de8:	2380      	movs	r3, #128	; 0x80
 8009dea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dee:	bf00      	nop
 8009df0:	e1e2      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a52      	ldr	r2, [pc, #328]	; (8009f40 <UART_SetConfig+0x360>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d132      	bne.n	8009e62 <UART_SetConfig+0x282>
 8009dfc:	4b4e      	ldr	r3, [pc, #312]	; (8009f38 <UART_SetConfig+0x358>)
 8009dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e00:	f003 0307 	and.w	r3, r3, #7
 8009e04:	2b05      	cmp	r3, #5
 8009e06:	d827      	bhi.n	8009e58 <UART_SetConfig+0x278>
 8009e08:	a201      	add	r2, pc, #4	; (adr r2, 8009e10 <UART_SetConfig+0x230>)
 8009e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0e:	bf00      	nop
 8009e10:	08009e29 	.word	0x08009e29
 8009e14:	08009e31 	.word	0x08009e31
 8009e18:	08009e39 	.word	0x08009e39
 8009e1c:	08009e41 	.word	0x08009e41
 8009e20:	08009e49 	.word	0x08009e49
 8009e24:	08009e51 	.word	0x08009e51
 8009e28:	2300      	movs	r3, #0
 8009e2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e2e:	e1c3      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009e30:	2304      	movs	r3, #4
 8009e32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e36:	e1bf      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009e38:	2308      	movs	r3, #8
 8009e3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e3e:	e1bb      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009e40:	2310      	movs	r3, #16
 8009e42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e46:	e1b7      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009e48:	2320      	movs	r3, #32
 8009e4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e4e:	e1b3      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009e50:	2340      	movs	r3, #64	; 0x40
 8009e52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e56:	e1af      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009e58:	2380      	movs	r3, #128	; 0x80
 8009e5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e5e:	bf00      	nop
 8009e60:	e1aa      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a37      	ldr	r2, [pc, #220]	; (8009f44 <UART_SetConfig+0x364>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d132      	bne.n	8009ed2 <UART_SetConfig+0x2f2>
 8009e6c:	4b32      	ldr	r3, [pc, #200]	; (8009f38 <UART_SetConfig+0x358>)
 8009e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e70:	f003 0307 	and.w	r3, r3, #7
 8009e74:	2b05      	cmp	r3, #5
 8009e76:	d827      	bhi.n	8009ec8 <UART_SetConfig+0x2e8>
 8009e78:	a201      	add	r2, pc, #4	; (adr r2, 8009e80 <UART_SetConfig+0x2a0>)
 8009e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7e:	bf00      	nop
 8009e80:	08009e99 	.word	0x08009e99
 8009e84:	08009ea1 	.word	0x08009ea1
 8009e88:	08009ea9 	.word	0x08009ea9
 8009e8c:	08009eb1 	.word	0x08009eb1
 8009e90:	08009eb9 	.word	0x08009eb9
 8009e94:	08009ec1 	.word	0x08009ec1
 8009e98:	2300      	movs	r3, #0
 8009e9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e9e:	e18b      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009ea0:	2304      	movs	r3, #4
 8009ea2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ea6:	e187      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009ea8:	2308      	movs	r3, #8
 8009eaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009eae:	e183      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009eb0:	2310      	movs	r3, #16
 8009eb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009eb6:	e17f      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009eb8:	2320      	movs	r3, #32
 8009eba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ebe:	e17b      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009ec0:	2340      	movs	r3, #64	; 0x40
 8009ec2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ec6:	e177      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009ec8:	2380      	movs	r3, #128	; 0x80
 8009eca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ece:	bf00      	nop
 8009ed0:	e172      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a1c      	ldr	r2, [pc, #112]	; (8009f48 <UART_SetConfig+0x368>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d144      	bne.n	8009f66 <UART_SetConfig+0x386>
 8009edc:	4b16      	ldr	r3, [pc, #88]	; (8009f38 <UART_SetConfig+0x358>)
 8009ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee0:	f003 0307 	and.w	r3, r3, #7
 8009ee4:	2b05      	cmp	r3, #5
 8009ee6:	d839      	bhi.n	8009f5c <UART_SetConfig+0x37c>
 8009ee8:	a201      	add	r2, pc, #4	; (adr r2, 8009ef0 <UART_SetConfig+0x310>)
 8009eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eee:	bf00      	nop
 8009ef0:	08009f09 	.word	0x08009f09
 8009ef4:	08009f11 	.word	0x08009f11
 8009ef8:	08009f19 	.word	0x08009f19
 8009efc:	08009f21 	.word	0x08009f21
 8009f00:	08009f4d 	.word	0x08009f4d
 8009f04:	08009f55 	.word	0x08009f55
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f0e:	e153      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009f10:	2304      	movs	r3, #4
 8009f12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f16:	e14f      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009f18:	2308      	movs	r3, #8
 8009f1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f1e:	e14b      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009f20:	2310      	movs	r3, #16
 8009f22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f26:	e147      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009f28:	cfff69f3 	.word	0xcfff69f3
 8009f2c:	58000c00 	.word	0x58000c00
 8009f30:	11fff4ff 	.word	0x11fff4ff
 8009f34:	40011000 	.word	0x40011000
 8009f38:	58024400 	.word	0x58024400
 8009f3c:	40004400 	.word	0x40004400
 8009f40:	40004800 	.word	0x40004800
 8009f44:	40004c00 	.word	0x40004c00
 8009f48:	40005000 	.word	0x40005000
 8009f4c:	2320      	movs	r3, #32
 8009f4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f52:	e131      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009f54:	2340      	movs	r3, #64	; 0x40
 8009f56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f5a:	e12d      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009f5c:	2380      	movs	r3, #128	; 0x80
 8009f5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f62:	bf00      	nop
 8009f64:	e128      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4ac3      	ldr	r2, [pc, #780]	; (800a278 <UART_SetConfig+0x698>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d178      	bne.n	800a062 <UART_SetConfig+0x482>
 8009f70:	4bc2      	ldr	r3, [pc, #776]	; (800a27c <UART_SetConfig+0x69c>)
 8009f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f78:	2b28      	cmp	r3, #40	; 0x28
 8009f7a:	d86d      	bhi.n	800a058 <UART_SetConfig+0x478>
 8009f7c:	a201      	add	r2, pc, #4	; (adr r2, 8009f84 <UART_SetConfig+0x3a4>)
 8009f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f82:	bf00      	nop
 8009f84:	0800a029 	.word	0x0800a029
 8009f88:	0800a059 	.word	0x0800a059
 8009f8c:	0800a059 	.word	0x0800a059
 8009f90:	0800a059 	.word	0x0800a059
 8009f94:	0800a059 	.word	0x0800a059
 8009f98:	0800a059 	.word	0x0800a059
 8009f9c:	0800a059 	.word	0x0800a059
 8009fa0:	0800a059 	.word	0x0800a059
 8009fa4:	0800a031 	.word	0x0800a031
 8009fa8:	0800a059 	.word	0x0800a059
 8009fac:	0800a059 	.word	0x0800a059
 8009fb0:	0800a059 	.word	0x0800a059
 8009fb4:	0800a059 	.word	0x0800a059
 8009fb8:	0800a059 	.word	0x0800a059
 8009fbc:	0800a059 	.word	0x0800a059
 8009fc0:	0800a059 	.word	0x0800a059
 8009fc4:	0800a039 	.word	0x0800a039
 8009fc8:	0800a059 	.word	0x0800a059
 8009fcc:	0800a059 	.word	0x0800a059
 8009fd0:	0800a059 	.word	0x0800a059
 8009fd4:	0800a059 	.word	0x0800a059
 8009fd8:	0800a059 	.word	0x0800a059
 8009fdc:	0800a059 	.word	0x0800a059
 8009fe0:	0800a059 	.word	0x0800a059
 8009fe4:	0800a041 	.word	0x0800a041
 8009fe8:	0800a059 	.word	0x0800a059
 8009fec:	0800a059 	.word	0x0800a059
 8009ff0:	0800a059 	.word	0x0800a059
 8009ff4:	0800a059 	.word	0x0800a059
 8009ff8:	0800a059 	.word	0x0800a059
 8009ffc:	0800a059 	.word	0x0800a059
 800a000:	0800a059 	.word	0x0800a059
 800a004:	0800a049 	.word	0x0800a049
 800a008:	0800a059 	.word	0x0800a059
 800a00c:	0800a059 	.word	0x0800a059
 800a010:	0800a059 	.word	0x0800a059
 800a014:	0800a059 	.word	0x0800a059
 800a018:	0800a059 	.word	0x0800a059
 800a01c:	0800a059 	.word	0x0800a059
 800a020:	0800a059 	.word	0x0800a059
 800a024:	0800a051 	.word	0x0800a051
 800a028:	2301      	movs	r3, #1
 800a02a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a02e:	e0c3      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a030:	2304      	movs	r3, #4
 800a032:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a036:	e0bf      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a038:	2308      	movs	r3, #8
 800a03a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a03e:	e0bb      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a040:	2310      	movs	r3, #16
 800a042:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a046:	e0b7      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a048:	2320      	movs	r3, #32
 800a04a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a04e:	e0b3      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a050:	2340      	movs	r3, #64	; 0x40
 800a052:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a056:	e0af      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a058:	2380      	movs	r3, #128	; 0x80
 800a05a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a05e:	bf00      	nop
 800a060:	e0aa      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a86      	ldr	r2, [pc, #536]	; (800a280 <UART_SetConfig+0x6a0>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d132      	bne.n	800a0d2 <UART_SetConfig+0x4f2>
 800a06c:	4b83      	ldr	r3, [pc, #524]	; (800a27c <UART_SetConfig+0x69c>)
 800a06e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a070:	f003 0307 	and.w	r3, r3, #7
 800a074:	2b05      	cmp	r3, #5
 800a076:	d827      	bhi.n	800a0c8 <UART_SetConfig+0x4e8>
 800a078:	a201      	add	r2, pc, #4	; (adr r2, 800a080 <UART_SetConfig+0x4a0>)
 800a07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07e:	bf00      	nop
 800a080:	0800a099 	.word	0x0800a099
 800a084:	0800a0a1 	.word	0x0800a0a1
 800a088:	0800a0a9 	.word	0x0800a0a9
 800a08c:	0800a0b1 	.word	0x0800a0b1
 800a090:	0800a0b9 	.word	0x0800a0b9
 800a094:	0800a0c1 	.word	0x0800a0c1
 800a098:	2300      	movs	r3, #0
 800a09a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a09e:	e08b      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a0a0:	2304      	movs	r3, #4
 800a0a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0a6:	e087      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a0a8:	2308      	movs	r3, #8
 800a0aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0ae:	e083      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a0b0:	2310      	movs	r3, #16
 800a0b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0b6:	e07f      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a0b8:	2320      	movs	r3, #32
 800a0ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0be:	e07b      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a0c0:	2340      	movs	r3, #64	; 0x40
 800a0c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0c6:	e077      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a0c8:	2380      	movs	r3, #128	; 0x80
 800a0ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0ce:	bf00      	nop
 800a0d0:	e072      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a6b      	ldr	r2, [pc, #428]	; (800a284 <UART_SetConfig+0x6a4>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d132      	bne.n	800a142 <UART_SetConfig+0x562>
 800a0dc:	4b67      	ldr	r3, [pc, #412]	; (800a27c <UART_SetConfig+0x69c>)
 800a0de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0e0:	f003 0307 	and.w	r3, r3, #7
 800a0e4:	2b05      	cmp	r3, #5
 800a0e6:	d827      	bhi.n	800a138 <UART_SetConfig+0x558>
 800a0e8:	a201      	add	r2, pc, #4	; (adr r2, 800a0f0 <UART_SetConfig+0x510>)
 800a0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ee:	bf00      	nop
 800a0f0:	0800a109 	.word	0x0800a109
 800a0f4:	0800a111 	.word	0x0800a111
 800a0f8:	0800a119 	.word	0x0800a119
 800a0fc:	0800a121 	.word	0x0800a121
 800a100:	0800a129 	.word	0x0800a129
 800a104:	0800a131 	.word	0x0800a131
 800a108:	2300      	movs	r3, #0
 800a10a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a10e:	e053      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a110:	2304      	movs	r3, #4
 800a112:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a116:	e04f      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a118:	2308      	movs	r3, #8
 800a11a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a11e:	e04b      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a120:	2310      	movs	r3, #16
 800a122:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a126:	e047      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a128:	2320      	movs	r3, #32
 800a12a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a12e:	e043      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a130:	2340      	movs	r3, #64	; 0x40
 800a132:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a136:	e03f      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a138:	2380      	movs	r3, #128	; 0x80
 800a13a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a13e:	bf00      	nop
 800a140:	e03a      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a50      	ldr	r2, [pc, #320]	; (800a288 <UART_SetConfig+0x6a8>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d132      	bne.n	800a1b2 <UART_SetConfig+0x5d2>
 800a14c:	4b4b      	ldr	r3, [pc, #300]	; (800a27c <UART_SetConfig+0x69c>)
 800a14e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a150:	f003 0307 	and.w	r3, r3, #7
 800a154:	2b05      	cmp	r3, #5
 800a156:	d827      	bhi.n	800a1a8 <UART_SetConfig+0x5c8>
 800a158:	a201      	add	r2, pc, #4	; (adr r2, 800a160 <UART_SetConfig+0x580>)
 800a15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15e:	bf00      	nop
 800a160:	0800a179 	.word	0x0800a179
 800a164:	0800a181 	.word	0x0800a181
 800a168:	0800a189 	.word	0x0800a189
 800a16c:	0800a191 	.word	0x0800a191
 800a170:	0800a199 	.word	0x0800a199
 800a174:	0800a1a1 	.word	0x0800a1a1
 800a178:	2302      	movs	r3, #2
 800a17a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a17e:	e01b      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a180:	2304      	movs	r3, #4
 800a182:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a186:	e017      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a188:	2308      	movs	r3, #8
 800a18a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a18e:	e013      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a190:	2310      	movs	r3, #16
 800a192:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a196:	e00f      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a198:	2320      	movs	r3, #32
 800a19a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a19e:	e00b      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a1a0:	2340      	movs	r3, #64	; 0x40
 800a1a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1a6:	e007      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a1a8:	2380      	movs	r3, #128	; 0x80
 800a1aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1ae:	bf00      	nop
 800a1b0:	e002      	b.n	800a1b8 <UART_SetConfig+0x5d8>
 800a1b2:	2380      	movs	r3, #128	; 0x80
 800a1b4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a32      	ldr	r2, [pc, #200]	; (800a288 <UART_SetConfig+0x6a8>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	f040 86f7 	bne.w	800afb2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a1c4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a1c8:	2b08      	cmp	r3, #8
 800a1ca:	f000 80c0 	beq.w	800a34e <UART_SetConfig+0x76e>
 800a1ce:	2b08      	cmp	r3, #8
 800a1d0:	dc04      	bgt.n	800a1dc <UART_SetConfig+0x5fc>
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d00c      	beq.n	800a1f0 <UART_SetConfig+0x610>
 800a1d6:	2b04      	cmp	r3, #4
 800a1d8:	d065      	beq.n	800a2a6 <UART_SetConfig+0x6c6>
 800a1da:	e27a      	b.n	800a6d2 <UART_SetConfig+0xaf2>
 800a1dc:	2b20      	cmp	r3, #32
 800a1de:	f000 81b0 	beq.w	800a542 <UART_SetConfig+0x962>
 800a1e2:	2b40      	cmp	r3, #64	; 0x40
 800a1e4:	f000 821e 	beq.w	800a624 <UART_SetConfig+0xa44>
 800a1e8:	2b10      	cmp	r3, #16
 800a1ea:	f000 8104 	beq.w	800a3f6 <UART_SetConfig+0x816>
 800a1ee:	e270      	b.n	800a6d2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a1f0:	f7fd ff82 	bl	80080f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d04e      	beq.n	800a29c <UART_SetConfig+0x6bc>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a202:	2b01      	cmp	r3, #1
 800a204:	d048      	beq.n	800a298 <UART_SetConfig+0x6b8>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d042      	beq.n	800a294 <UART_SetConfig+0x6b4>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a212:	2b03      	cmp	r3, #3
 800a214:	d03c      	beq.n	800a290 <UART_SetConfig+0x6b0>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21a:	2b04      	cmp	r3, #4
 800a21c:	d036      	beq.n	800a28c <UART_SetConfig+0x6ac>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a222:	2b05      	cmp	r3, #5
 800a224:	d026      	beq.n	800a274 <UART_SetConfig+0x694>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22a:	2b06      	cmp	r3, #6
 800a22c:	d020      	beq.n	800a270 <UART_SetConfig+0x690>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a232:	2b07      	cmp	r3, #7
 800a234:	d01a      	beq.n	800a26c <UART_SetConfig+0x68c>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23a:	2b08      	cmp	r3, #8
 800a23c:	d014      	beq.n	800a268 <UART_SetConfig+0x688>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a242:	2b09      	cmp	r3, #9
 800a244:	d00e      	beq.n	800a264 <UART_SetConfig+0x684>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24a:	2b0a      	cmp	r3, #10
 800a24c:	d008      	beq.n	800a260 <UART_SetConfig+0x680>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a252:	2b0b      	cmp	r3, #11
 800a254:	d102      	bne.n	800a25c <UART_SetConfig+0x67c>
 800a256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a25a:	e020      	b.n	800a29e <UART_SetConfig+0x6be>
 800a25c:	2301      	movs	r3, #1
 800a25e:	e01e      	b.n	800a29e <UART_SetConfig+0x6be>
 800a260:	2380      	movs	r3, #128	; 0x80
 800a262:	e01c      	b.n	800a29e <UART_SetConfig+0x6be>
 800a264:	2340      	movs	r3, #64	; 0x40
 800a266:	e01a      	b.n	800a29e <UART_SetConfig+0x6be>
 800a268:	2320      	movs	r3, #32
 800a26a:	e018      	b.n	800a29e <UART_SetConfig+0x6be>
 800a26c:	2310      	movs	r3, #16
 800a26e:	e016      	b.n	800a29e <UART_SetConfig+0x6be>
 800a270:	230c      	movs	r3, #12
 800a272:	e014      	b.n	800a29e <UART_SetConfig+0x6be>
 800a274:	230a      	movs	r3, #10
 800a276:	e012      	b.n	800a29e <UART_SetConfig+0x6be>
 800a278:	40011400 	.word	0x40011400
 800a27c:	58024400 	.word	0x58024400
 800a280:	40007800 	.word	0x40007800
 800a284:	40007c00 	.word	0x40007c00
 800a288:	58000c00 	.word	0x58000c00
 800a28c:	2308      	movs	r3, #8
 800a28e:	e006      	b.n	800a29e <UART_SetConfig+0x6be>
 800a290:	2306      	movs	r3, #6
 800a292:	e004      	b.n	800a29e <UART_SetConfig+0x6be>
 800a294:	2304      	movs	r3, #4
 800a296:	e002      	b.n	800a29e <UART_SetConfig+0x6be>
 800a298:	2302      	movs	r3, #2
 800a29a:	e000      	b.n	800a29e <UART_SetConfig+0x6be>
 800a29c:	2301      	movs	r3, #1
 800a29e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2a4:	e219      	b.n	800a6da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2a6:	f107 0318 	add.w	r3, r7, #24
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7fd ff3a 	bl	8008124 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a2b0:	69fa      	ldr	r2, [r7, #28]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d044      	beq.n	800a344 <UART_SetConfig+0x764>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d03e      	beq.n	800a340 <UART_SetConfig+0x760>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d038      	beq.n	800a33c <UART_SetConfig+0x75c>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	d032      	beq.n	800a338 <UART_SetConfig+0x758>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d6:	2b04      	cmp	r3, #4
 800a2d8:	d02c      	beq.n	800a334 <UART_SetConfig+0x754>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2de:	2b05      	cmp	r3, #5
 800a2e0:	d026      	beq.n	800a330 <UART_SetConfig+0x750>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e6:	2b06      	cmp	r3, #6
 800a2e8:	d020      	beq.n	800a32c <UART_SetConfig+0x74c>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ee:	2b07      	cmp	r3, #7
 800a2f0:	d01a      	beq.n	800a328 <UART_SetConfig+0x748>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f6:	2b08      	cmp	r3, #8
 800a2f8:	d014      	beq.n	800a324 <UART_SetConfig+0x744>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fe:	2b09      	cmp	r3, #9
 800a300:	d00e      	beq.n	800a320 <UART_SetConfig+0x740>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a306:	2b0a      	cmp	r3, #10
 800a308:	d008      	beq.n	800a31c <UART_SetConfig+0x73c>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30e:	2b0b      	cmp	r3, #11
 800a310:	d102      	bne.n	800a318 <UART_SetConfig+0x738>
 800a312:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a316:	e016      	b.n	800a346 <UART_SetConfig+0x766>
 800a318:	2301      	movs	r3, #1
 800a31a:	e014      	b.n	800a346 <UART_SetConfig+0x766>
 800a31c:	2380      	movs	r3, #128	; 0x80
 800a31e:	e012      	b.n	800a346 <UART_SetConfig+0x766>
 800a320:	2340      	movs	r3, #64	; 0x40
 800a322:	e010      	b.n	800a346 <UART_SetConfig+0x766>
 800a324:	2320      	movs	r3, #32
 800a326:	e00e      	b.n	800a346 <UART_SetConfig+0x766>
 800a328:	2310      	movs	r3, #16
 800a32a:	e00c      	b.n	800a346 <UART_SetConfig+0x766>
 800a32c:	230c      	movs	r3, #12
 800a32e:	e00a      	b.n	800a346 <UART_SetConfig+0x766>
 800a330:	230a      	movs	r3, #10
 800a332:	e008      	b.n	800a346 <UART_SetConfig+0x766>
 800a334:	2308      	movs	r3, #8
 800a336:	e006      	b.n	800a346 <UART_SetConfig+0x766>
 800a338:	2306      	movs	r3, #6
 800a33a:	e004      	b.n	800a346 <UART_SetConfig+0x766>
 800a33c:	2304      	movs	r3, #4
 800a33e:	e002      	b.n	800a346 <UART_SetConfig+0x766>
 800a340:	2302      	movs	r3, #2
 800a342:	e000      	b.n	800a346 <UART_SetConfig+0x766>
 800a344:	2301      	movs	r3, #1
 800a346:	fbb2 f3f3 	udiv	r3, r2, r3
 800a34a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a34c:	e1c5      	b.n	800a6da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a34e:	f107 030c 	add.w	r3, r7, #12
 800a352:	4618      	mov	r0, r3
 800a354:	f7fe f832 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d044      	beq.n	800a3ec <UART_SetConfig+0x80c>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a366:	2b01      	cmp	r3, #1
 800a368:	d03e      	beq.n	800a3e8 <UART_SetConfig+0x808>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d038      	beq.n	800a3e4 <UART_SetConfig+0x804>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a376:	2b03      	cmp	r3, #3
 800a378:	d032      	beq.n	800a3e0 <UART_SetConfig+0x800>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37e:	2b04      	cmp	r3, #4
 800a380:	d02c      	beq.n	800a3dc <UART_SetConfig+0x7fc>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a386:	2b05      	cmp	r3, #5
 800a388:	d026      	beq.n	800a3d8 <UART_SetConfig+0x7f8>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38e:	2b06      	cmp	r3, #6
 800a390:	d020      	beq.n	800a3d4 <UART_SetConfig+0x7f4>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a396:	2b07      	cmp	r3, #7
 800a398:	d01a      	beq.n	800a3d0 <UART_SetConfig+0x7f0>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39e:	2b08      	cmp	r3, #8
 800a3a0:	d014      	beq.n	800a3cc <UART_SetConfig+0x7ec>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a6:	2b09      	cmp	r3, #9
 800a3a8:	d00e      	beq.n	800a3c8 <UART_SetConfig+0x7e8>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ae:	2b0a      	cmp	r3, #10
 800a3b0:	d008      	beq.n	800a3c4 <UART_SetConfig+0x7e4>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b6:	2b0b      	cmp	r3, #11
 800a3b8:	d102      	bne.n	800a3c0 <UART_SetConfig+0x7e0>
 800a3ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3be:	e016      	b.n	800a3ee <UART_SetConfig+0x80e>
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e014      	b.n	800a3ee <UART_SetConfig+0x80e>
 800a3c4:	2380      	movs	r3, #128	; 0x80
 800a3c6:	e012      	b.n	800a3ee <UART_SetConfig+0x80e>
 800a3c8:	2340      	movs	r3, #64	; 0x40
 800a3ca:	e010      	b.n	800a3ee <UART_SetConfig+0x80e>
 800a3cc:	2320      	movs	r3, #32
 800a3ce:	e00e      	b.n	800a3ee <UART_SetConfig+0x80e>
 800a3d0:	2310      	movs	r3, #16
 800a3d2:	e00c      	b.n	800a3ee <UART_SetConfig+0x80e>
 800a3d4:	230c      	movs	r3, #12
 800a3d6:	e00a      	b.n	800a3ee <UART_SetConfig+0x80e>
 800a3d8:	230a      	movs	r3, #10
 800a3da:	e008      	b.n	800a3ee <UART_SetConfig+0x80e>
 800a3dc:	2308      	movs	r3, #8
 800a3de:	e006      	b.n	800a3ee <UART_SetConfig+0x80e>
 800a3e0:	2306      	movs	r3, #6
 800a3e2:	e004      	b.n	800a3ee <UART_SetConfig+0x80e>
 800a3e4:	2304      	movs	r3, #4
 800a3e6:	e002      	b.n	800a3ee <UART_SetConfig+0x80e>
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	e000      	b.n	800a3ee <UART_SetConfig+0x80e>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3f4:	e171      	b.n	800a6da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3f6:	4b7a      	ldr	r3, [pc, #488]	; (800a5e0 <UART_SetConfig+0xa00>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f003 0320 	and.w	r3, r3, #32
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d054      	beq.n	800a4ac <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a402:	4b77      	ldr	r3, [pc, #476]	; (800a5e0 <UART_SetConfig+0xa00>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	08db      	lsrs	r3, r3, #3
 800a408:	f003 0303 	and.w	r3, r3, #3
 800a40c:	4a75      	ldr	r2, [pc, #468]	; (800a5e4 <UART_SetConfig+0xa04>)
 800a40e:	40da      	lsrs	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a414:	2b00      	cmp	r3, #0
 800a416:	d044      	beq.n	800a4a2 <UART_SetConfig+0x8c2>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d03e      	beq.n	800a49e <UART_SetConfig+0x8be>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a424:	2b02      	cmp	r3, #2
 800a426:	d038      	beq.n	800a49a <UART_SetConfig+0x8ba>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42c:	2b03      	cmp	r3, #3
 800a42e:	d032      	beq.n	800a496 <UART_SetConfig+0x8b6>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a434:	2b04      	cmp	r3, #4
 800a436:	d02c      	beq.n	800a492 <UART_SetConfig+0x8b2>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43c:	2b05      	cmp	r3, #5
 800a43e:	d026      	beq.n	800a48e <UART_SetConfig+0x8ae>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a444:	2b06      	cmp	r3, #6
 800a446:	d020      	beq.n	800a48a <UART_SetConfig+0x8aa>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44c:	2b07      	cmp	r3, #7
 800a44e:	d01a      	beq.n	800a486 <UART_SetConfig+0x8a6>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a454:	2b08      	cmp	r3, #8
 800a456:	d014      	beq.n	800a482 <UART_SetConfig+0x8a2>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45c:	2b09      	cmp	r3, #9
 800a45e:	d00e      	beq.n	800a47e <UART_SetConfig+0x89e>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a464:	2b0a      	cmp	r3, #10
 800a466:	d008      	beq.n	800a47a <UART_SetConfig+0x89a>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46c:	2b0b      	cmp	r3, #11
 800a46e:	d102      	bne.n	800a476 <UART_SetConfig+0x896>
 800a470:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a474:	e016      	b.n	800a4a4 <UART_SetConfig+0x8c4>
 800a476:	2301      	movs	r3, #1
 800a478:	e014      	b.n	800a4a4 <UART_SetConfig+0x8c4>
 800a47a:	2380      	movs	r3, #128	; 0x80
 800a47c:	e012      	b.n	800a4a4 <UART_SetConfig+0x8c4>
 800a47e:	2340      	movs	r3, #64	; 0x40
 800a480:	e010      	b.n	800a4a4 <UART_SetConfig+0x8c4>
 800a482:	2320      	movs	r3, #32
 800a484:	e00e      	b.n	800a4a4 <UART_SetConfig+0x8c4>
 800a486:	2310      	movs	r3, #16
 800a488:	e00c      	b.n	800a4a4 <UART_SetConfig+0x8c4>
 800a48a:	230c      	movs	r3, #12
 800a48c:	e00a      	b.n	800a4a4 <UART_SetConfig+0x8c4>
 800a48e:	230a      	movs	r3, #10
 800a490:	e008      	b.n	800a4a4 <UART_SetConfig+0x8c4>
 800a492:	2308      	movs	r3, #8
 800a494:	e006      	b.n	800a4a4 <UART_SetConfig+0x8c4>
 800a496:	2306      	movs	r3, #6
 800a498:	e004      	b.n	800a4a4 <UART_SetConfig+0x8c4>
 800a49a:	2304      	movs	r3, #4
 800a49c:	e002      	b.n	800a4a4 <UART_SetConfig+0x8c4>
 800a49e:	2302      	movs	r3, #2
 800a4a0:	e000      	b.n	800a4a4 <UART_SetConfig+0x8c4>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a4aa:	e116      	b.n	800a6da <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d043      	beq.n	800a53c <UART_SetConfig+0x95c>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d03d      	beq.n	800a538 <UART_SetConfig+0x958>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d037      	beq.n	800a534 <UART_SetConfig+0x954>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c8:	2b03      	cmp	r3, #3
 800a4ca:	d031      	beq.n	800a530 <UART_SetConfig+0x950>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d0:	2b04      	cmp	r3, #4
 800a4d2:	d02b      	beq.n	800a52c <UART_SetConfig+0x94c>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d8:	2b05      	cmp	r3, #5
 800a4da:	d025      	beq.n	800a528 <UART_SetConfig+0x948>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e0:	2b06      	cmp	r3, #6
 800a4e2:	d01f      	beq.n	800a524 <UART_SetConfig+0x944>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e8:	2b07      	cmp	r3, #7
 800a4ea:	d019      	beq.n	800a520 <UART_SetConfig+0x940>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f0:	2b08      	cmp	r3, #8
 800a4f2:	d013      	beq.n	800a51c <UART_SetConfig+0x93c>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f8:	2b09      	cmp	r3, #9
 800a4fa:	d00d      	beq.n	800a518 <UART_SetConfig+0x938>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a500:	2b0a      	cmp	r3, #10
 800a502:	d007      	beq.n	800a514 <UART_SetConfig+0x934>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a508:	2b0b      	cmp	r3, #11
 800a50a:	d101      	bne.n	800a510 <UART_SetConfig+0x930>
 800a50c:	4b36      	ldr	r3, [pc, #216]	; (800a5e8 <UART_SetConfig+0xa08>)
 800a50e:	e016      	b.n	800a53e <UART_SetConfig+0x95e>
 800a510:	4b34      	ldr	r3, [pc, #208]	; (800a5e4 <UART_SetConfig+0xa04>)
 800a512:	e014      	b.n	800a53e <UART_SetConfig+0x95e>
 800a514:	4b35      	ldr	r3, [pc, #212]	; (800a5ec <UART_SetConfig+0xa0c>)
 800a516:	e012      	b.n	800a53e <UART_SetConfig+0x95e>
 800a518:	4b35      	ldr	r3, [pc, #212]	; (800a5f0 <UART_SetConfig+0xa10>)
 800a51a:	e010      	b.n	800a53e <UART_SetConfig+0x95e>
 800a51c:	4b35      	ldr	r3, [pc, #212]	; (800a5f4 <UART_SetConfig+0xa14>)
 800a51e:	e00e      	b.n	800a53e <UART_SetConfig+0x95e>
 800a520:	4b35      	ldr	r3, [pc, #212]	; (800a5f8 <UART_SetConfig+0xa18>)
 800a522:	e00c      	b.n	800a53e <UART_SetConfig+0x95e>
 800a524:	4b35      	ldr	r3, [pc, #212]	; (800a5fc <UART_SetConfig+0xa1c>)
 800a526:	e00a      	b.n	800a53e <UART_SetConfig+0x95e>
 800a528:	4b35      	ldr	r3, [pc, #212]	; (800a600 <UART_SetConfig+0xa20>)
 800a52a:	e008      	b.n	800a53e <UART_SetConfig+0x95e>
 800a52c:	4b35      	ldr	r3, [pc, #212]	; (800a604 <UART_SetConfig+0xa24>)
 800a52e:	e006      	b.n	800a53e <UART_SetConfig+0x95e>
 800a530:	4b35      	ldr	r3, [pc, #212]	; (800a608 <UART_SetConfig+0xa28>)
 800a532:	e004      	b.n	800a53e <UART_SetConfig+0x95e>
 800a534:	4b35      	ldr	r3, [pc, #212]	; (800a60c <UART_SetConfig+0xa2c>)
 800a536:	e002      	b.n	800a53e <UART_SetConfig+0x95e>
 800a538:	4b35      	ldr	r3, [pc, #212]	; (800a610 <UART_SetConfig+0xa30>)
 800a53a:	e000      	b.n	800a53e <UART_SetConfig+0x95e>
 800a53c:	4b29      	ldr	r3, [pc, #164]	; (800a5e4 <UART_SetConfig+0xa04>)
 800a53e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a540:	e0cb      	b.n	800a6da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a546:	2b00      	cmp	r3, #0
 800a548:	d046      	beq.n	800a5d8 <UART_SetConfig+0x9f8>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d040      	beq.n	800a5d4 <UART_SetConfig+0x9f4>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a556:	2b02      	cmp	r3, #2
 800a558:	d03a      	beq.n	800a5d0 <UART_SetConfig+0x9f0>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55e:	2b03      	cmp	r3, #3
 800a560:	d034      	beq.n	800a5cc <UART_SetConfig+0x9ec>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a566:	2b04      	cmp	r3, #4
 800a568:	d02e      	beq.n	800a5c8 <UART_SetConfig+0x9e8>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56e:	2b05      	cmp	r3, #5
 800a570:	d028      	beq.n	800a5c4 <UART_SetConfig+0x9e4>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a576:	2b06      	cmp	r3, #6
 800a578:	d022      	beq.n	800a5c0 <UART_SetConfig+0x9e0>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57e:	2b07      	cmp	r3, #7
 800a580:	d01c      	beq.n	800a5bc <UART_SetConfig+0x9dc>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a586:	2b08      	cmp	r3, #8
 800a588:	d016      	beq.n	800a5b8 <UART_SetConfig+0x9d8>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58e:	2b09      	cmp	r3, #9
 800a590:	d00f      	beq.n	800a5b2 <UART_SetConfig+0x9d2>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a596:	2b0a      	cmp	r3, #10
 800a598:	d008      	beq.n	800a5ac <UART_SetConfig+0x9cc>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59e:	2b0b      	cmp	r3, #11
 800a5a0:	d102      	bne.n	800a5a8 <UART_SetConfig+0x9c8>
 800a5a2:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a5a6:	e018      	b.n	800a5da <UART_SetConfig+0x9fa>
 800a5a8:	4b13      	ldr	r3, [pc, #76]	; (800a5f8 <UART_SetConfig+0xa18>)
 800a5aa:	e016      	b.n	800a5da <UART_SetConfig+0x9fa>
 800a5ac:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a5b0:	e013      	b.n	800a5da <UART_SetConfig+0x9fa>
 800a5b2:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a5b6:	e010      	b.n	800a5da <UART_SetConfig+0x9fa>
 800a5b8:	4b16      	ldr	r3, [pc, #88]	; (800a614 <UART_SetConfig+0xa34>)
 800a5ba:	e00e      	b.n	800a5da <UART_SetConfig+0x9fa>
 800a5bc:	4b0a      	ldr	r3, [pc, #40]	; (800a5e8 <UART_SetConfig+0xa08>)
 800a5be:	e00c      	b.n	800a5da <UART_SetConfig+0x9fa>
 800a5c0:	4b15      	ldr	r3, [pc, #84]	; (800a618 <UART_SetConfig+0xa38>)
 800a5c2:	e00a      	b.n	800a5da <UART_SetConfig+0x9fa>
 800a5c4:	4b15      	ldr	r3, [pc, #84]	; (800a61c <UART_SetConfig+0xa3c>)
 800a5c6:	e008      	b.n	800a5da <UART_SetConfig+0x9fa>
 800a5c8:	4b08      	ldr	r3, [pc, #32]	; (800a5ec <UART_SetConfig+0xa0c>)
 800a5ca:	e006      	b.n	800a5da <UART_SetConfig+0x9fa>
 800a5cc:	4b14      	ldr	r3, [pc, #80]	; (800a620 <UART_SetConfig+0xa40>)
 800a5ce:	e004      	b.n	800a5da <UART_SetConfig+0x9fa>
 800a5d0:	4b07      	ldr	r3, [pc, #28]	; (800a5f0 <UART_SetConfig+0xa10>)
 800a5d2:	e002      	b.n	800a5da <UART_SetConfig+0x9fa>
 800a5d4:	4b07      	ldr	r3, [pc, #28]	; (800a5f4 <UART_SetConfig+0xa14>)
 800a5d6:	e000      	b.n	800a5da <UART_SetConfig+0x9fa>
 800a5d8:	4b07      	ldr	r3, [pc, #28]	; (800a5f8 <UART_SetConfig+0xa18>)
 800a5da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5dc:	e07d      	b.n	800a6da <UART_SetConfig+0xafa>
 800a5de:	bf00      	nop
 800a5e0:	58024400 	.word	0x58024400
 800a5e4:	03d09000 	.word	0x03d09000
 800a5e8:	0003d090 	.word	0x0003d090
 800a5ec:	0007a120 	.word	0x0007a120
 800a5f0:	000f4240 	.word	0x000f4240
 800a5f4:	001e8480 	.word	0x001e8480
 800a5f8:	003d0900 	.word	0x003d0900
 800a5fc:	00516155 	.word	0x00516155
 800a600:	0061a800 	.word	0x0061a800
 800a604:	007a1200 	.word	0x007a1200
 800a608:	00a2c2aa 	.word	0x00a2c2aa
 800a60c:	00f42400 	.word	0x00f42400
 800a610:	01e84800 	.word	0x01e84800
 800a614:	0001e848 	.word	0x0001e848
 800a618:	00051615 	.word	0x00051615
 800a61c:	00061a80 	.word	0x00061a80
 800a620:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d04e      	beq.n	800a6ca <UART_SetConfig+0xaea>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a630:	2b01      	cmp	r3, #1
 800a632:	d047      	beq.n	800a6c4 <UART_SetConfig+0xae4>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d040      	beq.n	800a6be <UART_SetConfig+0xade>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a640:	2b03      	cmp	r3, #3
 800a642:	d039      	beq.n	800a6b8 <UART_SetConfig+0xad8>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a648:	2b04      	cmp	r3, #4
 800a64a:	d032      	beq.n	800a6b2 <UART_SetConfig+0xad2>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	2b05      	cmp	r3, #5
 800a652:	d02b      	beq.n	800a6ac <UART_SetConfig+0xacc>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a658:	2b06      	cmp	r3, #6
 800a65a:	d024      	beq.n	800a6a6 <UART_SetConfig+0xac6>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	2b07      	cmp	r3, #7
 800a662:	d01d      	beq.n	800a6a0 <UART_SetConfig+0xac0>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	2b08      	cmp	r3, #8
 800a66a:	d016      	beq.n	800a69a <UART_SetConfig+0xaba>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	2b09      	cmp	r3, #9
 800a672:	d00f      	beq.n	800a694 <UART_SetConfig+0xab4>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a678:	2b0a      	cmp	r3, #10
 800a67a:	d008      	beq.n	800a68e <UART_SetConfig+0xaae>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	2b0b      	cmp	r3, #11
 800a682:	d101      	bne.n	800a688 <UART_SetConfig+0xaa8>
 800a684:	2380      	movs	r3, #128	; 0x80
 800a686:	e022      	b.n	800a6ce <UART_SetConfig+0xaee>
 800a688:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a68c:	e01f      	b.n	800a6ce <UART_SetConfig+0xaee>
 800a68e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a692:	e01c      	b.n	800a6ce <UART_SetConfig+0xaee>
 800a694:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a698:	e019      	b.n	800a6ce <UART_SetConfig+0xaee>
 800a69a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a69e:	e016      	b.n	800a6ce <UART_SetConfig+0xaee>
 800a6a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a6a4:	e013      	b.n	800a6ce <UART_SetConfig+0xaee>
 800a6a6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a6aa:	e010      	b.n	800a6ce <UART_SetConfig+0xaee>
 800a6ac:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a6b0:	e00d      	b.n	800a6ce <UART_SetConfig+0xaee>
 800a6b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6b6:	e00a      	b.n	800a6ce <UART_SetConfig+0xaee>
 800a6b8:	f241 5355 	movw	r3, #5461	; 0x1555
 800a6bc:	e007      	b.n	800a6ce <UART_SetConfig+0xaee>
 800a6be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6c2:	e004      	b.n	800a6ce <UART_SetConfig+0xaee>
 800a6c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a6c8:	e001      	b.n	800a6ce <UART_SetConfig+0xaee>
 800a6ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6d0:	e003      	b.n	800a6da <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a6d8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f001 83e8 	beq.w	800beb2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	685a      	ldr	r2, [r3, #4]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	005b      	lsls	r3, r3, #1
 800a6ea:	4413      	add	r3, r2
 800a6ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d305      	bcc.n	800a6fe <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d904      	bls.n	800a708 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a704:	f001 bbd5 	b.w	800beb2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800a708:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a70c:	2b08      	cmp	r3, #8
 800a70e:	f000 8154 	beq.w	800a9ba <UART_SetConfig+0xdda>
 800a712:	2b08      	cmp	r3, #8
 800a714:	dc06      	bgt.n	800a724 <UART_SetConfig+0xb44>
 800a716:	2b02      	cmp	r3, #2
 800a718:	d00f      	beq.n	800a73a <UART_SetConfig+0xb5a>
 800a71a:	2b04      	cmp	r3, #4
 800a71c:	f000 80ac 	beq.w	800a878 <UART_SetConfig+0xc98>
 800a720:	f000 bc30 	b.w	800af84 <UART_SetConfig+0x13a4>
 800a724:	2b20      	cmp	r3, #32
 800a726:	f000 832d 	beq.w	800ad84 <UART_SetConfig+0x11a4>
 800a72a:	2b40      	cmp	r3, #64	; 0x40
 800a72c:	f000 83a5 	beq.w	800ae7a <UART_SetConfig+0x129a>
 800a730:	2b10      	cmp	r3, #16
 800a732:	f000 81e3 	beq.w	800aafc <UART_SetConfig+0xf1c>
 800a736:	f000 bc25 	b.w	800af84 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a73a:	f7fd fcdd 	bl	80080f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a73e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a742:	4618      	mov	r0, r3
 800a744:	f04f 0100 	mov.w	r1, #0
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d067      	beq.n	800a820 <UART_SetConfig+0xc40>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a754:	2b01      	cmp	r3, #1
 800a756:	d05e      	beq.n	800a816 <UART_SetConfig+0xc36>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d055      	beq.n	800a80c <UART_SetConfig+0xc2c>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a764:	2b03      	cmp	r3, #3
 800a766:	d04c      	beq.n	800a802 <UART_SetConfig+0xc22>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76c:	2b04      	cmp	r3, #4
 800a76e:	d043      	beq.n	800a7f8 <UART_SetConfig+0xc18>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a774:	2b05      	cmp	r3, #5
 800a776:	d03a      	beq.n	800a7ee <UART_SetConfig+0xc0e>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77c:	2b06      	cmp	r3, #6
 800a77e:	d031      	beq.n	800a7e4 <UART_SetConfig+0xc04>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a784:	2b07      	cmp	r3, #7
 800a786:	d028      	beq.n	800a7da <UART_SetConfig+0xbfa>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78c:	2b08      	cmp	r3, #8
 800a78e:	d01f      	beq.n	800a7d0 <UART_SetConfig+0xbf0>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a794:	2b09      	cmp	r3, #9
 800a796:	d016      	beq.n	800a7c6 <UART_SetConfig+0xbe6>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79c:	2b0a      	cmp	r3, #10
 800a79e:	d00d      	beq.n	800a7bc <UART_SetConfig+0xbdc>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a4:	2b0b      	cmp	r3, #11
 800a7a6:	d104      	bne.n	800a7b2 <UART_SetConfig+0xbd2>
 800a7a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7ac:	f04f 0400 	mov.w	r4, #0
 800a7b0:	e03a      	b.n	800a828 <UART_SetConfig+0xc48>
 800a7b2:	f04f 0301 	mov.w	r3, #1
 800a7b6:	f04f 0400 	mov.w	r4, #0
 800a7ba:	e035      	b.n	800a828 <UART_SetConfig+0xc48>
 800a7bc:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a7c0:	f04f 0400 	mov.w	r4, #0
 800a7c4:	e030      	b.n	800a828 <UART_SetConfig+0xc48>
 800a7c6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a7ca:	f04f 0400 	mov.w	r4, #0
 800a7ce:	e02b      	b.n	800a828 <UART_SetConfig+0xc48>
 800a7d0:	f04f 0320 	mov.w	r3, #32
 800a7d4:	f04f 0400 	mov.w	r4, #0
 800a7d8:	e026      	b.n	800a828 <UART_SetConfig+0xc48>
 800a7da:	f04f 0310 	mov.w	r3, #16
 800a7de:	f04f 0400 	mov.w	r4, #0
 800a7e2:	e021      	b.n	800a828 <UART_SetConfig+0xc48>
 800a7e4:	f04f 030c 	mov.w	r3, #12
 800a7e8:	f04f 0400 	mov.w	r4, #0
 800a7ec:	e01c      	b.n	800a828 <UART_SetConfig+0xc48>
 800a7ee:	f04f 030a 	mov.w	r3, #10
 800a7f2:	f04f 0400 	mov.w	r4, #0
 800a7f6:	e017      	b.n	800a828 <UART_SetConfig+0xc48>
 800a7f8:	f04f 0308 	mov.w	r3, #8
 800a7fc:	f04f 0400 	mov.w	r4, #0
 800a800:	e012      	b.n	800a828 <UART_SetConfig+0xc48>
 800a802:	f04f 0306 	mov.w	r3, #6
 800a806:	f04f 0400 	mov.w	r4, #0
 800a80a:	e00d      	b.n	800a828 <UART_SetConfig+0xc48>
 800a80c:	f04f 0304 	mov.w	r3, #4
 800a810:	f04f 0400 	mov.w	r4, #0
 800a814:	e008      	b.n	800a828 <UART_SetConfig+0xc48>
 800a816:	f04f 0302 	mov.w	r3, #2
 800a81a:	f04f 0400 	mov.w	r4, #0
 800a81e:	e003      	b.n	800a828 <UART_SetConfig+0xc48>
 800a820:	f04f 0301 	mov.w	r3, #1
 800a824:	f04f 0400 	mov.w	r4, #0
 800a828:	461a      	mov	r2, r3
 800a82a:	4623      	mov	r3, r4
 800a82c:	f7f5 fd54 	bl	80002d8 <__aeabi_uldivmod>
 800a830:	4603      	mov	r3, r0
 800a832:	460c      	mov	r4, r1
 800a834:	4619      	mov	r1, r3
 800a836:	4622      	mov	r2, r4
 800a838:	f04f 0300 	mov.w	r3, #0
 800a83c:	f04f 0400 	mov.w	r4, #0
 800a840:	0214      	lsls	r4, r2, #8
 800a842:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a846:	020b      	lsls	r3, r1, #8
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	6852      	ldr	r2, [r2, #4]
 800a84c:	0852      	lsrs	r2, r2, #1
 800a84e:	4611      	mov	r1, r2
 800a850:	f04f 0200 	mov.w	r2, #0
 800a854:	eb13 0b01 	adds.w	fp, r3, r1
 800a858:	eb44 0c02 	adc.w	ip, r4, r2
 800a85c:	4658      	mov	r0, fp
 800a85e:	4661      	mov	r1, ip
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	f04f 0400 	mov.w	r4, #0
 800a868:	461a      	mov	r2, r3
 800a86a:	4623      	mov	r3, r4
 800a86c:	f7f5 fd34 	bl	80002d8 <__aeabi_uldivmod>
 800a870:	4603      	mov	r3, r0
 800a872:	460c      	mov	r4, r1
 800a874:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a876:	e389      	b.n	800af8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a878:	f107 0318 	add.w	r3, r7, #24
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7fd fc51 	bl	8008124 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	4618      	mov	r0, r3
 800a886:	f04f 0100 	mov.w	r1, #0
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d067      	beq.n	800a962 <UART_SetConfig+0xd82>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	2b01      	cmp	r3, #1
 800a898:	d05e      	beq.n	800a958 <UART_SetConfig+0xd78>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	d055      	beq.n	800a94e <UART_SetConfig+0xd6e>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a6:	2b03      	cmp	r3, #3
 800a8a8:	d04c      	beq.n	800a944 <UART_SetConfig+0xd64>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ae:	2b04      	cmp	r3, #4
 800a8b0:	d043      	beq.n	800a93a <UART_SetConfig+0xd5a>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b6:	2b05      	cmp	r3, #5
 800a8b8:	d03a      	beq.n	800a930 <UART_SetConfig+0xd50>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8be:	2b06      	cmp	r3, #6
 800a8c0:	d031      	beq.n	800a926 <UART_SetConfig+0xd46>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	2b07      	cmp	r3, #7
 800a8c8:	d028      	beq.n	800a91c <UART_SetConfig+0xd3c>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	2b08      	cmp	r3, #8
 800a8d0:	d01f      	beq.n	800a912 <UART_SetConfig+0xd32>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d6:	2b09      	cmp	r3, #9
 800a8d8:	d016      	beq.n	800a908 <UART_SetConfig+0xd28>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8de:	2b0a      	cmp	r3, #10
 800a8e0:	d00d      	beq.n	800a8fe <UART_SetConfig+0xd1e>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e6:	2b0b      	cmp	r3, #11
 800a8e8:	d104      	bne.n	800a8f4 <UART_SetConfig+0xd14>
 800a8ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8ee:	f04f 0400 	mov.w	r4, #0
 800a8f2:	e03a      	b.n	800a96a <UART_SetConfig+0xd8a>
 800a8f4:	f04f 0301 	mov.w	r3, #1
 800a8f8:	f04f 0400 	mov.w	r4, #0
 800a8fc:	e035      	b.n	800a96a <UART_SetConfig+0xd8a>
 800a8fe:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a902:	f04f 0400 	mov.w	r4, #0
 800a906:	e030      	b.n	800a96a <UART_SetConfig+0xd8a>
 800a908:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a90c:	f04f 0400 	mov.w	r4, #0
 800a910:	e02b      	b.n	800a96a <UART_SetConfig+0xd8a>
 800a912:	f04f 0320 	mov.w	r3, #32
 800a916:	f04f 0400 	mov.w	r4, #0
 800a91a:	e026      	b.n	800a96a <UART_SetConfig+0xd8a>
 800a91c:	f04f 0310 	mov.w	r3, #16
 800a920:	f04f 0400 	mov.w	r4, #0
 800a924:	e021      	b.n	800a96a <UART_SetConfig+0xd8a>
 800a926:	f04f 030c 	mov.w	r3, #12
 800a92a:	f04f 0400 	mov.w	r4, #0
 800a92e:	e01c      	b.n	800a96a <UART_SetConfig+0xd8a>
 800a930:	f04f 030a 	mov.w	r3, #10
 800a934:	f04f 0400 	mov.w	r4, #0
 800a938:	e017      	b.n	800a96a <UART_SetConfig+0xd8a>
 800a93a:	f04f 0308 	mov.w	r3, #8
 800a93e:	f04f 0400 	mov.w	r4, #0
 800a942:	e012      	b.n	800a96a <UART_SetConfig+0xd8a>
 800a944:	f04f 0306 	mov.w	r3, #6
 800a948:	f04f 0400 	mov.w	r4, #0
 800a94c:	e00d      	b.n	800a96a <UART_SetConfig+0xd8a>
 800a94e:	f04f 0304 	mov.w	r3, #4
 800a952:	f04f 0400 	mov.w	r4, #0
 800a956:	e008      	b.n	800a96a <UART_SetConfig+0xd8a>
 800a958:	f04f 0302 	mov.w	r3, #2
 800a95c:	f04f 0400 	mov.w	r4, #0
 800a960:	e003      	b.n	800a96a <UART_SetConfig+0xd8a>
 800a962:	f04f 0301 	mov.w	r3, #1
 800a966:	f04f 0400 	mov.w	r4, #0
 800a96a:	461a      	mov	r2, r3
 800a96c:	4623      	mov	r3, r4
 800a96e:	f7f5 fcb3 	bl	80002d8 <__aeabi_uldivmod>
 800a972:	4603      	mov	r3, r0
 800a974:	460c      	mov	r4, r1
 800a976:	4619      	mov	r1, r3
 800a978:	4622      	mov	r2, r4
 800a97a:	f04f 0300 	mov.w	r3, #0
 800a97e:	f04f 0400 	mov.w	r4, #0
 800a982:	0214      	lsls	r4, r2, #8
 800a984:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a988:	020b      	lsls	r3, r1, #8
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	6852      	ldr	r2, [r2, #4]
 800a98e:	0852      	lsrs	r2, r2, #1
 800a990:	4611      	mov	r1, r2
 800a992:	f04f 0200 	mov.w	r2, #0
 800a996:	eb13 0b01 	adds.w	fp, r3, r1
 800a99a:	eb44 0c02 	adc.w	ip, r4, r2
 800a99e:	4658      	mov	r0, fp
 800a9a0:	4661      	mov	r1, ip
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	f04f 0400 	mov.w	r4, #0
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	4623      	mov	r3, r4
 800a9ae:	f7f5 fc93 	bl	80002d8 <__aeabi_uldivmod>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	460c      	mov	r4, r1
 800a9b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a9b8:	e2e8      	b.n	800af8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9ba:	f107 030c 	add.w	r3, r7, #12
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fd fcfc 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f04f 0100 	mov.w	r1, #0
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d067      	beq.n	800aaa4 <UART_SetConfig+0xec4>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d05e      	beq.n	800aa9a <UART_SetConfig+0xeba>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	d055      	beq.n	800aa90 <UART_SetConfig+0xeb0>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e8:	2b03      	cmp	r3, #3
 800a9ea:	d04c      	beq.n	800aa86 <UART_SetConfig+0xea6>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f0:	2b04      	cmp	r3, #4
 800a9f2:	d043      	beq.n	800aa7c <UART_SetConfig+0xe9c>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	2b05      	cmp	r3, #5
 800a9fa:	d03a      	beq.n	800aa72 <UART_SetConfig+0xe92>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa00:	2b06      	cmp	r3, #6
 800aa02:	d031      	beq.n	800aa68 <UART_SetConfig+0xe88>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa08:	2b07      	cmp	r3, #7
 800aa0a:	d028      	beq.n	800aa5e <UART_SetConfig+0xe7e>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa10:	2b08      	cmp	r3, #8
 800aa12:	d01f      	beq.n	800aa54 <UART_SetConfig+0xe74>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa18:	2b09      	cmp	r3, #9
 800aa1a:	d016      	beq.n	800aa4a <UART_SetConfig+0xe6a>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa20:	2b0a      	cmp	r3, #10
 800aa22:	d00d      	beq.n	800aa40 <UART_SetConfig+0xe60>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa28:	2b0b      	cmp	r3, #11
 800aa2a:	d104      	bne.n	800aa36 <UART_SetConfig+0xe56>
 800aa2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa30:	f04f 0400 	mov.w	r4, #0
 800aa34:	e03a      	b.n	800aaac <UART_SetConfig+0xecc>
 800aa36:	f04f 0301 	mov.w	r3, #1
 800aa3a:	f04f 0400 	mov.w	r4, #0
 800aa3e:	e035      	b.n	800aaac <UART_SetConfig+0xecc>
 800aa40:	f04f 0380 	mov.w	r3, #128	; 0x80
 800aa44:	f04f 0400 	mov.w	r4, #0
 800aa48:	e030      	b.n	800aaac <UART_SetConfig+0xecc>
 800aa4a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aa4e:	f04f 0400 	mov.w	r4, #0
 800aa52:	e02b      	b.n	800aaac <UART_SetConfig+0xecc>
 800aa54:	f04f 0320 	mov.w	r3, #32
 800aa58:	f04f 0400 	mov.w	r4, #0
 800aa5c:	e026      	b.n	800aaac <UART_SetConfig+0xecc>
 800aa5e:	f04f 0310 	mov.w	r3, #16
 800aa62:	f04f 0400 	mov.w	r4, #0
 800aa66:	e021      	b.n	800aaac <UART_SetConfig+0xecc>
 800aa68:	f04f 030c 	mov.w	r3, #12
 800aa6c:	f04f 0400 	mov.w	r4, #0
 800aa70:	e01c      	b.n	800aaac <UART_SetConfig+0xecc>
 800aa72:	f04f 030a 	mov.w	r3, #10
 800aa76:	f04f 0400 	mov.w	r4, #0
 800aa7a:	e017      	b.n	800aaac <UART_SetConfig+0xecc>
 800aa7c:	f04f 0308 	mov.w	r3, #8
 800aa80:	f04f 0400 	mov.w	r4, #0
 800aa84:	e012      	b.n	800aaac <UART_SetConfig+0xecc>
 800aa86:	f04f 0306 	mov.w	r3, #6
 800aa8a:	f04f 0400 	mov.w	r4, #0
 800aa8e:	e00d      	b.n	800aaac <UART_SetConfig+0xecc>
 800aa90:	f04f 0304 	mov.w	r3, #4
 800aa94:	f04f 0400 	mov.w	r4, #0
 800aa98:	e008      	b.n	800aaac <UART_SetConfig+0xecc>
 800aa9a:	f04f 0302 	mov.w	r3, #2
 800aa9e:	f04f 0400 	mov.w	r4, #0
 800aaa2:	e003      	b.n	800aaac <UART_SetConfig+0xecc>
 800aaa4:	f04f 0301 	mov.w	r3, #1
 800aaa8:	f04f 0400 	mov.w	r4, #0
 800aaac:	461a      	mov	r2, r3
 800aaae:	4623      	mov	r3, r4
 800aab0:	f7f5 fc12 	bl	80002d8 <__aeabi_uldivmod>
 800aab4:	4603      	mov	r3, r0
 800aab6:	460c      	mov	r4, r1
 800aab8:	4619      	mov	r1, r3
 800aaba:	4622      	mov	r2, r4
 800aabc:	f04f 0300 	mov.w	r3, #0
 800aac0:	f04f 0400 	mov.w	r4, #0
 800aac4:	0214      	lsls	r4, r2, #8
 800aac6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800aaca:	020b      	lsls	r3, r1, #8
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	6852      	ldr	r2, [r2, #4]
 800aad0:	0852      	lsrs	r2, r2, #1
 800aad2:	4611      	mov	r1, r2
 800aad4:	f04f 0200 	mov.w	r2, #0
 800aad8:	eb13 0b01 	adds.w	fp, r3, r1
 800aadc:	eb44 0c02 	adc.w	ip, r4, r2
 800aae0:	4658      	mov	r0, fp
 800aae2:	4661      	mov	r1, ip
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	f04f 0400 	mov.w	r4, #0
 800aaec:	461a      	mov	r2, r3
 800aaee:	4623      	mov	r3, r4
 800aaf0:	f7f5 fbf2 	bl	80002d8 <__aeabi_uldivmod>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	460c      	mov	r4, r1
 800aaf8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aafa:	e247      	b.n	800af8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aafc:	4b96      	ldr	r3, [pc, #600]	; (800ad58 <UART_SetConfig+0x1178>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 0320 	and.w	r3, r3, #32
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 80a3 	beq.w	800ac50 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab0a:	4b93      	ldr	r3, [pc, #588]	; (800ad58 <UART_SetConfig+0x1178>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	08db      	lsrs	r3, r3, #3
 800ab10:	f003 0303 	and.w	r3, r3, #3
 800ab14:	4a91      	ldr	r2, [pc, #580]	; (800ad5c <UART_SetConfig+0x117c>)
 800ab16:	fa22 f303 	lsr.w	r3, r2, r3
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f04f 0100 	mov.w	r1, #0
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d067      	beq.n	800abf8 <UART_SetConfig+0x1018>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d05e      	beq.n	800abee <UART_SetConfig+0x100e>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab34:	2b02      	cmp	r3, #2
 800ab36:	d055      	beq.n	800abe4 <UART_SetConfig+0x1004>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3c:	2b03      	cmp	r3, #3
 800ab3e:	d04c      	beq.n	800abda <UART_SetConfig+0xffa>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab44:	2b04      	cmp	r3, #4
 800ab46:	d043      	beq.n	800abd0 <UART_SetConfig+0xff0>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4c:	2b05      	cmp	r3, #5
 800ab4e:	d03a      	beq.n	800abc6 <UART_SetConfig+0xfe6>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab54:	2b06      	cmp	r3, #6
 800ab56:	d031      	beq.n	800abbc <UART_SetConfig+0xfdc>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5c:	2b07      	cmp	r3, #7
 800ab5e:	d028      	beq.n	800abb2 <UART_SetConfig+0xfd2>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab64:	2b08      	cmp	r3, #8
 800ab66:	d01f      	beq.n	800aba8 <UART_SetConfig+0xfc8>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6c:	2b09      	cmp	r3, #9
 800ab6e:	d016      	beq.n	800ab9e <UART_SetConfig+0xfbe>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab74:	2b0a      	cmp	r3, #10
 800ab76:	d00d      	beq.n	800ab94 <UART_SetConfig+0xfb4>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7c:	2b0b      	cmp	r3, #11
 800ab7e:	d104      	bne.n	800ab8a <UART_SetConfig+0xfaa>
 800ab80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab84:	f04f 0400 	mov.w	r4, #0
 800ab88:	e03a      	b.n	800ac00 <UART_SetConfig+0x1020>
 800ab8a:	f04f 0301 	mov.w	r3, #1
 800ab8e:	f04f 0400 	mov.w	r4, #0
 800ab92:	e035      	b.n	800ac00 <UART_SetConfig+0x1020>
 800ab94:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ab98:	f04f 0400 	mov.w	r4, #0
 800ab9c:	e030      	b.n	800ac00 <UART_SetConfig+0x1020>
 800ab9e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aba2:	f04f 0400 	mov.w	r4, #0
 800aba6:	e02b      	b.n	800ac00 <UART_SetConfig+0x1020>
 800aba8:	f04f 0320 	mov.w	r3, #32
 800abac:	f04f 0400 	mov.w	r4, #0
 800abb0:	e026      	b.n	800ac00 <UART_SetConfig+0x1020>
 800abb2:	f04f 0310 	mov.w	r3, #16
 800abb6:	f04f 0400 	mov.w	r4, #0
 800abba:	e021      	b.n	800ac00 <UART_SetConfig+0x1020>
 800abbc:	f04f 030c 	mov.w	r3, #12
 800abc0:	f04f 0400 	mov.w	r4, #0
 800abc4:	e01c      	b.n	800ac00 <UART_SetConfig+0x1020>
 800abc6:	f04f 030a 	mov.w	r3, #10
 800abca:	f04f 0400 	mov.w	r4, #0
 800abce:	e017      	b.n	800ac00 <UART_SetConfig+0x1020>
 800abd0:	f04f 0308 	mov.w	r3, #8
 800abd4:	f04f 0400 	mov.w	r4, #0
 800abd8:	e012      	b.n	800ac00 <UART_SetConfig+0x1020>
 800abda:	f04f 0306 	mov.w	r3, #6
 800abde:	f04f 0400 	mov.w	r4, #0
 800abe2:	e00d      	b.n	800ac00 <UART_SetConfig+0x1020>
 800abe4:	f04f 0304 	mov.w	r3, #4
 800abe8:	f04f 0400 	mov.w	r4, #0
 800abec:	e008      	b.n	800ac00 <UART_SetConfig+0x1020>
 800abee:	f04f 0302 	mov.w	r3, #2
 800abf2:	f04f 0400 	mov.w	r4, #0
 800abf6:	e003      	b.n	800ac00 <UART_SetConfig+0x1020>
 800abf8:	f04f 0301 	mov.w	r3, #1
 800abfc:	f04f 0400 	mov.w	r4, #0
 800ac00:	461a      	mov	r2, r3
 800ac02:	4623      	mov	r3, r4
 800ac04:	f7f5 fb68 	bl	80002d8 <__aeabi_uldivmod>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	460c      	mov	r4, r1
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	4622      	mov	r2, r4
 800ac10:	f04f 0300 	mov.w	r3, #0
 800ac14:	f04f 0400 	mov.w	r4, #0
 800ac18:	0214      	lsls	r4, r2, #8
 800ac1a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ac1e:	020b      	lsls	r3, r1, #8
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	6852      	ldr	r2, [r2, #4]
 800ac24:	0852      	lsrs	r2, r2, #1
 800ac26:	4611      	mov	r1, r2
 800ac28:	f04f 0200 	mov.w	r2, #0
 800ac2c:	eb13 0b01 	adds.w	fp, r3, r1
 800ac30:	eb44 0c02 	adc.w	ip, r4, r2
 800ac34:	4658      	mov	r0, fp
 800ac36:	4661      	mov	r1, ip
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	f04f 0400 	mov.w	r4, #0
 800ac40:	461a      	mov	r2, r3
 800ac42:	4623      	mov	r3, r4
 800ac44:	f7f5 fb48 	bl	80002d8 <__aeabi_uldivmod>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800ac4e:	e19d      	b.n	800af8c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d05b      	beq.n	800ad10 <UART_SetConfig+0x1130>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d053      	beq.n	800ad08 <UART_SetConfig+0x1128>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac64:	2b02      	cmp	r3, #2
 800ac66:	d04b      	beq.n	800ad00 <UART_SetConfig+0x1120>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6c:	2b03      	cmp	r3, #3
 800ac6e:	d043      	beq.n	800acf8 <UART_SetConfig+0x1118>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac74:	2b04      	cmp	r3, #4
 800ac76:	d03b      	beq.n	800acf0 <UART_SetConfig+0x1110>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7c:	2b05      	cmp	r3, #5
 800ac7e:	d033      	beq.n	800ace8 <UART_SetConfig+0x1108>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac84:	2b06      	cmp	r3, #6
 800ac86:	d02b      	beq.n	800ace0 <UART_SetConfig+0x1100>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8c:	2b07      	cmp	r3, #7
 800ac8e:	d023      	beq.n	800acd8 <UART_SetConfig+0x10f8>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac94:	2b08      	cmp	r3, #8
 800ac96:	d01b      	beq.n	800acd0 <UART_SetConfig+0x10f0>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9c:	2b09      	cmp	r3, #9
 800ac9e:	d013      	beq.n	800acc8 <UART_SetConfig+0x10e8>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca4:	2b0a      	cmp	r3, #10
 800aca6:	d00b      	beq.n	800acc0 <UART_SetConfig+0x10e0>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acac:	2b0b      	cmp	r3, #11
 800acae:	d103      	bne.n	800acb8 <UART_SetConfig+0x10d8>
 800acb0:	4b2a      	ldr	r3, [pc, #168]	; (800ad5c <UART_SetConfig+0x117c>)
 800acb2:	f04f 0400 	mov.w	r4, #0
 800acb6:	e02e      	b.n	800ad16 <UART_SetConfig+0x1136>
 800acb8:	4b29      	ldr	r3, [pc, #164]	; (800ad60 <UART_SetConfig+0x1180>)
 800acba:	f04f 0403 	mov.w	r4, #3
 800acbe:	e02a      	b.n	800ad16 <UART_SetConfig+0x1136>
 800acc0:	4b28      	ldr	r3, [pc, #160]	; (800ad64 <UART_SetConfig+0x1184>)
 800acc2:	f04f 0400 	mov.w	r4, #0
 800acc6:	e026      	b.n	800ad16 <UART_SetConfig+0x1136>
 800acc8:	4b27      	ldr	r3, [pc, #156]	; (800ad68 <UART_SetConfig+0x1188>)
 800acca:	f04f 0400 	mov.w	r4, #0
 800acce:	e022      	b.n	800ad16 <UART_SetConfig+0x1136>
 800acd0:	4b26      	ldr	r3, [pc, #152]	; (800ad6c <UART_SetConfig+0x118c>)
 800acd2:	f04f 0400 	mov.w	r4, #0
 800acd6:	e01e      	b.n	800ad16 <UART_SetConfig+0x1136>
 800acd8:	4b25      	ldr	r3, [pc, #148]	; (800ad70 <UART_SetConfig+0x1190>)
 800acda:	f04f 0400 	mov.w	r4, #0
 800acde:	e01a      	b.n	800ad16 <UART_SetConfig+0x1136>
 800ace0:	a419      	add	r4, pc, #100	; (adr r4, 800ad48 <UART_SetConfig+0x1168>)
 800ace2:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ace6:	e016      	b.n	800ad16 <UART_SetConfig+0x1136>
 800ace8:	4b22      	ldr	r3, [pc, #136]	; (800ad74 <UART_SetConfig+0x1194>)
 800acea:	f04f 0400 	mov.w	r4, #0
 800acee:	e012      	b.n	800ad16 <UART_SetConfig+0x1136>
 800acf0:	4b21      	ldr	r3, [pc, #132]	; (800ad78 <UART_SetConfig+0x1198>)
 800acf2:	f04f 0400 	mov.w	r4, #0
 800acf6:	e00e      	b.n	800ad16 <UART_SetConfig+0x1136>
 800acf8:	a415      	add	r4, pc, #84	; (adr r4, 800ad50 <UART_SetConfig+0x1170>)
 800acfa:	e9d4 3400 	ldrd	r3, r4, [r4]
 800acfe:	e00a      	b.n	800ad16 <UART_SetConfig+0x1136>
 800ad00:	4b1e      	ldr	r3, [pc, #120]	; (800ad7c <UART_SetConfig+0x119c>)
 800ad02:	f04f 0400 	mov.w	r4, #0
 800ad06:	e006      	b.n	800ad16 <UART_SetConfig+0x1136>
 800ad08:	4b1d      	ldr	r3, [pc, #116]	; (800ad80 <UART_SetConfig+0x11a0>)
 800ad0a:	f04f 0401 	mov.w	r4, #1
 800ad0e:	e002      	b.n	800ad16 <UART_SetConfig+0x1136>
 800ad10:	4b13      	ldr	r3, [pc, #76]	; (800ad60 <UART_SetConfig+0x1180>)
 800ad12:	f04f 0403 	mov.w	r4, #3
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	6852      	ldr	r2, [r2, #4]
 800ad1a:	0852      	lsrs	r2, r2, #1
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	f04f 0200 	mov.w	r2, #0
 800ad22:	eb13 0b01 	adds.w	fp, r3, r1
 800ad26:	eb44 0c02 	adc.w	ip, r4, r2
 800ad2a:	4658      	mov	r0, fp
 800ad2c:	4661      	mov	r1, ip
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	f04f 0400 	mov.w	r4, #0
 800ad36:	461a      	mov	r2, r3
 800ad38:	4623      	mov	r3, r4
 800ad3a:	f7f5 facd 	bl	80002d8 <__aeabi_uldivmod>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	460c      	mov	r4, r1
 800ad42:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ad44:	e122      	b.n	800af8c <UART_SetConfig+0x13ac>
 800ad46:	bf00      	nop
 800ad48:	51615500 	.word	0x51615500
 800ad4c:	00000000 	.word	0x00000000
 800ad50:	a2c2aa00 	.word	0xa2c2aa00
 800ad54:	00000000 	.word	0x00000000
 800ad58:	58024400 	.word	0x58024400
 800ad5c:	03d09000 	.word	0x03d09000
 800ad60:	d0900000 	.word	0xd0900000
 800ad64:	07a12000 	.word	0x07a12000
 800ad68:	0f424000 	.word	0x0f424000
 800ad6c:	1e848000 	.word	0x1e848000
 800ad70:	3d090000 	.word	0x3d090000
 800ad74:	61a80000 	.word	0x61a80000
 800ad78:	7a120000 	.word	0x7a120000
 800ad7c:	f4240000 	.word	0xf4240000
 800ad80:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d05b      	beq.n	800ae44 <UART_SetConfig+0x1264>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d053      	beq.n	800ae3c <UART_SetConfig+0x125c>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad98:	2b02      	cmp	r3, #2
 800ad9a:	d04b      	beq.n	800ae34 <UART_SetConfig+0x1254>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada0:	2b03      	cmp	r3, #3
 800ada2:	d043      	beq.n	800ae2c <UART_SetConfig+0x124c>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada8:	2b04      	cmp	r3, #4
 800adaa:	d03b      	beq.n	800ae24 <UART_SetConfig+0x1244>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb0:	2b05      	cmp	r3, #5
 800adb2:	d033      	beq.n	800ae1c <UART_SetConfig+0x123c>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb8:	2b06      	cmp	r3, #6
 800adba:	d02b      	beq.n	800ae14 <UART_SetConfig+0x1234>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc0:	2b07      	cmp	r3, #7
 800adc2:	d023      	beq.n	800ae0c <UART_SetConfig+0x122c>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc8:	2b08      	cmp	r3, #8
 800adca:	d01b      	beq.n	800ae04 <UART_SetConfig+0x1224>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	2b09      	cmp	r3, #9
 800add2:	d013      	beq.n	800adfc <UART_SetConfig+0x121c>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	2b0a      	cmp	r3, #10
 800adda:	d00b      	beq.n	800adf4 <UART_SetConfig+0x1214>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade0:	2b0b      	cmp	r3, #11
 800ade2:	d103      	bne.n	800adec <UART_SetConfig+0x120c>
 800ade4:	4bc0      	ldr	r3, [pc, #768]	; (800b0e8 <UART_SetConfig+0x1508>)
 800ade6:	f04f 0400 	mov.w	r4, #0
 800adea:	e02e      	b.n	800ae4a <UART_SetConfig+0x126a>
 800adec:	4bbf      	ldr	r3, [pc, #764]	; (800b0ec <UART_SetConfig+0x150c>)
 800adee:	f04f 0400 	mov.w	r4, #0
 800adf2:	e02a      	b.n	800ae4a <UART_SetConfig+0x126a>
 800adf4:	4bbe      	ldr	r3, [pc, #760]	; (800b0f0 <UART_SetConfig+0x1510>)
 800adf6:	f04f 0400 	mov.w	r4, #0
 800adfa:	e026      	b.n	800ae4a <UART_SetConfig+0x126a>
 800adfc:	4bbd      	ldr	r3, [pc, #756]	; (800b0f4 <UART_SetConfig+0x1514>)
 800adfe:	f04f 0400 	mov.w	r4, #0
 800ae02:	e022      	b.n	800ae4a <UART_SetConfig+0x126a>
 800ae04:	4bbc      	ldr	r3, [pc, #752]	; (800b0f8 <UART_SetConfig+0x1518>)
 800ae06:	f04f 0400 	mov.w	r4, #0
 800ae0a:	e01e      	b.n	800ae4a <UART_SetConfig+0x126a>
 800ae0c:	4bbb      	ldr	r3, [pc, #748]	; (800b0fc <UART_SetConfig+0x151c>)
 800ae0e:	f04f 0400 	mov.w	r4, #0
 800ae12:	e01a      	b.n	800ae4a <UART_SetConfig+0x126a>
 800ae14:	a4b0      	add	r4, pc, #704	; (adr r4, 800b0d8 <UART_SetConfig+0x14f8>)
 800ae16:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ae1a:	e016      	b.n	800ae4a <UART_SetConfig+0x126a>
 800ae1c:	4bb8      	ldr	r3, [pc, #736]	; (800b100 <UART_SetConfig+0x1520>)
 800ae1e:	f04f 0400 	mov.w	r4, #0
 800ae22:	e012      	b.n	800ae4a <UART_SetConfig+0x126a>
 800ae24:	4bb7      	ldr	r3, [pc, #732]	; (800b104 <UART_SetConfig+0x1524>)
 800ae26:	f04f 0400 	mov.w	r4, #0
 800ae2a:	e00e      	b.n	800ae4a <UART_SetConfig+0x126a>
 800ae2c:	a4ac      	add	r4, pc, #688	; (adr r4, 800b0e0 <UART_SetConfig+0x1500>)
 800ae2e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ae32:	e00a      	b.n	800ae4a <UART_SetConfig+0x126a>
 800ae34:	4bb4      	ldr	r3, [pc, #720]	; (800b108 <UART_SetConfig+0x1528>)
 800ae36:	f04f 0400 	mov.w	r4, #0
 800ae3a:	e006      	b.n	800ae4a <UART_SetConfig+0x126a>
 800ae3c:	4bb3      	ldr	r3, [pc, #716]	; (800b10c <UART_SetConfig+0x152c>)
 800ae3e:	f04f 0400 	mov.w	r4, #0
 800ae42:	e002      	b.n	800ae4a <UART_SetConfig+0x126a>
 800ae44:	4ba9      	ldr	r3, [pc, #676]	; (800b0ec <UART_SetConfig+0x150c>)
 800ae46:	f04f 0400 	mov.w	r4, #0
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	6852      	ldr	r2, [r2, #4]
 800ae4e:	0852      	lsrs	r2, r2, #1
 800ae50:	4611      	mov	r1, r2
 800ae52:	f04f 0200 	mov.w	r2, #0
 800ae56:	eb13 0b01 	adds.w	fp, r3, r1
 800ae5a:	eb44 0c02 	adc.w	ip, r4, r2
 800ae5e:	4658      	mov	r0, fp
 800ae60:	4661      	mov	r1, ip
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	f04f 0400 	mov.w	r4, #0
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	4623      	mov	r3, r4
 800ae6e:	f7f5 fa33 	bl	80002d8 <__aeabi_uldivmod>
 800ae72:	4603      	mov	r3, r0
 800ae74:	460c      	mov	r4, r1
 800ae76:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ae78:	e088      	b.n	800af8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d064      	beq.n	800af4c <UART_SetConfig+0x136c>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d05b      	beq.n	800af42 <UART_SetConfig+0x1362>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d052      	beq.n	800af38 <UART_SetConfig+0x1358>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae96:	2b03      	cmp	r3, #3
 800ae98:	d04a      	beq.n	800af30 <UART_SetConfig+0x1350>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9e:	2b04      	cmp	r3, #4
 800aea0:	d041      	beq.n	800af26 <UART_SetConfig+0x1346>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea6:	2b05      	cmp	r3, #5
 800aea8:	d039      	beq.n	800af1e <UART_SetConfig+0x133e>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeae:	2b06      	cmp	r3, #6
 800aeb0:	d031      	beq.n	800af16 <UART_SetConfig+0x1336>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb6:	2b07      	cmp	r3, #7
 800aeb8:	d028      	beq.n	800af0c <UART_SetConfig+0x132c>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aebe:	2b08      	cmp	r3, #8
 800aec0:	d01f      	beq.n	800af02 <UART_SetConfig+0x1322>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec6:	2b09      	cmp	r3, #9
 800aec8:	d016      	beq.n	800aef8 <UART_SetConfig+0x1318>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aece:	2b0a      	cmp	r3, #10
 800aed0:	d00d      	beq.n	800aeee <UART_SetConfig+0x130e>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed6:	2b0b      	cmp	r3, #11
 800aed8:	d104      	bne.n	800aee4 <UART_SetConfig+0x1304>
 800aeda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aede:	f04f 0400 	mov.w	r4, #0
 800aee2:	e037      	b.n	800af54 <UART_SetConfig+0x1374>
 800aee4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aee8:	f04f 0400 	mov.w	r4, #0
 800aeec:	e032      	b.n	800af54 <UART_SetConfig+0x1374>
 800aeee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800aef2:	f04f 0400 	mov.w	r4, #0
 800aef6:	e02d      	b.n	800af54 <UART_SetConfig+0x1374>
 800aef8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800aefc:	f04f 0400 	mov.w	r4, #0
 800af00:	e028      	b.n	800af54 <UART_SetConfig+0x1374>
 800af02:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800af06:	f04f 0400 	mov.w	r4, #0
 800af0a:	e023      	b.n	800af54 <UART_SetConfig+0x1374>
 800af0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800af10:	f04f 0400 	mov.w	r4, #0
 800af14:	e01e      	b.n	800af54 <UART_SetConfig+0x1374>
 800af16:	4b7e      	ldr	r3, [pc, #504]	; (800b110 <UART_SetConfig+0x1530>)
 800af18:	f04f 0400 	mov.w	r4, #0
 800af1c:	e01a      	b.n	800af54 <UART_SetConfig+0x1374>
 800af1e:	4b7d      	ldr	r3, [pc, #500]	; (800b114 <UART_SetConfig+0x1534>)
 800af20:	f04f 0400 	mov.w	r4, #0
 800af24:	e016      	b.n	800af54 <UART_SetConfig+0x1374>
 800af26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800af2a:	f04f 0400 	mov.w	r4, #0
 800af2e:	e011      	b.n	800af54 <UART_SetConfig+0x1374>
 800af30:	4b79      	ldr	r3, [pc, #484]	; (800b118 <UART_SetConfig+0x1538>)
 800af32:	f04f 0400 	mov.w	r4, #0
 800af36:	e00d      	b.n	800af54 <UART_SetConfig+0x1374>
 800af38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800af3c:	f04f 0400 	mov.w	r4, #0
 800af40:	e008      	b.n	800af54 <UART_SetConfig+0x1374>
 800af42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800af46:	f04f 0400 	mov.w	r4, #0
 800af4a:	e003      	b.n	800af54 <UART_SetConfig+0x1374>
 800af4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800af50:	f04f 0400 	mov.w	r4, #0
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	6852      	ldr	r2, [r2, #4]
 800af58:	0852      	lsrs	r2, r2, #1
 800af5a:	4611      	mov	r1, r2
 800af5c:	f04f 0200 	mov.w	r2, #0
 800af60:	eb13 0b01 	adds.w	fp, r3, r1
 800af64:	eb44 0c02 	adc.w	ip, r4, r2
 800af68:	4658      	mov	r0, fp
 800af6a:	4661      	mov	r1, ip
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	f04f 0400 	mov.w	r4, #0
 800af74:	461a      	mov	r2, r3
 800af76:	4623      	mov	r3, r4
 800af78:	f7f5 f9ae 	bl	80002d8 <__aeabi_uldivmod>
 800af7c:	4603      	mov	r3, r0
 800af7e:	460c      	mov	r4, r1
 800af80:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800af82:	e003      	b.n	800af8c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800af84:	2301      	movs	r3, #1
 800af86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800af8a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800af8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af92:	d309      	bcc.n	800afa8 <UART_SetConfig+0x13c8>
 800af94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af9a:	d205      	bcs.n	800afa8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afa2:	60da      	str	r2, [r3, #12]
 800afa4:	f000 bf85 	b.w	800beb2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afae:	f000 bf80 	b.w	800beb2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	69db      	ldr	r3, [r3, #28]
 800afb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afba:	f040 83da 	bne.w	800b772 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800afbe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800afc2:	2b40      	cmp	r3, #64	; 0x40
 800afc4:	f200 83b3 	bhi.w	800b72e <UART_SetConfig+0x1b4e>
 800afc8:	a201      	add	r2, pc, #4	; (adr r2, 800afd0 <UART_SetConfig+0x13f0>)
 800afca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afce:	bf00      	nop
 800afd0:	0800b11d 	.word	0x0800b11d
 800afd4:	0800b1d5 	.word	0x0800b1d5
 800afd8:	0800b72f 	.word	0x0800b72f
 800afdc:	0800b72f 	.word	0x0800b72f
 800afe0:	0800b28d 	.word	0x0800b28d
 800afe4:	0800b72f 	.word	0x0800b72f
 800afe8:	0800b72f 	.word	0x0800b72f
 800afec:	0800b72f 	.word	0x0800b72f
 800aff0:	0800b349 	.word	0x0800b349
 800aff4:	0800b72f 	.word	0x0800b72f
 800aff8:	0800b72f 	.word	0x0800b72f
 800affc:	0800b72f 	.word	0x0800b72f
 800b000:	0800b72f 	.word	0x0800b72f
 800b004:	0800b72f 	.word	0x0800b72f
 800b008:	0800b72f 	.word	0x0800b72f
 800b00c:	0800b72f 	.word	0x0800b72f
 800b010:	0800b405 	.word	0x0800b405
 800b014:	0800b72f 	.word	0x0800b72f
 800b018:	0800b72f 	.word	0x0800b72f
 800b01c:	0800b72f 	.word	0x0800b72f
 800b020:	0800b72f 	.word	0x0800b72f
 800b024:	0800b72f 	.word	0x0800b72f
 800b028:	0800b72f 	.word	0x0800b72f
 800b02c:	0800b72f 	.word	0x0800b72f
 800b030:	0800b72f 	.word	0x0800b72f
 800b034:	0800b72f 	.word	0x0800b72f
 800b038:	0800b72f 	.word	0x0800b72f
 800b03c:	0800b72f 	.word	0x0800b72f
 800b040:	0800b72f 	.word	0x0800b72f
 800b044:	0800b72f 	.word	0x0800b72f
 800b048:	0800b72f 	.word	0x0800b72f
 800b04c:	0800b72f 	.word	0x0800b72f
 800b050:	0800b577 	.word	0x0800b577
 800b054:	0800b72f 	.word	0x0800b72f
 800b058:	0800b72f 	.word	0x0800b72f
 800b05c:	0800b72f 	.word	0x0800b72f
 800b060:	0800b72f 	.word	0x0800b72f
 800b064:	0800b72f 	.word	0x0800b72f
 800b068:	0800b72f 	.word	0x0800b72f
 800b06c:	0800b72f 	.word	0x0800b72f
 800b070:	0800b72f 	.word	0x0800b72f
 800b074:	0800b72f 	.word	0x0800b72f
 800b078:	0800b72f 	.word	0x0800b72f
 800b07c:	0800b72f 	.word	0x0800b72f
 800b080:	0800b72f 	.word	0x0800b72f
 800b084:	0800b72f 	.word	0x0800b72f
 800b088:	0800b72f 	.word	0x0800b72f
 800b08c:	0800b72f 	.word	0x0800b72f
 800b090:	0800b72f 	.word	0x0800b72f
 800b094:	0800b72f 	.word	0x0800b72f
 800b098:	0800b72f 	.word	0x0800b72f
 800b09c:	0800b72f 	.word	0x0800b72f
 800b0a0:	0800b72f 	.word	0x0800b72f
 800b0a4:	0800b72f 	.word	0x0800b72f
 800b0a8:	0800b72f 	.word	0x0800b72f
 800b0ac:	0800b72f 	.word	0x0800b72f
 800b0b0:	0800b72f 	.word	0x0800b72f
 800b0b4:	0800b72f 	.word	0x0800b72f
 800b0b8:	0800b72f 	.word	0x0800b72f
 800b0bc:	0800b72f 	.word	0x0800b72f
 800b0c0:	0800b72f 	.word	0x0800b72f
 800b0c4:	0800b72f 	.word	0x0800b72f
 800b0c8:	0800b72f 	.word	0x0800b72f
 800b0cc:	0800b72f 	.word	0x0800b72f
 800b0d0:	0800b66d 	.word	0x0800b66d
 800b0d4:	f3af 8000 	nop.w
 800b0d8:	05161500 	.word	0x05161500
 800b0dc:	00000000 	.word	0x00000000
 800b0e0:	0a2c2a00 	.word	0x0a2c2a00
 800b0e4:	00000000 	.word	0x00000000
 800b0e8:	003d0900 	.word	0x003d0900
 800b0ec:	3d090000 	.word	0x3d090000
 800b0f0:	007a1200 	.word	0x007a1200
 800b0f4:	00f42400 	.word	0x00f42400
 800b0f8:	01e84800 	.word	0x01e84800
 800b0fc:	03d09000 	.word	0x03d09000
 800b100:	061a8000 	.word	0x061a8000
 800b104:	07a12000 	.word	0x07a12000
 800b108:	0f424000 	.word	0x0f424000
 800b10c:	1e848000 	.word	0x1e848000
 800b110:	000aaa00 	.word	0x000aaa00
 800b114:	000ccc00 	.word	0x000ccc00
 800b118:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b11c:	f7fb fe6a 	bl	8006df4 <HAL_RCC_GetPCLK1Freq>
 800b120:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b126:	2b00      	cmp	r3, #0
 800b128:	d044      	beq.n	800b1b4 <UART_SetConfig+0x15d4>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d03e      	beq.n	800b1b0 <UART_SetConfig+0x15d0>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b136:	2b02      	cmp	r3, #2
 800b138:	d038      	beq.n	800b1ac <UART_SetConfig+0x15cc>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13e:	2b03      	cmp	r3, #3
 800b140:	d032      	beq.n	800b1a8 <UART_SetConfig+0x15c8>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b146:	2b04      	cmp	r3, #4
 800b148:	d02c      	beq.n	800b1a4 <UART_SetConfig+0x15c4>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14e:	2b05      	cmp	r3, #5
 800b150:	d026      	beq.n	800b1a0 <UART_SetConfig+0x15c0>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b156:	2b06      	cmp	r3, #6
 800b158:	d020      	beq.n	800b19c <UART_SetConfig+0x15bc>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15e:	2b07      	cmp	r3, #7
 800b160:	d01a      	beq.n	800b198 <UART_SetConfig+0x15b8>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b166:	2b08      	cmp	r3, #8
 800b168:	d014      	beq.n	800b194 <UART_SetConfig+0x15b4>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16e:	2b09      	cmp	r3, #9
 800b170:	d00e      	beq.n	800b190 <UART_SetConfig+0x15b0>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b176:	2b0a      	cmp	r3, #10
 800b178:	d008      	beq.n	800b18c <UART_SetConfig+0x15ac>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17e:	2b0b      	cmp	r3, #11
 800b180:	d102      	bne.n	800b188 <UART_SetConfig+0x15a8>
 800b182:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b186:	e016      	b.n	800b1b6 <UART_SetConfig+0x15d6>
 800b188:	2301      	movs	r3, #1
 800b18a:	e014      	b.n	800b1b6 <UART_SetConfig+0x15d6>
 800b18c:	2380      	movs	r3, #128	; 0x80
 800b18e:	e012      	b.n	800b1b6 <UART_SetConfig+0x15d6>
 800b190:	2340      	movs	r3, #64	; 0x40
 800b192:	e010      	b.n	800b1b6 <UART_SetConfig+0x15d6>
 800b194:	2320      	movs	r3, #32
 800b196:	e00e      	b.n	800b1b6 <UART_SetConfig+0x15d6>
 800b198:	2310      	movs	r3, #16
 800b19a:	e00c      	b.n	800b1b6 <UART_SetConfig+0x15d6>
 800b19c:	230c      	movs	r3, #12
 800b19e:	e00a      	b.n	800b1b6 <UART_SetConfig+0x15d6>
 800b1a0:	230a      	movs	r3, #10
 800b1a2:	e008      	b.n	800b1b6 <UART_SetConfig+0x15d6>
 800b1a4:	2308      	movs	r3, #8
 800b1a6:	e006      	b.n	800b1b6 <UART_SetConfig+0x15d6>
 800b1a8:	2306      	movs	r3, #6
 800b1aa:	e004      	b.n	800b1b6 <UART_SetConfig+0x15d6>
 800b1ac:	2304      	movs	r3, #4
 800b1ae:	e002      	b.n	800b1b6 <UART_SetConfig+0x15d6>
 800b1b0:	2302      	movs	r3, #2
 800b1b2:	e000      	b.n	800b1b6 <UART_SetConfig+0x15d6>
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1bc:	005a      	lsls	r2, r3, #1
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	085b      	lsrs	r3, r3, #1
 800b1c4:	441a      	add	r2, r3
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1d2:	e2b0      	b.n	800b736 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1d4:	f7fb fe24 	bl	8006e20 <HAL_RCC_GetPCLK2Freq>
 800b1d8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d044      	beq.n	800b26c <UART_SetConfig+0x168c>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d03e      	beq.n	800b268 <UART_SetConfig+0x1688>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d038      	beq.n	800b264 <UART_SetConfig+0x1684>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f6:	2b03      	cmp	r3, #3
 800b1f8:	d032      	beq.n	800b260 <UART_SetConfig+0x1680>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fe:	2b04      	cmp	r3, #4
 800b200:	d02c      	beq.n	800b25c <UART_SetConfig+0x167c>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b206:	2b05      	cmp	r3, #5
 800b208:	d026      	beq.n	800b258 <UART_SetConfig+0x1678>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20e:	2b06      	cmp	r3, #6
 800b210:	d020      	beq.n	800b254 <UART_SetConfig+0x1674>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b216:	2b07      	cmp	r3, #7
 800b218:	d01a      	beq.n	800b250 <UART_SetConfig+0x1670>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21e:	2b08      	cmp	r3, #8
 800b220:	d014      	beq.n	800b24c <UART_SetConfig+0x166c>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b226:	2b09      	cmp	r3, #9
 800b228:	d00e      	beq.n	800b248 <UART_SetConfig+0x1668>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22e:	2b0a      	cmp	r3, #10
 800b230:	d008      	beq.n	800b244 <UART_SetConfig+0x1664>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b236:	2b0b      	cmp	r3, #11
 800b238:	d102      	bne.n	800b240 <UART_SetConfig+0x1660>
 800b23a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b23e:	e016      	b.n	800b26e <UART_SetConfig+0x168e>
 800b240:	2301      	movs	r3, #1
 800b242:	e014      	b.n	800b26e <UART_SetConfig+0x168e>
 800b244:	2380      	movs	r3, #128	; 0x80
 800b246:	e012      	b.n	800b26e <UART_SetConfig+0x168e>
 800b248:	2340      	movs	r3, #64	; 0x40
 800b24a:	e010      	b.n	800b26e <UART_SetConfig+0x168e>
 800b24c:	2320      	movs	r3, #32
 800b24e:	e00e      	b.n	800b26e <UART_SetConfig+0x168e>
 800b250:	2310      	movs	r3, #16
 800b252:	e00c      	b.n	800b26e <UART_SetConfig+0x168e>
 800b254:	230c      	movs	r3, #12
 800b256:	e00a      	b.n	800b26e <UART_SetConfig+0x168e>
 800b258:	230a      	movs	r3, #10
 800b25a:	e008      	b.n	800b26e <UART_SetConfig+0x168e>
 800b25c:	2308      	movs	r3, #8
 800b25e:	e006      	b.n	800b26e <UART_SetConfig+0x168e>
 800b260:	2306      	movs	r3, #6
 800b262:	e004      	b.n	800b26e <UART_SetConfig+0x168e>
 800b264:	2304      	movs	r3, #4
 800b266:	e002      	b.n	800b26e <UART_SetConfig+0x168e>
 800b268:	2302      	movs	r3, #2
 800b26a:	e000      	b.n	800b26e <UART_SetConfig+0x168e>
 800b26c:	2301      	movs	r3, #1
 800b26e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b270:	fbb2 f3f3 	udiv	r3, r2, r3
 800b274:	005a      	lsls	r2, r3, #1
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	085b      	lsrs	r3, r3, #1
 800b27c:	441a      	add	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	fbb2 f3f3 	udiv	r3, r2, r3
 800b286:	b29b      	uxth	r3, r3
 800b288:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b28a:	e254      	b.n	800b736 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b28c:	f107 0318 	add.w	r3, r7, #24
 800b290:	4618      	mov	r0, r3
 800b292:	f7fc ff47 	bl	8008124 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b296:	69fa      	ldr	r2, [r7, #28]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d044      	beq.n	800b32a <UART_SetConfig+0x174a>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d03e      	beq.n	800b326 <UART_SetConfig+0x1746>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	d038      	beq.n	800b322 <UART_SetConfig+0x1742>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b4:	2b03      	cmp	r3, #3
 800b2b6:	d032      	beq.n	800b31e <UART_SetConfig+0x173e>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2bc:	2b04      	cmp	r3, #4
 800b2be:	d02c      	beq.n	800b31a <UART_SetConfig+0x173a>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c4:	2b05      	cmp	r3, #5
 800b2c6:	d026      	beq.n	800b316 <UART_SetConfig+0x1736>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2cc:	2b06      	cmp	r3, #6
 800b2ce:	d020      	beq.n	800b312 <UART_SetConfig+0x1732>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d4:	2b07      	cmp	r3, #7
 800b2d6:	d01a      	beq.n	800b30e <UART_SetConfig+0x172e>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2dc:	2b08      	cmp	r3, #8
 800b2de:	d014      	beq.n	800b30a <UART_SetConfig+0x172a>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e4:	2b09      	cmp	r3, #9
 800b2e6:	d00e      	beq.n	800b306 <UART_SetConfig+0x1726>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ec:	2b0a      	cmp	r3, #10
 800b2ee:	d008      	beq.n	800b302 <UART_SetConfig+0x1722>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f4:	2b0b      	cmp	r3, #11
 800b2f6:	d102      	bne.n	800b2fe <UART_SetConfig+0x171e>
 800b2f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2fc:	e016      	b.n	800b32c <UART_SetConfig+0x174c>
 800b2fe:	2301      	movs	r3, #1
 800b300:	e014      	b.n	800b32c <UART_SetConfig+0x174c>
 800b302:	2380      	movs	r3, #128	; 0x80
 800b304:	e012      	b.n	800b32c <UART_SetConfig+0x174c>
 800b306:	2340      	movs	r3, #64	; 0x40
 800b308:	e010      	b.n	800b32c <UART_SetConfig+0x174c>
 800b30a:	2320      	movs	r3, #32
 800b30c:	e00e      	b.n	800b32c <UART_SetConfig+0x174c>
 800b30e:	2310      	movs	r3, #16
 800b310:	e00c      	b.n	800b32c <UART_SetConfig+0x174c>
 800b312:	230c      	movs	r3, #12
 800b314:	e00a      	b.n	800b32c <UART_SetConfig+0x174c>
 800b316:	230a      	movs	r3, #10
 800b318:	e008      	b.n	800b32c <UART_SetConfig+0x174c>
 800b31a:	2308      	movs	r3, #8
 800b31c:	e006      	b.n	800b32c <UART_SetConfig+0x174c>
 800b31e:	2306      	movs	r3, #6
 800b320:	e004      	b.n	800b32c <UART_SetConfig+0x174c>
 800b322:	2304      	movs	r3, #4
 800b324:	e002      	b.n	800b32c <UART_SetConfig+0x174c>
 800b326:	2302      	movs	r3, #2
 800b328:	e000      	b.n	800b32c <UART_SetConfig+0x174c>
 800b32a:	2301      	movs	r3, #1
 800b32c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b330:	005a      	lsls	r2, r3, #1
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	085b      	lsrs	r3, r3, #1
 800b338:	441a      	add	r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b342:	b29b      	uxth	r3, r3
 800b344:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b346:	e1f6      	b.n	800b736 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b348:	f107 030c 	add.w	r3, r7, #12
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7fd f835 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b352:	693a      	ldr	r2, [r7, #16]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d044      	beq.n	800b3e6 <UART_SetConfig+0x1806>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b360:	2b01      	cmp	r3, #1
 800b362:	d03e      	beq.n	800b3e2 <UART_SetConfig+0x1802>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b368:	2b02      	cmp	r3, #2
 800b36a:	d038      	beq.n	800b3de <UART_SetConfig+0x17fe>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b370:	2b03      	cmp	r3, #3
 800b372:	d032      	beq.n	800b3da <UART_SetConfig+0x17fa>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b378:	2b04      	cmp	r3, #4
 800b37a:	d02c      	beq.n	800b3d6 <UART_SetConfig+0x17f6>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b380:	2b05      	cmp	r3, #5
 800b382:	d026      	beq.n	800b3d2 <UART_SetConfig+0x17f2>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b388:	2b06      	cmp	r3, #6
 800b38a:	d020      	beq.n	800b3ce <UART_SetConfig+0x17ee>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b390:	2b07      	cmp	r3, #7
 800b392:	d01a      	beq.n	800b3ca <UART_SetConfig+0x17ea>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b398:	2b08      	cmp	r3, #8
 800b39a:	d014      	beq.n	800b3c6 <UART_SetConfig+0x17e6>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a0:	2b09      	cmp	r3, #9
 800b3a2:	d00e      	beq.n	800b3c2 <UART_SetConfig+0x17e2>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a8:	2b0a      	cmp	r3, #10
 800b3aa:	d008      	beq.n	800b3be <UART_SetConfig+0x17de>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b0:	2b0b      	cmp	r3, #11
 800b3b2:	d102      	bne.n	800b3ba <UART_SetConfig+0x17da>
 800b3b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3b8:	e016      	b.n	800b3e8 <UART_SetConfig+0x1808>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e014      	b.n	800b3e8 <UART_SetConfig+0x1808>
 800b3be:	2380      	movs	r3, #128	; 0x80
 800b3c0:	e012      	b.n	800b3e8 <UART_SetConfig+0x1808>
 800b3c2:	2340      	movs	r3, #64	; 0x40
 800b3c4:	e010      	b.n	800b3e8 <UART_SetConfig+0x1808>
 800b3c6:	2320      	movs	r3, #32
 800b3c8:	e00e      	b.n	800b3e8 <UART_SetConfig+0x1808>
 800b3ca:	2310      	movs	r3, #16
 800b3cc:	e00c      	b.n	800b3e8 <UART_SetConfig+0x1808>
 800b3ce:	230c      	movs	r3, #12
 800b3d0:	e00a      	b.n	800b3e8 <UART_SetConfig+0x1808>
 800b3d2:	230a      	movs	r3, #10
 800b3d4:	e008      	b.n	800b3e8 <UART_SetConfig+0x1808>
 800b3d6:	2308      	movs	r3, #8
 800b3d8:	e006      	b.n	800b3e8 <UART_SetConfig+0x1808>
 800b3da:	2306      	movs	r3, #6
 800b3dc:	e004      	b.n	800b3e8 <UART_SetConfig+0x1808>
 800b3de:	2304      	movs	r3, #4
 800b3e0:	e002      	b.n	800b3e8 <UART_SetConfig+0x1808>
 800b3e2:	2302      	movs	r3, #2
 800b3e4:	e000      	b.n	800b3e8 <UART_SetConfig+0x1808>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3ec:	005a      	lsls	r2, r3, #1
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	085b      	lsrs	r3, r3, #1
 800b3f4:	441a      	add	r2, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b402:	e198      	b.n	800b736 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b404:	4b87      	ldr	r3, [pc, #540]	; (800b624 <UART_SetConfig+0x1a44>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f003 0320 	and.w	r3, r3, #32
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d05e      	beq.n	800b4ce <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b410:	4b84      	ldr	r3, [pc, #528]	; (800b624 <UART_SetConfig+0x1a44>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	08db      	lsrs	r3, r3, #3
 800b416:	f003 0303 	and.w	r3, r3, #3
 800b41a:	4a83      	ldr	r2, [pc, #524]	; (800b628 <UART_SetConfig+0x1a48>)
 800b41c:	40da      	lsrs	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b422:	2b00      	cmp	r3, #0
 800b424:	d044      	beq.n	800b4b0 <UART_SetConfig+0x18d0>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d03e      	beq.n	800b4ac <UART_SetConfig+0x18cc>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b432:	2b02      	cmp	r3, #2
 800b434:	d038      	beq.n	800b4a8 <UART_SetConfig+0x18c8>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43a:	2b03      	cmp	r3, #3
 800b43c:	d032      	beq.n	800b4a4 <UART_SetConfig+0x18c4>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b442:	2b04      	cmp	r3, #4
 800b444:	d02c      	beq.n	800b4a0 <UART_SetConfig+0x18c0>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44a:	2b05      	cmp	r3, #5
 800b44c:	d026      	beq.n	800b49c <UART_SetConfig+0x18bc>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b452:	2b06      	cmp	r3, #6
 800b454:	d020      	beq.n	800b498 <UART_SetConfig+0x18b8>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45a:	2b07      	cmp	r3, #7
 800b45c:	d01a      	beq.n	800b494 <UART_SetConfig+0x18b4>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b462:	2b08      	cmp	r3, #8
 800b464:	d014      	beq.n	800b490 <UART_SetConfig+0x18b0>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46a:	2b09      	cmp	r3, #9
 800b46c:	d00e      	beq.n	800b48c <UART_SetConfig+0x18ac>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b472:	2b0a      	cmp	r3, #10
 800b474:	d008      	beq.n	800b488 <UART_SetConfig+0x18a8>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47a:	2b0b      	cmp	r3, #11
 800b47c:	d102      	bne.n	800b484 <UART_SetConfig+0x18a4>
 800b47e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b482:	e016      	b.n	800b4b2 <UART_SetConfig+0x18d2>
 800b484:	2301      	movs	r3, #1
 800b486:	e014      	b.n	800b4b2 <UART_SetConfig+0x18d2>
 800b488:	2380      	movs	r3, #128	; 0x80
 800b48a:	e012      	b.n	800b4b2 <UART_SetConfig+0x18d2>
 800b48c:	2340      	movs	r3, #64	; 0x40
 800b48e:	e010      	b.n	800b4b2 <UART_SetConfig+0x18d2>
 800b490:	2320      	movs	r3, #32
 800b492:	e00e      	b.n	800b4b2 <UART_SetConfig+0x18d2>
 800b494:	2310      	movs	r3, #16
 800b496:	e00c      	b.n	800b4b2 <UART_SetConfig+0x18d2>
 800b498:	230c      	movs	r3, #12
 800b49a:	e00a      	b.n	800b4b2 <UART_SetConfig+0x18d2>
 800b49c:	230a      	movs	r3, #10
 800b49e:	e008      	b.n	800b4b2 <UART_SetConfig+0x18d2>
 800b4a0:	2308      	movs	r3, #8
 800b4a2:	e006      	b.n	800b4b2 <UART_SetConfig+0x18d2>
 800b4a4:	2306      	movs	r3, #6
 800b4a6:	e004      	b.n	800b4b2 <UART_SetConfig+0x18d2>
 800b4a8:	2304      	movs	r3, #4
 800b4aa:	e002      	b.n	800b4b2 <UART_SetConfig+0x18d2>
 800b4ac:	2302      	movs	r3, #2
 800b4ae:	e000      	b.n	800b4b2 <UART_SetConfig+0x18d2>
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4b6:	005a      	lsls	r2, r3, #1
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	085b      	lsrs	r3, r3, #1
 800b4be:	441a      	add	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b4cc:	e133      	b.n	800b736 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d043      	beq.n	800b55e <UART_SetConfig+0x197e>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d03d      	beq.n	800b55a <UART_SetConfig+0x197a>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	d037      	beq.n	800b556 <UART_SetConfig+0x1976>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ea:	2b03      	cmp	r3, #3
 800b4ec:	d031      	beq.n	800b552 <UART_SetConfig+0x1972>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f2:	2b04      	cmp	r3, #4
 800b4f4:	d02b      	beq.n	800b54e <UART_SetConfig+0x196e>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fa:	2b05      	cmp	r3, #5
 800b4fc:	d025      	beq.n	800b54a <UART_SetConfig+0x196a>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b502:	2b06      	cmp	r3, #6
 800b504:	d01f      	beq.n	800b546 <UART_SetConfig+0x1966>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50a:	2b07      	cmp	r3, #7
 800b50c:	d019      	beq.n	800b542 <UART_SetConfig+0x1962>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b512:	2b08      	cmp	r3, #8
 800b514:	d013      	beq.n	800b53e <UART_SetConfig+0x195e>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51a:	2b09      	cmp	r3, #9
 800b51c:	d00d      	beq.n	800b53a <UART_SetConfig+0x195a>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b522:	2b0a      	cmp	r3, #10
 800b524:	d007      	beq.n	800b536 <UART_SetConfig+0x1956>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52a:	2b0b      	cmp	r3, #11
 800b52c:	d101      	bne.n	800b532 <UART_SetConfig+0x1952>
 800b52e:	4b3f      	ldr	r3, [pc, #252]	; (800b62c <UART_SetConfig+0x1a4c>)
 800b530:	e016      	b.n	800b560 <UART_SetConfig+0x1980>
 800b532:	4b3f      	ldr	r3, [pc, #252]	; (800b630 <UART_SetConfig+0x1a50>)
 800b534:	e014      	b.n	800b560 <UART_SetConfig+0x1980>
 800b536:	4b3f      	ldr	r3, [pc, #252]	; (800b634 <UART_SetConfig+0x1a54>)
 800b538:	e012      	b.n	800b560 <UART_SetConfig+0x1980>
 800b53a:	4b3f      	ldr	r3, [pc, #252]	; (800b638 <UART_SetConfig+0x1a58>)
 800b53c:	e010      	b.n	800b560 <UART_SetConfig+0x1980>
 800b53e:	4b3f      	ldr	r3, [pc, #252]	; (800b63c <UART_SetConfig+0x1a5c>)
 800b540:	e00e      	b.n	800b560 <UART_SetConfig+0x1980>
 800b542:	4b3f      	ldr	r3, [pc, #252]	; (800b640 <UART_SetConfig+0x1a60>)
 800b544:	e00c      	b.n	800b560 <UART_SetConfig+0x1980>
 800b546:	4b3f      	ldr	r3, [pc, #252]	; (800b644 <UART_SetConfig+0x1a64>)
 800b548:	e00a      	b.n	800b560 <UART_SetConfig+0x1980>
 800b54a:	4b3f      	ldr	r3, [pc, #252]	; (800b648 <UART_SetConfig+0x1a68>)
 800b54c:	e008      	b.n	800b560 <UART_SetConfig+0x1980>
 800b54e:	4b3f      	ldr	r3, [pc, #252]	; (800b64c <UART_SetConfig+0x1a6c>)
 800b550:	e006      	b.n	800b560 <UART_SetConfig+0x1980>
 800b552:	4b3f      	ldr	r3, [pc, #252]	; (800b650 <UART_SetConfig+0x1a70>)
 800b554:	e004      	b.n	800b560 <UART_SetConfig+0x1980>
 800b556:	4b3f      	ldr	r3, [pc, #252]	; (800b654 <UART_SetConfig+0x1a74>)
 800b558:	e002      	b.n	800b560 <UART_SetConfig+0x1980>
 800b55a:	4b33      	ldr	r3, [pc, #204]	; (800b628 <UART_SetConfig+0x1a48>)
 800b55c:	e000      	b.n	800b560 <UART_SetConfig+0x1980>
 800b55e:	4b34      	ldr	r3, [pc, #208]	; (800b630 <UART_SetConfig+0x1a50>)
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	6852      	ldr	r2, [r2, #4]
 800b564:	0852      	lsrs	r2, r2, #1
 800b566:	441a      	add	r2, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b570:	b29b      	uxth	r3, r3
 800b572:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b574:	e0df      	b.n	800b736 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d045      	beq.n	800b60a <UART_SetConfig+0x1a2a>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b582:	2b01      	cmp	r3, #1
 800b584:	d03f      	beq.n	800b606 <UART_SetConfig+0x1a26>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	d039      	beq.n	800b602 <UART_SetConfig+0x1a22>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b592:	2b03      	cmp	r3, #3
 800b594:	d033      	beq.n	800b5fe <UART_SetConfig+0x1a1e>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59a:	2b04      	cmp	r3, #4
 800b59c:	d02d      	beq.n	800b5fa <UART_SetConfig+0x1a1a>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a2:	2b05      	cmp	r3, #5
 800b5a4:	d027      	beq.n	800b5f6 <UART_SetConfig+0x1a16>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5aa:	2b06      	cmp	r3, #6
 800b5ac:	d021      	beq.n	800b5f2 <UART_SetConfig+0x1a12>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b2:	2b07      	cmp	r3, #7
 800b5b4:	d01b      	beq.n	800b5ee <UART_SetConfig+0x1a0e>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ba:	2b08      	cmp	r3, #8
 800b5bc:	d015      	beq.n	800b5ea <UART_SetConfig+0x1a0a>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c2:	2b09      	cmp	r3, #9
 800b5c4:	d00f      	beq.n	800b5e6 <UART_SetConfig+0x1a06>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ca:	2b0a      	cmp	r3, #10
 800b5cc:	d008      	beq.n	800b5e0 <UART_SetConfig+0x1a00>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d2:	2b0b      	cmp	r3, #11
 800b5d4:	d102      	bne.n	800b5dc <UART_SetConfig+0x19fc>
 800b5d6:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b5da:	e017      	b.n	800b60c <UART_SetConfig+0x1a2c>
 800b5dc:	4b18      	ldr	r3, [pc, #96]	; (800b640 <UART_SetConfig+0x1a60>)
 800b5de:	e015      	b.n	800b60c <UART_SetConfig+0x1a2c>
 800b5e0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b5e4:	e012      	b.n	800b60c <UART_SetConfig+0x1a2c>
 800b5e6:	4b1c      	ldr	r3, [pc, #112]	; (800b658 <UART_SetConfig+0x1a78>)
 800b5e8:	e010      	b.n	800b60c <UART_SetConfig+0x1a2c>
 800b5ea:	4b1c      	ldr	r3, [pc, #112]	; (800b65c <UART_SetConfig+0x1a7c>)
 800b5ec:	e00e      	b.n	800b60c <UART_SetConfig+0x1a2c>
 800b5ee:	4b0f      	ldr	r3, [pc, #60]	; (800b62c <UART_SetConfig+0x1a4c>)
 800b5f0:	e00c      	b.n	800b60c <UART_SetConfig+0x1a2c>
 800b5f2:	4b1b      	ldr	r3, [pc, #108]	; (800b660 <UART_SetConfig+0x1a80>)
 800b5f4:	e00a      	b.n	800b60c <UART_SetConfig+0x1a2c>
 800b5f6:	4b1b      	ldr	r3, [pc, #108]	; (800b664 <UART_SetConfig+0x1a84>)
 800b5f8:	e008      	b.n	800b60c <UART_SetConfig+0x1a2c>
 800b5fa:	4b0e      	ldr	r3, [pc, #56]	; (800b634 <UART_SetConfig+0x1a54>)
 800b5fc:	e006      	b.n	800b60c <UART_SetConfig+0x1a2c>
 800b5fe:	4b1a      	ldr	r3, [pc, #104]	; (800b668 <UART_SetConfig+0x1a88>)
 800b600:	e004      	b.n	800b60c <UART_SetConfig+0x1a2c>
 800b602:	4b0d      	ldr	r3, [pc, #52]	; (800b638 <UART_SetConfig+0x1a58>)
 800b604:	e002      	b.n	800b60c <UART_SetConfig+0x1a2c>
 800b606:	4b0d      	ldr	r3, [pc, #52]	; (800b63c <UART_SetConfig+0x1a5c>)
 800b608:	e000      	b.n	800b60c <UART_SetConfig+0x1a2c>
 800b60a:	4b0d      	ldr	r3, [pc, #52]	; (800b640 <UART_SetConfig+0x1a60>)
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	6852      	ldr	r2, [r2, #4]
 800b610:	0852      	lsrs	r2, r2, #1
 800b612:	441a      	add	r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	fbb2 f3f3 	udiv	r3, r2, r3
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b620:	e089      	b.n	800b736 <UART_SetConfig+0x1b56>
 800b622:	bf00      	nop
 800b624:	58024400 	.word	0x58024400
 800b628:	03d09000 	.word	0x03d09000
 800b62c:	0007a120 	.word	0x0007a120
 800b630:	07a12000 	.word	0x07a12000
 800b634:	000f4240 	.word	0x000f4240
 800b638:	001e8480 	.word	0x001e8480
 800b63c:	003d0900 	.word	0x003d0900
 800b640:	007a1200 	.word	0x007a1200
 800b644:	00a2c2aa 	.word	0x00a2c2aa
 800b648:	00c35000 	.word	0x00c35000
 800b64c:	00f42400 	.word	0x00f42400
 800b650:	01458554 	.word	0x01458554
 800b654:	01e84800 	.word	0x01e84800
 800b658:	0001e848 	.word	0x0001e848
 800b65c:	0003d090 	.word	0x0003d090
 800b660:	000a2c2a 	.word	0x000a2c2a
 800b664:	000c3500 	.word	0x000c3500
 800b668:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b670:	2b00      	cmp	r3, #0
 800b672:	d04f      	beq.n	800b714 <UART_SetConfig+0x1b34>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d048      	beq.n	800b70e <UART_SetConfig+0x1b2e>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b680:	2b02      	cmp	r3, #2
 800b682:	d041      	beq.n	800b708 <UART_SetConfig+0x1b28>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b688:	2b03      	cmp	r3, #3
 800b68a:	d03a      	beq.n	800b702 <UART_SetConfig+0x1b22>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b690:	2b04      	cmp	r3, #4
 800b692:	d033      	beq.n	800b6fc <UART_SetConfig+0x1b1c>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b698:	2b05      	cmp	r3, #5
 800b69a:	d02c      	beq.n	800b6f6 <UART_SetConfig+0x1b16>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a0:	2b06      	cmp	r3, #6
 800b6a2:	d025      	beq.n	800b6f0 <UART_SetConfig+0x1b10>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a8:	2b07      	cmp	r3, #7
 800b6aa:	d01e      	beq.n	800b6ea <UART_SetConfig+0x1b0a>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b0:	2b08      	cmp	r3, #8
 800b6b2:	d017      	beq.n	800b6e4 <UART_SetConfig+0x1b04>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b8:	2b09      	cmp	r3, #9
 800b6ba:	d010      	beq.n	800b6de <UART_SetConfig+0x1afe>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c0:	2b0a      	cmp	r3, #10
 800b6c2:	d009      	beq.n	800b6d8 <UART_SetConfig+0x1af8>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c8:	2b0b      	cmp	r3, #11
 800b6ca:	d102      	bne.n	800b6d2 <UART_SetConfig+0x1af2>
 800b6cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6d0:	e022      	b.n	800b718 <UART_SetConfig+0x1b38>
 800b6d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b6d6:	e01f      	b.n	800b718 <UART_SetConfig+0x1b38>
 800b6d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6dc:	e01c      	b.n	800b718 <UART_SetConfig+0x1b38>
 800b6de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6e2:	e019      	b.n	800b718 <UART_SetConfig+0x1b38>
 800b6e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b6e8:	e016      	b.n	800b718 <UART_SetConfig+0x1b38>
 800b6ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6ee:	e013      	b.n	800b718 <UART_SetConfig+0x1b38>
 800b6f0:	f241 5354 	movw	r3, #5460	; 0x1554
 800b6f4:	e010      	b.n	800b718 <UART_SetConfig+0x1b38>
 800b6f6:	f641 1398 	movw	r3, #6552	; 0x1998
 800b6fa:	e00d      	b.n	800b718 <UART_SetConfig+0x1b38>
 800b6fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b700:	e00a      	b.n	800b718 <UART_SetConfig+0x1b38>
 800b702:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800b706:	e007      	b.n	800b718 <UART_SetConfig+0x1b38>
 800b708:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b70c:	e004      	b.n	800b718 <UART_SetConfig+0x1b38>
 800b70e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b712:	e001      	b.n	800b718 <UART_SetConfig+0x1b38>
 800b714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	6852      	ldr	r2, [r2, #4]
 800b71c:	0852      	lsrs	r2, r2, #1
 800b71e:	441a      	add	r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	fbb2 f3f3 	udiv	r3, r2, r3
 800b728:	b29b      	uxth	r3, r3
 800b72a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b72c:	e003      	b.n	800b736 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800b72e:	2301      	movs	r3, #1
 800b730:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b734:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b738:	2b0f      	cmp	r3, #15
 800b73a:	d916      	bls.n	800b76a <UART_SetConfig+0x1b8a>
 800b73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b742:	d212      	bcs.n	800b76a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b746:	b29b      	uxth	r3, r3
 800b748:	f023 030f 	bic.w	r3, r3, #15
 800b74c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b750:	085b      	lsrs	r3, r3, #1
 800b752:	b29b      	uxth	r3, r3
 800b754:	f003 0307 	and.w	r3, r3, #7
 800b758:	b29a      	uxth	r2, r3
 800b75a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b75c:	4313      	orrs	r3, r2
 800b75e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b766:	60da      	str	r2, [r3, #12]
 800b768:	e3a3      	b.n	800beb2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b76a:	2301      	movs	r3, #1
 800b76c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b770:	e39f      	b.n	800beb2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800b772:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b776:	2b40      	cmp	r3, #64	; 0x40
 800b778:	f200 8388 	bhi.w	800be8c <UART_SetConfig+0x22ac>
 800b77c:	a201      	add	r2, pc, #4	; (adr r2, 800b784 <UART_SetConfig+0x1ba4>)
 800b77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b782:	bf00      	nop
 800b784:	0800b889 	.word	0x0800b889
 800b788:	0800b93f 	.word	0x0800b93f
 800b78c:	0800be8d 	.word	0x0800be8d
 800b790:	0800be8d 	.word	0x0800be8d
 800b794:	0800b9f5 	.word	0x0800b9f5
 800b798:	0800be8d 	.word	0x0800be8d
 800b79c:	0800be8d 	.word	0x0800be8d
 800b7a0:	0800be8d 	.word	0x0800be8d
 800b7a4:	0800baaf 	.word	0x0800baaf
 800b7a8:	0800be8d 	.word	0x0800be8d
 800b7ac:	0800be8d 	.word	0x0800be8d
 800b7b0:	0800be8d 	.word	0x0800be8d
 800b7b4:	0800be8d 	.word	0x0800be8d
 800b7b8:	0800be8d 	.word	0x0800be8d
 800b7bc:	0800be8d 	.word	0x0800be8d
 800b7c0:	0800be8d 	.word	0x0800be8d
 800b7c4:	0800bb69 	.word	0x0800bb69
 800b7c8:	0800be8d 	.word	0x0800be8d
 800b7cc:	0800be8d 	.word	0x0800be8d
 800b7d0:	0800be8d 	.word	0x0800be8d
 800b7d4:	0800be8d 	.word	0x0800be8d
 800b7d8:	0800be8d 	.word	0x0800be8d
 800b7dc:	0800be8d 	.word	0x0800be8d
 800b7e0:	0800be8d 	.word	0x0800be8d
 800b7e4:	0800be8d 	.word	0x0800be8d
 800b7e8:	0800be8d 	.word	0x0800be8d
 800b7ec:	0800be8d 	.word	0x0800be8d
 800b7f0:	0800be8d 	.word	0x0800be8d
 800b7f4:	0800be8d 	.word	0x0800be8d
 800b7f8:	0800be8d 	.word	0x0800be8d
 800b7fc:	0800be8d 	.word	0x0800be8d
 800b800:	0800be8d 	.word	0x0800be8d
 800b804:	0800bcd9 	.word	0x0800bcd9
 800b808:	0800be8d 	.word	0x0800be8d
 800b80c:	0800be8d 	.word	0x0800be8d
 800b810:	0800be8d 	.word	0x0800be8d
 800b814:	0800be8d 	.word	0x0800be8d
 800b818:	0800be8d 	.word	0x0800be8d
 800b81c:	0800be8d 	.word	0x0800be8d
 800b820:	0800be8d 	.word	0x0800be8d
 800b824:	0800be8d 	.word	0x0800be8d
 800b828:	0800be8d 	.word	0x0800be8d
 800b82c:	0800be8d 	.word	0x0800be8d
 800b830:	0800be8d 	.word	0x0800be8d
 800b834:	0800be8d 	.word	0x0800be8d
 800b838:	0800be8d 	.word	0x0800be8d
 800b83c:	0800be8d 	.word	0x0800be8d
 800b840:	0800be8d 	.word	0x0800be8d
 800b844:	0800be8d 	.word	0x0800be8d
 800b848:	0800be8d 	.word	0x0800be8d
 800b84c:	0800be8d 	.word	0x0800be8d
 800b850:	0800be8d 	.word	0x0800be8d
 800b854:	0800be8d 	.word	0x0800be8d
 800b858:	0800be8d 	.word	0x0800be8d
 800b85c:	0800be8d 	.word	0x0800be8d
 800b860:	0800be8d 	.word	0x0800be8d
 800b864:	0800be8d 	.word	0x0800be8d
 800b868:	0800be8d 	.word	0x0800be8d
 800b86c:	0800be8d 	.word	0x0800be8d
 800b870:	0800be8d 	.word	0x0800be8d
 800b874:	0800be8d 	.word	0x0800be8d
 800b878:	0800be8d 	.word	0x0800be8d
 800b87c:	0800be8d 	.word	0x0800be8d
 800b880:	0800be8d 	.word	0x0800be8d
 800b884:	0800bdcd 	.word	0x0800bdcd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b888:	f7fb fab4 	bl	8006df4 <HAL_RCC_GetPCLK1Freq>
 800b88c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b892:	2b00      	cmp	r3, #0
 800b894:	d044      	beq.n	800b920 <UART_SetConfig+0x1d40>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d03e      	beq.n	800b91c <UART_SetConfig+0x1d3c>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a2:	2b02      	cmp	r3, #2
 800b8a4:	d038      	beq.n	800b918 <UART_SetConfig+0x1d38>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8aa:	2b03      	cmp	r3, #3
 800b8ac:	d032      	beq.n	800b914 <UART_SetConfig+0x1d34>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b2:	2b04      	cmp	r3, #4
 800b8b4:	d02c      	beq.n	800b910 <UART_SetConfig+0x1d30>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ba:	2b05      	cmp	r3, #5
 800b8bc:	d026      	beq.n	800b90c <UART_SetConfig+0x1d2c>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c2:	2b06      	cmp	r3, #6
 800b8c4:	d020      	beq.n	800b908 <UART_SetConfig+0x1d28>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ca:	2b07      	cmp	r3, #7
 800b8cc:	d01a      	beq.n	800b904 <UART_SetConfig+0x1d24>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d2:	2b08      	cmp	r3, #8
 800b8d4:	d014      	beq.n	800b900 <UART_SetConfig+0x1d20>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8da:	2b09      	cmp	r3, #9
 800b8dc:	d00e      	beq.n	800b8fc <UART_SetConfig+0x1d1c>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e2:	2b0a      	cmp	r3, #10
 800b8e4:	d008      	beq.n	800b8f8 <UART_SetConfig+0x1d18>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ea:	2b0b      	cmp	r3, #11
 800b8ec:	d102      	bne.n	800b8f4 <UART_SetConfig+0x1d14>
 800b8ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8f2:	e016      	b.n	800b922 <UART_SetConfig+0x1d42>
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	e014      	b.n	800b922 <UART_SetConfig+0x1d42>
 800b8f8:	2380      	movs	r3, #128	; 0x80
 800b8fa:	e012      	b.n	800b922 <UART_SetConfig+0x1d42>
 800b8fc:	2340      	movs	r3, #64	; 0x40
 800b8fe:	e010      	b.n	800b922 <UART_SetConfig+0x1d42>
 800b900:	2320      	movs	r3, #32
 800b902:	e00e      	b.n	800b922 <UART_SetConfig+0x1d42>
 800b904:	2310      	movs	r3, #16
 800b906:	e00c      	b.n	800b922 <UART_SetConfig+0x1d42>
 800b908:	230c      	movs	r3, #12
 800b90a:	e00a      	b.n	800b922 <UART_SetConfig+0x1d42>
 800b90c:	230a      	movs	r3, #10
 800b90e:	e008      	b.n	800b922 <UART_SetConfig+0x1d42>
 800b910:	2308      	movs	r3, #8
 800b912:	e006      	b.n	800b922 <UART_SetConfig+0x1d42>
 800b914:	2306      	movs	r3, #6
 800b916:	e004      	b.n	800b922 <UART_SetConfig+0x1d42>
 800b918:	2304      	movs	r3, #4
 800b91a:	e002      	b.n	800b922 <UART_SetConfig+0x1d42>
 800b91c:	2302      	movs	r3, #2
 800b91e:	e000      	b.n	800b922 <UART_SetConfig+0x1d42>
 800b920:	2301      	movs	r3, #1
 800b922:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b924:	fbb2 f2f3 	udiv	r2, r2, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	085b      	lsrs	r3, r3, #1
 800b92e:	441a      	add	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	fbb2 f3f3 	udiv	r3, r2, r3
 800b938:	b29b      	uxth	r3, r3
 800b93a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b93c:	e2aa      	b.n	800be94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b93e:	f7fb fa6f 	bl	8006e20 <HAL_RCC_GetPCLK2Freq>
 800b942:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d044      	beq.n	800b9d6 <UART_SetConfig+0x1df6>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b950:	2b01      	cmp	r3, #1
 800b952:	d03e      	beq.n	800b9d2 <UART_SetConfig+0x1df2>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d038      	beq.n	800b9ce <UART_SetConfig+0x1dee>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b960:	2b03      	cmp	r3, #3
 800b962:	d032      	beq.n	800b9ca <UART_SetConfig+0x1dea>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b968:	2b04      	cmp	r3, #4
 800b96a:	d02c      	beq.n	800b9c6 <UART_SetConfig+0x1de6>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b970:	2b05      	cmp	r3, #5
 800b972:	d026      	beq.n	800b9c2 <UART_SetConfig+0x1de2>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b978:	2b06      	cmp	r3, #6
 800b97a:	d020      	beq.n	800b9be <UART_SetConfig+0x1dde>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b980:	2b07      	cmp	r3, #7
 800b982:	d01a      	beq.n	800b9ba <UART_SetConfig+0x1dda>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b988:	2b08      	cmp	r3, #8
 800b98a:	d014      	beq.n	800b9b6 <UART_SetConfig+0x1dd6>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b990:	2b09      	cmp	r3, #9
 800b992:	d00e      	beq.n	800b9b2 <UART_SetConfig+0x1dd2>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b998:	2b0a      	cmp	r3, #10
 800b99a:	d008      	beq.n	800b9ae <UART_SetConfig+0x1dce>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a0:	2b0b      	cmp	r3, #11
 800b9a2:	d102      	bne.n	800b9aa <UART_SetConfig+0x1dca>
 800b9a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9a8:	e016      	b.n	800b9d8 <UART_SetConfig+0x1df8>
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e014      	b.n	800b9d8 <UART_SetConfig+0x1df8>
 800b9ae:	2380      	movs	r3, #128	; 0x80
 800b9b0:	e012      	b.n	800b9d8 <UART_SetConfig+0x1df8>
 800b9b2:	2340      	movs	r3, #64	; 0x40
 800b9b4:	e010      	b.n	800b9d8 <UART_SetConfig+0x1df8>
 800b9b6:	2320      	movs	r3, #32
 800b9b8:	e00e      	b.n	800b9d8 <UART_SetConfig+0x1df8>
 800b9ba:	2310      	movs	r3, #16
 800b9bc:	e00c      	b.n	800b9d8 <UART_SetConfig+0x1df8>
 800b9be:	230c      	movs	r3, #12
 800b9c0:	e00a      	b.n	800b9d8 <UART_SetConfig+0x1df8>
 800b9c2:	230a      	movs	r3, #10
 800b9c4:	e008      	b.n	800b9d8 <UART_SetConfig+0x1df8>
 800b9c6:	2308      	movs	r3, #8
 800b9c8:	e006      	b.n	800b9d8 <UART_SetConfig+0x1df8>
 800b9ca:	2306      	movs	r3, #6
 800b9cc:	e004      	b.n	800b9d8 <UART_SetConfig+0x1df8>
 800b9ce:	2304      	movs	r3, #4
 800b9d0:	e002      	b.n	800b9d8 <UART_SetConfig+0x1df8>
 800b9d2:	2302      	movs	r3, #2
 800b9d4:	e000      	b.n	800b9d8 <UART_SetConfig+0x1df8>
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9da:	fbb2 f2f3 	udiv	r2, r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	085b      	lsrs	r3, r3, #1
 800b9e4:	441a      	add	r2, r3
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9f2:	e24f      	b.n	800be94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9f4:	f107 0318 	add.w	r3, r7, #24
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7fc fb93 	bl	8008124 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9fe:	69fa      	ldr	r2, [r7, #28]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d044      	beq.n	800ba92 <UART_SetConfig+0x1eb2>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d03e      	beq.n	800ba8e <UART_SetConfig+0x1eae>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba14:	2b02      	cmp	r3, #2
 800ba16:	d038      	beq.n	800ba8a <UART_SetConfig+0x1eaa>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1c:	2b03      	cmp	r3, #3
 800ba1e:	d032      	beq.n	800ba86 <UART_SetConfig+0x1ea6>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba24:	2b04      	cmp	r3, #4
 800ba26:	d02c      	beq.n	800ba82 <UART_SetConfig+0x1ea2>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2c:	2b05      	cmp	r3, #5
 800ba2e:	d026      	beq.n	800ba7e <UART_SetConfig+0x1e9e>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba34:	2b06      	cmp	r3, #6
 800ba36:	d020      	beq.n	800ba7a <UART_SetConfig+0x1e9a>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3c:	2b07      	cmp	r3, #7
 800ba3e:	d01a      	beq.n	800ba76 <UART_SetConfig+0x1e96>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba44:	2b08      	cmp	r3, #8
 800ba46:	d014      	beq.n	800ba72 <UART_SetConfig+0x1e92>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4c:	2b09      	cmp	r3, #9
 800ba4e:	d00e      	beq.n	800ba6e <UART_SetConfig+0x1e8e>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba54:	2b0a      	cmp	r3, #10
 800ba56:	d008      	beq.n	800ba6a <UART_SetConfig+0x1e8a>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba5c:	2b0b      	cmp	r3, #11
 800ba5e:	d102      	bne.n	800ba66 <UART_SetConfig+0x1e86>
 800ba60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba64:	e016      	b.n	800ba94 <UART_SetConfig+0x1eb4>
 800ba66:	2301      	movs	r3, #1
 800ba68:	e014      	b.n	800ba94 <UART_SetConfig+0x1eb4>
 800ba6a:	2380      	movs	r3, #128	; 0x80
 800ba6c:	e012      	b.n	800ba94 <UART_SetConfig+0x1eb4>
 800ba6e:	2340      	movs	r3, #64	; 0x40
 800ba70:	e010      	b.n	800ba94 <UART_SetConfig+0x1eb4>
 800ba72:	2320      	movs	r3, #32
 800ba74:	e00e      	b.n	800ba94 <UART_SetConfig+0x1eb4>
 800ba76:	2310      	movs	r3, #16
 800ba78:	e00c      	b.n	800ba94 <UART_SetConfig+0x1eb4>
 800ba7a:	230c      	movs	r3, #12
 800ba7c:	e00a      	b.n	800ba94 <UART_SetConfig+0x1eb4>
 800ba7e:	230a      	movs	r3, #10
 800ba80:	e008      	b.n	800ba94 <UART_SetConfig+0x1eb4>
 800ba82:	2308      	movs	r3, #8
 800ba84:	e006      	b.n	800ba94 <UART_SetConfig+0x1eb4>
 800ba86:	2306      	movs	r3, #6
 800ba88:	e004      	b.n	800ba94 <UART_SetConfig+0x1eb4>
 800ba8a:	2304      	movs	r3, #4
 800ba8c:	e002      	b.n	800ba94 <UART_SetConfig+0x1eb4>
 800ba8e:	2302      	movs	r3, #2
 800ba90:	e000      	b.n	800ba94 <UART_SetConfig+0x1eb4>
 800ba92:	2301      	movs	r3, #1
 800ba94:	fbb2 f2f3 	udiv	r2, r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	085b      	lsrs	r3, r3, #1
 800ba9e:	441a      	add	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800baac:	e1f2      	b.n	800be94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baae:	f107 030c 	add.w	r3, r7, #12
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7fc fc82 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bab8:	693a      	ldr	r2, [r7, #16]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d044      	beq.n	800bb4c <UART_SetConfig+0x1f6c>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d03e      	beq.n	800bb48 <UART_SetConfig+0x1f68>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d038      	beq.n	800bb44 <UART_SetConfig+0x1f64>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad6:	2b03      	cmp	r3, #3
 800bad8:	d032      	beq.n	800bb40 <UART_SetConfig+0x1f60>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bade:	2b04      	cmp	r3, #4
 800bae0:	d02c      	beq.n	800bb3c <UART_SetConfig+0x1f5c>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae6:	2b05      	cmp	r3, #5
 800bae8:	d026      	beq.n	800bb38 <UART_SetConfig+0x1f58>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baee:	2b06      	cmp	r3, #6
 800baf0:	d020      	beq.n	800bb34 <UART_SetConfig+0x1f54>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf6:	2b07      	cmp	r3, #7
 800baf8:	d01a      	beq.n	800bb30 <UART_SetConfig+0x1f50>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafe:	2b08      	cmp	r3, #8
 800bb00:	d014      	beq.n	800bb2c <UART_SetConfig+0x1f4c>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb06:	2b09      	cmp	r3, #9
 800bb08:	d00e      	beq.n	800bb28 <UART_SetConfig+0x1f48>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0e:	2b0a      	cmp	r3, #10
 800bb10:	d008      	beq.n	800bb24 <UART_SetConfig+0x1f44>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb16:	2b0b      	cmp	r3, #11
 800bb18:	d102      	bne.n	800bb20 <UART_SetConfig+0x1f40>
 800bb1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb1e:	e016      	b.n	800bb4e <UART_SetConfig+0x1f6e>
 800bb20:	2301      	movs	r3, #1
 800bb22:	e014      	b.n	800bb4e <UART_SetConfig+0x1f6e>
 800bb24:	2380      	movs	r3, #128	; 0x80
 800bb26:	e012      	b.n	800bb4e <UART_SetConfig+0x1f6e>
 800bb28:	2340      	movs	r3, #64	; 0x40
 800bb2a:	e010      	b.n	800bb4e <UART_SetConfig+0x1f6e>
 800bb2c:	2320      	movs	r3, #32
 800bb2e:	e00e      	b.n	800bb4e <UART_SetConfig+0x1f6e>
 800bb30:	2310      	movs	r3, #16
 800bb32:	e00c      	b.n	800bb4e <UART_SetConfig+0x1f6e>
 800bb34:	230c      	movs	r3, #12
 800bb36:	e00a      	b.n	800bb4e <UART_SetConfig+0x1f6e>
 800bb38:	230a      	movs	r3, #10
 800bb3a:	e008      	b.n	800bb4e <UART_SetConfig+0x1f6e>
 800bb3c:	2308      	movs	r3, #8
 800bb3e:	e006      	b.n	800bb4e <UART_SetConfig+0x1f6e>
 800bb40:	2306      	movs	r3, #6
 800bb42:	e004      	b.n	800bb4e <UART_SetConfig+0x1f6e>
 800bb44:	2304      	movs	r3, #4
 800bb46:	e002      	b.n	800bb4e <UART_SetConfig+0x1f6e>
 800bb48:	2302      	movs	r3, #2
 800bb4a:	e000      	b.n	800bb4e <UART_SetConfig+0x1f6e>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	fbb2 f2f3 	udiv	r2, r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	085b      	lsrs	r3, r3, #1
 800bb58:	441a      	add	r2, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb66:	e195      	b.n	800be94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb68:	4b87      	ldr	r3, [pc, #540]	; (800bd88 <UART_SetConfig+0x21a8>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 0320 	and.w	r3, r3, #32
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d05d      	beq.n	800bc30 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb74:	4b84      	ldr	r3, [pc, #528]	; (800bd88 <UART_SetConfig+0x21a8>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	08db      	lsrs	r3, r3, #3
 800bb7a:	f003 0303 	and.w	r3, r3, #3
 800bb7e:	4a83      	ldr	r2, [pc, #524]	; (800bd8c <UART_SetConfig+0x21ac>)
 800bb80:	40da      	lsrs	r2, r3
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d044      	beq.n	800bc14 <UART_SetConfig+0x2034>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d03e      	beq.n	800bc10 <UART_SetConfig+0x2030>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	d038      	beq.n	800bc0c <UART_SetConfig+0x202c>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9e:	2b03      	cmp	r3, #3
 800bba0:	d032      	beq.n	800bc08 <UART_SetConfig+0x2028>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba6:	2b04      	cmp	r3, #4
 800bba8:	d02c      	beq.n	800bc04 <UART_SetConfig+0x2024>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbae:	2b05      	cmp	r3, #5
 800bbb0:	d026      	beq.n	800bc00 <UART_SetConfig+0x2020>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb6:	2b06      	cmp	r3, #6
 800bbb8:	d020      	beq.n	800bbfc <UART_SetConfig+0x201c>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbbe:	2b07      	cmp	r3, #7
 800bbc0:	d01a      	beq.n	800bbf8 <UART_SetConfig+0x2018>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc6:	2b08      	cmp	r3, #8
 800bbc8:	d014      	beq.n	800bbf4 <UART_SetConfig+0x2014>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbce:	2b09      	cmp	r3, #9
 800bbd0:	d00e      	beq.n	800bbf0 <UART_SetConfig+0x2010>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd6:	2b0a      	cmp	r3, #10
 800bbd8:	d008      	beq.n	800bbec <UART_SetConfig+0x200c>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbde:	2b0b      	cmp	r3, #11
 800bbe0:	d102      	bne.n	800bbe8 <UART_SetConfig+0x2008>
 800bbe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbe6:	e016      	b.n	800bc16 <UART_SetConfig+0x2036>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e014      	b.n	800bc16 <UART_SetConfig+0x2036>
 800bbec:	2380      	movs	r3, #128	; 0x80
 800bbee:	e012      	b.n	800bc16 <UART_SetConfig+0x2036>
 800bbf0:	2340      	movs	r3, #64	; 0x40
 800bbf2:	e010      	b.n	800bc16 <UART_SetConfig+0x2036>
 800bbf4:	2320      	movs	r3, #32
 800bbf6:	e00e      	b.n	800bc16 <UART_SetConfig+0x2036>
 800bbf8:	2310      	movs	r3, #16
 800bbfa:	e00c      	b.n	800bc16 <UART_SetConfig+0x2036>
 800bbfc:	230c      	movs	r3, #12
 800bbfe:	e00a      	b.n	800bc16 <UART_SetConfig+0x2036>
 800bc00:	230a      	movs	r3, #10
 800bc02:	e008      	b.n	800bc16 <UART_SetConfig+0x2036>
 800bc04:	2308      	movs	r3, #8
 800bc06:	e006      	b.n	800bc16 <UART_SetConfig+0x2036>
 800bc08:	2306      	movs	r3, #6
 800bc0a:	e004      	b.n	800bc16 <UART_SetConfig+0x2036>
 800bc0c:	2304      	movs	r3, #4
 800bc0e:	e002      	b.n	800bc16 <UART_SetConfig+0x2036>
 800bc10:	2302      	movs	r3, #2
 800bc12:	e000      	b.n	800bc16 <UART_SetConfig+0x2036>
 800bc14:	2301      	movs	r3, #1
 800bc16:	fbb2 f2f3 	udiv	r2, r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	085b      	lsrs	r3, r3, #1
 800bc20:	441a      	add	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800bc2e:	e131      	b.n	800be94 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d043      	beq.n	800bcc0 <UART_SetConfig+0x20e0>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d03d      	beq.n	800bcbc <UART_SetConfig+0x20dc>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc44:	2b02      	cmp	r3, #2
 800bc46:	d037      	beq.n	800bcb8 <UART_SetConfig+0x20d8>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4c:	2b03      	cmp	r3, #3
 800bc4e:	d031      	beq.n	800bcb4 <UART_SetConfig+0x20d4>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc54:	2b04      	cmp	r3, #4
 800bc56:	d02b      	beq.n	800bcb0 <UART_SetConfig+0x20d0>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5c:	2b05      	cmp	r3, #5
 800bc5e:	d025      	beq.n	800bcac <UART_SetConfig+0x20cc>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc64:	2b06      	cmp	r3, #6
 800bc66:	d01f      	beq.n	800bca8 <UART_SetConfig+0x20c8>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6c:	2b07      	cmp	r3, #7
 800bc6e:	d019      	beq.n	800bca4 <UART_SetConfig+0x20c4>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc74:	2b08      	cmp	r3, #8
 800bc76:	d013      	beq.n	800bca0 <UART_SetConfig+0x20c0>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7c:	2b09      	cmp	r3, #9
 800bc7e:	d00d      	beq.n	800bc9c <UART_SetConfig+0x20bc>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc84:	2b0a      	cmp	r3, #10
 800bc86:	d007      	beq.n	800bc98 <UART_SetConfig+0x20b8>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8c:	2b0b      	cmp	r3, #11
 800bc8e:	d101      	bne.n	800bc94 <UART_SetConfig+0x20b4>
 800bc90:	4b3f      	ldr	r3, [pc, #252]	; (800bd90 <UART_SetConfig+0x21b0>)
 800bc92:	e016      	b.n	800bcc2 <UART_SetConfig+0x20e2>
 800bc94:	4b3d      	ldr	r3, [pc, #244]	; (800bd8c <UART_SetConfig+0x21ac>)
 800bc96:	e014      	b.n	800bcc2 <UART_SetConfig+0x20e2>
 800bc98:	4b3e      	ldr	r3, [pc, #248]	; (800bd94 <UART_SetConfig+0x21b4>)
 800bc9a:	e012      	b.n	800bcc2 <UART_SetConfig+0x20e2>
 800bc9c:	4b3e      	ldr	r3, [pc, #248]	; (800bd98 <UART_SetConfig+0x21b8>)
 800bc9e:	e010      	b.n	800bcc2 <UART_SetConfig+0x20e2>
 800bca0:	4b3e      	ldr	r3, [pc, #248]	; (800bd9c <UART_SetConfig+0x21bc>)
 800bca2:	e00e      	b.n	800bcc2 <UART_SetConfig+0x20e2>
 800bca4:	4b3e      	ldr	r3, [pc, #248]	; (800bda0 <UART_SetConfig+0x21c0>)
 800bca6:	e00c      	b.n	800bcc2 <UART_SetConfig+0x20e2>
 800bca8:	4b3e      	ldr	r3, [pc, #248]	; (800bda4 <UART_SetConfig+0x21c4>)
 800bcaa:	e00a      	b.n	800bcc2 <UART_SetConfig+0x20e2>
 800bcac:	4b3e      	ldr	r3, [pc, #248]	; (800bda8 <UART_SetConfig+0x21c8>)
 800bcae:	e008      	b.n	800bcc2 <UART_SetConfig+0x20e2>
 800bcb0:	4b3e      	ldr	r3, [pc, #248]	; (800bdac <UART_SetConfig+0x21cc>)
 800bcb2:	e006      	b.n	800bcc2 <UART_SetConfig+0x20e2>
 800bcb4:	4b3e      	ldr	r3, [pc, #248]	; (800bdb0 <UART_SetConfig+0x21d0>)
 800bcb6:	e004      	b.n	800bcc2 <UART_SetConfig+0x20e2>
 800bcb8:	4b3e      	ldr	r3, [pc, #248]	; (800bdb4 <UART_SetConfig+0x21d4>)
 800bcba:	e002      	b.n	800bcc2 <UART_SetConfig+0x20e2>
 800bcbc:	4b3e      	ldr	r3, [pc, #248]	; (800bdb8 <UART_SetConfig+0x21d8>)
 800bcbe:	e000      	b.n	800bcc2 <UART_SetConfig+0x20e2>
 800bcc0:	4b32      	ldr	r3, [pc, #200]	; (800bd8c <UART_SetConfig+0x21ac>)
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	6852      	ldr	r2, [r2, #4]
 800bcc6:	0852      	lsrs	r2, r2, #1
 800bcc8:	441a      	add	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bcd6:	e0dd      	b.n	800be94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d046      	beq.n	800bd6e <UART_SetConfig+0x218e>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d040      	beq.n	800bd6a <UART_SetConfig+0x218a>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcec:	2b02      	cmp	r3, #2
 800bcee:	d03a      	beq.n	800bd66 <UART_SetConfig+0x2186>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf4:	2b03      	cmp	r3, #3
 800bcf6:	d034      	beq.n	800bd62 <UART_SetConfig+0x2182>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfc:	2b04      	cmp	r3, #4
 800bcfe:	d02e      	beq.n	800bd5e <UART_SetConfig+0x217e>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd04:	2b05      	cmp	r3, #5
 800bd06:	d028      	beq.n	800bd5a <UART_SetConfig+0x217a>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0c:	2b06      	cmp	r3, #6
 800bd0e:	d022      	beq.n	800bd56 <UART_SetConfig+0x2176>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd14:	2b07      	cmp	r3, #7
 800bd16:	d01c      	beq.n	800bd52 <UART_SetConfig+0x2172>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1c:	2b08      	cmp	r3, #8
 800bd1e:	d016      	beq.n	800bd4e <UART_SetConfig+0x216e>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd24:	2b09      	cmp	r3, #9
 800bd26:	d00f      	beq.n	800bd48 <UART_SetConfig+0x2168>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2c:	2b0a      	cmp	r3, #10
 800bd2e:	d008      	beq.n	800bd42 <UART_SetConfig+0x2162>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd34:	2b0b      	cmp	r3, #11
 800bd36:	d102      	bne.n	800bd3e <UART_SetConfig+0x215e>
 800bd38:	f643 5309 	movw	r3, #15625	; 0x3d09
 800bd3c:	e018      	b.n	800bd70 <UART_SetConfig+0x2190>
 800bd3e:	4b18      	ldr	r3, [pc, #96]	; (800bda0 <UART_SetConfig+0x21c0>)
 800bd40:	e016      	b.n	800bd70 <UART_SetConfig+0x2190>
 800bd42:	f647 2312 	movw	r3, #31250	; 0x7a12
 800bd46:	e013      	b.n	800bd70 <UART_SetConfig+0x2190>
 800bd48:	f24f 4324 	movw	r3, #62500	; 0xf424
 800bd4c:	e010      	b.n	800bd70 <UART_SetConfig+0x2190>
 800bd4e:	4b1b      	ldr	r3, [pc, #108]	; (800bdbc <UART_SetConfig+0x21dc>)
 800bd50:	e00e      	b.n	800bd70 <UART_SetConfig+0x2190>
 800bd52:	4b0f      	ldr	r3, [pc, #60]	; (800bd90 <UART_SetConfig+0x21b0>)
 800bd54:	e00c      	b.n	800bd70 <UART_SetConfig+0x2190>
 800bd56:	4b1a      	ldr	r3, [pc, #104]	; (800bdc0 <UART_SetConfig+0x21e0>)
 800bd58:	e00a      	b.n	800bd70 <UART_SetConfig+0x2190>
 800bd5a:	4b1a      	ldr	r3, [pc, #104]	; (800bdc4 <UART_SetConfig+0x21e4>)
 800bd5c:	e008      	b.n	800bd70 <UART_SetConfig+0x2190>
 800bd5e:	4b0d      	ldr	r3, [pc, #52]	; (800bd94 <UART_SetConfig+0x21b4>)
 800bd60:	e006      	b.n	800bd70 <UART_SetConfig+0x2190>
 800bd62:	4b19      	ldr	r3, [pc, #100]	; (800bdc8 <UART_SetConfig+0x21e8>)
 800bd64:	e004      	b.n	800bd70 <UART_SetConfig+0x2190>
 800bd66:	4b0c      	ldr	r3, [pc, #48]	; (800bd98 <UART_SetConfig+0x21b8>)
 800bd68:	e002      	b.n	800bd70 <UART_SetConfig+0x2190>
 800bd6a:	4b0c      	ldr	r3, [pc, #48]	; (800bd9c <UART_SetConfig+0x21bc>)
 800bd6c:	e000      	b.n	800bd70 <UART_SetConfig+0x2190>
 800bd6e:	4b0c      	ldr	r3, [pc, #48]	; (800bda0 <UART_SetConfig+0x21c0>)
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	6852      	ldr	r2, [r2, #4]
 800bd74:	0852      	lsrs	r2, r2, #1
 800bd76:	441a      	add	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd84:	e086      	b.n	800be94 <UART_SetConfig+0x22b4>
 800bd86:	bf00      	nop
 800bd88:	58024400 	.word	0x58024400
 800bd8c:	03d09000 	.word	0x03d09000
 800bd90:	0003d090 	.word	0x0003d090
 800bd94:	0007a120 	.word	0x0007a120
 800bd98:	000f4240 	.word	0x000f4240
 800bd9c:	001e8480 	.word	0x001e8480
 800bda0:	003d0900 	.word	0x003d0900
 800bda4:	00516155 	.word	0x00516155
 800bda8:	0061a800 	.word	0x0061a800
 800bdac:	007a1200 	.word	0x007a1200
 800bdb0:	00a2c2aa 	.word	0x00a2c2aa
 800bdb4:	00f42400 	.word	0x00f42400
 800bdb8:	01e84800 	.word	0x01e84800
 800bdbc:	0001e848 	.word	0x0001e848
 800bdc0:	00051615 	.word	0x00051615
 800bdc4:	00061a80 	.word	0x00061a80
 800bdc8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d04e      	beq.n	800be72 <UART_SetConfig+0x2292>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d047      	beq.n	800be6c <UART_SetConfig+0x228c>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde0:	2b02      	cmp	r3, #2
 800bde2:	d040      	beq.n	800be66 <UART_SetConfig+0x2286>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde8:	2b03      	cmp	r3, #3
 800bdea:	d039      	beq.n	800be60 <UART_SetConfig+0x2280>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf0:	2b04      	cmp	r3, #4
 800bdf2:	d032      	beq.n	800be5a <UART_SetConfig+0x227a>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf8:	2b05      	cmp	r3, #5
 800bdfa:	d02b      	beq.n	800be54 <UART_SetConfig+0x2274>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be00:	2b06      	cmp	r3, #6
 800be02:	d024      	beq.n	800be4e <UART_SetConfig+0x226e>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be08:	2b07      	cmp	r3, #7
 800be0a:	d01d      	beq.n	800be48 <UART_SetConfig+0x2268>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be10:	2b08      	cmp	r3, #8
 800be12:	d016      	beq.n	800be42 <UART_SetConfig+0x2262>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be18:	2b09      	cmp	r3, #9
 800be1a:	d00f      	beq.n	800be3c <UART_SetConfig+0x225c>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be20:	2b0a      	cmp	r3, #10
 800be22:	d008      	beq.n	800be36 <UART_SetConfig+0x2256>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be28:	2b0b      	cmp	r3, #11
 800be2a:	d101      	bne.n	800be30 <UART_SetConfig+0x2250>
 800be2c:	2380      	movs	r3, #128	; 0x80
 800be2e:	e022      	b.n	800be76 <UART_SetConfig+0x2296>
 800be30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be34:	e01f      	b.n	800be76 <UART_SetConfig+0x2296>
 800be36:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be3a:	e01c      	b.n	800be76 <UART_SetConfig+0x2296>
 800be3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be40:	e019      	b.n	800be76 <UART_SetConfig+0x2296>
 800be42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be46:	e016      	b.n	800be76 <UART_SetConfig+0x2296>
 800be48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be4c:	e013      	b.n	800be76 <UART_SetConfig+0x2296>
 800be4e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800be52:	e010      	b.n	800be76 <UART_SetConfig+0x2296>
 800be54:	f640 43cc 	movw	r3, #3276	; 0xccc
 800be58:	e00d      	b.n	800be76 <UART_SetConfig+0x2296>
 800be5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be5e:	e00a      	b.n	800be76 <UART_SetConfig+0x2296>
 800be60:	f241 5355 	movw	r3, #5461	; 0x1555
 800be64:	e007      	b.n	800be76 <UART_SetConfig+0x2296>
 800be66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be6a:	e004      	b.n	800be76 <UART_SetConfig+0x2296>
 800be6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800be70:	e001      	b.n	800be76 <UART_SetConfig+0x2296>
 800be72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	6852      	ldr	r2, [r2, #4]
 800be7a:	0852      	lsrs	r2, r2, #1
 800be7c:	441a      	add	r2, r3
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	fbb2 f3f3 	udiv	r3, r2, r3
 800be86:	b29b      	uxth	r3, r3
 800be88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be8a:	e003      	b.n	800be94 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800be8c:	2301      	movs	r3, #1
 800be8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800be92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be96:	2b0f      	cmp	r3, #15
 800be98:	d908      	bls.n	800beac <UART_SetConfig+0x22cc>
 800be9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bea0:	d204      	bcs.n	800beac <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bea8:	60da      	str	r2, [r3, #12]
 800beaa:	e002      	b.n	800beb2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800beac:	2301      	movs	r3, #1
 800beae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2201      	movs	r2, #1
 800beb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2201      	movs	r2, #1
 800bebe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bece:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3740      	adds	r7, #64	; 0x40
 800bed6:	46bd      	mov	sp, r7
 800bed8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800bedc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bee8:	f003 0301 	and.w	r3, r3, #1
 800beec:	2b00      	cmp	r3, #0
 800beee:	d00a      	beq.n	800bf06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	430a      	orrs	r2, r1
 800bf04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf0a:	f003 0302 	and.w	r3, r3, #2
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d00a      	beq.n	800bf28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	430a      	orrs	r2, r1
 800bf26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf2c:	f003 0304 	and.w	r3, r3, #4
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d00a      	beq.n	800bf4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	430a      	orrs	r2, r1
 800bf48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf4e:	f003 0308 	and.w	r3, r3, #8
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00a      	beq.n	800bf6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	430a      	orrs	r2, r1
 800bf6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf70:	f003 0310 	and.w	r3, r3, #16
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d00a      	beq.n	800bf8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	430a      	orrs	r2, r1
 800bf8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf92:	f003 0320 	and.w	r3, r3, #32
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00a      	beq.n	800bfb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	430a      	orrs	r2, r1
 800bfae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d01a      	beq.n	800bff2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	430a      	orrs	r2, r1
 800bfd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfda:	d10a      	bne.n	800bff2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	685b      	ldr	r3, [r3, #4]
 800bfe2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	430a      	orrs	r2, r1
 800bff0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00a      	beq.n	800c014 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	430a      	orrs	r2, r1
 800c012:	605a      	str	r2, [r3, #4]
  }
}
 800c014:	bf00      	nop
 800c016:	370c      	adds	r7, #12
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b086      	sub	sp, #24
 800c024:	af02      	add	r7, sp, #8
 800c026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c030:	f7f6 f8ea 	bl	8002208 <HAL_GetTick>
 800c034:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f003 0308 	and.w	r3, r3, #8
 800c040:	2b08      	cmp	r3, #8
 800c042:	d10e      	bne.n	800c062 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c044:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c048:	9300      	str	r3, [sp, #0]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2200      	movs	r2, #0
 800c04e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 f82c 	bl	800c0b0 <UART_WaitOnFlagUntilTimeout>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d001      	beq.n	800c062 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c05e:	2303      	movs	r3, #3
 800c060:	e022      	b.n	800c0a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f003 0304 	and.w	r3, r3, #4
 800c06c:	2b04      	cmp	r3, #4
 800c06e:	d10e      	bne.n	800c08e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c070:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c074:	9300      	str	r3, [sp, #0]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2200      	movs	r2, #0
 800c07a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 f816 	bl	800c0b0 <UART_WaitOnFlagUntilTimeout>
 800c084:	4603      	mov	r3, r0
 800c086:	2b00      	cmp	r3, #0
 800c088:	d001      	beq.n	800c08e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c08a:	2303      	movs	r3, #3
 800c08c:	e00c      	b.n	800c0a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2220      	movs	r2, #32
 800c092:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2220      	movs	r2, #32
 800c09a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c0a6:	2300      	movs	r3, #0
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	60f8      	str	r0, [r7, #12]
 800c0b8:	60b9      	str	r1, [r7, #8]
 800c0ba:	603b      	str	r3, [r7, #0]
 800c0bc:	4613      	mov	r3, r2
 800c0be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0c0:	e062      	b.n	800c188 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c8:	d05e      	beq.n	800c188 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0ca:	f7f6 f89d 	bl	8002208 <HAL_GetTick>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	1ad3      	subs	r3, r2, r3
 800c0d4:	69ba      	ldr	r2, [r7, #24]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d302      	bcc.n	800c0e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d11d      	bne.n	800c11c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c0ee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	689a      	ldr	r2, [r3, #8]
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f022 0201 	bic.w	r2, r2, #1
 800c0fe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2220      	movs	r2, #32
 800c104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2220      	movs	r2, #32
 800c10c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2200      	movs	r2, #0
 800c114:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c118:	2303      	movs	r3, #3
 800c11a:	e045      	b.n	800c1a8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f003 0304 	and.w	r3, r3, #4
 800c126:	2b00      	cmp	r3, #0
 800c128:	d02e      	beq.n	800c188 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	69db      	ldr	r3, [r3, #28]
 800c130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c138:	d126      	bne.n	800c188 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c142:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c152:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	689a      	ldr	r2, [r3, #8]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f022 0201 	bic.w	r2, r2, #1
 800c162:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2220      	movs	r2, #32
 800c168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2220      	movs	r2, #32
 800c170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2220      	movs	r2, #32
 800c178:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2200      	movs	r2, #0
 800c180:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800c184:	2303      	movs	r3, #3
 800c186:	e00f      	b.n	800c1a8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	69da      	ldr	r2, [r3, #28]
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	4013      	ands	r3, r2
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	429a      	cmp	r2, r3
 800c196:	bf0c      	ite	eq
 800c198:	2301      	moveq	r3, #1
 800c19a:	2300      	movne	r3, #0
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	461a      	mov	r2, r3
 800c1a0:	79fb      	ldrb	r3, [r7, #7]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d08d      	beq.n	800c0c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c1a6:	2300      	movs	r3, #0
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3710      	adds	r7, #16
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c1c6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	689a      	ldr	r2, [r3, #8]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c1d6:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2220      	movs	r2, #32
 800c1dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800c1e0:	bf00      	nop
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c202:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	6899      	ldr	r1, [r3, #8]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	4b08      	ldr	r3, [pc, #32]	; (800c230 <UART_EndRxTransfer+0x44>)
 800c210:	400b      	ands	r3, r1
 800c212:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2220      	movs	r2, #32
 800c218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800c222:	bf00      	nop
 800c224:	370c      	adds	r7, #12
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr
 800c22e:	bf00      	nop
 800c230:	effffffe 	.word	0xeffffffe

0800c234 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c240:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	69db      	ldr	r3, [r3, #28]
 800c246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c24a:	d01f      	beq.n	800c28c <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2200      	movs	r2, #0
 800c250:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c262:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	689a      	ldr	r2, [r3, #8]
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f022 0201 	bic.w	r2, r2, #1
 800c272:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	689a      	ldr	r2, [r3, #8]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c282:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2220      	movs	r2, #32
 800c288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800c28c:	68f8      	ldr	r0, [r7, #12]
 800c28e:	f7f4 fbdb 	bl	8000a48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c292:	bf00      	nop
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}

0800c29a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c29a:	b580      	push	{r7, lr}
 800c29c:	b084      	sub	sp, #16
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	f7fd fc83 	bl	8009bb4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2ae:	bf00      	nop
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b086      	sub	sp, #24
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2ca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2d2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	689b      	ldr	r3, [r3, #8]
 800c2da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2de:	2b80      	cmp	r3, #128	; 0x80
 800c2e0:	d109      	bne.n	800c2f6 <UART_DMAError+0x40>
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	2b21      	cmp	r3, #33	; 0x21
 800c2e6:	d106      	bne.n	800c2f6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c2f0:	6978      	ldr	r0, [r7, #20]
 800c2f2:	f7ff ff5d 	bl	800c1b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c300:	2b40      	cmp	r3, #64	; 0x40
 800c302:	d109      	bne.n	800c318 <UART_DMAError+0x62>
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2b22      	cmp	r3, #34	; 0x22
 800c308:	d106      	bne.n	800c318 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	2200      	movs	r2, #0
 800c30e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c312:	6978      	ldr	r0, [r7, #20]
 800c314:	f7ff ff6a 	bl	800c1ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c31e:	f043 0210 	orr.w	r2, r3, #16
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c328:	6978      	ldr	r0, [r7, #20]
 800c32a:	f7fd fc4d 	bl	8009bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c32e:	bf00      	nop
 800c330:	3718      	adds	r7, #24
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b084      	sub	sp, #16
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c342:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2200      	movs	r2, #0
 800c348:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2200      	movs	r2, #0
 800c350:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c354:	68f8      	ldr	r0, [r7, #12]
 800c356:	f7fd fc37 	bl	8009bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c35a:	bf00      	nop
 800c35c:	3710      	adds	r7, #16
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c362:	b480      	push	{r7}
 800c364:	b083      	sub	sp, #12
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c370:	2b21      	cmp	r3, #33	; 0x21
 800c372:	d12a      	bne.n	800c3ca <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d110      	bne.n	800c3a2 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c38e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c39e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c3a0:	e013      	b.n	800c3ca <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3a6:	781a      	ldrb	r2, [r3, #0]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3b2:	1c5a      	adds	r2, r3, #1
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	b29a      	uxth	r2, r3
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c3ca:	bf00      	nop
 800c3cc:	370c      	adds	r7, #12
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr

0800c3d6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c3d6:	b480      	push	{r7}
 800c3d8:	b085      	sub	sp, #20
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3e4:	2b21      	cmp	r3, #33	; 0x21
 800c3e6:	d12f      	bne.n	800c448 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d110      	bne.n	800c416 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c402:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c412:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c414:	e018      	b.n	800c448 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c41a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	881b      	ldrh	r3, [r3, #0]
 800c420:	461a      	mov	r2, r3
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c42a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c430:	1c9a      	adds	r2, r3, #2
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	3b01      	subs	r3, #1
 800c440:	b29a      	uxth	r2, r3
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c448:	bf00      	nop
 800c44a:	3714      	adds	r7, #20
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr

0800c454 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c462:	2b21      	cmp	r3, #33	; 0x21
 800c464:	d13d      	bne.n	800c4e2 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c46c:	81fb      	strh	r3, [r7, #14]
 800c46e:	e035      	b.n	800c4dc <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c476:	b29b      	uxth	r3, r3
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d111      	bne.n	800c4a0 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	689a      	ldr	r2, [r3, #8]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c48a:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c49a:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c49c:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c49e:	e020      	b.n	800c4e2 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	69db      	ldr	r3, [r3, #28]
 800c4a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d013      	beq.n	800c4d6 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4b2:	781a      	ldrb	r2, [r3, #0]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4be:	1c5a      	adds	r2, r3, #1
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	b29a      	uxth	r2, r3
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c4d6:	89fb      	ldrh	r3, [r7, #14]
 800c4d8:	3b01      	subs	r3, #1
 800c4da:	81fb      	strh	r3, [r7, #14]
 800c4dc:	89fb      	ldrh	r3, [r7, #14]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d1c6      	bne.n	800c470 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800c4e2:	bf00      	nop
 800c4e4:	3714      	adds	r7, #20
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr

0800c4ee <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c4ee:	b480      	push	{r7}
 800c4f0:	b085      	sub	sp, #20
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4fc:	2b21      	cmp	r3, #33	; 0x21
 800c4fe:	d142      	bne.n	800c586 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c506:	81fb      	strh	r3, [r7, #14]
 800c508:	e03a      	b.n	800c580 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c510:	b29b      	uxth	r3, r3
 800c512:	2b00      	cmp	r3, #0
 800c514:	d111      	bne.n	800c53a <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	689a      	ldr	r2, [r3, #8]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c524:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c534:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c536:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c538:	e025      	b.n	800c586 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	69db      	ldr	r3, [r3, #28]
 800c540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c544:	2b00      	cmp	r3, #0
 800c546:	d018      	beq.n	800c57a <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c54c:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	881b      	ldrh	r3, [r3, #0]
 800c552:	461a      	mov	r2, r3
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c55c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c562:	1c9a      	adds	r2, r3, #2
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c56e:	b29b      	uxth	r3, r3
 800c570:	3b01      	subs	r3, #1
 800c572:	b29a      	uxth	r2, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c57a:	89fb      	ldrh	r3, [r7, #14]
 800c57c:	3b01      	subs	r3, #1
 800c57e:	81fb      	strh	r3, [r7, #14]
 800c580:	89fb      	ldrh	r3, [r7, #14]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d1c1      	bne.n	800c50a <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800c586:	bf00      	nop
 800c588:	3714      	adds	r7, #20
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr

0800c592 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b082      	sub	sp, #8
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2220      	movs	r2, #32
 800c5ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f7f4 fa03 	bl	80009c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5be:	bf00      	nop
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b084      	sub	sp, #16
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c5d4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5dc:	2b22      	cmp	r3, #34	; 0x22
 800c5de:	d13b      	bne.n	800c658 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c5e8:	89bb      	ldrh	r3, [r7, #12]
 800c5ea:	b2d9      	uxtb	r1, r3
 800c5ec:	89fb      	ldrh	r3, [r7, #14]
 800c5ee:	b2da      	uxtb	r2, r3
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5f4:	400a      	ands	r2, r1
 800c5f6:	b2d2      	uxtb	r2, r2
 800c5f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5fe:	1c5a      	adds	r2, r3, #1
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	3b01      	subs	r3, #1
 800c60e:	b29a      	uxth	r2, r3
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d122      	bne.n	800c668 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	681a      	ldr	r2, [r3, #0]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c630:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	689a      	ldr	r2, [r3, #8]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f022 0201 	bic.w	r2, r2, #1
 800c640:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2220      	movs	r2, #32
 800c646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f7f4 f9f9 	bl	8000a48 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c656:	e007      	b.n	800c668 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	699a      	ldr	r2, [r3, #24]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f042 0208 	orr.w	r2, r2, #8
 800c666:	619a      	str	r2, [r3, #24]
}
 800c668:	bf00      	nop
 800c66a:	3710      	adds	r7, #16
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c67e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c686:	2b22      	cmp	r3, #34	; 0x22
 800c688:	d13b      	bne.n	800c702 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c690:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c696:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c698:	89ba      	ldrh	r2, [r7, #12]
 800c69a:	89fb      	ldrh	r3, [r7, #14]
 800c69c:	4013      	ands	r3, r2
 800c69e:	b29a      	uxth	r2, r3
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6a8:	1c9a      	adds	r2, r3, #2
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6b4:	b29b      	uxth	r3, r3
 800c6b6:	3b01      	subs	r3, #1
 800c6b8:	b29a      	uxth	r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d122      	bne.n	800c712 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c6da:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	689a      	ldr	r2, [r3, #8]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f022 0201 	bic.w	r2, r2, #1
 800c6ea:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2220      	movs	r2, #32
 800c6f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f7f4 f9a4 	bl	8000a48 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c700:	e007      	b.n	800c712 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	699a      	ldr	r2, [r3, #24]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f042 0208 	orr.w	r2, r2, #8
 800c710:	619a      	str	r2, [r3, #24]
}
 800c712:	bf00      	nop
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
	...

0800c71c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c72a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c732:	2b22      	cmp	r3, #34	; 0x22
 800c734:	d166      	bne.n	800c804 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c73c:	81fb      	strh	r3, [r7, #14]
 800c73e:	e03d      	b.n	800c7bc <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c746:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c748:	893b      	ldrh	r3, [r7, #8]
 800c74a:	b2d9      	uxtb	r1, r3
 800c74c:	89bb      	ldrh	r3, [r7, #12]
 800c74e:	b2da      	uxtb	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c754:	400a      	ands	r2, r1
 800c756:	b2d2      	uxtb	r2, r2
 800c758:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c75e:	1c5a      	adds	r2, r3, #1
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	3b01      	subs	r3, #1
 800c76e:	b29a      	uxth	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d119      	bne.n	800c7b6 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	681a      	ldr	r2, [r3, #0]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c790:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	6899      	ldr	r1, [r3, #8]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	4b1f      	ldr	r3, [pc, #124]	; (800c81c <UART_RxISR_8BIT_FIFOEN+0x100>)
 800c79e:	400b      	ands	r3, r1
 800c7a0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2220      	movs	r2, #32
 800c7a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f7f4 f949 	bl	8000a48 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c7b6:	89fb      	ldrh	r3, [r7, #14]
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	81fb      	strh	r3, [r7, #14]
 800c7bc:	89fb      	ldrh	r3, [r7, #14]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d1be      	bne.n	800c740 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7c8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c7ca:	897b      	ldrh	r3, [r7, #10]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d021      	beq.n	800c814 <UART_RxISR_8BIT_FIFOEN+0xf8>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c7d6:	897a      	ldrh	r2, [r7, #10]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d21b      	bcs.n	800c814 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	689a      	ldr	r2, [r3, #8]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c7ea:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	4a0c      	ldr	r2, [pc, #48]	; (800c820 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800c7f0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f042 0220 	orr.w	r2, r2, #32
 800c800:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c802:	e007      	b.n	800c814 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	699a      	ldr	r2, [r3, #24]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f042 0208 	orr.w	r2, r2, #8
 800c812:	619a      	str	r2, [r3, #24]
}
 800c814:	bf00      	nop
 800c816:	3710      	adds	r7, #16
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	effffffe 	.word	0xeffffffe
 800c820:	0800c5c7 	.word	0x0800c5c7

0800c824 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b086      	sub	sp, #24
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c832:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c83a:	2b22      	cmp	r3, #34	; 0x22
 800c83c:	d166      	bne.n	800c90c <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c844:	82fb      	strh	r3, [r7, #22]
 800c846:	e03d      	b.n	800c8c4 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84e:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c854:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800c856:	8a3a      	ldrh	r2, [r7, #16]
 800c858:	8abb      	ldrh	r3, [r7, #20]
 800c85a:	4013      	ands	r3, r2
 800c85c:	b29a      	uxth	r2, r3
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c866:	1c9a      	adds	r2, r3, #2
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c872:	b29b      	uxth	r3, r3
 800c874:	3b01      	subs	r3, #1
 800c876:	b29a      	uxth	r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c884:	b29b      	uxth	r3, r3
 800c886:	2b00      	cmp	r3, #0
 800c888:	d119      	bne.n	800c8be <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c898:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	6899      	ldr	r1, [r3, #8]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	4b1f      	ldr	r3, [pc, #124]	; (800c924 <UART_RxISR_16BIT_FIFOEN+0x100>)
 800c8a6:	400b      	ands	r3, r1
 800c8a8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2220      	movs	r2, #32
 800c8ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f7f4 f8c5 	bl	8000a48 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c8be:	8afb      	ldrh	r3, [r7, #22]
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	82fb      	strh	r3, [r7, #22]
 800c8c4:	8afb      	ldrh	r3, [r7, #22]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d1be      	bne.n	800c848 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8d0:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c8d2:	8a7b      	ldrh	r3, [r7, #18]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d021      	beq.n	800c91c <UART_RxISR_16BIT_FIFOEN+0xf8>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c8de:	8a7a      	ldrh	r2, [r7, #18]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d21b      	bcs.n	800c91c <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	689a      	ldr	r2, [r3, #8]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c8f2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	4a0c      	ldr	r2, [pc, #48]	; (800c928 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800c8f8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f042 0220 	orr.w	r2, r2, #32
 800c908:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c90a:	e007      	b.n	800c91c <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	699a      	ldr	r2, [r3, #24]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f042 0208 	orr.w	r2, r2, #8
 800c91a:	619a      	str	r2, [r3, #24]
}
 800c91c:	bf00      	nop
 800c91e:	3718      	adds	r7, #24
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	effffffe 	.word	0xeffffffe
 800c928:	0800c671 	.word	0x0800c671

0800c92c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b083      	sub	sp, #12
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c934:	bf00      	nop
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr

0800c940 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c940:	b480      	push	{r7}
 800c942:	b083      	sub	sp, #12
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c948:	bf00      	nop
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c95c:	bf00      	nop
 800c95e:	370c      	adds	r7, #12
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr

0800c968 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c968:	b480      	push	{r7}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c976:	2b01      	cmp	r3, #1
 800c978:	d101      	bne.n	800c97e <HAL_UARTEx_DisableFifoMode+0x16>
 800c97a:	2302      	movs	r3, #2
 800c97c:	e027      	b.n	800c9ce <HAL_UARTEx_DisableFifoMode+0x66>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2201      	movs	r2, #1
 800c982:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2224      	movs	r2, #36	; 0x24
 800c98a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f022 0201 	bic.w	r2, r2, #1
 800c9a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c9ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	68fa      	ldr	r2, [r7, #12]
 800c9ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2220      	movs	r2, #32
 800c9c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c9cc:	2300      	movs	r3, #0
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3714      	adds	r7, #20
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr

0800c9da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b084      	sub	sp, #16
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
 800c9e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d101      	bne.n	800c9f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c9ee:	2302      	movs	r3, #2
 800c9f0:	e02d      	b.n	800ca4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2224      	movs	r2, #36	; 0x24
 800c9fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f022 0201 	bic.w	r2, r2, #1
 800ca18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	683a      	ldr	r2, [r7, #0]
 800ca2a:	430a      	orrs	r2, r1
 800ca2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 f850 	bl	800cad4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	68fa      	ldr	r2, [r7, #12]
 800ca3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2220      	movs	r2, #32
 800ca40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2200      	movs	r2, #0
 800ca48:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b084      	sub	sp, #16
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
 800ca5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d101      	bne.n	800ca6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ca6a:	2302      	movs	r3, #2
 800ca6c:	e02d      	b.n	800caca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2201      	movs	r2, #1
 800ca72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2224      	movs	r2, #36	; 0x24
 800ca7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f022 0201 	bic.w	r2, r2, #1
 800ca94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	683a      	ldr	r2, [r7, #0]
 800caa6:	430a      	orrs	r2, r1
 800caa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 f812 	bl	800cad4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	68fa      	ldr	r2, [r7, #12]
 800cab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2220      	movs	r2, #32
 800cabc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2200      	movs	r2, #0
 800cac4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cac8:	2300      	movs	r3, #0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3710      	adds	r7, #16
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
	...

0800cad4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b089      	sub	sp, #36	; 0x24
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800cadc:	4a2f      	ldr	r2, [pc, #188]	; (800cb9c <UARTEx_SetNbDataToProcess+0xc8>)
 800cade:	f107 0314 	add.w	r3, r7, #20
 800cae2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cae6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800caea:	4a2d      	ldr	r2, [pc, #180]	; (800cba0 <UARTEx_SetNbDataToProcess+0xcc>)
 800caec:	f107 030c 	add.w	r3, r7, #12
 800caf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800caf4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d108      	bne.n	800cb12 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2201      	movs	r2, #1
 800cb04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cb10:	e03d      	b.n	800cb8e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cb12:	2308      	movs	r3, #8
 800cb14:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cb16:	2308      	movs	r3, #8
 800cb18:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	689b      	ldr	r3, [r3, #8]
 800cb20:	0e5b      	lsrs	r3, r3, #25
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	f003 0307 	and.w	r3, r3, #7
 800cb28:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	0f5b      	lsrs	r3, r3, #29
 800cb32:	b2db      	uxtb	r3, r3
 800cb34:	f003 0307 	and.w	r3, r3, #7
 800cb38:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800cb3a:	7fbb      	ldrb	r3, [r7, #30]
 800cb3c:	7f3a      	ldrb	r2, [r7, #28]
 800cb3e:	f107 0120 	add.w	r1, r7, #32
 800cb42:	440a      	add	r2, r1
 800cb44:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800cb48:	fb02 f303 	mul.w	r3, r2, r3
 800cb4c:	7f3a      	ldrb	r2, [r7, #28]
 800cb4e:	f107 0120 	add.w	r1, r7, #32
 800cb52:	440a      	add	r2, r1
 800cb54:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800cb58:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb5c:	b29a      	uxth	r2, r3
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800cb64:	7ffb      	ldrb	r3, [r7, #31]
 800cb66:	7f7a      	ldrb	r2, [r7, #29]
 800cb68:	f107 0120 	add.w	r1, r7, #32
 800cb6c:	440a      	add	r2, r1
 800cb6e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800cb72:	fb02 f303 	mul.w	r3, r2, r3
 800cb76:	7f7a      	ldrb	r2, [r7, #29]
 800cb78:	f107 0120 	add.w	r1, r7, #32
 800cb7c:	440a      	add	r2, r1
 800cb7e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800cb82:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb86:	b29a      	uxth	r2, r3
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cb8e:	bf00      	nop
 800cb90:	3724      	adds	r7, #36	; 0x24
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop
 800cb9c:	0800cc14 	.word	0x0800cc14
 800cba0:	0800cc1c 	.word	0x0800cc1c

0800cba4 <__libc_init_array>:
 800cba4:	b570      	push	{r4, r5, r6, lr}
 800cba6:	4e0d      	ldr	r6, [pc, #52]	; (800cbdc <__libc_init_array+0x38>)
 800cba8:	4c0d      	ldr	r4, [pc, #52]	; (800cbe0 <__libc_init_array+0x3c>)
 800cbaa:	1ba4      	subs	r4, r4, r6
 800cbac:	10a4      	asrs	r4, r4, #2
 800cbae:	2500      	movs	r5, #0
 800cbb0:	42a5      	cmp	r5, r4
 800cbb2:	d109      	bne.n	800cbc8 <__libc_init_array+0x24>
 800cbb4:	4e0b      	ldr	r6, [pc, #44]	; (800cbe4 <__libc_init_array+0x40>)
 800cbb6:	4c0c      	ldr	r4, [pc, #48]	; (800cbe8 <__libc_init_array+0x44>)
 800cbb8:	f000 f820 	bl	800cbfc <_init>
 800cbbc:	1ba4      	subs	r4, r4, r6
 800cbbe:	10a4      	asrs	r4, r4, #2
 800cbc0:	2500      	movs	r5, #0
 800cbc2:	42a5      	cmp	r5, r4
 800cbc4:	d105      	bne.n	800cbd2 <__libc_init_array+0x2e>
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}
 800cbc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cbcc:	4798      	blx	r3
 800cbce:	3501      	adds	r5, #1
 800cbd0:	e7ee      	b.n	800cbb0 <__libc_init_array+0xc>
 800cbd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cbd6:	4798      	blx	r3
 800cbd8:	3501      	adds	r5, #1
 800cbda:	e7f2      	b.n	800cbc2 <__libc_init_array+0x1e>
 800cbdc:	0800cc44 	.word	0x0800cc44
 800cbe0:	0800cc44 	.word	0x0800cc44
 800cbe4:	0800cc44 	.word	0x0800cc44
 800cbe8:	0800cc48 	.word	0x0800cc48

0800cbec <memset>:
 800cbec:	4402      	add	r2, r0
 800cbee:	4603      	mov	r3, r0
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d100      	bne.n	800cbf6 <memset+0xa>
 800cbf4:	4770      	bx	lr
 800cbf6:	f803 1b01 	strb.w	r1, [r3], #1
 800cbfa:	e7f9      	b.n	800cbf0 <memset+0x4>

0800cbfc <_init>:
 800cbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbfe:	bf00      	nop
 800cc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc02:	bc08      	pop	{r3}
 800cc04:	469e      	mov	lr, r3
 800cc06:	4770      	bx	lr

0800cc08 <_fini>:
 800cc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc0a:	bf00      	nop
 800cc0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc0e:	bc08      	pop	{r3}
 800cc10:	469e      	mov	lr, r3
 800cc12:	4770      	bx	lr
