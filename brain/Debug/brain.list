
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bda4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800c03c  0800c03c  0001c03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c064  0800c064  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  0800c064  0800c064  0001c064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c06c  0800c06c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c06c  0800c06c  0001c06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c070  0800c070  0001c070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  24000000  0800c074  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  24000030  0800c0a4  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240006bc  0800c0a4  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000206c6  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002eed  00000000  00000000  00040724  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015c8  00000000  00000000  00043618  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b0  00000000  00000000  00044be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038692  00000000  00000000  00046090  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012210  00000000  00000000  0007e722  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00173839  00000000  00000000  00090932  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020416b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e20  00000000  00000000  002041e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000030 	.word	0x24000030
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c024 	.word	0x0800c024

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000034 	.word	0x24000034
 80002d4:	0800c024 	.word	0x0800c024

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayUs_Init+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <delayUs_Init+0x38>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <delayUs_Init+0x38>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delayUs_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delayUs_Init+0x3c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <delayUs_Init+0x3c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
    }
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000

08000618 <peripheralUART_Init>:
int trackingWait4CompassTx;
int trackingWait4CompassRx;
int trackingWait4SpinalCordTx;
int trackingWait4SpinalCordRx;
void peripheralUART_Init()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	4903      	ldr	r1, [pc, #12]	; (800062c <peripheralUART_Init+0x14>)
 8000620:	4803      	ldr	r0, [pc, #12]	; (8000630 <peripheralUART_Init+0x18>)
 8000622:	f008 fb2d 	bl	8008c80 <HAL_UART_Receive_IT>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	240005f4 	.word	0x240005f4
 8000630:	24000540 	.word	0x24000540

08000634 <compassReset>:

////////////////////////////////////////////////////////////
void compassReset(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <compassReset+0x1c>)
 800063a:	2261      	movs	r2, #97	; 0x61
 800063c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 800063e:	2201      	movs	r2, #1
 8000640:	4903      	ldr	r1, [pc, #12]	; (8000650 <compassReset+0x1c>)
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <compassReset+0x20>)
 8000644:	f008 fa98 	bl	8008b78 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 8000648:	f000 f83a 	bl	80006c0 <wait4CompassTx>
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	24000000 	.word	0x24000000
 8000654:	240003d0 	.word	0x240003d0

08000658 <compassRequest>:
void compassRequest(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'z';
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <compassRequest+0x24>)
 800065e:	227a      	movs	r2, #122	; 0x7a
 8000660:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 8000662:	2201      	movs	r2, #1
 8000664:	4905      	ldr	r1, [pc, #20]	; (800067c <compassRequest+0x24>)
 8000666:	4806      	ldr	r0, [pc, #24]	; (8000680 <compassRequest+0x28>)
 8000668:	f008 fa86 	bl	8008b78 <HAL_UART_Transmit_IT>
	trackingWait4CompassTx = 0;
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <compassRequest+0x2c>)
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
	wait4CompassTx();
 8000672:	f000 f825 	bl	80006c0 <wait4CompassTx>
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	24000000 	.word	0x24000000
 8000680:	240003d0 	.word	0x240003d0
 8000684:	240006b4 	.word	0x240006b4

08000688 <compassGetData>:
void compassGetData(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&compass, compassRxPacket, 2);
 800068c:	2202      	movs	r2, #2
 800068e:	4909      	ldr	r1, [pc, #36]	; (80006b4 <compassGetData+0x2c>)
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <compassGetData+0x30>)
 8000692:	f008 faf5 	bl	8008c80 <HAL_UART_Receive_IT>
	wait4CompassRx();
 8000696:	f000 f82b 	bl	80006f0 <wait4CompassRx>
//	HAL_UART_Receive(&compass, compassRxPacket, 2, 50);

	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <compassGetData+0x2c>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	021b      	lsls	r3, r3, #8
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <compassGetData+0x2c>)
 80006a4:	785b      	ldrb	r3, [r3, #1]
 80006a6:	b21b      	sxth	r3, r3
 80006a8:	4313      	orrs	r3, r2
 80006aa:	b21a      	sxth	r2, r3
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <compassGetData+0x34>)
 80006ae:	801a      	strh	r2, [r3, #0]
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	24000210 	.word	0x24000210
 80006b8:	240003d0 	.word	0x240003d0
 80006bc:	240002be 	.word	0x240002be

080006c0 <wait4CompassTx>:

void wait4CompassTx(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
	while(compassTxCplt == 0)
 80006c4:	e004      	b.n	80006d0 <wait4CompassTx+0x10>
	{
		trackingWait4CompassTx++;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <wait4CompassTx+0x28>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	3301      	adds	r3, #1
 80006cc:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <wait4CompassTx+0x28>)
 80006ce:	6013      	str	r3, [r2, #0]
	while(compassTxCplt == 0)
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <wait4CompassTx+0x2c>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0f6      	beq.n	80006c6 <wait4CompassTx+0x6>
	}
	compassTxCplt = 0;
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <wait4CompassTx+0x2c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	240006b4 	.word	0x240006b4
 80006ec:	240005f0 	.word	0x240005f0

080006f0 <wait4CompassRx>:

void wait4CompassRx(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	while(compassRxCplt == 0)
 80006f4:	e004      	b.n	8000700 <wait4CompassRx+0x10>
	{
		trackingWait4CompassRx++;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <wait4CompassRx+0x28>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	4a06      	ldr	r2, [pc, #24]	; (8000718 <wait4CompassRx+0x28>)
 80006fe:	6013      	str	r3, [r2, #0]
	while(compassRxCplt == 0)
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <wait4CompassRx+0x2c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0f6      	beq.n	80006f6 <wait4CompassRx+0x6>
	}
	compassRxCplt = 0;
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <wait4CompassRx+0x2c>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	240006a0 	.word	0x240006a0
 800071c:	240002d8 	.word	0x240002d8

08000720 <controlMotor1>:
int trackingControlMotor2;
int trackingControlMotor3;
int trackingControlMotor4;

void controlMotor1(int _speed)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor1Dir_Pin, motor1Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor1Speed] = abs(_speed);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	bfb8      	it	lt
 800072e:	425b      	neglt	r3, r3
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <controlMotor1+0x40>)
 8000734:	701a      	strb	r2, [r3, #0]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor1Dir] = ccw) : (spinalCordTxPacket[motor1Dir] = fcw);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db03      	blt.n	8000744 <controlMotor1+0x24>
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <controlMotor1+0x40>)
 800073e:	2200      	movs	r2, #0
 8000740:	711a      	strb	r2, [r3, #4]
 8000742:	e002      	b.n	800074a <controlMotor1+0x2a>
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <controlMotor1+0x40>)
 8000746:	2201      	movs	r2, #1
 8000748:	711a      	strb	r2, [r3, #4]
	trackingControlMotor1++;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <controlMotor1+0x44>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <controlMotor1+0x44>)
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	2400000c 	.word	0x2400000c
 8000764:	240003c0 	.word	0x240003c0

08000768 <controlMotor2>:
void controlMotor2(int _speed)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor2Dir_Pin, motor2Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor2Speed] = abs(_speed);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b00      	cmp	r3, #0
 8000774:	bfb8      	it	lt
 8000776:	425b      	neglt	r3, r3
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <controlMotor2+0x40>)
 800077c:	705a      	strb	r2, [r3, #1]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor2Dir] = ccw) : (spinalCordTxPacket[motor2Dir] = fcw);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b00      	cmp	r3, #0
 8000782:	db03      	blt.n	800078c <controlMotor2+0x24>
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <controlMotor2+0x40>)
 8000786:	2200      	movs	r2, #0
 8000788:	715a      	strb	r2, [r3, #5]
 800078a:	e002      	b.n	8000792 <controlMotor2+0x2a>
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <controlMotor2+0x40>)
 800078e:	2201      	movs	r2, #1
 8000790:	715a      	strb	r2, [r3, #5]
	trackingControlMotor2++;
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <controlMotor2+0x44>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <controlMotor2+0x44>)
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	2400000c 	.word	0x2400000c
 80007ac:	2400022c 	.word	0x2400022c

080007b0 <controlMotor3>:
void controlMotor3(int _speed)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor3Dir_Pin, motor3Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor3Speed] = abs(_speed);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	bfb8      	it	lt
 80007be:	425b      	neglt	r3, r3
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <controlMotor3+0x40>)
 80007c4:	709a      	strb	r2, [r3, #2]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor3Dir] = ccw) : (spinalCordTxPacket[motor3Dir] = fcw);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db03      	blt.n	80007d4 <controlMotor3+0x24>
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <controlMotor3+0x40>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	719a      	strb	r2, [r3, #6]
 80007d2:	e002      	b.n	80007da <controlMotor3+0x2a>
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <controlMotor3+0x40>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	719a      	strb	r2, [r3, #6]
	trackingControlMotor3++;
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <controlMotor3+0x44>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	3301      	adds	r3, #1
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <controlMotor3+0x44>)
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	2400000c 	.word	0x2400000c
 80007f4:	240001b8 	.word	0x240001b8

080007f8 <controlMotor4>:
void controlMotor4(int _speed)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor3Dir_Pin, motor3Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor4Speed] = abs(_speed);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	bfb8      	it	lt
 8000806:	425b      	neglt	r3, r3
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <controlMotor4+0x40>)
 800080c:	70da      	strb	r2, [r3, #3]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor4Dir] = ccw) : (spinalCordTxPacket[motor4Dir] = fcw);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b00      	cmp	r3, #0
 8000812:	db03      	blt.n	800081c <controlMotor4+0x24>
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <controlMotor4+0x40>)
 8000816:	2200      	movs	r2, #0
 8000818:	71da      	strb	r2, [r3, #7]
 800081a:	e002      	b.n	8000822 <controlMotor4+0x2a>
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <controlMotor4+0x40>)
 800081e:	2201      	movs	r2, #1
 8000820:	71da      	strb	r2, [r3, #7]
	trackingControlMotor4++;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <controlMotor4+0x44>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	3301      	adds	r3, #1
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <controlMotor4+0x44>)
 800082a:	6013      	str	r3, [r2, #0]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	2400000c 	.word	0x2400000c
 800083c:	240004f8 	.word	0x240004f8

08000840 <PIDyaw>:

double PIDyaw(int _yawValue, int _yawSetpoint)
{
 8000840:	b490      	push	{r4, r7}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
	yawError = _yawSetpoint - _yawValue;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	b29a      	uxth	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	b29b      	uxth	r3, r3
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	b29b      	uxth	r3, r3
 8000856:	b21a      	sxth	r2, r3
 8000858:	4b41      	ldr	r3, [pc, #260]	; (8000960 <PIDyaw+0x120>)
 800085a:	801a      	strh	r2, [r3, #0]
	yawP = yawError;
 800085c:	4b40      	ldr	r3, [pc, #256]	; (8000960 <PIDyaw+0x120>)
 800085e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000862:	ee07 3a90 	vmov	s15, r3
 8000866:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800086a:	4b3e      	ldr	r3, [pc, #248]	; (8000964 <PIDyaw+0x124>)
 800086c:	ed83 7b00 	vstr	d7, [r3]
	yawD = yawError - yawPreError;
 8000870:	4b3b      	ldr	r3, [pc, #236]	; (8000960 <PIDyaw+0x120>)
 8000872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000876:	461a      	mov	r2, r3
 8000878:	4b3b      	ldr	r3, [pc, #236]	; (8000968 <PIDyaw+0x128>)
 800087a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	ee07 3a90 	vmov	s15, r3
 8000884:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000888:	4b38      	ldr	r3, [pc, #224]	; (800096c <PIDyaw+0x12c>)
 800088a:	ed83 7b00 	vstr	d7, [r3]
	yawI = yawError + yawI;
 800088e:	4b34      	ldr	r3, [pc, #208]	; (8000960 <PIDyaw+0x120>)
 8000890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000894:	ee07 3a90 	vmov	s15, r3
 8000898:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800089c:	4b34      	ldr	r3, [pc, #208]	; (8000970 <PIDyaw+0x130>)
 800089e:	ed93 7b00 	vldr	d7, [r3]
 80008a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008a6:	4b32      	ldr	r3, [pc, #200]	; (8000970 <PIDyaw+0x130>)
 80008a8:	ed83 7b00 	vstr	d7, [r3]
	yawPID = yawKp*yawP + yawKd*yawD + yawKi*yawI;
 80008ac:	4b31      	ldr	r3, [pc, #196]	; (8000974 <PIDyaw+0x134>)
 80008ae:	ed93 6b00 	vldr	d6, [r3]
 80008b2:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <PIDyaw+0x124>)
 80008b4:	ed93 7b00 	vldr	d7, [r3]
 80008b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80008bc:	4b2e      	ldr	r3, [pc, #184]	; (8000978 <PIDyaw+0x138>)
 80008be:	ed93 5b00 	vldr	d5, [r3]
 80008c2:	4b2a      	ldr	r3, [pc, #168]	; (800096c <PIDyaw+0x12c>)
 80008c4:	ed93 7b00 	vldr	d7, [r3]
 80008c8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80008cc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008d0:	4b2a      	ldr	r3, [pc, #168]	; (800097c <PIDyaw+0x13c>)
 80008d2:	ed93 5b00 	vldr	d5, [r3]
 80008d6:	4b26      	ldr	r3, [pc, #152]	; (8000970 <PIDyaw+0x130>)
 80008d8:	ed93 7b00 	vldr	d7, [r3]
 80008dc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80008e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <PIDyaw+0x140>)
 80008e6:	ed83 7b00 	vstr	d7, [r3]
	if(yawPID > MAX_YAW_PID)
 80008ea:	4b25      	ldr	r3, [pc, #148]	; (8000980 <PIDyaw+0x140>)
 80008ec:	ed93 7b00 	vldr	d7, [r3]
 80008f0:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000950 <PIDyaw+0x110>
 80008f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80008f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008fc:	dd05      	ble.n	800090a <PIDyaw+0xca>
	{
		yawPID = MAX_YAW_PID;
 80008fe:	4a20      	ldr	r2, [pc, #128]	; (8000980 <PIDyaw+0x140>)
 8000900:	f04f 0300 	mov.w	r3, #0
 8000904:	4c1f      	ldr	r4, [pc, #124]	; (8000984 <PIDyaw+0x144>)
 8000906:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(yawPID < MIN_YAW_PID)
 800090a:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <PIDyaw+0x140>)
 800090c:	ed93 7b00 	vldr	d7, [r3]
 8000910:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000958 <PIDyaw+0x118>
 8000914:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800091c:	d505      	bpl.n	800092a <PIDyaw+0xea>
	{
		yawPID = MIN_YAW_PID;
 800091e:	4a18      	ldr	r2, [pc, #96]	; (8000980 <PIDyaw+0x140>)
 8000920:	f04f 0300 	mov.w	r3, #0
 8000924:	4c18      	ldr	r4, [pc, #96]	; (8000988 <PIDyaw+0x148>)
 8000926:	e9c2 3400 	strd	r3, r4, [r2]
	}
	yawPreError = yawError;
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <PIDyaw+0x120>)
 800092c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000930:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <PIDyaw+0x128>)
 8000932:	801a      	strh	r2, [r3, #0]
	return yawPID;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <PIDyaw+0x140>)
 8000936:	e9d3 3400 	ldrd	r3, r4, [r3]
 800093a:	ec44 3b17 	vmov	d7, r3, r4
}
 800093e:	eeb0 0b47 	vmov.f64	d0, d7
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bc90      	pop	{r4, r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	f3af 8000 	nop.w
 8000950:	00000000 	.word	0x00000000
 8000954:	40590000 	.word	0x40590000
 8000958:	00000000 	.word	0x00000000
 800095c:	c0590000 	.word	0xc0590000
 8000960:	240002b8 	.word	0x240002b8
 8000964:	240002c0 	.word	0x240002c0
 8000968:	24000128 	.word	0x24000128
 800096c:	24000070 	.word	0x24000070
 8000970:	240002b0 	.word	0x240002b0
 8000974:	24000018 	.word	0x24000018
 8000978:	24000050 	.word	0x24000050
 800097c:	24000058 	.word	0x24000058
 8000980:	24000538 	.word	0x24000538
 8000984:	40590000 	.word	0x40590000
 8000988:	c0590000 	.word	0xc0590000

0800098c <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <positionControl_Init+0x1c>)
 8000992:	f007 fc81 	bl	8008298 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&leftArm);
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <positionControl_Init+0x20>)
 8000998:	f007 fc7e 	bl	8008298 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&rigtArm);
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <positionControl_Init+0x24>)
 800099e:	f007 fc7b 	bl	8008298 <HAL_TIM_Base_Start_IT>
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000660 	.word	0x24000660
 80009ac:	240001c0 	.word	0x240001c0
 80009b0:	24000618 	.word	0x24000618

080009b4 <HAL_UART_TxCpltCallback>:
//include cuối "USER CODE BEGIN 0"
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_UART_TxCpltCallback+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d103      	bne.n	80009d0 <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt = 1;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <HAL_UART_TxCpltCallback+0x68>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == manualRobot.Instance)
	{
		manualRobotTxCplt = 1;
	}
}
 80009ce:	e01c      	b.n	8000a0a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_UART_TxCpltCallback+0x6c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d103      	bne.n	80009e4 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt = 1;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_UART_TxCpltCallback+0x70>)
 80009de:	2201      	movs	r2, #1
 80009e0:	701a      	strb	r2, [r3, #0]
}
 80009e2:	e012      	b.n	8000a0a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_UART_TxCpltCallback+0x74>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d103      	bne.n	80009f8 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt = 1;
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_UART_TxCpltCallback+0x78>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]
}
 80009f6:	e008      	b.n	8000a0a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == manualRobot.Instance)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_UART_TxCpltCallback+0x7c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d102      	bne.n	8000a0a <HAL_UART_TxCpltCallback+0x56>
		manualRobotTxCplt = 1;
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_UART_TxCpltCallback+0x80>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	240003d0 	.word	0x240003d0
 8000a1c:	240005f0 	.word	0x240005f0
 8000a20:	2400012c 	.word	0x2400012c
 8000a24:	24000228 	.word	0x24000228
 8000a28:	24000540 	.word	0x24000540
 8000a2c:	24000470 	.word	0x24000470
 8000a30:	2400007c 	.word	0x2400007c
 8000a34:	2400050c 	.word	0x2400050c

08000a38 <HAL_UART_RxCpltCallback>:
int trackingReceiSpinalCord;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <HAL_UART_RxCpltCallback+0x84>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d103      	bne.n	8000a54 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt = 1;
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <HAL_UART_RxCpltCallback+0x88>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == manualRobot.Instance)
	{
		manualRobotRxCplt = 1;
	}
}
 8000a52:	e02f      	b.n	8000ab4 <HAL_UART_RxCpltCallback+0x7c>
	else if(huart->Instance == PS2.Instance)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <HAL_UART_RxCpltCallback+0x8c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d103      	bne.n	8000a68 <HAL_UART_RxCpltCallback+0x30>
		PS2RxCplt = 1;
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <HAL_UART_RxCpltCallback+0x90>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]
}
 8000a66:	e025      	b.n	8000ab4 <HAL_UART_RxCpltCallback+0x7c>
	else if(huart->Instance == spinalCord.Instance)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <HAL_UART_RxCpltCallback+0x94>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d116      	bne.n	8000aa2 <HAL_UART_RxCpltCallback+0x6a>
		if(spinalCordRxPacket[0]!=0)
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <HAL_UART_RxCpltCallback+0x98>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d009      	beq.n	8000a90 <HAL_UART_RxCpltCallback+0x58>
			trackingReceiSpinalCord++;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_UART_RxCpltCallback+0x9c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <HAL_UART_RxCpltCallback+0x9c>)
 8000a84:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_IT(&spinalCord, spinalCordTxPacket, 9);
 8000a86:	2209      	movs	r2, #9
 8000a88:	4913      	ldr	r1, [pc, #76]	; (8000ad8 <HAL_UART_RxCpltCallback+0xa0>)
 8000a8a:	4810      	ldr	r0, [pc, #64]	; (8000acc <HAL_UART_RxCpltCallback+0x94>)
 8000a8c:	f008 f874 	bl	8008b78 <HAL_UART_Transmit_IT>
		spinalCordRxCplt = 1;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_UART_RxCpltCallback+0xa4>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 8000a96:	2201      	movs	r2, #1
 8000a98:	490d      	ldr	r1, [pc, #52]	; (8000ad0 <HAL_UART_RxCpltCallback+0x98>)
 8000a9a:	480c      	ldr	r0, [pc, #48]	; (8000acc <HAL_UART_RxCpltCallback+0x94>)
 8000a9c:	f008 f8f0 	bl	8008c80 <HAL_UART_Receive_IT>
}
 8000aa0:	e008      	b.n	8000ab4 <HAL_UART_RxCpltCallback+0x7c>
	else if(huart->Instance == manualRobot.Instance)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_UART_RxCpltCallback+0xa8>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d102      	bne.n	8000ab4 <HAL_UART_RxCpltCallback+0x7c>
		manualRobotRxCplt = 1;
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_UART_RxCpltCallback+0xac>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	701a      	strb	r2, [r3, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	240003d0 	.word	0x240003d0
 8000ac0:	240002d8 	.word	0x240002d8
 8000ac4:	2400012c 	.word	0x2400012c
 8000ac8:	24000471 	.word	0x24000471
 8000acc:	24000540 	.word	0x24000540
 8000ad0:	240005f4 	.word	0x240005f4
 8000ad4:	2400065c 	.word	0x2400065c
 8000ad8:	2400000c 	.word	0x2400000c
 8000adc:	24000658 	.word	0x24000658
 8000ae0:	2400007c 	.word	0x2400007c
 8000ae4:	24000348 	.word	0x24000348

08000ae8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4ba3      	ldr	r3, [pc, #652]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	f040 8170 	bne.w	8000dde <HAL_TIM_PeriodElapsedCallback+0x2f6>
	{
		if(legEn == 1)
 8000afe:	4ba2      	ldr	r3, [pc, #648]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d16b      	bne.n	8000bde <HAL_TIM_PeriodElapsedCallback+0xf6>
		{
			if(legStatus == legInitShoot)
 8000b06:	4ba1      	ldr	r3, [pc, #644]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d11f      	bne.n	8000b4e <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b14:	489e      	ldr	r0, [pc, #632]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b16:	f004 fd15 	bl	8005544 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);
 8000b1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b1e:	489c      	ldr	r0, [pc, #624]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b20:	f004 fd29 	bl	8005576 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000b24:	4b9b      	ldr	r3, [pc, #620]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	4a9a      	ldr	r2, [pc, #616]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b2c:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;
 8000b2e:	4b9a      	ldr	r3, [pc, #616]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	4a98      	ldr	r2, [pc, #608]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b36:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legInitShootPulse)
 8000b38:	4b97      	ldr	r3, [pc, #604]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000b40:	db05      	blt.n	8000b4e <HAL_TIM_PeriodElapsedCallback+0x66>
				{
					legEn = 0;
 8000b42:	4b91      	ldr	r3, [pc, #580]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;
 8000b48:	4b93      	ldr	r3, [pc, #588]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legReInitShoot)
 8000b4e:	4b8f      	ldr	r3, [pc, #572]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d11f      	bne.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0xae>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b5c:	488c      	ldr	r0, [pc, #560]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b5e:	f004 fcf1 	bl	8005544 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);
 8000b62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b66:	488a      	ldr	r0, [pc, #552]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b68:	f004 fd05 	bl	8005576 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000b6c:	4b89      	ldr	r3, [pc, #548]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	3301      	adds	r3, #1
 8000b72:	4a88      	ldr	r2, [pc, #544]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b74:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;
 8000b76:	4b88      	ldr	r3, [pc, #544]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	4a86      	ldr	r2, [pc, #536]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b7e:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legReInitShootPulse)
 8000b80:	4b85      	ldr	r3, [pc, #532]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000b88:	db05      	blt.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0xae>
				{
					legEn = 0;
 8000b8a:	4b7f      	ldr	r3, [pc, #508]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;
 8000b90:	4b81      	ldr	r3, [pc, #516]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 8000b96:	4b7d      	ldr	r3, [pc, #500]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d11f      	bne.n	8000bde <HAL_TIM_PeriodElapsedCallback+0xf6>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba4:	487a      	ldr	r0, [pc, #488]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000ba6:	f004 fccd 	bl	8005544 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);
 8000baa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bae:	4878      	ldr	r0, [pc, #480]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000bb0:	f004 fce1 	bl	8005576 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000bb4:	4b77      	ldr	r3, [pc, #476]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	4a76      	ldr	r2, [pc, #472]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000bbc:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;
 8000bbe:	4b76      	ldr	r3, [pc, #472]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	4a74      	ldr	r2, [pc, #464]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000bc6:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legEndPulse)
 8000bc8:	4b73      	ldr	r3, [pc, #460]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000bd0:	db05      	blt.n	8000bde <HAL_TIM_PeriodElapsedCallback+0xf6>
				{
					legEn = 0;
 8000bd2:	4b6d      	ldr	r3, [pc, #436]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;
 8000bd8:	4b6f      	ldr	r3, [pc, #444]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if(rigtArmEn == 1)
 8000bde:	4b6f      	ldr	r3, [pc, #444]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d16b      	bne.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x1d6>
		{
			if(rigtArmStatus == rigtArmInit)
 8000be6:	4b6e      	ldr	r3, [pc, #440]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d11f      	bne.n	8000c2e <HAL_TIM_PeriodElapsedCallback+0x146>
			{
				HAL_GPIO_WritePin(rigtArmDir_GPIO_Port, rigtArmDir_Pin, rigtArm_CCW);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf4:	486b      	ldr	r0, [pc, #428]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000bf6:	f004 fca5 	bl	8005544 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(rigtArmPul_GPIO_Port, rigtArmPul_Pin);
 8000bfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bfe:	4869      	ldr	r0, [pc, #420]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c00:	f004 fcb9 	bl	8005576 <HAL_GPIO_TogglePin>
				trackingRigtArm++;
 8000c04:	4b68      	ldr	r3, [pc, #416]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	4a67      	ldr	r2, [pc, #412]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c0c:	6013      	str	r3, [r2, #0]
				rigtArmElapsedPulses++;
 8000c0e:	4b67      	ldr	r3, [pc, #412]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	3301      	adds	r3, #1
 8000c14:	4a65      	ldr	r2, [pc, #404]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c16:	6013      	str	r3, [r2, #0]
				if (rigtArmElapsedPulses >= rigtArmInitPulse)
 8000c18:	4b64      	ldr	r3, [pc, #400]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000c20:	db05      	blt.n	8000c2e <HAL_TIM_PeriodElapsedCallback+0x146>
				{
					rigtArmEn = 0;
 8000c22:	4b5e      	ldr	r3, [pc, #376]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
					rigtArmElapsedPulses = 0;
 8000c28:	4b60      	ldr	r3, [pc, #384]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
				}
			}
			if(rigtArmStatus == rigtArmSetBall)
 8000c2e:	4b5c      	ldr	r3, [pc, #368]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d11f      	bne.n	8000c76 <HAL_TIM_PeriodElapsedCallback+0x18e>
			{
				HAL_GPIO_WritePin(rigtArmDir_GPIO_Port, rigtArmDir_Pin, rigtArm_CCW);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3c:	4859      	ldr	r0, [pc, #356]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c3e:	f004 fc81 	bl	8005544 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(rigtArmPul_GPIO_Port, rigtArmPul_Pin);
 8000c42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c46:	4857      	ldr	r0, [pc, #348]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c48:	f004 fc95 	bl	8005576 <HAL_GPIO_TogglePin>
				trackingRigtArm++;
 8000c4c:	4b56      	ldr	r3, [pc, #344]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	3301      	adds	r3, #1
 8000c52:	4a55      	ldr	r2, [pc, #340]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c54:	6013      	str	r3, [r2, #0]
				rigtArmElapsedPulses++;
 8000c56:	4b55      	ldr	r3, [pc, #340]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	4a53      	ldr	r2, [pc, #332]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c5e:	6013      	str	r3, [r2, #0]
				if (rigtArmElapsedPulses >= rigtArmSetBallPulse)
 8000c60:	4b52      	ldr	r3, [pc, #328]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c68:	db05      	blt.n	8000c76 <HAL_TIM_PeriodElapsedCallback+0x18e>
				{
					rigtArmEn = 0;
 8000c6a:	4b4c      	ldr	r3, [pc, #304]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
					rigtArmElapsedPulses = 0;
 8000c70:	4b4e      	ldr	r3, [pc, #312]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
				}
			}
			if(rigtArmStatus == rigtArmReturn)
 8000c76:	4b4a      	ldr	r3, [pc, #296]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d11f      	bne.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x1d6>
			{
				HAL_GPIO_WritePin(rigtArmDir_GPIO_Port, rigtArmDir_Pin, rigtArm_FCW);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c84:	4847      	ldr	r0, [pc, #284]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c86:	f004 fc5d 	bl	8005544 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(rigtArmPul_GPIO_Port, rigtArmPul_Pin);
 8000c8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c8e:	4845      	ldr	r0, [pc, #276]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c90:	f004 fc71 	bl	8005576 <HAL_GPIO_TogglePin>
				trackingRigtArm++;
 8000c94:	4b44      	ldr	r3, [pc, #272]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	4a43      	ldr	r2, [pc, #268]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c9c:	6013      	str	r3, [r2, #0]
				rigtArmElapsedPulses++;
 8000c9e:	4b43      	ldr	r3, [pc, #268]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	4a41      	ldr	r2, [pc, #260]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000ca6:	6013      	str	r3, [r2, #0]
				if (rigtArmElapsedPulses >= rigtArmSetBallPulse)
 8000ca8:	4b40      	ldr	r3, [pc, #256]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000cb0:	db05      	blt.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x1d6>
				{
					rigtArmEn = 0;
 8000cb2:	4b3a      	ldr	r3, [pc, #232]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
					rigtArmElapsedPulses = 0;
 8000cb8:	4b3c      	ldr	r3, [pc, #240]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if(leftArmEn == 1)
 8000cbe:	4b3c      	ldr	r3, [pc, #240]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	f040 808b 	bne.w	8000dde <HAL_TIM_PeriodElapsedCallback+0x2f6>
		{
			if(leftArmStatus == leftArmInit)
 8000cc8:	4b3a      	ldr	r3, [pc, #232]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d11e      	bne.n	8000d0e <HAL_TIM_PeriodElapsedCallback+0x226>
			{
				HAL_GPIO_WritePin(leftArmDir_GPIO_Port, leftArmDir_Pin, leftArm_CCW);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd6:	4833      	ldr	r0, [pc, #204]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000cd8:	f004 fc34 	bl	8005544 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(leftArmPul_GPIO_Port, leftArmPul_Pin);
 8000cdc:	2102      	movs	r1, #2
 8000cde:	4836      	ldr	r0, [pc, #216]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000ce0:	f004 fc49 	bl	8005576 <HAL_GPIO_TogglePin>
				trackingLeftArm++;
 8000ce4:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	4a34      	ldr	r2, [pc, #208]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000cec:	6013      	str	r3, [r2, #0]
				leftArmElapsedPulses++;
 8000cee:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	4a32      	ldr	r2, [pc, #200]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000cf6:	6013      	str	r3, [r2, #0]
				if (leftArmElapsedPulses >= leftArmInitPulse)
 8000cf8:	4b31      	ldr	r3, [pc, #196]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000d00:	db05      	blt.n	8000d0e <HAL_TIM_PeriodElapsedCallback+0x226>
				{
					leftArmEn = 0;
 8000d02:	4b2b      	ldr	r3, [pc, #172]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
					leftArmElapsedPulses = 0;
 8000d08:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
				}
			}
			if(leftArmStatus == leftArmSetBall)
 8000d0e:	4b29      	ldr	r3, [pc, #164]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d11e      	bne.n	8000d54 <HAL_TIM_PeriodElapsedCallback+0x26c>
			{
				HAL_GPIO_WritePin(leftArmDir_GPIO_Port, leftArmDir_Pin, leftArm_CCW);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d1c:	4821      	ldr	r0, [pc, #132]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000d1e:	f004 fc11 	bl	8005544 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(leftArmPul_GPIO_Port, leftArmPul_Pin);
 8000d22:	2102      	movs	r1, #2
 8000d24:	4824      	ldr	r0, [pc, #144]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000d26:	f004 fc26 	bl	8005576 <HAL_GPIO_TogglePin>
				trackingLeftArm++;
 8000d2a:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	4a22      	ldr	r2, [pc, #136]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000d32:	6013      	str	r3, [r2, #0]
				leftArmElapsedPulses++;
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	4a21      	ldr	r2, [pc, #132]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d3c:	6013      	str	r3, [r2, #0]
				if (leftArmElapsedPulses >= leftArmSetBallPulse)
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000d46:	db05      	blt.n	8000d54 <HAL_TIM_PeriodElapsedCallback+0x26c>
				{
					leftArmEn = 0;
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
					leftArmElapsedPulses = 0;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
				}
			}
			if(leftArmStatus == leftArmReturn)
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d140      	bne.n	8000dde <HAL_TIM_PeriodElapsedCallback+0x2f6>
			{
				HAL_GPIO_WritePin(leftArmDir_GPIO_Port, leftArmDir_Pin, leftArm_FCW);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d62:	4810      	ldr	r0, [pc, #64]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000d64:	f004 fbee 	bl	8005544 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(leftArmPul_GPIO_Port, leftArmPul_Pin);
 8000d68:	2102      	movs	r1, #2
 8000d6a:	4813      	ldr	r0, [pc, #76]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000d6c:	f004 fc03 	bl	8005576 <HAL_GPIO_TogglePin>
				trackingLeftArm++;
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	4a11      	ldr	r2, [pc, #68]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000d78:	6013      	str	r3, [r2, #0]
				leftArmElapsedPulses++;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	e020      	b.n	8000dc4 <HAL_TIM_PeriodElapsedCallback+0x2dc>
 8000d82:	bf00      	nop
 8000d84:	24000660 	.word	0x24000660
 8000d88:	24000464 	.word	0x24000464
 8000d8c:	240005d4 	.word	0x240005d4
 8000d90:	58020c00 	.word	0x58020c00
 8000d94:	2400045c 	.word	0x2400045c
 8000d98:	24000518 	.word	0x24000518
 8000d9c:	24000508 	.word	0x24000508
 8000da0:	24000078 	.word	0x24000078
 8000da4:	58021800 	.word	0x58021800
 8000da8:	240005d8 	.word	0x240005d8
 8000dac:	2400052c 	.word	0x2400052c
 8000db0:	240006a4 	.word	0x240006a4
 8000db4:	240004ec 	.word	0x240004ec
 8000db8:	58021000 	.word	0x58021000
 8000dbc:	24000600 	.word	0x24000600
 8000dc0:	240002dc 	.word	0x240002dc
 8000dc4:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000dc6:	6013      	str	r3, [r2, #0]
				if (leftArmElapsedPulses >= leftArmSetBallPulse)
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000dd0:	db05      	blt.n	8000dde <HAL_TIM_PeriodElapsedCallback+0x2f6>
				{
					leftArmEn = 0;
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
					leftArmElapsedPulses = 0;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == leftArm.Instance)
	{

	}
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	240002dc 	.word	0x240002dc
 8000dec:	240006a4 	.word	0x240006a4

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df4:	f001 f8de 	bl	8001fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df8:	f000 f872 	bl	8000ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfc:	f000 fc2e 	bl	800165c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e00:	f000 fc04 	bl	800160c <MX_DMA_Init>
  MX_ADC1_Init();
 8000e04:	f000 f922 	bl	800104c <MX_ADC1_Init>
  MX_ADC3_Init();
 8000e08:	f000 f9a8 	bl	800115c <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8000e0c:	f000 fb1a 	bl	8001444 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000e10:	f000 fb64 	bl	80014dc <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000e14:	f000 fa06 	bl	8001224 <MX_TIM7_Init>
  MX_TIM12_Init();
 8000e18:	f000 fa3c 	bl	8001294 <MX_TIM12_Init>
  MX_TIM15_Init();
 8000e1c:	f000 fa74 	bl	8001308 <MX_TIM15_Init>
  MX_UART7_Init();
 8000e20:	f000 fac4 	bl	80013ac <MX_UART7_Init>
  MX_USART6_UART_Init();
 8000e24:	f000 fba6 	bl	8001574 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  peripheralUART_Init();
 8000e28:	f7ff fbf6 	bl	8000618 <peripheralUART_Init>
  compassReset();
 8000e2c:	f7ff fc02 	bl	8000634 <compassReset>
  delayUs_Init();
 8000e30:	f7ff fbd2 	bl	80005d8 <delayUs_Init>
  positionControl_Init();
 8000e34:	f7ff fdaa 	bl	800098c <positionControl_Init>

//  legEn = 1;
//  legStatus = legInitShoot;
//  leftArmEn = 1;
//  leftArmStatus = leftArmInit;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4823      	ldr	r0, [pc, #140]	; (8000ecc <main+0xdc>)
 8000e3e:	f004 fb81 	bl	8005544 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000e42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e46:	f001 f947 	bl	80020d8 <HAL_Delay>
//	  HAL_Delay(5000);
//	  HAL_Delay(500);



	  compassRequest();
 8000e4a:	f7ff fc05 	bl	8000658 <compassRequest>
	  compassGetData();
 8000e4e:	f7ff fc1b 	bl	8000688 <compassGetData>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2101      	movs	r1, #1
 8000e56:	481d      	ldr	r0, [pc, #116]	; (8000ecc <main+0xdc>)
 8000e58:	f004 fb74 	bl	8005544 <HAL_GPIO_WritePin>
	  PIDyaw(300, compassData);
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <main+0xe0>)
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	4619      	mov	r1, r3
 8000e64:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e68:	f7ff fcea 	bl	8000840 <PIDyaw>
	  controlMotor1(yawPID);
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <main+0xe4>)
 8000e6e:	ed93 7b00 	vldr	d7, [r3]
 8000e72:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e76:	ee17 0a90 	vmov	r0, s15
 8000e7a:	f7ff fc51 	bl	8000720 <controlMotor1>
	  controlMotor2(yawPID);
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <main+0xe4>)
 8000e80:	ed93 7b00 	vldr	d7, [r3]
 8000e84:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e88:	ee17 0a90 	vmov	r0, s15
 8000e8c:	f7ff fc6c 	bl	8000768 <controlMotor2>
	  controlMotor3(yawPID);
 8000e90:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <main+0xe4>)
 8000e92:	ed93 7b00 	vldr	d7, [r3]
 8000e96:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e9a:	ee17 0a90 	vmov	r0, s15
 8000e9e:	f7ff fc87 	bl	80007b0 <controlMotor3>
	  controlMotor4(yawPID);
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <main+0xe4>)
 8000ea4:	ed93 7b00 	vldr	d7, [r3]
 8000ea8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000eac:	ee17 0a90 	vmov	r0, s15
 8000eb0:	f7ff fca2 	bl	80007f8 <controlMotor4>
	  spinalCordTxPacket[8] = compassData;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <main+0xe0>)
 8000eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <main+0xe8>)
 8000ebe:	721a      	strb	r2, [r3, #8]
	  tracking++;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <main+0xec>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <main+0xec>)
 8000ec8:	6013      	str	r3, [r2, #0]
	  compassRequest();
 8000eca:	e7be      	b.n	8000e4a <main+0x5a>
 8000ecc:	58020400 	.word	0x58020400
 8000ed0:	240002be 	.word	0x240002be
 8000ed4:	24000538 	.word	0x24000538
 8000ed8:	2400000c 	.word	0x2400000c
 8000edc:	240004f0 	.word	0x240004f0

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b0cc      	sub	sp, #304	; 0x130
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000eea:	224c      	movs	r2, #76	; 0x4c
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f00b f890 	bl	800c014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ef8:	2220      	movs	r2, #32
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f00b f889 	bl	800c014 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	4618      	mov	r0, r3
 8000f08:	23bc      	movs	r3, #188	; 0xbc
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f00b f881 	bl	800c014 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f12:	2002      	movs	r0, #2
 8000f14:	f004 fb4a 	bl	80055ac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	4b49      	ldr	r3, [pc, #292]	; (8001044 <SystemClock_Config+0x164>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	4a48      	ldr	r2, [pc, #288]	; (8001044 <SystemClock_Config+0x164>)
 8000f24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f28:	6193      	str	r3, [r2, #24]
 8000f2a:	4b46      	ldr	r3, [pc, #280]	; (8001044 <SystemClock_Config+0x164>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	4b44      	ldr	r3, [pc, #272]	; (8001048 <SystemClock_Config+0x168>)
 8000f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3a:	4a43      	ldr	r2, [pc, #268]	; (8001048 <SystemClock_Config+0x168>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f42:	4b41      	ldr	r3, [pc, #260]	; (8001048 <SystemClock_Config+0x168>)
 8000f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f46:	f003 0201 	and.w	r2, r3, #1
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f52:	bf00      	nop
 8000f54:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <SystemClock_Config+0x164>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f60:	d1f8      	bne.n	8000f54 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f62:	2302      	movs	r3, #2
 8000f64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f6e:	2340      	movs	r3, #64	; 0x40
 8000f70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f74:	2302      	movs	r3, #2
 8000f76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f80:	2304      	movs	r3, #4
 8000f82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000f86:	233c      	movs	r3, #60	; 0x3c
 8000f88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f9e:	230c      	movs	r3, #12
 8000fa0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f004 fb33 	bl	8005620 <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000fc0:	f000 fc54 	bl	800186c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc4:	233f      	movs	r3, #63	; 0x3f
 8000fc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fdc:	2340      	movs	r3, #64	; 0x40
 8000fde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fe2:	2340      	movs	r3, #64	; 0x40
 8000fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ff0:	2340      	movs	r3, #64	; 0x40
 8000ff2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ff6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f004 fee7 	bl	8005dd0 <HAL_RCC_ClockConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001008:	f000 fc30 	bl	800186c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	2203      	movs	r2, #3
 8001012:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	2200      	movs	r2, #0
 800101a:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	2200      	movs	r2, #0
 8001022:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	4618      	mov	r0, r3
 800102a:	f005 fa55 	bl	80064d8 <HAL_RCCEx_PeriphCLKConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8001034:	f000 fc1a 	bl	800186c <Error_Handler>
  }
}
 8001038:	bf00      	nop
 800103a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	58024800 	.word	0x58024800
 8001048:	58000400 	.word	0x58000400

0800104c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800105e:	463b      	mov	r3, r7
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
 800106c:	615a      	str	r2, [r3, #20]
 800106e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001070:	4b36      	ldr	r3, [pc, #216]	; (800114c <MX_ADC1_Init+0x100>)
 8001072:	4a37      	ldr	r2, [pc, #220]	; (8001150 <MX_ADC1_Init+0x104>)
 8001074:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001076:	4b35      	ldr	r3, [pc, #212]	; (800114c <MX_ADC1_Init+0x100>)
 8001078:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800107c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800107e:	4b33      	ldr	r3, [pc, #204]	; (800114c <MX_ADC1_Init+0x100>)
 8001080:	2208      	movs	r2, #8
 8001082:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001084:	4b31      	ldr	r3, [pc, #196]	; (800114c <MX_ADC1_Init+0x100>)
 8001086:	2201      	movs	r2, #1
 8001088:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108a:	4b30      	ldr	r3, [pc, #192]	; (800114c <MX_ADC1_Init+0x100>)
 800108c:	2204      	movs	r2, #4
 800108e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001090:	4b2e      	ldr	r3, [pc, #184]	; (800114c <MX_ADC1_Init+0x100>)
 8001092:	2200      	movs	r2, #0
 8001094:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001096:	4b2d      	ldr	r3, [pc, #180]	; (800114c <MX_ADC1_Init+0x100>)
 8001098:	2200      	movs	r2, #0
 800109a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 800109c:	4b2b      	ldr	r3, [pc, #172]	; (800114c <MX_ADC1_Init+0x100>)
 800109e:	2202      	movs	r2, #2
 80010a0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a2:	4b2a      	ldr	r3, [pc, #168]	; (800114c <MX_ADC1_Init+0x100>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a8:	4b28      	ldr	r3, [pc, #160]	; (800114c <MX_ADC1_Init+0x100>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ae:	4b27      	ldr	r3, [pc, #156]	; (800114c <MX_ADC1_Init+0x100>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <MX_ADC1_Init+0x100>)
 80010b6:	2203      	movs	r2, #3
 80010b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <MX_ADC1_Init+0x100>)
 80010bc:	2200      	movs	r2, #0
 80010be:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <MX_ADC1_Init+0x100>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <MX_ADC1_Init+0x100>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ce:	481f      	ldr	r0, [pc, #124]	; (800114c <MX_ADC1_Init+0x100>)
 80010d0:	f001 f9c6 	bl	8002460 <HAL_ADC_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80010da:	f000 fbc7 	bl	800186c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	4619      	mov	r1, r3
 80010e8:	4818      	ldr	r0, [pc, #96]	; (800114c <MX_ADC1_Init+0x100>)
 80010ea:	f001 ff8b 	bl	8003004 <HAL_ADCEx_MultiModeConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010f4:	f000 fbba 	bl	800186c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_ADC1_Init+0x108>)
 80010fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010fc:	2306      	movs	r3, #6
 80010fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001104:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001108:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800110a:	2304      	movs	r3, #4
 800110c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001112:	463b      	mov	r3, r7
 8001114:	4619      	mov	r1, r3
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <MX_ADC1_Init+0x100>)
 8001118:	f001 fb42 	bl	80027a0 <HAL_ADC_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001122:	f000 fba3 	bl	800186c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_ADC1_Init+0x10c>)
 8001128:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800112a:	230c      	movs	r3, #12
 800112c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112e:	463b      	mov	r3, r7
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	; (800114c <MX_ADC1_Init+0x100>)
 8001134:	f001 fb34 	bl	80027a0 <HAL_ADC_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 800113e:	f000 fb95 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	; 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	240002e4 	.word	0x240002e4
 8001150:	40022000 	.word	0x40022000
 8001154:	2a000400 	.word	0x2a000400
 8001158:	3ef08000 	.word	0x3ef08000

0800115c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	615a      	str	r2, [r3, #20]
 8001172:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8001174:	4b28      	ldr	r3, [pc, #160]	; (8001218 <MX_ADC3_Init+0xbc>)
 8001176:	4a29      	ldr	r2, [pc, #164]	; (800121c <MX_ADC3_Init+0xc0>)
 8001178:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <MX_ADC3_Init+0xbc>)
 800117c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001180:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001182:	4b25      	ldr	r3, [pc, #148]	; (8001218 <MX_ADC3_Init+0xbc>)
 8001184:	2208      	movs	r2, #8
 8001186:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <MX_ADC3_Init+0xbc>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <MX_ADC3_Init+0xbc>)
 8001190:	2204      	movs	r2, #4
 8001192:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001194:	4b20      	ldr	r3, [pc, #128]	; (8001218 <MX_ADC3_Init+0xbc>)
 8001196:	2200      	movs	r2, #0
 8001198:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800119a:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <MX_ADC3_Init+0xbc>)
 800119c:	2200      	movs	r2, #0
 800119e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_ADC3_Init+0xbc>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <MX_ADC3_Init+0xbc>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_ADC3_Init+0xbc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <MX_ADC3_Init+0xbc>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80011b8:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_ADC3_Init+0xbc>)
 80011ba:	2203      	movs	r2, #3
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <MX_ADC3_Init+0xbc>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_ADC3_Init+0xbc>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <MX_ADC3_Init+0xbc>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011d2:	4811      	ldr	r0, [pc, #68]	; (8001218 <MX_ADC3_Init+0xbc>)
 80011d4:	f001 f944 	bl	8002460 <HAL_ADC_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80011de:	f000 fb45 	bl	800186c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_ADC3_Init+0xc4>)
 80011e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011e6:	2306      	movs	r3, #6
 80011e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ee:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011f2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011f4:	2304      	movs	r3, #4
 80011f6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	4619      	mov	r1, r3
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_ADC3_Init+0xbc>)
 8001202:	f001 facd 	bl	80027a0 <HAL_ADC_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 800120c:	f000 fb2e 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	24000350 	.word	0x24000350
 800121c:	58026000 	.word	0x58026000
 8001220:	04300002 	.word	0x04300002

08001224 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <MX_TIM7_Init+0x68>)
 8001236:	4a16      	ldr	r2, [pc, #88]	; (8001290 <MX_TIM7_Init+0x6c>)
 8001238:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_TIM7_Init+0x68>)
 800123c:	f640 125f 	movw	r2, #2399	; 0x95f
 8001240:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <MX_TIM7_Init+0x68>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <MX_TIM7_Init+0x68>)
 800124a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800124e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_TIM7_Init+0x68>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001256:	480d      	ldr	r0, [pc, #52]	; (800128c <MX_TIM7_Init+0x68>)
 8001258:	f006 fff2 	bl	8008240 <HAL_TIM_Base_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001262:	f000 fb03 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	4619      	mov	r1, r3
 8001272:	4806      	ldr	r0, [pc, #24]	; (800128c <MX_TIM7_Init+0x68>)
 8001274:	f007 fb8a 	bl	800898c <HAL_TIMEx_MasterConfigSynchronization>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800127e:	f000 faf5 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	24000660 	.word	0x24000660
 8001290:	40001400 	.word	0x40001400

08001294 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129a:	463b      	mov	r3, r7
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_TIM12_Init+0x6c>)
 80012a8:	4a16      	ldr	r2, [pc, #88]	; (8001304 <MX_TIM12_Init+0x70>)
 80012aa:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2399;
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <MX_TIM12_Init+0x6c>)
 80012ae:	f640 125f 	movw	r2, #2399	; 0x95f
 80012b2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <MX_TIM12_Init+0x6c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_TIM12_Init+0x6c>)
 80012bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012c0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_TIM12_Init+0x6c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <MX_TIM12_Init+0x6c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80012ce:	480c      	ldr	r0, [pc, #48]	; (8001300 <MX_TIM12_Init+0x6c>)
 80012d0:	f006 ffb6 	bl	8008240 <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 80012da:	f000 fac7 	bl	800186c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_TIM12_Init+0x6c>)
 80012ea:	f007 f91f 	bl	800852c <HAL_TIM_ConfigClockSource>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 80012f4:	f000 faba 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	24000618 	.word	0x24000618
 8001304:	40001800 	.word	0x40001800

08001308 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001326:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <MX_TIM15_Init+0x9c>)
 8001328:	4a1f      	ldr	r2, [pc, #124]	; (80013a8 <MX_TIM15_Init+0xa0>)
 800132a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2399;
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <MX_TIM15_Init+0x9c>)
 800132e:	f640 125f 	movw	r2, #2399	; 0x95f
 8001332:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_TIM15_Init+0x9c>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_TIM15_Init+0x9c>)
 800133c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001340:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <MX_TIM15_Init+0x9c>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <MX_TIM15_Init+0x9c>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <MX_TIM15_Init+0x9c>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001354:	4813      	ldr	r0, [pc, #76]	; (80013a4 <MX_TIM15_Init+0x9c>)
 8001356:	f006 ff73 	bl	8008240 <HAL_TIM_Base_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001360:	f000 fa84 	bl	800186c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001368:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	4619      	mov	r1, r3
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <MX_TIM15_Init+0x9c>)
 8001372:	f007 f8db 	bl	800852c <HAL_TIM_ConfigClockSource>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800137c:	f000 fa76 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_TIM15_Init+0x9c>)
 800138e:	f007 fafd 	bl	800898c <HAL_TIMEx_MasterConfigSynchronization>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001398:	f000 fa68 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	240001c0 	.word	0x240001c0
 80013a8:	40014000 	.word	0x40014000

080013ac <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80013b0:	4b22      	ldr	r3, [pc, #136]	; (800143c <MX_UART7_Init+0x90>)
 80013b2:	4a23      	ldr	r2, [pc, #140]	; (8001440 <MX_UART7_Init+0x94>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80013b6:	4b21      	ldr	r3, [pc, #132]	; (800143c <MX_UART7_Init+0x90>)
 80013b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013bc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b1f      	ldr	r3, [pc, #124]	; (800143c <MX_UART7_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <MX_UART7_Init+0x90>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b1c      	ldr	r3, [pc, #112]	; (800143c <MX_UART7_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <MX_UART7_Init+0x90>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <MX_UART7_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <MX_UART7_Init+0x90>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_UART7_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_UART7_Init+0x90>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_UART7_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80013f4:	4811      	ldr	r0, [pc, #68]	; (800143c <MX_UART7_Init+0x90>)
 80013f6:	f007 fb6f 	bl	8008ad8 <HAL_UART_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001400:	f000 fa34 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001404:	2100      	movs	r1, #0
 8001406:	480d      	ldr	r0, [pc, #52]	; (800143c <MX_UART7_Init+0x90>)
 8001408:	f00a fcfb 	bl	800be02 <HAL_UARTEx_SetTxFifoThreshold>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001412:	f000 fa2b 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001416:	2100      	movs	r1, #0
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <MX_UART7_Init+0x90>)
 800141a:	f00a fd30 	bl	800be7e <HAL_UARTEx_SetRxFifoThreshold>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001424:	f000 fa22 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <MX_UART7_Init+0x90>)
 800142a:	f00a fcb1 	bl	800bd90 <HAL_UARTEx_DisableFifoMode>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001434:	f000 fa1a 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	2400007c 	.word	0x2400007c
 8001440:	40007800 	.word	0x40007800

08001444 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 800144a:	4a23      	ldr	r2, [pc, #140]	; (80014d8 <MX_USART1_UART_Init+0x94>)
 800144c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 8001450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001454:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800148c:	4811      	ldr	r0, [pc, #68]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 800148e:	f007 fb23 	bl	8008ad8 <HAL_UART_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001498:	f000 f9e8 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800149c:	2100      	movs	r1, #0
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 80014a0:	f00a fcaf 	bl	800be02 <HAL_UARTEx_SetTxFifoThreshold>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014aa:	f000 f9df 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ae:	2100      	movs	r1, #0
 80014b0:	4808      	ldr	r0, [pc, #32]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 80014b2:	f00a fce4 	bl	800be7e <HAL_UARTEx_SetRxFifoThreshold>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014bc:	f000 f9d6 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 80014c2:	f00a fc65 	bl	800bd90 <HAL_UARTEx_DisableFifoMode>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014cc:	f000 f9ce 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	240003d0 	.word	0x240003d0
 80014d8:	40011000 	.word	0x40011000

080014dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <MX_USART3_UART_Init+0x90>)
 80014e2:	4a23      	ldr	r2, [pc, #140]	; (8001570 <MX_USART3_UART_Init+0x94>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014e6:	4b21      	ldr	r3, [pc, #132]	; (800156c <MX_USART3_UART_Init+0x90>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <MX_USART3_UART_Init+0x90>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <MX_USART3_UART_Init+0x90>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <MX_USART3_UART_Init+0x90>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_USART3_UART_Init+0x90>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <MX_USART3_UART_Init+0x90>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_USART3_UART_Init+0x90>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_USART3_UART_Init+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_USART3_UART_Init+0x90>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <MX_USART3_UART_Init+0x90>)
 8001520:	2200      	movs	r2, #0
 8001522:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001524:	4811      	ldr	r0, [pc, #68]	; (800156c <MX_USART3_UART_Init+0x90>)
 8001526:	f007 fad7 	bl	8008ad8 <HAL_UART_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001530:	f000 f99c 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001534:	2100      	movs	r1, #0
 8001536:	480d      	ldr	r0, [pc, #52]	; (800156c <MX_USART3_UART_Init+0x90>)
 8001538:	f00a fc63 	bl	800be02 <HAL_UARTEx_SetTxFifoThreshold>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001542:	f000 f993 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001546:	2100      	movs	r1, #0
 8001548:	4808      	ldr	r0, [pc, #32]	; (800156c <MX_USART3_UART_Init+0x90>)
 800154a:	f00a fc98 	bl	800be7e <HAL_UARTEx_SetRxFifoThreshold>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001554:	f000 f98a 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_USART3_UART_Init+0x90>)
 800155a:	f00a fc19 	bl	800bd90 <HAL_UARTEx_DisableFifoMode>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001564:	f000 f982 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2400012c 	.word	0x2400012c
 8001570:	40004800 	.word	0x40004800

08001574 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001578:	4b22      	ldr	r3, [pc, #136]	; (8001604 <MX_USART6_UART_Init+0x90>)
 800157a:	4a23      	ldr	r2, [pc, #140]	; (8001608 <MX_USART6_UART_Init+0x94>)
 800157c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800157e:	4b21      	ldr	r3, [pc, #132]	; (8001604 <MX_USART6_UART_Init+0x90>)
 8001580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001584:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <MX_USART6_UART_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <MX_USART6_UART_Init+0x90>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <MX_USART6_UART_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <MX_USART6_UART_Init+0x90>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b19      	ldr	r3, [pc, #100]	; (8001604 <MX_USART6_UART_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b17      	ldr	r3, [pc, #92]	; (8001604 <MX_USART6_UART_Init+0x90>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_USART6_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_USART6_UART_Init+0x90>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <MX_USART6_UART_Init+0x90>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015bc:	4811      	ldr	r0, [pc, #68]	; (8001604 <MX_USART6_UART_Init+0x90>)
 80015be:	f007 fa8b 	bl	8008ad8 <HAL_UART_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80015c8:	f000 f950 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015cc:	2100      	movs	r1, #0
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <MX_USART6_UART_Init+0x90>)
 80015d0:	f00a fc17 	bl	800be02 <HAL_UARTEx_SetTxFifoThreshold>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80015da:	f000 f947 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015de:	2100      	movs	r1, #0
 80015e0:	4808      	ldr	r0, [pc, #32]	; (8001604 <MX_USART6_UART_Init+0x90>)
 80015e2:	f00a fc4c 	bl	800be7e <HAL_UARTEx_SetRxFifoThreshold>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80015ec:	f000 f93e 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_USART6_UART_Init+0x90>)
 80015f2:	f00a fbcd 	bl	800bd90 <HAL_UARTEx_DisableFifoMode>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80015fc:	f000 f936 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	24000540 	.word	0x24000540
 8001608:	40011400 	.word	0x40011400

0800160c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_DMA_Init+0x4c>)
 8001614:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001618:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <MX_DMA_Init+0x4c>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <MX_DMA_Init+0x4c>)
 8001624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001630:	2200      	movs	r2, #0
 8001632:	2100      	movs	r1, #0
 8001634:	200b      	movs	r0, #11
 8001636:	f001 fe9a 	bl	800336e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800163a:	200b      	movs	r0, #11
 800163c:	f001 feb1 	bl	80033a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	200c      	movs	r0, #12
 8001646:	f001 fe92 	bl	800336e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800164a:	200c      	movs	r0, #12
 800164c:	f001 fea9 	bl	80033a2 <HAL_NVIC_EnableIRQ>

}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	58024400 	.word	0x58024400

0800165c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08c      	sub	sp, #48	; 0x30
 8001660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001672:	4b78      	ldr	r3, [pc, #480]	; (8001854 <MX_GPIO_Init+0x1f8>)
 8001674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001678:	4a76      	ldr	r2, [pc, #472]	; (8001854 <MX_GPIO_Init+0x1f8>)
 800167a:	f043 0320 	orr.w	r3, r3, #32
 800167e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001682:	4b74      	ldr	r3, [pc, #464]	; (8001854 <MX_GPIO_Init+0x1f8>)
 8001684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001688:	f003 0320 	and.w	r3, r3, #32
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001690:	4b70      	ldr	r3, [pc, #448]	; (8001854 <MX_GPIO_Init+0x1f8>)
 8001692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001696:	4a6f      	ldr	r2, [pc, #444]	; (8001854 <MX_GPIO_Init+0x1f8>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a0:	4b6c      	ldr	r3, [pc, #432]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	4b69      	ldr	r3, [pc, #420]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b4:	4a67      	ldr	r2, [pc, #412]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016be:	4b65      	ldr	r3, [pc, #404]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016cc:	4b61      	ldr	r3, [pc, #388]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d2:	4a60      	ldr	r2, [pc, #384]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016dc:	4b5d      	ldr	r3, [pc, #372]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ea:	4b5a      	ldr	r3, [pc, #360]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f0:	4a58      	ldr	r2, [pc, #352]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016f2:	f043 0310 	orr.w	r3, r3, #16
 80016f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016fa:	4b56      	ldr	r3, [pc, #344]	; (8001854 <MX_GPIO_Init+0x1f8>)
 80016fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001708:	4b52      	ldr	r3, [pc, #328]	; (8001854 <MX_GPIO_Init+0x1f8>)
 800170a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170e:	4a51      	ldr	r2, [pc, #324]	; (8001854 <MX_GPIO_Init+0x1f8>)
 8001710:	f043 0308 	orr.w	r3, r3, #8
 8001714:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001718:	4b4e      	ldr	r3, [pc, #312]	; (8001854 <MX_GPIO_Init+0x1f8>)
 800171a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001726:	4b4b      	ldr	r3, [pc, #300]	; (8001854 <MX_GPIO_Init+0x1f8>)
 8001728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172c:	4a49      	ldr	r2, [pc, #292]	; (8001854 <MX_GPIO_Init+0x1f8>)
 800172e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001736:	4b47      	ldr	r3, [pc, #284]	; (8001854 <MX_GPIO_Init+0x1f8>)
 8001738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin, GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	f240 7104 	movw	r1, #1796	; 0x704
 800174a:	4843      	ldr	r0, [pc, #268]	; (8001858 <MX_GPIO_Init+0x1fc>)
 800174c:	f003 fefa 	bl	8005544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 8001750:	2200      	movs	r2, #0
 8001752:	f242 0167 	movw	r1, #8295	; 0x2067
 8001756:	4841      	ldr	r0, [pc, #260]	; (800185c <MX_GPIO_Init+0x200>)
 8001758:	f003 fef4 	bl	8005544 <HAL_GPIO_WritePin>
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	2182      	movs	r1, #130	; 0x82
 8001760:	483f      	ldr	r0, [pc, #252]	; (8001860 <MX_GPIO_Init+0x204>)
 8001762:	f003 feef 	bl	8005544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800176c:	483d      	ldr	r0, [pc, #244]	; (8001864 <MX_GPIO_Init+0x208>)
 800176e:	f003 fee9 	bl	8005544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 5178 	mov.w	r1, #15872	; 0x3e00
 8001778:	483b      	ldr	r0, [pc, #236]	; (8001868 <MX_GPIO_Init+0x20c>)
 800177a:	f003 fee3 	bl	8005544 <HAL_GPIO_WritePin>
                          |rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : cylinder_SetTee_Pin cylinder_RigtArmHoldBallTop_Pin cylinder_HoldBall_Pin cylinder_LeftArmHoldBall_Pin */
  GPIO_InitStruct.Pin = cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin;
 800177e:	f240 7304 	movw	r3, #1796	; 0x704
 8001782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	4830      	ldr	r0, [pc, #192]	; (8001858 <MX_GPIO_Init+0x1fc>)
 8001798:	f003 fd24 	bl	80051e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 cylinder_RigtArmTrans_Pin cylinder_PassBall_Pin cylinder_LeftArmTrans_Pin 
                           cylinder_RigtArmHoldBallBot_Pin cylinder_LiftBall_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 800179c:	f242 0367 	movw	r3, #8295	; 0x2067
 80017a0:	61fb      	str	r3, [r7, #28]
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ae:	f107 031c 	add.w	r3, r7, #28
 80017b2:	4619      	mov	r1, r3
 80017b4:	4829      	ldr	r0, [pc, #164]	; (800185c <MX_GPIO_Init+0x200>)
 80017b6:	f003 fd15 	bl	80051e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	4619      	mov	r1, r3
 80017d0:	4823      	ldr	r0, [pc, #140]	; (8001860 <MX_GPIO_Init+0x204>)
 80017d2:	f003 fd07 	bl	80051e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : legDir_Pin */
  GPIO_InitStruct.Pin = legDir_Pin;
 80017d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legDir_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	4619      	mov	r1, r3
 80017ee:	481d      	ldr	r0, [pc, #116]	; (8001864 <MX_GPIO_Init+0x208>)
 80017f0:	f003 fcf8 	bl	80051e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 80017f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	4619      	mov	r1, r3
 800180c:	4815      	ldr	r0, [pc, #84]	; (8001864 <MX_GPIO_Init+0x208>)
 800180e:	f003 fce9 	bl	80051e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8001812:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 8001816:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	480f      	ldr	r0, [pc, #60]	; (8001868 <MX_GPIO_Init+0x20c>)
 800182c:	f003 fcda 	bl	80051e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 8001830:	2302      	movs	r3, #2
 8001832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001834:	2301      	movs	r3, #1
 8001836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	4619      	mov	r1, r3
 8001846:	4806      	ldr	r0, [pc, #24]	; (8001860 <MX_GPIO_Init+0x204>)
 8001848:	f003 fccc 	bl	80051e4 <HAL_GPIO_Init>

}
 800184c:	bf00      	nop
 800184e:	3730      	adds	r7, #48	; 0x30
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	58024400 	.word	0x58024400
 8001858:	58020000 	.word	0x58020000
 800185c:	58020400 	.word	0x58020400
 8001860:	58021000 	.word	0x58021000
 8001864:	58020c00 	.word	0x58020c00
 8001868:	58021800 	.word	0x58021800

0800186c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_MspInit+0x30>)
 8001884:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001888:	4a08      	ldr	r2, [pc, #32]	; (80018ac <HAL_MspInit+0x30>)
 800188a:	f043 0302 	orr.w	r3, r3, #2
 800188e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_MspInit+0x30>)
 8001894:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	58024400 	.word	0x58024400

080018b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08c      	sub	sp, #48	; 0x30
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a6a      	ldr	r2, [pc, #424]	; (8001a78 <HAL_ADC_MspInit+0x1c8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d175      	bne.n	80019be <HAL_ADC_MspInit+0x10e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80018d2:	4b6a      	ldr	r3, [pc, #424]	; (8001a7c <HAL_ADC_MspInit+0x1cc>)
 80018d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018d8:	4a68      	ldr	r2, [pc, #416]	; (8001a7c <HAL_ADC_MspInit+0x1cc>)
 80018da:	f043 0320 	orr.w	r3, r3, #32
 80018de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018e2:	4b66      	ldr	r3, [pc, #408]	; (8001a7c <HAL_ADC_MspInit+0x1cc>)
 80018e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018e8:	f003 0320 	and.w	r3, r3, #32
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f0:	4b62      	ldr	r3, [pc, #392]	; (8001a7c <HAL_ADC_MspInit+0x1cc>)
 80018f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f6:	4a61      	ldr	r2, [pc, #388]	; (8001a7c <HAL_ADC_MspInit+0x1cc>)
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001900:	4b5e      	ldr	r3, [pc, #376]	; (8001a7c <HAL_ADC_MspInit+0x1cc>)
 8001902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	4b5b      	ldr	r3, [pc, #364]	; (8001a7c <HAL_ADC_MspInit+0x1cc>)
 8001910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001914:	4a59      	ldr	r2, [pc, #356]	; (8001a7c <HAL_ADC_MspInit+0x1cc>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191e:	4b57      	ldr	r3, [pc, #348]	; (8001a7c <HAL_ADC_MspInit+0x1cc>)
 8001920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_INP10
    PA3     ------> ADC1_INP15 
    */
    GPIO_InitStruct.Pin = RollRigt_Pin;
 800192c:	2301      	movs	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001930:	2303      	movs	r3, #3
 8001932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RollRigt_GPIO_Port, &GPIO_InitStruct);
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	4619      	mov	r1, r3
 800193e:	4850      	ldr	r0, [pc, #320]	; (8001a80 <HAL_ADC_MspInit+0x1d0>)
 8001940:	f003 fc50 	bl	80051e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RollLeft_Pin;
 8001944:	2308      	movs	r3, #8
 8001946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001948:	2303      	movs	r3, #3
 800194a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RollLeft_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	484b      	ldr	r0, [pc, #300]	; (8001a84 <HAL_ADC_MspInit+0x1d4>)
 8001958:	f003 fc44 	bl	80051e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800195c:	4b4a      	ldr	r3, [pc, #296]	; (8001a88 <HAL_ADC_MspInit+0x1d8>)
 800195e:	4a4b      	ldr	r2, [pc, #300]	; (8001a8c <HAL_ADC_MspInit+0x1dc>)
 8001960:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001962:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <HAL_ADC_MspInit+0x1d8>)
 8001964:	2209      	movs	r2, #9
 8001966:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001968:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <HAL_ADC_MspInit+0x1d8>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800196e:	4b46      	ldr	r3, [pc, #280]	; (8001a88 <HAL_ADC_MspInit+0x1d8>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001974:	4b44      	ldr	r3, [pc, #272]	; (8001a88 <HAL_ADC_MspInit+0x1d8>)
 8001976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800197a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800197c:	4b42      	ldr	r3, [pc, #264]	; (8001a88 <HAL_ADC_MspInit+0x1d8>)
 800197e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001982:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001984:	4b40      	ldr	r3, [pc, #256]	; (8001a88 <HAL_ADC_MspInit+0x1d8>)
 8001986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800198a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800198c:	4b3e      	ldr	r3, [pc, #248]	; (8001a88 <HAL_ADC_MspInit+0x1d8>)
 800198e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001992:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001994:	4b3c      	ldr	r3, [pc, #240]	; (8001a88 <HAL_ADC_MspInit+0x1d8>)
 8001996:	2200      	movs	r2, #0
 8001998:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800199a:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <HAL_ADC_MspInit+0x1d8>)
 800199c:	2200      	movs	r2, #0
 800199e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019a0:	4839      	ldr	r0, [pc, #228]	; (8001a88 <HAL_ADC_MspInit+0x1d8>)
 80019a2:	f001 fd19 	bl	80033d8 <HAL_DMA_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 80019ac:	f7ff ff5e 	bl	800186c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a35      	ldr	r2, [pc, #212]	; (8001a88 <HAL_ADC_MspInit+0x1d8>)
 80019b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80019b6:	4a34      	ldr	r2, [pc, #208]	; (8001a88 <HAL_ADC_MspInit+0x1d8>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80019bc:	e058      	b.n	8001a70 <HAL_ADC_MspInit+0x1c0>
  else if(hadc->Instance==ADC3)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a33      	ldr	r2, [pc, #204]	; (8001a90 <HAL_ADC_MspInit+0x1e0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d153      	bne.n	8001a70 <HAL_ADC_MspInit+0x1c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80019c8:	4b2c      	ldr	r3, [pc, #176]	; (8001a7c <HAL_ADC_MspInit+0x1cc>)
 80019ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ce:	4a2b      	ldr	r2, [pc, #172]	; (8001a7c <HAL_ADC_MspInit+0x1cc>)
 80019d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d8:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <HAL_ADC_MspInit+0x1cc>)
 80019da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e6:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <HAL_ADC_MspInit+0x1cc>)
 80019e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ec:	4a23      	ldr	r2, [pc, #140]	; (8001a7c <HAL_ADC_MspInit+0x1cc>)
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HAL_ADC_MspInit+0x1cc>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001a04:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001a08:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001a0c:	f000 fb92 	bl	8002134 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001a10:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <HAL_ADC_MspInit+0x1e4>)
 8001a12:	4a21      	ldr	r2, [pc, #132]	; (8001a98 <HAL_ADC_MspInit+0x1e8>)
 8001a14:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001a16:	4b1f      	ldr	r3, [pc, #124]	; (8001a94 <HAL_ADC_MspInit+0x1e4>)
 8001a18:	2273      	movs	r2, #115	; 0x73
 8001a1a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_ADC_MspInit+0x1e4>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a22:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <HAL_ADC_MspInit+0x1e4>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001a28:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <HAL_ADC_MspInit+0x1e4>)
 8001a2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a2e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_ADC_MspInit+0x1e4>)
 8001a32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a36:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_ADC_MspInit+0x1e4>)
 8001a3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a3e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001a40:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <HAL_ADC_MspInit+0x1e4>)
 8001a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a46:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_ADC_MspInit+0x1e4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_ADC_MspInit+0x1e4>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001a54:	480f      	ldr	r0, [pc, #60]	; (8001a94 <HAL_ADC_MspInit+0x1e4>)
 8001a56:	f001 fcbf 	bl	80033d8 <HAL_DMA_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_ADC_MspInit+0x1b4>
      Error_Handler();
 8001a60:	f7ff ff04 	bl	800186c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <HAL_ADC_MspInit+0x1e4>)
 8001a68:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <HAL_ADC_MspInit+0x1e4>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a70:	bf00      	nop
 8001a72:	3730      	adds	r7, #48	; 0x30
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40022000 	.word	0x40022000
 8001a7c:	58024400 	.word	0x58024400
 8001a80:	58020800 	.word	0x58020800
 8001a84:	58020000 	.word	0x58020000
 8001a88:	24000474 	.word	0x24000474
 8001a8c:	40020010 	.word	0x40020010
 8001a90:	58026000 	.word	0x58026000
 8001a94:	24000238 	.word	0x24000238
 8001a98:	40020028 	.word	0x40020028

08001a9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a2b      	ldr	r2, [pc, #172]	; (8001b58 <HAL_TIM_Base_MspInit+0xbc>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d117      	bne.n	8001ade <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001aae:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <HAL_TIM_Base_MspInit+0xc0>)
 8001ab0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ab4:	4a29      	ldr	r2, [pc, #164]	; (8001b5c <HAL_TIM_Base_MspInit+0xc0>)
 8001ab6:	f043 0320 	orr.w	r3, r3, #32
 8001aba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001abe:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <HAL_TIM_Base_MspInit+0xc0>)
 8001ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ac4:	f003 0320 	and.w	r3, r3, #32
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2037      	movs	r0, #55	; 0x37
 8001ad2:	f001 fc4c 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ad6:	2037      	movs	r0, #55	; 0x37
 8001ad8:	f001 fc63 	bl	80033a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001adc:	e038      	b.n	8001b50 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM12)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <HAL_TIM_Base_MspInit+0xc4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d117      	bne.n	8001b18 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <HAL_TIM_Base_MspInit+0xc0>)
 8001aea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aee:	4a1b      	ldr	r2, [pc, #108]	; (8001b5c <HAL_TIM_Base_MspInit+0xc0>)
 8001af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001af4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_TIM_Base_MspInit+0xc0>)
 8001afa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	202b      	movs	r0, #43	; 0x2b
 8001b0c:	f001 fc2f 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001b10:	202b      	movs	r0, #43	; 0x2b
 8001b12:	f001 fc46 	bl	80033a2 <HAL_NVIC_EnableIRQ>
}
 8001b16:	e01b      	b.n	8001b50 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM15)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <HAL_TIM_Base_MspInit+0xc8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d116      	bne.n	8001b50 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_TIM_Base_MspInit+0xc0>)
 8001b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b28:	4a0c      	ldr	r2, [pc, #48]	; (8001b5c <HAL_TIM_Base_MspInit+0xc0>)
 8001b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <HAL_TIM_Base_MspInit+0xc0>)
 8001b34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2100      	movs	r1, #0
 8001b44:	2074      	movs	r0, #116	; 0x74
 8001b46:	f001 fc12 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001b4a:	2074      	movs	r0, #116	; 0x74
 8001b4c:	f001 fc29 	bl	80033a2 <HAL_NVIC_EnableIRQ>
}
 8001b50:	bf00      	nop
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40001400 	.word	0x40001400
 8001b5c:	58024400 	.word	0x58024400
 8001b60:	40001800 	.word	0x40001800
 8001b64:	40014000 	.word	0x40014000

08001b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b090      	sub	sp, #64	; 0x40
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a79      	ldr	r2, [pc, #484]	; (8001d6c <HAL_UART_MspInit+0x204>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d136      	bne.n	8001bf8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001b8a:	4b79      	ldr	r3, [pc, #484]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b90:	4a77      	ldr	r2, [pc, #476]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001b92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b9a:	4b75      	ldr	r3, [pc, #468]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ba0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ba8:	4b71      	ldr	r3, [pc, #452]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bae:	4a70      	ldr	r2, [pc, #448]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001bb0:	f043 0320 	orr.w	r3, r3, #32
 8001bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb8:	4b6d      	ldr	r3, [pc, #436]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbe:	f003 0320 	and.w	r3, r3, #32
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 8001bc6:	23c0      	movs	r3, #192	; 0xc0
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001bd6:	2307      	movs	r3, #7
 8001bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bde:	4619      	mov	r1, r3
 8001be0:	4864      	ldr	r0, [pc, #400]	; (8001d74 <HAL_UART_MspInit+0x20c>)
 8001be2:	f003 faff 	bl	80051e4 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2104      	movs	r1, #4
 8001bea:	2052      	movs	r0, #82	; 0x52
 8001bec:	f001 fbbf 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001bf0:	2052      	movs	r0, #82	; 0x52
 8001bf2:	f001 fbd6 	bl	80033a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001bf6:	e0b4      	b.n	8001d62 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a5e      	ldr	r2, [pc, #376]	; (8001d78 <HAL_UART_MspInit+0x210>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d137      	bne.n	8001c72 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c02:	4b5b      	ldr	r3, [pc, #364]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c08:	4a59      	ldr	r2, [pc, #356]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001c0a:	f043 0310 	orr.w	r3, r3, #16
 8001c0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c12:	4b57      	ldr	r3, [pc, #348]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001c14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	623b      	str	r3, [r7, #32]
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c20:	4b53      	ldr	r3, [pc, #332]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c26:	4a52      	ldr	r2, [pc, #328]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c30:	4b4f      	ldr	r3, [pc, #316]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	61fb      	str	r3, [r7, #28]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 8001c3e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001c50:	2304      	movs	r3, #4
 8001c52:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4848      	ldr	r0, [pc, #288]	; (8001d7c <HAL_UART_MspInit+0x214>)
 8001c5c:	f003 fac2 	bl	80051e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2101      	movs	r1, #1
 8001c64:	2025      	movs	r0, #37	; 0x25
 8001c66:	f001 fb82 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c6a:	2025      	movs	r0, #37	; 0x25
 8001c6c:	f001 fb99 	bl	80033a2 <HAL_NVIC_EnableIRQ>
}
 8001c70:	e077      	b.n	8001d62 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a42      	ldr	r2, [pc, #264]	; (8001d80 <HAL_UART_MspInit+0x218>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d137      	bne.n	8001cec <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c7c:	4b3c      	ldr	r3, [pc, #240]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001c7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c82:	4a3b      	ldr	r2, [pc, #236]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c8c:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001c8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca0:	4a33      	ldr	r2, [pc, #204]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001ca2:	f043 0302 	orr.w	r3, r3, #2
 8001ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001caa:	4b31      	ldr	r3, [pc, #196]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 8001cb8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cca:	2307      	movs	r3, #7
 8001ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4829      	ldr	r0, [pc, #164]	; (8001d7c <HAL_UART_MspInit+0x214>)
 8001cd6:	f003 fa85 	bl	80051e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2103      	movs	r1, #3
 8001cde:	2027      	movs	r0, #39	; 0x27
 8001ce0:	f001 fb45 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ce4:	2027      	movs	r0, #39	; 0x27
 8001ce6:	f001 fb5c 	bl	80033a2 <HAL_NVIC_EnableIRQ>
}
 8001cea:	e03a      	b.n	8001d62 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART6)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a24      	ldr	r2, [pc, #144]	; (8001d84 <HAL_UART_MspInit+0x21c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d135      	bne.n	8001d62 <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001cf6:	4b1e      	ldr	r3, [pc, #120]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001cf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cfc:	4a1c      	ldr	r2, [pc, #112]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001cfe:	f043 0320 	orr.w	r3, r3, #32
 8001d02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d0c:	f003 0320 	and.w	r3, r3, #32
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d14:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1a:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_UART_MspInit+0x208>)
 8001d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 8001d32:	23c0      	movs	r3, #192	; 0xc0
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001d42:	2307      	movs	r3, #7
 8001d44:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	480e      	ldr	r0, [pc, #56]	; (8001d88 <HAL_UART_MspInit+0x220>)
 8001d4e:	f003 fa49 	bl	80051e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2102      	movs	r1, #2
 8001d56:	2047      	movs	r0, #71	; 0x47
 8001d58:	f001 fb09 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001d5c:	2047      	movs	r0, #71	; 0x47
 8001d5e:	f001 fb20 	bl	80033a2 <HAL_NVIC_EnableIRQ>
}
 8001d62:	bf00      	nop
 8001d64:	3740      	adds	r7, #64	; 0x40
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40007800 	.word	0x40007800
 8001d70:	58024400 	.word	0x58024400
 8001d74:	58021400 	.word	0x58021400
 8001d78:	40011000 	.word	0x40011000
 8001d7c:	58020400 	.word	0x58020400
 8001d80:	40004800 	.word	0x40004800
 8001d84:	40011400 	.word	0x40011400
 8001d88:	58020800 	.word	0x58020800

08001d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9e:	e7fe      	b.n	8001d9e <HardFault_Handler+0x4>

08001da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <MemManage_Handler+0x4>

08001da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <BusFault_Handler+0x4>

08001dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <UsageFault_Handler+0x4>

08001db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de0:	f000 f95a 	bl	8002098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <DMA1_Stream0_IRQHandler+0x10>)
 8001dee:	f002 f893 	bl	8003f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	24000474 	.word	0x24000474

08001dfc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <DMA1_Stream1_IRQHandler+0x10>)
 8001e02:	f002 f889 	bl	8003f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	24000238 	.word	0x24000238

08001e10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <USART1_IRQHandler+0x10>)
 8001e16:	f007 f80b 	bl	8008e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	240003d0 	.word	0x240003d0

08001e24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <USART3_IRQHandler+0x10>)
 8001e2a:	f007 f801 	bl	8008e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	2400012c 	.word	0x2400012c

08001e38 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001e3e:	f006 fa55 	bl	80082ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	24000618 	.word	0x24000618

08001e4c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <TIM7_IRQHandler+0x10>)
 8001e52:	f006 fa4b 	bl	80082ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	24000660 	.word	0x24000660

08001e60 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001e64:	4802      	ldr	r0, [pc, #8]	; (8001e70 <USART6_IRQHandler+0x10>)
 8001e66:	f006 ffe3 	bl	8008e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	24000540 	.word	0x24000540

08001e74 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <UART7_IRQHandler+0x10>)
 8001e7a:	f006 ffd9 	bl	8008e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2400007c 	.word	0x2400007c

08001e88 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <TIM15_IRQHandler+0x10>)
 8001e8e:	f006 fa2d 	bl	80082ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	240001c0 	.word	0x240001c0

08001e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ea0:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <SystemInit+0xac>)
 8001ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea6:	4a28      	ldr	r2, [pc, #160]	; (8001f48 <SystemInit+0xac>)
 8001ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001eb0:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <SystemInit+0xb0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a25      	ldr	r2, [pc, #148]	; (8001f4c <SystemInit+0xb0>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ebc:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <SystemInit+0xb0>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ec2:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <SystemInit+0xb0>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4921      	ldr	r1, [pc, #132]	; (8001f4c <SystemInit+0xb0>)
 8001ec8:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <SystemInit+0xb4>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001ece:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <SystemInit+0xb0>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <SystemInit+0xb0>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001eda:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <SystemInit+0xb0>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <SystemInit+0xb0>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001ee6:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <SystemInit+0xb0>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001eec:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <SystemInit+0xb0>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ef2:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <SystemInit+0xb0>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001ef8:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <SystemInit+0xb0>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <SystemInit+0xb0>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <SystemInit+0xb0>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <SystemInit+0xb0>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <SystemInit+0xb0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <SystemInit+0xb0>)
 8001f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <SystemInit+0xb0>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f22:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <SystemInit+0xb8>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <SystemInit+0xbc>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f2e:	d202      	bcs.n	8001f36 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <SystemInit+0xc0>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <SystemInit+0xac>)
 8001f38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f3c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00
 8001f4c:	58024400 	.word	0x58024400
 8001f50:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f54:	5c001000 	.word	0x5c001000
 8001f58:	ffff0000 	.word	0xffff0000
 8001f5c:	51008108 	.word	0x51008108

08001f60 <Reset_Handler>:
 8001f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f98 <LoopFillZerobss+0x14>
 8001f64:	2100      	movs	r1, #0
 8001f66:	e003      	b.n	8001f70 <LoopCopyDataInit>

08001f68 <CopyDataInit>:
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <LoopFillZerobss+0x18>)
 8001f6a:	585b      	ldr	r3, [r3, r1]
 8001f6c:	5043      	str	r3, [r0, r1]
 8001f6e:	3104      	adds	r1, #4

08001f70 <LoopCopyDataInit>:
 8001f70:	480b      	ldr	r0, [pc, #44]	; (8001fa0 <LoopFillZerobss+0x1c>)
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <LoopFillZerobss+0x20>)
 8001f74:	1842      	adds	r2, r0, r1
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d3f6      	bcc.n	8001f68 <CopyDataInit>
 8001f7a:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <LoopFillZerobss+0x24>)
 8001f7c:	e002      	b.n	8001f84 <LoopFillZerobss>

08001f7e <FillZerobss>:
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f842 3b04 	str.w	r3, [r2], #4

08001f84 <LoopFillZerobss>:
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <LoopFillZerobss+0x28>)
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d3f9      	bcc.n	8001f7e <FillZerobss>
 8001f8a:	f7ff ff87 	bl	8001e9c <SystemInit>
 8001f8e:	f00a f81d 	bl	800bfcc <__libc_init_array>
 8001f92:	f7fe ff2d 	bl	8000df0 <main>
 8001f96:	4770      	bx	lr
 8001f98:	24080000 	.word	0x24080000
 8001f9c:	0800c074 	.word	0x0800c074
 8001fa0:	24000000 	.word	0x24000000
 8001fa4:	24000030 	.word	0x24000030
 8001fa8:	24000030 	.word	0x24000030
 8001fac:	240006bc 	.word	0x240006bc

08001fb0 <ADC3_IRQHandler>:
 8001fb0:	e7fe      	b.n	8001fb0 <ADC3_IRQHandler>
	...

08001fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fba:	2003      	movs	r0, #3
 8001fbc:	f001 f9cc 	bl	8003358 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fc0:	f004 f8bc 	bl	800613c <HAL_RCC_GetSysClockFreq>
 8001fc4:	4601      	mov	r1, r0
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <HAL_Init+0x68>)
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	0a1b      	lsrs	r3, r3, #8
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	4a13      	ldr	r2, [pc, #76]	; (8002020 <HAL_Init+0x6c>)
 8001fd2:	5cd3      	ldrb	r3, [r2, r3]
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	fa21 f303 	lsr.w	r3, r1, r3
 8001fdc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_Init+0x68>)
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <HAL_Init+0x6c>)
 8001fe8:	5cd3      	ldrb	r3, [r2, r3]
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff4:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <HAL_Init+0x70>)
 8001ff6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ff8:	4a0b      	ldr	r2, [pc, #44]	; (8002028 <HAL_Init+0x74>)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ffe:	2000      	movs	r0, #0
 8002000:	f000 f814 	bl	800202c <HAL_InitTick>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e002      	b.n	8002014 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800200e:	f7ff fc35 	bl	800187c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	58024400 	.word	0x58024400
 8002020:	0800c04c 	.word	0x0800c04c
 8002024:	24000024 	.word	0x24000024
 8002028:	24000020 	.word	0x24000020

0800202c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002034:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_InitTick+0x60>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e021      	b.n	8002084 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_InitTick+0x64>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_InitTick+0x60>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	4619      	mov	r1, r3
 800204a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002052:	fbb2 f3f3 	udiv	r3, r2, r3
 8002056:	4618      	mov	r0, r3
 8002058:	f001 f9b1 	bl	80033be <HAL_SYSTICK_Config>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e00e      	b.n	8002084 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b0f      	cmp	r3, #15
 800206a:	d80a      	bhi.n	8002082 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800206c:	2200      	movs	r2, #0
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	f04f 30ff 	mov.w	r0, #4294967295
 8002074:	f001 f97b 	bl	800336e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002078:	4a06      	ldr	r2, [pc, #24]	; (8002094 <HAL_InitTick+0x68>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	e000      	b.n	8002084 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	2400002c 	.word	0x2400002c
 8002090:	24000020 	.word	0x24000020
 8002094:	24000028 	.word	0x24000028

08002098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_IncTick+0x20>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_IncTick+0x24>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	4a04      	ldr	r2, [pc, #16]	; (80020bc <HAL_IncTick+0x24>)
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	2400002c 	.word	0x2400002c
 80020bc:	240006b8 	.word	0x240006b8

080020c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return uwTick;
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_GetTick+0x14>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	240006b8 	.word	0x240006b8

080020d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e0:	f7ff ffee 	bl	80020c0 <HAL_GetTick>
 80020e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f0:	d005      	beq.n	80020fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HAL_Delay+0x40>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020fe:	bf00      	nop
 8002100:	f7ff ffde 	bl	80020c0 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	429a      	cmp	r2, r3
 800210e:	d8f7      	bhi.n	8002100 <HAL_Delay+0x28>
  {
  }
}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	2400002c 	.word	0x2400002c

0800211c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <HAL_GetREVID+0x14>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	0c1b      	lsrs	r3, r3, #16
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	5c001000 	.word	0x5c001000

08002134 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	43db      	mvns	r3, r3
 8002146:	401a      	ands	r2, r3
 8002148:	4904      	ldr	r1, [pc, #16]	; (800215c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	58000400 	.word	0x58000400

08002160 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	609a      	str	r2, [r3, #8]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	609a      	str	r2, [r3, #8]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021c8:	b490      	push	{r4, r7}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3360      	adds	r3, #96	; 0x60
 80021da:	461a      	mov	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80021e4:	6823      	ldr	r3, [r4, #0]
 80021e6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	430b      	orrs	r3, r1
 80021f4:	4313      	orrs	r3, r2
 80021f6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc90      	pop	{r4, r7}
 8002200:	4770      	bx	lr

08002202 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002202:	b480      	push	{r7}
 8002204:	b085      	sub	sp, #20
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	431a      	orrs	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	611a      	str	r2, [r3, #16]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002234:	b490      	push	{r4, r7}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	3360      	adds	r3, #96	; 0x60
 8002244:	461a      	mov	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800224e:	6823      	ldr	r3, [r4, #0]
 8002250:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4313      	orrs	r3, r2
 8002258:	6023      	str	r3, [r4, #0]
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bc90      	pop	{r4, r7}
 8002262:	4770      	bx	lr

08002264 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002264:	b490      	push	{r4, r7}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3330      	adds	r3, #48	; 0x30
 8002274:	461a      	mov	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	4413      	add	r3, r2
 8002282:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002284:	6822      	ldr	r2, [r4, #0]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	211f      	movs	r1, #31
 800228e:	fa01 f303 	lsl.w	r3, r1, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	401a      	ands	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	0e9b      	lsrs	r3, r3, #26
 800229a:	f003 011f 	and.w	r1, r3, #31
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	4313      	orrs	r3, r2
 80022aa:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc90      	pop	{r4, r7}
 80022b4:	4770      	bx	lr

080022b6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022b6:	b490      	push	{r4, r7}
 80022b8:	b084      	sub	sp, #16
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3314      	adds	r3, #20
 80022c6:	461a      	mov	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	0e5b      	lsrs	r3, r3, #25
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	4413      	add	r3, r2
 80022d4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80022d6:	6822      	ldr	r2, [r4, #0]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	0d1b      	lsrs	r3, r3, #20
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	2107      	movs	r1, #7
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	401a      	ands	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	0d1b      	lsrs	r3, r3, #20
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	4313      	orrs	r3, r2
 80022fa:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bc90      	pop	{r4, r7}
 8002304:	4770      	bx	lr
	...

08002308 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002320:	43db      	mvns	r3, r3
 8002322:	401a      	ands	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f003 0318 	and.w	r3, r3, #24
 800232a:	4908      	ldr	r1, [pc, #32]	; (800234c <LL_ADC_SetChannelSingleDiff+0x44>)
 800232c:	40d9      	lsrs	r1, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	400b      	ands	r3, r1
 8002332:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002336:	431a      	orrs	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800233e:	bf00      	nop
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	000fffff 	.word	0x000fffff

08002350 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <LL_ADC_DisableDeepPowerDown+0x20>)
 800235e:	4013      	ands	r3, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6093      	str	r3, [r2, #8]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	5fffffc0 	.word	0x5fffffc0

08002374 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002388:	d101      	bne.n	800238e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	6fffffc0 	.word	0x6fffffc0

080023c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023d8:	d101      	bne.n	80023de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <LL_ADC_IsEnabled+0x18>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <LL_ADC_IsEnabled+0x1a>
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b04      	cmp	r3, #4
 8002424:	d101      	bne.n	800242a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b08      	cmp	r3, #8
 800244a:	d101      	bne.n	8002450 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e18e      	b.n	8002798 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff fa11 	bl	80018b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff67 	bl	8002374 <LL_ADC_IsDeepPowerDownEnabled>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d004      	beq.n	80024b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff4d 	bl	8002350 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff82 	bl	80023c4 <LL_ADC_IsInternalRegulatorEnabled>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d113      	bne.n	80024ee <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff ff66 	bl	800239c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80024d0:	4b9a      	ldr	r3, [pc, #616]	; (800273c <HAL_ADC_Init+0x2dc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	099b      	lsrs	r3, r3, #6
 80024d6:	4a9a      	ldr	r2, [pc, #616]	; (8002740 <HAL_ADC_Init+0x2e0>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	099b      	lsrs	r3, r3, #6
 80024de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024e0:	e002      	b.n	80024e8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f9      	bne.n	80024e2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ff66 	bl	80023c4 <LL_ADC_IsInternalRegulatorEnabled>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10d      	bne.n	800251a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002502:	f043 0210 	orr.w	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250e:	f043 0201 	orr.w	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff77 	bl	8002412 <LL_ADC_REG_IsConversionOngoing>
 8002524:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b00      	cmp	r3, #0
 8002530:	f040 8129 	bne.w	8002786 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	2b00      	cmp	r3, #0
 8002538:	f040 8125 	bne.w	8002786 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002544:	f043 0202 	orr.w	r2, r3, #2
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff4b 	bl	80023ec <LL_ADC_IsEnabled>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d136      	bne.n	80025ca <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a78      	ldr	r2, [pc, #480]	; (8002744 <HAL_ADC_Init+0x2e4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d004      	beq.n	8002570 <HAL_ADC_Init+0x110>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a77      	ldr	r2, [pc, #476]	; (8002748 <HAL_ADC_Init+0x2e8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d10e      	bne.n	800258e <HAL_ADC_Init+0x12e>
 8002570:	4874      	ldr	r0, [pc, #464]	; (8002744 <HAL_ADC_Init+0x2e4>)
 8002572:	f7ff ff3b 	bl	80023ec <LL_ADC_IsEnabled>
 8002576:	4604      	mov	r4, r0
 8002578:	4873      	ldr	r0, [pc, #460]	; (8002748 <HAL_ADC_Init+0x2e8>)
 800257a:	f7ff ff37 	bl	80023ec <LL_ADC_IsEnabled>
 800257e:	4603      	mov	r3, r0
 8002580:	4323      	orrs	r3, r4
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf0c      	ite	eq
 8002586:	2301      	moveq	r3, #1
 8002588:	2300      	movne	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	e008      	b.n	80025a0 <HAL_ADC_Init+0x140>
 800258e:	486f      	ldr	r0, [pc, #444]	; (800274c <HAL_ADC_Init+0x2ec>)
 8002590:	f7ff ff2c 	bl	80023ec <LL_ADC_IsEnabled>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	bf0c      	ite	eq
 800259a:	2301      	moveq	r3, #1
 800259c:	2300      	movne	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d012      	beq.n	80025ca <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a66      	ldr	r2, [pc, #408]	; (8002744 <HAL_ADC_Init+0x2e4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d004      	beq.n	80025b8 <HAL_ADC_Init+0x158>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a65      	ldr	r2, [pc, #404]	; (8002748 <HAL_ADC_Init+0x2e8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_Init+0x15c>
 80025b8:	4a65      	ldr	r2, [pc, #404]	; (8002750 <HAL_ADC_Init+0x2f0>)
 80025ba:	e000      	b.n	80025be <HAL_ADC_Init+0x15e>
 80025bc:	4a65      	ldr	r2, [pc, #404]	; (8002754 <HAL_ADC_Init+0x2f4>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4619      	mov	r1, r3
 80025c4:	4610      	mov	r0, r2
 80025c6:	f7ff fdcb 	bl	8002160 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80025ca:	f7ff fda7 	bl	800211c <HAL_GetREVID>
 80025ce:	4602      	mov	r2, r0
 80025d0:	f241 0303 	movw	r3, #4099	; 0x1003
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d914      	bls.n	8002602 <HAL_ADC_Init+0x1a2>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b10      	cmp	r3, #16
 80025de:	d110      	bne.n	8002602 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	7d5b      	ldrb	r3, [r3, #21]
 80025e4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025ea:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80025f0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7f1b      	ldrb	r3, [r3, #28]
 80025f6:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 80025f8:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025fa:	f043 030c 	orr.w	r3, r3, #12
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	e00d      	b.n	800261e <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	7d5b      	ldrb	r3, [r3, #21]
 8002606:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800260c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002612:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	7f1b      	ldrb	r3, [r3, #28]
 8002618:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7f1b      	ldrb	r3, [r3, #28]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d106      	bne.n	8002634 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	3b01      	subs	r3, #1
 800262c:	045b      	lsls	r3, r3, #17
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	2b00      	cmp	r3, #0
 800263a:	d009      	beq.n	8002650 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	4b40      	ldr	r3, [pc, #256]	; (8002758 <HAL_ADC_Init+0x2f8>)
 8002658:	4013      	ands	r3, r2
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	69b9      	ldr	r1, [r7, #24]
 8002660:	430b      	orrs	r3, r1
 8002662:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fed2 	bl	8002412 <LL_ADC_REG_IsConversionOngoing>
 800266e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fedf 	bl	8002438 <LL_ADC_INJ_IsConversionOngoing>
 800267a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d14a      	bne.n	8002718 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d147      	bne.n	8002718 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7d1b      	ldrb	r3, [r3, #20]
 800268c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	4b2f      	ldr	r3, [pc, #188]	; (800275c <HAL_ADC_Init+0x2fc>)
 800269e:	4013      	ands	r3, r2
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	69b9      	ldr	r1, [r7, #24]
 80026a6:	430b      	orrs	r3, r1
 80026a8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d11b      	bne.n	80026ec <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	4b27      	ldr	r3, [pc, #156]	; (8002760 <HAL_ADC_Init+0x300>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026c8:	3a01      	subs	r2, #1
 80026ca:	0411      	lsls	r1, r2, #16
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026d0:	4311      	orrs	r1, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026d6:	4311      	orrs	r1, r2
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026dc:	430a      	orrs	r2, r1
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0201 	orr.w	r2, r2, #1
 80026e8:	611a      	str	r2, [r3, #16]
 80026ea:	e007      	b.n	80026fc <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fb58 	bl	8002dc8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d121      	bne.n	8002764 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f023 010f 	bic.w	r1, r3, #15
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	1e5a      	subs	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
 8002738:	e01c      	b.n	8002774 <HAL_ADC_Init+0x314>
 800273a:	bf00      	nop
 800273c:	24000020 	.word	0x24000020
 8002740:	053e2d63 	.word	0x053e2d63
 8002744:	40022000 	.word	0x40022000
 8002748:	40022100 	.word	0x40022100
 800274c:	58026000 	.word	0x58026000
 8002750:	40022300 	.word	0x40022300
 8002754:	58026300 	.word	0x58026300
 8002758:	fff0c003 	.word	0xfff0c003
 800275c:	ffffbffc 	.word	0xffffbffc
 8002760:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 020f 	bic.w	r2, r2, #15
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002778:	f023 0303 	bic.w	r3, r3, #3
 800277c:	f043 0201 	orr.w	r2, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	655a      	str	r2, [r3, #84]	; 0x54
 8002784:	e007      	b.n	8002796 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	f043 0210 	orr.w	r2, r3, #16
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002796:	7ffb      	ldrb	r3, [r7, #31]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3724      	adds	r7, #36	; 0x24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd90      	pop	{r4, r7, pc}

080027a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b099      	sub	sp, #100	; 0x64
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4a99      	ldr	r2, [pc, #612]	; (8002a20 <HAL_ADC_ConfigChannel+0x280>)
 80027ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x2a>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e2e6      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x5f8>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fe1b 	bl	8002412 <LL_ADC_REG_IsConversionOngoing>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f040 82cb 	bne.w	8002d7a <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d108      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x62>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	0e9b      	lsrs	r3, r3, #26
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	2201      	movs	r2, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	e00f      	b.n	8002822 <HAL_ADC_ConfigChannel+0x82>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	2201      	movs	r2, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	69d1      	ldr	r1, [r2, #28]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	430b      	orrs	r3, r1
 800282e:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	f7ff fd11 	bl	8002264 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fde3 	bl	8002412 <LL_ADC_REG_IsConversionOngoing>
 800284c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fdf0 	bl	8002438 <LL_ADC_INJ_IsConversionOngoing>
 8002858:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800285a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800285c:	2b00      	cmp	r3, #0
 800285e:	f040 80b3 	bne.w	80029c8 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002864:	2b00      	cmp	r3, #0
 8002866:	f040 80af 	bne.w	80029c8 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	6819      	ldr	r1, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	461a      	mov	r2, r3
 8002878:	f7ff fd1d 	bl	80022b6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800287c:	4b69      	ldr	r3, [pc, #420]	; (8002a24 <HAL_ADC_ConfigChannel+0x284>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002888:	d10b      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x102>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	e01d      	b.n	80028de <HAL_ADC_ConfigChannel+0x13e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10b      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x128>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	e00a      	b.n	80028de <HAL_ADC_ConfigChannel+0x13e>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d027      	beq.n	8002938 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6919      	ldr	r1, [r3, #16]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028f6:	f7ff fc67 	bl	80021c8 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6919      	ldr	r1, [r3, #16]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	7e5b      	ldrb	r3, [r3, #25]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d102      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x170>
 800290a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800290e:	e000      	b.n	8002912 <HAL_ADC_ConfigChannel+0x172>
 8002910:	2300      	movs	r3, #0
 8002912:	461a      	mov	r2, r3
 8002914:	f7ff fc8e 	bl	8002234 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6919      	ldr	r1, [r3, #16]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	7e1b      	ldrb	r3, [r3, #24]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d102      	bne.n	800292e <HAL_ADC_ConfigChannel+0x18e>
 8002928:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800292c:	e000      	b.n	8002930 <HAL_ADC_ConfigChannel+0x190>
 800292e:	2300      	movs	r3, #0
 8002930:	461a      	mov	r2, r3
 8002932:	f7ff fc66 	bl	8002202 <LL_ADC_SetDataRightShift>
 8002936:	e047      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	069b      	lsls	r3, r3, #26
 8002948:	429a      	cmp	r2, r3
 800294a:	d107      	bne.n	800295c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800295a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002962:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	069b      	lsls	r3, r3, #26
 800296c:	429a      	cmp	r2, r3
 800296e:	d107      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800297e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002986:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	069b      	lsls	r3, r3, #26
 8002990:	429a      	cmp	r2, r3
 8002992:	d107      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029a2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	069b      	lsls	r3, r3, #26
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d107      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029c6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fd0d 	bl	80023ec <LL_ADC_IsEnabled>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f040 81d9 	bne.w	8002d8c <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	6819      	ldr	r1, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	461a      	mov	r2, r3
 80029e8:	f7ff fc8e 	bl	8002308 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4a0b      	ldr	r2, [pc, #44]	; (8002a20 <HAL_ADC_ConfigChannel+0x280>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	f040 8101 	bne.w	8002bfa <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10f      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x288>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	0e9b      	lsrs	r3, r3, #26
 8002a0e:	3301      	adds	r3, #1
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	2b09      	cmp	r3, #9
 8002a16:	bf94      	ite	ls
 8002a18:	2301      	movls	r3, #1
 8002a1a:	2300      	movhi	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	e016      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x2ae>
 8002a20:	47ff0000 	.word	0x47ff0000
 8002a24:	5c001000 	.word	0x5c001000
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	2b09      	cmp	r3, #9
 8002a46:	bf94      	ite	ls
 8002a48:	2301      	movls	r3, #1
 8002a4a:	2300      	movhi	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d064      	beq.n	8002b1c <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d107      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x2ce>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	0e9b      	lsrs	r3, r3, #26
 8002a64:	3301      	adds	r3, #1
 8002a66:	069b      	lsls	r3, r3, #26
 8002a68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a6c:	e00e      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x2ec>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	3301      	adds	r3, #1
 8002a86:	069b      	lsls	r3, r3, #26
 8002a88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d109      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x30c>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	0e9b      	lsrs	r3, r3, #26
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aaa:	e010      	b.n	8002ace <HAL_ADC_ConfigChannel+0x32e>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	fa93 f3a3 	rbit	r3, r3
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abc:	fab3 f383 	clz	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	2101      	movs	r1, #1
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	ea42 0103 	orr.w	r1, r2, r3
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x354>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	0e9b      	lsrs	r3, r3, #26
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	f003 021f 	and.w	r2, r3, #31
 8002aea:	4613      	mov	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4413      	add	r3, r2
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	e011      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x378>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	fab3 f383 	clz	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f003 021f 	and.w	r2, r3, #31
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	e069      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d107      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x398>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	0e9b      	lsrs	r3, r3, #26
 8002b2e:	3301      	adds	r3, #1
 8002b30:	069b      	lsls	r3, r3, #26
 8002b32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b36:	e00e      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x3b6>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	61fb      	str	r3, [r7, #28]
  return result;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	fab3 f383 	clz	r3, r3
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	069b      	lsls	r3, r3, #26
 8002b52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d109      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x3d6>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	0e9b      	lsrs	r3, r3, #26
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f003 031f 	and.w	r3, r3, #31
 8002b6e:	2101      	movs	r1, #1
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	e010      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x3f8>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	617b      	str	r3, [r7, #20]
  return result;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	f003 031f 	and.w	r3, r3, #31
 8002b92:	2101      	movs	r1, #1
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	ea42 0103 	orr.w	r1, r2, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10d      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x424>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0e9b      	lsrs	r3, r3, #26
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f003 021f 	and.w	r2, r3, #31
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4413      	add	r3, r2
 8002bba:	3b1e      	subs	r3, #30
 8002bbc:	051b      	lsls	r3, r3, #20
 8002bbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	e014      	b.n	8002bee <HAL_ADC_ConfigChannel+0x44e>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	60fb      	str	r3, [r7, #12]
  return result;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	fab3 f383 	clz	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	f003 021f 	and.w	r2, r3, #31
 8002be0:	4613      	mov	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	4413      	add	r3, r2
 8002be6:	3b1e      	subs	r3, #30
 8002be8:	051b      	lsls	r3, r3, #20
 8002bea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	6892      	ldr	r2, [r2, #8]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f7ff fb5e 	bl	80022b6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f280 80c4 	bge.w	8002d8c <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a65      	ldr	r2, [pc, #404]	; (8002da0 <HAL_ADC_ConfigChannel+0x600>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d004      	beq.n	8002c18 <HAL_ADC_ConfigChannel+0x478>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a64      	ldr	r2, [pc, #400]	; (8002da4 <HAL_ADC_ConfigChannel+0x604>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d101      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x47c>
 8002c18:	4b63      	ldr	r3, [pc, #396]	; (8002da8 <HAL_ADC_ConfigChannel+0x608>)
 8002c1a:	e000      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x47e>
 8002c1c:	4b63      	ldr	r3, [pc, #396]	; (8002dac <HAL_ADC_ConfigChannel+0x60c>)
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fac4 	bl	80021ac <LL_ADC_GetCommonPathInternalCh>
 8002c24:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a5d      	ldr	r2, [pc, #372]	; (8002da0 <HAL_ADC_ConfigChannel+0x600>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d004      	beq.n	8002c3a <HAL_ADC_ConfigChannel+0x49a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a5b      	ldr	r2, [pc, #364]	; (8002da4 <HAL_ADC_ConfigChannel+0x604>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10e      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x4b8>
 8002c3a:	4859      	ldr	r0, [pc, #356]	; (8002da0 <HAL_ADC_ConfigChannel+0x600>)
 8002c3c:	f7ff fbd6 	bl	80023ec <LL_ADC_IsEnabled>
 8002c40:	4604      	mov	r4, r0
 8002c42:	4858      	ldr	r0, [pc, #352]	; (8002da4 <HAL_ADC_ConfigChannel+0x604>)
 8002c44:	f7ff fbd2 	bl	80023ec <LL_ADC_IsEnabled>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4323      	orrs	r3, r4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf0c      	ite	eq
 8002c50:	2301      	moveq	r3, #1
 8002c52:	2300      	movne	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	e008      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x4ca>
 8002c58:	4855      	ldr	r0, [pc, #340]	; (8002db0 <HAL_ADC_ConfigChannel+0x610>)
 8002c5a:	f7ff fbc7 	bl	80023ec <LL_ADC_IsEnabled>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d07b      	beq.n	8002d66 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a50      	ldr	r2, [pc, #320]	; (8002db4 <HAL_ADC_ConfigChannel+0x614>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d12e      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x536>
 8002c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d129      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a4a      	ldr	r2, [pc, #296]	; (8002db0 <HAL_ADC_ConfigChannel+0x610>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d17f      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a43      	ldr	r2, [pc, #268]	; (8002da0 <HAL_ADC_ConfigChannel+0x600>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d004      	beq.n	8002ca0 <HAL_ADC_ConfigChannel+0x500>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a42      	ldr	r2, [pc, #264]	; (8002da4 <HAL_ADC_ConfigChannel+0x604>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d101      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x504>
 8002ca0:	4a41      	ldr	r2, [pc, #260]	; (8002da8 <HAL_ADC_ConfigChannel+0x608>)
 8002ca2:	e000      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x506>
 8002ca4:	4a41      	ldr	r2, [pc, #260]	; (8002dac <HAL_ADC_ConfigChannel+0x60c>)
 8002ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cac:	4619      	mov	r1, r3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	f7ff fa69 	bl	8002186 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002cb4:	4b40      	ldr	r3, [pc, #256]	; (8002db8 <HAL_ADC_ConfigChannel+0x618>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	099b      	lsrs	r3, r3, #6
 8002cba:	4a40      	ldr	r2, [pc, #256]	; (8002dbc <HAL_ADC_ConfigChannel+0x61c>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002cc6:	e002      	b.n	8002cce <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1f9      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cd4:	e05a      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a39      	ldr	r2, [pc, #228]	; (8002dc0 <HAL_ADC_ConfigChannel+0x620>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d11e      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x57e>
 8002ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d119      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a30      	ldr	r2, [pc, #192]	; (8002db0 <HAL_ADC_ConfigChannel+0x610>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d14b      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a29      	ldr	r2, [pc, #164]	; (8002da0 <HAL_ADC_ConfigChannel+0x600>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d004      	beq.n	8002d08 <HAL_ADC_ConfigChannel+0x568>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a28      	ldr	r2, [pc, #160]	; (8002da4 <HAL_ADC_ConfigChannel+0x604>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d101      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x56c>
 8002d08:	4a27      	ldr	r2, [pc, #156]	; (8002da8 <HAL_ADC_ConfigChannel+0x608>)
 8002d0a:	e000      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x56e>
 8002d0c:	4a27      	ldr	r2, [pc, #156]	; (8002dac <HAL_ADC_ConfigChannel+0x60c>)
 8002d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d14:	4619      	mov	r1, r3
 8002d16:	4610      	mov	r0, r2
 8002d18:	f7ff fa35 	bl	8002186 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d1c:	e036      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a28      	ldr	r2, [pc, #160]	; (8002dc4 <HAL_ADC_ConfigChannel+0x624>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d131      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x5ec>
 8002d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d12c      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a1e      	ldr	r2, [pc, #120]	; (8002db0 <HAL_ADC_ConfigChannel+0x610>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d127      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a17      	ldr	r2, [pc, #92]	; (8002da0 <HAL_ADC_ConfigChannel+0x600>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d004      	beq.n	8002d50 <HAL_ADC_ConfigChannel+0x5b0>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a16      	ldr	r2, [pc, #88]	; (8002da4 <HAL_ADC_ConfigChannel+0x604>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d101      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x5b4>
 8002d50:	4a15      	ldr	r2, [pc, #84]	; (8002da8 <HAL_ADC_ConfigChannel+0x608>)
 8002d52:	e000      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x5b6>
 8002d54:	4a15      	ldr	r2, [pc, #84]	; (8002dac <HAL_ADC_ConfigChannel+0x60c>)
 8002d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4610      	mov	r0, r2
 8002d60:	f7ff fa11 	bl	8002186 <LL_ADC_SetCommonPathInternalCh>
 8002d64:	e012      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	f043 0220 	orr.w	r2, r3, #32
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002d78:	e008      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7e:	f043 0220 	orr.w	r2, r3, #32
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3764      	adds	r7, #100	; 0x64
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd90      	pop	{r4, r7, pc}
 8002da0:	40022000 	.word	0x40022000
 8002da4:	40022100 	.word	0x40022100
 8002da8:	40022300 	.word	0x40022300
 8002dac:	58026300 	.word	0x58026300
 8002db0:	58026000 	.word	0x58026000
 8002db4:	cb840000 	.word	0xcb840000
 8002db8:	24000020 	.word	0x24000020
 8002dbc:	053e2d63 	.word	0x053e2d63
 8002dc0:	c7520000 	.word	0xc7520000
 8002dc4:	cfb80000 	.word	0xcfb80000

08002dc8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a70      	ldr	r2, [pc, #448]	; (8002f98 <ADC_ConfigureBoostMode+0x1d0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d004      	beq.n	8002de4 <ADC_ConfigureBoostMode+0x1c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a6f      	ldr	r2, [pc, #444]	; (8002f9c <ADC_ConfigureBoostMode+0x1d4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d109      	bne.n	8002df8 <ADC_ConfigureBoostMode+0x30>
 8002de4:	4b6e      	ldr	r3, [pc, #440]	; (8002fa0 <ADC_ConfigureBoostMode+0x1d8>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf14      	ite	ne
 8002df0:	2301      	movne	r3, #1
 8002df2:	2300      	moveq	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	e008      	b.n	8002e0a <ADC_ConfigureBoostMode+0x42>
 8002df8:	4b6a      	ldr	r3, [pc, #424]	; (8002fa4 <ADC_ConfigureBoostMode+0x1dc>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf14      	ite	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	2300      	moveq	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d01a      	beq.n	8002e44 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002e0e:	f003 fb07 	bl	8006420 <HAL_RCC_GetHCLKFreq>
 8002e12:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e1c:	d006      	beq.n	8002e2c <ADC_ConfigureBoostMode+0x64>
 8002e1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e22:	d00b      	beq.n	8002e3c <ADC_ConfigureBoostMode+0x74>
 8002e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e28:	d000      	beq.n	8002e2c <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002e2a:	e05d      	b.n	8002ee8 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	0c1b      	lsrs	r3, r3, #16
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e38:	60fb      	str	r3, [r7, #12]
        break;
 8002e3a:	e055      	b.n	8002ee8 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	089b      	lsrs	r3, r3, #2
 8002e40:	60fb      	str	r3, [r7, #12]
        break;
 8002e42:	e051      	b.n	8002ee8 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e44:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e48:	f004 fa24 	bl	8007294 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e4c:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e56:	d02a      	beq.n	8002eae <ADC_ConfigureBoostMode+0xe6>
 8002e58:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e5c:	d813      	bhi.n	8002e86 <ADC_ConfigureBoostMode+0xbe>
 8002e5e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e62:	d024      	beq.n	8002eae <ADC_ConfigureBoostMode+0xe6>
 8002e64:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e68:	d806      	bhi.n	8002e78 <ADC_ConfigureBoostMode+0xb0>
 8002e6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e6e:	d01e      	beq.n	8002eae <ADC_ConfigureBoostMode+0xe6>
 8002e70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e74:	d01b      	beq.n	8002eae <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002e76:	e037      	b.n	8002ee8 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002e78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e7c:	d017      	beq.n	8002eae <ADC_ConfigureBoostMode+0xe6>
 8002e7e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002e82:	d014      	beq.n	8002eae <ADC_ConfigureBoostMode+0xe6>
        break;
 8002e84:	e030      	b.n	8002ee8 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002e86:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e8a:	d021      	beq.n	8002ed0 <ADC_ConfigureBoostMode+0x108>
 8002e8c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e90:	d806      	bhi.n	8002ea0 <ADC_ConfigureBoostMode+0xd8>
 8002e92:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002e96:	d013      	beq.n	8002ec0 <ADC_ConfigureBoostMode+0xf8>
 8002e98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e9c:	d014      	beq.n	8002ec8 <ADC_ConfigureBoostMode+0x100>
        break;
 8002e9e:	e023      	b.n	8002ee8 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002ea0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002ea4:	d018      	beq.n	8002ed8 <ADC_ConfigureBoostMode+0x110>
 8002ea6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002eaa:	d019      	beq.n	8002ee0 <ADC_ConfigureBoostMode+0x118>
        break;
 8002eac:	e01c      	b.n	8002ee8 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	0c9b      	lsrs	r3, r3, #18
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebc:	60fb      	str	r3, [r7, #12]
        break;
 8002ebe:	e013      	b.n	8002ee8 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	60fb      	str	r3, [r7, #12]
      break;
 8002ec6:	e00f      	b.n	8002ee8 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	60fb      	str	r3, [r7, #12]
        break;
 8002ece:	e00b      	b.n	8002ee8 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	099b      	lsrs	r3, r3, #6
 8002ed4:	60fb      	str	r3, [r7, #12]
        break;
 8002ed6:	e007      	b.n	8002ee8 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	09db      	lsrs	r3, r3, #7
 8002edc:	60fb      	str	r3, [r7, #12]
        break;
 8002ede:	e003      	b.n	8002ee8 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	0a1b      	lsrs	r3, r3, #8
 8002ee4:	60fb      	str	r3, [r7, #12]
        break;
 8002ee6:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002ee8:	f7ff f918 	bl	800211c <HAL_GetREVID>
 8002eec:	4602      	mov	r2, r0
 8002eee:	f241 0303 	movw	r3, #4099	; 0x1003
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d815      	bhi.n	8002f22 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4a2b      	ldr	r2, [pc, #172]	; (8002fa8 <ADC_ConfigureBoostMode+0x1e0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d908      	bls.n	8002f10 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f0c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002f0e:	e03e      	b.n	8002f8e <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f1e:	609a      	str	r2, [r3, #8]
}
 8002f20:	e035      	b.n	8002f8e <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4a20      	ldr	r2, [pc, #128]	; (8002fac <ADC_ConfigureBoostMode+0x1e4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d808      	bhi.n	8002f42 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f3e:	609a      	str	r2, [r3, #8]
}
 8002f40:	e025      	b.n	8002f8e <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4a1a      	ldr	r2, [pc, #104]	; (8002fb0 <ADC_ConfigureBoostMode+0x1e8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d80a      	bhi.n	8002f60 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f5c:	609a      	str	r2, [r3, #8]
}
 8002f5e:	e016      	b.n	8002f8e <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4a14      	ldr	r2, [pc, #80]	; (8002fb4 <ADC_ConfigureBoostMode+0x1ec>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d80a      	bhi.n	8002f7e <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7a:	609a      	str	r2, [r3, #8]
}
 8002f7c:	e007      	b.n	8002f8e <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002f8c:	609a      	str	r2, [r3, #8]
}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40022000 	.word	0x40022000
 8002f9c:	40022100 	.word	0x40022100
 8002fa0:	40022300 	.word	0x40022300
 8002fa4:	58026300 	.word	0x58026300
 8002fa8:	01312d00 	.word	0x01312d00
 8002fac:	005f5e10 	.word	0x005f5e10
 8002fb0:	00bebc20 	.word	0x00bebc20
 8002fb4:	017d7840 	.word	0x017d7840

08002fb8 <LL_ADC_IsEnabled>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <LL_ADC_IsEnabled+0x18>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <LL_ADC_IsEnabled+0x1a>
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_ADC_REG_IsConversionOngoing>:
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d101      	bne.n	8002ff6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b09f      	sub	sp, #124	; 0x7c
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800301e:	2302      	movs	r3, #2
 8003020:	e0ba      	b.n	8003198 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a5c      	ldr	r2, [pc, #368]	; (80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d102      	bne.n	800303a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003034:	4b5b      	ldr	r3, [pc, #364]	; (80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	e001      	b.n	800303e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10b      	bne.n	800305c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003048:	f043 0220 	orr.w	r2, r3, #32
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e09d      	b.n	8003198 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff ffbd 	bl	8002fde <LL_ADC_REG_IsConversionOngoing>
 8003064:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff ffb7 	bl	8002fde <LL_ADC_REG_IsConversionOngoing>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d17f      	bne.n	8003176 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003078:	2b00      	cmp	r3, #0
 800307a:	d17c      	bne.n	8003176 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a47      	ldr	r2, [pc, #284]	; (80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a46      	ldr	r2, [pc, #280]	; (80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d101      	bne.n	8003094 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8003090:	4b45      	ldr	r3, [pc, #276]	; (80031a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003092:	e000      	b.n	8003096 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003094:	4b45      	ldr	r3, [pc, #276]	; (80031ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003096:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d039      	beq.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80030a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	431a      	orrs	r2, r3
 80030ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a3a      	ldr	r2, [pc, #232]	; (80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d004      	beq.n	80030c6 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a38      	ldr	r2, [pc, #224]	; (80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10e      	bne.n	80030e4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80030c6:	4836      	ldr	r0, [pc, #216]	; (80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80030c8:	f7ff ff76 	bl	8002fb8 <LL_ADC_IsEnabled>
 80030cc:	4604      	mov	r4, r0
 80030ce:	4835      	ldr	r0, [pc, #212]	; (80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80030d0:	f7ff ff72 	bl	8002fb8 <LL_ADC_IsEnabled>
 80030d4:	4603      	mov	r3, r0
 80030d6:	4323      	orrs	r3, r4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	e008      	b.n	80030f6 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 80030e4:	4832      	ldr	r0, [pc, #200]	; (80031b0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80030e6:	f7ff ff67 	bl	8002fb8 <LL_ADC_IsEnabled>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d047      	beq.n	800318a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	4b2d      	ldr	r3, [pc, #180]	; (80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003100:	4013      	ands	r3, r2
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	6811      	ldr	r1, [r2, #0]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	6892      	ldr	r2, [r2, #8]
 800310a:	430a      	orrs	r2, r1
 800310c:	431a      	orrs	r2, r3
 800310e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003110:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003112:	e03a      	b.n	800318a <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800311c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800311e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1e      	ldr	r2, [pc, #120]	; (80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d004      	beq.n	8003134 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1d      	ldr	r2, [pc, #116]	; (80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d10e      	bne.n	8003152 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8003134:	481a      	ldr	r0, [pc, #104]	; (80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003136:	f7ff ff3f 	bl	8002fb8 <LL_ADC_IsEnabled>
 800313a:	4604      	mov	r4, r0
 800313c:	4819      	ldr	r0, [pc, #100]	; (80031a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800313e:	f7ff ff3b 	bl	8002fb8 <LL_ADC_IsEnabled>
 8003142:	4603      	mov	r3, r0
 8003144:	4323      	orrs	r3, r4
 8003146:	2b00      	cmp	r3, #0
 8003148:	bf0c      	ite	eq
 800314a:	2301      	moveq	r3, #1
 800314c:	2300      	movne	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	e008      	b.n	8003164 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8003152:	4817      	ldr	r0, [pc, #92]	; (80031b0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003154:	f7ff ff30 	bl	8002fb8 <LL_ADC_IsEnabled>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf0c      	ite	eq
 800315e:	2301      	moveq	r3, #1
 8003160:	2300      	movne	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d010      	beq.n	800318a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800316e:	4013      	ands	r3, r2
 8003170:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003172:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003174:	e009      	b.n	800318a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317a:	f043 0220 	orr.w	r2, r3, #32
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003188:	e000      	b.n	800318c <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800318a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003194:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003198:	4618      	mov	r0, r3
 800319a:	377c      	adds	r7, #124	; 0x7c
 800319c:	46bd      	mov	sp, r7
 800319e:	bd90      	pop	{r4, r7, pc}
 80031a0:	40022000 	.word	0x40022000
 80031a4:	40022100 	.word	0x40022100
 80031a8:	40022300 	.word	0x40022300
 80031ac:	58026300 	.word	0x58026300
 80031b0:	58026000 	.word	0x58026000
 80031b4:	fffff0e0 	.word	0xfffff0e0

080031b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <__NVIC_SetPriorityGrouping+0x40>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031d4:	4013      	ands	r3, r2
 80031d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <__NVIC_SetPriorityGrouping+0x44>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031e6:	4a04      	ldr	r2, [pc, #16]	; (80031f8 <__NVIC_SetPriorityGrouping+0x40>)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	60d3      	str	r3, [r2, #12]
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000ed00 	.word	0xe000ed00
 80031fc:	05fa0000 	.word	0x05fa0000

08003200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003204:	4b04      	ldr	r3, [pc, #16]	; (8003218 <__NVIC_GetPriorityGrouping+0x18>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	f003 0307 	and.w	r3, r3, #7
}
 800320e:	4618      	mov	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800322a:	2b00      	cmp	r3, #0
 800322c:	db0b      	blt.n	8003246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	f003 021f 	and.w	r2, r3, #31
 8003234:	4907      	ldr	r1, [pc, #28]	; (8003254 <__NVIC_EnableIRQ+0x38>)
 8003236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	2001      	movs	r0, #1
 800323e:	fa00 f202 	lsl.w	r2, r0, r2
 8003242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	e000e100 	.word	0xe000e100

08003258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	6039      	str	r1, [r7, #0]
 8003262:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003268:	2b00      	cmp	r3, #0
 800326a:	db0a      	blt.n	8003282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	b2da      	uxtb	r2, r3
 8003270:	490c      	ldr	r1, [pc, #48]	; (80032a4 <__NVIC_SetPriority+0x4c>)
 8003272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003276:	0112      	lsls	r2, r2, #4
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	440b      	add	r3, r1
 800327c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003280:	e00a      	b.n	8003298 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	b2da      	uxtb	r2, r3
 8003286:	4908      	ldr	r1, [pc, #32]	; (80032a8 <__NVIC_SetPriority+0x50>)
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	3b04      	subs	r3, #4
 8003290:	0112      	lsls	r2, r2, #4
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	440b      	add	r3, r1
 8003296:	761a      	strb	r2, [r3, #24]
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000e100 	.word	0xe000e100
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b089      	sub	sp, #36	; 0x24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f1c3 0307 	rsb	r3, r3, #7
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	bf28      	it	cs
 80032ca:	2304      	movcs	r3, #4
 80032cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3304      	adds	r3, #4
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d902      	bls.n	80032dc <NVIC_EncodePriority+0x30>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3b03      	subs	r3, #3
 80032da:	e000      	b.n	80032de <NVIC_EncodePriority+0x32>
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e0:	f04f 32ff 	mov.w	r2, #4294967295
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43da      	mvns	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	401a      	ands	r2, r3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032f4:	f04f 31ff 	mov.w	r1, #4294967295
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	fa01 f303 	lsl.w	r3, r1, r3
 80032fe:	43d9      	mvns	r1, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003304:	4313      	orrs	r3, r2
         );
}
 8003306:	4618      	mov	r0, r3
 8003308:	3724      	adds	r7, #36	; 0x24
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3b01      	subs	r3, #1
 8003320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003324:	d301      	bcc.n	800332a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003326:	2301      	movs	r3, #1
 8003328:	e00f      	b.n	800334a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800332a:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <SysTick_Config+0x40>)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3b01      	subs	r3, #1
 8003330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003332:	210f      	movs	r1, #15
 8003334:	f04f 30ff 	mov.w	r0, #4294967295
 8003338:	f7ff ff8e 	bl	8003258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <SysTick_Config+0x40>)
 800333e:	2200      	movs	r2, #0
 8003340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003342:	4b04      	ldr	r3, [pc, #16]	; (8003354 <SysTick_Config+0x40>)
 8003344:	2207      	movs	r2, #7
 8003346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	e000e010 	.word	0xe000e010

08003358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ff29 	bl	80031b8 <__NVIC_SetPriorityGrouping>
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b086      	sub	sp, #24
 8003372:	af00      	add	r7, sp, #0
 8003374:	4603      	mov	r3, r0
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
 800337a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800337c:	f7ff ff40 	bl	8003200 <__NVIC_GetPriorityGrouping>
 8003380:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	6978      	ldr	r0, [r7, #20]
 8003388:	f7ff ff90 	bl	80032ac <NVIC_EncodePriority>
 800338c:	4602      	mov	r2, r0
 800338e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003392:	4611      	mov	r1, r2
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff ff5f 	bl	8003258 <__NVIC_SetPriority>
}
 800339a:	bf00      	nop
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	4603      	mov	r3, r0
 80033aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff ff33 	bl	800321c <__NVIC_EnableIRQ>
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff ffa4 	bl	8003314 <SysTick_Config>
 80033cc:	4603      	mov	r3, r0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80033e0:	f7fe fe6e 	bl	80020c0 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e316      	b.n	8003a1e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a66      	ldr	r2, [pc, #408]	; (8003590 <HAL_DMA_Init+0x1b8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d04a      	beq.n	8003490 <HAL_DMA_Init+0xb8>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a65      	ldr	r2, [pc, #404]	; (8003594 <HAL_DMA_Init+0x1bc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d045      	beq.n	8003490 <HAL_DMA_Init+0xb8>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a63      	ldr	r2, [pc, #396]	; (8003598 <HAL_DMA_Init+0x1c0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d040      	beq.n	8003490 <HAL_DMA_Init+0xb8>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a62      	ldr	r2, [pc, #392]	; (800359c <HAL_DMA_Init+0x1c4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d03b      	beq.n	8003490 <HAL_DMA_Init+0xb8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a60      	ldr	r2, [pc, #384]	; (80035a0 <HAL_DMA_Init+0x1c8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d036      	beq.n	8003490 <HAL_DMA_Init+0xb8>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a5f      	ldr	r2, [pc, #380]	; (80035a4 <HAL_DMA_Init+0x1cc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d031      	beq.n	8003490 <HAL_DMA_Init+0xb8>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a5d      	ldr	r2, [pc, #372]	; (80035a8 <HAL_DMA_Init+0x1d0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d02c      	beq.n	8003490 <HAL_DMA_Init+0xb8>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a5c      	ldr	r2, [pc, #368]	; (80035ac <HAL_DMA_Init+0x1d4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d027      	beq.n	8003490 <HAL_DMA_Init+0xb8>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a5a      	ldr	r2, [pc, #360]	; (80035b0 <HAL_DMA_Init+0x1d8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d022      	beq.n	8003490 <HAL_DMA_Init+0xb8>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a59      	ldr	r2, [pc, #356]	; (80035b4 <HAL_DMA_Init+0x1dc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d01d      	beq.n	8003490 <HAL_DMA_Init+0xb8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a57      	ldr	r2, [pc, #348]	; (80035b8 <HAL_DMA_Init+0x1e0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d018      	beq.n	8003490 <HAL_DMA_Init+0xb8>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a56      	ldr	r2, [pc, #344]	; (80035bc <HAL_DMA_Init+0x1e4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d013      	beq.n	8003490 <HAL_DMA_Init+0xb8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a54      	ldr	r2, [pc, #336]	; (80035c0 <HAL_DMA_Init+0x1e8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00e      	beq.n	8003490 <HAL_DMA_Init+0xb8>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a53      	ldr	r2, [pc, #332]	; (80035c4 <HAL_DMA_Init+0x1ec>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d009      	beq.n	8003490 <HAL_DMA_Init+0xb8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a51      	ldr	r2, [pc, #324]	; (80035c8 <HAL_DMA_Init+0x1f0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d004      	beq.n	8003490 <HAL_DMA_Init+0xb8>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a50      	ldr	r2, [pc, #320]	; (80035cc <HAL_DMA_Init+0x1f4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d101      	bne.n	8003494 <HAL_DMA_Init+0xbc>
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <HAL_DMA_Init+0xbe>
 8003494:	2300      	movs	r3, #0
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 813b 	beq.w	8003712 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a37      	ldr	r2, [pc, #220]	; (8003590 <HAL_DMA_Init+0x1b8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d04a      	beq.n	800354c <HAL_DMA_Init+0x174>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a36      	ldr	r2, [pc, #216]	; (8003594 <HAL_DMA_Init+0x1bc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d045      	beq.n	800354c <HAL_DMA_Init+0x174>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a34      	ldr	r2, [pc, #208]	; (8003598 <HAL_DMA_Init+0x1c0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d040      	beq.n	800354c <HAL_DMA_Init+0x174>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a33      	ldr	r2, [pc, #204]	; (800359c <HAL_DMA_Init+0x1c4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d03b      	beq.n	800354c <HAL_DMA_Init+0x174>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a31      	ldr	r2, [pc, #196]	; (80035a0 <HAL_DMA_Init+0x1c8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d036      	beq.n	800354c <HAL_DMA_Init+0x174>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a30      	ldr	r2, [pc, #192]	; (80035a4 <HAL_DMA_Init+0x1cc>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d031      	beq.n	800354c <HAL_DMA_Init+0x174>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a2e      	ldr	r2, [pc, #184]	; (80035a8 <HAL_DMA_Init+0x1d0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d02c      	beq.n	800354c <HAL_DMA_Init+0x174>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a2d      	ldr	r2, [pc, #180]	; (80035ac <HAL_DMA_Init+0x1d4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d027      	beq.n	800354c <HAL_DMA_Init+0x174>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a2b      	ldr	r2, [pc, #172]	; (80035b0 <HAL_DMA_Init+0x1d8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d022      	beq.n	800354c <HAL_DMA_Init+0x174>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a2a      	ldr	r2, [pc, #168]	; (80035b4 <HAL_DMA_Init+0x1dc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d01d      	beq.n	800354c <HAL_DMA_Init+0x174>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a28      	ldr	r2, [pc, #160]	; (80035b8 <HAL_DMA_Init+0x1e0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d018      	beq.n	800354c <HAL_DMA_Init+0x174>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a27      	ldr	r2, [pc, #156]	; (80035bc <HAL_DMA_Init+0x1e4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d013      	beq.n	800354c <HAL_DMA_Init+0x174>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a25      	ldr	r2, [pc, #148]	; (80035c0 <HAL_DMA_Init+0x1e8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00e      	beq.n	800354c <HAL_DMA_Init+0x174>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a24      	ldr	r2, [pc, #144]	; (80035c4 <HAL_DMA_Init+0x1ec>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d009      	beq.n	800354c <HAL_DMA_Init+0x174>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a22      	ldr	r2, [pc, #136]	; (80035c8 <HAL_DMA_Init+0x1f0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d004      	beq.n	800354c <HAL_DMA_Init+0x174>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a21      	ldr	r2, [pc, #132]	; (80035cc <HAL_DMA_Init+0x1f4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d108      	bne.n	800355e <HAL_DMA_Init+0x186>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0201 	bic.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	e007      	b.n	800356e <HAL_DMA_Init+0x196>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0201 	bic.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800356e:	e02f      	b.n	80035d0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003570:	f7fe fda6 	bl	80020c0 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b05      	cmp	r3, #5
 800357c:	d928      	bls.n	80035d0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2203      	movs	r2, #3
 8003588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e246      	b.n	8003a1e <HAL_DMA_Init+0x646>
 8003590:	40020010 	.word	0x40020010
 8003594:	40020028 	.word	0x40020028
 8003598:	40020040 	.word	0x40020040
 800359c:	40020058 	.word	0x40020058
 80035a0:	40020070 	.word	0x40020070
 80035a4:	40020088 	.word	0x40020088
 80035a8:	400200a0 	.word	0x400200a0
 80035ac:	400200b8 	.word	0x400200b8
 80035b0:	40020410 	.word	0x40020410
 80035b4:	40020428 	.word	0x40020428
 80035b8:	40020440 	.word	0x40020440
 80035bc:	40020458 	.word	0x40020458
 80035c0:	40020470 	.word	0x40020470
 80035c4:	40020488 	.word	0x40020488
 80035c8:	400204a0 	.word	0x400204a0
 80035cc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1c8      	bne.n	8003570 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4b83      	ldr	r3, [pc, #524]	; (80037f8 <HAL_DMA_Init+0x420>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80035f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003602:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800360e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	2b04      	cmp	r3, #4
 8003622:	d107      	bne.n	8003634 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	4313      	orrs	r3, r2
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003634:	4b71      	ldr	r3, [pc, #452]	; (80037fc <HAL_DMA_Init+0x424>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4b71      	ldr	r3, [pc, #452]	; (8003800 <HAL_DMA_Init+0x428>)
 800363a:	4013      	ands	r3, r2
 800363c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003640:	d328      	bcc.n	8003694 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b28      	cmp	r3, #40	; 0x28
 8003648:	d903      	bls.n	8003652 <HAL_DMA_Init+0x27a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b2e      	cmp	r3, #46	; 0x2e
 8003650:	d917      	bls.n	8003682 <HAL_DMA_Init+0x2aa>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b3e      	cmp	r3, #62	; 0x3e
 8003658:	d903      	bls.n	8003662 <HAL_DMA_Init+0x28a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b42      	cmp	r3, #66	; 0x42
 8003660:	d90f      	bls.n	8003682 <HAL_DMA_Init+0x2aa>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b46      	cmp	r3, #70	; 0x46
 8003668:	d903      	bls.n	8003672 <HAL_DMA_Init+0x29a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b48      	cmp	r3, #72	; 0x48
 8003670:	d907      	bls.n	8003682 <HAL_DMA_Init+0x2aa>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b4e      	cmp	r3, #78	; 0x4e
 8003678:	d905      	bls.n	8003686 <HAL_DMA_Init+0x2ae>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b52      	cmp	r3, #82	; 0x52
 8003680:	d801      	bhi.n	8003686 <HAL_DMA_Init+0x2ae>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_DMA_Init+0x2b0>
 8003686:	2300      	movs	r3, #0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003692:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f023 0307 	bic.w	r3, r3, #7
 80036aa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d117      	bne.n	80036ee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00e      	beq.n	80036ee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f001 fbfd 	bl	8004ed0 <DMA_CheckFifoParam>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2240      	movs	r2, #64	; 0x40
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e197      	b.n	8003a1e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f001 fb38 	bl	8004d6c <DMA_CalcBaseAndBitshift>
 80036fc:	4603      	mov	r3, r0
 80036fe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	223f      	movs	r2, #63	; 0x3f
 800370a:	409a      	lsls	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	e0cd      	b.n	80038ae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a3b      	ldr	r2, [pc, #236]	; (8003804 <HAL_DMA_Init+0x42c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d022      	beq.n	8003762 <HAL_DMA_Init+0x38a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a39      	ldr	r2, [pc, #228]	; (8003808 <HAL_DMA_Init+0x430>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d01d      	beq.n	8003762 <HAL_DMA_Init+0x38a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a38      	ldr	r2, [pc, #224]	; (800380c <HAL_DMA_Init+0x434>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d018      	beq.n	8003762 <HAL_DMA_Init+0x38a>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a36      	ldr	r2, [pc, #216]	; (8003810 <HAL_DMA_Init+0x438>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d013      	beq.n	8003762 <HAL_DMA_Init+0x38a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a35      	ldr	r2, [pc, #212]	; (8003814 <HAL_DMA_Init+0x43c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00e      	beq.n	8003762 <HAL_DMA_Init+0x38a>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a33      	ldr	r2, [pc, #204]	; (8003818 <HAL_DMA_Init+0x440>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d009      	beq.n	8003762 <HAL_DMA_Init+0x38a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a32      	ldr	r2, [pc, #200]	; (800381c <HAL_DMA_Init+0x444>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d004      	beq.n	8003762 <HAL_DMA_Init+0x38a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a30      	ldr	r2, [pc, #192]	; (8003820 <HAL_DMA_Init+0x448>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d101      	bne.n	8003766 <HAL_DMA_Init+0x38e>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_DMA_Init+0x390>
 8003766:	2300      	movs	r3, #0
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8097 	beq.w	800389c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a24      	ldr	r2, [pc, #144]	; (8003804 <HAL_DMA_Init+0x42c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d021      	beq.n	80037bc <HAL_DMA_Init+0x3e4>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a22      	ldr	r2, [pc, #136]	; (8003808 <HAL_DMA_Init+0x430>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d01c      	beq.n	80037bc <HAL_DMA_Init+0x3e4>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a21      	ldr	r2, [pc, #132]	; (800380c <HAL_DMA_Init+0x434>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d017      	beq.n	80037bc <HAL_DMA_Init+0x3e4>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a1f      	ldr	r2, [pc, #124]	; (8003810 <HAL_DMA_Init+0x438>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d012      	beq.n	80037bc <HAL_DMA_Init+0x3e4>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1e      	ldr	r2, [pc, #120]	; (8003814 <HAL_DMA_Init+0x43c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00d      	beq.n	80037bc <HAL_DMA_Init+0x3e4>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1c      	ldr	r2, [pc, #112]	; (8003818 <HAL_DMA_Init+0x440>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d008      	beq.n	80037bc <HAL_DMA_Init+0x3e4>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1b      	ldr	r2, [pc, #108]	; (800381c <HAL_DMA_Init+0x444>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d003      	beq.n	80037bc <HAL_DMA_Init+0x3e4>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a19      	ldr	r2, [pc, #100]	; (8003820 <HAL_DMA_Init+0x448>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2202      	movs	r2, #2
 80037ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4b12      	ldr	r3, [pc, #72]	; (8003824 <HAL_DMA_Init+0x44c>)
 80037da:	4013      	ands	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b40      	cmp	r3, #64	; 0x40
 80037e4:	d020      	beq.n	8003828 <HAL_DMA_Init+0x450>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b80      	cmp	r3, #128	; 0x80
 80037ec:	d102      	bne.n	80037f4 <HAL_DMA_Init+0x41c>
 80037ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037f2:	e01a      	b.n	800382a <HAL_DMA_Init+0x452>
 80037f4:	2300      	movs	r3, #0
 80037f6:	e018      	b.n	800382a <HAL_DMA_Init+0x452>
 80037f8:	fe10803f 	.word	0xfe10803f
 80037fc:	5c001000 	.word	0x5c001000
 8003800:	ffff0000 	.word	0xffff0000
 8003804:	58025408 	.word	0x58025408
 8003808:	5802541c 	.word	0x5802541c
 800380c:	58025430 	.word	0x58025430
 8003810:	58025444 	.word	0x58025444
 8003814:	58025458 	.word	0x58025458
 8003818:	5802546c 	.word	0x5802546c
 800381c:	58025480 	.word	0x58025480
 8003820:	58025494 	.word	0x58025494
 8003824:	fffe000f 	.word	0xfffe000f
 8003828:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68d2      	ldr	r2, [r2, #12]
 800382e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003830:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003838:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003840:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003848:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003850:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003858:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	4b6e      	ldr	r3, [pc, #440]	; (8003a28 <HAL_DMA_Init+0x650>)
 8003870:	4413      	add	r3, r2
 8003872:	4a6e      	ldr	r2, [pc, #440]	; (8003a2c <HAL_DMA_Init+0x654>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	009a      	lsls	r2, r3, #2
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f001 fa73 	bl	8004d6c <DMA_CalcBaseAndBitshift>
 8003886:	4603      	mov	r3, r0
 8003888:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388e:	f003 031f 	and.w	r3, r3, #31
 8003892:	2201      	movs	r2, #1
 8003894:	409a      	lsls	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	e008      	b.n	80038ae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2240      	movs	r2, #64	; 0x40
 80038a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2203      	movs	r2, #3
 80038a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e0b7      	b.n	8003a1e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a5f      	ldr	r2, [pc, #380]	; (8003a30 <HAL_DMA_Init+0x658>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d072      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a5d      	ldr	r2, [pc, #372]	; (8003a34 <HAL_DMA_Init+0x65c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d06d      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a5c      	ldr	r2, [pc, #368]	; (8003a38 <HAL_DMA_Init+0x660>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d068      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a5a      	ldr	r2, [pc, #360]	; (8003a3c <HAL_DMA_Init+0x664>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d063      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a59      	ldr	r2, [pc, #356]	; (8003a40 <HAL_DMA_Init+0x668>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d05e      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a57      	ldr	r2, [pc, #348]	; (8003a44 <HAL_DMA_Init+0x66c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d059      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a56      	ldr	r2, [pc, #344]	; (8003a48 <HAL_DMA_Init+0x670>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d054      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a54      	ldr	r2, [pc, #336]	; (8003a4c <HAL_DMA_Init+0x674>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d04f      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a53      	ldr	r2, [pc, #332]	; (8003a50 <HAL_DMA_Init+0x678>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d04a      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a51      	ldr	r2, [pc, #324]	; (8003a54 <HAL_DMA_Init+0x67c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d045      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a50      	ldr	r2, [pc, #320]	; (8003a58 <HAL_DMA_Init+0x680>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d040      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a4e      	ldr	r2, [pc, #312]	; (8003a5c <HAL_DMA_Init+0x684>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d03b      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a4d      	ldr	r2, [pc, #308]	; (8003a60 <HAL_DMA_Init+0x688>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d036      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a4b      	ldr	r2, [pc, #300]	; (8003a64 <HAL_DMA_Init+0x68c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d031      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a4a      	ldr	r2, [pc, #296]	; (8003a68 <HAL_DMA_Init+0x690>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d02c      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a48      	ldr	r2, [pc, #288]	; (8003a6c <HAL_DMA_Init+0x694>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d027      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a47      	ldr	r2, [pc, #284]	; (8003a70 <HAL_DMA_Init+0x698>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d022      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a45      	ldr	r2, [pc, #276]	; (8003a74 <HAL_DMA_Init+0x69c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d01d      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a44      	ldr	r2, [pc, #272]	; (8003a78 <HAL_DMA_Init+0x6a0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d018      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a42      	ldr	r2, [pc, #264]	; (8003a7c <HAL_DMA_Init+0x6a4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d013      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a41      	ldr	r2, [pc, #260]	; (8003a80 <HAL_DMA_Init+0x6a8>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d00e      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a3f      	ldr	r2, [pc, #252]	; (8003a84 <HAL_DMA_Init+0x6ac>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d009      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a3e      	ldr	r2, [pc, #248]	; (8003a88 <HAL_DMA_Init+0x6b0>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d004      	beq.n	800399e <HAL_DMA_Init+0x5c6>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a3c      	ldr	r2, [pc, #240]	; (8003a8c <HAL_DMA_Init+0x6b4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d101      	bne.n	80039a2 <HAL_DMA_Init+0x5ca>
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <HAL_DMA_Init+0x5cc>
 80039a2:	2300      	movs	r3, #0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d032      	beq.n	8003a0e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f001 fb0d 	bl	8004fc8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b80      	cmp	r3, #128	; 0x80
 80039b4:	d102      	bne.n	80039bc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80039d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d010      	beq.n	80039fc <HAL_DMA_Init+0x624>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d80c      	bhi.n	80039fc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f001 fb8a 	bl	80050fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80039f8:	605a      	str	r2, [r3, #4]
 80039fa:	e008      	b.n	8003a0e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	a7fdabf8 	.word	0xa7fdabf8
 8003a2c:	cccccccd 	.word	0xcccccccd
 8003a30:	40020010 	.word	0x40020010
 8003a34:	40020028 	.word	0x40020028
 8003a38:	40020040 	.word	0x40020040
 8003a3c:	40020058 	.word	0x40020058
 8003a40:	40020070 	.word	0x40020070
 8003a44:	40020088 	.word	0x40020088
 8003a48:	400200a0 	.word	0x400200a0
 8003a4c:	400200b8 	.word	0x400200b8
 8003a50:	40020410 	.word	0x40020410
 8003a54:	40020428 	.word	0x40020428
 8003a58:	40020440 	.word	0x40020440
 8003a5c:	40020458 	.word	0x40020458
 8003a60:	40020470 	.word	0x40020470
 8003a64:	40020488 	.word	0x40020488
 8003a68:	400204a0 	.word	0x400204a0
 8003a6c:	400204b8 	.word	0x400204b8
 8003a70:	58025408 	.word	0x58025408
 8003a74:	5802541c 	.word	0x5802541c
 8003a78:	58025430 	.word	0x58025430
 8003a7c:	58025444 	.word	0x58025444
 8003a80:	58025458 	.word	0x58025458
 8003a84:	5802546c 	.word	0x5802546c
 8003a88:	58025480 	.word	0x58025480
 8003a8c:	58025494 	.word	0x58025494

08003a90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e205      	b.n	8003eae <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d004      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2280      	movs	r2, #128	; 0x80
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e1fa      	b.n	8003eae <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a8c      	ldr	r2, [pc, #560]	; (8003cf0 <HAL_DMA_Abort_IT+0x260>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d04a      	beq.n	8003b58 <HAL_DMA_Abort_IT+0xc8>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a8b      	ldr	r2, [pc, #556]	; (8003cf4 <HAL_DMA_Abort_IT+0x264>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d045      	beq.n	8003b58 <HAL_DMA_Abort_IT+0xc8>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a89      	ldr	r2, [pc, #548]	; (8003cf8 <HAL_DMA_Abort_IT+0x268>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d040      	beq.n	8003b58 <HAL_DMA_Abort_IT+0xc8>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a88      	ldr	r2, [pc, #544]	; (8003cfc <HAL_DMA_Abort_IT+0x26c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d03b      	beq.n	8003b58 <HAL_DMA_Abort_IT+0xc8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a86      	ldr	r2, [pc, #536]	; (8003d00 <HAL_DMA_Abort_IT+0x270>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d036      	beq.n	8003b58 <HAL_DMA_Abort_IT+0xc8>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a85      	ldr	r2, [pc, #532]	; (8003d04 <HAL_DMA_Abort_IT+0x274>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d031      	beq.n	8003b58 <HAL_DMA_Abort_IT+0xc8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a83      	ldr	r2, [pc, #524]	; (8003d08 <HAL_DMA_Abort_IT+0x278>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d02c      	beq.n	8003b58 <HAL_DMA_Abort_IT+0xc8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a82      	ldr	r2, [pc, #520]	; (8003d0c <HAL_DMA_Abort_IT+0x27c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d027      	beq.n	8003b58 <HAL_DMA_Abort_IT+0xc8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a80      	ldr	r2, [pc, #512]	; (8003d10 <HAL_DMA_Abort_IT+0x280>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d022      	beq.n	8003b58 <HAL_DMA_Abort_IT+0xc8>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a7f      	ldr	r2, [pc, #508]	; (8003d14 <HAL_DMA_Abort_IT+0x284>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d01d      	beq.n	8003b58 <HAL_DMA_Abort_IT+0xc8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a7d      	ldr	r2, [pc, #500]	; (8003d18 <HAL_DMA_Abort_IT+0x288>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d018      	beq.n	8003b58 <HAL_DMA_Abort_IT+0xc8>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a7c      	ldr	r2, [pc, #496]	; (8003d1c <HAL_DMA_Abort_IT+0x28c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d013      	beq.n	8003b58 <HAL_DMA_Abort_IT+0xc8>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a7a      	ldr	r2, [pc, #488]	; (8003d20 <HAL_DMA_Abort_IT+0x290>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00e      	beq.n	8003b58 <HAL_DMA_Abort_IT+0xc8>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a79      	ldr	r2, [pc, #484]	; (8003d24 <HAL_DMA_Abort_IT+0x294>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d009      	beq.n	8003b58 <HAL_DMA_Abort_IT+0xc8>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a77      	ldr	r2, [pc, #476]	; (8003d28 <HAL_DMA_Abort_IT+0x298>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d004      	beq.n	8003b58 <HAL_DMA_Abort_IT+0xc8>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a76      	ldr	r2, [pc, #472]	; (8003d2c <HAL_DMA_Abort_IT+0x29c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d101      	bne.n	8003b5c <HAL_DMA_Abort_IT+0xcc>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <HAL_DMA_Abort_IT+0xce>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d065      	beq.n	8003c2e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2204      	movs	r2, #4
 8003b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a60      	ldr	r2, [pc, #384]	; (8003cf0 <HAL_DMA_Abort_IT+0x260>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d04a      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x17a>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a5e      	ldr	r2, [pc, #376]	; (8003cf4 <HAL_DMA_Abort_IT+0x264>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d045      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x17a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a5d      	ldr	r2, [pc, #372]	; (8003cf8 <HAL_DMA_Abort_IT+0x268>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d040      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x17a>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a5b      	ldr	r2, [pc, #364]	; (8003cfc <HAL_DMA_Abort_IT+0x26c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d03b      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x17a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a5a      	ldr	r2, [pc, #360]	; (8003d00 <HAL_DMA_Abort_IT+0x270>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d036      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x17a>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a58      	ldr	r2, [pc, #352]	; (8003d04 <HAL_DMA_Abort_IT+0x274>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d031      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x17a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a57      	ldr	r2, [pc, #348]	; (8003d08 <HAL_DMA_Abort_IT+0x278>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d02c      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x17a>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a55      	ldr	r2, [pc, #340]	; (8003d0c <HAL_DMA_Abort_IT+0x27c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d027      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x17a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a54      	ldr	r2, [pc, #336]	; (8003d10 <HAL_DMA_Abort_IT+0x280>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d022      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x17a>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a52      	ldr	r2, [pc, #328]	; (8003d14 <HAL_DMA_Abort_IT+0x284>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d01d      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x17a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a51      	ldr	r2, [pc, #324]	; (8003d18 <HAL_DMA_Abort_IT+0x288>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d018      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x17a>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a4f      	ldr	r2, [pc, #316]	; (8003d1c <HAL_DMA_Abort_IT+0x28c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d013      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x17a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a4e      	ldr	r2, [pc, #312]	; (8003d20 <HAL_DMA_Abort_IT+0x290>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d00e      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x17a>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a4c      	ldr	r2, [pc, #304]	; (8003d24 <HAL_DMA_Abort_IT+0x294>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d009      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x17a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a4b      	ldr	r2, [pc, #300]	; (8003d28 <HAL_DMA_Abort_IT+0x298>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d004      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x17a>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a49      	ldr	r2, [pc, #292]	; (8003d2c <HAL_DMA_Abort_IT+0x29c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d108      	bne.n	8003c1c <HAL_DMA_Abort_IT+0x18c>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	e147      	b.n	8003eac <HAL_DMA_Abort_IT+0x41c>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0201 	bic.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	e13e      	b.n	8003eac <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 020e 	bic.w	r2, r2, #14
 8003c3c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a2b      	ldr	r2, [pc, #172]	; (8003cf0 <HAL_DMA_Abort_IT+0x260>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d04a      	beq.n	8003cde <HAL_DMA_Abort_IT+0x24e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a29      	ldr	r2, [pc, #164]	; (8003cf4 <HAL_DMA_Abort_IT+0x264>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d045      	beq.n	8003cde <HAL_DMA_Abort_IT+0x24e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a28      	ldr	r2, [pc, #160]	; (8003cf8 <HAL_DMA_Abort_IT+0x268>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d040      	beq.n	8003cde <HAL_DMA_Abort_IT+0x24e>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a26      	ldr	r2, [pc, #152]	; (8003cfc <HAL_DMA_Abort_IT+0x26c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d03b      	beq.n	8003cde <HAL_DMA_Abort_IT+0x24e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a25      	ldr	r2, [pc, #148]	; (8003d00 <HAL_DMA_Abort_IT+0x270>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d036      	beq.n	8003cde <HAL_DMA_Abort_IT+0x24e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a23      	ldr	r2, [pc, #140]	; (8003d04 <HAL_DMA_Abort_IT+0x274>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d031      	beq.n	8003cde <HAL_DMA_Abort_IT+0x24e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a22      	ldr	r2, [pc, #136]	; (8003d08 <HAL_DMA_Abort_IT+0x278>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d02c      	beq.n	8003cde <HAL_DMA_Abort_IT+0x24e>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a20      	ldr	r2, [pc, #128]	; (8003d0c <HAL_DMA_Abort_IT+0x27c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d027      	beq.n	8003cde <HAL_DMA_Abort_IT+0x24e>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a1f      	ldr	r2, [pc, #124]	; (8003d10 <HAL_DMA_Abort_IT+0x280>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d022      	beq.n	8003cde <HAL_DMA_Abort_IT+0x24e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a1d      	ldr	r2, [pc, #116]	; (8003d14 <HAL_DMA_Abort_IT+0x284>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01d      	beq.n	8003cde <HAL_DMA_Abort_IT+0x24e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1c      	ldr	r2, [pc, #112]	; (8003d18 <HAL_DMA_Abort_IT+0x288>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d018      	beq.n	8003cde <HAL_DMA_Abort_IT+0x24e>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1a      	ldr	r2, [pc, #104]	; (8003d1c <HAL_DMA_Abort_IT+0x28c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <HAL_DMA_Abort_IT+0x24e>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a19      	ldr	r2, [pc, #100]	; (8003d20 <HAL_DMA_Abort_IT+0x290>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00e      	beq.n	8003cde <HAL_DMA_Abort_IT+0x24e>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a17      	ldr	r2, [pc, #92]	; (8003d24 <HAL_DMA_Abort_IT+0x294>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d009      	beq.n	8003cde <HAL_DMA_Abort_IT+0x24e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a16      	ldr	r2, [pc, #88]	; (8003d28 <HAL_DMA_Abort_IT+0x298>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <HAL_DMA_Abort_IT+0x24e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a14      	ldr	r2, [pc, #80]	; (8003d2c <HAL_DMA_Abort_IT+0x29c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d128      	bne.n	8003d30 <HAL_DMA_Abort_IT+0x2a0>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0201 	bic.w	r2, r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e027      	b.n	8003d40 <HAL_DMA_Abort_IT+0x2b0>
 8003cf0:	40020010 	.word	0x40020010
 8003cf4:	40020028 	.word	0x40020028
 8003cf8:	40020040 	.word	0x40020040
 8003cfc:	40020058 	.word	0x40020058
 8003d00:	40020070 	.word	0x40020070
 8003d04:	40020088 	.word	0x40020088
 8003d08:	400200a0 	.word	0x400200a0
 8003d0c:	400200b8 	.word	0x400200b8
 8003d10:	40020410 	.word	0x40020410
 8003d14:	40020428 	.word	0x40020428
 8003d18:	40020440 	.word	0x40020440
 8003d1c:	40020458 	.word	0x40020458
 8003d20:	40020470 	.word	0x40020470
 8003d24:	40020488 	.word	0x40020488
 8003d28:	400204a0 	.word	0x400204a0
 8003d2c:	400204b8 	.word	0x400204b8
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0201 	bic.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a5c      	ldr	r2, [pc, #368]	; (8003eb8 <HAL_DMA_Abort_IT+0x428>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d072      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a5b      	ldr	r2, [pc, #364]	; (8003ebc <HAL_DMA_Abort_IT+0x42c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d06d      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a59      	ldr	r2, [pc, #356]	; (8003ec0 <HAL_DMA_Abort_IT+0x430>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d068      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a58      	ldr	r2, [pc, #352]	; (8003ec4 <HAL_DMA_Abort_IT+0x434>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d063      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a56      	ldr	r2, [pc, #344]	; (8003ec8 <HAL_DMA_Abort_IT+0x438>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d05e      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a55      	ldr	r2, [pc, #340]	; (8003ecc <HAL_DMA_Abort_IT+0x43c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d059      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a53      	ldr	r2, [pc, #332]	; (8003ed0 <HAL_DMA_Abort_IT+0x440>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d054      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a52      	ldr	r2, [pc, #328]	; (8003ed4 <HAL_DMA_Abort_IT+0x444>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d04f      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a50      	ldr	r2, [pc, #320]	; (8003ed8 <HAL_DMA_Abort_IT+0x448>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d04a      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a4f      	ldr	r2, [pc, #316]	; (8003edc <HAL_DMA_Abort_IT+0x44c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d045      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a4d      	ldr	r2, [pc, #308]	; (8003ee0 <HAL_DMA_Abort_IT+0x450>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d040      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a4c      	ldr	r2, [pc, #304]	; (8003ee4 <HAL_DMA_Abort_IT+0x454>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d03b      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a4a      	ldr	r2, [pc, #296]	; (8003ee8 <HAL_DMA_Abort_IT+0x458>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d036      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a49      	ldr	r2, [pc, #292]	; (8003eec <HAL_DMA_Abort_IT+0x45c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d031      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a47      	ldr	r2, [pc, #284]	; (8003ef0 <HAL_DMA_Abort_IT+0x460>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d02c      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a46      	ldr	r2, [pc, #280]	; (8003ef4 <HAL_DMA_Abort_IT+0x464>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d027      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a44      	ldr	r2, [pc, #272]	; (8003ef8 <HAL_DMA_Abort_IT+0x468>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d022      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a43      	ldr	r2, [pc, #268]	; (8003efc <HAL_DMA_Abort_IT+0x46c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d01d      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a41      	ldr	r2, [pc, #260]	; (8003f00 <HAL_DMA_Abort_IT+0x470>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d018      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a40      	ldr	r2, [pc, #256]	; (8003f04 <HAL_DMA_Abort_IT+0x474>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d013      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a3e      	ldr	r2, [pc, #248]	; (8003f08 <HAL_DMA_Abort_IT+0x478>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00e      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a3d      	ldr	r2, [pc, #244]	; (8003f0c <HAL_DMA_Abort_IT+0x47c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d009      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a3b      	ldr	r2, [pc, #236]	; (8003f10 <HAL_DMA_Abort_IT+0x480>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d004      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x3a0>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a3a      	ldr	r2, [pc, #232]	; (8003f14 <HAL_DMA_Abort_IT+0x484>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d101      	bne.n	8003e34 <HAL_DMA_Abort_IT+0x3a4>
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <HAL_DMA_Abort_IT+0x3a6>
 8003e34:	2300      	movs	r3, #0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d028      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e48:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	2201      	movs	r2, #1
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e68:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00c      	beq.n	8003e8c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e80:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e8a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40020010 	.word	0x40020010
 8003ebc:	40020028 	.word	0x40020028
 8003ec0:	40020040 	.word	0x40020040
 8003ec4:	40020058 	.word	0x40020058
 8003ec8:	40020070 	.word	0x40020070
 8003ecc:	40020088 	.word	0x40020088
 8003ed0:	400200a0 	.word	0x400200a0
 8003ed4:	400200b8 	.word	0x400200b8
 8003ed8:	40020410 	.word	0x40020410
 8003edc:	40020428 	.word	0x40020428
 8003ee0:	40020440 	.word	0x40020440
 8003ee4:	40020458 	.word	0x40020458
 8003ee8:	40020470 	.word	0x40020470
 8003eec:	40020488 	.word	0x40020488
 8003ef0:	400204a0 	.word	0x400204a0
 8003ef4:	400204b8 	.word	0x400204b8
 8003ef8:	58025408 	.word	0x58025408
 8003efc:	5802541c 	.word	0x5802541c
 8003f00:	58025430 	.word	0x58025430
 8003f04:	58025444 	.word	0x58025444
 8003f08:	58025458 	.word	0x58025458
 8003f0c:	5802546c 	.word	0x5802546c
 8003f10:	58025480 	.word	0x58025480
 8003f14:	58025494 	.word	0x58025494

08003f18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	; 0x28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f24:	4b67      	ldr	r3, [pc, #412]	; (80040c4 <HAL_DMA_IRQHandler+0x1ac>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a67      	ldr	r2, [pc, #412]	; (80040c8 <HAL_DMA_IRQHandler+0x1b0>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	0a9b      	lsrs	r3, r3, #10
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a5f      	ldr	r2, [pc, #380]	; (80040cc <HAL_DMA_IRQHandler+0x1b4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d04a      	beq.n	8003fea <HAL_DMA_IRQHandler+0xd2>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a5d      	ldr	r2, [pc, #372]	; (80040d0 <HAL_DMA_IRQHandler+0x1b8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d045      	beq.n	8003fea <HAL_DMA_IRQHandler+0xd2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a5c      	ldr	r2, [pc, #368]	; (80040d4 <HAL_DMA_IRQHandler+0x1bc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d040      	beq.n	8003fea <HAL_DMA_IRQHandler+0xd2>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a5a      	ldr	r2, [pc, #360]	; (80040d8 <HAL_DMA_IRQHandler+0x1c0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d03b      	beq.n	8003fea <HAL_DMA_IRQHandler+0xd2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a59      	ldr	r2, [pc, #356]	; (80040dc <HAL_DMA_IRQHandler+0x1c4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d036      	beq.n	8003fea <HAL_DMA_IRQHandler+0xd2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a57      	ldr	r2, [pc, #348]	; (80040e0 <HAL_DMA_IRQHandler+0x1c8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d031      	beq.n	8003fea <HAL_DMA_IRQHandler+0xd2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a56      	ldr	r2, [pc, #344]	; (80040e4 <HAL_DMA_IRQHandler+0x1cc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d02c      	beq.n	8003fea <HAL_DMA_IRQHandler+0xd2>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a54      	ldr	r2, [pc, #336]	; (80040e8 <HAL_DMA_IRQHandler+0x1d0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d027      	beq.n	8003fea <HAL_DMA_IRQHandler+0xd2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a53      	ldr	r2, [pc, #332]	; (80040ec <HAL_DMA_IRQHandler+0x1d4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d022      	beq.n	8003fea <HAL_DMA_IRQHandler+0xd2>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a51      	ldr	r2, [pc, #324]	; (80040f0 <HAL_DMA_IRQHandler+0x1d8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d01d      	beq.n	8003fea <HAL_DMA_IRQHandler+0xd2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a50      	ldr	r2, [pc, #320]	; (80040f4 <HAL_DMA_IRQHandler+0x1dc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d018      	beq.n	8003fea <HAL_DMA_IRQHandler+0xd2>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a4e      	ldr	r2, [pc, #312]	; (80040f8 <HAL_DMA_IRQHandler+0x1e0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d013      	beq.n	8003fea <HAL_DMA_IRQHandler+0xd2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a4d      	ldr	r2, [pc, #308]	; (80040fc <HAL_DMA_IRQHandler+0x1e4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00e      	beq.n	8003fea <HAL_DMA_IRQHandler+0xd2>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a4b      	ldr	r2, [pc, #300]	; (8004100 <HAL_DMA_IRQHandler+0x1e8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d009      	beq.n	8003fea <HAL_DMA_IRQHandler+0xd2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a4a      	ldr	r2, [pc, #296]	; (8004104 <HAL_DMA_IRQHandler+0x1ec>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d004      	beq.n	8003fea <HAL_DMA_IRQHandler+0xd2>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a48      	ldr	r2, [pc, #288]	; (8004108 <HAL_DMA_IRQHandler+0x1f0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d101      	bne.n	8003fee <HAL_DMA_IRQHandler+0xd6>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_DMA_IRQHandler+0xd8>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 842b 	beq.w	800484c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	2208      	movs	r2, #8
 8004000:	409a      	lsls	r2, r3
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	4013      	ands	r3, r2
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 80a2 	beq.w	8004150 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a2e      	ldr	r2, [pc, #184]	; (80040cc <HAL_DMA_IRQHandler+0x1b4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d04a      	beq.n	80040ac <HAL_DMA_IRQHandler+0x194>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a2d      	ldr	r2, [pc, #180]	; (80040d0 <HAL_DMA_IRQHandler+0x1b8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d045      	beq.n	80040ac <HAL_DMA_IRQHandler+0x194>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a2b      	ldr	r2, [pc, #172]	; (80040d4 <HAL_DMA_IRQHandler+0x1bc>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d040      	beq.n	80040ac <HAL_DMA_IRQHandler+0x194>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a2a      	ldr	r2, [pc, #168]	; (80040d8 <HAL_DMA_IRQHandler+0x1c0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d03b      	beq.n	80040ac <HAL_DMA_IRQHandler+0x194>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a28      	ldr	r2, [pc, #160]	; (80040dc <HAL_DMA_IRQHandler+0x1c4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d036      	beq.n	80040ac <HAL_DMA_IRQHandler+0x194>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a27      	ldr	r2, [pc, #156]	; (80040e0 <HAL_DMA_IRQHandler+0x1c8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d031      	beq.n	80040ac <HAL_DMA_IRQHandler+0x194>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a25      	ldr	r2, [pc, #148]	; (80040e4 <HAL_DMA_IRQHandler+0x1cc>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d02c      	beq.n	80040ac <HAL_DMA_IRQHandler+0x194>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a24      	ldr	r2, [pc, #144]	; (80040e8 <HAL_DMA_IRQHandler+0x1d0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d027      	beq.n	80040ac <HAL_DMA_IRQHandler+0x194>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a22      	ldr	r2, [pc, #136]	; (80040ec <HAL_DMA_IRQHandler+0x1d4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d022      	beq.n	80040ac <HAL_DMA_IRQHandler+0x194>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a21      	ldr	r2, [pc, #132]	; (80040f0 <HAL_DMA_IRQHandler+0x1d8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d01d      	beq.n	80040ac <HAL_DMA_IRQHandler+0x194>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1f      	ldr	r2, [pc, #124]	; (80040f4 <HAL_DMA_IRQHandler+0x1dc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d018      	beq.n	80040ac <HAL_DMA_IRQHandler+0x194>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a1e      	ldr	r2, [pc, #120]	; (80040f8 <HAL_DMA_IRQHandler+0x1e0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d013      	beq.n	80040ac <HAL_DMA_IRQHandler+0x194>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1c      	ldr	r2, [pc, #112]	; (80040fc <HAL_DMA_IRQHandler+0x1e4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00e      	beq.n	80040ac <HAL_DMA_IRQHandler+0x194>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a1b      	ldr	r2, [pc, #108]	; (8004100 <HAL_DMA_IRQHandler+0x1e8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d009      	beq.n	80040ac <HAL_DMA_IRQHandler+0x194>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a19      	ldr	r2, [pc, #100]	; (8004104 <HAL_DMA_IRQHandler+0x1ec>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d004      	beq.n	80040ac <HAL_DMA_IRQHandler+0x194>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a18      	ldr	r2, [pc, #96]	; (8004108 <HAL_DMA_IRQHandler+0x1f0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d12f      	bne.n	800410c <HAL_DMA_IRQHandler+0x1f4>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	bf14      	ite	ne
 80040ba:	2301      	movne	r3, #1
 80040bc:	2300      	moveq	r3, #0
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	e02e      	b.n	8004120 <HAL_DMA_IRQHandler+0x208>
 80040c2:	bf00      	nop
 80040c4:	24000020 	.word	0x24000020
 80040c8:	1b4e81b5 	.word	0x1b4e81b5
 80040cc:	40020010 	.word	0x40020010
 80040d0:	40020028 	.word	0x40020028
 80040d4:	40020040 	.word	0x40020040
 80040d8:	40020058 	.word	0x40020058
 80040dc:	40020070 	.word	0x40020070
 80040e0:	40020088 	.word	0x40020088
 80040e4:	400200a0 	.word	0x400200a0
 80040e8:	400200b8 	.word	0x400200b8
 80040ec:	40020410 	.word	0x40020410
 80040f0:	40020428 	.word	0x40020428
 80040f4:	40020440 	.word	0x40020440
 80040f8:	40020458 	.word	0x40020458
 80040fc:	40020470 	.word	0x40020470
 8004100:	40020488 	.word	0x40020488
 8004104:	400204a0 	.word	0x400204a0
 8004108:	400204b8 	.word	0x400204b8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	bf14      	ite	ne
 800411a:	2301      	movne	r3, #1
 800411c:	2300      	moveq	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d015      	beq.n	8004150 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0204 	bic.w	r2, r2, #4
 8004132:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	2208      	movs	r2, #8
 800413e:	409a      	lsls	r2, r3
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004148:	f043 0201 	orr.w	r2, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	fa22 f303 	lsr.w	r3, r2, r3
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d06e      	beq.n	8004244 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a69      	ldr	r2, [pc, #420]	; (8004310 <HAL_DMA_IRQHandler+0x3f8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d04a      	beq.n	8004206 <HAL_DMA_IRQHandler+0x2ee>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a67      	ldr	r2, [pc, #412]	; (8004314 <HAL_DMA_IRQHandler+0x3fc>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d045      	beq.n	8004206 <HAL_DMA_IRQHandler+0x2ee>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a66      	ldr	r2, [pc, #408]	; (8004318 <HAL_DMA_IRQHandler+0x400>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d040      	beq.n	8004206 <HAL_DMA_IRQHandler+0x2ee>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a64      	ldr	r2, [pc, #400]	; (800431c <HAL_DMA_IRQHandler+0x404>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d03b      	beq.n	8004206 <HAL_DMA_IRQHandler+0x2ee>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a63      	ldr	r2, [pc, #396]	; (8004320 <HAL_DMA_IRQHandler+0x408>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d036      	beq.n	8004206 <HAL_DMA_IRQHandler+0x2ee>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a61      	ldr	r2, [pc, #388]	; (8004324 <HAL_DMA_IRQHandler+0x40c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d031      	beq.n	8004206 <HAL_DMA_IRQHandler+0x2ee>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a60      	ldr	r2, [pc, #384]	; (8004328 <HAL_DMA_IRQHandler+0x410>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d02c      	beq.n	8004206 <HAL_DMA_IRQHandler+0x2ee>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a5e      	ldr	r2, [pc, #376]	; (800432c <HAL_DMA_IRQHandler+0x414>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d027      	beq.n	8004206 <HAL_DMA_IRQHandler+0x2ee>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a5d      	ldr	r2, [pc, #372]	; (8004330 <HAL_DMA_IRQHandler+0x418>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d022      	beq.n	8004206 <HAL_DMA_IRQHandler+0x2ee>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a5b      	ldr	r2, [pc, #364]	; (8004334 <HAL_DMA_IRQHandler+0x41c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d01d      	beq.n	8004206 <HAL_DMA_IRQHandler+0x2ee>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a5a      	ldr	r2, [pc, #360]	; (8004338 <HAL_DMA_IRQHandler+0x420>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d018      	beq.n	8004206 <HAL_DMA_IRQHandler+0x2ee>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a58      	ldr	r2, [pc, #352]	; (800433c <HAL_DMA_IRQHandler+0x424>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <HAL_DMA_IRQHandler+0x2ee>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a57      	ldr	r2, [pc, #348]	; (8004340 <HAL_DMA_IRQHandler+0x428>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00e      	beq.n	8004206 <HAL_DMA_IRQHandler+0x2ee>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a55      	ldr	r2, [pc, #340]	; (8004344 <HAL_DMA_IRQHandler+0x42c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d009      	beq.n	8004206 <HAL_DMA_IRQHandler+0x2ee>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a54      	ldr	r2, [pc, #336]	; (8004348 <HAL_DMA_IRQHandler+0x430>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_DMA_IRQHandler+0x2ee>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a52      	ldr	r2, [pc, #328]	; (800434c <HAL_DMA_IRQHandler+0x434>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d10a      	bne.n	800421c <HAL_DMA_IRQHandler+0x304>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004210:	2b00      	cmp	r3, #0
 8004212:	bf14      	ite	ne
 8004214:	2301      	movne	r3, #1
 8004216:	2300      	moveq	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	e003      	b.n	8004224 <HAL_DMA_IRQHandler+0x30c>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2300      	movs	r3, #0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00d      	beq.n	8004244 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	2201      	movs	r2, #1
 8004232:	409a      	lsls	r2, r3
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	f043 0202 	orr.w	r2, r3, #2
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004248:	f003 031f 	and.w	r3, r3, #31
 800424c:	2204      	movs	r2, #4
 800424e:	409a      	lsls	r2, r3
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	4013      	ands	r3, r2
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 808f 	beq.w	8004378 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a2c      	ldr	r2, [pc, #176]	; (8004310 <HAL_DMA_IRQHandler+0x3f8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d04a      	beq.n	80042fa <HAL_DMA_IRQHandler+0x3e2>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a2a      	ldr	r2, [pc, #168]	; (8004314 <HAL_DMA_IRQHandler+0x3fc>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d045      	beq.n	80042fa <HAL_DMA_IRQHandler+0x3e2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a29      	ldr	r2, [pc, #164]	; (8004318 <HAL_DMA_IRQHandler+0x400>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d040      	beq.n	80042fa <HAL_DMA_IRQHandler+0x3e2>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a27      	ldr	r2, [pc, #156]	; (800431c <HAL_DMA_IRQHandler+0x404>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d03b      	beq.n	80042fa <HAL_DMA_IRQHandler+0x3e2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a26      	ldr	r2, [pc, #152]	; (8004320 <HAL_DMA_IRQHandler+0x408>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d036      	beq.n	80042fa <HAL_DMA_IRQHandler+0x3e2>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a24      	ldr	r2, [pc, #144]	; (8004324 <HAL_DMA_IRQHandler+0x40c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d031      	beq.n	80042fa <HAL_DMA_IRQHandler+0x3e2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a23      	ldr	r2, [pc, #140]	; (8004328 <HAL_DMA_IRQHandler+0x410>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d02c      	beq.n	80042fa <HAL_DMA_IRQHandler+0x3e2>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a21      	ldr	r2, [pc, #132]	; (800432c <HAL_DMA_IRQHandler+0x414>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d027      	beq.n	80042fa <HAL_DMA_IRQHandler+0x3e2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a20      	ldr	r2, [pc, #128]	; (8004330 <HAL_DMA_IRQHandler+0x418>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d022      	beq.n	80042fa <HAL_DMA_IRQHandler+0x3e2>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1e      	ldr	r2, [pc, #120]	; (8004334 <HAL_DMA_IRQHandler+0x41c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d01d      	beq.n	80042fa <HAL_DMA_IRQHandler+0x3e2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1d      	ldr	r2, [pc, #116]	; (8004338 <HAL_DMA_IRQHandler+0x420>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d018      	beq.n	80042fa <HAL_DMA_IRQHandler+0x3e2>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1b      	ldr	r2, [pc, #108]	; (800433c <HAL_DMA_IRQHandler+0x424>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d013      	beq.n	80042fa <HAL_DMA_IRQHandler+0x3e2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1a      	ldr	r2, [pc, #104]	; (8004340 <HAL_DMA_IRQHandler+0x428>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00e      	beq.n	80042fa <HAL_DMA_IRQHandler+0x3e2>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a18      	ldr	r2, [pc, #96]	; (8004344 <HAL_DMA_IRQHandler+0x42c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d009      	beq.n	80042fa <HAL_DMA_IRQHandler+0x3e2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a17      	ldr	r2, [pc, #92]	; (8004348 <HAL_DMA_IRQHandler+0x430>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d004      	beq.n	80042fa <HAL_DMA_IRQHandler+0x3e2>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a15      	ldr	r2, [pc, #84]	; (800434c <HAL_DMA_IRQHandler+0x434>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d12a      	bne.n	8004350 <HAL_DMA_IRQHandler+0x438>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf14      	ite	ne
 8004308:	2301      	movne	r3, #1
 800430a:	2300      	moveq	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	e023      	b.n	8004358 <HAL_DMA_IRQHandler+0x440>
 8004310:	40020010 	.word	0x40020010
 8004314:	40020028 	.word	0x40020028
 8004318:	40020040 	.word	0x40020040
 800431c:	40020058 	.word	0x40020058
 8004320:	40020070 	.word	0x40020070
 8004324:	40020088 	.word	0x40020088
 8004328:	400200a0 	.word	0x400200a0
 800432c:	400200b8 	.word	0x400200b8
 8004330:	40020410 	.word	0x40020410
 8004334:	40020428 	.word	0x40020428
 8004338:	40020440 	.word	0x40020440
 800433c:	40020458 	.word	0x40020458
 8004340:	40020470 	.word	0x40020470
 8004344:	40020488 	.word	0x40020488
 8004348:	400204a0 	.word	0x400204a0
 800434c:	400204b8 	.word	0x400204b8
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2300      	movs	r3, #0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00d      	beq.n	8004378 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004360:	f003 031f 	and.w	r3, r3, #31
 8004364:	2204      	movs	r2, #4
 8004366:	409a      	lsls	r2, r3
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	f043 0204 	orr.w	r2, r3, #4
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437c:	f003 031f 	and.w	r3, r3, #31
 8004380:	2210      	movs	r2, #16
 8004382:	409a      	lsls	r2, r3
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	4013      	ands	r3, r2
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80a6 	beq.w	80044da <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a85      	ldr	r2, [pc, #532]	; (80045a8 <HAL_DMA_IRQHandler+0x690>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d04a      	beq.n	800442e <HAL_DMA_IRQHandler+0x516>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a83      	ldr	r2, [pc, #524]	; (80045ac <HAL_DMA_IRQHandler+0x694>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d045      	beq.n	800442e <HAL_DMA_IRQHandler+0x516>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a82      	ldr	r2, [pc, #520]	; (80045b0 <HAL_DMA_IRQHandler+0x698>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d040      	beq.n	800442e <HAL_DMA_IRQHandler+0x516>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a80      	ldr	r2, [pc, #512]	; (80045b4 <HAL_DMA_IRQHandler+0x69c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d03b      	beq.n	800442e <HAL_DMA_IRQHandler+0x516>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a7f      	ldr	r2, [pc, #508]	; (80045b8 <HAL_DMA_IRQHandler+0x6a0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d036      	beq.n	800442e <HAL_DMA_IRQHandler+0x516>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a7d      	ldr	r2, [pc, #500]	; (80045bc <HAL_DMA_IRQHandler+0x6a4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d031      	beq.n	800442e <HAL_DMA_IRQHandler+0x516>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a7c      	ldr	r2, [pc, #496]	; (80045c0 <HAL_DMA_IRQHandler+0x6a8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d02c      	beq.n	800442e <HAL_DMA_IRQHandler+0x516>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a7a      	ldr	r2, [pc, #488]	; (80045c4 <HAL_DMA_IRQHandler+0x6ac>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d027      	beq.n	800442e <HAL_DMA_IRQHandler+0x516>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a79      	ldr	r2, [pc, #484]	; (80045c8 <HAL_DMA_IRQHandler+0x6b0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d022      	beq.n	800442e <HAL_DMA_IRQHandler+0x516>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a77      	ldr	r2, [pc, #476]	; (80045cc <HAL_DMA_IRQHandler+0x6b4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d01d      	beq.n	800442e <HAL_DMA_IRQHandler+0x516>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a76      	ldr	r2, [pc, #472]	; (80045d0 <HAL_DMA_IRQHandler+0x6b8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d018      	beq.n	800442e <HAL_DMA_IRQHandler+0x516>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a74      	ldr	r2, [pc, #464]	; (80045d4 <HAL_DMA_IRQHandler+0x6bc>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d013      	beq.n	800442e <HAL_DMA_IRQHandler+0x516>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a73      	ldr	r2, [pc, #460]	; (80045d8 <HAL_DMA_IRQHandler+0x6c0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00e      	beq.n	800442e <HAL_DMA_IRQHandler+0x516>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a71      	ldr	r2, [pc, #452]	; (80045dc <HAL_DMA_IRQHandler+0x6c4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d009      	beq.n	800442e <HAL_DMA_IRQHandler+0x516>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a70      	ldr	r2, [pc, #448]	; (80045e0 <HAL_DMA_IRQHandler+0x6c8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d004      	beq.n	800442e <HAL_DMA_IRQHandler+0x516>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a6e      	ldr	r2, [pc, #440]	; (80045e4 <HAL_DMA_IRQHandler+0x6cc>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d10a      	bne.n	8004444 <HAL_DMA_IRQHandler+0x52c>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf14      	ite	ne
 800443c:	2301      	movne	r3, #1
 800443e:	2300      	moveq	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	e009      	b.n	8004458 <HAL_DMA_IRQHandler+0x540>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b00      	cmp	r3, #0
 8004450:	bf14      	ite	ne
 8004452:	2301      	movne	r3, #1
 8004454:	2300      	moveq	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d03e      	beq.n	80044da <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	2210      	movs	r2, #16
 8004466:	409a      	lsls	r2, r3
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d018      	beq.n	80044ac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d108      	bne.n	800449a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	2b00      	cmp	r3, #0
 800448e:	d024      	beq.n	80044da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	4798      	blx	r3
 8004498:	e01f      	b.n	80044da <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d01b      	beq.n	80044da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	4798      	blx	r3
 80044aa:	e016      	b.n	80044da <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d107      	bne.n	80044ca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0208 	bic.w	r2, r2, #8
 80044c8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044de:	f003 031f 	and.w	r3, r3, #31
 80044e2:	2220      	movs	r2, #32
 80044e4:	409a      	lsls	r2, r3
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 8110 	beq.w	8004710 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a2c      	ldr	r2, [pc, #176]	; (80045a8 <HAL_DMA_IRQHandler+0x690>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d04a      	beq.n	8004590 <HAL_DMA_IRQHandler+0x678>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a2b      	ldr	r2, [pc, #172]	; (80045ac <HAL_DMA_IRQHandler+0x694>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d045      	beq.n	8004590 <HAL_DMA_IRQHandler+0x678>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a29      	ldr	r2, [pc, #164]	; (80045b0 <HAL_DMA_IRQHandler+0x698>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d040      	beq.n	8004590 <HAL_DMA_IRQHandler+0x678>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a28      	ldr	r2, [pc, #160]	; (80045b4 <HAL_DMA_IRQHandler+0x69c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d03b      	beq.n	8004590 <HAL_DMA_IRQHandler+0x678>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a26      	ldr	r2, [pc, #152]	; (80045b8 <HAL_DMA_IRQHandler+0x6a0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d036      	beq.n	8004590 <HAL_DMA_IRQHandler+0x678>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a25      	ldr	r2, [pc, #148]	; (80045bc <HAL_DMA_IRQHandler+0x6a4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d031      	beq.n	8004590 <HAL_DMA_IRQHandler+0x678>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a23      	ldr	r2, [pc, #140]	; (80045c0 <HAL_DMA_IRQHandler+0x6a8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d02c      	beq.n	8004590 <HAL_DMA_IRQHandler+0x678>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a22      	ldr	r2, [pc, #136]	; (80045c4 <HAL_DMA_IRQHandler+0x6ac>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d027      	beq.n	8004590 <HAL_DMA_IRQHandler+0x678>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a20      	ldr	r2, [pc, #128]	; (80045c8 <HAL_DMA_IRQHandler+0x6b0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d022      	beq.n	8004590 <HAL_DMA_IRQHandler+0x678>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <HAL_DMA_IRQHandler+0x6b4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d01d      	beq.n	8004590 <HAL_DMA_IRQHandler+0x678>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a1d      	ldr	r2, [pc, #116]	; (80045d0 <HAL_DMA_IRQHandler+0x6b8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d018      	beq.n	8004590 <HAL_DMA_IRQHandler+0x678>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1c      	ldr	r2, [pc, #112]	; (80045d4 <HAL_DMA_IRQHandler+0x6bc>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d013      	beq.n	8004590 <HAL_DMA_IRQHandler+0x678>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1a      	ldr	r2, [pc, #104]	; (80045d8 <HAL_DMA_IRQHandler+0x6c0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00e      	beq.n	8004590 <HAL_DMA_IRQHandler+0x678>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a19      	ldr	r2, [pc, #100]	; (80045dc <HAL_DMA_IRQHandler+0x6c4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d009      	beq.n	8004590 <HAL_DMA_IRQHandler+0x678>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a17      	ldr	r2, [pc, #92]	; (80045e0 <HAL_DMA_IRQHandler+0x6c8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d004      	beq.n	8004590 <HAL_DMA_IRQHandler+0x678>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a16      	ldr	r2, [pc, #88]	; (80045e4 <HAL_DMA_IRQHandler+0x6cc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d12b      	bne.n	80045e8 <HAL_DMA_IRQHandler+0x6d0>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0310 	and.w	r3, r3, #16
 800459a:	2b00      	cmp	r3, #0
 800459c:	bf14      	ite	ne
 800459e:	2301      	movne	r3, #1
 80045a0:	2300      	moveq	r3, #0
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	e02a      	b.n	80045fc <HAL_DMA_IRQHandler+0x6e4>
 80045a6:	bf00      	nop
 80045a8:	40020010 	.word	0x40020010
 80045ac:	40020028 	.word	0x40020028
 80045b0:	40020040 	.word	0x40020040
 80045b4:	40020058 	.word	0x40020058
 80045b8:	40020070 	.word	0x40020070
 80045bc:	40020088 	.word	0x40020088
 80045c0:	400200a0 	.word	0x400200a0
 80045c4:	400200b8 	.word	0x400200b8
 80045c8:	40020410 	.word	0x40020410
 80045cc:	40020428 	.word	0x40020428
 80045d0:	40020440 	.word	0x40020440
 80045d4:	40020458 	.word	0x40020458
 80045d8:	40020470 	.word	0x40020470
 80045dc:	40020488 	.word	0x40020488
 80045e0:	400204a0 	.word	0x400204a0
 80045e4:	400204b8 	.word	0x400204b8
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bf14      	ite	ne
 80045f6:	2301      	movne	r3, #1
 80045f8:	2300      	moveq	r3, #0
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8087 	beq.w	8004710 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	2220      	movs	r2, #32
 800460c:	409a      	lsls	r2, r3
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b04      	cmp	r3, #4
 800461c:	d139      	bne.n	8004692 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0216 	bic.w	r2, r2, #22
 800462c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695a      	ldr	r2, [r3, #20]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800463c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	d103      	bne.n	800464e <HAL_DMA_IRQHandler+0x736>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464a:	2b00      	cmp	r3, #0
 800464c:	d007      	beq.n	800465e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0208 	bic.w	r2, r2, #8
 800465c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004662:	f003 031f 	and.w	r3, r3, #31
 8004666:	223f      	movs	r2, #63	; 0x3f
 8004668:	409a      	lsls	r2, r3
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 834a 	beq.w	8004d1c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	4798      	blx	r3
          }
          return;
 8004690:	e344      	b.n	8004d1c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d018      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d108      	bne.n	80046c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d02c      	beq.n	8004710 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	4798      	blx	r3
 80046be:	e027      	b.n	8004710 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d023      	beq.n	8004710 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4798      	blx	r3
 80046d0:	e01e      	b.n	8004710 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10f      	bne.n	8004700 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0210 	bic.w	r2, r2, #16
 80046ee:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 8306 	beq.w	8004d26 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 8088 	beq.w	8004838 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2204      	movs	r2, #4
 800472c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a7a      	ldr	r2, [pc, #488]	; (8004920 <HAL_DMA_IRQHandler+0xa08>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d04a      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x8b8>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a79      	ldr	r2, [pc, #484]	; (8004924 <HAL_DMA_IRQHandler+0xa0c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d045      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x8b8>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a77      	ldr	r2, [pc, #476]	; (8004928 <HAL_DMA_IRQHandler+0xa10>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d040      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x8b8>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a76      	ldr	r2, [pc, #472]	; (800492c <HAL_DMA_IRQHandler+0xa14>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d03b      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x8b8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a74      	ldr	r2, [pc, #464]	; (8004930 <HAL_DMA_IRQHandler+0xa18>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d036      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x8b8>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a73      	ldr	r2, [pc, #460]	; (8004934 <HAL_DMA_IRQHandler+0xa1c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d031      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x8b8>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a71      	ldr	r2, [pc, #452]	; (8004938 <HAL_DMA_IRQHandler+0xa20>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d02c      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x8b8>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a70      	ldr	r2, [pc, #448]	; (800493c <HAL_DMA_IRQHandler+0xa24>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d027      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x8b8>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a6e      	ldr	r2, [pc, #440]	; (8004940 <HAL_DMA_IRQHandler+0xa28>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d022      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x8b8>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a6d      	ldr	r2, [pc, #436]	; (8004944 <HAL_DMA_IRQHandler+0xa2c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d01d      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x8b8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a6b      	ldr	r2, [pc, #428]	; (8004948 <HAL_DMA_IRQHandler+0xa30>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d018      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x8b8>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a6a      	ldr	r2, [pc, #424]	; (800494c <HAL_DMA_IRQHandler+0xa34>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d013      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x8b8>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a68      	ldr	r2, [pc, #416]	; (8004950 <HAL_DMA_IRQHandler+0xa38>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00e      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x8b8>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a67      	ldr	r2, [pc, #412]	; (8004954 <HAL_DMA_IRQHandler+0xa3c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d009      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x8b8>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a65      	ldr	r2, [pc, #404]	; (8004958 <HAL_DMA_IRQHandler+0xa40>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d004      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x8b8>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a64      	ldr	r2, [pc, #400]	; (800495c <HAL_DMA_IRQHandler+0xa44>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d108      	bne.n	80047e2 <HAL_DMA_IRQHandler+0x8ca>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0201 	bic.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	e007      	b.n	80047f2 <HAL_DMA_IRQHandler+0x8da>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3301      	adds	r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d307      	bcc.n	800480e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f2      	bne.n	80047f2 <HAL_DMA_IRQHandler+0x8da>
 800480c:	e000      	b.n	8004810 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800480e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d004      	beq.n	8004830 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2203      	movs	r2, #3
 800482a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800482e:	e003      	b.n	8004838 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 8272 	beq.w	8004d26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	4798      	blx	r3
 800484a:	e26c      	b.n	8004d26 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a43      	ldr	r2, [pc, #268]	; (8004960 <HAL_DMA_IRQHandler+0xa48>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d022      	beq.n	800489c <HAL_DMA_IRQHandler+0x984>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a42      	ldr	r2, [pc, #264]	; (8004964 <HAL_DMA_IRQHandler+0xa4c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d01d      	beq.n	800489c <HAL_DMA_IRQHandler+0x984>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a40      	ldr	r2, [pc, #256]	; (8004968 <HAL_DMA_IRQHandler+0xa50>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d018      	beq.n	800489c <HAL_DMA_IRQHandler+0x984>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a3f      	ldr	r2, [pc, #252]	; (800496c <HAL_DMA_IRQHandler+0xa54>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d013      	beq.n	800489c <HAL_DMA_IRQHandler+0x984>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a3d      	ldr	r2, [pc, #244]	; (8004970 <HAL_DMA_IRQHandler+0xa58>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00e      	beq.n	800489c <HAL_DMA_IRQHandler+0x984>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a3c      	ldr	r2, [pc, #240]	; (8004974 <HAL_DMA_IRQHandler+0xa5c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d009      	beq.n	800489c <HAL_DMA_IRQHandler+0x984>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a3a      	ldr	r2, [pc, #232]	; (8004978 <HAL_DMA_IRQHandler+0xa60>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d004      	beq.n	800489c <HAL_DMA_IRQHandler+0x984>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a39      	ldr	r2, [pc, #228]	; (800497c <HAL_DMA_IRQHandler+0xa64>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d101      	bne.n	80048a0 <HAL_DMA_IRQHandler+0x988>
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <HAL_DMA_IRQHandler+0x98a>
 80048a0:	2300      	movs	r3, #0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 823f 	beq.w	8004d26 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	2204      	movs	r2, #4
 80048ba:	409a      	lsls	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	4013      	ands	r3, r2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 80cd 	beq.w	8004a60 <HAL_DMA_IRQHandler+0xb48>
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 80c7 	beq.w	8004a60 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d6:	f003 031f 	and.w	r3, r3, #31
 80048da:	2204      	movs	r2, #4
 80048dc:	409a      	lsls	r2, r3
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d049      	beq.n	8004980 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 8210 	beq.w	8004d20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004908:	e20a      	b.n	8004d20 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 8206 	beq.w	8004d20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800491c:	e200      	b.n	8004d20 <HAL_DMA_IRQHandler+0xe08>
 800491e:	bf00      	nop
 8004920:	40020010 	.word	0x40020010
 8004924:	40020028 	.word	0x40020028
 8004928:	40020040 	.word	0x40020040
 800492c:	40020058 	.word	0x40020058
 8004930:	40020070 	.word	0x40020070
 8004934:	40020088 	.word	0x40020088
 8004938:	400200a0 	.word	0x400200a0
 800493c:	400200b8 	.word	0x400200b8
 8004940:	40020410 	.word	0x40020410
 8004944:	40020428 	.word	0x40020428
 8004948:	40020440 	.word	0x40020440
 800494c:	40020458 	.word	0x40020458
 8004950:	40020470 	.word	0x40020470
 8004954:	40020488 	.word	0x40020488
 8004958:	400204a0 	.word	0x400204a0
 800495c:	400204b8 	.word	0x400204b8
 8004960:	58025408 	.word	0x58025408
 8004964:	5802541c 	.word	0x5802541c
 8004968:	58025430 	.word	0x58025430
 800496c:	58025444 	.word	0x58025444
 8004970:	58025458 	.word	0x58025458
 8004974:	5802546c 	.word	0x5802546c
 8004978:	58025480 	.word	0x58025480
 800497c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b00      	cmp	r3, #0
 8004988:	d160      	bne.n	8004a4c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a8c      	ldr	r2, [pc, #560]	; (8004bc0 <HAL_DMA_IRQHandler+0xca8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d04a      	beq.n	8004a2a <HAL_DMA_IRQHandler+0xb12>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a8a      	ldr	r2, [pc, #552]	; (8004bc4 <HAL_DMA_IRQHandler+0xcac>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d045      	beq.n	8004a2a <HAL_DMA_IRQHandler+0xb12>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a89      	ldr	r2, [pc, #548]	; (8004bc8 <HAL_DMA_IRQHandler+0xcb0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d040      	beq.n	8004a2a <HAL_DMA_IRQHandler+0xb12>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a87      	ldr	r2, [pc, #540]	; (8004bcc <HAL_DMA_IRQHandler+0xcb4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d03b      	beq.n	8004a2a <HAL_DMA_IRQHandler+0xb12>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a86      	ldr	r2, [pc, #536]	; (8004bd0 <HAL_DMA_IRQHandler+0xcb8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d036      	beq.n	8004a2a <HAL_DMA_IRQHandler+0xb12>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a84      	ldr	r2, [pc, #528]	; (8004bd4 <HAL_DMA_IRQHandler+0xcbc>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d031      	beq.n	8004a2a <HAL_DMA_IRQHandler+0xb12>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a83      	ldr	r2, [pc, #524]	; (8004bd8 <HAL_DMA_IRQHandler+0xcc0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d02c      	beq.n	8004a2a <HAL_DMA_IRQHandler+0xb12>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a81      	ldr	r2, [pc, #516]	; (8004bdc <HAL_DMA_IRQHandler+0xcc4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d027      	beq.n	8004a2a <HAL_DMA_IRQHandler+0xb12>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a80      	ldr	r2, [pc, #512]	; (8004be0 <HAL_DMA_IRQHandler+0xcc8>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d022      	beq.n	8004a2a <HAL_DMA_IRQHandler+0xb12>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a7e      	ldr	r2, [pc, #504]	; (8004be4 <HAL_DMA_IRQHandler+0xccc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d01d      	beq.n	8004a2a <HAL_DMA_IRQHandler+0xb12>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a7d      	ldr	r2, [pc, #500]	; (8004be8 <HAL_DMA_IRQHandler+0xcd0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d018      	beq.n	8004a2a <HAL_DMA_IRQHandler+0xb12>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a7b      	ldr	r2, [pc, #492]	; (8004bec <HAL_DMA_IRQHandler+0xcd4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d013      	beq.n	8004a2a <HAL_DMA_IRQHandler+0xb12>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a7a      	ldr	r2, [pc, #488]	; (8004bf0 <HAL_DMA_IRQHandler+0xcd8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00e      	beq.n	8004a2a <HAL_DMA_IRQHandler+0xb12>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a78      	ldr	r2, [pc, #480]	; (8004bf4 <HAL_DMA_IRQHandler+0xcdc>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d009      	beq.n	8004a2a <HAL_DMA_IRQHandler+0xb12>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a77      	ldr	r2, [pc, #476]	; (8004bf8 <HAL_DMA_IRQHandler+0xce0>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d004      	beq.n	8004a2a <HAL_DMA_IRQHandler+0xb12>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a75      	ldr	r2, [pc, #468]	; (8004bfc <HAL_DMA_IRQHandler+0xce4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d108      	bne.n	8004a3c <HAL_DMA_IRQHandler+0xb24>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0208 	bic.w	r2, r2, #8
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	e007      	b.n	8004a4c <HAL_DMA_IRQHandler+0xb34>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0204 	bic.w	r2, r2, #4
 8004a4a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8165 	beq.w	8004d20 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a5e:	e15f      	b.n	8004d20 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	2202      	movs	r2, #2
 8004a6a:	409a      	lsls	r2, r3
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 80c5 	beq.w	8004c00 <HAL_DMA_IRQHandler+0xce8>
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 80bf 	beq.w	8004c00 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a86:	f003 031f 	and.w	r3, r3, #31
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	409a      	lsls	r2, r3
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d018      	beq.n	8004ace <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d109      	bne.n	8004aba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 813a 	beq.w	8004d24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ab8:	e134      	b.n	8004d24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 8130 	beq.w	8004d24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004acc:	e12a      	b.n	8004d24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d168      	bne.n	8004baa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a38      	ldr	r2, [pc, #224]	; (8004bc0 <HAL_DMA_IRQHandler+0xca8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d04a      	beq.n	8004b78 <HAL_DMA_IRQHandler+0xc60>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a37      	ldr	r2, [pc, #220]	; (8004bc4 <HAL_DMA_IRQHandler+0xcac>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d045      	beq.n	8004b78 <HAL_DMA_IRQHandler+0xc60>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a35      	ldr	r2, [pc, #212]	; (8004bc8 <HAL_DMA_IRQHandler+0xcb0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d040      	beq.n	8004b78 <HAL_DMA_IRQHandler+0xc60>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a34      	ldr	r2, [pc, #208]	; (8004bcc <HAL_DMA_IRQHandler+0xcb4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d03b      	beq.n	8004b78 <HAL_DMA_IRQHandler+0xc60>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a32      	ldr	r2, [pc, #200]	; (8004bd0 <HAL_DMA_IRQHandler+0xcb8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d036      	beq.n	8004b78 <HAL_DMA_IRQHandler+0xc60>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a31      	ldr	r2, [pc, #196]	; (8004bd4 <HAL_DMA_IRQHandler+0xcbc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d031      	beq.n	8004b78 <HAL_DMA_IRQHandler+0xc60>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a2f      	ldr	r2, [pc, #188]	; (8004bd8 <HAL_DMA_IRQHandler+0xcc0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d02c      	beq.n	8004b78 <HAL_DMA_IRQHandler+0xc60>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a2e      	ldr	r2, [pc, #184]	; (8004bdc <HAL_DMA_IRQHandler+0xcc4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d027      	beq.n	8004b78 <HAL_DMA_IRQHandler+0xc60>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a2c      	ldr	r2, [pc, #176]	; (8004be0 <HAL_DMA_IRQHandler+0xcc8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d022      	beq.n	8004b78 <HAL_DMA_IRQHandler+0xc60>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2b      	ldr	r2, [pc, #172]	; (8004be4 <HAL_DMA_IRQHandler+0xccc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d01d      	beq.n	8004b78 <HAL_DMA_IRQHandler+0xc60>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a29      	ldr	r2, [pc, #164]	; (8004be8 <HAL_DMA_IRQHandler+0xcd0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d018      	beq.n	8004b78 <HAL_DMA_IRQHandler+0xc60>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a28      	ldr	r2, [pc, #160]	; (8004bec <HAL_DMA_IRQHandler+0xcd4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d013      	beq.n	8004b78 <HAL_DMA_IRQHandler+0xc60>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a26      	ldr	r2, [pc, #152]	; (8004bf0 <HAL_DMA_IRQHandler+0xcd8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00e      	beq.n	8004b78 <HAL_DMA_IRQHandler+0xc60>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a25      	ldr	r2, [pc, #148]	; (8004bf4 <HAL_DMA_IRQHandler+0xcdc>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d009      	beq.n	8004b78 <HAL_DMA_IRQHandler+0xc60>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a23      	ldr	r2, [pc, #140]	; (8004bf8 <HAL_DMA_IRQHandler+0xce0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d004      	beq.n	8004b78 <HAL_DMA_IRQHandler+0xc60>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a22      	ldr	r2, [pc, #136]	; (8004bfc <HAL_DMA_IRQHandler+0xce4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d108      	bne.n	8004b8a <HAL_DMA_IRQHandler+0xc72>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0214 	bic.w	r2, r2, #20
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	e007      	b.n	8004b9a <HAL_DMA_IRQHandler+0xc82>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 020a 	bic.w	r2, r2, #10
 8004b98:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 80b8 	beq.w	8004d24 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bbc:	e0b2      	b.n	8004d24 <HAL_DMA_IRQHandler+0xe0c>
 8004bbe:	bf00      	nop
 8004bc0:	40020010 	.word	0x40020010
 8004bc4:	40020028 	.word	0x40020028
 8004bc8:	40020040 	.word	0x40020040
 8004bcc:	40020058 	.word	0x40020058
 8004bd0:	40020070 	.word	0x40020070
 8004bd4:	40020088 	.word	0x40020088
 8004bd8:	400200a0 	.word	0x400200a0
 8004bdc:	400200b8 	.word	0x400200b8
 8004be0:	40020410 	.word	0x40020410
 8004be4:	40020428 	.word	0x40020428
 8004be8:	40020440 	.word	0x40020440
 8004bec:	40020458 	.word	0x40020458
 8004bf0:	40020470 	.word	0x40020470
 8004bf4:	40020488 	.word	0x40020488
 8004bf8:	400204a0 	.word	0x400204a0
 8004bfc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c04:	f003 031f 	and.w	r3, r3, #31
 8004c08:	2208      	movs	r2, #8
 8004c0a:	409a      	lsls	r2, r3
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 8088 	beq.w	8004d26 <HAL_DMA_IRQHandler+0xe0e>
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8082 	beq.w	8004d26 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a41      	ldr	r2, [pc, #260]	; (8004d2c <HAL_DMA_IRQHandler+0xe14>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d04a      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0xdaa>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a3f      	ldr	r2, [pc, #252]	; (8004d30 <HAL_DMA_IRQHandler+0xe18>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d045      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0xdaa>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a3e      	ldr	r2, [pc, #248]	; (8004d34 <HAL_DMA_IRQHandler+0xe1c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d040      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0xdaa>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a3c      	ldr	r2, [pc, #240]	; (8004d38 <HAL_DMA_IRQHandler+0xe20>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d03b      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0xdaa>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a3b      	ldr	r2, [pc, #236]	; (8004d3c <HAL_DMA_IRQHandler+0xe24>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d036      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0xdaa>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a39      	ldr	r2, [pc, #228]	; (8004d40 <HAL_DMA_IRQHandler+0xe28>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d031      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0xdaa>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a38      	ldr	r2, [pc, #224]	; (8004d44 <HAL_DMA_IRQHandler+0xe2c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d02c      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0xdaa>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a36      	ldr	r2, [pc, #216]	; (8004d48 <HAL_DMA_IRQHandler+0xe30>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d027      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0xdaa>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a35      	ldr	r2, [pc, #212]	; (8004d4c <HAL_DMA_IRQHandler+0xe34>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d022      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0xdaa>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a33      	ldr	r2, [pc, #204]	; (8004d50 <HAL_DMA_IRQHandler+0xe38>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d01d      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0xdaa>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a32      	ldr	r2, [pc, #200]	; (8004d54 <HAL_DMA_IRQHandler+0xe3c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d018      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0xdaa>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a30      	ldr	r2, [pc, #192]	; (8004d58 <HAL_DMA_IRQHandler+0xe40>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d013      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0xdaa>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a2f      	ldr	r2, [pc, #188]	; (8004d5c <HAL_DMA_IRQHandler+0xe44>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00e      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0xdaa>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a2d      	ldr	r2, [pc, #180]	; (8004d60 <HAL_DMA_IRQHandler+0xe48>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d009      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0xdaa>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a2c      	ldr	r2, [pc, #176]	; (8004d64 <HAL_DMA_IRQHandler+0xe4c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d004      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0xdaa>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a2a      	ldr	r2, [pc, #168]	; (8004d68 <HAL_DMA_IRQHandler+0xe50>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d108      	bne.n	8004cd4 <HAL_DMA_IRQHandler+0xdbc>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 021c 	bic.w	r2, r2, #28
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	e007      	b.n	8004ce4 <HAL_DMA_IRQHandler+0xdcc>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 020e 	bic.w	r2, r2, #14
 8004ce2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce8:	f003 031f 	and.w	r3, r3, #31
 8004cec:	2201      	movs	r2, #1
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d009      	beq.n	8004d26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	4798      	blx	r3
 8004d1a:	e004      	b.n	8004d26 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004d1c:	bf00      	nop
 8004d1e:	e002      	b.n	8004d26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d20:	bf00      	nop
 8004d22:	e000      	b.n	8004d26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d24:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d26:	3728      	adds	r7, #40	; 0x28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40020010 	.word	0x40020010
 8004d30:	40020028 	.word	0x40020028
 8004d34:	40020040 	.word	0x40020040
 8004d38:	40020058 	.word	0x40020058
 8004d3c:	40020070 	.word	0x40020070
 8004d40:	40020088 	.word	0x40020088
 8004d44:	400200a0 	.word	0x400200a0
 8004d48:	400200b8 	.word	0x400200b8
 8004d4c:	40020410 	.word	0x40020410
 8004d50:	40020428 	.word	0x40020428
 8004d54:	40020440 	.word	0x40020440
 8004d58:	40020458 	.word	0x40020458
 8004d5c:	40020470 	.word	0x40020470
 8004d60:	40020488 	.word	0x40020488
 8004d64:	400204a0 	.word	0x400204a0
 8004d68:	400204b8 	.word	0x400204b8

08004d6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a42      	ldr	r2, [pc, #264]	; (8004e84 <DMA_CalcBaseAndBitshift+0x118>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d04a      	beq.n	8004e14 <DMA_CalcBaseAndBitshift+0xa8>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a41      	ldr	r2, [pc, #260]	; (8004e88 <DMA_CalcBaseAndBitshift+0x11c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d045      	beq.n	8004e14 <DMA_CalcBaseAndBitshift+0xa8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a3f      	ldr	r2, [pc, #252]	; (8004e8c <DMA_CalcBaseAndBitshift+0x120>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d040      	beq.n	8004e14 <DMA_CalcBaseAndBitshift+0xa8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a3e      	ldr	r2, [pc, #248]	; (8004e90 <DMA_CalcBaseAndBitshift+0x124>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d03b      	beq.n	8004e14 <DMA_CalcBaseAndBitshift+0xa8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a3c      	ldr	r2, [pc, #240]	; (8004e94 <DMA_CalcBaseAndBitshift+0x128>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d036      	beq.n	8004e14 <DMA_CalcBaseAndBitshift+0xa8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a3b      	ldr	r2, [pc, #236]	; (8004e98 <DMA_CalcBaseAndBitshift+0x12c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d031      	beq.n	8004e14 <DMA_CalcBaseAndBitshift+0xa8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a39      	ldr	r2, [pc, #228]	; (8004e9c <DMA_CalcBaseAndBitshift+0x130>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d02c      	beq.n	8004e14 <DMA_CalcBaseAndBitshift+0xa8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a38      	ldr	r2, [pc, #224]	; (8004ea0 <DMA_CalcBaseAndBitshift+0x134>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d027      	beq.n	8004e14 <DMA_CalcBaseAndBitshift+0xa8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a36      	ldr	r2, [pc, #216]	; (8004ea4 <DMA_CalcBaseAndBitshift+0x138>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d022      	beq.n	8004e14 <DMA_CalcBaseAndBitshift+0xa8>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a35      	ldr	r2, [pc, #212]	; (8004ea8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d01d      	beq.n	8004e14 <DMA_CalcBaseAndBitshift+0xa8>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a33      	ldr	r2, [pc, #204]	; (8004eac <DMA_CalcBaseAndBitshift+0x140>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d018      	beq.n	8004e14 <DMA_CalcBaseAndBitshift+0xa8>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a32      	ldr	r2, [pc, #200]	; (8004eb0 <DMA_CalcBaseAndBitshift+0x144>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d013      	beq.n	8004e14 <DMA_CalcBaseAndBitshift+0xa8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a30      	ldr	r2, [pc, #192]	; (8004eb4 <DMA_CalcBaseAndBitshift+0x148>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00e      	beq.n	8004e14 <DMA_CalcBaseAndBitshift+0xa8>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a2f      	ldr	r2, [pc, #188]	; (8004eb8 <DMA_CalcBaseAndBitshift+0x14c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d009      	beq.n	8004e14 <DMA_CalcBaseAndBitshift+0xa8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a2d      	ldr	r2, [pc, #180]	; (8004ebc <DMA_CalcBaseAndBitshift+0x150>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <DMA_CalcBaseAndBitshift+0xa8>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a2c      	ldr	r2, [pc, #176]	; (8004ec0 <DMA_CalcBaseAndBitshift+0x154>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d101      	bne.n	8004e18 <DMA_CalcBaseAndBitshift+0xac>
 8004e14:	2301      	movs	r3, #1
 8004e16:	e000      	b.n	8004e1a <DMA_CalcBaseAndBitshift+0xae>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d024      	beq.n	8004e68 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	3b10      	subs	r3, #16
 8004e26:	4a27      	ldr	r2, [pc, #156]	; (8004ec4 <DMA_CalcBaseAndBitshift+0x158>)
 8004e28:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2c:	091b      	lsrs	r3, r3, #4
 8004e2e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	4a24      	ldr	r2, [pc, #144]	; (8004ec8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004e38:	5cd3      	ldrb	r3, [r2, r3]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d908      	bls.n	8004e58 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	4b1f      	ldr	r3, [pc, #124]	; (8004ecc <DMA_CalcBaseAndBitshift+0x160>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	1d1a      	adds	r2, r3, #4
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	659a      	str	r2, [r3, #88]	; 0x58
 8004e56:	e00d      	b.n	8004e74 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <DMA_CalcBaseAndBitshift+0x160>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6593      	str	r3, [r2, #88]	; 0x58
 8004e66:	e005      	b.n	8004e74 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	40020010 	.word	0x40020010
 8004e88:	40020028 	.word	0x40020028
 8004e8c:	40020040 	.word	0x40020040
 8004e90:	40020058 	.word	0x40020058
 8004e94:	40020070 	.word	0x40020070
 8004e98:	40020088 	.word	0x40020088
 8004e9c:	400200a0 	.word	0x400200a0
 8004ea0:	400200b8 	.word	0x400200b8
 8004ea4:	40020410 	.word	0x40020410
 8004ea8:	40020428 	.word	0x40020428
 8004eac:	40020440 	.word	0x40020440
 8004eb0:	40020458 	.word	0x40020458
 8004eb4:	40020470 	.word	0x40020470
 8004eb8:	40020488 	.word	0x40020488
 8004ebc:	400204a0 	.word	0x400204a0
 8004ec0:	400204b8 	.word	0x400204b8
 8004ec4:	aaaaaaab 	.word	0xaaaaaaab
 8004ec8:	0800c05c 	.word	0x0800c05c
 8004ecc:	fffffc00 	.word	0xfffffc00

08004ed0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d120      	bne.n	8004f26 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d858      	bhi.n	8004f9e <DMA_CheckFifoParam+0xce>
 8004eec:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <DMA_CheckFifoParam+0x24>)
 8004eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef2:	bf00      	nop
 8004ef4:	08004f05 	.word	0x08004f05
 8004ef8:	08004f17 	.word	0x08004f17
 8004efc:	08004f05 	.word	0x08004f05
 8004f00:	08004f9f 	.word	0x08004f9f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d048      	beq.n	8004fa2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f14:	e045      	b.n	8004fa2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f1e:	d142      	bne.n	8004fa6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f24:	e03f      	b.n	8004fa6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f2e:	d123      	bne.n	8004f78 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d838      	bhi.n	8004faa <DMA_CheckFifoParam+0xda>
 8004f38:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <DMA_CheckFifoParam+0x70>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004f51 	.word	0x08004f51
 8004f44:	08004f57 	.word	0x08004f57
 8004f48:	08004f51 	.word	0x08004f51
 8004f4c:	08004f69 	.word	0x08004f69
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
        break;
 8004f54:	e030      	b.n	8004fb8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d025      	beq.n	8004fae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f66:	e022      	b.n	8004fae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f70:	d11f      	bne.n	8004fb2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f76:	e01c      	b.n	8004fb2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d902      	bls.n	8004f86 <DMA_CheckFifoParam+0xb6>
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d003      	beq.n	8004f8c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004f84:	e018      	b.n	8004fb8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	73fb      	strb	r3, [r7, #15]
        break;
 8004f8a:	e015      	b.n	8004fb8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00e      	beq.n	8004fb6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8004f9c:	e00b      	b.n	8004fb6 <DMA_CheckFifoParam+0xe6>
        break;
 8004f9e:	bf00      	nop
 8004fa0:	e00a      	b.n	8004fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8004fa2:	bf00      	nop
 8004fa4:	e008      	b.n	8004fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8004fa6:	bf00      	nop
 8004fa8:	e006      	b.n	8004fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8004faa:	bf00      	nop
 8004fac:	e004      	b.n	8004fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8004fae:	bf00      	nop
 8004fb0:	e002      	b.n	8004fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8004fb2:	bf00      	nop
 8004fb4:	e000      	b.n	8004fb8 <DMA_CheckFifoParam+0xe8>
    break;
 8004fb6:	bf00      	nop
    }
  }

  return status;
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop

08004fc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a38      	ldr	r2, [pc, #224]	; (80050bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d022      	beq.n	8005026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a36      	ldr	r2, [pc, #216]	; (80050c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d01d      	beq.n	8005026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a35      	ldr	r2, [pc, #212]	; (80050c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d018      	beq.n	8005026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a33      	ldr	r2, [pc, #204]	; (80050c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d013      	beq.n	8005026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a32      	ldr	r2, [pc, #200]	; (80050cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00e      	beq.n	8005026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a30      	ldr	r2, [pc, #192]	; (80050d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d009      	beq.n	8005026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a2f      	ldr	r2, [pc, #188]	; (80050d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d004      	beq.n	8005026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a2d      	ldr	r2, [pc, #180]	; (80050d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d101      	bne.n	800502a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800502a:	2300      	movs	r3, #0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01a      	beq.n	8005066 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	b2db      	uxtb	r3, r3
 8005036:	3b08      	subs	r3, #8
 8005038:	4a28      	ldr	r2, [pc, #160]	; (80050dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	091b      	lsrs	r3, r3, #4
 8005040:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4b26      	ldr	r3, [pc, #152]	; (80050e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	461a      	mov	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a24      	ldr	r2, [pc, #144]	; (80050e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005054:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f003 031f 	and.w	r3, r3, #31
 800505c:	2201      	movs	r2, #1
 800505e:	409a      	lsls	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005064:	e024      	b.n	80050b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	b2db      	uxtb	r3, r3
 800506c:	3b10      	subs	r3, #16
 800506e:	4a1e      	ldr	r2, [pc, #120]	; (80050e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005070:	fba2 2303 	umull	r2, r3, r2, r3
 8005074:	091b      	lsrs	r3, r3, #4
 8005076:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	4a1c      	ldr	r2, [pc, #112]	; (80050ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d806      	bhi.n	800508e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4a1b      	ldr	r2, [pc, #108]	; (80050f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d902      	bls.n	800508e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	3308      	adds	r3, #8
 800508c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4b18      	ldr	r3, [pc, #96]	; (80050f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	461a      	mov	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a16      	ldr	r2, [pc, #88]	; (80050f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80050a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f003 031f 	and.w	r3, r3, #31
 80050a8:	2201      	movs	r2, #1
 80050aa:	409a      	lsls	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80050b0:	bf00      	nop
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	58025408 	.word	0x58025408
 80050c0:	5802541c 	.word	0x5802541c
 80050c4:	58025430 	.word	0x58025430
 80050c8:	58025444 	.word	0x58025444
 80050cc:	58025458 	.word	0x58025458
 80050d0:	5802546c 	.word	0x5802546c
 80050d4:	58025480 	.word	0x58025480
 80050d8:	58025494 	.word	0x58025494
 80050dc:	cccccccd 	.word	0xcccccccd
 80050e0:	16009600 	.word	0x16009600
 80050e4:	58025880 	.word	0x58025880
 80050e8:	aaaaaaab 	.word	0xaaaaaaab
 80050ec:	400204b8 	.word	0x400204b8
 80050f0:	4002040f 	.word	0x4002040f
 80050f4:	10008200 	.word	0x10008200
 80050f8:	40020880 	.word	0x40020880

080050fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	b2db      	uxtb	r3, r3
 800510a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d04a      	beq.n	80051a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b08      	cmp	r3, #8
 8005116:	d847      	bhi.n	80051a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a25      	ldr	r2, [pc, #148]	; (80051b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d022      	beq.n	8005168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a24      	ldr	r2, [pc, #144]	; (80051b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d01d      	beq.n	8005168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a22      	ldr	r2, [pc, #136]	; (80051bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d018      	beq.n	8005168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d013      	beq.n	8005168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1f      	ldr	r2, [pc, #124]	; (80051c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00e      	beq.n	8005168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1e      	ldr	r2, [pc, #120]	; (80051c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d009      	beq.n	8005168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a1c      	ldr	r2, [pc, #112]	; (80051cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d004      	beq.n	8005168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1b      	ldr	r2, [pc, #108]	; (80051d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d101      	bne.n	800516c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800516c:	2300      	movs	r3, #0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4b17      	ldr	r3, [pc, #92]	; (80051d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	461a      	mov	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a15      	ldr	r2, [pc, #84]	; (80051d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005184:	671a      	str	r2, [r3, #112]	; 0x70
 8005186:	e009      	b.n	800519c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4b14      	ldr	r3, [pc, #80]	; (80051dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	461a      	mov	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a11      	ldr	r2, [pc, #68]	; (80051e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800519a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3b01      	subs	r3, #1
 80051a0:	2201      	movs	r2, #1
 80051a2:	409a      	lsls	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80051a8:	bf00      	nop
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	58025408 	.word	0x58025408
 80051b8:	5802541c 	.word	0x5802541c
 80051bc:	58025430 	.word	0x58025430
 80051c0:	58025444 	.word	0x58025444
 80051c4:	58025458 	.word	0x58025458
 80051c8:	5802546c 	.word	0x5802546c
 80051cc:	58025480 	.word	0x58025480
 80051d0:	58025494 	.word	0x58025494
 80051d4:	1600963f 	.word	0x1600963f
 80051d8:	58025940 	.word	0x58025940
 80051dc:	1000823f 	.word	0x1000823f
 80051e0:	40020940 	.word	0x40020940

080051e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b089      	sub	sp, #36	; 0x24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80051f2:	4b89      	ldr	r3, [pc, #548]	; (8005418 <HAL_GPIO_Init+0x234>)
 80051f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051f6:	e194      	b.n	8005522 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	2101      	movs	r1, #1
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	fa01 f303 	lsl.w	r3, r1, r3
 8005204:	4013      	ands	r3, r2
 8005206:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 8186 	beq.w	800551c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d00b      	beq.n	8005230 <HAL_GPIO_Init+0x4c>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d007      	beq.n	8005230 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005224:	2b11      	cmp	r3, #17
 8005226:	d003      	beq.n	8005230 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b12      	cmp	r3, #18
 800522e:	d130      	bne.n	8005292 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	2203      	movs	r2, #3
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	43db      	mvns	r3, r3
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	4013      	ands	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	4313      	orrs	r3, r2
 8005258:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005266:	2201      	movs	r2, #1
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	fa02 f303 	lsl.w	r3, r2, r3
 800526e:	43db      	mvns	r3, r3
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	4013      	ands	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	091b      	lsrs	r3, r3, #4
 800527c:	f003 0201 	and.w	r2, r3, #1
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	fa02 f303 	lsl.w	r3, r2, r3
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	4313      	orrs	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	2203      	movs	r2, #3
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	43db      	mvns	r3, r3
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	4013      	ands	r3, r2
 80052a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d003      	beq.n	80052d2 <HAL_GPIO_Init+0xee>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b12      	cmp	r3, #18
 80052d0:	d123      	bne.n	800531a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	08da      	lsrs	r2, r3, #3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3208      	adds	r2, #8
 80052da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	220f      	movs	r2, #15
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
 80052ee:	43db      	mvns	r3, r3
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	4013      	ands	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	691a      	ldr	r2, [r3, #16]
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	4313      	orrs	r3, r2
 800530a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	08da      	lsrs	r2, r3, #3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3208      	adds	r2, #8
 8005314:	69b9      	ldr	r1, [r7, #24]
 8005316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	2203      	movs	r2, #3
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	43db      	mvns	r3, r3
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	4013      	ands	r3, r2
 8005330:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f003 0203 	and.w	r2, r3, #3
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	4313      	orrs	r3, r2
 8005346:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 80e0 	beq.w	800551c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800535c:	4b2f      	ldr	r3, [pc, #188]	; (800541c <HAL_GPIO_Init+0x238>)
 800535e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005362:	4a2e      	ldr	r2, [pc, #184]	; (800541c <HAL_GPIO_Init+0x238>)
 8005364:	f043 0302 	orr.w	r3, r3, #2
 8005368:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800536c:	4b2b      	ldr	r3, [pc, #172]	; (800541c <HAL_GPIO_Init+0x238>)
 800536e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800537a:	4a29      	ldr	r2, [pc, #164]	; (8005420 <HAL_GPIO_Init+0x23c>)
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	089b      	lsrs	r3, r3, #2
 8005380:	3302      	adds	r3, #2
 8005382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	220f      	movs	r2, #15
 8005392:	fa02 f303 	lsl.w	r3, r2, r3
 8005396:	43db      	mvns	r3, r3
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	4013      	ands	r3, r2
 800539c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a20      	ldr	r2, [pc, #128]	; (8005424 <HAL_GPIO_Init+0x240>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d052      	beq.n	800544c <HAL_GPIO_Init+0x268>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a1f      	ldr	r2, [pc, #124]	; (8005428 <HAL_GPIO_Init+0x244>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d031      	beq.n	8005412 <HAL_GPIO_Init+0x22e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a1e      	ldr	r2, [pc, #120]	; (800542c <HAL_GPIO_Init+0x248>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d02b      	beq.n	800540e <HAL_GPIO_Init+0x22a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a1d      	ldr	r2, [pc, #116]	; (8005430 <HAL_GPIO_Init+0x24c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d025      	beq.n	800540a <HAL_GPIO_Init+0x226>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a1c      	ldr	r2, [pc, #112]	; (8005434 <HAL_GPIO_Init+0x250>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d01f      	beq.n	8005406 <HAL_GPIO_Init+0x222>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a1b      	ldr	r2, [pc, #108]	; (8005438 <HAL_GPIO_Init+0x254>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d019      	beq.n	8005402 <HAL_GPIO_Init+0x21e>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a1a      	ldr	r2, [pc, #104]	; (800543c <HAL_GPIO_Init+0x258>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <HAL_GPIO_Init+0x21a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a19      	ldr	r2, [pc, #100]	; (8005440 <HAL_GPIO_Init+0x25c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00d      	beq.n	80053fa <HAL_GPIO_Init+0x216>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a18      	ldr	r2, [pc, #96]	; (8005444 <HAL_GPIO_Init+0x260>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d007      	beq.n	80053f6 <HAL_GPIO_Init+0x212>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a17      	ldr	r2, [pc, #92]	; (8005448 <HAL_GPIO_Init+0x264>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d101      	bne.n	80053f2 <HAL_GPIO_Init+0x20e>
 80053ee:	2309      	movs	r3, #9
 80053f0:	e02d      	b.n	800544e <HAL_GPIO_Init+0x26a>
 80053f2:	230a      	movs	r3, #10
 80053f4:	e02b      	b.n	800544e <HAL_GPIO_Init+0x26a>
 80053f6:	2308      	movs	r3, #8
 80053f8:	e029      	b.n	800544e <HAL_GPIO_Init+0x26a>
 80053fa:	2307      	movs	r3, #7
 80053fc:	e027      	b.n	800544e <HAL_GPIO_Init+0x26a>
 80053fe:	2306      	movs	r3, #6
 8005400:	e025      	b.n	800544e <HAL_GPIO_Init+0x26a>
 8005402:	2305      	movs	r3, #5
 8005404:	e023      	b.n	800544e <HAL_GPIO_Init+0x26a>
 8005406:	2304      	movs	r3, #4
 8005408:	e021      	b.n	800544e <HAL_GPIO_Init+0x26a>
 800540a:	2303      	movs	r3, #3
 800540c:	e01f      	b.n	800544e <HAL_GPIO_Init+0x26a>
 800540e:	2302      	movs	r3, #2
 8005410:	e01d      	b.n	800544e <HAL_GPIO_Init+0x26a>
 8005412:	2301      	movs	r3, #1
 8005414:	e01b      	b.n	800544e <HAL_GPIO_Init+0x26a>
 8005416:	bf00      	nop
 8005418:	58000080 	.word	0x58000080
 800541c:	58024400 	.word	0x58024400
 8005420:	58000400 	.word	0x58000400
 8005424:	58020000 	.word	0x58020000
 8005428:	58020400 	.word	0x58020400
 800542c:	58020800 	.word	0x58020800
 8005430:	58020c00 	.word	0x58020c00
 8005434:	58021000 	.word	0x58021000
 8005438:	58021400 	.word	0x58021400
 800543c:	58021800 	.word	0x58021800
 8005440:	58021c00 	.word	0x58021c00
 8005444:	58022000 	.word	0x58022000
 8005448:	58022400 	.word	0x58022400
 800544c:	2300      	movs	r3, #0
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	f002 0203 	and.w	r2, r2, #3
 8005454:	0092      	lsls	r2, r2, #2
 8005456:	4093      	lsls	r3, r2
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	4313      	orrs	r3, r2
 800545c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800545e:	4938      	ldr	r1, [pc, #224]	; (8005540 <HAL_GPIO_Init+0x35c>)
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	089b      	lsrs	r3, r3, #2
 8005464:	3302      	adds	r3, #2
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	43db      	mvns	r3, r3
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	4013      	ands	r3, r2
 800547a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	43db      	mvns	r3, r3
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	4013      	ands	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	43db      	mvns	r3, r3
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	4013      	ands	r3, r2
 80054d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80054e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80054ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	43db      	mvns	r3, r3
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	4013      	ands	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005514:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	3301      	adds	r3, #1
 8005520:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	fa22 f303 	lsr.w	r3, r2, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	f47f ae63 	bne.w	80051f8 <HAL_GPIO_Init+0x14>
  }
}
 8005532:	bf00      	nop
 8005534:	3724      	adds	r7, #36	; 0x24
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	58000400 	.word	0x58000400

08005544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	807b      	strh	r3, [r7, #2]
 8005550:	4613      	mov	r3, r2
 8005552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005554:	787b      	ldrb	r3, [r7, #1]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800555a:	887a      	ldrh	r2, [r7, #2]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005560:	e003      	b.n	800556a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005562:	887b      	ldrh	r3, [r7, #2]
 8005564:	041a      	lsls	r2, r3, #16
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	619a      	str	r2, [r3, #24]
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	460b      	mov	r3, r1
 8005580:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695a      	ldr	r2, [r3, #20]
 8005586:	887b      	ldrh	r3, [r7, #2]
 8005588:	401a      	ands	r2, r3
 800558a:	887b      	ldrh	r3, [r7, #2]
 800558c:	429a      	cmp	r2, r3
 800558e:	d104      	bne.n	800559a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005590:	887b      	ldrh	r3, [r7, #2]
 8005592:	041a      	lsls	r2, r3, #16
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005598:	e002      	b.n	80055a0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800559a:	887a      	ldrh	r2, [r7, #2]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	619a      	str	r2, [r3, #24]
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80055b4:	4b19      	ldr	r3, [pc, #100]	; (800561c <HAL_PWREx_ConfigSupply+0x70>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d00a      	beq.n	80055d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80055c0:	4b16      	ldr	r3, [pc, #88]	; (800561c <HAL_PWREx_ConfigSupply+0x70>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d001      	beq.n	80055d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e01f      	b.n	8005612 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	e01d      	b.n	8005612 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80055d6:	4b11      	ldr	r3, [pc, #68]	; (800561c <HAL_PWREx_ConfigSupply+0x70>)
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f023 0207 	bic.w	r2, r3, #7
 80055de:	490f      	ldr	r1, [pc, #60]	; (800561c <HAL_PWREx_ConfigSupply+0x70>)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80055e6:	f7fc fd6b 	bl	80020c0 <HAL_GetTick>
 80055ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80055ec:	e009      	b.n	8005602 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80055ee:	f7fc fd67 	bl	80020c0 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055fc:	d901      	bls.n	8005602 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e007      	b.n	8005612 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005602:	4b06      	ldr	r3, [pc, #24]	; (800561c <HAL_PWREx_ConfigSupply+0x70>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800560a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800560e:	d1ee      	bne.n	80055ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	58024800 	.word	0x58024800

08005620 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b08c      	sub	sp, #48	; 0x30
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e3c4      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 8087 	beq.w	800574e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005640:	4ba2      	ldr	r3, [pc, #648]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005648:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800564a:	4ba0      	ldr	r3, [pc, #640]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 800564c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005652:	2b10      	cmp	r3, #16
 8005654:	d007      	beq.n	8005666 <HAL_RCC_OscConfig+0x46>
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	2b18      	cmp	r3, #24
 800565a:	d110      	bne.n	800567e <HAL_RCC_OscConfig+0x5e>
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d10b      	bne.n	800567e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005666:	4b99      	ldr	r3, [pc, #612]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d06c      	beq.n	800574c <HAL_RCC_OscConfig+0x12c>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d168      	bne.n	800574c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e39e      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005686:	d106      	bne.n	8005696 <HAL_RCC_OscConfig+0x76>
 8005688:	4b90      	ldr	r3, [pc, #576]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a8f      	ldr	r2, [pc, #572]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 800568e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	e02e      	b.n	80056f4 <HAL_RCC_OscConfig+0xd4>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10c      	bne.n	80056b8 <HAL_RCC_OscConfig+0x98>
 800569e:	4b8b      	ldr	r3, [pc, #556]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a8a      	ldr	r2, [pc, #552]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	4b88      	ldr	r3, [pc, #544]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a87      	ldr	r2, [pc, #540]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	e01d      	b.n	80056f4 <HAL_RCC_OscConfig+0xd4>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056c0:	d10c      	bne.n	80056dc <HAL_RCC_OscConfig+0xbc>
 80056c2:	4b82      	ldr	r3, [pc, #520]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a81      	ldr	r2, [pc, #516]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	4b7f      	ldr	r3, [pc, #508]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a7e      	ldr	r2, [pc, #504]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d8:	6013      	str	r3, [r2, #0]
 80056da:	e00b      	b.n	80056f4 <HAL_RCC_OscConfig+0xd4>
 80056dc:	4b7b      	ldr	r3, [pc, #492]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a7a      	ldr	r2, [pc, #488]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	4b78      	ldr	r3, [pc, #480]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a77      	ldr	r2, [pc, #476]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80056ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d013      	beq.n	8005724 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fc:	f7fc fce0 	bl	80020c0 <HAL_GetTick>
 8005700:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005704:	f7fc fcdc 	bl	80020c0 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b64      	cmp	r3, #100	; 0x64
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e352      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005716:	4b6d      	ldr	r3, [pc, #436]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0f0      	beq.n	8005704 <HAL_RCC_OscConfig+0xe4>
 8005722:	e014      	b.n	800574e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005724:	f7fc fccc 	bl	80020c0 <HAL_GetTick>
 8005728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800572c:	f7fc fcc8 	bl	80020c0 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b64      	cmp	r3, #100	; 0x64
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e33e      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800573e:	4b63      	ldr	r3, [pc, #396]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f0      	bne.n	800572c <HAL_RCC_OscConfig+0x10c>
 800574a:	e000      	b.n	800574e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800574c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 8092 	beq.w	8005880 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800575c:	4b5b      	ldr	r3, [pc, #364]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005764:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005766:	4b59      	ldr	r3, [pc, #356]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d007      	beq.n	8005782 <HAL_RCC_OscConfig+0x162>
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	2b18      	cmp	r3, #24
 8005776:	d12d      	bne.n	80057d4 <HAL_RCC_OscConfig+0x1b4>
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d128      	bne.n	80057d4 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005782:	4b52      	ldr	r3, [pc, #328]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0304 	and.w	r3, r3, #4
 800578a:	2b00      	cmp	r3, #0
 800578c:	d005      	beq.n	800579a <HAL_RCC_OscConfig+0x17a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e310      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800579a:	f7fc fcbf 	bl	800211c <HAL_GetREVID>
 800579e:	4602      	mov	r2, r0
 80057a0:	f241 0303 	movw	r3, #4099	; 0x1003
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d80a      	bhi.n	80057be <HAL_RCC_OscConfig+0x19e>
 80057a8:	4b48      	ldr	r3, [pc, #288]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	031b      	lsls	r3, r3, #12
 80057b6:	4945      	ldr	r1, [pc, #276]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057bc:	e060      	b.n	8005880 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057be:	4b43      	ldr	r3, [pc, #268]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	061b      	lsls	r3, r3, #24
 80057cc:	493f      	ldr	r1, [pc, #252]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057d2:	e055      	b.n	8005880 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d038      	beq.n	800584e <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80057dc:	4b3b      	ldr	r3, [pc, #236]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f023 0219 	bic.w	r2, r3, #25
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	4938      	ldr	r1, [pc, #224]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ee:	f7fc fc67 	bl	80020c0 <HAL_GetTick>
 80057f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057f6:	f7fc fc63 	bl	80020c0 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e2d9      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005808:	4b30      	ldr	r3, [pc, #192]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0f0      	beq.n	80057f6 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005814:	f7fc fc82 	bl	800211c <HAL_GetREVID>
 8005818:	4602      	mov	r2, r0
 800581a:	f241 0303 	movw	r3, #4099	; 0x1003
 800581e:	429a      	cmp	r2, r3
 8005820:	d80a      	bhi.n	8005838 <HAL_RCC_OscConfig+0x218>
 8005822:	4b2a      	ldr	r3, [pc, #168]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	031b      	lsls	r3, r3, #12
 8005830:	4926      	ldr	r1, [pc, #152]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005832:	4313      	orrs	r3, r2
 8005834:	604b      	str	r3, [r1, #4]
 8005836:	e023      	b.n	8005880 <HAL_RCC_OscConfig+0x260>
 8005838:	4b24      	ldr	r3, [pc, #144]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	061b      	lsls	r3, r3, #24
 8005846:	4921      	ldr	r1, [pc, #132]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005848:	4313      	orrs	r3, r2
 800584a:	604b      	str	r3, [r1, #4]
 800584c:	e018      	b.n	8005880 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800584e:	4b1f      	ldr	r3, [pc, #124]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a1e      	ldr	r2, [pc, #120]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005854:	f023 0301 	bic.w	r3, r3, #1
 8005858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585a:	f7fc fc31 	bl	80020c0 <HAL_GetTick>
 800585e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005860:	e008      	b.n	8005874 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005862:	f7fc fc2d 	bl	80020c0 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e2a3      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005874:	4b15      	ldr	r3, [pc, #84]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1f0      	bne.n	8005862 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0310 	and.w	r3, r3, #16
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 8091 	beq.w	80059b0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800588e:	4b0f      	ldr	r3, [pc, #60]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005896:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005898:	4b0c      	ldr	r3, [pc, #48]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 800589a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d007      	beq.n	80058b4 <HAL_RCC_OscConfig+0x294>
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	2b18      	cmp	r3, #24
 80058a8:	d12f      	bne.n	800590a <HAL_RCC_OscConfig+0x2ea>
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f003 0303 	and.w	r3, r3, #3
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d12a      	bne.n	800590a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058b4:	4b05      	ldr	r3, [pc, #20]	; (80058cc <HAL_RCC_OscConfig+0x2ac>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d007      	beq.n	80058d0 <HAL_RCC_OscConfig+0x2b0>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	2b80      	cmp	r3, #128	; 0x80
 80058c6:	d003      	beq.n	80058d0 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e277      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
 80058cc:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058d0:	f7fc fc24 	bl	800211c <HAL_GetREVID>
 80058d4:	4602      	mov	r2, r0
 80058d6:	f241 0303 	movw	r3, #4099	; 0x1003
 80058da:	429a      	cmp	r2, r3
 80058dc:	d80a      	bhi.n	80058f4 <HAL_RCC_OscConfig+0x2d4>
 80058de:	4ba2      	ldr	r3, [pc, #648]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	069b      	lsls	r3, r3, #26
 80058ec:	499e      	ldr	r1, [pc, #632]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058f2:	e05d      	b.n	80059b0 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058f4:	4b9c      	ldr	r3, [pc, #624]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	061b      	lsls	r3, r3, #24
 8005902:	4999      	ldr	r1, [pc, #612]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005904:	4313      	orrs	r3, r2
 8005906:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005908:	e052      	b.n	80059b0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d035      	beq.n	800597e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005912:	4b95      	ldr	r3, [pc, #596]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a94      	ldr	r2, [pc, #592]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800591c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591e:	f7fc fbcf 	bl	80020c0 <HAL_GetTick>
 8005922:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005924:	e008      	b.n	8005938 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005926:	f7fc fbcb 	bl	80020c0 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d901      	bls.n	8005938 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e241      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005938:	4b8b      	ldr	r3, [pc, #556]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0f0      	beq.n	8005926 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005944:	f7fc fbea 	bl	800211c <HAL_GetREVID>
 8005948:	4602      	mov	r2, r0
 800594a:	f241 0303 	movw	r3, #4099	; 0x1003
 800594e:	429a      	cmp	r2, r3
 8005950:	d80a      	bhi.n	8005968 <HAL_RCC_OscConfig+0x348>
 8005952:	4b85      	ldr	r3, [pc, #532]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	069b      	lsls	r3, r3, #26
 8005960:	4981      	ldr	r1, [pc, #516]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005962:	4313      	orrs	r3, r2
 8005964:	604b      	str	r3, [r1, #4]
 8005966:	e023      	b.n	80059b0 <HAL_RCC_OscConfig+0x390>
 8005968:	4b7f      	ldr	r3, [pc, #508]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	061b      	lsls	r3, r3, #24
 8005976:	497c      	ldr	r1, [pc, #496]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005978:	4313      	orrs	r3, r2
 800597a:	60cb      	str	r3, [r1, #12]
 800597c:	e018      	b.n	80059b0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800597e:	4b7a      	ldr	r3, [pc, #488]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a79      	ldr	r2, [pc, #484]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598a:	f7fc fb99 	bl	80020c0 <HAL_GetTick>
 800598e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005990:	e008      	b.n	80059a4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005992:	f7fc fb95 	bl	80020c0 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e20b      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80059a4:	4b70      	ldr	r3, [pc, #448]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1f0      	bne.n	8005992 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d036      	beq.n	8005a2a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d019      	beq.n	80059f8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059c4:	4b68      	ldr	r3, [pc, #416]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 80059c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c8:	4a67      	ldr	r2, [pc, #412]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 80059ca:	f043 0301 	orr.w	r3, r3, #1
 80059ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d0:	f7fc fb76 	bl	80020c0 <HAL_GetTick>
 80059d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059d8:	f7fc fb72 	bl	80020c0 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e1e8      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059ea:	4b5f      	ldr	r3, [pc, #380]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 80059ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCC_OscConfig+0x3b8>
 80059f6:	e018      	b.n	8005a2a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059f8:	4b5b      	ldr	r3, [pc, #364]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 80059fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059fc:	4a5a      	ldr	r2, [pc, #360]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 80059fe:	f023 0301 	bic.w	r3, r3, #1
 8005a02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a04:	f7fc fb5c 	bl	80020c0 <HAL_GetTick>
 8005a08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a0c:	f7fc fb58 	bl	80020c0 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e1ce      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a1e:	4b52      	ldr	r3, [pc, #328]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1f0      	bne.n	8005a0c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d036      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d019      	beq.n	8005a72 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a3e:	4b4a      	ldr	r3, [pc, #296]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a49      	ldr	r2, [pc, #292]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005a44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a4a:	f7fc fb39 	bl	80020c0 <HAL_GetTick>
 8005a4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a50:	e008      	b.n	8005a64 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005a52:	f7fc fb35 	bl	80020c0 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d901      	bls.n	8005a64 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e1ab      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a64:	4b40      	ldr	r3, [pc, #256]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0f0      	beq.n	8005a52 <HAL_RCC_OscConfig+0x432>
 8005a70:	e018      	b.n	8005aa4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a72:	4b3d      	ldr	r3, [pc, #244]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a3c      	ldr	r2, [pc, #240]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a7c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a7e:	f7fc fb1f 	bl	80020c0 <HAL_GetTick>
 8005a82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a84:	e008      	b.n	8005a98 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005a86:	f7fc fb1b 	bl	80020c0 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e191      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a98:	4b33      	ldr	r3, [pc, #204]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1f0      	bne.n	8005a86 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 8086 	beq.w	8005bbe <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ab2:	4b2e      	ldr	r3, [pc, #184]	; (8005b6c <HAL_RCC_OscConfig+0x54c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a2d      	ldr	r2, [pc, #180]	; (8005b6c <HAL_RCC_OscConfig+0x54c>)
 8005ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005abc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005abe:	f7fc faff 	bl	80020c0 <HAL_GetTick>
 8005ac2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ac6:	f7fc fafb 	bl	80020c0 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	2b64      	cmp	r3, #100	; 0x64
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e171      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ad8:	4b24      	ldr	r3, [pc, #144]	; (8005b6c <HAL_RCC_OscConfig+0x54c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0f0      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d106      	bne.n	8005afa <HAL_RCC_OscConfig+0x4da>
 8005aec:	4b1e      	ldr	r3, [pc, #120]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af0:	4a1d      	ldr	r2, [pc, #116]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005af2:	f043 0301 	orr.w	r3, r3, #1
 8005af6:	6713      	str	r3, [r2, #112]	; 0x70
 8005af8:	e02d      	b.n	8005b56 <HAL_RCC_OscConfig+0x536>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10c      	bne.n	8005b1c <HAL_RCC_OscConfig+0x4fc>
 8005b02:	4b19      	ldr	r3, [pc, #100]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b06:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005b08:	f023 0301 	bic.w	r3, r3, #1
 8005b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b0e:	4b16      	ldr	r3, [pc, #88]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b12:	4a15      	ldr	r2, [pc, #84]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005b14:	f023 0304 	bic.w	r3, r3, #4
 8005b18:	6713      	str	r3, [r2, #112]	; 0x70
 8005b1a:	e01c      	b.n	8005b56 <HAL_RCC_OscConfig+0x536>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	2b05      	cmp	r3, #5
 8005b22:	d10c      	bne.n	8005b3e <HAL_RCC_OscConfig+0x51e>
 8005b24:	4b10      	ldr	r3, [pc, #64]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b28:	4a0f      	ldr	r2, [pc, #60]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005b2a:	f043 0304 	orr.w	r3, r3, #4
 8005b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b30:	4b0d      	ldr	r3, [pc, #52]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b34:	4a0c      	ldr	r2, [pc, #48]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005b36:	f043 0301 	orr.w	r3, r3, #1
 8005b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b3c:	e00b      	b.n	8005b56 <HAL_RCC_OscConfig+0x536>
 8005b3e:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b42:	4a09      	ldr	r2, [pc, #36]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005b44:	f023 0301 	bic.w	r3, r3, #1
 8005b48:	6713      	str	r3, [r2, #112]	; 0x70
 8005b4a:	4b07      	ldr	r3, [pc, #28]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	4a06      	ldr	r2, [pc, #24]	; (8005b68 <HAL_RCC_OscConfig+0x548>)
 8005b50:	f023 0304 	bic.w	r3, r3, #4
 8005b54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d01a      	beq.n	8005b94 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b5e:	f7fc faaf 	bl	80020c0 <HAL_GetTick>
 8005b62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b64:	e00f      	b.n	8005b86 <HAL_RCC_OscConfig+0x566>
 8005b66:	bf00      	nop
 8005b68:	58024400 	.word	0x58024400
 8005b6c:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b70:	f7fc faa6 	bl	80020c0 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e11a      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b86:	4b8f      	ldr	r3, [pc, #572]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d0ee      	beq.n	8005b70 <HAL_RCC_OscConfig+0x550>
 8005b92:	e014      	b.n	8005bbe <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b94:	f7fc fa94 	bl	80020c0 <HAL_GetTick>
 8005b98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b9a:	e00a      	b.n	8005bb2 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b9c:	f7fc fa90 	bl	80020c0 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e104      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005bb2:	4b84      	ldr	r3, [pc, #528]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1ee      	bne.n	8005b9c <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 80f9 	beq.w	8005dba <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005bc8:	4b7e      	ldr	r3, [pc, #504]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bd0:	2b18      	cmp	r3, #24
 8005bd2:	f000 80b4 	beq.w	8005d3e <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	f040 8095 	bne.w	8005d0a <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be0:	4b78      	ldr	r3, [pc, #480]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a77      	ldr	r2, [pc, #476]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bec:	f7fc fa68 	bl	80020c0 <HAL_GetTick>
 8005bf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bf4:	f7fc fa64 	bl	80020c0 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e0da      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c06:	4b6f      	ldr	r3, [pc, #444]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f0      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c12:	4b6c      	ldr	r3, [pc, #432]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c16:	4b6c      	ldr	r3, [pc, #432]	; (8005dc8 <HAL_RCC_OscConfig+0x7a8>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c22:	0112      	lsls	r2, r2, #4
 8005c24:	430a      	orrs	r2, r1
 8005c26:	4967      	ldr	r1, [pc, #412]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	628b      	str	r3, [r1, #40]	; 0x28
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c30:	3b01      	subs	r3, #1
 8005c32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	025b      	lsls	r3, r3, #9
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	431a      	orrs	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c46:	3b01      	subs	r3, #1
 8005c48:	041b      	lsls	r3, r3, #16
 8005c4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c54:	3b01      	subs	r3, #1
 8005c56:	061b      	lsls	r3, r3, #24
 8005c58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c5c:	4959      	ldr	r1, [pc, #356]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005c62:	4b58      	ldr	r3, [pc, #352]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c66:	4a57      	ldr	r2, [pc, #348]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005c68:	f023 0301 	bic.w	r3, r3, #1
 8005c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005c6e:	4b55      	ldr	r3, [pc, #340]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c72:	4b56      	ldr	r3, [pc, #344]	; (8005dcc <HAL_RCC_OscConfig+0x7ac>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c7a:	00d2      	lsls	r2, r2, #3
 8005c7c:	4951      	ldr	r1, [pc, #324]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005c82:	4b50      	ldr	r3, [pc, #320]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c86:	f023 020c 	bic.w	r2, r3, #12
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	494d      	ldr	r1, [pc, #308]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005c94:	4b4b      	ldr	r3, [pc, #300]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c98:	f023 0202 	bic.w	r2, r3, #2
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca0:	4948      	ldr	r1, [pc, #288]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ca6:	4b47      	ldr	r3, [pc, #284]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	4a46      	ldr	r2, [pc, #280]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cb2:	4b44      	ldr	r3, [pc, #272]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb6:	4a43      	ldr	r2, [pc, #268]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005cbe:	4b41      	ldr	r3, [pc, #260]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc2:	4a40      	ldr	r2, [pc, #256]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005cca:	4b3e      	ldr	r3, [pc, #248]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	4a3d      	ldr	r2, [pc, #244]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005cd0:	f043 0301 	orr.w	r3, r3, #1
 8005cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cd6:	4b3b      	ldr	r3, [pc, #236]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a3a      	ldr	r2, [pc, #232]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005cdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce2:	f7fc f9ed 	bl	80020c0 <HAL_GetTick>
 8005ce6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ce8:	e008      	b.n	8005cfc <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cea:	f7fc f9e9 	bl	80020c0 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e05f      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cfc:	4b31      	ldr	r3, [pc, #196]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0f0      	beq.n	8005cea <HAL_RCC_OscConfig+0x6ca>
 8005d08:	e057      	b.n	8005dba <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d0a:	4b2e      	ldr	r3, [pc, #184]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a2d      	ldr	r2, [pc, #180]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005d10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d16:	f7fc f9d3 	bl	80020c0 <HAL_GetTick>
 8005d1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d1c:	e008      	b.n	8005d30 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d1e:	f7fc f9cf 	bl	80020c0 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e045      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d30:	4b24      	ldr	r3, [pc, #144]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1f0      	bne.n	8005d1e <HAL_RCC_OscConfig+0x6fe>
 8005d3c:	e03d      	b.n	8005dba <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005d3e:	4b21      	ldr	r3, [pc, #132]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d42:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d44:	4b1f      	ldr	r3, [pc, #124]	; (8005dc4 <HAL_RCC_OscConfig+0x7a4>)
 8005d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d48:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d031      	beq.n	8005db6 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f003 0203 	and.w	r2, r3, #3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d12a      	bne.n	8005db6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	091b      	lsrs	r3, r3, #4
 8005d64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d122      	bne.n	8005db6 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d11a      	bne.n	8005db6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	0a5b      	lsrs	r3, r3, #9
 8005d84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d111      	bne.n	8005db6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	0c1b      	lsrs	r3, r3, #16
 8005d96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d108      	bne.n	8005db6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	0e1b      	lsrs	r3, r3, #24
 8005da8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d001      	beq.n	8005dba <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3730      	adds	r7, #48	; 0x30
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	58024400 	.word	0x58024400
 8005dc8:	fffffc0c 	.word	0xfffffc0c
 8005dcc:	ffff0007 	.word	0xffff0007

08005dd0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e19c      	b.n	800611e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005de4:	4b8a      	ldr	r3, [pc, #552]	; (8006010 <HAL_RCC_ClockConfig+0x240>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 030f 	and.w	r3, r3, #15
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d910      	bls.n	8005e14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005df2:	4b87      	ldr	r3, [pc, #540]	; (8006010 <HAL_RCC_ClockConfig+0x240>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f023 020f 	bic.w	r2, r3, #15
 8005dfa:	4985      	ldr	r1, [pc, #532]	; (8006010 <HAL_RCC_ClockConfig+0x240>)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e02:	4b83      	ldr	r3, [pc, #524]	; (8006010 <HAL_RCC_ClockConfig+0x240>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d001      	beq.n	8005e14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e184      	b.n	800611e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d010      	beq.n	8005e42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691a      	ldr	r2, [r3, #16]
 8005e24:	4b7b      	ldr	r3, [pc, #492]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d908      	bls.n	8005e42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e30:	4b78      	ldr	r3, [pc, #480]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	4975      	ldr	r1, [pc, #468]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0308 	and.w	r3, r3, #8
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d010      	beq.n	8005e70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	695a      	ldr	r2, [r3, #20]
 8005e52:	4b70      	ldr	r3, [pc, #448]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d908      	bls.n	8005e70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e5e:	4b6d      	ldr	r3, [pc, #436]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	496a      	ldr	r1, [pc, #424]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d010      	beq.n	8005e9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	699a      	ldr	r2, [r3, #24]
 8005e80:	4b64      	ldr	r3, [pc, #400]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d908      	bls.n	8005e9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e8c:	4b61      	ldr	r3, [pc, #388]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	495e      	ldr	r1, [pc, #376]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d010      	beq.n	8005ecc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	69da      	ldr	r2, [r3, #28]
 8005eae:	4b59      	ldr	r3, [pc, #356]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d908      	bls.n	8005ecc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005eba:	4b56      	ldr	r3, [pc, #344]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	4953      	ldr	r1, [pc, #332]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d010      	beq.n	8005efa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	4b4d      	ldr	r3, [pc, #308]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d908      	bls.n	8005efa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ee8:	4b4a      	ldr	r3, [pc, #296]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	f023 020f 	bic.w	r2, r3, #15
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	4947      	ldr	r1, [pc, #284]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d055      	beq.n	8005fb2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005f06:	4b43      	ldr	r3, [pc, #268]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	4940      	ldr	r1, [pc, #256]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d107      	bne.n	8005f30 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f20:	4b3c      	ldr	r3, [pc, #240]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d121      	bne.n	8005f70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e0f6      	b.n	800611e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2b03      	cmp	r3, #3
 8005f36:	d107      	bne.n	8005f48 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f38:	4b36      	ldr	r3, [pc, #216]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d115      	bne.n	8005f70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e0ea      	b.n	800611e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d107      	bne.n	8005f60 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f50:	4b30      	ldr	r3, [pc, #192]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d109      	bne.n	8005f70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e0de      	b.n	800611e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f60:	4b2c      	ldr	r3, [pc, #176]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e0d6      	b.n	800611e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f70:	4b28      	ldr	r3, [pc, #160]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f023 0207 	bic.w	r2, r3, #7
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	4925      	ldr	r1, [pc, #148]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f82:	f7fc f89d 	bl	80020c0 <HAL_GetTick>
 8005f86:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f88:	e00a      	b.n	8005fa0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f8a:	f7fc f899 	bl	80020c0 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e0be      	b.n	800611e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fa0:	4b1c      	ldr	r3, [pc, #112]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d1eb      	bne.n	8005f8a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d010      	beq.n	8005fe0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	4b14      	ldr	r3, [pc, #80]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d208      	bcs.n	8005fe0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fce:	4b11      	ldr	r3, [pc, #68]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	f023 020f 	bic.w	r2, r3, #15
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	490e      	ldr	r1, [pc, #56]	; (8006014 <HAL_RCC_ClockConfig+0x244>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <HAL_RCC_ClockConfig+0x240>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 030f 	and.w	r3, r3, #15
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d214      	bcs.n	8006018 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fee:	4b08      	ldr	r3, [pc, #32]	; (8006010 <HAL_RCC_ClockConfig+0x240>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f023 020f 	bic.w	r2, r3, #15
 8005ff6:	4906      	ldr	r1, [pc, #24]	; (8006010 <HAL_RCC_ClockConfig+0x240>)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ffe:	4b04      	ldr	r3, [pc, #16]	; (8006010 <HAL_RCC_ClockConfig+0x240>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 030f 	and.w	r3, r3, #15
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d005      	beq.n	8006018 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e086      	b.n	800611e <HAL_RCC_ClockConfig+0x34e>
 8006010:	52002000 	.word	0x52002000
 8006014:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b00      	cmp	r3, #0
 8006022:	d010      	beq.n	8006046 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	4b3f      	ldr	r3, [pc, #252]	; (8006128 <HAL_RCC_ClockConfig+0x358>)
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006030:	429a      	cmp	r2, r3
 8006032:	d208      	bcs.n	8006046 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006034:	4b3c      	ldr	r3, [pc, #240]	; (8006128 <HAL_RCC_ClockConfig+0x358>)
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	4939      	ldr	r1, [pc, #228]	; (8006128 <HAL_RCC_ClockConfig+0x358>)
 8006042:	4313      	orrs	r3, r2
 8006044:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	2b00      	cmp	r3, #0
 8006050:	d010      	beq.n	8006074 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	695a      	ldr	r2, [r3, #20]
 8006056:	4b34      	ldr	r3, [pc, #208]	; (8006128 <HAL_RCC_ClockConfig+0x358>)
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800605e:	429a      	cmp	r2, r3
 8006060:	d208      	bcs.n	8006074 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006062:	4b31      	ldr	r3, [pc, #196]	; (8006128 <HAL_RCC_ClockConfig+0x358>)
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	492e      	ldr	r1, [pc, #184]	; (8006128 <HAL_RCC_ClockConfig+0x358>)
 8006070:	4313      	orrs	r3, r2
 8006072:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b00      	cmp	r3, #0
 800607e:	d010      	beq.n	80060a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	699a      	ldr	r2, [r3, #24]
 8006084:	4b28      	ldr	r3, [pc, #160]	; (8006128 <HAL_RCC_ClockConfig+0x358>)
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800608c:	429a      	cmp	r2, r3
 800608e:	d208      	bcs.n	80060a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006090:	4b25      	ldr	r3, [pc, #148]	; (8006128 <HAL_RCC_ClockConfig+0x358>)
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	4922      	ldr	r1, [pc, #136]	; (8006128 <HAL_RCC_ClockConfig+0x358>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d010      	beq.n	80060d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69da      	ldr	r2, [r3, #28]
 80060b2:	4b1d      	ldr	r3, [pc, #116]	; (8006128 <HAL_RCC_ClockConfig+0x358>)
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d208      	bcs.n	80060d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80060be:	4b1a      	ldr	r3, [pc, #104]	; (8006128 <HAL_RCC_ClockConfig+0x358>)
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	4917      	ldr	r1, [pc, #92]	; (8006128 <HAL_RCC_ClockConfig+0x358>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80060d0:	f000 f834 	bl	800613c <HAL_RCC_GetSysClockFreq>
 80060d4:	4601      	mov	r1, r0
 80060d6:	4b14      	ldr	r3, [pc, #80]	; (8006128 <HAL_RCC_ClockConfig+0x358>)
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	0a1b      	lsrs	r3, r3, #8
 80060dc:	f003 030f 	and.w	r3, r3, #15
 80060e0:	4a12      	ldr	r2, [pc, #72]	; (800612c <HAL_RCC_ClockConfig+0x35c>)
 80060e2:	5cd3      	ldrb	r3, [r2, r3]
 80060e4:	f003 031f 	and.w	r3, r3, #31
 80060e8:	fa21 f303 	lsr.w	r3, r1, r3
 80060ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060ee:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <HAL_RCC_ClockConfig+0x358>)
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	4a0d      	ldr	r2, [pc, #52]	; (800612c <HAL_RCC_ClockConfig+0x35c>)
 80060f8:	5cd3      	ldrb	r3, [r2, r3]
 80060fa:	f003 031f 	and.w	r3, r3, #31
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	fa22 f303 	lsr.w	r3, r2, r3
 8006104:	4a0a      	ldr	r2, [pc, #40]	; (8006130 <HAL_RCC_ClockConfig+0x360>)
 8006106:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006108:	4a0a      	ldr	r2, [pc, #40]	; (8006134 <HAL_RCC_ClockConfig+0x364>)
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800610e:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <HAL_RCC_ClockConfig+0x368>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4618      	mov	r0, r3
 8006114:	f7fb ff8a 	bl	800202c <HAL_InitTick>
 8006118:	4603      	mov	r3, r0
 800611a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800611c:	7bfb      	ldrb	r3, [r7, #15]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	58024400 	.word	0x58024400
 800612c:	0800c04c 	.word	0x0800c04c
 8006130:	24000024 	.word	0x24000024
 8006134:	24000020 	.word	0x24000020
 8006138:	24000028 	.word	0x24000028

0800613c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800613c:	b480      	push	{r7}
 800613e:	b089      	sub	sp, #36	; 0x24
 8006140:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006142:	4baf      	ldr	r3, [pc, #700]	; (8006400 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800614a:	2b18      	cmp	r3, #24
 800614c:	f200 814e 	bhi.w	80063ec <HAL_RCC_GetSysClockFreq+0x2b0>
 8006150:	a201      	add	r2, pc, #4	; (adr r2, 8006158 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006156:	bf00      	nop
 8006158:	080061bd 	.word	0x080061bd
 800615c:	080063ed 	.word	0x080063ed
 8006160:	080063ed 	.word	0x080063ed
 8006164:	080063ed 	.word	0x080063ed
 8006168:	080063ed 	.word	0x080063ed
 800616c:	080063ed 	.word	0x080063ed
 8006170:	080063ed 	.word	0x080063ed
 8006174:	080063ed 	.word	0x080063ed
 8006178:	080061e3 	.word	0x080061e3
 800617c:	080063ed 	.word	0x080063ed
 8006180:	080063ed 	.word	0x080063ed
 8006184:	080063ed 	.word	0x080063ed
 8006188:	080063ed 	.word	0x080063ed
 800618c:	080063ed 	.word	0x080063ed
 8006190:	080063ed 	.word	0x080063ed
 8006194:	080063ed 	.word	0x080063ed
 8006198:	080061e9 	.word	0x080061e9
 800619c:	080063ed 	.word	0x080063ed
 80061a0:	080063ed 	.word	0x080063ed
 80061a4:	080063ed 	.word	0x080063ed
 80061a8:	080063ed 	.word	0x080063ed
 80061ac:	080063ed 	.word	0x080063ed
 80061b0:	080063ed 	.word	0x080063ed
 80061b4:	080063ed 	.word	0x080063ed
 80061b8:	080061ef 	.word	0x080061ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061bc:	4b90      	ldr	r3, [pc, #576]	; (8006400 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0320 	and.w	r3, r3, #32
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d009      	beq.n	80061dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061c8:	4b8d      	ldr	r3, [pc, #564]	; (8006400 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	08db      	lsrs	r3, r3, #3
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	4a8c      	ldr	r2, [pc, #560]	; (8006404 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80061d4:	fa22 f303 	lsr.w	r3, r2, r3
 80061d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80061da:	e10a      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80061dc:	4b89      	ldr	r3, [pc, #548]	; (8006404 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80061de:	61bb      	str	r3, [r7, #24]
    break;
 80061e0:	e107      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80061e2:	4b89      	ldr	r3, [pc, #548]	; (8006408 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80061e4:	61bb      	str	r3, [r7, #24]
    break;
 80061e6:	e104      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80061e8:	4b88      	ldr	r3, [pc, #544]	; (800640c <HAL_RCC_GetSysClockFreq+0x2d0>)
 80061ea:	61bb      	str	r3, [r7, #24]
    break;
 80061ec:	e101      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061ee:	4b84      	ldr	r3, [pc, #528]	; (8006400 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80061f8:	4b81      	ldr	r3, [pc, #516]	; (8006400 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fc:	091b      	lsrs	r3, r3, #4
 80061fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006202:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006204:	4b7e      	ldr	r3, [pc, #504]	; (8006400 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800620e:	4b7c      	ldr	r3, [pc, #496]	; (8006400 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006212:	08db      	lsrs	r3, r3, #3
 8006214:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	fb02 f303 	mul.w	r3, r2, r3
 800621e:	ee07 3a90 	vmov	s15, r3
 8006222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006226:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 80da 	beq.w	80063e6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d05a      	beq.n	80062ee <HAL_RCC_GetSysClockFreq+0x1b2>
 8006238:	2b01      	cmp	r3, #1
 800623a:	d302      	bcc.n	8006242 <HAL_RCC_GetSysClockFreq+0x106>
 800623c:	2b02      	cmp	r3, #2
 800623e:	d078      	beq.n	8006332 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006240:	e099      	b.n	8006376 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006242:	4b6f      	ldr	r3, [pc, #444]	; (8006400 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0320 	and.w	r3, r3, #32
 800624a:	2b00      	cmp	r3, #0
 800624c:	d02d      	beq.n	80062aa <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800624e:	4b6c      	ldr	r3, [pc, #432]	; (8006400 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	08db      	lsrs	r3, r3, #3
 8006254:	f003 0303 	and.w	r3, r3, #3
 8006258:	4a6a      	ldr	r2, [pc, #424]	; (8006404 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800625a:	fa22 f303 	lsr.w	r3, r2, r3
 800625e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	ee07 3a90 	vmov	s15, r3
 8006266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	ee07 3a90 	vmov	s15, r3
 8006270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006274:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006278:	4b61      	ldr	r3, [pc, #388]	; (8006400 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006280:	ee07 3a90 	vmov	s15, r3
 8006284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006288:	ed97 6a02 	vldr	s12, [r7, #8]
 800628c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006410 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006290:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006294:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006298:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800629c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80062a8:	e087      	b.n	80063ba <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	ee07 3a90 	vmov	s15, r3
 80062b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006414 <HAL_RCC_GetSysClockFreq+0x2d8>
 80062b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062bc:	4b50      	ldr	r3, [pc, #320]	; (8006400 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c4:	ee07 3a90 	vmov	s15, r3
 80062c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80062d0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006410 <HAL_RCC_GetSysClockFreq+0x2d4>
 80062d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062ec:	e065      	b.n	80063ba <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	ee07 3a90 	vmov	s15, r3
 80062f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006418 <HAL_RCC_GetSysClockFreq+0x2dc>
 80062fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006300:	4b3f      	ldr	r3, [pc, #252]	; (8006400 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006308:	ee07 3a90 	vmov	s15, r3
 800630c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006310:	ed97 6a02 	vldr	s12, [r7, #8]
 8006314:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006410 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006318:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800631c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006320:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006324:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800632c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006330:	e043      	b.n	80063ba <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	ee07 3a90 	vmov	s15, r3
 8006338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800641c <HAL_RCC_GetSysClockFreq+0x2e0>
 8006340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006344:	4b2e      	ldr	r3, [pc, #184]	; (8006400 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800634c:	ee07 3a90 	vmov	s15, r3
 8006350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006354:	ed97 6a02 	vldr	s12, [r7, #8]
 8006358:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006410 <HAL_RCC_GetSysClockFreq+0x2d4>
 800635c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006360:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006364:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006368:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800636c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006370:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006374:	e021      	b.n	80063ba <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	ee07 3a90 	vmov	s15, r3
 800637c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006380:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006418 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006388:	4b1d      	ldr	r3, [pc, #116]	; (8006400 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800638a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006390:	ee07 3a90 	vmov	s15, r3
 8006394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006398:	ed97 6a02 	vldr	s12, [r7, #8]
 800639c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006410 <HAL_RCC_GetSysClockFreq+0x2d4>
 80063a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063b8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80063ba:	4b11      	ldr	r3, [pc, #68]	; (8006400 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063be:	0a5b      	lsrs	r3, r3, #9
 80063c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063c4:	3301      	adds	r3, #1
 80063c6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80063d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80063d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063de:	ee17 3a90 	vmov	r3, s15
 80063e2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80063e4:	e005      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	61bb      	str	r3, [r7, #24]
    break;
 80063ea:	e002      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80063ec:	4b06      	ldr	r3, [pc, #24]	; (8006408 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80063ee:	61bb      	str	r3, [r7, #24]
    break;
 80063f0:	bf00      	nop
  }

  return sysclockfreq;
 80063f2:	69bb      	ldr	r3, [r7, #24]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3724      	adds	r7, #36	; 0x24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	58024400 	.word	0x58024400
 8006404:	03d09000 	.word	0x03d09000
 8006408:	003d0900 	.word	0x003d0900
 800640c:	017d7840 	.word	0x017d7840
 8006410:	46000000 	.word	0x46000000
 8006414:	4c742400 	.word	0x4c742400
 8006418:	4a742400 	.word	0x4a742400
 800641c:	4bbebc20 	.word	0x4bbebc20

08006420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006426:	f7ff fe89 	bl	800613c <HAL_RCC_GetSysClockFreq>
 800642a:	4601      	mov	r1, r0
 800642c:	4b10      	ldr	r3, [pc, #64]	; (8006470 <HAL_RCC_GetHCLKFreq+0x50>)
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	0a1b      	lsrs	r3, r3, #8
 8006432:	f003 030f 	and.w	r3, r3, #15
 8006436:	4a0f      	ldr	r2, [pc, #60]	; (8006474 <HAL_RCC_GetHCLKFreq+0x54>)
 8006438:	5cd3      	ldrb	r3, [r2, r3]
 800643a:	f003 031f 	and.w	r3, r3, #31
 800643e:	fa21 f303 	lsr.w	r3, r1, r3
 8006442:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006444:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <HAL_RCC_GetHCLKFreq+0x50>)
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	f003 030f 	and.w	r3, r3, #15
 800644c:	4a09      	ldr	r2, [pc, #36]	; (8006474 <HAL_RCC_GetHCLKFreq+0x54>)
 800644e:	5cd3      	ldrb	r3, [r2, r3]
 8006450:	f003 031f 	and.w	r3, r3, #31
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	fa22 f303 	lsr.w	r3, r2, r3
 800645a:	4a07      	ldr	r2, [pc, #28]	; (8006478 <HAL_RCC_GetHCLKFreq+0x58>)
 800645c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800645e:	4a07      	ldr	r2, [pc, #28]	; (800647c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006464:	4b04      	ldr	r3, [pc, #16]	; (8006478 <HAL_RCC_GetHCLKFreq+0x58>)
 8006466:	681b      	ldr	r3, [r3, #0]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	58024400 	.word	0x58024400
 8006474:	0800c04c 	.word	0x0800c04c
 8006478:	24000024 	.word	0x24000024
 800647c:	24000020 	.word	0x24000020

08006480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006484:	f7ff ffcc 	bl	8006420 <HAL_RCC_GetHCLKFreq>
 8006488:	4601      	mov	r1, r0
 800648a:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	091b      	lsrs	r3, r3, #4
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	4a04      	ldr	r2, [pc, #16]	; (80064a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006496:	5cd3      	ldrb	r3, [r2, r3]
 8006498:	f003 031f 	and.w	r3, r3, #31
 800649c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	58024400 	.word	0x58024400
 80064a8:	0800c04c 	.word	0x0800c04c

080064ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80064b0:	f7ff ffb6 	bl	8006420 <HAL_RCC_GetHCLKFreq>
 80064b4:	4601      	mov	r1, r0
 80064b6:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	0a1b      	lsrs	r3, r3, #8
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	4a04      	ldr	r2, [pc, #16]	; (80064d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80064c2:	5cd3      	ldrb	r3, [r2, r3]
 80064c4:	f003 031f 	and.w	r3, r3, #31
 80064c8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	58024400 	.word	0x58024400
 80064d4:	0800c04c 	.word	0x0800c04c

080064d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064e0:	2300      	movs	r3, #0
 80064e2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064e4:	2300      	movs	r3, #0
 80064e6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d03d      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064fc:	d013      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80064fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006502:	d802      	bhi.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006504:	2b00      	cmp	r3, #0
 8006506:	d007      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006508:	e01f      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800650a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800650e:	d013      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006510:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006514:	d01c      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006516:	e018      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006518:	4baf      	ldr	r3, [pc, #700]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	4aae      	ldr	r2, [pc, #696]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800651e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006522:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006524:	e015      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	3304      	adds	r3, #4
 800652a:	2102      	movs	r1, #2
 800652c:	4618      	mov	r0, r3
 800652e:	f001 fd23 	bl	8007f78 <RCCEx_PLL2_Config>
 8006532:	4603      	mov	r3, r0
 8006534:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006536:	e00c      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3324      	adds	r3, #36	; 0x24
 800653c:	2102      	movs	r1, #2
 800653e:	4618      	mov	r0, r3
 8006540:	f001 fdcc 	bl	80080dc <RCCEx_PLL3_Config>
 8006544:	4603      	mov	r3, r0
 8006546:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006548:	e003      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	75fb      	strb	r3, [r7, #23]
      break;
 800654e:	e000      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006550:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006552:	7dfb      	ldrb	r3, [r7, #23]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d109      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006558:	4b9f      	ldr	r3, [pc, #636]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800655a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800655c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006564:	499c      	ldr	r1, [pc, #624]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006566:	4313      	orrs	r3, r2
 8006568:	650b      	str	r3, [r1, #80]	; 0x50
 800656a:	e001      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656c:	7dfb      	ldrb	r3, [r7, #23]
 800656e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006578:	2b00      	cmp	r3, #0
 800657a:	d03d      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006580:	2b04      	cmp	r3, #4
 8006582:	d826      	bhi.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006584:	a201      	add	r2, pc, #4	; (adr r2, 800658c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658a:	bf00      	nop
 800658c:	080065a1 	.word	0x080065a1
 8006590:	080065af 	.word	0x080065af
 8006594:	080065c1 	.word	0x080065c1
 8006598:	080065d9 	.word	0x080065d9
 800659c:	080065d9 	.word	0x080065d9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a0:	4b8d      	ldr	r3, [pc, #564]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	4a8c      	ldr	r2, [pc, #560]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065ac:	e015      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	3304      	adds	r3, #4
 80065b2:	2100      	movs	r1, #0
 80065b4:	4618      	mov	r0, r3
 80065b6:	f001 fcdf 	bl	8007f78 <RCCEx_PLL2_Config>
 80065ba:	4603      	mov	r3, r0
 80065bc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065be:	e00c      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3324      	adds	r3, #36	; 0x24
 80065c4:	2100      	movs	r1, #0
 80065c6:	4618      	mov	r0, r3
 80065c8:	f001 fd88 	bl	80080dc <RCCEx_PLL3_Config>
 80065cc:	4603      	mov	r3, r0
 80065ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065d0:	e003      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	75fb      	strb	r3, [r7, #23]
      break;
 80065d6:	e000      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80065d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065da:	7dfb      	ldrb	r3, [r7, #23]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d109      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065e0:	4b7d      	ldr	r3, [pc, #500]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e4:	f023 0207 	bic.w	r2, r3, #7
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ec:	497a      	ldr	r1, [pc, #488]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	650b      	str	r3, [r1, #80]	; 0x50
 80065f2:	e001      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
 80065f6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006600:	2b00      	cmp	r3, #0
 8006602:	d03e      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006608:	2b80      	cmp	r3, #128	; 0x80
 800660a:	d01c      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800660c:	2b80      	cmp	r3, #128	; 0x80
 800660e:	d804      	bhi.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d008      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006614:	2b40      	cmp	r3, #64	; 0x40
 8006616:	d00d      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006618:	e01e      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800661a:	2bc0      	cmp	r3, #192	; 0xc0
 800661c:	d01f      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800661e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006622:	d01e      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006624:	e018      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006626:	4b6c      	ldr	r3, [pc, #432]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662a:	4a6b      	ldr	r2, [pc, #428]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800662c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006630:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006632:	e017      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3304      	adds	r3, #4
 8006638:	2100      	movs	r1, #0
 800663a:	4618      	mov	r0, r3
 800663c:	f001 fc9c 	bl	8007f78 <RCCEx_PLL2_Config>
 8006640:	4603      	mov	r3, r0
 8006642:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006644:	e00e      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	3324      	adds	r3, #36	; 0x24
 800664a:	2100      	movs	r1, #0
 800664c:	4618      	mov	r0, r3
 800664e:	f001 fd45 	bl	80080dc <RCCEx_PLL3_Config>
 8006652:	4603      	mov	r3, r0
 8006654:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006656:	e005      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	75fb      	strb	r3, [r7, #23]
      break;
 800665c:	e002      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800665e:	bf00      	nop
 8006660:	e000      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006664:	7dfb      	ldrb	r3, [r7, #23]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d109      	bne.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800666a:	4b5b      	ldr	r3, [pc, #364]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800666c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800666e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006676:	4958      	ldr	r1, [pc, #352]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006678:	4313      	orrs	r3, r2
 800667a:	650b      	str	r3, [r1, #80]	; 0x50
 800667c:	e001      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667e:	7dfb      	ldrb	r3, [r7, #23]
 8006680:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800668a:	2b00      	cmp	r3, #0
 800668c:	d044      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006694:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006698:	d01f      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x202>
 800669a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800669e:	d805      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00a      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80066a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066a8:	d00e      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80066aa:	e01f      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x214>
 80066ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066b0:	d01f      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80066b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066b6:	d01e      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80066b8:	e018      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066ba:	4b47      	ldr	r3, [pc, #284]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80066bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066be:	4a46      	ldr	r2, [pc, #280]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80066c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80066c6:	e017      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	3304      	adds	r3, #4
 80066cc:	2100      	movs	r1, #0
 80066ce:	4618      	mov	r0, r3
 80066d0:	f001 fc52 	bl	8007f78 <RCCEx_PLL2_Config>
 80066d4:	4603      	mov	r3, r0
 80066d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80066d8:	e00e      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3324      	adds	r3, #36	; 0x24
 80066de:	2100      	movs	r1, #0
 80066e0:	4618      	mov	r0, r3
 80066e2:	f001 fcfb 	bl	80080dc <RCCEx_PLL3_Config>
 80066e6:	4603      	mov	r3, r0
 80066e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80066ea:	e005      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	75fb      	strb	r3, [r7, #23]
      break;
 80066f0:	e002      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80066f2:	bf00      	nop
 80066f4:	e000      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80066f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10a      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80066fe:	4b36      	ldr	r3, [pc, #216]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006702:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800670c:	4932      	ldr	r1, [pc, #200]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800670e:	4313      	orrs	r3, r2
 8006710:	658b      	str	r3, [r1, #88]	; 0x58
 8006712:	e001      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006714:	7dfb      	ldrb	r3, [r7, #23]
 8006716:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006720:	2b00      	cmp	r3, #0
 8006722:	d044      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800672a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800672e:	d01f      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006730:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006734:	d805      	bhi.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800673a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800673e:	d00e      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006740:	e01f      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006742:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006746:	d01f      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006748:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800674c:	d01e      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800674e:	e018      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006750:	4b21      	ldr	r3, [pc, #132]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	4a20      	ldr	r2, [pc, #128]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800675a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800675c:	e017      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	3304      	adds	r3, #4
 8006762:	2100      	movs	r1, #0
 8006764:	4618      	mov	r0, r3
 8006766:	f001 fc07 	bl	8007f78 <RCCEx_PLL2_Config>
 800676a:	4603      	mov	r3, r0
 800676c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800676e:	e00e      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3324      	adds	r3, #36	; 0x24
 8006774:	2100      	movs	r1, #0
 8006776:	4618      	mov	r0, r3
 8006778:	f001 fcb0 	bl	80080dc <RCCEx_PLL3_Config>
 800677c:	4603      	mov	r3, r0
 800677e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006780:	e005      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	75fb      	strb	r3, [r7, #23]
      break;
 8006786:	e002      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006788:	bf00      	nop
 800678a:	e000      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800678c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800678e:	7dfb      	ldrb	r3, [r7, #23]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10a      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006794:	4b10      	ldr	r3, [pc, #64]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006798:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067a2:	490d      	ldr	r1, [pc, #52]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	658b      	str	r3, [r1, #88]	; 0x58
 80067a8:	e001      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
 80067ac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d035      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067be:	2b10      	cmp	r3, #16
 80067c0:	d00c      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x304>
 80067c2:	2b10      	cmp	r3, #16
 80067c4:	d802      	bhi.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d01b      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80067ca:	e017      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x324>
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d00c      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x312>
 80067d0:	2b30      	cmp	r3, #48	; 0x30
 80067d2:	d018      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80067d4:	e012      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x324>
 80067d6:	bf00      	nop
 80067d8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067dc:	4baf      	ldr	r3, [pc, #700]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	4aae      	ldr	r2, [pc, #696]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80067e8:	e00e      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3304      	adds	r3, #4
 80067ee:	2102      	movs	r1, #2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f001 fbc1 	bl	8007f78 <RCCEx_PLL2_Config>
 80067f6:	4603      	mov	r3, r0
 80067f8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80067fa:	e005      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006800:	e002      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006802:	bf00      	nop
 8006804:	e000      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006806:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006808:	7dfb      	ldrb	r3, [r7, #23]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d109      	bne.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800680e:	4ba3      	ldr	r3, [pc, #652]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006812:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800681a:	49a0      	ldr	r1, [pc, #640]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800681c:	4313      	orrs	r3, r2
 800681e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006820:	e001      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006822:	7dfb      	ldrb	r3, [r7, #23]
 8006824:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d042      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800683a:	d01f      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800683c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006840:	d805      	bhi.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00a      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684a:	d00e      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800684c:	e01f      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800684e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006852:	d01f      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006854:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006858:	d01e      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800685a:	e018      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800685c:	4b8f      	ldr	r3, [pc, #572]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	4a8e      	ldr	r2, [pc, #568]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006866:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006868:	e017      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3304      	adds	r3, #4
 800686e:	2100      	movs	r1, #0
 8006870:	4618      	mov	r0, r3
 8006872:	f001 fb81 	bl	8007f78 <RCCEx_PLL2_Config>
 8006876:	4603      	mov	r3, r0
 8006878:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800687a:	e00e      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	3324      	adds	r3, #36	; 0x24
 8006880:	2100      	movs	r1, #0
 8006882:	4618      	mov	r0, r3
 8006884:	f001 fc2a 	bl	80080dc <RCCEx_PLL3_Config>
 8006888:	4603      	mov	r3, r0
 800688a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800688c:	e005      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	75fb      	strb	r3, [r7, #23]
      break;
 8006892:	e002      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006894:	bf00      	nop
 8006896:	e000      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800689a:	7dfb      	ldrb	r3, [r7, #23]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d109      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80068a0:	4b7e      	ldr	r3, [pc, #504]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80068a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ac:	497b      	ldr	r1, [pc, #492]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	650b      	str	r3, [r1, #80]	; 0x50
 80068b2:	e001      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d042      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068cc:	d01b      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80068ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068d2:	d805      	bhi.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d022      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x446>
 80068d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068dc:	d00a      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80068de:	e01b      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80068e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068e4:	d01d      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80068e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068ea:	d01c      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80068ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068f0:	d01b      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x452>
 80068f2:	e011      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	3304      	adds	r3, #4
 80068f8:	2101      	movs	r1, #1
 80068fa:	4618      	mov	r0, r3
 80068fc:	f001 fb3c 	bl	8007f78 <RCCEx_PLL2_Config>
 8006900:	4603      	mov	r3, r0
 8006902:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006904:	e012      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3324      	adds	r3, #36	; 0x24
 800690a:	2101      	movs	r1, #1
 800690c:	4618      	mov	r0, r3
 800690e:	f001 fbe5 	bl	80080dc <RCCEx_PLL3_Config>
 8006912:	4603      	mov	r3, r0
 8006914:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006916:	e009      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	75fb      	strb	r3, [r7, #23]
      break;
 800691c:	e006      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800691e:	bf00      	nop
 8006920:	e004      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006922:	bf00      	nop
 8006924:	e002      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006926:	bf00      	nop
 8006928:	e000      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800692a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800692c:	7dfb      	ldrb	r3, [r7, #23]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d109      	bne.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006932:	4b5a      	ldr	r3, [pc, #360]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006936:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800693e:	4957      	ldr	r1, [pc, #348]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006940:	4313      	orrs	r3, r2
 8006942:	650b      	str	r3, [r1, #80]	; 0x50
 8006944:	e001      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006946:	7dfb      	ldrb	r3, [r7, #23]
 8006948:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d044      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800695c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006960:	d01b      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006962:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006966:	d805      	bhi.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006968:	2b00      	cmp	r3, #0
 800696a:	d022      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800696c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006970:	d00a      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006972:	e01b      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006978:	d01d      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800697a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800697e:	d01c      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006980:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006984:	d01b      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006986:	e011      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3304      	adds	r3, #4
 800698c:	2101      	movs	r1, #1
 800698e:	4618      	mov	r0, r3
 8006990:	f001 faf2 	bl	8007f78 <RCCEx_PLL2_Config>
 8006994:	4603      	mov	r3, r0
 8006996:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006998:	e012      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3324      	adds	r3, #36	; 0x24
 800699e:	2101      	movs	r1, #1
 80069a0:	4618      	mov	r0, r3
 80069a2:	f001 fb9b 	bl	80080dc <RCCEx_PLL3_Config>
 80069a6:	4603      	mov	r3, r0
 80069a8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80069aa:	e009      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	75fb      	strb	r3, [r7, #23]
      break;
 80069b0:	e006      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80069b2:	bf00      	nop
 80069b4:	e004      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80069b6:	bf00      	nop
 80069b8:	e002      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80069ba:	bf00      	nop
 80069bc:	e000      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80069be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069c0:	7dfb      	ldrb	r3, [r7, #23]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10a      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80069c6:	4b35      	ldr	r3, [pc, #212]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80069d4:	4931      	ldr	r1, [pc, #196]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	658b      	str	r3, [r1, #88]	; 0x58
 80069da:	e001      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d02d      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069f4:	d005      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80069f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069fa:	d009      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d013      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006a00:	e00f      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a02:	4b26      	ldr	r3, [pc, #152]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a06:	4a25      	ldr	r2, [pc, #148]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006a0e:	e00c      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3304      	adds	r3, #4
 8006a14:	2101      	movs	r1, #1
 8006a16:	4618      	mov	r0, r3
 8006a18:	f001 faae 	bl	8007f78 <RCCEx_PLL2_Config>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006a20:	e003      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	75fb      	strb	r3, [r7, #23]
      break;
 8006a26:	e000      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006a28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d109      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a30:	4b1a      	ldr	r3, [pc, #104]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a34:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a3c:	4917      	ldr	r1, [pc, #92]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	650b      	str	r3, [r1, #80]	; 0x50
 8006a42:	e001      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a44:	7dfb      	ldrb	r3, [r7, #23]
 8006a46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d035      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d81b      	bhi.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006a5c:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a62:	bf00      	nop
 8006a64:	08006aa1 	.word	0x08006aa1
 8006a68:	08006a75 	.word	0x08006a75
 8006a6c:	08006a83 	.word	0x08006a83
 8006a70:	08006aa1 	.word	0x08006aa1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a74:	4b09      	ldr	r3, [pc, #36]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a78:	4a08      	ldr	r2, [pc, #32]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006a80:	e00f      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	3304      	adds	r3, #4
 8006a86:	2102      	movs	r1, #2
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f001 fa75 	bl	8007f78 <RCCEx_PLL2_Config>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006a92:	e006      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	75fb      	strb	r3, [r7, #23]
      break;
 8006a98:	e003      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006a9a:	bf00      	nop
 8006a9c:	58024400 	.word	0x58024400
      break;
 8006aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d109      	bne.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006aa8:	4bba      	ldr	r3, [pc, #744]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aac:	f023 0203 	bic.w	r2, r3, #3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab4:	49b7      	ldr	r1, [pc, #732]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006aba:	e001      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
 8006abe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 8086 	beq.w	8006bda <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ace:	4bb2      	ldr	r3, [pc, #712]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4ab1      	ldr	r2, [pc, #708]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ad8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ada:	f7fb faf1 	bl	80020c0 <HAL_GetTick>
 8006ade:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ae0:	e009      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ae2:	f7fb faed 	bl	80020c0 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	2b64      	cmp	r3, #100	; 0x64
 8006aee:	d902      	bls.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	75fb      	strb	r3, [r7, #23]
        break;
 8006af4:	e005      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006af6:	4ba8      	ldr	r3, [pc, #672]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0ef      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d166      	bne.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006b08:	4ba2      	ldr	r3, [pc, #648]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b12:	4053      	eors	r3, r2
 8006b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d013      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b1c:	4b9d      	ldr	r3, [pc, #628]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b24:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b26:	4b9b      	ldr	r3, [pc, #620]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2a:	4a9a      	ldr	r2, [pc, #616]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b30:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b32:	4b98      	ldr	r3, [pc, #608]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b36:	4a97      	ldr	r2, [pc, #604]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b3c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006b3e:	4a95      	ldr	r2, [pc, #596]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b4e:	d115      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b50:	f7fb fab6 	bl	80020c0 <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b56:	e00b      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b58:	f7fb fab2 	bl	80020c0 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d902      	bls.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	75fb      	strb	r3, [r7, #23]
            break;
 8006b6e:	e005      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b70:	4b88      	ldr	r3, [pc, #544]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0ed      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006b7c:	7dfb      	ldrb	r3, [r7, #23]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d126      	bne.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b90:	d10d      	bne.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8006b92:	4b80      	ldr	r3, [pc, #512]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ba0:	0919      	lsrs	r1, r3, #4
 8006ba2:	4b7e      	ldr	r3, [pc, #504]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8006ba4:	400b      	ands	r3, r1
 8006ba6:	497b      	ldr	r1, [pc, #492]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	610b      	str	r3, [r1, #16]
 8006bac:	e005      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8006bae:	4b79      	ldr	r3, [pc, #484]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	4a78      	ldr	r2, [pc, #480]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006bb4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006bb8:	6113      	str	r3, [r2, #16]
 8006bba:	4b76      	ldr	r3, [pc, #472]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006bbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bc8:	4972      	ldr	r1, [pc, #456]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	670b      	str	r3, [r1, #112]	; 0x70
 8006bce:	e004      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
 8006bd2:	75bb      	strb	r3, [r7, #22]
 8006bd4:	e001      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd6:	7dfb      	ldrb	r3, [r7, #23]
 8006bd8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d07d      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bea:	2b28      	cmp	r3, #40	; 0x28
 8006bec:	d866      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8006bee:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf4:	08006cc3 	.word	0x08006cc3
 8006bf8:	08006cbd 	.word	0x08006cbd
 8006bfc:	08006cbd 	.word	0x08006cbd
 8006c00:	08006cbd 	.word	0x08006cbd
 8006c04:	08006cbd 	.word	0x08006cbd
 8006c08:	08006cbd 	.word	0x08006cbd
 8006c0c:	08006cbd 	.word	0x08006cbd
 8006c10:	08006cbd 	.word	0x08006cbd
 8006c14:	08006c99 	.word	0x08006c99
 8006c18:	08006cbd 	.word	0x08006cbd
 8006c1c:	08006cbd 	.word	0x08006cbd
 8006c20:	08006cbd 	.word	0x08006cbd
 8006c24:	08006cbd 	.word	0x08006cbd
 8006c28:	08006cbd 	.word	0x08006cbd
 8006c2c:	08006cbd 	.word	0x08006cbd
 8006c30:	08006cbd 	.word	0x08006cbd
 8006c34:	08006cab 	.word	0x08006cab
 8006c38:	08006cbd 	.word	0x08006cbd
 8006c3c:	08006cbd 	.word	0x08006cbd
 8006c40:	08006cbd 	.word	0x08006cbd
 8006c44:	08006cbd 	.word	0x08006cbd
 8006c48:	08006cbd 	.word	0x08006cbd
 8006c4c:	08006cbd 	.word	0x08006cbd
 8006c50:	08006cbd 	.word	0x08006cbd
 8006c54:	08006cc3 	.word	0x08006cc3
 8006c58:	08006cbd 	.word	0x08006cbd
 8006c5c:	08006cbd 	.word	0x08006cbd
 8006c60:	08006cbd 	.word	0x08006cbd
 8006c64:	08006cbd 	.word	0x08006cbd
 8006c68:	08006cbd 	.word	0x08006cbd
 8006c6c:	08006cbd 	.word	0x08006cbd
 8006c70:	08006cbd 	.word	0x08006cbd
 8006c74:	08006cc3 	.word	0x08006cc3
 8006c78:	08006cbd 	.word	0x08006cbd
 8006c7c:	08006cbd 	.word	0x08006cbd
 8006c80:	08006cbd 	.word	0x08006cbd
 8006c84:	08006cbd 	.word	0x08006cbd
 8006c88:	08006cbd 	.word	0x08006cbd
 8006c8c:	08006cbd 	.word	0x08006cbd
 8006c90:	08006cbd 	.word	0x08006cbd
 8006c94:	08006cc3 	.word	0x08006cc3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f001 f96a 	bl	8007f78 <RCCEx_PLL2_Config>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ca8:	e00c      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	3324      	adds	r3, #36	; 0x24
 8006cae:	2101      	movs	r1, #1
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f001 fa13 	bl	80080dc <RCCEx_PLL3_Config>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006cba:	e003      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc0:	e000      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006cc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cc4:	7dfb      	ldrb	r3, [r7, #23]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d109      	bne.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006cca:	4b32      	ldr	r3, [pc, #200]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cce:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cd6:	492f      	ldr	r1, [pc, #188]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	654b      	str	r3, [r1, #84]	; 0x54
 8006cdc:	e001      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cde:	7dfb      	ldrb	r3, [r7, #23]
 8006ce0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d037      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cf2:	2b05      	cmp	r3, #5
 8006cf4:	d820      	bhi.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006cf6:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfc:	08006d3f 	.word	0x08006d3f
 8006d00:	08006d15 	.word	0x08006d15
 8006d04:	08006d27 	.word	0x08006d27
 8006d08:	08006d3f 	.word	0x08006d3f
 8006d0c:	08006d3f 	.word	0x08006d3f
 8006d10:	08006d3f 	.word	0x08006d3f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3304      	adds	r3, #4
 8006d18:	2101      	movs	r1, #1
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f001 f92c 	bl	8007f78 <RCCEx_PLL2_Config>
 8006d20:	4603      	mov	r3, r0
 8006d22:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006d24:	e00c      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	3324      	adds	r3, #36	; 0x24
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f001 f9d5 	bl	80080dc <RCCEx_PLL3_Config>
 8006d32:	4603      	mov	r3, r0
 8006d34:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006d36:	e003      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d3c:	e000      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d40:	7dfb      	ldrb	r3, [r7, #23]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006d46:	4b13      	ldr	r3, [pc, #76]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4a:	f023 0207 	bic.w	r2, r3, #7
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d52:	4910      	ldr	r1, [pc, #64]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	654b      	str	r3, [r1, #84]	; 0x54
 8006d58:	e001      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
 8006d5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0304 	and.w	r3, r3, #4
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d040      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d70:	2b05      	cmp	r3, #5
 8006d72:	d827      	bhi.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006d74:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7a:	bf00      	nop
 8006d7c:	08006dcb 	.word	0x08006dcb
 8006d80:	08006da1 	.word	0x08006da1
 8006d84:	08006db3 	.word	0x08006db3
 8006d88:	08006dcb 	.word	0x08006dcb
 8006d8c:	08006dcb 	.word	0x08006dcb
 8006d90:	08006dcb 	.word	0x08006dcb
 8006d94:	58024400 	.word	0x58024400
 8006d98:	58024800 	.word	0x58024800
 8006d9c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3304      	adds	r3, #4
 8006da4:	2101      	movs	r1, #1
 8006da6:	4618      	mov	r0, r3
 8006da8:	f001 f8e6 	bl	8007f78 <RCCEx_PLL2_Config>
 8006dac:	4603      	mov	r3, r0
 8006dae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006db0:	e00c      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	3324      	adds	r3, #36	; 0x24
 8006db6:	2101      	movs	r1, #1
 8006db8:	4618      	mov	r0, r3
 8006dba:	f001 f98f 	bl	80080dc <RCCEx_PLL3_Config>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006dc2:	e003      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8006dc8:	e000      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10a      	bne.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006dd2:	4bb2      	ldr	r3, [pc, #712]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd6:	f023 0207 	bic.w	r2, r3, #7
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de0:	49ae      	ldr	r1, [pc, #696]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	658b      	str	r3, [r1, #88]	; 0x58
 8006de6:	e001      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de8:	7dfb      	ldrb	r3, [r7, #23]
 8006dea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0320 	and.w	r3, r3, #32
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d044      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e02:	d01b      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e08:	d805      	bhi.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d022      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006e0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e12:	d00a      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006e14:	e01b      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e1a:	d01d      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e20:	d01c      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006e22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e26:	d01b      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006e28:	e011      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	2100      	movs	r1, #0
 8006e30:	4618      	mov	r0, r3
 8006e32:	f001 f8a1 	bl	8007f78 <RCCEx_PLL2_Config>
 8006e36:	4603      	mov	r3, r0
 8006e38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006e3a:	e012      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	3324      	adds	r3, #36	; 0x24
 8006e40:	2102      	movs	r1, #2
 8006e42:	4618      	mov	r0, r3
 8006e44:	f001 f94a 	bl	80080dc <RCCEx_PLL3_Config>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006e4c:	e009      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	75fb      	strb	r3, [r7, #23]
      break;
 8006e52:	e006      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006e54:	bf00      	nop
 8006e56:	e004      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006e58:	bf00      	nop
 8006e5a:	e002      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006e5c:	bf00      	nop
 8006e5e:	e000      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e62:	7dfb      	ldrb	r3, [r7, #23]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10a      	bne.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e68:	4b8c      	ldr	r3, [pc, #560]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e76:	4989      	ldr	r1, [pc, #548]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	654b      	str	r3, [r1, #84]	; 0x54
 8006e7c:	e001      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
 8006e80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d044      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e98:	d01b      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e9e:	d805      	bhi.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d022      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ea8:	d00a      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006eaa:	e01b      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb0:	d01d      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006eb2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006eb6:	d01c      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006eb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ebc:	d01b      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006ebe:	e011      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f001 f856 	bl	8007f78 <RCCEx_PLL2_Config>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006ed0:	e012      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3324      	adds	r3, #36	; 0x24
 8006ed6:	2102      	movs	r1, #2
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f001 f8ff 	bl	80080dc <RCCEx_PLL3_Config>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006ee2:	e009      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee8:	e006      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006eea:	bf00      	nop
 8006eec:	e004      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006eee:	bf00      	nop
 8006ef0:	e002      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006ef2:	bf00      	nop
 8006ef4:	e000      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006ef6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10a      	bne.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006efe:	4b67      	ldr	r3, [pc, #412]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f02:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f0c:	4963      	ldr	r1, [pc, #396]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	658b      	str	r3, [r1, #88]	; 0x58
 8006f12:	e001      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
 8006f16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d044      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f2e:	d01b      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006f30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f34:	d805      	bhi.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d022      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f3e:	d00a      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006f40:	e01b      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f46:	d01d      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006f48:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006f4c:	d01c      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006f4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006f52:	d01b      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006f54:	e011      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	3304      	adds	r3, #4
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f001 f80b 	bl	8007f78 <RCCEx_PLL2_Config>
 8006f62:	4603      	mov	r3, r0
 8006f64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006f66:	e012      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	3324      	adds	r3, #36	; 0x24
 8006f6c:	2102      	movs	r1, #2
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f001 f8b4 	bl	80080dc <RCCEx_PLL3_Config>
 8006f74:	4603      	mov	r3, r0
 8006f76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006f78:	e009      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f7e:	e006      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006f80:	bf00      	nop
 8006f82:	e004      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006f84:	bf00      	nop
 8006f86:	e002      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006f88:	bf00      	nop
 8006f8a:	e000      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006f8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f8e:	7dfb      	ldrb	r3, [r7, #23]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f94:	4b41      	ldr	r3, [pc, #260]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f98:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fa2:	493e      	ldr	r1, [pc, #248]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	658b      	str	r3, [r1, #88]	; 0x58
 8006fa8:	e001      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
 8006fac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0308 	and.w	r3, r3, #8
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d01a      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc4:	d10a      	bne.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3324      	adds	r3, #36	; 0x24
 8006fca:	2102      	movs	r1, #2
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f001 f885 	bl	80080dc <RCCEx_PLL3_Config>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d001      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006fdc:	4b2f      	ldr	r3, [pc, #188]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fea:	492c      	ldr	r1, [pc, #176]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0310 	and.w	r3, r3, #16
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d01a      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007006:	d10a      	bne.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	3324      	adds	r3, #36	; 0x24
 800700c:	2102      	movs	r1, #2
 800700e:	4618      	mov	r0, r3
 8007010:	f001 f864 	bl	80080dc <RCCEx_PLL3_Config>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800701e:	4b1f      	ldr	r3, [pc, #124]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007022:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800702c:	491b      	ldr	r1, [pc, #108]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800702e:	4313      	orrs	r3, r2
 8007030:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d032      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007048:	d00d      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800704a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800704e:	d016      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d111      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3304      	adds	r3, #4
 8007058:	2100      	movs	r1, #0
 800705a:	4618      	mov	r0, r3
 800705c:	f000 ff8c 	bl	8007f78 <RCCEx_PLL2_Config>
 8007060:	4603      	mov	r3, r0
 8007062:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007064:	e00c      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	3324      	adds	r3, #36	; 0x24
 800706a:	2102      	movs	r1, #2
 800706c:	4618      	mov	r0, r3
 800706e:	f001 f835 	bl	80080dc <RCCEx_PLL3_Config>
 8007072:	4603      	mov	r3, r0
 8007074:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007076:	e003      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	75fb      	strb	r3, [r7, #23]
      break;
 800707c:	e000      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800707e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007080:	7dfb      	ldrb	r3, [r7, #23]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10c      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007086:	4b05      	ldr	r3, [pc, #20]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007094:	4901      	ldr	r1, [pc, #4]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007096:	4313      	orrs	r3, r2
 8007098:	658b      	str	r3, [r1, #88]	; 0x58
 800709a:	e003      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800709c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d02f      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070ba:	d00c      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80070bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070c0:	d015      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80070c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070c6:	d10f      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070c8:	4b71      	ldr	r3, [pc, #452]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	4a70      	ldr	r2, [pc, #448]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80070ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80070d4:	e00c      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	3324      	adds	r3, #36	; 0x24
 80070da:	2101      	movs	r1, #1
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fffd 	bl	80080dc <RCCEx_PLL3_Config>
 80070e2:	4603      	mov	r3, r0
 80070e4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80070e6:	e003      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	75fb      	strb	r3, [r7, #23]
      break;
 80070ec:	e000      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80070ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10a      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070f6:	4b66      	ldr	r3, [pc, #408]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80070f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007104:	4962      	ldr	r1, [pc, #392]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007106:	4313      	orrs	r3, r2
 8007108:	654b      	str	r3, [r1, #84]	; 0x54
 800710a:	e001      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710c:	7dfb      	ldrb	r3, [r7, #23]
 800710e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d029      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007120:	2b00      	cmp	r3, #0
 8007122:	d003      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007128:	d007      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800712a:	e00f      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800712c:	4b58      	ldr	r3, [pc, #352]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800712e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007130:	4a57      	ldr	r2, [pc, #348]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007136:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007138:	e00b      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	3304      	adds	r3, #4
 800713e:	2102      	movs	r1, #2
 8007140:	4618      	mov	r0, r3
 8007142:	f000 ff19 	bl	8007f78 <RCCEx_PLL2_Config>
 8007146:	4603      	mov	r3, r0
 8007148:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800714a:	e002      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	75fb      	strb	r3, [r7, #23]
      break;
 8007150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007152:	7dfb      	ldrb	r3, [r7, #23]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d109      	bne.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007158:	4b4d      	ldr	r3, [pc, #308]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800715a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800715c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007164:	494a      	ldr	r1, [pc, #296]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007166:	4313      	orrs	r3, r2
 8007168:	64cb      	str	r3, [r1, #76]	; 0x4c
 800716a:	e001      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800716c:	7dfb      	ldrb	r3, [r7, #23]
 800716e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00a      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3324      	adds	r3, #36	; 0x24
 8007180:	2102      	movs	r1, #2
 8007182:	4618      	mov	r0, r3
 8007184:	f000 ffaa 	bl	80080dc <RCCEx_PLL3_Config>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d02f      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071a6:	d00c      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80071a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ac:	d802      	bhi.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d011      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80071b2:	e00d      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80071b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b8:	d00f      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80071ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071be:	d00e      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80071c0:	e006      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071c2:	4b33      	ldr	r3, [pc, #204]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80071c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c6:	4a32      	ldr	r2, [pc, #200]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80071c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80071ce:	e007      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	75fb      	strb	r3, [r7, #23]
      break;
 80071d4:	e004      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80071d6:	bf00      	nop
 80071d8:	e002      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80071da:	bf00      	nop
 80071dc:	e000      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80071de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d109      	bne.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071e6:	4b2a      	ldr	r3, [pc, #168]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80071e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071f2:	4927      	ldr	r1, [pc, #156]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	654b      	str	r3, [r1, #84]	; 0x54
 80071f8:	e001      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
 80071fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d008      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800720a:	4b21      	ldr	r3, [pc, #132]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800720c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800720e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007216:	491e      	ldr	r1, [pc, #120]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007218:	4313      	orrs	r3, r2
 800721a:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d008      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007228:	4b19      	ldr	r3, [pc, #100]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800722a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800722c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007234:	4916      	ldr	r1, [pc, #88]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007236:	4313      	orrs	r3, r2
 8007238:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00d      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007246:	4b12      	ldr	r3, [pc, #72]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	4a11      	ldr	r2, [pc, #68]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800724c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007250:	6113      	str	r3, [r2, #16]
 8007252:	4b0f      	ldr	r3, [pc, #60]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007254:	691a      	ldr	r2, [r3, #16]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800725c:	490c      	ldr	r1, [pc, #48]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800725e:	4313      	orrs	r3, r2
 8007260:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	da08      	bge.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800726a:	4b09      	ldr	r3, [pc, #36]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800726c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800726e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007276:	4906      	ldr	r1, [pc, #24]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007278:	4313      	orrs	r3, r2
 800727a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800727c:	7dbb      	ldrb	r3, [r7, #22]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	e000      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
}
 8007288:	4618      	mov	r0, r3
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	58024400 	.word	0x58024400

08007294 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b090      	sub	sp, #64	; 0x40
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072a2:	d150      	bne.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80072a4:	4ba1      	ldr	r3, [pc, #644]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80072a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a8:	f003 0307 	and.w	r3, r3, #7
 80072ac:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80072ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b0:	2b04      	cmp	r3, #4
 80072b2:	d844      	bhi.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80072b4:	a201      	add	r2, pc, #4	; (adr r2, 80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80072b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ba:	bf00      	nop
 80072bc:	080072d1 	.word	0x080072d1
 80072c0:	080072e1 	.word	0x080072e1
 80072c4:	080072f1 	.word	0x080072f1
 80072c8:	08007339 	.word	0x08007339
 80072cc:	08007301 	.word	0x08007301
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 fd03 	bl	8007ce0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072de:	e241      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072e0:	f107 0318 	add.w	r3, r7, #24
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 fa63 	bl	80077b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ee:	e239      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072f0:	f107 030c 	add.w	r3, r7, #12
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 fba7 	bl	8007a48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072fe:	e231      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007300:	4b8a      	ldr	r3, [pc, #552]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007304:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007308:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800730a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730c:	2b00      	cmp	r3, #0
 800730e:	d102      	bne.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007310:	4b87      	ldr	r3, [pc, #540]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007312:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007314:	e226      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007318:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800731c:	d102      	bne.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800731e:	4b85      	ldr	r3, [pc, #532]	; (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007320:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007322:	e21f      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800732a:	d102      	bne.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800732c:	4b82      	ldr	r3, [pc, #520]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800732e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007330:	e218      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007332:	2300      	movs	r3, #0
 8007334:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007336:	e215      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007338:	4b80      	ldr	r3, [pc, #512]	; (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800733a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800733c:	e212      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007342:	bf00      	nop
 8007344:	e20e      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800734c:	d14f      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800734e:	4b77      	ldr	r3, [pc, #476]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007352:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007356:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735a:	2b80      	cmp	r3, #128	; 0x80
 800735c:	d01c      	beq.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800735e:	2b80      	cmp	r3, #128	; 0x80
 8007360:	d804      	bhi.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d008      	beq.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007366:	2b40      	cmp	r3, #64	; 0x40
 8007368:	d00e      	beq.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800736a:	e03c      	b.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800736c:	2bc0      	cmp	r3, #192	; 0xc0
 800736e:	d037      	beq.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007374:	d018      	beq.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007376:	e036      	b.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fcaf 	bl	8007ce0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007386:	e1ed      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007388:	f107 0318 	add.w	r3, r7, #24
 800738c:	4618      	mov	r0, r3
 800738e:	f000 fa0f 	bl	80077b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007396:	e1e5      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007398:	f107 030c 	add.w	r3, r7, #12
 800739c:	4618      	mov	r0, r3
 800739e:	f000 fb53 	bl	8007a48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073a6:	e1dd      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80073a8:	4b60      	ldr	r3, [pc, #384]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80073aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073b0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80073b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d102      	bne.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80073b8:	4b5d      	ldr	r3, [pc, #372]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80073bc:	e1d2      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80073be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073c4:	d102      	bne.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80073c6:	4b5b      	ldr	r3, [pc, #364]	; (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80073c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073ca:	e1cb      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80073cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073d2:	d102      	bne.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80073d4:	4b58      	ldr	r3, [pc, #352]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80073d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073d8:	e1c4      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073de:	e1c1      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80073e0:	4b56      	ldr	r3, [pc, #344]	; (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80073e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073e4:	e1be      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80073e6:	2300      	movs	r3, #0
 80073e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073ea:	bf00      	nop
 80073ec:	e1ba      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073f4:	d153      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80073f6:	4b4d      	ldr	r3, [pc, #308]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80073f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073fa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80073fe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007406:	d01f      	beq.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800740c:	d805      	bhi.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007412:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007416:	d00f      	beq.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007418:	e03d      	b.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800741a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800741e:	d037      	beq.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007420:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007424:	d018      	beq.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007426:	e036      	b.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800742c:	4618      	mov	r0, r3
 800742e:	f000 fc57 	bl	8007ce0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007436:	e195      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007438:	f107 0318 	add.w	r3, r7, #24
 800743c:	4618      	mov	r0, r3
 800743e:	f000 f9b7 	bl	80077b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007446:	e18d      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007448:	f107 030c 	add.w	r3, r7, #12
 800744c:	4618      	mov	r0, r3
 800744e:	f000 fafb 	bl	8007a48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007456:	e185      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007458:	4b34      	ldr	r3, [pc, #208]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800745a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800745c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007460:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007464:	2b00      	cmp	r3, #0
 8007466:	d102      	bne.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007468:	4b31      	ldr	r3, [pc, #196]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800746a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800746c:	e17a      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800746e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007470:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007474:	d102      	bne.n	800747c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007476:	4b2f      	ldr	r3, [pc, #188]	; (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007478:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800747a:	e173      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800747c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007482:	d102      	bne.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007484:	4b2c      	ldr	r3, [pc, #176]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007486:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007488:	e16c      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800748e:	e169      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007490:	4b2a      	ldr	r3, [pc, #168]	; (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007492:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007494:	e166      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800749a:	bf00      	nop
 800749c:	e162      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a4:	d15d      	bne.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80074a6:	4b21      	ldr	r3, [pc, #132]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80074a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074aa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80074ae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074b6:	d01f      	beq.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80074b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074bc:	d805      	bhi.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80074c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074c6:	d00f      	beq.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80074c8:	e047      	b.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80074ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80074ce:	d041      	beq.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80074d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074d4:	d018      	beq.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80074d6:	e040      	b.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 fbff 	bl	8007ce0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074e6:	e13d      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074e8:	f107 0318 	add.w	r3, r7, #24
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 f95f 	bl	80077b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074f6:	e135      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074f8:	f107 030c 	add.w	r3, r7, #12
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 faa3 	bl	8007a48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007506:	e12d      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007508:	4b08      	ldr	r3, [pc, #32]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800750a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800750c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007510:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007514:	2b00      	cmp	r3, #0
 8007516:	d102      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007518:	4b05      	ldr	r3, [pc, #20]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800751a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800751c:	e122      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800751e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007520:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007524:	d10c      	bne.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007526:	4b03      	ldr	r3, [pc, #12]	; (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007528:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800752a:	e11b      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800752c:	58024400 	.word	0x58024400
 8007530:	03d09000 	.word	0x03d09000
 8007534:	003d0900 	.word	0x003d0900
 8007538:	017d7840 	.word	0x017d7840
 800753c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007546:	d102      	bne.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007548:	4b89      	ldr	r3, [pc, #548]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800754a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800754c:	e10a      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800754e:	2300      	movs	r3, #0
 8007550:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007552:	e107      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007554:	4b87      	ldr	r3, [pc, #540]	; (8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007556:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007558:	e104      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800755a:	2300      	movs	r3, #0
 800755c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800755e:	bf00      	nop
 8007560:	e100      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007568:	d153      	bne.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800756a:	4b83      	ldr	r3, [pc, #524]	; (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800756c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800756e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007572:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800757a:	d01f      	beq.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800757c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007580:	d805      	bhi.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00a      	beq.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800758a:	d00f      	beq.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800758c:	e03d      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800758e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007592:	d037      	beq.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007594:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007598:	d018      	beq.n	80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800759a:	e036      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800759c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 fb9d 	bl	8007ce0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075aa:	e0db      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075ac:	f107 0318 	add.w	r3, r7, #24
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 f8fd 	bl	80077b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075ba:	e0d3      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075bc:	f107 030c 	add.w	r3, r7, #12
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 fa41 	bl	8007a48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075ca:	e0cb      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80075cc:	4b6a      	ldr	r3, [pc, #424]	; (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80075ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80075d4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80075d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d102      	bne.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80075dc:	4b67      	ldr	r3, [pc, #412]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80075de:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80075e0:	e0c0      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80075e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075e8:	d102      	bne.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80075ea:	4b65      	ldr	r3, [pc, #404]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80075ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075ee:	e0b9      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80075f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075f6:	d102      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80075f8:	4b5d      	ldr	r3, [pc, #372]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80075fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075fc:	e0b2      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007602:	e0af      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007604:	4b5b      	ldr	r3, [pc, #364]	; (8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007608:	e0ac      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800760e:	bf00      	nop
 8007610:	e0a8      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007618:	d13d      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800761a:	4b57      	ldr	r3, [pc, #348]	; (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800761c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800761e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007622:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800762a:	d00c      	beq.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800762c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007630:	d011      	beq.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007632:	2b00      	cmp	r3, #0
 8007634:	d12b      	bne.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007636:	f107 0318 	add.w	r3, r7, #24
 800763a:	4618      	mov	r0, r3
 800763c:	f000 f8b8 	bl	80077b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007644:	e08e      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007646:	f107 030c 	add.w	r3, r7, #12
 800764a:	4618      	mov	r0, r3
 800764c:	f000 f9fc 	bl	8007a48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007654:	e086      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007656:	4b48      	ldr	r3, [pc, #288]	; (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800765a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800765e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007662:	2b00      	cmp	r3, #0
 8007664:	d102      	bne.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007666:	4b45      	ldr	r3, [pc, #276]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007668:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800766a:	e07b      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800766c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007672:	d102      	bne.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007674:	4b42      	ldr	r3, [pc, #264]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007676:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007678:	e074      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800767a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007680:	d102      	bne.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007682:	4b3b      	ldr	r3, [pc, #236]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007684:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007686:	e06d      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007688:	2300      	movs	r3, #0
 800768a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800768c:	e06a      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800768e:	2300      	movs	r3, #0
 8007690:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007692:	bf00      	nop
 8007694:	e066      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800769c:	d11f      	bne.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800769e:	4b36      	ldr	r3, [pc, #216]	; (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80076a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076a6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80076a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80076ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b2:	d008      	beq.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80076b4:	e00f      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 fb10 	bl	8007ce0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076c4:	e04e      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076c6:	f107 0318 	add.w	r3, r7, #24
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 f870 	bl	80077b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076d4:	e046      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076da:	bf00      	nop
 80076dc:	e042      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076e4:	d13c      	bne.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80076e6:	4b24      	ldr	r3, [pc, #144]	; (8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80076e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ea:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80076ee:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80076f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076f6:	d01e      	beq.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 80076f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076fc:	d805      	bhi.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00d      	beq.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007706:	d00e      	beq.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007708:	e026      	b.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800770a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800770e:	d01d      	beq.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007710:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007714:	d01d      	beq.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007716:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800771a:	d014      	beq.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800771c:	e01c      	b.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800771e:	f000 f831 	bl	8007784 <HAL_RCCEx_GetD3PCLK1Freq>
 8007722:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007724:	e01e      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007726:	f107 0318 	add.w	r3, r7, #24
 800772a:	4618      	mov	r0, r3
 800772c:	f000 f840 	bl	80077b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007734:	e016      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007736:	f107 030c 	add.w	r3, r7, #12
 800773a:	4618      	mov	r0, r3
 800773c:	f000 f984 	bl	8007a48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007744:	e00e      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007746:	4b0d      	ldr	r3, [pc, #52]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007748:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800774a:	e00b      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800774c:	4b0c      	ldr	r3, [pc, #48]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800774e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007750:	e008      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007752:	4b07      	ldr	r3, [pc, #28]	; (8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007754:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007756:	e005      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800775c:	bf00      	nop
 800775e:	e001      	b.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8007760:	2300      	movs	r3, #0
 8007762:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007766:	4618      	mov	r0, r3
 8007768:	3740      	adds	r7, #64	; 0x40
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	017d7840 	.word	0x017d7840
 8007774:	00bb8000 	.word	0x00bb8000
 8007778:	58024400 	.word	0x58024400
 800777c:	03d09000 	.word	0x03d09000
 8007780:	003d0900 	.word	0x003d0900

08007784 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007788:	f7fe fe4a 	bl	8006420 <HAL_RCC_GetHCLKFreq>
 800778c:	4601      	mov	r1, r0
 800778e:	4b06      	ldr	r3, [pc, #24]	; (80077a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	091b      	lsrs	r3, r3, #4
 8007794:	f003 0307 	and.w	r3, r3, #7
 8007798:	4a04      	ldr	r2, [pc, #16]	; (80077ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800779a:	5cd3      	ldrb	r3, [r2, r3]
 800779c:	f003 031f 	and.w	r3, r3, #31
 80077a0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	58024400 	.word	0x58024400
 80077ac:	0800c04c 	.word	0x0800c04c

080077b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b089      	sub	sp, #36	; 0x24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077b8:	4b9d      	ldr	r3, [pc, #628]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077bc:	f003 0303 	and.w	r3, r3, #3
 80077c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80077c2:	4b9b      	ldr	r3, [pc, #620]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c6:	0b1b      	lsrs	r3, r3, #12
 80077c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80077ce:	4b98      	ldr	r3, [pc, #608]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d2:	091b      	lsrs	r3, r3, #4
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80077da:	4b95      	ldr	r3, [pc, #596]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077de:	08db      	lsrs	r3, r3, #3
 80077e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	fb02 f303 	mul.w	r3, r2, r3
 80077ea:	ee07 3a90 	vmov	s15, r3
 80077ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 810a 	beq.w	8007a12 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d05a      	beq.n	80078ba <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007804:	2b01      	cmp	r3, #1
 8007806:	d302      	bcc.n	800780e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007808:	2b02      	cmp	r3, #2
 800780a:	d078      	beq.n	80078fe <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800780c:	e099      	b.n	8007942 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800780e:	4b88      	ldr	r3, [pc, #544]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b00      	cmp	r3, #0
 8007818:	d02d      	beq.n	8007876 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800781a:	4b85      	ldr	r3, [pc, #532]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	08db      	lsrs	r3, r3, #3
 8007820:	f003 0303 	and.w	r3, r3, #3
 8007824:	4a83      	ldr	r2, [pc, #524]	; (8007a34 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007826:	fa22 f303 	lsr.w	r3, r2, r3
 800782a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	ee07 3a90 	vmov	s15, r3
 800783c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007840:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007844:	4b7a      	ldr	r3, [pc, #488]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784c:	ee07 3a90 	vmov	s15, r3
 8007850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007854:	ed97 6a03 	vldr	s12, [r7, #12]
 8007858:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800785c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007860:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007864:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007868:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007870:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007874:	e087      	b.n	8007986 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	ee07 3a90 	vmov	s15, r3
 800787c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007880:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007884:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007888:	4b69      	ldr	r3, [pc, #420]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800788a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007890:	ee07 3a90 	vmov	s15, r3
 8007894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007898:	ed97 6a03 	vldr	s12, [r7, #12]
 800789c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80078a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078b8:	e065      	b.n	8007986 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	ee07 3a90 	vmov	s15, r3
 80078c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80078c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078cc:	4b58      	ldr	r3, [pc, #352]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80078ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d4:	ee07 3a90 	vmov	s15, r3
 80078d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80078e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80078e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078fc:	e043      	b.n	8007986 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	ee07 3a90 	vmov	s15, r3
 8007904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007908:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800790c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007910:	4b47      	ldr	r3, [pc, #284]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007918:	ee07 3a90 	vmov	s15, r3
 800791c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007920:	ed97 6a03 	vldr	s12, [r7, #12]
 8007924:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007928:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800792c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007930:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800793c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007940:	e021      	b.n	8007986 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	ee07 3a90 	vmov	s15, r3
 8007948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007954:	4b36      	ldr	r3, [pc, #216]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800795c:	ee07 3a90 	vmov	s15, r3
 8007960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007964:	ed97 6a03 	vldr	s12, [r7, #12]
 8007968:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800796c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800797c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007980:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007984:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007986:	4b2a      	ldr	r3, [pc, #168]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798a:	0a5b      	lsrs	r3, r3, #9
 800798c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007990:	ee07 3a90 	vmov	s15, r3
 8007994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007998:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800799c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ac:	ee17 2a90 	vmov	r2, s15
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80079b4:	4b1e      	ldr	r3, [pc, #120]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b8:	0c1b      	lsrs	r3, r3, #16
 80079ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079be:	ee07 3a90 	vmov	s15, r3
 80079c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80079d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079da:	ee17 2a90 	vmov	r2, s15
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80079e2:	4b13      	ldr	r3, [pc, #76]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e6:	0e1b      	lsrs	r3, r3, #24
 80079e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ec:	ee07 3a90 	vmov	s15, r3
 80079f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a08:	ee17 2a90 	vmov	r2, s15
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007a10:	e008      	b.n	8007a24 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	609a      	str	r2, [r3, #8]
}
 8007a24:	bf00      	nop
 8007a26:	3724      	adds	r7, #36	; 0x24
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	58024400 	.word	0x58024400
 8007a34:	03d09000 	.word	0x03d09000
 8007a38:	46000000 	.word	0x46000000
 8007a3c:	4c742400 	.word	0x4c742400
 8007a40:	4a742400 	.word	0x4a742400
 8007a44:	4bbebc20 	.word	0x4bbebc20

08007a48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b089      	sub	sp, #36	; 0x24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a50:	4b9d      	ldr	r3, [pc, #628]	; (8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a54:	f003 0303 	and.w	r3, r3, #3
 8007a58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007a5a:	4b9b      	ldr	r3, [pc, #620]	; (8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5e:	0d1b      	lsrs	r3, r3, #20
 8007a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007a66:	4b98      	ldr	r3, [pc, #608]	; (8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6a:	0a1b      	lsrs	r3, r3, #8
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007a72:	4b95      	ldr	r3, [pc, #596]	; (8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a76:	08db      	lsrs	r3, r3, #3
 8007a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	fb02 f303 	mul.w	r3, r2, r3
 8007a82:	ee07 3a90 	vmov	s15, r3
 8007a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 810a 	beq.w	8007caa <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d05a      	beq.n	8007b52 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d302      	bcc.n	8007aa6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d078      	beq.n	8007b96 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007aa4:	e099      	b.n	8007bda <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007aa6:	4b88      	ldr	r3, [pc, #544]	; (8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0320 	and.w	r3, r3, #32
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d02d      	beq.n	8007b0e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ab2:	4b85      	ldr	r3, [pc, #532]	; (8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	08db      	lsrs	r3, r3, #3
 8007ab8:	f003 0303 	and.w	r3, r3, #3
 8007abc:	4a83      	ldr	r2, [pc, #524]	; (8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007abe:	fa22 f303 	lsr.w	r3, r2, r3
 8007ac2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	ee07 3a90 	vmov	s15, r3
 8007ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007adc:	4b7a      	ldr	r3, [pc, #488]	; (8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae4:	ee07 3a90 	vmov	s15, r3
 8007ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aec:	ed97 6a03 	vldr	s12, [r7, #12]
 8007af0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007af4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007af8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007afc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b08:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b0c:	e087      	b.n	8007c1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	ee07 3a90 	vmov	s15, r3
 8007b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b18:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007b1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b20:	4b69      	ldr	r3, [pc, #420]	; (8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b28:	ee07 3a90 	vmov	s15, r3
 8007b2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b30:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b34:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007b38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b50:	e065      	b.n	8007c1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	ee07 3a90 	vmov	s15, r3
 8007b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007b60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b64:	4b58      	ldr	r3, [pc, #352]	; (8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b6c:	ee07 3a90 	vmov	s15, r3
 8007b70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b74:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b78:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007b7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b94:	e043      	b.n	8007c1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	ee07 3a90 	vmov	s15, r3
 8007b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ba0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007cdc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007ba4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ba8:	4b47      	ldr	r3, [pc, #284]	; (8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb0:	ee07 3a90 	vmov	s15, r3
 8007bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bbc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007bc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bd8:	e021      	b.n	8007c1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	ee07 3a90 	vmov	s15, r3
 8007be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bec:	4b36      	ldr	r3, [pc, #216]	; (8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bf4:	ee07 3a90 	vmov	s15, r3
 8007bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c00:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007c04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c1c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007c1e:	4b2a      	ldr	r3, [pc, #168]	; (8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c22:	0a5b      	lsrs	r3, r3, #9
 8007c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c28:	ee07 3a90 	vmov	s15, r3
 8007c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c38:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c44:	ee17 2a90 	vmov	r2, s15
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007c4c:	4b1e      	ldr	r3, [pc, #120]	; (8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c50:	0c1b      	lsrs	r3, r3, #16
 8007c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c56:	ee07 3a90 	vmov	s15, r3
 8007c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c72:	ee17 2a90 	vmov	r2, s15
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007c7a:	4b13      	ldr	r3, [pc, #76]	; (8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7e:	0e1b      	lsrs	r3, r3, #24
 8007c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c84:	ee07 3a90 	vmov	s15, r3
 8007c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ca0:	ee17 2a90 	vmov	r2, s15
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ca8:	e008      	b.n	8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	609a      	str	r2, [r3, #8]
}
 8007cbc:	bf00      	nop
 8007cbe:	3724      	adds	r7, #36	; 0x24
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr
 8007cc8:	58024400 	.word	0x58024400
 8007ccc:	03d09000 	.word	0x03d09000
 8007cd0:	46000000 	.word	0x46000000
 8007cd4:	4c742400 	.word	0x4c742400
 8007cd8:	4a742400 	.word	0x4a742400
 8007cdc:	4bbebc20 	.word	0x4bbebc20

08007ce0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b089      	sub	sp, #36	; 0x24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ce8:	4b9d      	ldr	r3, [pc, #628]	; (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cec:	f003 0303 	and.w	r3, r3, #3
 8007cf0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007cf2:	4b9b      	ldr	r3, [pc, #620]	; (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf6:	091b      	lsrs	r3, r3, #4
 8007cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cfc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007cfe:	4b98      	ldr	r3, [pc, #608]	; (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007d08:	4b95      	ldr	r3, [pc, #596]	; (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0c:	08db      	lsrs	r3, r3, #3
 8007d0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	fb02 f303 	mul.w	r3, r2, r3
 8007d18:	ee07 3a90 	vmov	s15, r3
 8007d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d20:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f000 810a 	beq.w	8007f40 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d05a      	beq.n	8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d302      	bcc.n	8007d3c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d078      	beq.n	8007e2c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007d3a:	e099      	b.n	8007e70 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d3c:	4b88      	ldr	r3, [pc, #544]	; (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0320 	and.w	r3, r3, #32
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d02d      	beq.n	8007da4 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d48:	4b85      	ldr	r3, [pc, #532]	; (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	08db      	lsrs	r3, r3, #3
 8007d4e:	f003 0303 	and.w	r3, r3, #3
 8007d52:	4a84      	ldr	r2, [pc, #528]	; (8007f64 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007d54:	fa22 f303 	lsr.w	r3, r2, r3
 8007d58:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	ee07 3a90 	vmov	s15, r3
 8007d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	ee07 3a90 	vmov	s15, r3
 8007d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d72:	4b7b      	ldr	r3, [pc, #492]	; (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d7a:	ee07 3a90 	vmov	s15, r3
 8007d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007f68 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007da2:	e087      	b.n	8007eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	ee07 3a90 	vmov	s15, r3
 8007daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007f6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007db6:	4b6a      	ldr	r3, [pc, #424]	; (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dbe:	ee07 3a90 	vmov	s15, r3
 8007dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007f68 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007de6:	e065      	b.n	8007eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	ee07 3a90 	vmov	s15, r3
 8007dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dfa:	4b59      	ldr	r3, [pc, #356]	; (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e02:	ee07 3a90 	vmov	s15, r3
 8007e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007f68 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e2a:	e043      	b.n	8007eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	ee07 3a90 	vmov	s15, r3
 8007e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007f74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e3e:	4b48      	ldr	r3, [pc, #288]	; (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e46:	ee07 3a90 	vmov	s15, r3
 8007e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007f68 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e6e:	e021      	b.n	8007eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	ee07 3a90 	vmov	s15, r3
 8007e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007f70 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e82:	4b37      	ldr	r3, [pc, #220]	; (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e8a:	ee07 3a90 	vmov	s15, r3
 8007e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007f68 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007eb2:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007eb4:	4b2a      	ldr	r3, [pc, #168]	; (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb8:	0a5b      	lsrs	r3, r3, #9
 8007eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ebe:	ee07 3a90 	vmov	s15, r3
 8007ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007eca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ece:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eda:	ee17 2a90 	vmov	r2, s15
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007ee2:	4b1f      	ldr	r3, [pc, #124]	; (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee6:	0c1b      	lsrs	r3, r3, #16
 8007ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eec:	ee07 3a90 	vmov	s15, r3
 8007ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ef4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ef8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007efc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f08:	ee17 2a90 	vmov	r2, s15
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007f10:	4b13      	ldr	r3, [pc, #76]	; (8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f14:	0e1b      	lsrs	r3, r3, #24
 8007f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f1a:	ee07 3a90 	vmov	s15, r3
 8007f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f36:	ee17 2a90 	vmov	r2, s15
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007f3e:	e008      	b.n	8007f52 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	609a      	str	r2, [r3, #8]
}
 8007f52:	bf00      	nop
 8007f54:	3724      	adds	r7, #36	; 0x24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	58024400 	.word	0x58024400
 8007f64:	03d09000 	.word	0x03d09000
 8007f68:	46000000 	.word	0x46000000
 8007f6c:	4c742400 	.word	0x4c742400
 8007f70:	4a742400 	.word	0x4a742400
 8007f74:	4bbebc20 	.word	0x4bbebc20

08007f78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f86:	4b53      	ldr	r3, [pc, #332]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8007f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8a:	f003 0303 	and.w	r3, r3, #3
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d101      	bne.n	8007f96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e099      	b.n	80080ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007f96:	4b4f      	ldr	r3, [pc, #316]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a4e      	ldr	r2, [pc, #312]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8007f9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fa2:	f7fa f88d 	bl	80020c0 <HAL_GetTick>
 8007fa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fa8:	e008      	b.n	8007fbc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007faa:	f7fa f889 	bl	80020c0 <HAL_GetTick>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d901      	bls.n	8007fbc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e086      	b.n	80080ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fbc:	4b45      	ldr	r3, [pc, #276]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1f0      	bne.n	8007faa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007fc8:	4b42      	ldr	r3, [pc, #264]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8007fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fcc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	031b      	lsls	r3, r3, #12
 8007fd6:	493f      	ldr	r1, [pc, #252]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	628b      	str	r3, [r1, #40]	; 0x28
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	025b      	lsls	r3, r3, #9
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	041b      	lsls	r3, r3, #16
 8007ffa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ffe:	431a      	orrs	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	3b01      	subs	r3, #1
 8008006:	061b      	lsls	r3, r3, #24
 8008008:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800800c:	4931      	ldr	r1, [pc, #196]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 800800e:	4313      	orrs	r3, r2
 8008010:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008012:	4b30      	ldr	r3, [pc, #192]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008016:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	492d      	ldr	r1, [pc, #180]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008020:	4313      	orrs	r3, r2
 8008022:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008024:	4b2b      	ldr	r3, [pc, #172]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008028:	f023 0220 	bic.w	r2, r3, #32
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	4928      	ldr	r1, [pc, #160]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008032:	4313      	orrs	r3, r2
 8008034:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008036:	4b27      	ldr	r3, [pc, #156]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803a:	4a26      	ldr	r2, [pc, #152]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 800803c:	f023 0310 	bic.w	r3, r3, #16
 8008040:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008042:	4b24      	ldr	r3, [pc, #144]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008044:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008046:	4b24      	ldr	r3, [pc, #144]	; (80080d8 <RCCEx_PLL2_Config+0x160>)
 8008048:	4013      	ands	r3, r2
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	69d2      	ldr	r2, [r2, #28]
 800804e:	00d2      	lsls	r2, r2, #3
 8008050:	4920      	ldr	r1, [pc, #128]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008052:	4313      	orrs	r3, r2
 8008054:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008056:	4b1f      	ldr	r3, [pc, #124]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805a:	4a1e      	ldr	r2, [pc, #120]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 800805c:	f043 0310 	orr.w	r3, r3, #16
 8008060:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d106      	bne.n	8008076 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008068:	4b1a      	ldr	r3, [pc, #104]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 800806a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806c:	4a19      	ldr	r2, [pc, #100]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 800806e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008072:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008074:	e00f      	b.n	8008096 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d106      	bne.n	800808a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800807c:	4b15      	ldr	r3, [pc, #84]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 800807e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008080:	4a14      	ldr	r2, [pc, #80]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008086:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008088:	e005      	b.n	8008096 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800808a:	4b12      	ldr	r3, [pc, #72]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 800808c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808e:	4a11      	ldr	r2, [pc, #68]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008090:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008094:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008096:	4b0f      	ldr	r3, [pc, #60]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a0e      	ldr	r2, [pc, #56]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 800809c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080a2:	f7fa f80d 	bl	80020c0 <HAL_GetTick>
 80080a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080a8:	e008      	b.n	80080bc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80080aa:	f7fa f809 	bl	80020c0 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d901      	bls.n	80080bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e006      	b.n	80080ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080bc:	4b05      	ldr	r3, [pc, #20]	; (80080d4 <RCCEx_PLL2_Config+0x15c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d0f0      	beq.n	80080aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	58024400 	.word	0x58024400
 80080d8:	ffff0007 	.word	0xffff0007

080080dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080ea:	4b53      	ldr	r3, [pc, #332]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 80080ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ee:	f003 0303 	and.w	r3, r3, #3
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d101      	bne.n	80080fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e099      	b.n	800822e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80080fa:	4b4f      	ldr	r3, [pc, #316]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a4e      	ldr	r2, [pc, #312]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 8008100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008106:	f7f9 ffdb 	bl	80020c0 <HAL_GetTick>
 800810a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800810c:	e008      	b.n	8008120 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800810e:	f7f9 ffd7 	bl	80020c0 <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	2b02      	cmp	r3, #2
 800811a:	d901      	bls.n	8008120 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e086      	b.n	800822e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008120:	4b45      	ldr	r3, [pc, #276]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1f0      	bne.n	800810e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800812c:	4b42      	ldr	r3, [pc, #264]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 800812e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008130:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	051b      	lsls	r3, r3, #20
 800813a:	493f      	ldr	r1, [pc, #252]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 800813c:	4313      	orrs	r3, r2
 800813e:	628b      	str	r3, [r1, #40]	; 0x28
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	3b01      	subs	r3, #1
 8008146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	3b01      	subs	r3, #1
 8008150:	025b      	lsls	r3, r3, #9
 8008152:	b29b      	uxth	r3, r3
 8008154:	431a      	orrs	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	3b01      	subs	r3, #1
 800815c:	041b      	lsls	r3, r3, #16
 800815e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008162:	431a      	orrs	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	3b01      	subs	r3, #1
 800816a:	061b      	lsls	r3, r3, #24
 800816c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008170:	4931      	ldr	r1, [pc, #196]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 8008172:	4313      	orrs	r3, r2
 8008174:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008176:	4b30      	ldr	r3, [pc, #192]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 8008178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	492d      	ldr	r1, [pc, #180]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 8008184:	4313      	orrs	r3, r2
 8008186:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008188:	4b2b      	ldr	r3, [pc, #172]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 800818a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	4928      	ldr	r1, [pc, #160]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 8008196:	4313      	orrs	r3, r2
 8008198:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800819a:	4b27      	ldr	r3, [pc, #156]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 800819c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819e:	4a26      	ldr	r2, [pc, #152]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80081a6:	4b24      	ldr	r3, [pc, #144]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081aa:	4b24      	ldr	r3, [pc, #144]	; (800823c <RCCEx_PLL3_Config+0x160>)
 80081ac:	4013      	ands	r3, r2
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	69d2      	ldr	r2, [r2, #28]
 80081b2:	00d2      	lsls	r2, r2, #3
 80081b4:	4920      	ldr	r1, [pc, #128]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80081ba:	4b1f      	ldr	r3, [pc, #124]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081be:	4a1e      	ldr	r2, [pc, #120]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d106      	bne.n	80081da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80081cc:	4b1a      	ldr	r3, [pc, #104]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d0:	4a19      	ldr	r2, [pc, #100]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80081d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80081d8:	e00f      	b.n	80081fa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d106      	bne.n	80081ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80081e0:	4b15      	ldr	r3, [pc, #84]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e4:	4a14      	ldr	r2, [pc, #80]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80081ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80081ec:	e005      	b.n	80081fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80081ee:	4b12      	ldr	r3, [pc, #72]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f2:	4a11      	ldr	r2, [pc, #68]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80081fa:	4b0f      	ldr	r3, [pc, #60]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a0e      	ldr	r2, [pc, #56]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 8008200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008206:	f7f9 ff5b 	bl	80020c0 <HAL_GetTick>
 800820a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800820c:	e008      	b.n	8008220 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800820e:	f7f9 ff57 	bl	80020c0 <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	2b02      	cmp	r3, #2
 800821a:	d901      	bls.n	8008220 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e006      	b.n	800822e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008220:	4b05      	ldr	r3, [pc, #20]	; (8008238 <RCCEx_PLL3_Config+0x15c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d0f0      	beq.n	800820e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800822c:	7bfb      	ldrb	r3, [r7, #15]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	58024400 	.word	0x58024400
 800823c:	ffff0007 	.word	0xffff0007

08008240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e01d      	b.n	800828e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d106      	bne.n	800826c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f7f9 fc18 	bl	8001a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2202      	movs	r2, #2
 8008270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3304      	adds	r3, #4
 800827c:	4619      	mov	r1, r3
 800827e:	4610      	mov	r0, r2
 8008280:	f000 fa4c 	bl	800871c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
	...

08008298 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68da      	ldr	r2, [r3, #12]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f042 0201 	orr.w	r2, r2, #1
 80082ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	689a      	ldr	r2, [r3, #8]
 80082b6:	4b0c      	ldr	r3, [pc, #48]	; (80082e8 <HAL_TIM_Base_Start_IT+0x50>)
 80082b8:	4013      	ands	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2b06      	cmp	r3, #6
 80082c0:	d00b      	beq.n	80082da <HAL_TIM_Base_Start_IT+0x42>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082c8:	d007      	beq.n	80082da <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f042 0201 	orr.w	r2, r2, #1
 80082d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	00010007 	.word	0x00010007

080082ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d122      	bne.n	8008348 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	f003 0302 	and.w	r3, r3, #2
 800830c:	2b02      	cmp	r3, #2
 800830e:	d11b      	bne.n	8008348 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f06f 0202 	mvn.w	r2, #2
 8008318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	f003 0303 	and.w	r3, r3, #3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f9d6 	bl	80086e0 <HAL_TIM_IC_CaptureCallback>
 8008334:	e005      	b.n	8008342 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f9c8 	bl	80086cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 f9d9 	bl	80086f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	f003 0304 	and.w	r3, r3, #4
 8008352:	2b04      	cmp	r3, #4
 8008354:	d122      	bne.n	800839c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	f003 0304 	and.w	r3, r3, #4
 8008360:	2b04      	cmp	r3, #4
 8008362:	d11b      	bne.n	800839c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f06f 0204 	mvn.w	r2, #4
 800836c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2202      	movs	r2, #2
 8008372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f9ac 	bl	80086e0 <HAL_TIM_IC_CaptureCallback>
 8008388:	e005      	b.n	8008396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f99e 	bl	80086cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f9af 	bl	80086f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	f003 0308 	and.w	r3, r3, #8
 80083a6:	2b08      	cmp	r3, #8
 80083a8:	d122      	bne.n	80083f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	f003 0308 	and.w	r3, r3, #8
 80083b4:	2b08      	cmp	r3, #8
 80083b6:	d11b      	bne.n	80083f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f06f 0208 	mvn.w	r2, #8
 80083c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2204      	movs	r2, #4
 80083c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	69db      	ldr	r3, [r3, #28]
 80083ce:	f003 0303 	and.w	r3, r3, #3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f982 	bl	80086e0 <HAL_TIM_IC_CaptureCallback>
 80083dc:	e005      	b.n	80083ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f974 	bl	80086cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f985 	bl	80086f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f003 0310 	and.w	r3, r3, #16
 80083fa:	2b10      	cmp	r3, #16
 80083fc:	d122      	bne.n	8008444 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	f003 0310 	and.w	r3, r3, #16
 8008408:	2b10      	cmp	r3, #16
 800840a:	d11b      	bne.n	8008444 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f06f 0210 	mvn.w	r2, #16
 8008414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2208      	movs	r2, #8
 800841a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f958 	bl	80086e0 <HAL_TIM_IC_CaptureCallback>
 8008430:	e005      	b.n	800843e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f94a 	bl	80086cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f95b 	bl	80086f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	2b01      	cmp	r3, #1
 8008450:	d10e      	bne.n	8008470 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	2b01      	cmp	r3, #1
 800845e:	d107      	bne.n	8008470 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f06f 0201 	mvn.w	r2, #1
 8008468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7f8 fb3c 	bl	8000ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800847a:	2b80      	cmp	r3, #128	; 0x80
 800847c:	d10e      	bne.n	800849c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008488:	2b80      	cmp	r3, #128	; 0x80
 800848a:	d107      	bne.n	800849c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fb0a 	bl	8008ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084aa:	d10e      	bne.n	80084ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084b6:	2b80      	cmp	r3, #128	; 0x80
 80084b8:	d107      	bne.n	80084ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80084c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fafd 	bl	8008ac4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d4:	2b40      	cmp	r3, #64	; 0x40
 80084d6:	d10e      	bne.n	80084f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e2:	2b40      	cmp	r3, #64	; 0x40
 80084e4:	d107      	bne.n	80084f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f909 	bl	8008708 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	f003 0320 	and.w	r3, r3, #32
 8008500:	2b20      	cmp	r3, #32
 8008502:	d10e      	bne.n	8008522 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f003 0320 	and.w	r3, r3, #32
 800850e:	2b20      	cmp	r3, #32
 8008510:	d107      	bne.n	8008522 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f06f 0220 	mvn.w	r2, #32
 800851a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 fabd 	bl	8008a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008522:	bf00      	nop
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
	...

0800852c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800853c:	2b01      	cmp	r3, #1
 800853e:	d101      	bne.n	8008544 <HAL_TIM_ConfigClockSource+0x18>
 8008540:	2302      	movs	r3, #2
 8008542:	e0b7      	b.n	80086b4 <HAL_TIM_ConfigClockSource+0x188>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2202      	movs	r2, #2
 8008550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	4b57      	ldr	r3, [pc, #348]	; (80086bc <HAL_TIM_ConfigClockSource+0x190>)
 8008560:	4013      	ands	r3, r2
 8008562:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800856a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b70      	cmp	r3, #112	; 0x70
 800857a:	d02e      	beq.n	80085da <HAL_TIM_ConfigClockSource+0xae>
 800857c:	2b70      	cmp	r3, #112	; 0x70
 800857e:	d812      	bhi.n	80085a6 <HAL_TIM_ConfigClockSource+0x7a>
 8008580:	2b30      	cmp	r3, #48	; 0x30
 8008582:	f000 8084 	beq.w	800868e <HAL_TIM_ConfigClockSource+0x162>
 8008586:	2b30      	cmp	r3, #48	; 0x30
 8008588:	d806      	bhi.n	8008598 <HAL_TIM_ConfigClockSource+0x6c>
 800858a:	2b10      	cmp	r3, #16
 800858c:	d07f      	beq.n	800868e <HAL_TIM_ConfigClockSource+0x162>
 800858e:	2b20      	cmp	r3, #32
 8008590:	d07d      	beq.n	800868e <HAL_TIM_ConfigClockSource+0x162>
 8008592:	2b00      	cmp	r3, #0
 8008594:	d07b      	beq.n	800868e <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008596:	e084      	b.n	80086a2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008598:	2b50      	cmp	r3, #80	; 0x50
 800859a:	d048      	beq.n	800862e <HAL_TIM_ConfigClockSource+0x102>
 800859c:	2b60      	cmp	r3, #96	; 0x60
 800859e:	d056      	beq.n	800864e <HAL_TIM_ConfigClockSource+0x122>
 80085a0:	2b40      	cmp	r3, #64	; 0x40
 80085a2:	d064      	beq.n	800866e <HAL_TIM_ConfigClockSource+0x142>
      break;
 80085a4:	e07d      	b.n	80086a2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80085a6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80085aa:	d070      	beq.n	800868e <HAL_TIM_ConfigClockSource+0x162>
 80085ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80085b0:	d809      	bhi.n	80085c6 <HAL_TIM_ConfigClockSource+0x9a>
 80085b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085b6:	d027      	beq.n	8008608 <HAL_TIM_ConfigClockSource+0xdc>
 80085b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085bc:	d067      	beq.n	800868e <HAL_TIM_ConfigClockSource+0x162>
 80085be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085c2:	d06d      	beq.n	80086a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80085c4:	e06d      	b.n	80086a2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80085c6:	4a3e      	ldr	r2, [pc, #248]	; (80086c0 <HAL_TIM_ConfigClockSource+0x194>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d060      	beq.n	800868e <HAL_TIM_ConfigClockSource+0x162>
 80085cc:	4a3d      	ldr	r2, [pc, #244]	; (80086c4 <HAL_TIM_ConfigClockSource+0x198>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d05d      	beq.n	800868e <HAL_TIM_ConfigClockSource+0x162>
 80085d2:	4a3d      	ldr	r2, [pc, #244]	; (80086c8 <HAL_TIM_ConfigClockSource+0x19c>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d05a      	beq.n	800868e <HAL_TIM_ConfigClockSource+0x162>
      break;
 80085d8:	e063      	b.n	80086a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6818      	ldr	r0, [r3, #0]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	6899      	ldr	r1, [r3, #8]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	f000 f9af 	bl	800894c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	609a      	str	r2, [r3, #8]
      break;
 8008606:	e04c      	b.n	80086a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6818      	ldr	r0, [r3, #0]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	6899      	ldr	r1, [r3, #8]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f000 f998 	bl	800894c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	689a      	ldr	r2, [r3, #8]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800862a:	609a      	str	r2, [r3, #8]
      break;
 800862c:	e039      	b.n	80086a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6818      	ldr	r0, [r3, #0]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	6859      	ldr	r1, [r3, #4]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	461a      	mov	r2, r3
 800863c:	f000 f908 	bl	8008850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2150      	movs	r1, #80	; 0x50
 8008646:	4618      	mov	r0, r3
 8008648:	f000 f962 	bl	8008910 <TIM_ITRx_SetConfig>
      break;
 800864c:	e029      	b.n	80086a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6818      	ldr	r0, [r3, #0]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	6859      	ldr	r1, [r3, #4]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	461a      	mov	r2, r3
 800865c:	f000 f927 	bl	80088ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2160      	movs	r1, #96	; 0x60
 8008666:	4618      	mov	r0, r3
 8008668:	f000 f952 	bl	8008910 <TIM_ITRx_SetConfig>
      break;
 800866c:	e019      	b.n	80086a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6818      	ldr	r0, [r3, #0]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	6859      	ldr	r1, [r3, #4]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	461a      	mov	r2, r3
 800867c:	f000 f8e8 	bl	8008850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2140      	movs	r1, #64	; 0x40
 8008686:	4618      	mov	r0, r3
 8008688:	f000 f942 	bl	8008910 <TIM_ITRx_SetConfig>
      break;
 800868c:	e009      	b.n	80086a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4619      	mov	r1, r3
 8008698:	4610      	mov	r0, r2
 800869a:	f000 f939 	bl	8008910 <TIM_ITRx_SetConfig>
      break;
 800869e:	e000      	b.n	80086a2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80086a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	ffceff88 	.word	0xffceff88
 80086c0:	00100030 	.word	0x00100030
 80086c4:	00100040 	.word	0x00100040
 80086c8:	00100020 	.word	0x00100020

080086cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a40      	ldr	r2, [pc, #256]	; (8008830 <TIM_Base_SetConfig+0x114>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d013      	beq.n	800875c <TIM_Base_SetConfig+0x40>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800873a:	d00f      	beq.n	800875c <TIM_Base_SetConfig+0x40>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a3d      	ldr	r2, [pc, #244]	; (8008834 <TIM_Base_SetConfig+0x118>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d00b      	beq.n	800875c <TIM_Base_SetConfig+0x40>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a3c      	ldr	r2, [pc, #240]	; (8008838 <TIM_Base_SetConfig+0x11c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d007      	beq.n	800875c <TIM_Base_SetConfig+0x40>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a3b      	ldr	r2, [pc, #236]	; (800883c <TIM_Base_SetConfig+0x120>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d003      	beq.n	800875c <TIM_Base_SetConfig+0x40>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a3a      	ldr	r2, [pc, #232]	; (8008840 <TIM_Base_SetConfig+0x124>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d108      	bne.n	800876e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	4313      	orrs	r3, r2
 800876c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a2f      	ldr	r2, [pc, #188]	; (8008830 <TIM_Base_SetConfig+0x114>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d01f      	beq.n	80087b6 <TIM_Base_SetConfig+0x9a>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800877c:	d01b      	beq.n	80087b6 <TIM_Base_SetConfig+0x9a>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a2c      	ldr	r2, [pc, #176]	; (8008834 <TIM_Base_SetConfig+0x118>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d017      	beq.n	80087b6 <TIM_Base_SetConfig+0x9a>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a2b      	ldr	r2, [pc, #172]	; (8008838 <TIM_Base_SetConfig+0x11c>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d013      	beq.n	80087b6 <TIM_Base_SetConfig+0x9a>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a2a      	ldr	r2, [pc, #168]	; (800883c <TIM_Base_SetConfig+0x120>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d00f      	beq.n	80087b6 <TIM_Base_SetConfig+0x9a>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a29      	ldr	r2, [pc, #164]	; (8008840 <TIM_Base_SetConfig+0x124>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d00b      	beq.n	80087b6 <TIM_Base_SetConfig+0x9a>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a28      	ldr	r2, [pc, #160]	; (8008844 <TIM_Base_SetConfig+0x128>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d007      	beq.n	80087b6 <TIM_Base_SetConfig+0x9a>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a27      	ldr	r2, [pc, #156]	; (8008848 <TIM_Base_SetConfig+0x12c>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d003      	beq.n	80087b6 <TIM_Base_SetConfig+0x9a>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a26      	ldr	r2, [pc, #152]	; (800884c <TIM_Base_SetConfig+0x130>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d108      	bne.n	80087c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	689a      	ldr	r2, [r3, #8]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a10      	ldr	r2, [pc, #64]	; (8008830 <TIM_Base_SetConfig+0x114>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d00f      	beq.n	8008814 <TIM_Base_SetConfig+0xf8>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a12      	ldr	r2, [pc, #72]	; (8008840 <TIM_Base_SetConfig+0x124>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d00b      	beq.n	8008814 <TIM_Base_SetConfig+0xf8>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a11      	ldr	r2, [pc, #68]	; (8008844 <TIM_Base_SetConfig+0x128>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d007      	beq.n	8008814 <TIM_Base_SetConfig+0xf8>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a10      	ldr	r2, [pc, #64]	; (8008848 <TIM_Base_SetConfig+0x12c>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d003      	beq.n	8008814 <TIM_Base_SetConfig+0xf8>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a0f      	ldr	r2, [pc, #60]	; (800884c <TIM_Base_SetConfig+0x130>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d103      	bne.n	800881c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	691a      	ldr	r2, [r3, #16]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	615a      	str	r2, [r3, #20]
}
 8008822:	bf00      	nop
 8008824:	3714      	adds	r7, #20
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	40010000 	.word	0x40010000
 8008834:	40000400 	.word	0x40000400
 8008838:	40000800 	.word	0x40000800
 800883c:	40000c00 	.word	0x40000c00
 8008840:	40010400 	.word	0x40010400
 8008844:	40014000 	.word	0x40014000
 8008848:	40014400 	.word	0x40014400
 800884c:	40014800 	.word	0x40014800

08008850 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008850:	b480      	push	{r7}
 8008852:	b087      	sub	sp, #28
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6a1b      	ldr	r3, [r3, #32]
 8008860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	f023 0201 	bic.w	r2, r3, #1
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800887a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	011b      	lsls	r3, r3, #4
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	4313      	orrs	r3, r2
 8008884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f023 030a 	bic.w	r3, r3, #10
 800888c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	4313      	orrs	r3, r2
 8008894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	621a      	str	r2, [r3, #32]
}
 80088a2:	bf00      	nop
 80088a4:	371c      	adds	r7, #28
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b087      	sub	sp, #28
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	60f8      	str	r0, [r7, #12]
 80088b6:	60b9      	str	r1, [r7, #8]
 80088b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	f023 0210 	bic.w	r2, r3, #16
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6a1b      	ldr	r3, [r3, #32]
 80088d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	031b      	lsls	r3, r3, #12
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	011b      	lsls	r3, r3, #4
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	697a      	ldr	r2, [r7, #20]
 80088fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	621a      	str	r2, [r3, #32]
}
 8008902:	bf00      	nop
 8008904:	371c      	adds	r7, #28
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
	...

08008910 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	4b09      	ldr	r3, [pc, #36]	; (8008948 <TIM_ITRx_SetConfig+0x38>)
 8008924:	4013      	ands	r3, r2
 8008926:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008928:	683a      	ldr	r2, [r7, #0]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	4313      	orrs	r3, r2
 800892e:	f043 0307 	orr.w	r3, r3, #7
 8008932:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	609a      	str	r2, [r3, #8]
}
 800893a:	bf00      	nop
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	ffcfff8f 	.word	0xffcfff8f

0800894c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800894c:	b480      	push	{r7}
 800894e:	b087      	sub	sp, #28
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
 8008958:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008966:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	021a      	lsls	r2, r3, #8
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	431a      	orrs	r2, r3
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	4313      	orrs	r3, r2
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	4313      	orrs	r3, r2
 8008978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	609a      	str	r2, [r3, #8]
}
 8008980:	bf00      	nop
 8008982:	371c      	adds	r7, #28
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800899c:	2b01      	cmp	r3, #1
 800899e:	d101      	bne.n	80089a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089a0:	2302      	movs	r3, #2
 80089a2:	e068      	b.n	8008a76 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2202      	movs	r2, #2
 80089b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a2e      	ldr	r2, [pc, #184]	; (8008a84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d004      	beq.n	80089d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a2d      	ldr	r2, [pc, #180]	; (8008a88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d108      	bne.n	80089ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80089de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a1e      	ldr	r2, [pc, #120]	; (8008a84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d01d      	beq.n	8008a4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a16:	d018      	beq.n	8008a4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a1b      	ldr	r2, [pc, #108]	; (8008a8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d013      	beq.n	8008a4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a1a      	ldr	r2, [pc, #104]	; (8008a90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d00e      	beq.n	8008a4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a18      	ldr	r2, [pc, #96]	; (8008a94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d009      	beq.n	8008a4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a13      	ldr	r2, [pc, #76]	; (8008a88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d004      	beq.n	8008a4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a14      	ldr	r2, [pc, #80]	; (8008a98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d10c      	bne.n	8008a64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	40010000 	.word	0x40010000
 8008a88:	40010400 	.word	0x40010400
 8008a8c:	40000400 	.word	0x40000400
 8008a90:	40000800 	.word	0x40000800
 8008a94:	40000c00 	.word	0x40000c00
 8008a98:	40001800 	.word	0x40001800

08008a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e042      	b.n	8008b70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d106      	bne.n	8008b02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7f9 f833 	bl	8001b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2224      	movs	r2, #36	; 0x24
 8008b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f022 0201 	bic.w	r2, r2, #1
 8008b18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fb14 	bl	8009148 <UART_SetConfig>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d101      	bne.n	8008b2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e022      	b.n	8008b70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d002      	beq.n	8008b38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f002 fc86 	bl	800b444 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	689a      	ldr	r2, [r3, #8]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0201 	orr.w	r2, r2, #1
 8008b66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f002 fd0d 	bl	800b588 <UART_CheckIdleState>
 8008b6e:	4603      	mov	r3, r0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	4613      	mov	r3, r2
 8008b84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b8c:	2b20      	cmp	r3, #32
 8008b8e:	d168      	bne.n	8008c62 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d002      	beq.n	8008b9c <HAL_UART_Transmit_IT+0x24>
 8008b96:	88fb      	ldrh	r3, [r7, #6]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d101      	bne.n	8008ba0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e061      	b.n	8008c64 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d101      	bne.n	8008bae <HAL_UART_Transmit_IT+0x36>
 8008baa:	2302      	movs	r3, #2
 8008bac:	e05a      	b.n	8008c64 <HAL_UART_Transmit_IT+0xec>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	88fa      	ldrh	r2, [r7, #6]
 8008bc0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	88fa      	ldrh	r2, [r7, #6]
 8008bc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2221      	movs	r2, #33	; 0x21
 8008bde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bea:	d11c      	bne.n	8008c26 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bf4:	d107      	bne.n	8008c06 <HAL_UART_Transmit_IT+0x8e>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d103      	bne.n	8008c06 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	4a1b      	ldr	r2, [pc, #108]	; (8008c70 <HAL_UART_Transmit_IT+0xf8>)
 8008c02:	671a      	str	r2, [r3, #112]	; 0x70
 8008c04:	e002      	b.n	8008c0c <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	4a1a      	ldr	r2, [pc, #104]	; (8008c74 <HAL_UART_Transmit_IT+0xfc>)
 8008c0a:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	689a      	ldr	r2, [r3, #8]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008c22:	609a      	str	r2, [r3, #8]
 8008c24:	e01b      	b.n	8008c5e <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c2e:	d107      	bne.n	8008c40 <HAL_UART_Transmit_IT+0xc8>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d103      	bne.n	8008c40 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	4a0f      	ldr	r2, [pc, #60]	; (8008c78 <HAL_UART_Transmit_IT+0x100>)
 8008c3c:	671a      	str	r2, [r3, #112]	; 0x70
 8008c3e:	e002      	b.n	8008c46 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4a0e      	ldr	r2, [pc, #56]	; (8008c7c <HAL_UART_Transmit_IT+0x104>)
 8008c44:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c5c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	e000      	b.n	8008c64 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8008c62:	2302      	movs	r3, #2
  }
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	0800b919 	.word	0x0800b919
 8008c74:	0800b87f 	.word	0x0800b87f
 8008c78:	0800b801 	.word	0x0800b801
 8008c7c:	0800b78d 	.word	0x0800b78d

08008c80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c94:	2b20      	cmp	r3, #32
 8008c96:	f040 80bc 	bne.w	8008e12 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <HAL_UART_Receive_IT+0x26>
 8008ca0:	88fb      	ldrh	r3, [r7, #6]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e0b4      	b.n	8008e14 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d101      	bne.n	8008cb8 <HAL_UART_Receive_IT+0x38>
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	e0ad      	b.n	8008e14 <HAL_UART_Receive_IT+0x194>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	88fa      	ldrh	r2, [r7, #6]
 8008cca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	88fa      	ldrh	r2, [r7, #6]
 8008cd2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ce4:	d10e      	bne.n	8008d04 <HAL_UART_Receive_IT+0x84>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d105      	bne.n	8008cfa <HAL_UART_Receive_IT+0x7a>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008cf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cf8:	e02d      	b.n	8008d56 <HAL_UART_Receive_IT+0xd6>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	22ff      	movs	r2, #255	; 0xff
 8008cfe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d02:	e028      	b.n	8008d56 <HAL_UART_Receive_IT+0xd6>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10d      	bne.n	8008d28 <HAL_UART_Receive_IT+0xa8>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d104      	bne.n	8008d1e <HAL_UART_Receive_IT+0x9e>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	22ff      	movs	r2, #255	; 0xff
 8008d18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d1c:	e01b      	b.n	8008d56 <HAL_UART_Receive_IT+0xd6>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	227f      	movs	r2, #127	; 0x7f
 8008d22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d26:	e016      	b.n	8008d56 <HAL_UART_Receive_IT+0xd6>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d30:	d10d      	bne.n	8008d4e <HAL_UART_Receive_IT+0xce>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d104      	bne.n	8008d44 <HAL_UART_Receive_IT+0xc4>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	227f      	movs	r2, #127	; 0x7f
 8008d3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d42:	e008      	b.n	8008d56 <HAL_UART_Receive_IT+0xd6>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	223f      	movs	r2, #63	; 0x3f
 8008d48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d4c:	e003      	b.n	8008d56 <HAL_UART_Receive_IT+0xd6>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2222      	movs	r2, #34	; 0x22
 8008d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	689a      	ldr	r2, [r3, #8]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f042 0201 	orr.w	r2, r2, #1
 8008d74:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d7e:	d12a      	bne.n	8008dd6 <HAL_UART_Receive_IT+0x156>
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d86:	88fa      	ldrh	r2, [r7, #6]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d324      	bcc.n	8008dd6 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d94:	d107      	bne.n	8008da6 <HAL_UART_Receive_IT+0x126>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d103      	bne.n	8008da6 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	4a1f      	ldr	r2, [pc, #124]	; (8008e20 <HAL_UART_Receive_IT+0x1a0>)
 8008da2:	66da      	str	r2, [r3, #108]	; 0x6c
 8008da4:	e002      	b.n	8008dac <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	4a1e      	ldr	r2, [pc, #120]	; (8008e24 <HAL_UART_Receive_IT+0x1a4>)
 8008daa:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dc2:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	689a      	ldr	r2, [r3, #8]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008dd2:	609a      	str	r2, [r3, #8]
 8008dd4:	e01b      	b.n	8008e0e <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dde:	d107      	bne.n	8008df0 <HAL_UART_Receive_IT+0x170>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d103      	bne.n	8008df0 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	4a0f      	ldr	r2, [pc, #60]	; (8008e28 <HAL_UART_Receive_IT+0x1a8>)
 8008dec:	66da      	str	r2, [r3, #108]	; 0x6c
 8008dee:	e002      	b.n	8008df6 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	4a0e      	ldr	r2, [pc, #56]	; (8008e2c <HAL_UART_Receive_IT+0x1ac>)
 8008df4:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008e0c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	e000      	b.n	8008e14 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8008e12:	2302      	movs	r3, #2
  }
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr
 8008e20:	0800bc4d 	.word	0x0800bc4d
 8008e24:	0800bb45 	.word	0x0800bb45
 8008e28:	0800ba9b 	.word	0x0800ba9b
 8008e2c:	0800b9f1 	.word	0x0800b9f1

08008e30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b088      	sub	sp, #32
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e50:	69fa      	ldr	r2, [r7, #28]
 8008e52:	f640 030f 	movw	r3, #2063	; 0x80f
 8008e56:	4013      	ands	r3, r2
 8008e58:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d118      	bne.n	8008e92 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	f003 0320 	and.w	r3, r3, #32
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d013      	beq.n	8008e92 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	f003 0320 	and.w	r3, r3, #32
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d104      	bne.n	8008e7e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d009      	beq.n	8008e92 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f000 8145 	beq.w	8009112 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	4798      	blx	r3
      }
      return;
 8008e90:	e13f      	b.n	8009112 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f000 80e8 	beq.w	800906a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	4ba1      	ldr	r3, [pc, #644]	; (8009124 <HAL_UART_IRQHandler+0x2f4>)
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d105      	bne.n	8008eb0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008ea4:	69ba      	ldr	r2, [r7, #24]
 8008ea6:	4ba0      	ldr	r3, [pc, #640]	; (8009128 <HAL_UART_IRQHandler+0x2f8>)
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f000 80dd 	beq.w	800906a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d010      	beq.n	8008edc <HAL_UART_IRQHandler+0xac>
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00b      	beq.n	8008edc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ed2:	f043 0201 	orr.w	r2, r3, #1
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	f003 0302 	and.w	r3, r3, #2
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d010      	beq.n	8008f08 <HAL_UART_IRQHandler+0xd8>
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00b      	beq.n	8008f08 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008efe:	f043 0204 	orr.w	r2, r3, #4
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	f003 0304 	and.w	r3, r3, #4
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d010      	beq.n	8008f34 <HAL_UART_IRQHandler+0x104>
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	f003 0301 	and.w	r3, r3, #1
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00b      	beq.n	8008f34 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2204      	movs	r2, #4
 8008f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f2a:	f043 0202 	orr.w	r2, r3, #2
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	f003 0308 	and.w	r3, r3, #8
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d015      	beq.n	8008f6a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	f003 0320 	and.w	r3, r3, #32
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d104      	bne.n	8008f52 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	4b76      	ldr	r3, [pc, #472]	; (8009124 <HAL_UART_IRQHandler+0x2f4>)
 8008f4c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00b      	beq.n	8008f6a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2208      	movs	r2, #8
 8008f58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f60:	f043 0208 	orr.w	r2, r3, #8
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d011      	beq.n	8008f98 <HAL_UART_IRQHandler+0x168>
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00c      	beq.n	8008f98 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f8e:	f043 0220 	orr.w	r2, r3, #32
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 80b9 	beq.w	8009116 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	f003 0320 	and.w	r3, r3, #32
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d011      	beq.n	8008fd2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	f003 0320 	and.w	r3, r3, #32
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d104      	bne.n	8008fc2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d007      	beq.n	8008fd2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fd8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe4:	2b40      	cmp	r3, #64	; 0x40
 8008fe6:	d004      	beq.n	8008ff2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d031      	beq.n	8009056 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f002 fb90 	bl	800b718 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009002:	2b40      	cmp	r3, #64	; 0x40
 8009004:	d123      	bne.n	800904e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	689a      	ldr	r2, [r3, #8]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009014:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800901a:	2b00      	cmp	r3, #0
 800901c:	d013      	beq.n	8009046 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009022:	4a42      	ldr	r2, [pc, #264]	; (800912c <HAL_UART_IRQHandler+0x2fc>)
 8009024:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800902a:	4618      	mov	r0, r3
 800902c:	f7fa fd30 	bl	8003a90 <HAL_DMA_Abort_IT>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d017      	beq.n	8009066 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800903a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009040:	4610      	mov	r0, r2
 8009042:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009044:	e00f      	b.n	8009066 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f872 	bl	8009130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800904c:	e00b      	b.n	8009066 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f86e 	bl	8009130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009054:	e007      	b.n	8009066 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f86a 	bl	8009130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009064:	e057      	b.n	8009116 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009066:	bf00      	nop
    return;
 8009068:	e055      	b.n	8009116 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00d      	beq.n	8009090 <HAL_UART_IRQHandler+0x260>
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d008      	beq.n	8009090 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009086:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f002 fe63 	bl	800bd54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800908e:	e045      	b.n	800911c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009096:	2b00      	cmp	r3, #0
 8009098:	d012      	beq.n	80090c0 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d104      	bne.n	80090ae <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d008      	beq.n	80090c0 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d031      	beq.n	800911a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	4798      	blx	r3
    }
    return;
 80090be:	e02c      	b.n	800911a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d008      	beq.n	80090dc <HAL_UART_IRQHandler+0x2ac>
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d003      	beq.n	80090dc <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f002 fc71 	bl	800b9bc <UART_EndTransmit_IT>
    return;
 80090da:	e01f      	b.n	800911c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d008      	beq.n	80090f8 <HAL_UART_IRQHandler+0x2c8>
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d003      	beq.n	80090f8 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f002 fe43 	bl	800bd7c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090f6:	e011      	b.n	800911c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00c      	beq.n	800911c <HAL_UART_IRQHandler+0x2ec>
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	2b00      	cmp	r3, #0
 8009106:	da09      	bge.n	800911c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f002 fe2d 	bl	800bd68 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800910e:	bf00      	nop
 8009110:	e004      	b.n	800911c <HAL_UART_IRQHandler+0x2ec>
      return;
 8009112:	bf00      	nop
 8009114:	e002      	b.n	800911c <HAL_UART_IRQHandler+0x2ec>
    return;
 8009116:	bf00      	nop
 8009118:	e000      	b.n	800911c <HAL_UART_IRQHandler+0x2ec>
    return;
 800911a:	bf00      	nop
  }
}
 800911c:	3720      	adds	r7, #32
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	10000001 	.word	0x10000001
 8009128:	04000120 	.word	0x04000120
 800912c:	0800b761 	.word	0x0800b761

08009130 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr
 8009144:	0000      	movs	r0, r0
	...

08009148 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009148:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800914c:	b090      	sub	sp, #64	; 0x40
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009152:	2300      	movs	r3, #0
 8009154:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800915c:	2300      	movs	r3, #0
 800915e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689a      	ldr	r2, [r3, #8]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	431a      	orrs	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	431a      	orrs	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	69db      	ldr	r3, [r3, #28]
 8009174:	4313      	orrs	r3, r2
 8009176:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800917c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800917e:	4313      	orrs	r3, r2
 8009180:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	4bc1      	ldr	r3, [pc, #772]	; (8009490 <UART_SetConfig+0x348>)
 800918a:	4013      	ands	r3, r2
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	6812      	ldr	r2, [r2, #0]
 8009190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009192:	430b      	orrs	r3, r1
 8009194:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	68da      	ldr	r2, [r3, #12]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	430a      	orrs	r2, r1
 80091aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	699b      	ldr	r3, [r3, #24]
 80091b0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4ab7      	ldr	r2, [pc, #732]	; (8009494 <UART_SetConfig+0x34c>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d004      	beq.n	80091c6 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a1b      	ldr	r3, [r3, #32]
 80091c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091c2:	4313      	orrs	r3, r2
 80091c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	689a      	ldr	r2, [r3, #8]
 80091cc:	4bb2      	ldr	r3, [pc, #712]	; (8009498 <UART_SetConfig+0x350>)
 80091ce:	4013      	ands	r3, r2
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	6812      	ldr	r2, [r2, #0]
 80091d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091d6:	430b      	orrs	r3, r1
 80091d8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e0:	f023 010f 	bic.w	r1, r3, #15
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	430a      	orrs	r2, r1
 80091ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4aa9      	ldr	r2, [pc, #676]	; (800949c <UART_SetConfig+0x354>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d177      	bne.n	80092ea <UART_SetConfig+0x1a2>
 80091fa:	4ba9      	ldr	r3, [pc, #676]	; (80094a0 <UART_SetConfig+0x358>)
 80091fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009202:	2b28      	cmp	r3, #40	; 0x28
 8009204:	d86c      	bhi.n	80092e0 <UART_SetConfig+0x198>
 8009206:	a201      	add	r2, pc, #4	; (adr r2, 800920c <UART_SetConfig+0xc4>)
 8009208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920c:	080092b1 	.word	0x080092b1
 8009210:	080092e1 	.word	0x080092e1
 8009214:	080092e1 	.word	0x080092e1
 8009218:	080092e1 	.word	0x080092e1
 800921c:	080092e1 	.word	0x080092e1
 8009220:	080092e1 	.word	0x080092e1
 8009224:	080092e1 	.word	0x080092e1
 8009228:	080092e1 	.word	0x080092e1
 800922c:	080092b9 	.word	0x080092b9
 8009230:	080092e1 	.word	0x080092e1
 8009234:	080092e1 	.word	0x080092e1
 8009238:	080092e1 	.word	0x080092e1
 800923c:	080092e1 	.word	0x080092e1
 8009240:	080092e1 	.word	0x080092e1
 8009244:	080092e1 	.word	0x080092e1
 8009248:	080092e1 	.word	0x080092e1
 800924c:	080092c1 	.word	0x080092c1
 8009250:	080092e1 	.word	0x080092e1
 8009254:	080092e1 	.word	0x080092e1
 8009258:	080092e1 	.word	0x080092e1
 800925c:	080092e1 	.word	0x080092e1
 8009260:	080092e1 	.word	0x080092e1
 8009264:	080092e1 	.word	0x080092e1
 8009268:	080092e1 	.word	0x080092e1
 800926c:	080092c9 	.word	0x080092c9
 8009270:	080092e1 	.word	0x080092e1
 8009274:	080092e1 	.word	0x080092e1
 8009278:	080092e1 	.word	0x080092e1
 800927c:	080092e1 	.word	0x080092e1
 8009280:	080092e1 	.word	0x080092e1
 8009284:	080092e1 	.word	0x080092e1
 8009288:	080092e1 	.word	0x080092e1
 800928c:	080092d1 	.word	0x080092d1
 8009290:	080092e1 	.word	0x080092e1
 8009294:	080092e1 	.word	0x080092e1
 8009298:	080092e1 	.word	0x080092e1
 800929c:	080092e1 	.word	0x080092e1
 80092a0:	080092e1 	.word	0x080092e1
 80092a4:	080092e1 	.word	0x080092e1
 80092a8:	080092e1 	.word	0x080092e1
 80092ac:	080092d9 	.word	0x080092d9
 80092b0:	2301      	movs	r3, #1
 80092b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80092b6:	e233      	b.n	8009720 <UART_SetConfig+0x5d8>
 80092b8:	2304      	movs	r3, #4
 80092ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80092be:	e22f      	b.n	8009720 <UART_SetConfig+0x5d8>
 80092c0:	2308      	movs	r3, #8
 80092c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80092c6:	e22b      	b.n	8009720 <UART_SetConfig+0x5d8>
 80092c8:	2310      	movs	r3, #16
 80092ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80092ce:	e227      	b.n	8009720 <UART_SetConfig+0x5d8>
 80092d0:	2320      	movs	r3, #32
 80092d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80092d6:	e223      	b.n	8009720 <UART_SetConfig+0x5d8>
 80092d8:	2340      	movs	r3, #64	; 0x40
 80092da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80092de:	e21f      	b.n	8009720 <UART_SetConfig+0x5d8>
 80092e0:	2380      	movs	r3, #128	; 0x80
 80092e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80092e6:	bf00      	nop
 80092e8:	e21a      	b.n	8009720 <UART_SetConfig+0x5d8>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a6d      	ldr	r2, [pc, #436]	; (80094a4 <UART_SetConfig+0x35c>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d132      	bne.n	800935a <UART_SetConfig+0x212>
 80092f4:	4b6a      	ldr	r3, [pc, #424]	; (80094a0 <UART_SetConfig+0x358>)
 80092f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f8:	f003 0307 	and.w	r3, r3, #7
 80092fc:	2b05      	cmp	r3, #5
 80092fe:	d827      	bhi.n	8009350 <UART_SetConfig+0x208>
 8009300:	a201      	add	r2, pc, #4	; (adr r2, 8009308 <UART_SetConfig+0x1c0>)
 8009302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009306:	bf00      	nop
 8009308:	08009321 	.word	0x08009321
 800930c:	08009329 	.word	0x08009329
 8009310:	08009331 	.word	0x08009331
 8009314:	08009339 	.word	0x08009339
 8009318:	08009341 	.word	0x08009341
 800931c:	08009349 	.word	0x08009349
 8009320:	2300      	movs	r3, #0
 8009322:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009326:	e1fb      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009328:	2304      	movs	r3, #4
 800932a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800932e:	e1f7      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009330:	2308      	movs	r3, #8
 8009332:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009336:	e1f3      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009338:	2310      	movs	r3, #16
 800933a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800933e:	e1ef      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009340:	2320      	movs	r3, #32
 8009342:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009346:	e1eb      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009348:	2340      	movs	r3, #64	; 0x40
 800934a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800934e:	e1e7      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009350:	2380      	movs	r3, #128	; 0x80
 8009352:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009356:	bf00      	nop
 8009358:	e1e2      	b.n	8009720 <UART_SetConfig+0x5d8>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a52      	ldr	r2, [pc, #328]	; (80094a8 <UART_SetConfig+0x360>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d132      	bne.n	80093ca <UART_SetConfig+0x282>
 8009364:	4b4e      	ldr	r3, [pc, #312]	; (80094a0 <UART_SetConfig+0x358>)
 8009366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009368:	f003 0307 	and.w	r3, r3, #7
 800936c:	2b05      	cmp	r3, #5
 800936e:	d827      	bhi.n	80093c0 <UART_SetConfig+0x278>
 8009370:	a201      	add	r2, pc, #4	; (adr r2, 8009378 <UART_SetConfig+0x230>)
 8009372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009376:	bf00      	nop
 8009378:	08009391 	.word	0x08009391
 800937c:	08009399 	.word	0x08009399
 8009380:	080093a1 	.word	0x080093a1
 8009384:	080093a9 	.word	0x080093a9
 8009388:	080093b1 	.word	0x080093b1
 800938c:	080093b9 	.word	0x080093b9
 8009390:	2300      	movs	r3, #0
 8009392:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009396:	e1c3      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009398:	2304      	movs	r3, #4
 800939a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800939e:	e1bf      	b.n	8009720 <UART_SetConfig+0x5d8>
 80093a0:	2308      	movs	r3, #8
 80093a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80093a6:	e1bb      	b.n	8009720 <UART_SetConfig+0x5d8>
 80093a8:	2310      	movs	r3, #16
 80093aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80093ae:	e1b7      	b.n	8009720 <UART_SetConfig+0x5d8>
 80093b0:	2320      	movs	r3, #32
 80093b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80093b6:	e1b3      	b.n	8009720 <UART_SetConfig+0x5d8>
 80093b8:	2340      	movs	r3, #64	; 0x40
 80093ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80093be:	e1af      	b.n	8009720 <UART_SetConfig+0x5d8>
 80093c0:	2380      	movs	r3, #128	; 0x80
 80093c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80093c6:	bf00      	nop
 80093c8:	e1aa      	b.n	8009720 <UART_SetConfig+0x5d8>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a37      	ldr	r2, [pc, #220]	; (80094ac <UART_SetConfig+0x364>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d132      	bne.n	800943a <UART_SetConfig+0x2f2>
 80093d4:	4b32      	ldr	r3, [pc, #200]	; (80094a0 <UART_SetConfig+0x358>)
 80093d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d8:	f003 0307 	and.w	r3, r3, #7
 80093dc:	2b05      	cmp	r3, #5
 80093de:	d827      	bhi.n	8009430 <UART_SetConfig+0x2e8>
 80093e0:	a201      	add	r2, pc, #4	; (adr r2, 80093e8 <UART_SetConfig+0x2a0>)
 80093e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e6:	bf00      	nop
 80093e8:	08009401 	.word	0x08009401
 80093ec:	08009409 	.word	0x08009409
 80093f0:	08009411 	.word	0x08009411
 80093f4:	08009419 	.word	0x08009419
 80093f8:	08009421 	.word	0x08009421
 80093fc:	08009429 	.word	0x08009429
 8009400:	2300      	movs	r3, #0
 8009402:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009406:	e18b      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009408:	2304      	movs	r3, #4
 800940a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800940e:	e187      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009410:	2308      	movs	r3, #8
 8009412:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009416:	e183      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009418:	2310      	movs	r3, #16
 800941a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800941e:	e17f      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009420:	2320      	movs	r3, #32
 8009422:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009426:	e17b      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009428:	2340      	movs	r3, #64	; 0x40
 800942a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800942e:	e177      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009430:	2380      	movs	r3, #128	; 0x80
 8009432:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009436:	bf00      	nop
 8009438:	e172      	b.n	8009720 <UART_SetConfig+0x5d8>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a1c      	ldr	r2, [pc, #112]	; (80094b0 <UART_SetConfig+0x368>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d144      	bne.n	80094ce <UART_SetConfig+0x386>
 8009444:	4b16      	ldr	r3, [pc, #88]	; (80094a0 <UART_SetConfig+0x358>)
 8009446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009448:	f003 0307 	and.w	r3, r3, #7
 800944c:	2b05      	cmp	r3, #5
 800944e:	d839      	bhi.n	80094c4 <UART_SetConfig+0x37c>
 8009450:	a201      	add	r2, pc, #4	; (adr r2, 8009458 <UART_SetConfig+0x310>)
 8009452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009456:	bf00      	nop
 8009458:	08009471 	.word	0x08009471
 800945c:	08009479 	.word	0x08009479
 8009460:	08009481 	.word	0x08009481
 8009464:	08009489 	.word	0x08009489
 8009468:	080094b5 	.word	0x080094b5
 800946c:	080094bd 	.word	0x080094bd
 8009470:	2300      	movs	r3, #0
 8009472:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009476:	e153      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009478:	2304      	movs	r3, #4
 800947a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800947e:	e14f      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009480:	2308      	movs	r3, #8
 8009482:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009486:	e14b      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009488:	2310      	movs	r3, #16
 800948a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800948e:	e147      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009490:	cfff69f3 	.word	0xcfff69f3
 8009494:	58000c00 	.word	0x58000c00
 8009498:	11fff4ff 	.word	0x11fff4ff
 800949c:	40011000 	.word	0x40011000
 80094a0:	58024400 	.word	0x58024400
 80094a4:	40004400 	.word	0x40004400
 80094a8:	40004800 	.word	0x40004800
 80094ac:	40004c00 	.word	0x40004c00
 80094b0:	40005000 	.word	0x40005000
 80094b4:	2320      	movs	r3, #32
 80094b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094ba:	e131      	b.n	8009720 <UART_SetConfig+0x5d8>
 80094bc:	2340      	movs	r3, #64	; 0x40
 80094be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094c2:	e12d      	b.n	8009720 <UART_SetConfig+0x5d8>
 80094c4:	2380      	movs	r3, #128	; 0x80
 80094c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094ca:	bf00      	nop
 80094cc:	e128      	b.n	8009720 <UART_SetConfig+0x5d8>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4ac3      	ldr	r2, [pc, #780]	; (80097e0 <UART_SetConfig+0x698>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d178      	bne.n	80095ca <UART_SetConfig+0x482>
 80094d8:	4bc2      	ldr	r3, [pc, #776]	; (80097e4 <UART_SetConfig+0x69c>)
 80094da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094e0:	2b28      	cmp	r3, #40	; 0x28
 80094e2:	d86d      	bhi.n	80095c0 <UART_SetConfig+0x478>
 80094e4:	a201      	add	r2, pc, #4	; (adr r2, 80094ec <UART_SetConfig+0x3a4>)
 80094e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ea:	bf00      	nop
 80094ec:	08009591 	.word	0x08009591
 80094f0:	080095c1 	.word	0x080095c1
 80094f4:	080095c1 	.word	0x080095c1
 80094f8:	080095c1 	.word	0x080095c1
 80094fc:	080095c1 	.word	0x080095c1
 8009500:	080095c1 	.word	0x080095c1
 8009504:	080095c1 	.word	0x080095c1
 8009508:	080095c1 	.word	0x080095c1
 800950c:	08009599 	.word	0x08009599
 8009510:	080095c1 	.word	0x080095c1
 8009514:	080095c1 	.word	0x080095c1
 8009518:	080095c1 	.word	0x080095c1
 800951c:	080095c1 	.word	0x080095c1
 8009520:	080095c1 	.word	0x080095c1
 8009524:	080095c1 	.word	0x080095c1
 8009528:	080095c1 	.word	0x080095c1
 800952c:	080095a1 	.word	0x080095a1
 8009530:	080095c1 	.word	0x080095c1
 8009534:	080095c1 	.word	0x080095c1
 8009538:	080095c1 	.word	0x080095c1
 800953c:	080095c1 	.word	0x080095c1
 8009540:	080095c1 	.word	0x080095c1
 8009544:	080095c1 	.word	0x080095c1
 8009548:	080095c1 	.word	0x080095c1
 800954c:	080095a9 	.word	0x080095a9
 8009550:	080095c1 	.word	0x080095c1
 8009554:	080095c1 	.word	0x080095c1
 8009558:	080095c1 	.word	0x080095c1
 800955c:	080095c1 	.word	0x080095c1
 8009560:	080095c1 	.word	0x080095c1
 8009564:	080095c1 	.word	0x080095c1
 8009568:	080095c1 	.word	0x080095c1
 800956c:	080095b1 	.word	0x080095b1
 8009570:	080095c1 	.word	0x080095c1
 8009574:	080095c1 	.word	0x080095c1
 8009578:	080095c1 	.word	0x080095c1
 800957c:	080095c1 	.word	0x080095c1
 8009580:	080095c1 	.word	0x080095c1
 8009584:	080095c1 	.word	0x080095c1
 8009588:	080095c1 	.word	0x080095c1
 800958c:	080095b9 	.word	0x080095b9
 8009590:	2301      	movs	r3, #1
 8009592:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009596:	e0c3      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009598:	2304      	movs	r3, #4
 800959a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800959e:	e0bf      	b.n	8009720 <UART_SetConfig+0x5d8>
 80095a0:	2308      	movs	r3, #8
 80095a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095a6:	e0bb      	b.n	8009720 <UART_SetConfig+0x5d8>
 80095a8:	2310      	movs	r3, #16
 80095aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095ae:	e0b7      	b.n	8009720 <UART_SetConfig+0x5d8>
 80095b0:	2320      	movs	r3, #32
 80095b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095b6:	e0b3      	b.n	8009720 <UART_SetConfig+0x5d8>
 80095b8:	2340      	movs	r3, #64	; 0x40
 80095ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095be:	e0af      	b.n	8009720 <UART_SetConfig+0x5d8>
 80095c0:	2380      	movs	r3, #128	; 0x80
 80095c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80095c6:	bf00      	nop
 80095c8:	e0aa      	b.n	8009720 <UART_SetConfig+0x5d8>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a86      	ldr	r2, [pc, #536]	; (80097e8 <UART_SetConfig+0x6a0>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d132      	bne.n	800963a <UART_SetConfig+0x4f2>
 80095d4:	4b83      	ldr	r3, [pc, #524]	; (80097e4 <UART_SetConfig+0x69c>)
 80095d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d8:	f003 0307 	and.w	r3, r3, #7
 80095dc:	2b05      	cmp	r3, #5
 80095de:	d827      	bhi.n	8009630 <UART_SetConfig+0x4e8>
 80095e0:	a201      	add	r2, pc, #4	; (adr r2, 80095e8 <UART_SetConfig+0x4a0>)
 80095e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e6:	bf00      	nop
 80095e8:	08009601 	.word	0x08009601
 80095ec:	08009609 	.word	0x08009609
 80095f0:	08009611 	.word	0x08009611
 80095f4:	08009619 	.word	0x08009619
 80095f8:	08009621 	.word	0x08009621
 80095fc:	08009629 	.word	0x08009629
 8009600:	2300      	movs	r3, #0
 8009602:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009606:	e08b      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009608:	2304      	movs	r3, #4
 800960a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800960e:	e087      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009610:	2308      	movs	r3, #8
 8009612:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009616:	e083      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009618:	2310      	movs	r3, #16
 800961a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800961e:	e07f      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009620:	2320      	movs	r3, #32
 8009622:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009626:	e07b      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009628:	2340      	movs	r3, #64	; 0x40
 800962a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800962e:	e077      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009630:	2380      	movs	r3, #128	; 0x80
 8009632:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009636:	bf00      	nop
 8009638:	e072      	b.n	8009720 <UART_SetConfig+0x5d8>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a6b      	ldr	r2, [pc, #428]	; (80097ec <UART_SetConfig+0x6a4>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d132      	bne.n	80096aa <UART_SetConfig+0x562>
 8009644:	4b67      	ldr	r3, [pc, #412]	; (80097e4 <UART_SetConfig+0x69c>)
 8009646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009648:	f003 0307 	and.w	r3, r3, #7
 800964c:	2b05      	cmp	r3, #5
 800964e:	d827      	bhi.n	80096a0 <UART_SetConfig+0x558>
 8009650:	a201      	add	r2, pc, #4	; (adr r2, 8009658 <UART_SetConfig+0x510>)
 8009652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009656:	bf00      	nop
 8009658:	08009671 	.word	0x08009671
 800965c:	08009679 	.word	0x08009679
 8009660:	08009681 	.word	0x08009681
 8009664:	08009689 	.word	0x08009689
 8009668:	08009691 	.word	0x08009691
 800966c:	08009699 	.word	0x08009699
 8009670:	2300      	movs	r3, #0
 8009672:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009676:	e053      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009678:	2304      	movs	r3, #4
 800967a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800967e:	e04f      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009680:	2308      	movs	r3, #8
 8009682:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009686:	e04b      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009688:	2310      	movs	r3, #16
 800968a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800968e:	e047      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009690:	2320      	movs	r3, #32
 8009692:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009696:	e043      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009698:	2340      	movs	r3, #64	; 0x40
 800969a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800969e:	e03f      	b.n	8009720 <UART_SetConfig+0x5d8>
 80096a0:	2380      	movs	r3, #128	; 0x80
 80096a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096a6:	bf00      	nop
 80096a8:	e03a      	b.n	8009720 <UART_SetConfig+0x5d8>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a50      	ldr	r2, [pc, #320]	; (80097f0 <UART_SetConfig+0x6a8>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d132      	bne.n	800971a <UART_SetConfig+0x5d2>
 80096b4:	4b4b      	ldr	r3, [pc, #300]	; (80097e4 <UART_SetConfig+0x69c>)
 80096b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096b8:	f003 0307 	and.w	r3, r3, #7
 80096bc:	2b05      	cmp	r3, #5
 80096be:	d827      	bhi.n	8009710 <UART_SetConfig+0x5c8>
 80096c0:	a201      	add	r2, pc, #4	; (adr r2, 80096c8 <UART_SetConfig+0x580>)
 80096c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c6:	bf00      	nop
 80096c8:	080096e1 	.word	0x080096e1
 80096cc:	080096e9 	.word	0x080096e9
 80096d0:	080096f1 	.word	0x080096f1
 80096d4:	080096f9 	.word	0x080096f9
 80096d8:	08009701 	.word	0x08009701
 80096dc:	08009709 	.word	0x08009709
 80096e0:	2302      	movs	r3, #2
 80096e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096e6:	e01b      	b.n	8009720 <UART_SetConfig+0x5d8>
 80096e8:	2304      	movs	r3, #4
 80096ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096ee:	e017      	b.n	8009720 <UART_SetConfig+0x5d8>
 80096f0:	2308      	movs	r3, #8
 80096f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096f6:	e013      	b.n	8009720 <UART_SetConfig+0x5d8>
 80096f8:	2310      	movs	r3, #16
 80096fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80096fe:	e00f      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009700:	2320      	movs	r3, #32
 8009702:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009706:	e00b      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009708:	2340      	movs	r3, #64	; 0x40
 800970a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800970e:	e007      	b.n	8009720 <UART_SetConfig+0x5d8>
 8009710:	2380      	movs	r3, #128	; 0x80
 8009712:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009716:	bf00      	nop
 8009718:	e002      	b.n	8009720 <UART_SetConfig+0x5d8>
 800971a:	2380      	movs	r3, #128	; 0x80
 800971c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a32      	ldr	r2, [pc, #200]	; (80097f0 <UART_SetConfig+0x6a8>)
 8009726:	4293      	cmp	r3, r2
 8009728:	f040 86f7 	bne.w	800a51a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800972c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009730:	2b08      	cmp	r3, #8
 8009732:	f000 80c0 	beq.w	80098b6 <UART_SetConfig+0x76e>
 8009736:	2b08      	cmp	r3, #8
 8009738:	dc04      	bgt.n	8009744 <UART_SetConfig+0x5fc>
 800973a:	2b02      	cmp	r3, #2
 800973c:	d00c      	beq.n	8009758 <UART_SetConfig+0x610>
 800973e:	2b04      	cmp	r3, #4
 8009740:	d065      	beq.n	800980e <UART_SetConfig+0x6c6>
 8009742:	e27a      	b.n	8009c3a <UART_SetConfig+0xaf2>
 8009744:	2b20      	cmp	r3, #32
 8009746:	f000 81b0 	beq.w	8009aaa <UART_SetConfig+0x962>
 800974a:	2b40      	cmp	r3, #64	; 0x40
 800974c:	f000 821e 	beq.w	8009b8c <UART_SetConfig+0xa44>
 8009750:	2b10      	cmp	r3, #16
 8009752:	f000 8104 	beq.w	800995e <UART_SetConfig+0x816>
 8009756:	e270      	b.n	8009c3a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009758:	f7fe f814 	bl	8007784 <HAL_RCCEx_GetD3PCLK1Freq>
 800975c:	4602      	mov	r2, r0
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009762:	2b00      	cmp	r3, #0
 8009764:	d04e      	beq.n	8009804 <UART_SetConfig+0x6bc>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976a:	2b01      	cmp	r3, #1
 800976c:	d048      	beq.n	8009800 <UART_SetConfig+0x6b8>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009772:	2b02      	cmp	r3, #2
 8009774:	d042      	beq.n	80097fc <UART_SetConfig+0x6b4>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977a:	2b03      	cmp	r3, #3
 800977c:	d03c      	beq.n	80097f8 <UART_SetConfig+0x6b0>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009782:	2b04      	cmp	r3, #4
 8009784:	d036      	beq.n	80097f4 <UART_SetConfig+0x6ac>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978a:	2b05      	cmp	r3, #5
 800978c:	d026      	beq.n	80097dc <UART_SetConfig+0x694>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009792:	2b06      	cmp	r3, #6
 8009794:	d020      	beq.n	80097d8 <UART_SetConfig+0x690>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979a:	2b07      	cmp	r3, #7
 800979c:	d01a      	beq.n	80097d4 <UART_SetConfig+0x68c>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a2:	2b08      	cmp	r3, #8
 80097a4:	d014      	beq.n	80097d0 <UART_SetConfig+0x688>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097aa:	2b09      	cmp	r3, #9
 80097ac:	d00e      	beq.n	80097cc <UART_SetConfig+0x684>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b2:	2b0a      	cmp	r3, #10
 80097b4:	d008      	beq.n	80097c8 <UART_SetConfig+0x680>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ba:	2b0b      	cmp	r3, #11
 80097bc:	d102      	bne.n	80097c4 <UART_SetConfig+0x67c>
 80097be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097c2:	e020      	b.n	8009806 <UART_SetConfig+0x6be>
 80097c4:	2301      	movs	r3, #1
 80097c6:	e01e      	b.n	8009806 <UART_SetConfig+0x6be>
 80097c8:	2380      	movs	r3, #128	; 0x80
 80097ca:	e01c      	b.n	8009806 <UART_SetConfig+0x6be>
 80097cc:	2340      	movs	r3, #64	; 0x40
 80097ce:	e01a      	b.n	8009806 <UART_SetConfig+0x6be>
 80097d0:	2320      	movs	r3, #32
 80097d2:	e018      	b.n	8009806 <UART_SetConfig+0x6be>
 80097d4:	2310      	movs	r3, #16
 80097d6:	e016      	b.n	8009806 <UART_SetConfig+0x6be>
 80097d8:	230c      	movs	r3, #12
 80097da:	e014      	b.n	8009806 <UART_SetConfig+0x6be>
 80097dc:	230a      	movs	r3, #10
 80097de:	e012      	b.n	8009806 <UART_SetConfig+0x6be>
 80097e0:	40011400 	.word	0x40011400
 80097e4:	58024400 	.word	0x58024400
 80097e8:	40007800 	.word	0x40007800
 80097ec:	40007c00 	.word	0x40007c00
 80097f0:	58000c00 	.word	0x58000c00
 80097f4:	2308      	movs	r3, #8
 80097f6:	e006      	b.n	8009806 <UART_SetConfig+0x6be>
 80097f8:	2306      	movs	r3, #6
 80097fa:	e004      	b.n	8009806 <UART_SetConfig+0x6be>
 80097fc:	2304      	movs	r3, #4
 80097fe:	e002      	b.n	8009806 <UART_SetConfig+0x6be>
 8009800:	2302      	movs	r3, #2
 8009802:	e000      	b.n	8009806 <UART_SetConfig+0x6be>
 8009804:	2301      	movs	r3, #1
 8009806:	fbb2 f3f3 	udiv	r3, r2, r3
 800980a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800980c:	e219      	b.n	8009c42 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800980e:	f107 0318 	add.w	r3, r7, #24
 8009812:	4618      	mov	r0, r3
 8009814:	f7fd ffcc 	bl	80077b0 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009818:	69fa      	ldr	r2, [r7, #28]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981e:	2b00      	cmp	r3, #0
 8009820:	d044      	beq.n	80098ac <UART_SetConfig+0x764>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009826:	2b01      	cmp	r3, #1
 8009828:	d03e      	beq.n	80098a8 <UART_SetConfig+0x760>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982e:	2b02      	cmp	r3, #2
 8009830:	d038      	beq.n	80098a4 <UART_SetConfig+0x75c>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009836:	2b03      	cmp	r3, #3
 8009838:	d032      	beq.n	80098a0 <UART_SetConfig+0x758>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983e:	2b04      	cmp	r3, #4
 8009840:	d02c      	beq.n	800989c <UART_SetConfig+0x754>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009846:	2b05      	cmp	r3, #5
 8009848:	d026      	beq.n	8009898 <UART_SetConfig+0x750>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984e:	2b06      	cmp	r3, #6
 8009850:	d020      	beq.n	8009894 <UART_SetConfig+0x74c>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009856:	2b07      	cmp	r3, #7
 8009858:	d01a      	beq.n	8009890 <UART_SetConfig+0x748>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985e:	2b08      	cmp	r3, #8
 8009860:	d014      	beq.n	800988c <UART_SetConfig+0x744>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009866:	2b09      	cmp	r3, #9
 8009868:	d00e      	beq.n	8009888 <UART_SetConfig+0x740>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986e:	2b0a      	cmp	r3, #10
 8009870:	d008      	beq.n	8009884 <UART_SetConfig+0x73c>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009876:	2b0b      	cmp	r3, #11
 8009878:	d102      	bne.n	8009880 <UART_SetConfig+0x738>
 800987a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800987e:	e016      	b.n	80098ae <UART_SetConfig+0x766>
 8009880:	2301      	movs	r3, #1
 8009882:	e014      	b.n	80098ae <UART_SetConfig+0x766>
 8009884:	2380      	movs	r3, #128	; 0x80
 8009886:	e012      	b.n	80098ae <UART_SetConfig+0x766>
 8009888:	2340      	movs	r3, #64	; 0x40
 800988a:	e010      	b.n	80098ae <UART_SetConfig+0x766>
 800988c:	2320      	movs	r3, #32
 800988e:	e00e      	b.n	80098ae <UART_SetConfig+0x766>
 8009890:	2310      	movs	r3, #16
 8009892:	e00c      	b.n	80098ae <UART_SetConfig+0x766>
 8009894:	230c      	movs	r3, #12
 8009896:	e00a      	b.n	80098ae <UART_SetConfig+0x766>
 8009898:	230a      	movs	r3, #10
 800989a:	e008      	b.n	80098ae <UART_SetConfig+0x766>
 800989c:	2308      	movs	r3, #8
 800989e:	e006      	b.n	80098ae <UART_SetConfig+0x766>
 80098a0:	2306      	movs	r3, #6
 80098a2:	e004      	b.n	80098ae <UART_SetConfig+0x766>
 80098a4:	2304      	movs	r3, #4
 80098a6:	e002      	b.n	80098ae <UART_SetConfig+0x766>
 80098a8:	2302      	movs	r3, #2
 80098aa:	e000      	b.n	80098ae <UART_SetConfig+0x766>
 80098ac:	2301      	movs	r3, #1
 80098ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80098b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098b4:	e1c5      	b.n	8009c42 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098b6:	f107 030c 	add.w	r3, r7, #12
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7fe f8c4 	bl	8007a48 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d044      	beq.n	8009954 <UART_SetConfig+0x80c>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d03e      	beq.n	8009950 <UART_SetConfig+0x808>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d038      	beq.n	800994c <UART_SetConfig+0x804>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098de:	2b03      	cmp	r3, #3
 80098e0:	d032      	beq.n	8009948 <UART_SetConfig+0x800>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e6:	2b04      	cmp	r3, #4
 80098e8:	d02c      	beq.n	8009944 <UART_SetConfig+0x7fc>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ee:	2b05      	cmp	r3, #5
 80098f0:	d026      	beq.n	8009940 <UART_SetConfig+0x7f8>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f6:	2b06      	cmp	r3, #6
 80098f8:	d020      	beq.n	800993c <UART_SetConfig+0x7f4>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fe:	2b07      	cmp	r3, #7
 8009900:	d01a      	beq.n	8009938 <UART_SetConfig+0x7f0>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009906:	2b08      	cmp	r3, #8
 8009908:	d014      	beq.n	8009934 <UART_SetConfig+0x7ec>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990e:	2b09      	cmp	r3, #9
 8009910:	d00e      	beq.n	8009930 <UART_SetConfig+0x7e8>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009916:	2b0a      	cmp	r3, #10
 8009918:	d008      	beq.n	800992c <UART_SetConfig+0x7e4>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991e:	2b0b      	cmp	r3, #11
 8009920:	d102      	bne.n	8009928 <UART_SetConfig+0x7e0>
 8009922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009926:	e016      	b.n	8009956 <UART_SetConfig+0x80e>
 8009928:	2301      	movs	r3, #1
 800992a:	e014      	b.n	8009956 <UART_SetConfig+0x80e>
 800992c:	2380      	movs	r3, #128	; 0x80
 800992e:	e012      	b.n	8009956 <UART_SetConfig+0x80e>
 8009930:	2340      	movs	r3, #64	; 0x40
 8009932:	e010      	b.n	8009956 <UART_SetConfig+0x80e>
 8009934:	2320      	movs	r3, #32
 8009936:	e00e      	b.n	8009956 <UART_SetConfig+0x80e>
 8009938:	2310      	movs	r3, #16
 800993a:	e00c      	b.n	8009956 <UART_SetConfig+0x80e>
 800993c:	230c      	movs	r3, #12
 800993e:	e00a      	b.n	8009956 <UART_SetConfig+0x80e>
 8009940:	230a      	movs	r3, #10
 8009942:	e008      	b.n	8009956 <UART_SetConfig+0x80e>
 8009944:	2308      	movs	r3, #8
 8009946:	e006      	b.n	8009956 <UART_SetConfig+0x80e>
 8009948:	2306      	movs	r3, #6
 800994a:	e004      	b.n	8009956 <UART_SetConfig+0x80e>
 800994c:	2304      	movs	r3, #4
 800994e:	e002      	b.n	8009956 <UART_SetConfig+0x80e>
 8009950:	2302      	movs	r3, #2
 8009952:	e000      	b.n	8009956 <UART_SetConfig+0x80e>
 8009954:	2301      	movs	r3, #1
 8009956:	fbb2 f3f3 	udiv	r3, r2, r3
 800995a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800995c:	e171      	b.n	8009c42 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800995e:	4b7a      	ldr	r3, [pc, #488]	; (8009b48 <UART_SetConfig+0xa00>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f003 0320 	and.w	r3, r3, #32
 8009966:	2b00      	cmp	r3, #0
 8009968:	d054      	beq.n	8009a14 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800996a:	4b77      	ldr	r3, [pc, #476]	; (8009b48 <UART_SetConfig+0xa00>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	08db      	lsrs	r3, r3, #3
 8009970:	f003 0303 	and.w	r3, r3, #3
 8009974:	4a75      	ldr	r2, [pc, #468]	; (8009b4c <UART_SetConfig+0xa04>)
 8009976:	40da      	lsrs	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997c:	2b00      	cmp	r3, #0
 800997e:	d044      	beq.n	8009a0a <UART_SetConfig+0x8c2>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009984:	2b01      	cmp	r3, #1
 8009986:	d03e      	beq.n	8009a06 <UART_SetConfig+0x8be>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998c:	2b02      	cmp	r3, #2
 800998e:	d038      	beq.n	8009a02 <UART_SetConfig+0x8ba>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009994:	2b03      	cmp	r3, #3
 8009996:	d032      	beq.n	80099fe <UART_SetConfig+0x8b6>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999c:	2b04      	cmp	r3, #4
 800999e:	d02c      	beq.n	80099fa <UART_SetConfig+0x8b2>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a4:	2b05      	cmp	r3, #5
 80099a6:	d026      	beq.n	80099f6 <UART_SetConfig+0x8ae>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	2b06      	cmp	r3, #6
 80099ae:	d020      	beq.n	80099f2 <UART_SetConfig+0x8aa>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b4:	2b07      	cmp	r3, #7
 80099b6:	d01a      	beq.n	80099ee <UART_SetConfig+0x8a6>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099bc:	2b08      	cmp	r3, #8
 80099be:	d014      	beq.n	80099ea <UART_SetConfig+0x8a2>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c4:	2b09      	cmp	r3, #9
 80099c6:	d00e      	beq.n	80099e6 <UART_SetConfig+0x89e>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099cc:	2b0a      	cmp	r3, #10
 80099ce:	d008      	beq.n	80099e2 <UART_SetConfig+0x89a>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d4:	2b0b      	cmp	r3, #11
 80099d6:	d102      	bne.n	80099de <UART_SetConfig+0x896>
 80099d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099dc:	e016      	b.n	8009a0c <UART_SetConfig+0x8c4>
 80099de:	2301      	movs	r3, #1
 80099e0:	e014      	b.n	8009a0c <UART_SetConfig+0x8c4>
 80099e2:	2380      	movs	r3, #128	; 0x80
 80099e4:	e012      	b.n	8009a0c <UART_SetConfig+0x8c4>
 80099e6:	2340      	movs	r3, #64	; 0x40
 80099e8:	e010      	b.n	8009a0c <UART_SetConfig+0x8c4>
 80099ea:	2320      	movs	r3, #32
 80099ec:	e00e      	b.n	8009a0c <UART_SetConfig+0x8c4>
 80099ee:	2310      	movs	r3, #16
 80099f0:	e00c      	b.n	8009a0c <UART_SetConfig+0x8c4>
 80099f2:	230c      	movs	r3, #12
 80099f4:	e00a      	b.n	8009a0c <UART_SetConfig+0x8c4>
 80099f6:	230a      	movs	r3, #10
 80099f8:	e008      	b.n	8009a0c <UART_SetConfig+0x8c4>
 80099fa:	2308      	movs	r3, #8
 80099fc:	e006      	b.n	8009a0c <UART_SetConfig+0x8c4>
 80099fe:	2306      	movs	r3, #6
 8009a00:	e004      	b.n	8009a0c <UART_SetConfig+0x8c4>
 8009a02:	2304      	movs	r3, #4
 8009a04:	e002      	b.n	8009a0c <UART_SetConfig+0x8c4>
 8009a06:	2302      	movs	r3, #2
 8009a08:	e000      	b.n	8009a0c <UART_SetConfig+0x8c4>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8009a12:	e116      	b.n	8009c42 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d043      	beq.n	8009aa4 <UART_SetConfig+0x95c>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d03d      	beq.n	8009aa0 <UART_SetConfig+0x958>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d037      	beq.n	8009a9c <UART_SetConfig+0x954>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	d031      	beq.n	8009a98 <UART_SetConfig+0x950>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	2b04      	cmp	r3, #4
 8009a3a:	d02b      	beq.n	8009a94 <UART_SetConfig+0x94c>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a40:	2b05      	cmp	r3, #5
 8009a42:	d025      	beq.n	8009a90 <UART_SetConfig+0x948>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a48:	2b06      	cmp	r3, #6
 8009a4a:	d01f      	beq.n	8009a8c <UART_SetConfig+0x944>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a50:	2b07      	cmp	r3, #7
 8009a52:	d019      	beq.n	8009a88 <UART_SetConfig+0x940>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a58:	2b08      	cmp	r3, #8
 8009a5a:	d013      	beq.n	8009a84 <UART_SetConfig+0x93c>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a60:	2b09      	cmp	r3, #9
 8009a62:	d00d      	beq.n	8009a80 <UART_SetConfig+0x938>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a68:	2b0a      	cmp	r3, #10
 8009a6a:	d007      	beq.n	8009a7c <UART_SetConfig+0x934>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a70:	2b0b      	cmp	r3, #11
 8009a72:	d101      	bne.n	8009a78 <UART_SetConfig+0x930>
 8009a74:	4b36      	ldr	r3, [pc, #216]	; (8009b50 <UART_SetConfig+0xa08>)
 8009a76:	e016      	b.n	8009aa6 <UART_SetConfig+0x95e>
 8009a78:	4b34      	ldr	r3, [pc, #208]	; (8009b4c <UART_SetConfig+0xa04>)
 8009a7a:	e014      	b.n	8009aa6 <UART_SetConfig+0x95e>
 8009a7c:	4b35      	ldr	r3, [pc, #212]	; (8009b54 <UART_SetConfig+0xa0c>)
 8009a7e:	e012      	b.n	8009aa6 <UART_SetConfig+0x95e>
 8009a80:	4b35      	ldr	r3, [pc, #212]	; (8009b58 <UART_SetConfig+0xa10>)
 8009a82:	e010      	b.n	8009aa6 <UART_SetConfig+0x95e>
 8009a84:	4b35      	ldr	r3, [pc, #212]	; (8009b5c <UART_SetConfig+0xa14>)
 8009a86:	e00e      	b.n	8009aa6 <UART_SetConfig+0x95e>
 8009a88:	4b35      	ldr	r3, [pc, #212]	; (8009b60 <UART_SetConfig+0xa18>)
 8009a8a:	e00c      	b.n	8009aa6 <UART_SetConfig+0x95e>
 8009a8c:	4b35      	ldr	r3, [pc, #212]	; (8009b64 <UART_SetConfig+0xa1c>)
 8009a8e:	e00a      	b.n	8009aa6 <UART_SetConfig+0x95e>
 8009a90:	4b35      	ldr	r3, [pc, #212]	; (8009b68 <UART_SetConfig+0xa20>)
 8009a92:	e008      	b.n	8009aa6 <UART_SetConfig+0x95e>
 8009a94:	4b35      	ldr	r3, [pc, #212]	; (8009b6c <UART_SetConfig+0xa24>)
 8009a96:	e006      	b.n	8009aa6 <UART_SetConfig+0x95e>
 8009a98:	4b35      	ldr	r3, [pc, #212]	; (8009b70 <UART_SetConfig+0xa28>)
 8009a9a:	e004      	b.n	8009aa6 <UART_SetConfig+0x95e>
 8009a9c:	4b35      	ldr	r3, [pc, #212]	; (8009b74 <UART_SetConfig+0xa2c>)
 8009a9e:	e002      	b.n	8009aa6 <UART_SetConfig+0x95e>
 8009aa0:	4b35      	ldr	r3, [pc, #212]	; (8009b78 <UART_SetConfig+0xa30>)
 8009aa2:	e000      	b.n	8009aa6 <UART_SetConfig+0x95e>
 8009aa4:	4b29      	ldr	r3, [pc, #164]	; (8009b4c <UART_SetConfig+0xa04>)
 8009aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009aa8:	e0cb      	b.n	8009c42 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d046      	beq.n	8009b40 <UART_SetConfig+0x9f8>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d040      	beq.n	8009b3c <UART_SetConfig+0x9f4>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abe:	2b02      	cmp	r3, #2
 8009ac0:	d03a      	beq.n	8009b38 <UART_SetConfig+0x9f0>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	d034      	beq.n	8009b34 <UART_SetConfig+0x9ec>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ace:	2b04      	cmp	r3, #4
 8009ad0:	d02e      	beq.n	8009b30 <UART_SetConfig+0x9e8>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad6:	2b05      	cmp	r3, #5
 8009ad8:	d028      	beq.n	8009b2c <UART_SetConfig+0x9e4>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ade:	2b06      	cmp	r3, #6
 8009ae0:	d022      	beq.n	8009b28 <UART_SetConfig+0x9e0>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae6:	2b07      	cmp	r3, #7
 8009ae8:	d01c      	beq.n	8009b24 <UART_SetConfig+0x9dc>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aee:	2b08      	cmp	r3, #8
 8009af0:	d016      	beq.n	8009b20 <UART_SetConfig+0x9d8>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af6:	2b09      	cmp	r3, #9
 8009af8:	d00f      	beq.n	8009b1a <UART_SetConfig+0x9d2>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afe:	2b0a      	cmp	r3, #10
 8009b00:	d008      	beq.n	8009b14 <UART_SetConfig+0x9cc>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b06:	2b0b      	cmp	r3, #11
 8009b08:	d102      	bne.n	8009b10 <UART_SetConfig+0x9c8>
 8009b0a:	f643 5309 	movw	r3, #15625	; 0x3d09
 8009b0e:	e018      	b.n	8009b42 <UART_SetConfig+0x9fa>
 8009b10:	4b13      	ldr	r3, [pc, #76]	; (8009b60 <UART_SetConfig+0xa18>)
 8009b12:	e016      	b.n	8009b42 <UART_SetConfig+0x9fa>
 8009b14:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009b18:	e013      	b.n	8009b42 <UART_SetConfig+0x9fa>
 8009b1a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009b1e:	e010      	b.n	8009b42 <UART_SetConfig+0x9fa>
 8009b20:	4b16      	ldr	r3, [pc, #88]	; (8009b7c <UART_SetConfig+0xa34>)
 8009b22:	e00e      	b.n	8009b42 <UART_SetConfig+0x9fa>
 8009b24:	4b0a      	ldr	r3, [pc, #40]	; (8009b50 <UART_SetConfig+0xa08>)
 8009b26:	e00c      	b.n	8009b42 <UART_SetConfig+0x9fa>
 8009b28:	4b15      	ldr	r3, [pc, #84]	; (8009b80 <UART_SetConfig+0xa38>)
 8009b2a:	e00a      	b.n	8009b42 <UART_SetConfig+0x9fa>
 8009b2c:	4b15      	ldr	r3, [pc, #84]	; (8009b84 <UART_SetConfig+0xa3c>)
 8009b2e:	e008      	b.n	8009b42 <UART_SetConfig+0x9fa>
 8009b30:	4b08      	ldr	r3, [pc, #32]	; (8009b54 <UART_SetConfig+0xa0c>)
 8009b32:	e006      	b.n	8009b42 <UART_SetConfig+0x9fa>
 8009b34:	4b14      	ldr	r3, [pc, #80]	; (8009b88 <UART_SetConfig+0xa40>)
 8009b36:	e004      	b.n	8009b42 <UART_SetConfig+0x9fa>
 8009b38:	4b07      	ldr	r3, [pc, #28]	; (8009b58 <UART_SetConfig+0xa10>)
 8009b3a:	e002      	b.n	8009b42 <UART_SetConfig+0x9fa>
 8009b3c:	4b07      	ldr	r3, [pc, #28]	; (8009b5c <UART_SetConfig+0xa14>)
 8009b3e:	e000      	b.n	8009b42 <UART_SetConfig+0x9fa>
 8009b40:	4b07      	ldr	r3, [pc, #28]	; (8009b60 <UART_SetConfig+0xa18>)
 8009b42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b44:	e07d      	b.n	8009c42 <UART_SetConfig+0xafa>
 8009b46:	bf00      	nop
 8009b48:	58024400 	.word	0x58024400
 8009b4c:	03d09000 	.word	0x03d09000
 8009b50:	0003d090 	.word	0x0003d090
 8009b54:	0007a120 	.word	0x0007a120
 8009b58:	000f4240 	.word	0x000f4240
 8009b5c:	001e8480 	.word	0x001e8480
 8009b60:	003d0900 	.word	0x003d0900
 8009b64:	00516155 	.word	0x00516155
 8009b68:	0061a800 	.word	0x0061a800
 8009b6c:	007a1200 	.word	0x007a1200
 8009b70:	00a2c2aa 	.word	0x00a2c2aa
 8009b74:	00f42400 	.word	0x00f42400
 8009b78:	01e84800 	.word	0x01e84800
 8009b7c:	0001e848 	.word	0x0001e848
 8009b80:	00051615 	.word	0x00051615
 8009b84:	00061a80 	.word	0x00061a80
 8009b88:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d04e      	beq.n	8009c32 <UART_SetConfig+0xaea>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d047      	beq.n	8009c2c <UART_SetConfig+0xae4>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d040      	beq.n	8009c26 <UART_SetConfig+0xade>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba8:	2b03      	cmp	r3, #3
 8009baa:	d039      	beq.n	8009c20 <UART_SetConfig+0xad8>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb0:	2b04      	cmp	r3, #4
 8009bb2:	d032      	beq.n	8009c1a <UART_SetConfig+0xad2>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb8:	2b05      	cmp	r3, #5
 8009bba:	d02b      	beq.n	8009c14 <UART_SetConfig+0xacc>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc0:	2b06      	cmp	r3, #6
 8009bc2:	d024      	beq.n	8009c0e <UART_SetConfig+0xac6>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc8:	2b07      	cmp	r3, #7
 8009bca:	d01d      	beq.n	8009c08 <UART_SetConfig+0xac0>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd0:	2b08      	cmp	r3, #8
 8009bd2:	d016      	beq.n	8009c02 <UART_SetConfig+0xaba>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd8:	2b09      	cmp	r3, #9
 8009bda:	d00f      	beq.n	8009bfc <UART_SetConfig+0xab4>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be0:	2b0a      	cmp	r3, #10
 8009be2:	d008      	beq.n	8009bf6 <UART_SetConfig+0xaae>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be8:	2b0b      	cmp	r3, #11
 8009bea:	d101      	bne.n	8009bf0 <UART_SetConfig+0xaa8>
 8009bec:	2380      	movs	r3, #128	; 0x80
 8009bee:	e022      	b.n	8009c36 <UART_SetConfig+0xaee>
 8009bf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bf4:	e01f      	b.n	8009c36 <UART_SetConfig+0xaee>
 8009bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bfa:	e01c      	b.n	8009c36 <UART_SetConfig+0xaee>
 8009bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c00:	e019      	b.n	8009c36 <UART_SetConfig+0xaee>
 8009c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c06:	e016      	b.n	8009c36 <UART_SetConfig+0xaee>
 8009c08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c0c:	e013      	b.n	8009c36 <UART_SetConfig+0xaee>
 8009c0e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009c12:	e010      	b.n	8009c36 <UART_SetConfig+0xaee>
 8009c14:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009c18:	e00d      	b.n	8009c36 <UART_SetConfig+0xaee>
 8009c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c1e:	e00a      	b.n	8009c36 <UART_SetConfig+0xaee>
 8009c20:	f241 5355 	movw	r3, #5461	; 0x1555
 8009c24:	e007      	b.n	8009c36 <UART_SetConfig+0xaee>
 8009c26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c2a:	e004      	b.n	8009c36 <UART_SetConfig+0xaee>
 8009c2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009c30:	e001      	b.n	8009c36 <UART_SetConfig+0xaee>
 8009c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c38:	e003      	b.n	8009c42 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009c40:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f001 83e8 	beq.w	800b41a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	685a      	ldr	r2, [r3, #4]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	005b      	lsls	r3, r3, #1
 8009c52:	4413      	add	r3, r2
 8009c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d305      	bcc.n	8009c66 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d904      	bls.n	8009c70 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c6c:	f001 bbd5 	b.w	800b41a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8009c70:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009c74:	2b08      	cmp	r3, #8
 8009c76:	f000 8154 	beq.w	8009f22 <UART_SetConfig+0xdda>
 8009c7a:	2b08      	cmp	r3, #8
 8009c7c:	dc06      	bgt.n	8009c8c <UART_SetConfig+0xb44>
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	d00f      	beq.n	8009ca2 <UART_SetConfig+0xb5a>
 8009c82:	2b04      	cmp	r3, #4
 8009c84:	f000 80ac 	beq.w	8009de0 <UART_SetConfig+0xc98>
 8009c88:	f000 bc30 	b.w	800a4ec <UART_SetConfig+0x13a4>
 8009c8c:	2b20      	cmp	r3, #32
 8009c8e:	f000 832d 	beq.w	800a2ec <UART_SetConfig+0x11a4>
 8009c92:	2b40      	cmp	r3, #64	; 0x40
 8009c94:	f000 83a5 	beq.w	800a3e2 <UART_SetConfig+0x129a>
 8009c98:	2b10      	cmp	r3, #16
 8009c9a:	f000 81e3 	beq.w	800a064 <UART_SetConfig+0xf1c>
 8009c9e:	f000 bc25 	b.w	800a4ec <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009ca2:	f7fd fd6f 	bl	8007784 <HAL_RCCEx_GetD3PCLK1Freq>
 8009ca6:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009caa:	4618      	mov	r0, r3
 8009cac:	f04f 0100 	mov.w	r1, #0
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d067      	beq.n	8009d88 <UART_SetConfig+0xc40>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d05e      	beq.n	8009d7e <UART_SetConfig+0xc36>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d055      	beq.n	8009d74 <UART_SetConfig+0xc2c>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ccc:	2b03      	cmp	r3, #3
 8009cce:	d04c      	beq.n	8009d6a <UART_SetConfig+0xc22>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd4:	2b04      	cmp	r3, #4
 8009cd6:	d043      	beq.n	8009d60 <UART_SetConfig+0xc18>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cdc:	2b05      	cmp	r3, #5
 8009cde:	d03a      	beq.n	8009d56 <UART_SetConfig+0xc0e>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce4:	2b06      	cmp	r3, #6
 8009ce6:	d031      	beq.n	8009d4c <UART_SetConfig+0xc04>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cec:	2b07      	cmp	r3, #7
 8009cee:	d028      	beq.n	8009d42 <UART_SetConfig+0xbfa>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf4:	2b08      	cmp	r3, #8
 8009cf6:	d01f      	beq.n	8009d38 <UART_SetConfig+0xbf0>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfc:	2b09      	cmp	r3, #9
 8009cfe:	d016      	beq.n	8009d2e <UART_SetConfig+0xbe6>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d04:	2b0a      	cmp	r3, #10
 8009d06:	d00d      	beq.n	8009d24 <UART_SetConfig+0xbdc>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0c:	2b0b      	cmp	r3, #11
 8009d0e:	d104      	bne.n	8009d1a <UART_SetConfig+0xbd2>
 8009d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d14:	f04f 0400 	mov.w	r4, #0
 8009d18:	e03a      	b.n	8009d90 <UART_SetConfig+0xc48>
 8009d1a:	f04f 0301 	mov.w	r3, #1
 8009d1e:	f04f 0400 	mov.w	r4, #0
 8009d22:	e035      	b.n	8009d90 <UART_SetConfig+0xc48>
 8009d24:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009d28:	f04f 0400 	mov.w	r4, #0
 8009d2c:	e030      	b.n	8009d90 <UART_SetConfig+0xc48>
 8009d2e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009d32:	f04f 0400 	mov.w	r4, #0
 8009d36:	e02b      	b.n	8009d90 <UART_SetConfig+0xc48>
 8009d38:	f04f 0320 	mov.w	r3, #32
 8009d3c:	f04f 0400 	mov.w	r4, #0
 8009d40:	e026      	b.n	8009d90 <UART_SetConfig+0xc48>
 8009d42:	f04f 0310 	mov.w	r3, #16
 8009d46:	f04f 0400 	mov.w	r4, #0
 8009d4a:	e021      	b.n	8009d90 <UART_SetConfig+0xc48>
 8009d4c:	f04f 030c 	mov.w	r3, #12
 8009d50:	f04f 0400 	mov.w	r4, #0
 8009d54:	e01c      	b.n	8009d90 <UART_SetConfig+0xc48>
 8009d56:	f04f 030a 	mov.w	r3, #10
 8009d5a:	f04f 0400 	mov.w	r4, #0
 8009d5e:	e017      	b.n	8009d90 <UART_SetConfig+0xc48>
 8009d60:	f04f 0308 	mov.w	r3, #8
 8009d64:	f04f 0400 	mov.w	r4, #0
 8009d68:	e012      	b.n	8009d90 <UART_SetConfig+0xc48>
 8009d6a:	f04f 0306 	mov.w	r3, #6
 8009d6e:	f04f 0400 	mov.w	r4, #0
 8009d72:	e00d      	b.n	8009d90 <UART_SetConfig+0xc48>
 8009d74:	f04f 0304 	mov.w	r3, #4
 8009d78:	f04f 0400 	mov.w	r4, #0
 8009d7c:	e008      	b.n	8009d90 <UART_SetConfig+0xc48>
 8009d7e:	f04f 0302 	mov.w	r3, #2
 8009d82:	f04f 0400 	mov.w	r4, #0
 8009d86:	e003      	b.n	8009d90 <UART_SetConfig+0xc48>
 8009d88:	f04f 0301 	mov.w	r3, #1
 8009d8c:	f04f 0400 	mov.w	r4, #0
 8009d90:	461a      	mov	r2, r3
 8009d92:	4623      	mov	r3, r4
 8009d94:	f7f6 faa0 	bl	80002d8 <__aeabi_uldivmod>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	460c      	mov	r4, r1
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4622      	mov	r2, r4
 8009da0:	f04f 0300 	mov.w	r3, #0
 8009da4:	f04f 0400 	mov.w	r4, #0
 8009da8:	0214      	lsls	r4, r2, #8
 8009daa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009dae:	020b      	lsls	r3, r1, #8
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	6852      	ldr	r2, [r2, #4]
 8009db4:	0852      	lsrs	r2, r2, #1
 8009db6:	4611      	mov	r1, r2
 8009db8:	f04f 0200 	mov.w	r2, #0
 8009dbc:	eb13 0b01 	adds.w	fp, r3, r1
 8009dc0:	eb44 0c02 	adc.w	ip, r4, r2
 8009dc4:	4658      	mov	r0, fp
 8009dc6:	4661      	mov	r1, ip
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	f04f 0400 	mov.w	r4, #0
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	4623      	mov	r3, r4
 8009dd4:	f7f6 fa80 	bl	80002d8 <__aeabi_uldivmod>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	460c      	mov	r4, r1
 8009ddc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009dde:	e389      	b.n	800a4f4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009de0:	f107 0318 	add.w	r3, r7, #24
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fd fce3 	bl	80077b0 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	4618      	mov	r0, r3
 8009dee:	f04f 0100 	mov.w	r1, #0
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d067      	beq.n	8009eca <UART_SetConfig+0xd82>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d05e      	beq.n	8009ec0 <UART_SetConfig+0xd78>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d055      	beq.n	8009eb6 <UART_SetConfig+0xd6e>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0e:	2b03      	cmp	r3, #3
 8009e10:	d04c      	beq.n	8009eac <UART_SetConfig+0xd64>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e16:	2b04      	cmp	r3, #4
 8009e18:	d043      	beq.n	8009ea2 <UART_SetConfig+0xd5a>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1e:	2b05      	cmp	r3, #5
 8009e20:	d03a      	beq.n	8009e98 <UART_SetConfig+0xd50>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e26:	2b06      	cmp	r3, #6
 8009e28:	d031      	beq.n	8009e8e <UART_SetConfig+0xd46>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2e:	2b07      	cmp	r3, #7
 8009e30:	d028      	beq.n	8009e84 <UART_SetConfig+0xd3c>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e36:	2b08      	cmp	r3, #8
 8009e38:	d01f      	beq.n	8009e7a <UART_SetConfig+0xd32>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3e:	2b09      	cmp	r3, #9
 8009e40:	d016      	beq.n	8009e70 <UART_SetConfig+0xd28>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e46:	2b0a      	cmp	r3, #10
 8009e48:	d00d      	beq.n	8009e66 <UART_SetConfig+0xd1e>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4e:	2b0b      	cmp	r3, #11
 8009e50:	d104      	bne.n	8009e5c <UART_SetConfig+0xd14>
 8009e52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e56:	f04f 0400 	mov.w	r4, #0
 8009e5a:	e03a      	b.n	8009ed2 <UART_SetConfig+0xd8a>
 8009e5c:	f04f 0301 	mov.w	r3, #1
 8009e60:	f04f 0400 	mov.w	r4, #0
 8009e64:	e035      	b.n	8009ed2 <UART_SetConfig+0xd8a>
 8009e66:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009e6a:	f04f 0400 	mov.w	r4, #0
 8009e6e:	e030      	b.n	8009ed2 <UART_SetConfig+0xd8a>
 8009e70:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009e74:	f04f 0400 	mov.w	r4, #0
 8009e78:	e02b      	b.n	8009ed2 <UART_SetConfig+0xd8a>
 8009e7a:	f04f 0320 	mov.w	r3, #32
 8009e7e:	f04f 0400 	mov.w	r4, #0
 8009e82:	e026      	b.n	8009ed2 <UART_SetConfig+0xd8a>
 8009e84:	f04f 0310 	mov.w	r3, #16
 8009e88:	f04f 0400 	mov.w	r4, #0
 8009e8c:	e021      	b.n	8009ed2 <UART_SetConfig+0xd8a>
 8009e8e:	f04f 030c 	mov.w	r3, #12
 8009e92:	f04f 0400 	mov.w	r4, #0
 8009e96:	e01c      	b.n	8009ed2 <UART_SetConfig+0xd8a>
 8009e98:	f04f 030a 	mov.w	r3, #10
 8009e9c:	f04f 0400 	mov.w	r4, #0
 8009ea0:	e017      	b.n	8009ed2 <UART_SetConfig+0xd8a>
 8009ea2:	f04f 0308 	mov.w	r3, #8
 8009ea6:	f04f 0400 	mov.w	r4, #0
 8009eaa:	e012      	b.n	8009ed2 <UART_SetConfig+0xd8a>
 8009eac:	f04f 0306 	mov.w	r3, #6
 8009eb0:	f04f 0400 	mov.w	r4, #0
 8009eb4:	e00d      	b.n	8009ed2 <UART_SetConfig+0xd8a>
 8009eb6:	f04f 0304 	mov.w	r3, #4
 8009eba:	f04f 0400 	mov.w	r4, #0
 8009ebe:	e008      	b.n	8009ed2 <UART_SetConfig+0xd8a>
 8009ec0:	f04f 0302 	mov.w	r3, #2
 8009ec4:	f04f 0400 	mov.w	r4, #0
 8009ec8:	e003      	b.n	8009ed2 <UART_SetConfig+0xd8a>
 8009eca:	f04f 0301 	mov.w	r3, #1
 8009ece:	f04f 0400 	mov.w	r4, #0
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	4623      	mov	r3, r4
 8009ed6:	f7f6 f9ff 	bl	80002d8 <__aeabi_uldivmod>
 8009eda:	4603      	mov	r3, r0
 8009edc:	460c      	mov	r4, r1
 8009ede:	4619      	mov	r1, r3
 8009ee0:	4622      	mov	r2, r4
 8009ee2:	f04f 0300 	mov.w	r3, #0
 8009ee6:	f04f 0400 	mov.w	r4, #0
 8009eea:	0214      	lsls	r4, r2, #8
 8009eec:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009ef0:	020b      	lsls	r3, r1, #8
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	6852      	ldr	r2, [r2, #4]
 8009ef6:	0852      	lsrs	r2, r2, #1
 8009ef8:	4611      	mov	r1, r2
 8009efa:	f04f 0200 	mov.w	r2, #0
 8009efe:	eb13 0b01 	adds.w	fp, r3, r1
 8009f02:	eb44 0c02 	adc.w	ip, r4, r2
 8009f06:	4658      	mov	r0, fp
 8009f08:	4661      	mov	r1, ip
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	f04f 0400 	mov.w	r4, #0
 8009f12:	461a      	mov	r2, r3
 8009f14:	4623      	mov	r3, r4
 8009f16:	f7f6 f9df 	bl	80002d8 <__aeabi_uldivmod>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	460c      	mov	r4, r1
 8009f1e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009f20:	e2e8      	b.n	800a4f4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f22:	f107 030c 	add.w	r3, r7, #12
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fd fd8e 	bl	8007a48 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f04f 0100 	mov.w	r1, #0
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d067      	beq.n	800a00c <UART_SetConfig+0xec4>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d05e      	beq.n	800a002 <UART_SetConfig+0xeba>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d055      	beq.n	8009ff8 <UART_SetConfig+0xeb0>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f50:	2b03      	cmp	r3, #3
 8009f52:	d04c      	beq.n	8009fee <UART_SetConfig+0xea6>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f58:	2b04      	cmp	r3, #4
 8009f5a:	d043      	beq.n	8009fe4 <UART_SetConfig+0xe9c>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f60:	2b05      	cmp	r3, #5
 8009f62:	d03a      	beq.n	8009fda <UART_SetConfig+0xe92>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f68:	2b06      	cmp	r3, #6
 8009f6a:	d031      	beq.n	8009fd0 <UART_SetConfig+0xe88>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f70:	2b07      	cmp	r3, #7
 8009f72:	d028      	beq.n	8009fc6 <UART_SetConfig+0xe7e>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f78:	2b08      	cmp	r3, #8
 8009f7a:	d01f      	beq.n	8009fbc <UART_SetConfig+0xe74>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f80:	2b09      	cmp	r3, #9
 8009f82:	d016      	beq.n	8009fb2 <UART_SetConfig+0xe6a>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f88:	2b0a      	cmp	r3, #10
 8009f8a:	d00d      	beq.n	8009fa8 <UART_SetConfig+0xe60>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f90:	2b0b      	cmp	r3, #11
 8009f92:	d104      	bne.n	8009f9e <UART_SetConfig+0xe56>
 8009f94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f98:	f04f 0400 	mov.w	r4, #0
 8009f9c:	e03a      	b.n	800a014 <UART_SetConfig+0xecc>
 8009f9e:	f04f 0301 	mov.w	r3, #1
 8009fa2:	f04f 0400 	mov.w	r4, #0
 8009fa6:	e035      	b.n	800a014 <UART_SetConfig+0xecc>
 8009fa8:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009fac:	f04f 0400 	mov.w	r4, #0
 8009fb0:	e030      	b.n	800a014 <UART_SetConfig+0xecc>
 8009fb2:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009fb6:	f04f 0400 	mov.w	r4, #0
 8009fba:	e02b      	b.n	800a014 <UART_SetConfig+0xecc>
 8009fbc:	f04f 0320 	mov.w	r3, #32
 8009fc0:	f04f 0400 	mov.w	r4, #0
 8009fc4:	e026      	b.n	800a014 <UART_SetConfig+0xecc>
 8009fc6:	f04f 0310 	mov.w	r3, #16
 8009fca:	f04f 0400 	mov.w	r4, #0
 8009fce:	e021      	b.n	800a014 <UART_SetConfig+0xecc>
 8009fd0:	f04f 030c 	mov.w	r3, #12
 8009fd4:	f04f 0400 	mov.w	r4, #0
 8009fd8:	e01c      	b.n	800a014 <UART_SetConfig+0xecc>
 8009fda:	f04f 030a 	mov.w	r3, #10
 8009fde:	f04f 0400 	mov.w	r4, #0
 8009fe2:	e017      	b.n	800a014 <UART_SetConfig+0xecc>
 8009fe4:	f04f 0308 	mov.w	r3, #8
 8009fe8:	f04f 0400 	mov.w	r4, #0
 8009fec:	e012      	b.n	800a014 <UART_SetConfig+0xecc>
 8009fee:	f04f 0306 	mov.w	r3, #6
 8009ff2:	f04f 0400 	mov.w	r4, #0
 8009ff6:	e00d      	b.n	800a014 <UART_SetConfig+0xecc>
 8009ff8:	f04f 0304 	mov.w	r3, #4
 8009ffc:	f04f 0400 	mov.w	r4, #0
 800a000:	e008      	b.n	800a014 <UART_SetConfig+0xecc>
 800a002:	f04f 0302 	mov.w	r3, #2
 800a006:	f04f 0400 	mov.w	r4, #0
 800a00a:	e003      	b.n	800a014 <UART_SetConfig+0xecc>
 800a00c:	f04f 0301 	mov.w	r3, #1
 800a010:	f04f 0400 	mov.w	r4, #0
 800a014:	461a      	mov	r2, r3
 800a016:	4623      	mov	r3, r4
 800a018:	f7f6 f95e 	bl	80002d8 <__aeabi_uldivmod>
 800a01c:	4603      	mov	r3, r0
 800a01e:	460c      	mov	r4, r1
 800a020:	4619      	mov	r1, r3
 800a022:	4622      	mov	r2, r4
 800a024:	f04f 0300 	mov.w	r3, #0
 800a028:	f04f 0400 	mov.w	r4, #0
 800a02c:	0214      	lsls	r4, r2, #8
 800a02e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a032:	020b      	lsls	r3, r1, #8
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	6852      	ldr	r2, [r2, #4]
 800a038:	0852      	lsrs	r2, r2, #1
 800a03a:	4611      	mov	r1, r2
 800a03c:	f04f 0200 	mov.w	r2, #0
 800a040:	eb13 0b01 	adds.w	fp, r3, r1
 800a044:	eb44 0c02 	adc.w	ip, r4, r2
 800a048:	4658      	mov	r0, fp
 800a04a:	4661      	mov	r1, ip
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	f04f 0400 	mov.w	r4, #0
 800a054:	461a      	mov	r2, r3
 800a056:	4623      	mov	r3, r4
 800a058:	f7f6 f93e 	bl	80002d8 <__aeabi_uldivmod>
 800a05c:	4603      	mov	r3, r0
 800a05e:	460c      	mov	r4, r1
 800a060:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a062:	e247      	b.n	800a4f4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a064:	4b96      	ldr	r3, [pc, #600]	; (800a2c0 <UART_SetConfig+0x1178>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 0320 	and.w	r3, r3, #32
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f000 80a3 	beq.w	800a1b8 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a072:	4b93      	ldr	r3, [pc, #588]	; (800a2c0 <UART_SetConfig+0x1178>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	08db      	lsrs	r3, r3, #3
 800a078:	f003 0303 	and.w	r3, r3, #3
 800a07c:	4a91      	ldr	r2, [pc, #580]	; (800a2c4 <UART_SetConfig+0x117c>)
 800a07e:	fa22 f303 	lsr.w	r3, r2, r3
 800a082:	4618      	mov	r0, r3
 800a084:	f04f 0100 	mov.w	r1, #0
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d067      	beq.n	800a160 <UART_SetConfig+0x1018>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a094:	2b01      	cmp	r3, #1
 800a096:	d05e      	beq.n	800a156 <UART_SetConfig+0x100e>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d055      	beq.n	800a14c <UART_SetConfig+0x1004>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a4:	2b03      	cmp	r3, #3
 800a0a6:	d04c      	beq.n	800a142 <UART_SetConfig+0xffa>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ac:	2b04      	cmp	r3, #4
 800a0ae:	d043      	beq.n	800a138 <UART_SetConfig+0xff0>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b4:	2b05      	cmp	r3, #5
 800a0b6:	d03a      	beq.n	800a12e <UART_SetConfig+0xfe6>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0bc:	2b06      	cmp	r3, #6
 800a0be:	d031      	beq.n	800a124 <UART_SetConfig+0xfdc>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c4:	2b07      	cmp	r3, #7
 800a0c6:	d028      	beq.n	800a11a <UART_SetConfig+0xfd2>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0cc:	2b08      	cmp	r3, #8
 800a0ce:	d01f      	beq.n	800a110 <UART_SetConfig+0xfc8>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d4:	2b09      	cmp	r3, #9
 800a0d6:	d016      	beq.n	800a106 <UART_SetConfig+0xfbe>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0dc:	2b0a      	cmp	r3, #10
 800a0de:	d00d      	beq.n	800a0fc <UART_SetConfig+0xfb4>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e4:	2b0b      	cmp	r3, #11
 800a0e6:	d104      	bne.n	800a0f2 <UART_SetConfig+0xfaa>
 800a0e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0ec:	f04f 0400 	mov.w	r4, #0
 800a0f0:	e03a      	b.n	800a168 <UART_SetConfig+0x1020>
 800a0f2:	f04f 0301 	mov.w	r3, #1
 800a0f6:	f04f 0400 	mov.w	r4, #0
 800a0fa:	e035      	b.n	800a168 <UART_SetConfig+0x1020>
 800a0fc:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a100:	f04f 0400 	mov.w	r4, #0
 800a104:	e030      	b.n	800a168 <UART_SetConfig+0x1020>
 800a106:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a10a:	f04f 0400 	mov.w	r4, #0
 800a10e:	e02b      	b.n	800a168 <UART_SetConfig+0x1020>
 800a110:	f04f 0320 	mov.w	r3, #32
 800a114:	f04f 0400 	mov.w	r4, #0
 800a118:	e026      	b.n	800a168 <UART_SetConfig+0x1020>
 800a11a:	f04f 0310 	mov.w	r3, #16
 800a11e:	f04f 0400 	mov.w	r4, #0
 800a122:	e021      	b.n	800a168 <UART_SetConfig+0x1020>
 800a124:	f04f 030c 	mov.w	r3, #12
 800a128:	f04f 0400 	mov.w	r4, #0
 800a12c:	e01c      	b.n	800a168 <UART_SetConfig+0x1020>
 800a12e:	f04f 030a 	mov.w	r3, #10
 800a132:	f04f 0400 	mov.w	r4, #0
 800a136:	e017      	b.n	800a168 <UART_SetConfig+0x1020>
 800a138:	f04f 0308 	mov.w	r3, #8
 800a13c:	f04f 0400 	mov.w	r4, #0
 800a140:	e012      	b.n	800a168 <UART_SetConfig+0x1020>
 800a142:	f04f 0306 	mov.w	r3, #6
 800a146:	f04f 0400 	mov.w	r4, #0
 800a14a:	e00d      	b.n	800a168 <UART_SetConfig+0x1020>
 800a14c:	f04f 0304 	mov.w	r3, #4
 800a150:	f04f 0400 	mov.w	r4, #0
 800a154:	e008      	b.n	800a168 <UART_SetConfig+0x1020>
 800a156:	f04f 0302 	mov.w	r3, #2
 800a15a:	f04f 0400 	mov.w	r4, #0
 800a15e:	e003      	b.n	800a168 <UART_SetConfig+0x1020>
 800a160:	f04f 0301 	mov.w	r3, #1
 800a164:	f04f 0400 	mov.w	r4, #0
 800a168:	461a      	mov	r2, r3
 800a16a:	4623      	mov	r3, r4
 800a16c:	f7f6 f8b4 	bl	80002d8 <__aeabi_uldivmod>
 800a170:	4603      	mov	r3, r0
 800a172:	460c      	mov	r4, r1
 800a174:	4619      	mov	r1, r3
 800a176:	4622      	mov	r2, r4
 800a178:	f04f 0300 	mov.w	r3, #0
 800a17c:	f04f 0400 	mov.w	r4, #0
 800a180:	0214      	lsls	r4, r2, #8
 800a182:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a186:	020b      	lsls	r3, r1, #8
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	6852      	ldr	r2, [r2, #4]
 800a18c:	0852      	lsrs	r2, r2, #1
 800a18e:	4611      	mov	r1, r2
 800a190:	f04f 0200 	mov.w	r2, #0
 800a194:	eb13 0b01 	adds.w	fp, r3, r1
 800a198:	eb44 0c02 	adc.w	ip, r4, r2
 800a19c:	4658      	mov	r0, fp
 800a19e:	4661      	mov	r1, ip
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	f04f 0400 	mov.w	r4, #0
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	4623      	mov	r3, r4
 800a1ac:	f7f6 f894 	bl	80002d8 <__aeabi_uldivmod>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800a1b6:	e19d      	b.n	800a4f4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d05b      	beq.n	800a278 <UART_SetConfig+0x1130>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d053      	beq.n	800a270 <UART_SetConfig+0x1128>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d04b      	beq.n	800a268 <UART_SetConfig+0x1120>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d4:	2b03      	cmp	r3, #3
 800a1d6:	d043      	beq.n	800a260 <UART_SetConfig+0x1118>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1dc:	2b04      	cmp	r3, #4
 800a1de:	d03b      	beq.n	800a258 <UART_SetConfig+0x1110>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e4:	2b05      	cmp	r3, #5
 800a1e6:	d033      	beq.n	800a250 <UART_SetConfig+0x1108>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ec:	2b06      	cmp	r3, #6
 800a1ee:	d02b      	beq.n	800a248 <UART_SetConfig+0x1100>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f4:	2b07      	cmp	r3, #7
 800a1f6:	d023      	beq.n	800a240 <UART_SetConfig+0x10f8>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fc:	2b08      	cmp	r3, #8
 800a1fe:	d01b      	beq.n	800a238 <UART_SetConfig+0x10f0>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a204:	2b09      	cmp	r3, #9
 800a206:	d013      	beq.n	800a230 <UART_SetConfig+0x10e8>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20c:	2b0a      	cmp	r3, #10
 800a20e:	d00b      	beq.n	800a228 <UART_SetConfig+0x10e0>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a214:	2b0b      	cmp	r3, #11
 800a216:	d103      	bne.n	800a220 <UART_SetConfig+0x10d8>
 800a218:	4b2a      	ldr	r3, [pc, #168]	; (800a2c4 <UART_SetConfig+0x117c>)
 800a21a:	f04f 0400 	mov.w	r4, #0
 800a21e:	e02e      	b.n	800a27e <UART_SetConfig+0x1136>
 800a220:	4b29      	ldr	r3, [pc, #164]	; (800a2c8 <UART_SetConfig+0x1180>)
 800a222:	f04f 0403 	mov.w	r4, #3
 800a226:	e02a      	b.n	800a27e <UART_SetConfig+0x1136>
 800a228:	4b28      	ldr	r3, [pc, #160]	; (800a2cc <UART_SetConfig+0x1184>)
 800a22a:	f04f 0400 	mov.w	r4, #0
 800a22e:	e026      	b.n	800a27e <UART_SetConfig+0x1136>
 800a230:	4b27      	ldr	r3, [pc, #156]	; (800a2d0 <UART_SetConfig+0x1188>)
 800a232:	f04f 0400 	mov.w	r4, #0
 800a236:	e022      	b.n	800a27e <UART_SetConfig+0x1136>
 800a238:	4b26      	ldr	r3, [pc, #152]	; (800a2d4 <UART_SetConfig+0x118c>)
 800a23a:	f04f 0400 	mov.w	r4, #0
 800a23e:	e01e      	b.n	800a27e <UART_SetConfig+0x1136>
 800a240:	4b25      	ldr	r3, [pc, #148]	; (800a2d8 <UART_SetConfig+0x1190>)
 800a242:	f04f 0400 	mov.w	r4, #0
 800a246:	e01a      	b.n	800a27e <UART_SetConfig+0x1136>
 800a248:	a419      	add	r4, pc, #100	; (adr r4, 800a2b0 <UART_SetConfig+0x1168>)
 800a24a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a24e:	e016      	b.n	800a27e <UART_SetConfig+0x1136>
 800a250:	4b22      	ldr	r3, [pc, #136]	; (800a2dc <UART_SetConfig+0x1194>)
 800a252:	f04f 0400 	mov.w	r4, #0
 800a256:	e012      	b.n	800a27e <UART_SetConfig+0x1136>
 800a258:	4b21      	ldr	r3, [pc, #132]	; (800a2e0 <UART_SetConfig+0x1198>)
 800a25a:	f04f 0400 	mov.w	r4, #0
 800a25e:	e00e      	b.n	800a27e <UART_SetConfig+0x1136>
 800a260:	a415      	add	r4, pc, #84	; (adr r4, 800a2b8 <UART_SetConfig+0x1170>)
 800a262:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a266:	e00a      	b.n	800a27e <UART_SetConfig+0x1136>
 800a268:	4b1e      	ldr	r3, [pc, #120]	; (800a2e4 <UART_SetConfig+0x119c>)
 800a26a:	f04f 0400 	mov.w	r4, #0
 800a26e:	e006      	b.n	800a27e <UART_SetConfig+0x1136>
 800a270:	4b1d      	ldr	r3, [pc, #116]	; (800a2e8 <UART_SetConfig+0x11a0>)
 800a272:	f04f 0401 	mov.w	r4, #1
 800a276:	e002      	b.n	800a27e <UART_SetConfig+0x1136>
 800a278:	4b13      	ldr	r3, [pc, #76]	; (800a2c8 <UART_SetConfig+0x1180>)
 800a27a:	f04f 0403 	mov.w	r4, #3
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	6852      	ldr	r2, [r2, #4]
 800a282:	0852      	lsrs	r2, r2, #1
 800a284:	4611      	mov	r1, r2
 800a286:	f04f 0200 	mov.w	r2, #0
 800a28a:	eb13 0b01 	adds.w	fp, r3, r1
 800a28e:	eb44 0c02 	adc.w	ip, r4, r2
 800a292:	4658      	mov	r0, fp
 800a294:	4661      	mov	r1, ip
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f04f 0400 	mov.w	r4, #0
 800a29e:	461a      	mov	r2, r3
 800a2a0:	4623      	mov	r3, r4
 800a2a2:	f7f6 f819 	bl	80002d8 <__aeabi_uldivmod>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	460c      	mov	r4, r1
 800a2aa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a2ac:	e122      	b.n	800a4f4 <UART_SetConfig+0x13ac>
 800a2ae:	bf00      	nop
 800a2b0:	51615500 	.word	0x51615500
 800a2b4:	00000000 	.word	0x00000000
 800a2b8:	a2c2aa00 	.word	0xa2c2aa00
 800a2bc:	00000000 	.word	0x00000000
 800a2c0:	58024400 	.word	0x58024400
 800a2c4:	03d09000 	.word	0x03d09000
 800a2c8:	d0900000 	.word	0xd0900000
 800a2cc:	07a12000 	.word	0x07a12000
 800a2d0:	0f424000 	.word	0x0f424000
 800a2d4:	1e848000 	.word	0x1e848000
 800a2d8:	3d090000 	.word	0x3d090000
 800a2dc:	61a80000 	.word	0x61a80000
 800a2e0:	7a120000 	.word	0x7a120000
 800a2e4:	f4240000 	.word	0xf4240000
 800a2e8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d05b      	beq.n	800a3ac <UART_SetConfig+0x1264>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d053      	beq.n	800a3a4 <UART_SetConfig+0x125c>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a300:	2b02      	cmp	r3, #2
 800a302:	d04b      	beq.n	800a39c <UART_SetConfig+0x1254>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a308:	2b03      	cmp	r3, #3
 800a30a:	d043      	beq.n	800a394 <UART_SetConfig+0x124c>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a310:	2b04      	cmp	r3, #4
 800a312:	d03b      	beq.n	800a38c <UART_SetConfig+0x1244>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a318:	2b05      	cmp	r3, #5
 800a31a:	d033      	beq.n	800a384 <UART_SetConfig+0x123c>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a320:	2b06      	cmp	r3, #6
 800a322:	d02b      	beq.n	800a37c <UART_SetConfig+0x1234>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a328:	2b07      	cmp	r3, #7
 800a32a:	d023      	beq.n	800a374 <UART_SetConfig+0x122c>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a330:	2b08      	cmp	r3, #8
 800a332:	d01b      	beq.n	800a36c <UART_SetConfig+0x1224>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a338:	2b09      	cmp	r3, #9
 800a33a:	d013      	beq.n	800a364 <UART_SetConfig+0x121c>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a340:	2b0a      	cmp	r3, #10
 800a342:	d00b      	beq.n	800a35c <UART_SetConfig+0x1214>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a348:	2b0b      	cmp	r3, #11
 800a34a:	d103      	bne.n	800a354 <UART_SetConfig+0x120c>
 800a34c:	4bc0      	ldr	r3, [pc, #768]	; (800a650 <UART_SetConfig+0x1508>)
 800a34e:	f04f 0400 	mov.w	r4, #0
 800a352:	e02e      	b.n	800a3b2 <UART_SetConfig+0x126a>
 800a354:	4bbf      	ldr	r3, [pc, #764]	; (800a654 <UART_SetConfig+0x150c>)
 800a356:	f04f 0400 	mov.w	r4, #0
 800a35a:	e02a      	b.n	800a3b2 <UART_SetConfig+0x126a>
 800a35c:	4bbe      	ldr	r3, [pc, #760]	; (800a658 <UART_SetConfig+0x1510>)
 800a35e:	f04f 0400 	mov.w	r4, #0
 800a362:	e026      	b.n	800a3b2 <UART_SetConfig+0x126a>
 800a364:	4bbd      	ldr	r3, [pc, #756]	; (800a65c <UART_SetConfig+0x1514>)
 800a366:	f04f 0400 	mov.w	r4, #0
 800a36a:	e022      	b.n	800a3b2 <UART_SetConfig+0x126a>
 800a36c:	4bbc      	ldr	r3, [pc, #752]	; (800a660 <UART_SetConfig+0x1518>)
 800a36e:	f04f 0400 	mov.w	r4, #0
 800a372:	e01e      	b.n	800a3b2 <UART_SetConfig+0x126a>
 800a374:	4bbb      	ldr	r3, [pc, #748]	; (800a664 <UART_SetConfig+0x151c>)
 800a376:	f04f 0400 	mov.w	r4, #0
 800a37a:	e01a      	b.n	800a3b2 <UART_SetConfig+0x126a>
 800a37c:	a4b0      	add	r4, pc, #704	; (adr r4, 800a640 <UART_SetConfig+0x14f8>)
 800a37e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a382:	e016      	b.n	800a3b2 <UART_SetConfig+0x126a>
 800a384:	4bb8      	ldr	r3, [pc, #736]	; (800a668 <UART_SetConfig+0x1520>)
 800a386:	f04f 0400 	mov.w	r4, #0
 800a38a:	e012      	b.n	800a3b2 <UART_SetConfig+0x126a>
 800a38c:	4bb7      	ldr	r3, [pc, #732]	; (800a66c <UART_SetConfig+0x1524>)
 800a38e:	f04f 0400 	mov.w	r4, #0
 800a392:	e00e      	b.n	800a3b2 <UART_SetConfig+0x126a>
 800a394:	a4ac      	add	r4, pc, #688	; (adr r4, 800a648 <UART_SetConfig+0x1500>)
 800a396:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a39a:	e00a      	b.n	800a3b2 <UART_SetConfig+0x126a>
 800a39c:	4bb4      	ldr	r3, [pc, #720]	; (800a670 <UART_SetConfig+0x1528>)
 800a39e:	f04f 0400 	mov.w	r4, #0
 800a3a2:	e006      	b.n	800a3b2 <UART_SetConfig+0x126a>
 800a3a4:	4bb3      	ldr	r3, [pc, #716]	; (800a674 <UART_SetConfig+0x152c>)
 800a3a6:	f04f 0400 	mov.w	r4, #0
 800a3aa:	e002      	b.n	800a3b2 <UART_SetConfig+0x126a>
 800a3ac:	4ba9      	ldr	r3, [pc, #676]	; (800a654 <UART_SetConfig+0x150c>)
 800a3ae:	f04f 0400 	mov.w	r4, #0
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	6852      	ldr	r2, [r2, #4]
 800a3b6:	0852      	lsrs	r2, r2, #1
 800a3b8:	4611      	mov	r1, r2
 800a3ba:	f04f 0200 	mov.w	r2, #0
 800a3be:	eb13 0b01 	adds.w	fp, r3, r1
 800a3c2:	eb44 0c02 	adc.w	ip, r4, r2
 800a3c6:	4658      	mov	r0, fp
 800a3c8:	4661      	mov	r1, ip
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f04f 0400 	mov.w	r4, #0
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	4623      	mov	r3, r4
 800a3d6:	f7f5 ff7f 	bl	80002d8 <__aeabi_uldivmod>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	460c      	mov	r4, r1
 800a3de:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a3e0:	e088      	b.n	800a4f4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d064      	beq.n	800a4b4 <UART_SetConfig+0x136c>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d05b      	beq.n	800a4aa <UART_SetConfig+0x1362>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d052      	beq.n	800a4a0 <UART_SetConfig+0x1358>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	d04a      	beq.n	800a498 <UART_SetConfig+0x1350>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a406:	2b04      	cmp	r3, #4
 800a408:	d041      	beq.n	800a48e <UART_SetConfig+0x1346>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40e:	2b05      	cmp	r3, #5
 800a410:	d039      	beq.n	800a486 <UART_SetConfig+0x133e>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a416:	2b06      	cmp	r3, #6
 800a418:	d031      	beq.n	800a47e <UART_SetConfig+0x1336>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41e:	2b07      	cmp	r3, #7
 800a420:	d028      	beq.n	800a474 <UART_SetConfig+0x132c>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a426:	2b08      	cmp	r3, #8
 800a428:	d01f      	beq.n	800a46a <UART_SetConfig+0x1322>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42e:	2b09      	cmp	r3, #9
 800a430:	d016      	beq.n	800a460 <UART_SetConfig+0x1318>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a436:	2b0a      	cmp	r3, #10
 800a438:	d00d      	beq.n	800a456 <UART_SetConfig+0x130e>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43e:	2b0b      	cmp	r3, #11
 800a440:	d104      	bne.n	800a44c <UART_SetConfig+0x1304>
 800a442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a446:	f04f 0400 	mov.w	r4, #0
 800a44a:	e037      	b.n	800a4bc <UART_SetConfig+0x1374>
 800a44c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a450:	f04f 0400 	mov.w	r4, #0
 800a454:	e032      	b.n	800a4bc <UART_SetConfig+0x1374>
 800a456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a45a:	f04f 0400 	mov.w	r4, #0
 800a45e:	e02d      	b.n	800a4bc <UART_SetConfig+0x1374>
 800a460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a464:	f04f 0400 	mov.w	r4, #0
 800a468:	e028      	b.n	800a4bc <UART_SetConfig+0x1374>
 800a46a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a46e:	f04f 0400 	mov.w	r4, #0
 800a472:	e023      	b.n	800a4bc <UART_SetConfig+0x1374>
 800a474:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a478:	f04f 0400 	mov.w	r4, #0
 800a47c:	e01e      	b.n	800a4bc <UART_SetConfig+0x1374>
 800a47e:	4b7e      	ldr	r3, [pc, #504]	; (800a678 <UART_SetConfig+0x1530>)
 800a480:	f04f 0400 	mov.w	r4, #0
 800a484:	e01a      	b.n	800a4bc <UART_SetConfig+0x1374>
 800a486:	4b7d      	ldr	r3, [pc, #500]	; (800a67c <UART_SetConfig+0x1534>)
 800a488:	f04f 0400 	mov.w	r4, #0
 800a48c:	e016      	b.n	800a4bc <UART_SetConfig+0x1374>
 800a48e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a492:	f04f 0400 	mov.w	r4, #0
 800a496:	e011      	b.n	800a4bc <UART_SetConfig+0x1374>
 800a498:	4b79      	ldr	r3, [pc, #484]	; (800a680 <UART_SetConfig+0x1538>)
 800a49a:	f04f 0400 	mov.w	r4, #0
 800a49e:	e00d      	b.n	800a4bc <UART_SetConfig+0x1374>
 800a4a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a4a4:	f04f 0400 	mov.w	r4, #0
 800a4a8:	e008      	b.n	800a4bc <UART_SetConfig+0x1374>
 800a4aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a4ae:	f04f 0400 	mov.w	r4, #0
 800a4b2:	e003      	b.n	800a4bc <UART_SetConfig+0x1374>
 800a4b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a4b8:	f04f 0400 	mov.w	r4, #0
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	6852      	ldr	r2, [r2, #4]
 800a4c0:	0852      	lsrs	r2, r2, #1
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	f04f 0200 	mov.w	r2, #0
 800a4c8:	eb13 0b01 	adds.w	fp, r3, r1
 800a4cc:	eb44 0c02 	adc.w	ip, r4, r2
 800a4d0:	4658      	mov	r0, fp
 800a4d2:	4661      	mov	r1, ip
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	f04f 0400 	mov.w	r4, #0
 800a4dc:	461a      	mov	r2, r3
 800a4de:	4623      	mov	r3, r4
 800a4e0:	f7f5 fefa 	bl	80002d8 <__aeabi_uldivmod>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a4ea:	e003      	b.n	800a4f4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800a4f2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4fa:	d309      	bcc.n	800a510 <UART_SetConfig+0x13c8>
 800a4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a502:	d205      	bcs.n	800a510 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a50a:	60da      	str	r2, [r3, #12]
 800a50c:	f000 bf85 	b.w	800b41a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a516:	f000 bf80 	b.w	800b41a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a522:	f040 83da 	bne.w	800acda <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800a526:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a52a:	2b40      	cmp	r3, #64	; 0x40
 800a52c:	f200 83b3 	bhi.w	800ac96 <UART_SetConfig+0x1b4e>
 800a530:	a201      	add	r2, pc, #4	; (adr r2, 800a538 <UART_SetConfig+0x13f0>)
 800a532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a536:	bf00      	nop
 800a538:	0800a685 	.word	0x0800a685
 800a53c:	0800a73d 	.word	0x0800a73d
 800a540:	0800ac97 	.word	0x0800ac97
 800a544:	0800ac97 	.word	0x0800ac97
 800a548:	0800a7f5 	.word	0x0800a7f5
 800a54c:	0800ac97 	.word	0x0800ac97
 800a550:	0800ac97 	.word	0x0800ac97
 800a554:	0800ac97 	.word	0x0800ac97
 800a558:	0800a8b1 	.word	0x0800a8b1
 800a55c:	0800ac97 	.word	0x0800ac97
 800a560:	0800ac97 	.word	0x0800ac97
 800a564:	0800ac97 	.word	0x0800ac97
 800a568:	0800ac97 	.word	0x0800ac97
 800a56c:	0800ac97 	.word	0x0800ac97
 800a570:	0800ac97 	.word	0x0800ac97
 800a574:	0800ac97 	.word	0x0800ac97
 800a578:	0800a96d 	.word	0x0800a96d
 800a57c:	0800ac97 	.word	0x0800ac97
 800a580:	0800ac97 	.word	0x0800ac97
 800a584:	0800ac97 	.word	0x0800ac97
 800a588:	0800ac97 	.word	0x0800ac97
 800a58c:	0800ac97 	.word	0x0800ac97
 800a590:	0800ac97 	.word	0x0800ac97
 800a594:	0800ac97 	.word	0x0800ac97
 800a598:	0800ac97 	.word	0x0800ac97
 800a59c:	0800ac97 	.word	0x0800ac97
 800a5a0:	0800ac97 	.word	0x0800ac97
 800a5a4:	0800ac97 	.word	0x0800ac97
 800a5a8:	0800ac97 	.word	0x0800ac97
 800a5ac:	0800ac97 	.word	0x0800ac97
 800a5b0:	0800ac97 	.word	0x0800ac97
 800a5b4:	0800ac97 	.word	0x0800ac97
 800a5b8:	0800aadf 	.word	0x0800aadf
 800a5bc:	0800ac97 	.word	0x0800ac97
 800a5c0:	0800ac97 	.word	0x0800ac97
 800a5c4:	0800ac97 	.word	0x0800ac97
 800a5c8:	0800ac97 	.word	0x0800ac97
 800a5cc:	0800ac97 	.word	0x0800ac97
 800a5d0:	0800ac97 	.word	0x0800ac97
 800a5d4:	0800ac97 	.word	0x0800ac97
 800a5d8:	0800ac97 	.word	0x0800ac97
 800a5dc:	0800ac97 	.word	0x0800ac97
 800a5e0:	0800ac97 	.word	0x0800ac97
 800a5e4:	0800ac97 	.word	0x0800ac97
 800a5e8:	0800ac97 	.word	0x0800ac97
 800a5ec:	0800ac97 	.word	0x0800ac97
 800a5f0:	0800ac97 	.word	0x0800ac97
 800a5f4:	0800ac97 	.word	0x0800ac97
 800a5f8:	0800ac97 	.word	0x0800ac97
 800a5fc:	0800ac97 	.word	0x0800ac97
 800a600:	0800ac97 	.word	0x0800ac97
 800a604:	0800ac97 	.word	0x0800ac97
 800a608:	0800ac97 	.word	0x0800ac97
 800a60c:	0800ac97 	.word	0x0800ac97
 800a610:	0800ac97 	.word	0x0800ac97
 800a614:	0800ac97 	.word	0x0800ac97
 800a618:	0800ac97 	.word	0x0800ac97
 800a61c:	0800ac97 	.word	0x0800ac97
 800a620:	0800ac97 	.word	0x0800ac97
 800a624:	0800ac97 	.word	0x0800ac97
 800a628:	0800ac97 	.word	0x0800ac97
 800a62c:	0800ac97 	.word	0x0800ac97
 800a630:	0800ac97 	.word	0x0800ac97
 800a634:	0800ac97 	.word	0x0800ac97
 800a638:	0800abd5 	.word	0x0800abd5
 800a63c:	f3af 8000 	nop.w
 800a640:	05161500 	.word	0x05161500
 800a644:	00000000 	.word	0x00000000
 800a648:	0a2c2a00 	.word	0x0a2c2a00
 800a64c:	00000000 	.word	0x00000000
 800a650:	003d0900 	.word	0x003d0900
 800a654:	3d090000 	.word	0x3d090000
 800a658:	007a1200 	.word	0x007a1200
 800a65c:	00f42400 	.word	0x00f42400
 800a660:	01e84800 	.word	0x01e84800
 800a664:	03d09000 	.word	0x03d09000
 800a668:	061a8000 	.word	0x061a8000
 800a66c:	07a12000 	.word	0x07a12000
 800a670:	0f424000 	.word	0x0f424000
 800a674:	1e848000 	.word	0x1e848000
 800a678:	000aaa00 	.word	0x000aaa00
 800a67c:	000ccc00 	.word	0x000ccc00
 800a680:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a684:	f7fb fefc 	bl	8006480 <HAL_RCC_GetPCLK1Freq>
 800a688:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d044      	beq.n	800a71c <UART_SetConfig+0x15d4>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a696:	2b01      	cmp	r3, #1
 800a698:	d03e      	beq.n	800a718 <UART_SetConfig+0x15d0>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d038      	beq.n	800a714 <UART_SetConfig+0x15cc>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a6:	2b03      	cmp	r3, #3
 800a6a8:	d032      	beq.n	800a710 <UART_SetConfig+0x15c8>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	d02c      	beq.n	800a70c <UART_SetConfig+0x15c4>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b6:	2b05      	cmp	r3, #5
 800a6b8:	d026      	beq.n	800a708 <UART_SetConfig+0x15c0>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6be:	2b06      	cmp	r3, #6
 800a6c0:	d020      	beq.n	800a704 <UART_SetConfig+0x15bc>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c6:	2b07      	cmp	r3, #7
 800a6c8:	d01a      	beq.n	800a700 <UART_SetConfig+0x15b8>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ce:	2b08      	cmp	r3, #8
 800a6d0:	d014      	beq.n	800a6fc <UART_SetConfig+0x15b4>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d6:	2b09      	cmp	r3, #9
 800a6d8:	d00e      	beq.n	800a6f8 <UART_SetConfig+0x15b0>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6de:	2b0a      	cmp	r3, #10
 800a6e0:	d008      	beq.n	800a6f4 <UART_SetConfig+0x15ac>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e6:	2b0b      	cmp	r3, #11
 800a6e8:	d102      	bne.n	800a6f0 <UART_SetConfig+0x15a8>
 800a6ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6ee:	e016      	b.n	800a71e <UART_SetConfig+0x15d6>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e014      	b.n	800a71e <UART_SetConfig+0x15d6>
 800a6f4:	2380      	movs	r3, #128	; 0x80
 800a6f6:	e012      	b.n	800a71e <UART_SetConfig+0x15d6>
 800a6f8:	2340      	movs	r3, #64	; 0x40
 800a6fa:	e010      	b.n	800a71e <UART_SetConfig+0x15d6>
 800a6fc:	2320      	movs	r3, #32
 800a6fe:	e00e      	b.n	800a71e <UART_SetConfig+0x15d6>
 800a700:	2310      	movs	r3, #16
 800a702:	e00c      	b.n	800a71e <UART_SetConfig+0x15d6>
 800a704:	230c      	movs	r3, #12
 800a706:	e00a      	b.n	800a71e <UART_SetConfig+0x15d6>
 800a708:	230a      	movs	r3, #10
 800a70a:	e008      	b.n	800a71e <UART_SetConfig+0x15d6>
 800a70c:	2308      	movs	r3, #8
 800a70e:	e006      	b.n	800a71e <UART_SetConfig+0x15d6>
 800a710:	2306      	movs	r3, #6
 800a712:	e004      	b.n	800a71e <UART_SetConfig+0x15d6>
 800a714:	2304      	movs	r3, #4
 800a716:	e002      	b.n	800a71e <UART_SetConfig+0x15d6>
 800a718:	2302      	movs	r3, #2
 800a71a:	e000      	b.n	800a71e <UART_SetConfig+0x15d6>
 800a71c:	2301      	movs	r3, #1
 800a71e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a720:	fbb2 f3f3 	udiv	r3, r2, r3
 800a724:	005a      	lsls	r2, r3, #1
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	085b      	lsrs	r3, r3, #1
 800a72c:	441a      	add	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	fbb2 f3f3 	udiv	r3, r2, r3
 800a736:	b29b      	uxth	r3, r3
 800a738:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a73a:	e2b0      	b.n	800ac9e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a73c:	f7fb feb6 	bl	80064ac <HAL_RCC_GetPCLK2Freq>
 800a740:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a746:	2b00      	cmp	r3, #0
 800a748:	d044      	beq.n	800a7d4 <UART_SetConfig+0x168c>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d03e      	beq.n	800a7d0 <UART_SetConfig+0x1688>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a756:	2b02      	cmp	r3, #2
 800a758:	d038      	beq.n	800a7cc <UART_SetConfig+0x1684>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	2b03      	cmp	r3, #3
 800a760:	d032      	beq.n	800a7c8 <UART_SetConfig+0x1680>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a766:	2b04      	cmp	r3, #4
 800a768:	d02c      	beq.n	800a7c4 <UART_SetConfig+0x167c>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76e:	2b05      	cmp	r3, #5
 800a770:	d026      	beq.n	800a7c0 <UART_SetConfig+0x1678>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a776:	2b06      	cmp	r3, #6
 800a778:	d020      	beq.n	800a7bc <UART_SetConfig+0x1674>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	2b07      	cmp	r3, #7
 800a780:	d01a      	beq.n	800a7b8 <UART_SetConfig+0x1670>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a786:	2b08      	cmp	r3, #8
 800a788:	d014      	beq.n	800a7b4 <UART_SetConfig+0x166c>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78e:	2b09      	cmp	r3, #9
 800a790:	d00e      	beq.n	800a7b0 <UART_SetConfig+0x1668>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a796:	2b0a      	cmp	r3, #10
 800a798:	d008      	beq.n	800a7ac <UART_SetConfig+0x1664>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79e:	2b0b      	cmp	r3, #11
 800a7a0:	d102      	bne.n	800a7a8 <UART_SetConfig+0x1660>
 800a7a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7a6:	e016      	b.n	800a7d6 <UART_SetConfig+0x168e>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e014      	b.n	800a7d6 <UART_SetConfig+0x168e>
 800a7ac:	2380      	movs	r3, #128	; 0x80
 800a7ae:	e012      	b.n	800a7d6 <UART_SetConfig+0x168e>
 800a7b0:	2340      	movs	r3, #64	; 0x40
 800a7b2:	e010      	b.n	800a7d6 <UART_SetConfig+0x168e>
 800a7b4:	2320      	movs	r3, #32
 800a7b6:	e00e      	b.n	800a7d6 <UART_SetConfig+0x168e>
 800a7b8:	2310      	movs	r3, #16
 800a7ba:	e00c      	b.n	800a7d6 <UART_SetConfig+0x168e>
 800a7bc:	230c      	movs	r3, #12
 800a7be:	e00a      	b.n	800a7d6 <UART_SetConfig+0x168e>
 800a7c0:	230a      	movs	r3, #10
 800a7c2:	e008      	b.n	800a7d6 <UART_SetConfig+0x168e>
 800a7c4:	2308      	movs	r3, #8
 800a7c6:	e006      	b.n	800a7d6 <UART_SetConfig+0x168e>
 800a7c8:	2306      	movs	r3, #6
 800a7ca:	e004      	b.n	800a7d6 <UART_SetConfig+0x168e>
 800a7cc:	2304      	movs	r3, #4
 800a7ce:	e002      	b.n	800a7d6 <UART_SetConfig+0x168e>
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	e000      	b.n	800a7d6 <UART_SetConfig+0x168e>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7dc:	005a      	lsls	r2, r3, #1
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	085b      	lsrs	r3, r3, #1
 800a7e4:	441a      	add	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a7f2:	e254      	b.n	800ac9e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7f4:	f107 0318 	add.w	r3, r7, #24
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7fc ffd9 	bl	80077b0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7fe:	69fa      	ldr	r2, [r7, #28]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a804:	2b00      	cmp	r3, #0
 800a806:	d044      	beq.n	800a892 <UART_SetConfig+0x174a>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d03e      	beq.n	800a88e <UART_SetConfig+0x1746>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a814:	2b02      	cmp	r3, #2
 800a816:	d038      	beq.n	800a88a <UART_SetConfig+0x1742>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81c:	2b03      	cmp	r3, #3
 800a81e:	d032      	beq.n	800a886 <UART_SetConfig+0x173e>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a824:	2b04      	cmp	r3, #4
 800a826:	d02c      	beq.n	800a882 <UART_SetConfig+0x173a>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82c:	2b05      	cmp	r3, #5
 800a82e:	d026      	beq.n	800a87e <UART_SetConfig+0x1736>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a834:	2b06      	cmp	r3, #6
 800a836:	d020      	beq.n	800a87a <UART_SetConfig+0x1732>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83c:	2b07      	cmp	r3, #7
 800a83e:	d01a      	beq.n	800a876 <UART_SetConfig+0x172e>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a844:	2b08      	cmp	r3, #8
 800a846:	d014      	beq.n	800a872 <UART_SetConfig+0x172a>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84c:	2b09      	cmp	r3, #9
 800a84e:	d00e      	beq.n	800a86e <UART_SetConfig+0x1726>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a854:	2b0a      	cmp	r3, #10
 800a856:	d008      	beq.n	800a86a <UART_SetConfig+0x1722>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85c:	2b0b      	cmp	r3, #11
 800a85e:	d102      	bne.n	800a866 <UART_SetConfig+0x171e>
 800a860:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a864:	e016      	b.n	800a894 <UART_SetConfig+0x174c>
 800a866:	2301      	movs	r3, #1
 800a868:	e014      	b.n	800a894 <UART_SetConfig+0x174c>
 800a86a:	2380      	movs	r3, #128	; 0x80
 800a86c:	e012      	b.n	800a894 <UART_SetConfig+0x174c>
 800a86e:	2340      	movs	r3, #64	; 0x40
 800a870:	e010      	b.n	800a894 <UART_SetConfig+0x174c>
 800a872:	2320      	movs	r3, #32
 800a874:	e00e      	b.n	800a894 <UART_SetConfig+0x174c>
 800a876:	2310      	movs	r3, #16
 800a878:	e00c      	b.n	800a894 <UART_SetConfig+0x174c>
 800a87a:	230c      	movs	r3, #12
 800a87c:	e00a      	b.n	800a894 <UART_SetConfig+0x174c>
 800a87e:	230a      	movs	r3, #10
 800a880:	e008      	b.n	800a894 <UART_SetConfig+0x174c>
 800a882:	2308      	movs	r3, #8
 800a884:	e006      	b.n	800a894 <UART_SetConfig+0x174c>
 800a886:	2306      	movs	r3, #6
 800a888:	e004      	b.n	800a894 <UART_SetConfig+0x174c>
 800a88a:	2304      	movs	r3, #4
 800a88c:	e002      	b.n	800a894 <UART_SetConfig+0x174c>
 800a88e:	2302      	movs	r3, #2
 800a890:	e000      	b.n	800a894 <UART_SetConfig+0x174c>
 800a892:	2301      	movs	r3, #1
 800a894:	fbb2 f3f3 	udiv	r3, r2, r3
 800a898:	005a      	lsls	r2, r3, #1
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	085b      	lsrs	r3, r3, #1
 800a8a0:	441a      	add	r2, r3
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a8ae:	e1f6      	b.n	800ac9e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8b0:	f107 030c 	add.w	r3, r7, #12
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fd f8c7 	bl	8007a48 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8ba:	693a      	ldr	r2, [r7, #16]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d044      	beq.n	800a94e <UART_SetConfig+0x1806>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d03e      	beq.n	800a94a <UART_SetConfig+0x1802>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d038      	beq.n	800a946 <UART_SetConfig+0x17fe>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d8:	2b03      	cmp	r3, #3
 800a8da:	d032      	beq.n	800a942 <UART_SetConfig+0x17fa>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e0:	2b04      	cmp	r3, #4
 800a8e2:	d02c      	beq.n	800a93e <UART_SetConfig+0x17f6>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e8:	2b05      	cmp	r3, #5
 800a8ea:	d026      	beq.n	800a93a <UART_SetConfig+0x17f2>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f0:	2b06      	cmp	r3, #6
 800a8f2:	d020      	beq.n	800a936 <UART_SetConfig+0x17ee>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f8:	2b07      	cmp	r3, #7
 800a8fa:	d01a      	beq.n	800a932 <UART_SetConfig+0x17ea>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a900:	2b08      	cmp	r3, #8
 800a902:	d014      	beq.n	800a92e <UART_SetConfig+0x17e6>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a908:	2b09      	cmp	r3, #9
 800a90a:	d00e      	beq.n	800a92a <UART_SetConfig+0x17e2>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a910:	2b0a      	cmp	r3, #10
 800a912:	d008      	beq.n	800a926 <UART_SetConfig+0x17de>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a918:	2b0b      	cmp	r3, #11
 800a91a:	d102      	bne.n	800a922 <UART_SetConfig+0x17da>
 800a91c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a920:	e016      	b.n	800a950 <UART_SetConfig+0x1808>
 800a922:	2301      	movs	r3, #1
 800a924:	e014      	b.n	800a950 <UART_SetConfig+0x1808>
 800a926:	2380      	movs	r3, #128	; 0x80
 800a928:	e012      	b.n	800a950 <UART_SetConfig+0x1808>
 800a92a:	2340      	movs	r3, #64	; 0x40
 800a92c:	e010      	b.n	800a950 <UART_SetConfig+0x1808>
 800a92e:	2320      	movs	r3, #32
 800a930:	e00e      	b.n	800a950 <UART_SetConfig+0x1808>
 800a932:	2310      	movs	r3, #16
 800a934:	e00c      	b.n	800a950 <UART_SetConfig+0x1808>
 800a936:	230c      	movs	r3, #12
 800a938:	e00a      	b.n	800a950 <UART_SetConfig+0x1808>
 800a93a:	230a      	movs	r3, #10
 800a93c:	e008      	b.n	800a950 <UART_SetConfig+0x1808>
 800a93e:	2308      	movs	r3, #8
 800a940:	e006      	b.n	800a950 <UART_SetConfig+0x1808>
 800a942:	2306      	movs	r3, #6
 800a944:	e004      	b.n	800a950 <UART_SetConfig+0x1808>
 800a946:	2304      	movs	r3, #4
 800a948:	e002      	b.n	800a950 <UART_SetConfig+0x1808>
 800a94a:	2302      	movs	r3, #2
 800a94c:	e000      	b.n	800a950 <UART_SetConfig+0x1808>
 800a94e:	2301      	movs	r3, #1
 800a950:	fbb2 f3f3 	udiv	r3, r2, r3
 800a954:	005a      	lsls	r2, r3, #1
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	085b      	lsrs	r3, r3, #1
 800a95c:	441a      	add	r2, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	fbb2 f3f3 	udiv	r3, r2, r3
 800a966:	b29b      	uxth	r3, r3
 800a968:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a96a:	e198      	b.n	800ac9e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a96c:	4b87      	ldr	r3, [pc, #540]	; (800ab8c <UART_SetConfig+0x1a44>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 0320 	and.w	r3, r3, #32
 800a974:	2b00      	cmp	r3, #0
 800a976:	d05e      	beq.n	800aa36 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a978:	4b84      	ldr	r3, [pc, #528]	; (800ab8c <UART_SetConfig+0x1a44>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	08db      	lsrs	r3, r3, #3
 800a97e:	f003 0303 	and.w	r3, r3, #3
 800a982:	4a83      	ldr	r2, [pc, #524]	; (800ab90 <UART_SetConfig+0x1a48>)
 800a984:	40da      	lsrs	r2, r3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d044      	beq.n	800aa18 <UART_SetConfig+0x18d0>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a992:	2b01      	cmp	r3, #1
 800a994:	d03e      	beq.n	800aa14 <UART_SetConfig+0x18cc>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d038      	beq.n	800aa10 <UART_SetConfig+0x18c8>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a2:	2b03      	cmp	r3, #3
 800a9a4:	d032      	beq.n	800aa0c <UART_SetConfig+0x18c4>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9aa:	2b04      	cmp	r3, #4
 800a9ac:	d02c      	beq.n	800aa08 <UART_SetConfig+0x18c0>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b2:	2b05      	cmp	r3, #5
 800a9b4:	d026      	beq.n	800aa04 <UART_SetConfig+0x18bc>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ba:	2b06      	cmp	r3, #6
 800a9bc:	d020      	beq.n	800aa00 <UART_SetConfig+0x18b8>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c2:	2b07      	cmp	r3, #7
 800a9c4:	d01a      	beq.n	800a9fc <UART_SetConfig+0x18b4>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ca:	2b08      	cmp	r3, #8
 800a9cc:	d014      	beq.n	800a9f8 <UART_SetConfig+0x18b0>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d2:	2b09      	cmp	r3, #9
 800a9d4:	d00e      	beq.n	800a9f4 <UART_SetConfig+0x18ac>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9da:	2b0a      	cmp	r3, #10
 800a9dc:	d008      	beq.n	800a9f0 <UART_SetConfig+0x18a8>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e2:	2b0b      	cmp	r3, #11
 800a9e4:	d102      	bne.n	800a9ec <UART_SetConfig+0x18a4>
 800a9e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9ea:	e016      	b.n	800aa1a <UART_SetConfig+0x18d2>
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e014      	b.n	800aa1a <UART_SetConfig+0x18d2>
 800a9f0:	2380      	movs	r3, #128	; 0x80
 800a9f2:	e012      	b.n	800aa1a <UART_SetConfig+0x18d2>
 800a9f4:	2340      	movs	r3, #64	; 0x40
 800a9f6:	e010      	b.n	800aa1a <UART_SetConfig+0x18d2>
 800a9f8:	2320      	movs	r3, #32
 800a9fa:	e00e      	b.n	800aa1a <UART_SetConfig+0x18d2>
 800a9fc:	2310      	movs	r3, #16
 800a9fe:	e00c      	b.n	800aa1a <UART_SetConfig+0x18d2>
 800aa00:	230c      	movs	r3, #12
 800aa02:	e00a      	b.n	800aa1a <UART_SetConfig+0x18d2>
 800aa04:	230a      	movs	r3, #10
 800aa06:	e008      	b.n	800aa1a <UART_SetConfig+0x18d2>
 800aa08:	2308      	movs	r3, #8
 800aa0a:	e006      	b.n	800aa1a <UART_SetConfig+0x18d2>
 800aa0c:	2306      	movs	r3, #6
 800aa0e:	e004      	b.n	800aa1a <UART_SetConfig+0x18d2>
 800aa10:	2304      	movs	r3, #4
 800aa12:	e002      	b.n	800aa1a <UART_SetConfig+0x18d2>
 800aa14:	2302      	movs	r3, #2
 800aa16:	e000      	b.n	800aa1a <UART_SetConfig+0x18d2>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa1e:	005a      	lsls	r2, r3, #1
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	085b      	lsrs	r3, r3, #1
 800aa26:	441a      	add	r2, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800aa34:	e133      	b.n	800ac9e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d043      	beq.n	800aac6 <UART_SetConfig+0x197e>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d03d      	beq.n	800aac2 <UART_SetConfig+0x197a>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d037      	beq.n	800aabe <UART_SetConfig+0x1976>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	d031      	beq.n	800aaba <UART_SetConfig+0x1972>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5a:	2b04      	cmp	r3, #4
 800aa5c:	d02b      	beq.n	800aab6 <UART_SetConfig+0x196e>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa62:	2b05      	cmp	r3, #5
 800aa64:	d025      	beq.n	800aab2 <UART_SetConfig+0x196a>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6a:	2b06      	cmp	r3, #6
 800aa6c:	d01f      	beq.n	800aaae <UART_SetConfig+0x1966>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa72:	2b07      	cmp	r3, #7
 800aa74:	d019      	beq.n	800aaaa <UART_SetConfig+0x1962>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7a:	2b08      	cmp	r3, #8
 800aa7c:	d013      	beq.n	800aaa6 <UART_SetConfig+0x195e>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa82:	2b09      	cmp	r3, #9
 800aa84:	d00d      	beq.n	800aaa2 <UART_SetConfig+0x195a>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8a:	2b0a      	cmp	r3, #10
 800aa8c:	d007      	beq.n	800aa9e <UART_SetConfig+0x1956>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa92:	2b0b      	cmp	r3, #11
 800aa94:	d101      	bne.n	800aa9a <UART_SetConfig+0x1952>
 800aa96:	4b3f      	ldr	r3, [pc, #252]	; (800ab94 <UART_SetConfig+0x1a4c>)
 800aa98:	e016      	b.n	800aac8 <UART_SetConfig+0x1980>
 800aa9a:	4b3f      	ldr	r3, [pc, #252]	; (800ab98 <UART_SetConfig+0x1a50>)
 800aa9c:	e014      	b.n	800aac8 <UART_SetConfig+0x1980>
 800aa9e:	4b3f      	ldr	r3, [pc, #252]	; (800ab9c <UART_SetConfig+0x1a54>)
 800aaa0:	e012      	b.n	800aac8 <UART_SetConfig+0x1980>
 800aaa2:	4b3f      	ldr	r3, [pc, #252]	; (800aba0 <UART_SetConfig+0x1a58>)
 800aaa4:	e010      	b.n	800aac8 <UART_SetConfig+0x1980>
 800aaa6:	4b3f      	ldr	r3, [pc, #252]	; (800aba4 <UART_SetConfig+0x1a5c>)
 800aaa8:	e00e      	b.n	800aac8 <UART_SetConfig+0x1980>
 800aaaa:	4b3f      	ldr	r3, [pc, #252]	; (800aba8 <UART_SetConfig+0x1a60>)
 800aaac:	e00c      	b.n	800aac8 <UART_SetConfig+0x1980>
 800aaae:	4b3f      	ldr	r3, [pc, #252]	; (800abac <UART_SetConfig+0x1a64>)
 800aab0:	e00a      	b.n	800aac8 <UART_SetConfig+0x1980>
 800aab2:	4b3f      	ldr	r3, [pc, #252]	; (800abb0 <UART_SetConfig+0x1a68>)
 800aab4:	e008      	b.n	800aac8 <UART_SetConfig+0x1980>
 800aab6:	4b3f      	ldr	r3, [pc, #252]	; (800abb4 <UART_SetConfig+0x1a6c>)
 800aab8:	e006      	b.n	800aac8 <UART_SetConfig+0x1980>
 800aaba:	4b3f      	ldr	r3, [pc, #252]	; (800abb8 <UART_SetConfig+0x1a70>)
 800aabc:	e004      	b.n	800aac8 <UART_SetConfig+0x1980>
 800aabe:	4b3f      	ldr	r3, [pc, #252]	; (800abbc <UART_SetConfig+0x1a74>)
 800aac0:	e002      	b.n	800aac8 <UART_SetConfig+0x1980>
 800aac2:	4b33      	ldr	r3, [pc, #204]	; (800ab90 <UART_SetConfig+0x1a48>)
 800aac4:	e000      	b.n	800aac8 <UART_SetConfig+0x1980>
 800aac6:	4b34      	ldr	r3, [pc, #208]	; (800ab98 <UART_SetConfig+0x1a50>)
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	6852      	ldr	r2, [r2, #4]
 800aacc:	0852      	lsrs	r2, r2, #1
 800aace:	441a      	add	r2, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aad8:	b29b      	uxth	r3, r3
 800aada:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aadc:	e0df      	b.n	800ac9e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d045      	beq.n	800ab72 <UART_SetConfig+0x1a2a>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d03f      	beq.n	800ab6e <UART_SetConfig+0x1a26>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	d039      	beq.n	800ab6a <UART_SetConfig+0x1a22>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafa:	2b03      	cmp	r3, #3
 800aafc:	d033      	beq.n	800ab66 <UART_SetConfig+0x1a1e>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab02:	2b04      	cmp	r3, #4
 800ab04:	d02d      	beq.n	800ab62 <UART_SetConfig+0x1a1a>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0a:	2b05      	cmp	r3, #5
 800ab0c:	d027      	beq.n	800ab5e <UART_SetConfig+0x1a16>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab12:	2b06      	cmp	r3, #6
 800ab14:	d021      	beq.n	800ab5a <UART_SetConfig+0x1a12>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1a:	2b07      	cmp	r3, #7
 800ab1c:	d01b      	beq.n	800ab56 <UART_SetConfig+0x1a0e>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab22:	2b08      	cmp	r3, #8
 800ab24:	d015      	beq.n	800ab52 <UART_SetConfig+0x1a0a>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2a:	2b09      	cmp	r3, #9
 800ab2c:	d00f      	beq.n	800ab4e <UART_SetConfig+0x1a06>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab32:	2b0a      	cmp	r3, #10
 800ab34:	d008      	beq.n	800ab48 <UART_SetConfig+0x1a00>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3a:	2b0b      	cmp	r3, #11
 800ab3c:	d102      	bne.n	800ab44 <UART_SetConfig+0x19fc>
 800ab3e:	f647 2312 	movw	r3, #31250	; 0x7a12
 800ab42:	e017      	b.n	800ab74 <UART_SetConfig+0x1a2c>
 800ab44:	4b18      	ldr	r3, [pc, #96]	; (800aba8 <UART_SetConfig+0x1a60>)
 800ab46:	e015      	b.n	800ab74 <UART_SetConfig+0x1a2c>
 800ab48:	f24f 4324 	movw	r3, #62500	; 0xf424
 800ab4c:	e012      	b.n	800ab74 <UART_SetConfig+0x1a2c>
 800ab4e:	4b1c      	ldr	r3, [pc, #112]	; (800abc0 <UART_SetConfig+0x1a78>)
 800ab50:	e010      	b.n	800ab74 <UART_SetConfig+0x1a2c>
 800ab52:	4b1c      	ldr	r3, [pc, #112]	; (800abc4 <UART_SetConfig+0x1a7c>)
 800ab54:	e00e      	b.n	800ab74 <UART_SetConfig+0x1a2c>
 800ab56:	4b0f      	ldr	r3, [pc, #60]	; (800ab94 <UART_SetConfig+0x1a4c>)
 800ab58:	e00c      	b.n	800ab74 <UART_SetConfig+0x1a2c>
 800ab5a:	4b1b      	ldr	r3, [pc, #108]	; (800abc8 <UART_SetConfig+0x1a80>)
 800ab5c:	e00a      	b.n	800ab74 <UART_SetConfig+0x1a2c>
 800ab5e:	4b1b      	ldr	r3, [pc, #108]	; (800abcc <UART_SetConfig+0x1a84>)
 800ab60:	e008      	b.n	800ab74 <UART_SetConfig+0x1a2c>
 800ab62:	4b0e      	ldr	r3, [pc, #56]	; (800ab9c <UART_SetConfig+0x1a54>)
 800ab64:	e006      	b.n	800ab74 <UART_SetConfig+0x1a2c>
 800ab66:	4b1a      	ldr	r3, [pc, #104]	; (800abd0 <UART_SetConfig+0x1a88>)
 800ab68:	e004      	b.n	800ab74 <UART_SetConfig+0x1a2c>
 800ab6a:	4b0d      	ldr	r3, [pc, #52]	; (800aba0 <UART_SetConfig+0x1a58>)
 800ab6c:	e002      	b.n	800ab74 <UART_SetConfig+0x1a2c>
 800ab6e:	4b0d      	ldr	r3, [pc, #52]	; (800aba4 <UART_SetConfig+0x1a5c>)
 800ab70:	e000      	b.n	800ab74 <UART_SetConfig+0x1a2c>
 800ab72:	4b0d      	ldr	r3, [pc, #52]	; (800aba8 <UART_SetConfig+0x1a60>)
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	6852      	ldr	r2, [r2, #4]
 800ab78:	0852      	lsrs	r2, r2, #1
 800ab7a:	441a      	add	r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab88:	e089      	b.n	800ac9e <UART_SetConfig+0x1b56>
 800ab8a:	bf00      	nop
 800ab8c:	58024400 	.word	0x58024400
 800ab90:	03d09000 	.word	0x03d09000
 800ab94:	0007a120 	.word	0x0007a120
 800ab98:	07a12000 	.word	0x07a12000
 800ab9c:	000f4240 	.word	0x000f4240
 800aba0:	001e8480 	.word	0x001e8480
 800aba4:	003d0900 	.word	0x003d0900
 800aba8:	007a1200 	.word	0x007a1200
 800abac:	00a2c2aa 	.word	0x00a2c2aa
 800abb0:	00c35000 	.word	0x00c35000
 800abb4:	00f42400 	.word	0x00f42400
 800abb8:	01458554 	.word	0x01458554
 800abbc:	01e84800 	.word	0x01e84800
 800abc0:	0001e848 	.word	0x0001e848
 800abc4:	0003d090 	.word	0x0003d090
 800abc8:	000a2c2a 	.word	0x000a2c2a
 800abcc:	000c3500 	.word	0x000c3500
 800abd0:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d04f      	beq.n	800ac7c <UART_SetConfig+0x1b34>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d048      	beq.n	800ac76 <UART_SetConfig+0x1b2e>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d041      	beq.n	800ac70 <UART_SetConfig+0x1b28>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf0:	2b03      	cmp	r3, #3
 800abf2:	d03a      	beq.n	800ac6a <UART_SetConfig+0x1b22>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf8:	2b04      	cmp	r3, #4
 800abfa:	d033      	beq.n	800ac64 <UART_SetConfig+0x1b1c>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac00:	2b05      	cmp	r3, #5
 800ac02:	d02c      	beq.n	800ac5e <UART_SetConfig+0x1b16>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac08:	2b06      	cmp	r3, #6
 800ac0a:	d025      	beq.n	800ac58 <UART_SetConfig+0x1b10>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac10:	2b07      	cmp	r3, #7
 800ac12:	d01e      	beq.n	800ac52 <UART_SetConfig+0x1b0a>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac18:	2b08      	cmp	r3, #8
 800ac1a:	d017      	beq.n	800ac4c <UART_SetConfig+0x1b04>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac20:	2b09      	cmp	r3, #9
 800ac22:	d010      	beq.n	800ac46 <UART_SetConfig+0x1afe>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac28:	2b0a      	cmp	r3, #10
 800ac2a:	d009      	beq.n	800ac40 <UART_SetConfig+0x1af8>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac30:	2b0b      	cmp	r3, #11
 800ac32:	d102      	bne.n	800ac3a <UART_SetConfig+0x1af2>
 800ac34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac38:	e022      	b.n	800ac80 <UART_SetConfig+0x1b38>
 800ac3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ac3e:	e01f      	b.n	800ac80 <UART_SetConfig+0x1b38>
 800ac40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac44:	e01c      	b.n	800ac80 <UART_SetConfig+0x1b38>
 800ac46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac4a:	e019      	b.n	800ac80 <UART_SetConfig+0x1b38>
 800ac4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac50:	e016      	b.n	800ac80 <UART_SetConfig+0x1b38>
 800ac52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac56:	e013      	b.n	800ac80 <UART_SetConfig+0x1b38>
 800ac58:	f241 5354 	movw	r3, #5460	; 0x1554
 800ac5c:	e010      	b.n	800ac80 <UART_SetConfig+0x1b38>
 800ac5e:	f641 1398 	movw	r3, #6552	; 0x1998
 800ac62:	e00d      	b.n	800ac80 <UART_SetConfig+0x1b38>
 800ac64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac68:	e00a      	b.n	800ac80 <UART_SetConfig+0x1b38>
 800ac6a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800ac6e:	e007      	b.n	800ac80 <UART_SetConfig+0x1b38>
 800ac70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ac74:	e004      	b.n	800ac80 <UART_SetConfig+0x1b38>
 800ac76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac7a:	e001      	b.n	800ac80 <UART_SetConfig+0x1b38>
 800ac7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	6852      	ldr	r2, [r2, #4]
 800ac84:	0852      	lsrs	r2, r2, #1
 800ac86:	441a      	add	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac94:	e003      	b.n	800ac9e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800ac9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca0:	2b0f      	cmp	r3, #15
 800aca2:	d916      	bls.n	800acd2 <UART_SetConfig+0x1b8a>
 800aca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acaa:	d212      	bcs.n	800acd2 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800acac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acae:	b29b      	uxth	r3, r3
 800acb0:	f023 030f 	bic.w	r3, r3, #15
 800acb4:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800acb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb8:	085b      	lsrs	r3, r3, #1
 800acba:	b29b      	uxth	r3, r3
 800acbc:	f003 0307 	and.w	r3, r3, #7
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800acc4:	4313      	orrs	r3, r2
 800acc6:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800acce:	60da      	str	r2, [r3, #12]
 800acd0:	e3a3      	b.n	800b41a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acd8:	e39f      	b.n	800b41a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800acda:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800acde:	2b40      	cmp	r3, #64	; 0x40
 800ace0:	f200 8388 	bhi.w	800b3f4 <UART_SetConfig+0x22ac>
 800ace4:	a201      	add	r2, pc, #4	; (adr r2, 800acec <UART_SetConfig+0x1ba4>)
 800ace6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acea:	bf00      	nop
 800acec:	0800adf1 	.word	0x0800adf1
 800acf0:	0800aea7 	.word	0x0800aea7
 800acf4:	0800b3f5 	.word	0x0800b3f5
 800acf8:	0800b3f5 	.word	0x0800b3f5
 800acfc:	0800af5d 	.word	0x0800af5d
 800ad00:	0800b3f5 	.word	0x0800b3f5
 800ad04:	0800b3f5 	.word	0x0800b3f5
 800ad08:	0800b3f5 	.word	0x0800b3f5
 800ad0c:	0800b017 	.word	0x0800b017
 800ad10:	0800b3f5 	.word	0x0800b3f5
 800ad14:	0800b3f5 	.word	0x0800b3f5
 800ad18:	0800b3f5 	.word	0x0800b3f5
 800ad1c:	0800b3f5 	.word	0x0800b3f5
 800ad20:	0800b3f5 	.word	0x0800b3f5
 800ad24:	0800b3f5 	.word	0x0800b3f5
 800ad28:	0800b3f5 	.word	0x0800b3f5
 800ad2c:	0800b0d1 	.word	0x0800b0d1
 800ad30:	0800b3f5 	.word	0x0800b3f5
 800ad34:	0800b3f5 	.word	0x0800b3f5
 800ad38:	0800b3f5 	.word	0x0800b3f5
 800ad3c:	0800b3f5 	.word	0x0800b3f5
 800ad40:	0800b3f5 	.word	0x0800b3f5
 800ad44:	0800b3f5 	.word	0x0800b3f5
 800ad48:	0800b3f5 	.word	0x0800b3f5
 800ad4c:	0800b3f5 	.word	0x0800b3f5
 800ad50:	0800b3f5 	.word	0x0800b3f5
 800ad54:	0800b3f5 	.word	0x0800b3f5
 800ad58:	0800b3f5 	.word	0x0800b3f5
 800ad5c:	0800b3f5 	.word	0x0800b3f5
 800ad60:	0800b3f5 	.word	0x0800b3f5
 800ad64:	0800b3f5 	.word	0x0800b3f5
 800ad68:	0800b3f5 	.word	0x0800b3f5
 800ad6c:	0800b241 	.word	0x0800b241
 800ad70:	0800b3f5 	.word	0x0800b3f5
 800ad74:	0800b3f5 	.word	0x0800b3f5
 800ad78:	0800b3f5 	.word	0x0800b3f5
 800ad7c:	0800b3f5 	.word	0x0800b3f5
 800ad80:	0800b3f5 	.word	0x0800b3f5
 800ad84:	0800b3f5 	.word	0x0800b3f5
 800ad88:	0800b3f5 	.word	0x0800b3f5
 800ad8c:	0800b3f5 	.word	0x0800b3f5
 800ad90:	0800b3f5 	.word	0x0800b3f5
 800ad94:	0800b3f5 	.word	0x0800b3f5
 800ad98:	0800b3f5 	.word	0x0800b3f5
 800ad9c:	0800b3f5 	.word	0x0800b3f5
 800ada0:	0800b3f5 	.word	0x0800b3f5
 800ada4:	0800b3f5 	.word	0x0800b3f5
 800ada8:	0800b3f5 	.word	0x0800b3f5
 800adac:	0800b3f5 	.word	0x0800b3f5
 800adb0:	0800b3f5 	.word	0x0800b3f5
 800adb4:	0800b3f5 	.word	0x0800b3f5
 800adb8:	0800b3f5 	.word	0x0800b3f5
 800adbc:	0800b3f5 	.word	0x0800b3f5
 800adc0:	0800b3f5 	.word	0x0800b3f5
 800adc4:	0800b3f5 	.word	0x0800b3f5
 800adc8:	0800b3f5 	.word	0x0800b3f5
 800adcc:	0800b3f5 	.word	0x0800b3f5
 800add0:	0800b3f5 	.word	0x0800b3f5
 800add4:	0800b3f5 	.word	0x0800b3f5
 800add8:	0800b3f5 	.word	0x0800b3f5
 800addc:	0800b3f5 	.word	0x0800b3f5
 800ade0:	0800b3f5 	.word	0x0800b3f5
 800ade4:	0800b3f5 	.word	0x0800b3f5
 800ade8:	0800b3f5 	.word	0x0800b3f5
 800adec:	0800b335 	.word	0x0800b335
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adf0:	f7fb fb46 	bl	8006480 <HAL_RCC_GetPCLK1Freq>
 800adf4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d044      	beq.n	800ae88 <UART_SetConfig+0x1d40>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d03e      	beq.n	800ae84 <UART_SetConfig+0x1d3c>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	d038      	beq.n	800ae80 <UART_SetConfig+0x1d38>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae12:	2b03      	cmp	r3, #3
 800ae14:	d032      	beq.n	800ae7c <UART_SetConfig+0x1d34>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1a:	2b04      	cmp	r3, #4
 800ae1c:	d02c      	beq.n	800ae78 <UART_SetConfig+0x1d30>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae22:	2b05      	cmp	r3, #5
 800ae24:	d026      	beq.n	800ae74 <UART_SetConfig+0x1d2c>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2a:	2b06      	cmp	r3, #6
 800ae2c:	d020      	beq.n	800ae70 <UART_SetConfig+0x1d28>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae32:	2b07      	cmp	r3, #7
 800ae34:	d01a      	beq.n	800ae6c <UART_SetConfig+0x1d24>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3a:	2b08      	cmp	r3, #8
 800ae3c:	d014      	beq.n	800ae68 <UART_SetConfig+0x1d20>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae42:	2b09      	cmp	r3, #9
 800ae44:	d00e      	beq.n	800ae64 <UART_SetConfig+0x1d1c>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4a:	2b0a      	cmp	r3, #10
 800ae4c:	d008      	beq.n	800ae60 <UART_SetConfig+0x1d18>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae52:	2b0b      	cmp	r3, #11
 800ae54:	d102      	bne.n	800ae5c <UART_SetConfig+0x1d14>
 800ae56:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae5a:	e016      	b.n	800ae8a <UART_SetConfig+0x1d42>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e014      	b.n	800ae8a <UART_SetConfig+0x1d42>
 800ae60:	2380      	movs	r3, #128	; 0x80
 800ae62:	e012      	b.n	800ae8a <UART_SetConfig+0x1d42>
 800ae64:	2340      	movs	r3, #64	; 0x40
 800ae66:	e010      	b.n	800ae8a <UART_SetConfig+0x1d42>
 800ae68:	2320      	movs	r3, #32
 800ae6a:	e00e      	b.n	800ae8a <UART_SetConfig+0x1d42>
 800ae6c:	2310      	movs	r3, #16
 800ae6e:	e00c      	b.n	800ae8a <UART_SetConfig+0x1d42>
 800ae70:	230c      	movs	r3, #12
 800ae72:	e00a      	b.n	800ae8a <UART_SetConfig+0x1d42>
 800ae74:	230a      	movs	r3, #10
 800ae76:	e008      	b.n	800ae8a <UART_SetConfig+0x1d42>
 800ae78:	2308      	movs	r3, #8
 800ae7a:	e006      	b.n	800ae8a <UART_SetConfig+0x1d42>
 800ae7c:	2306      	movs	r3, #6
 800ae7e:	e004      	b.n	800ae8a <UART_SetConfig+0x1d42>
 800ae80:	2304      	movs	r3, #4
 800ae82:	e002      	b.n	800ae8a <UART_SetConfig+0x1d42>
 800ae84:	2302      	movs	r3, #2
 800ae86:	e000      	b.n	800ae8a <UART_SetConfig+0x1d42>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae8c:	fbb2 f2f3 	udiv	r2, r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	085b      	lsrs	r3, r3, #1
 800ae96:	441a      	add	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aea4:	e2aa      	b.n	800b3fc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aea6:	f7fb fb01 	bl	80064ac <HAL_RCC_GetPCLK2Freq>
 800aeaa:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d044      	beq.n	800af3e <UART_SetConfig+0x1df6>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d03e      	beq.n	800af3a <UART_SetConfig+0x1df2>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	d038      	beq.n	800af36 <UART_SetConfig+0x1dee>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec8:	2b03      	cmp	r3, #3
 800aeca:	d032      	beq.n	800af32 <UART_SetConfig+0x1dea>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed0:	2b04      	cmp	r3, #4
 800aed2:	d02c      	beq.n	800af2e <UART_SetConfig+0x1de6>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed8:	2b05      	cmp	r3, #5
 800aeda:	d026      	beq.n	800af2a <UART_SetConfig+0x1de2>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee0:	2b06      	cmp	r3, #6
 800aee2:	d020      	beq.n	800af26 <UART_SetConfig+0x1dde>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee8:	2b07      	cmp	r3, #7
 800aeea:	d01a      	beq.n	800af22 <UART_SetConfig+0x1dda>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef0:	2b08      	cmp	r3, #8
 800aef2:	d014      	beq.n	800af1e <UART_SetConfig+0x1dd6>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef8:	2b09      	cmp	r3, #9
 800aefa:	d00e      	beq.n	800af1a <UART_SetConfig+0x1dd2>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af00:	2b0a      	cmp	r3, #10
 800af02:	d008      	beq.n	800af16 <UART_SetConfig+0x1dce>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af08:	2b0b      	cmp	r3, #11
 800af0a:	d102      	bne.n	800af12 <UART_SetConfig+0x1dca>
 800af0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af10:	e016      	b.n	800af40 <UART_SetConfig+0x1df8>
 800af12:	2301      	movs	r3, #1
 800af14:	e014      	b.n	800af40 <UART_SetConfig+0x1df8>
 800af16:	2380      	movs	r3, #128	; 0x80
 800af18:	e012      	b.n	800af40 <UART_SetConfig+0x1df8>
 800af1a:	2340      	movs	r3, #64	; 0x40
 800af1c:	e010      	b.n	800af40 <UART_SetConfig+0x1df8>
 800af1e:	2320      	movs	r3, #32
 800af20:	e00e      	b.n	800af40 <UART_SetConfig+0x1df8>
 800af22:	2310      	movs	r3, #16
 800af24:	e00c      	b.n	800af40 <UART_SetConfig+0x1df8>
 800af26:	230c      	movs	r3, #12
 800af28:	e00a      	b.n	800af40 <UART_SetConfig+0x1df8>
 800af2a:	230a      	movs	r3, #10
 800af2c:	e008      	b.n	800af40 <UART_SetConfig+0x1df8>
 800af2e:	2308      	movs	r3, #8
 800af30:	e006      	b.n	800af40 <UART_SetConfig+0x1df8>
 800af32:	2306      	movs	r3, #6
 800af34:	e004      	b.n	800af40 <UART_SetConfig+0x1df8>
 800af36:	2304      	movs	r3, #4
 800af38:	e002      	b.n	800af40 <UART_SetConfig+0x1df8>
 800af3a:	2302      	movs	r3, #2
 800af3c:	e000      	b.n	800af40 <UART_SetConfig+0x1df8>
 800af3e:	2301      	movs	r3, #1
 800af40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af42:	fbb2 f2f3 	udiv	r2, r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	085b      	lsrs	r3, r3, #1
 800af4c:	441a      	add	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	fbb2 f3f3 	udiv	r3, r2, r3
 800af56:	b29b      	uxth	r3, r3
 800af58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af5a:	e24f      	b.n	800b3fc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af5c:	f107 0318 	add.w	r3, r7, #24
 800af60:	4618      	mov	r0, r3
 800af62:	f7fc fc25 	bl	80077b0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af66:	69fa      	ldr	r2, [r7, #28]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d044      	beq.n	800affa <UART_SetConfig+0x1eb2>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af74:	2b01      	cmp	r3, #1
 800af76:	d03e      	beq.n	800aff6 <UART_SetConfig+0x1eae>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d038      	beq.n	800aff2 <UART_SetConfig+0x1eaa>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af84:	2b03      	cmp	r3, #3
 800af86:	d032      	beq.n	800afee <UART_SetConfig+0x1ea6>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8c:	2b04      	cmp	r3, #4
 800af8e:	d02c      	beq.n	800afea <UART_SetConfig+0x1ea2>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af94:	2b05      	cmp	r3, #5
 800af96:	d026      	beq.n	800afe6 <UART_SetConfig+0x1e9e>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9c:	2b06      	cmp	r3, #6
 800af9e:	d020      	beq.n	800afe2 <UART_SetConfig+0x1e9a>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa4:	2b07      	cmp	r3, #7
 800afa6:	d01a      	beq.n	800afde <UART_SetConfig+0x1e96>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afac:	2b08      	cmp	r3, #8
 800afae:	d014      	beq.n	800afda <UART_SetConfig+0x1e92>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb4:	2b09      	cmp	r3, #9
 800afb6:	d00e      	beq.n	800afd6 <UART_SetConfig+0x1e8e>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afbc:	2b0a      	cmp	r3, #10
 800afbe:	d008      	beq.n	800afd2 <UART_SetConfig+0x1e8a>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc4:	2b0b      	cmp	r3, #11
 800afc6:	d102      	bne.n	800afce <UART_SetConfig+0x1e86>
 800afc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afcc:	e016      	b.n	800affc <UART_SetConfig+0x1eb4>
 800afce:	2301      	movs	r3, #1
 800afd0:	e014      	b.n	800affc <UART_SetConfig+0x1eb4>
 800afd2:	2380      	movs	r3, #128	; 0x80
 800afd4:	e012      	b.n	800affc <UART_SetConfig+0x1eb4>
 800afd6:	2340      	movs	r3, #64	; 0x40
 800afd8:	e010      	b.n	800affc <UART_SetConfig+0x1eb4>
 800afda:	2320      	movs	r3, #32
 800afdc:	e00e      	b.n	800affc <UART_SetConfig+0x1eb4>
 800afde:	2310      	movs	r3, #16
 800afe0:	e00c      	b.n	800affc <UART_SetConfig+0x1eb4>
 800afe2:	230c      	movs	r3, #12
 800afe4:	e00a      	b.n	800affc <UART_SetConfig+0x1eb4>
 800afe6:	230a      	movs	r3, #10
 800afe8:	e008      	b.n	800affc <UART_SetConfig+0x1eb4>
 800afea:	2308      	movs	r3, #8
 800afec:	e006      	b.n	800affc <UART_SetConfig+0x1eb4>
 800afee:	2306      	movs	r3, #6
 800aff0:	e004      	b.n	800affc <UART_SetConfig+0x1eb4>
 800aff2:	2304      	movs	r3, #4
 800aff4:	e002      	b.n	800affc <UART_SetConfig+0x1eb4>
 800aff6:	2302      	movs	r3, #2
 800aff8:	e000      	b.n	800affc <UART_SetConfig+0x1eb4>
 800affa:	2301      	movs	r3, #1
 800affc:	fbb2 f2f3 	udiv	r2, r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	085b      	lsrs	r3, r3, #1
 800b006:	441a      	add	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b010:	b29b      	uxth	r3, r3
 800b012:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b014:	e1f2      	b.n	800b3fc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b016:	f107 030c 	add.w	r3, r7, #12
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fc fd14 	bl	8007a48 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b026:	2b00      	cmp	r3, #0
 800b028:	d044      	beq.n	800b0b4 <UART_SetConfig+0x1f6c>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d03e      	beq.n	800b0b0 <UART_SetConfig+0x1f68>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b036:	2b02      	cmp	r3, #2
 800b038:	d038      	beq.n	800b0ac <UART_SetConfig+0x1f64>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03e:	2b03      	cmp	r3, #3
 800b040:	d032      	beq.n	800b0a8 <UART_SetConfig+0x1f60>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b046:	2b04      	cmp	r3, #4
 800b048:	d02c      	beq.n	800b0a4 <UART_SetConfig+0x1f5c>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04e:	2b05      	cmp	r3, #5
 800b050:	d026      	beq.n	800b0a0 <UART_SetConfig+0x1f58>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b056:	2b06      	cmp	r3, #6
 800b058:	d020      	beq.n	800b09c <UART_SetConfig+0x1f54>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05e:	2b07      	cmp	r3, #7
 800b060:	d01a      	beq.n	800b098 <UART_SetConfig+0x1f50>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b066:	2b08      	cmp	r3, #8
 800b068:	d014      	beq.n	800b094 <UART_SetConfig+0x1f4c>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06e:	2b09      	cmp	r3, #9
 800b070:	d00e      	beq.n	800b090 <UART_SetConfig+0x1f48>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b076:	2b0a      	cmp	r3, #10
 800b078:	d008      	beq.n	800b08c <UART_SetConfig+0x1f44>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07e:	2b0b      	cmp	r3, #11
 800b080:	d102      	bne.n	800b088 <UART_SetConfig+0x1f40>
 800b082:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b086:	e016      	b.n	800b0b6 <UART_SetConfig+0x1f6e>
 800b088:	2301      	movs	r3, #1
 800b08a:	e014      	b.n	800b0b6 <UART_SetConfig+0x1f6e>
 800b08c:	2380      	movs	r3, #128	; 0x80
 800b08e:	e012      	b.n	800b0b6 <UART_SetConfig+0x1f6e>
 800b090:	2340      	movs	r3, #64	; 0x40
 800b092:	e010      	b.n	800b0b6 <UART_SetConfig+0x1f6e>
 800b094:	2320      	movs	r3, #32
 800b096:	e00e      	b.n	800b0b6 <UART_SetConfig+0x1f6e>
 800b098:	2310      	movs	r3, #16
 800b09a:	e00c      	b.n	800b0b6 <UART_SetConfig+0x1f6e>
 800b09c:	230c      	movs	r3, #12
 800b09e:	e00a      	b.n	800b0b6 <UART_SetConfig+0x1f6e>
 800b0a0:	230a      	movs	r3, #10
 800b0a2:	e008      	b.n	800b0b6 <UART_SetConfig+0x1f6e>
 800b0a4:	2308      	movs	r3, #8
 800b0a6:	e006      	b.n	800b0b6 <UART_SetConfig+0x1f6e>
 800b0a8:	2306      	movs	r3, #6
 800b0aa:	e004      	b.n	800b0b6 <UART_SetConfig+0x1f6e>
 800b0ac:	2304      	movs	r3, #4
 800b0ae:	e002      	b.n	800b0b6 <UART_SetConfig+0x1f6e>
 800b0b0:	2302      	movs	r3, #2
 800b0b2:	e000      	b.n	800b0b6 <UART_SetConfig+0x1f6e>
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	fbb2 f2f3 	udiv	r2, r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	085b      	lsrs	r3, r3, #1
 800b0c0:	441a      	add	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b0ce:	e195      	b.n	800b3fc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0d0:	4b87      	ldr	r3, [pc, #540]	; (800b2f0 <UART_SetConfig+0x21a8>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 0320 	and.w	r3, r3, #32
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d05d      	beq.n	800b198 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0dc:	4b84      	ldr	r3, [pc, #528]	; (800b2f0 <UART_SetConfig+0x21a8>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	08db      	lsrs	r3, r3, #3
 800b0e2:	f003 0303 	and.w	r3, r3, #3
 800b0e6:	4a83      	ldr	r2, [pc, #524]	; (800b2f4 <UART_SetConfig+0x21ac>)
 800b0e8:	40da      	lsrs	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d044      	beq.n	800b17c <UART_SetConfig+0x2034>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d03e      	beq.n	800b178 <UART_SetConfig+0x2030>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d038      	beq.n	800b174 <UART_SetConfig+0x202c>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b106:	2b03      	cmp	r3, #3
 800b108:	d032      	beq.n	800b170 <UART_SetConfig+0x2028>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10e:	2b04      	cmp	r3, #4
 800b110:	d02c      	beq.n	800b16c <UART_SetConfig+0x2024>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b116:	2b05      	cmp	r3, #5
 800b118:	d026      	beq.n	800b168 <UART_SetConfig+0x2020>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11e:	2b06      	cmp	r3, #6
 800b120:	d020      	beq.n	800b164 <UART_SetConfig+0x201c>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b126:	2b07      	cmp	r3, #7
 800b128:	d01a      	beq.n	800b160 <UART_SetConfig+0x2018>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12e:	2b08      	cmp	r3, #8
 800b130:	d014      	beq.n	800b15c <UART_SetConfig+0x2014>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b136:	2b09      	cmp	r3, #9
 800b138:	d00e      	beq.n	800b158 <UART_SetConfig+0x2010>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13e:	2b0a      	cmp	r3, #10
 800b140:	d008      	beq.n	800b154 <UART_SetConfig+0x200c>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b146:	2b0b      	cmp	r3, #11
 800b148:	d102      	bne.n	800b150 <UART_SetConfig+0x2008>
 800b14a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b14e:	e016      	b.n	800b17e <UART_SetConfig+0x2036>
 800b150:	2301      	movs	r3, #1
 800b152:	e014      	b.n	800b17e <UART_SetConfig+0x2036>
 800b154:	2380      	movs	r3, #128	; 0x80
 800b156:	e012      	b.n	800b17e <UART_SetConfig+0x2036>
 800b158:	2340      	movs	r3, #64	; 0x40
 800b15a:	e010      	b.n	800b17e <UART_SetConfig+0x2036>
 800b15c:	2320      	movs	r3, #32
 800b15e:	e00e      	b.n	800b17e <UART_SetConfig+0x2036>
 800b160:	2310      	movs	r3, #16
 800b162:	e00c      	b.n	800b17e <UART_SetConfig+0x2036>
 800b164:	230c      	movs	r3, #12
 800b166:	e00a      	b.n	800b17e <UART_SetConfig+0x2036>
 800b168:	230a      	movs	r3, #10
 800b16a:	e008      	b.n	800b17e <UART_SetConfig+0x2036>
 800b16c:	2308      	movs	r3, #8
 800b16e:	e006      	b.n	800b17e <UART_SetConfig+0x2036>
 800b170:	2306      	movs	r3, #6
 800b172:	e004      	b.n	800b17e <UART_SetConfig+0x2036>
 800b174:	2304      	movs	r3, #4
 800b176:	e002      	b.n	800b17e <UART_SetConfig+0x2036>
 800b178:	2302      	movs	r3, #2
 800b17a:	e000      	b.n	800b17e <UART_SetConfig+0x2036>
 800b17c:	2301      	movs	r3, #1
 800b17e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	085b      	lsrs	r3, r3, #1
 800b188:	441a      	add	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b192:	b29b      	uxth	r3, r3
 800b194:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b196:	e131      	b.n	800b3fc <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d043      	beq.n	800b228 <UART_SetConfig+0x20e0>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d03d      	beq.n	800b224 <UART_SetConfig+0x20dc>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d037      	beq.n	800b220 <UART_SetConfig+0x20d8>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b4:	2b03      	cmp	r3, #3
 800b1b6:	d031      	beq.n	800b21c <UART_SetConfig+0x20d4>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1bc:	2b04      	cmp	r3, #4
 800b1be:	d02b      	beq.n	800b218 <UART_SetConfig+0x20d0>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c4:	2b05      	cmp	r3, #5
 800b1c6:	d025      	beq.n	800b214 <UART_SetConfig+0x20cc>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1cc:	2b06      	cmp	r3, #6
 800b1ce:	d01f      	beq.n	800b210 <UART_SetConfig+0x20c8>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d4:	2b07      	cmp	r3, #7
 800b1d6:	d019      	beq.n	800b20c <UART_SetConfig+0x20c4>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1dc:	2b08      	cmp	r3, #8
 800b1de:	d013      	beq.n	800b208 <UART_SetConfig+0x20c0>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e4:	2b09      	cmp	r3, #9
 800b1e6:	d00d      	beq.n	800b204 <UART_SetConfig+0x20bc>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ec:	2b0a      	cmp	r3, #10
 800b1ee:	d007      	beq.n	800b200 <UART_SetConfig+0x20b8>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f4:	2b0b      	cmp	r3, #11
 800b1f6:	d101      	bne.n	800b1fc <UART_SetConfig+0x20b4>
 800b1f8:	4b3f      	ldr	r3, [pc, #252]	; (800b2f8 <UART_SetConfig+0x21b0>)
 800b1fa:	e016      	b.n	800b22a <UART_SetConfig+0x20e2>
 800b1fc:	4b3d      	ldr	r3, [pc, #244]	; (800b2f4 <UART_SetConfig+0x21ac>)
 800b1fe:	e014      	b.n	800b22a <UART_SetConfig+0x20e2>
 800b200:	4b3e      	ldr	r3, [pc, #248]	; (800b2fc <UART_SetConfig+0x21b4>)
 800b202:	e012      	b.n	800b22a <UART_SetConfig+0x20e2>
 800b204:	4b3e      	ldr	r3, [pc, #248]	; (800b300 <UART_SetConfig+0x21b8>)
 800b206:	e010      	b.n	800b22a <UART_SetConfig+0x20e2>
 800b208:	4b3e      	ldr	r3, [pc, #248]	; (800b304 <UART_SetConfig+0x21bc>)
 800b20a:	e00e      	b.n	800b22a <UART_SetConfig+0x20e2>
 800b20c:	4b3e      	ldr	r3, [pc, #248]	; (800b308 <UART_SetConfig+0x21c0>)
 800b20e:	e00c      	b.n	800b22a <UART_SetConfig+0x20e2>
 800b210:	4b3e      	ldr	r3, [pc, #248]	; (800b30c <UART_SetConfig+0x21c4>)
 800b212:	e00a      	b.n	800b22a <UART_SetConfig+0x20e2>
 800b214:	4b3e      	ldr	r3, [pc, #248]	; (800b310 <UART_SetConfig+0x21c8>)
 800b216:	e008      	b.n	800b22a <UART_SetConfig+0x20e2>
 800b218:	4b3e      	ldr	r3, [pc, #248]	; (800b314 <UART_SetConfig+0x21cc>)
 800b21a:	e006      	b.n	800b22a <UART_SetConfig+0x20e2>
 800b21c:	4b3e      	ldr	r3, [pc, #248]	; (800b318 <UART_SetConfig+0x21d0>)
 800b21e:	e004      	b.n	800b22a <UART_SetConfig+0x20e2>
 800b220:	4b3e      	ldr	r3, [pc, #248]	; (800b31c <UART_SetConfig+0x21d4>)
 800b222:	e002      	b.n	800b22a <UART_SetConfig+0x20e2>
 800b224:	4b3e      	ldr	r3, [pc, #248]	; (800b320 <UART_SetConfig+0x21d8>)
 800b226:	e000      	b.n	800b22a <UART_SetConfig+0x20e2>
 800b228:	4b32      	ldr	r3, [pc, #200]	; (800b2f4 <UART_SetConfig+0x21ac>)
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	6852      	ldr	r2, [r2, #4]
 800b22e:	0852      	lsrs	r2, r2, #1
 800b230:	441a      	add	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	fbb2 f3f3 	udiv	r3, r2, r3
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b23e:	e0dd      	b.n	800b3fc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b244:	2b00      	cmp	r3, #0
 800b246:	d046      	beq.n	800b2d6 <UART_SetConfig+0x218e>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d040      	beq.n	800b2d2 <UART_SetConfig+0x218a>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b254:	2b02      	cmp	r3, #2
 800b256:	d03a      	beq.n	800b2ce <UART_SetConfig+0x2186>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25c:	2b03      	cmp	r3, #3
 800b25e:	d034      	beq.n	800b2ca <UART_SetConfig+0x2182>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b264:	2b04      	cmp	r3, #4
 800b266:	d02e      	beq.n	800b2c6 <UART_SetConfig+0x217e>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26c:	2b05      	cmp	r3, #5
 800b26e:	d028      	beq.n	800b2c2 <UART_SetConfig+0x217a>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b274:	2b06      	cmp	r3, #6
 800b276:	d022      	beq.n	800b2be <UART_SetConfig+0x2176>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27c:	2b07      	cmp	r3, #7
 800b27e:	d01c      	beq.n	800b2ba <UART_SetConfig+0x2172>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b284:	2b08      	cmp	r3, #8
 800b286:	d016      	beq.n	800b2b6 <UART_SetConfig+0x216e>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28c:	2b09      	cmp	r3, #9
 800b28e:	d00f      	beq.n	800b2b0 <UART_SetConfig+0x2168>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b294:	2b0a      	cmp	r3, #10
 800b296:	d008      	beq.n	800b2aa <UART_SetConfig+0x2162>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29c:	2b0b      	cmp	r3, #11
 800b29e:	d102      	bne.n	800b2a6 <UART_SetConfig+0x215e>
 800b2a0:	f643 5309 	movw	r3, #15625	; 0x3d09
 800b2a4:	e018      	b.n	800b2d8 <UART_SetConfig+0x2190>
 800b2a6:	4b18      	ldr	r3, [pc, #96]	; (800b308 <UART_SetConfig+0x21c0>)
 800b2a8:	e016      	b.n	800b2d8 <UART_SetConfig+0x2190>
 800b2aa:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b2ae:	e013      	b.n	800b2d8 <UART_SetConfig+0x2190>
 800b2b0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b2b4:	e010      	b.n	800b2d8 <UART_SetConfig+0x2190>
 800b2b6:	4b1b      	ldr	r3, [pc, #108]	; (800b324 <UART_SetConfig+0x21dc>)
 800b2b8:	e00e      	b.n	800b2d8 <UART_SetConfig+0x2190>
 800b2ba:	4b0f      	ldr	r3, [pc, #60]	; (800b2f8 <UART_SetConfig+0x21b0>)
 800b2bc:	e00c      	b.n	800b2d8 <UART_SetConfig+0x2190>
 800b2be:	4b1a      	ldr	r3, [pc, #104]	; (800b328 <UART_SetConfig+0x21e0>)
 800b2c0:	e00a      	b.n	800b2d8 <UART_SetConfig+0x2190>
 800b2c2:	4b1a      	ldr	r3, [pc, #104]	; (800b32c <UART_SetConfig+0x21e4>)
 800b2c4:	e008      	b.n	800b2d8 <UART_SetConfig+0x2190>
 800b2c6:	4b0d      	ldr	r3, [pc, #52]	; (800b2fc <UART_SetConfig+0x21b4>)
 800b2c8:	e006      	b.n	800b2d8 <UART_SetConfig+0x2190>
 800b2ca:	4b19      	ldr	r3, [pc, #100]	; (800b330 <UART_SetConfig+0x21e8>)
 800b2cc:	e004      	b.n	800b2d8 <UART_SetConfig+0x2190>
 800b2ce:	4b0c      	ldr	r3, [pc, #48]	; (800b300 <UART_SetConfig+0x21b8>)
 800b2d0:	e002      	b.n	800b2d8 <UART_SetConfig+0x2190>
 800b2d2:	4b0c      	ldr	r3, [pc, #48]	; (800b304 <UART_SetConfig+0x21bc>)
 800b2d4:	e000      	b.n	800b2d8 <UART_SetConfig+0x2190>
 800b2d6:	4b0c      	ldr	r3, [pc, #48]	; (800b308 <UART_SetConfig+0x21c0>)
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	6852      	ldr	r2, [r2, #4]
 800b2dc:	0852      	lsrs	r2, r2, #1
 800b2de:	441a      	add	r2, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b2ec:	e086      	b.n	800b3fc <UART_SetConfig+0x22b4>
 800b2ee:	bf00      	nop
 800b2f0:	58024400 	.word	0x58024400
 800b2f4:	03d09000 	.word	0x03d09000
 800b2f8:	0003d090 	.word	0x0003d090
 800b2fc:	0007a120 	.word	0x0007a120
 800b300:	000f4240 	.word	0x000f4240
 800b304:	001e8480 	.word	0x001e8480
 800b308:	003d0900 	.word	0x003d0900
 800b30c:	00516155 	.word	0x00516155
 800b310:	0061a800 	.word	0x0061a800
 800b314:	007a1200 	.word	0x007a1200
 800b318:	00a2c2aa 	.word	0x00a2c2aa
 800b31c:	00f42400 	.word	0x00f42400
 800b320:	01e84800 	.word	0x01e84800
 800b324:	0001e848 	.word	0x0001e848
 800b328:	00051615 	.word	0x00051615
 800b32c:	00061a80 	.word	0x00061a80
 800b330:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d04e      	beq.n	800b3da <UART_SetConfig+0x2292>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b340:	2b01      	cmp	r3, #1
 800b342:	d047      	beq.n	800b3d4 <UART_SetConfig+0x228c>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b348:	2b02      	cmp	r3, #2
 800b34a:	d040      	beq.n	800b3ce <UART_SetConfig+0x2286>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b350:	2b03      	cmp	r3, #3
 800b352:	d039      	beq.n	800b3c8 <UART_SetConfig+0x2280>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b358:	2b04      	cmp	r3, #4
 800b35a:	d032      	beq.n	800b3c2 <UART_SetConfig+0x227a>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b360:	2b05      	cmp	r3, #5
 800b362:	d02b      	beq.n	800b3bc <UART_SetConfig+0x2274>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b368:	2b06      	cmp	r3, #6
 800b36a:	d024      	beq.n	800b3b6 <UART_SetConfig+0x226e>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b370:	2b07      	cmp	r3, #7
 800b372:	d01d      	beq.n	800b3b0 <UART_SetConfig+0x2268>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b378:	2b08      	cmp	r3, #8
 800b37a:	d016      	beq.n	800b3aa <UART_SetConfig+0x2262>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b380:	2b09      	cmp	r3, #9
 800b382:	d00f      	beq.n	800b3a4 <UART_SetConfig+0x225c>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b388:	2b0a      	cmp	r3, #10
 800b38a:	d008      	beq.n	800b39e <UART_SetConfig+0x2256>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b390:	2b0b      	cmp	r3, #11
 800b392:	d101      	bne.n	800b398 <UART_SetConfig+0x2250>
 800b394:	2380      	movs	r3, #128	; 0x80
 800b396:	e022      	b.n	800b3de <UART_SetConfig+0x2296>
 800b398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b39c:	e01f      	b.n	800b3de <UART_SetConfig+0x2296>
 800b39e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3a2:	e01c      	b.n	800b3de <UART_SetConfig+0x2296>
 800b3a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3a8:	e019      	b.n	800b3de <UART_SetConfig+0x2296>
 800b3aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3ae:	e016      	b.n	800b3de <UART_SetConfig+0x2296>
 800b3b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b3b4:	e013      	b.n	800b3de <UART_SetConfig+0x2296>
 800b3b6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800b3ba:	e010      	b.n	800b3de <UART_SetConfig+0x2296>
 800b3bc:	f640 43cc 	movw	r3, #3276	; 0xccc
 800b3c0:	e00d      	b.n	800b3de <UART_SetConfig+0x2296>
 800b3c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3c6:	e00a      	b.n	800b3de <UART_SetConfig+0x2296>
 800b3c8:	f241 5355 	movw	r3, #5461	; 0x1555
 800b3cc:	e007      	b.n	800b3de <UART_SetConfig+0x2296>
 800b3ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3d2:	e004      	b.n	800b3de <UART_SetConfig+0x2296>
 800b3d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b3d8:	e001      	b.n	800b3de <UART_SetConfig+0x2296>
 800b3da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	6852      	ldr	r2, [r2, #4]
 800b3e2:	0852      	lsrs	r2, r2, #1
 800b3e4:	441a      	add	r2, r3
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b3f2:	e003      	b.n	800b3fc <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b3fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3fe:	2b0f      	cmp	r3, #15
 800b400:	d908      	bls.n	800b414 <UART_SetConfig+0x22cc>
 800b402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b408:	d204      	bcs.n	800b414 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b410:	60da      	str	r2, [r3, #12]
 800b412:	e002      	b.n	800b41a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2201      	movs	r2, #1
 800b41e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2201      	movs	r2, #1
 800b426:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b436:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3740      	adds	r7, #64	; 0x40
 800b43e:	46bd      	mov	sp, r7
 800b440:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800b444 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b450:	f003 0301 	and.w	r3, r3, #1
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00a      	beq.n	800b46e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	430a      	orrs	r2, r1
 800b46c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b472:	f003 0302 	and.w	r3, r3, #2
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00a      	beq.n	800b490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	430a      	orrs	r2, r1
 800b48e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b494:	f003 0304 	and.w	r3, r3, #4
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00a      	beq.n	800b4b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	430a      	orrs	r2, r1
 800b4b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b6:	f003 0308 	and.w	r3, r3, #8
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00a      	beq.n	800b4d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	430a      	orrs	r2, r1
 800b4d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d8:	f003 0310 	and.w	r3, r3, #16
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d00a      	beq.n	800b4f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	430a      	orrs	r2, r1
 800b4f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4fa:	f003 0320 	and.w	r3, r3, #32
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00a      	beq.n	800b518 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	430a      	orrs	r2, r1
 800b516:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b51c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b520:	2b00      	cmp	r3, #0
 800b522:	d01a      	beq.n	800b55a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	430a      	orrs	r2, r1
 800b538:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b53e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b542:	d10a      	bne.n	800b55a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	430a      	orrs	r2, r1
 800b558:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00a      	beq.n	800b57c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	430a      	orrs	r2, r1
 800b57a:	605a      	str	r2, [r3, #4]
  }
}
 800b57c:	bf00      	nop
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b086      	sub	sp, #24
 800b58c:	af02      	add	r7, sp, #8
 800b58e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b598:	f7f6 fd92 	bl	80020c0 <HAL_GetTick>
 800b59c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f003 0308 	and.w	r3, r3, #8
 800b5a8:	2b08      	cmp	r3, #8
 800b5aa:	d10e      	bne.n	800b5ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b5b0:	9300      	str	r3, [sp, #0]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 f82c 	bl	800b618 <UART_WaitOnFlagUntilTimeout>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d001      	beq.n	800b5ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	e022      	b.n	800b610 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f003 0304 	and.w	r3, r3, #4
 800b5d4:	2b04      	cmp	r3, #4
 800b5d6:	d10e      	bne.n	800b5f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b5dc:	9300      	str	r3, [sp, #0]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 f816 	bl	800b618 <UART_WaitOnFlagUntilTimeout>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d001      	beq.n	800b5f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	e00c      	b.n	800b610 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2220      	movs	r2, #32
 800b5fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2220      	movs	r2, #32
 800b602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	3710      	adds	r7, #16
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	603b      	str	r3, [r7, #0]
 800b624:	4613      	mov	r3, r2
 800b626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b628:	e062      	b.n	800b6f0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b630:	d05e      	beq.n	800b6f0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b632:	f7f6 fd45 	bl	80020c0 <HAL_GetTick>
 800b636:	4602      	mov	r2, r0
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	1ad3      	subs	r3, r2, r3
 800b63c:	69ba      	ldr	r2, [r7, #24]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d302      	bcc.n	800b648 <UART_WaitOnFlagUntilTimeout+0x30>
 800b642:	69bb      	ldr	r3, [r7, #24]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d11d      	bne.n	800b684 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	681a      	ldr	r2, [r3, #0]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b656:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	689a      	ldr	r2, [r3, #8]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f022 0201 	bic.w	r2, r2, #1
 800b666:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2220      	movs	r2, #32
 800b66c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2220      	movs	r2, #32
 800b674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b680:	2303      	movs	r3, #3
 800b682:	e045      	b.n	800b710 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f003 0304 	and.w	r3, r3, #4
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d02e      	beq.n	800b6f0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	69db      	ldr	r3, [r3, #28]
 800b698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b69c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6a0:	d126      	bne.n	800b6f0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b6aa:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b6ba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	689a      	ldr	r2, [r3, #8]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f022 0201 	bic.w	r2, r2, #1
 800b6ca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2220      	movs	r2, #32
 800b6d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2220      	movs	r2, #32
 800b6d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2220      	movs	r2, #32
 800b6e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800b6ec:	2303      	movs	r3, #3
 800b6ee:	e00f      	b.n	800b710 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	69da      	ldr	r2, [r3, #28]
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	4013      	ands	r3, r2
 800b6fa:	68ba      	ldr	r2, [r7, #8]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	bf0c      	ite	eq
 800b700:	2301      	moveq	r3, #1
 800b702:	2300      	movne	r3, #0
 800b704:	b2db      	uxtb	r3, r3
 800b706:	461a      	mov	r2, r3
 800b708:	79fb      	ldrb	r3, [r7, #7]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d08d      	beq.n	800b62a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b70e:	2300      	movs	r3, #0
}
 800b710:	4618      	mov	r0, r3
 800b712:	3710      	adds	r7, #16
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b72e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	6899      	ldr	r1, [r3, #8]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	4b08      	ldr	r3, [pc, #32]	; (800b75c <UART_EndRxTransfer+0x44>)
 800b73c:	400b      	ands	r3, r1
 800b73e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2220      	movs	r2, #32
 800b744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800b74e:	bf00      	nop
 800b750:	370c      	adds	r7, #12
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	effffffe 	.word	0xeffffffe

0800b760 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2200      	movs	r2, #0
 800b772:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2200      	movs	r2, #0
 800b77a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f7fd fcd6 	bl	8009130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b784:	bf00      	nop
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b79a:	2b21      	cmp	r3, #33	; 0x21
 800b79c:	d12a      	bne.n	800b7f4 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d110      	bne.n	800b7cc <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b7b8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7c8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b7ca:	e013      	b.n	800b7f4 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d0:	781a      	ldrb	r2, [r3, #0]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7dc:	1c5a      	adds	r2, r3, #1
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	b29a      	uxth	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800b7f4:	bf00      	nop
 800b7f6:	370c      	adds	r7, #12
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b800:	b480      	push	{r7}
 800b802:	b085      	sub	sp, #20
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b80e:	2b21      	cmp	r3, #33	; 0x21
 800b810:	d12f      	bne.n	800b872 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b818:	b29b      	uxth	r3, r3
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d110      	bne.n	800b840 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b82c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b83c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b83e:	e018      	b.n	800b872 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b844:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	881b      	ldrh	r3, [r3, #0]
 800b84a:	461a      	mov	r2, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b854:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b85a:	1c9a      	adds	r2, r3, #2
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b866:	b29b      	uxth	r3, r3
 800b868:	3b01      	subs	r3, #1
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800b872:	bf00      	nop
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr

0800b87e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b87e:	b480      	push	{r7}
 800b880:	b085      	sub	sp, #20
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b88c:	2b21      	cmp	r3, #33	; 0x21
 800b88e:	d13d      	bne.n	800b90c <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b896:	81fb      	strh	r3, [r7, #14]
 800b898:	e035      	b.n	800b906 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d111      	bne.n	800b8ca <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	689a      	ldr	r2, [r3, #8]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800b8b4:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8c4:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800b8c6:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800b8c8:	e020      	b.n	800b90c <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	69db      	ldr	r3, [r3, #28]
 800b8d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d013      	beq.n	800b900 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8dc:	781a      	ldrb	r2, [r3, #0]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8e8:	1c5a      	adds	r2, r3, #1
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	3b01      	subs	r3, #1
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b900:	89fb      	ldrh	r3, [r7, #14]
 800b902:	3b01      	subs	r3, #1
 800b904:	81fb      	strh	r3, [r7, #14]
 800b906:	89fb      	ldrh	r3, [r7, #14]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1c6      	bne.n	800b89a <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800b90c:	bf00      	nop
 800b90e:	3714      	adds	r7, #20
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b918:	b480      	push	{r7}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b926:	2b21      	cmp	r3, #33	; 0x21
 800b928:	d142      	bne.n	800b9b0 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b930:	81fb      	strh	r3, [r7, #14]
 800b932:	e03a      	b.n	800b9aa <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d111      	bne.n	800b964 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	689a      	ldr	r2, [r3, #8]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800b94e:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	681a      	ldr	r2, [r3, #0]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b95e:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800b960:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800b962:	e025      	b.n	800b9b0 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	69db      	ldr	r3, [r3, #28]
 800b96a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d018      	beq.n	800b9a4 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b976:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	881b      	ldrh	r3, [r3, #0]
 800b97c:	461a      	mov	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b986:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b98c:	1c9a      	adds	r2, r3, #2
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b998:	b29b      	uxth	r3, r3
 800b99a:	3b01      	subs	r3, #1
 800b99c:	b29a      	uxth	r2, r3
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b9a4:	89fb      	ldrh	r3, [r7, #14]
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	81fb      	strh	r3, [r7, #14]
 800b9aa:	89fb      	ldrh	r3, [r7, #14]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1c1      	bne.n	800b934 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800b9b0:	bf00      	nop
 800b9b2:	3714      	adds	r7, #20
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr

0800b9bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b9d2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2220      	movs	r2, #32
 800b9d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f7f4 ffe6 	bl	80009b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9e8:	bf00      	nop
 800b9ea:	3708      	adds	r7, #8
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b9fe:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba06:	2b22      	cmp	r3, #34	; 0x22
 800ba08:	d13b      	bne.n	800ba82 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba10:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ba12:	89bb      	ldrh	r3, [r7, #12]
 800ba14:	b2d9      	uxtb	r1, r3
 800ba16:	89fb      	ldrh	r3, [r7, #14]
 800ba18:	b2da      	uxtb	r2, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba1e:	400a      	ands	r2, r1
 800ba20:	b2d2      	uxtb	r2, r2
 800ba22:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba28:	1c5a      	adds	r2, r3, #1
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	3b01      	subs	r3, #1
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d122      	bne.n	800ba92 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ba5a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	689a      	ldr	r2, [r3, #8]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f022 0201 	bic.w	r2, r2, #1
 800ba6a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2220      	movs	r2, #32
 800ba70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f7f4 ffdc 	bl	8000a38 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ba80:	e007      	b.n	800ba92 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	699a      	ldr	r2, [r3, #24]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f042 0208 	orr.w	r2, r2, #8
 800ba90:	619a      	str	r2, [r3, #24]
}
 800ba92:	bf00      	nop
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b084      	sub	sp, #16
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800baa8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bab0:	2b22      	cmp	r3, #34	; 0x22
 800bab2:	d13b      	bne.n	800bb2c <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baba:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bac0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800bac2:	89ba      	ldrh	r2, [r7, #12]
 800bac4:	89fb      	ldrh	r3, [r7, #14]
 800bac6:	4013      	ands	r3, r2
 800bac8:	b29a      	uxth	r2, r3
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bad2:	1c9a      	adds	r2, r3, #2
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bade:	b29b      	uxth	r3, r3
 800bae0:	3b01      	subs	r3, #1
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d122      	bne.n	800bb3c <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bb04:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	689a      	ldr	r2, [r3, #8]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f022 0201 	bic.w	r2, r2, #1
 800bb14:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2220      	movs	r2, #32
 800bb1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f7f4 ff87 	bl	8000a38 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bb2a:	e007      	b.n	800bb3c <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	699a      	ldr	r2, [r3, #24]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f042 0208 	orr.w	r2, r2, #8
 800bb3a:	619a      	str	r2, [r3, #24]
}
 800bb3c:	bf00      	nop
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb52:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb5a:	2b22      	cmp	r3, #34	; 0x22
 800bb5c:	d166      	bne.n	800bc2c <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bb64:	81fb      	strh	r3, [r7, #14]
 800bb66:	e03d      	b.n	800bbe4 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6e:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bb70:	893b      	ldrh	r3, [r7, #8]
 800bb72:	b2d9      	uxtb	r1, r3
 800bb74:	89bb      	ldrh	r3, [r7, #12]
 800bb76:	b2da      	uxtb	r2, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb7c:	400a      	ands	r2, r1
 800bb7e:	b2d2      	uxtb	r2, r2
 800bb80:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb86:	1c5a      	adds	r2, r3, #1
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	3b01      	subs	r3, #1
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d119      	bne.n	800bbde <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bbb8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	6899      	ldr	r1, [r3, #8]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	4b1f      	ldr	r3, [pc, #124]	; (800bc44 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800bbc6:	400b      	ands	r3, r1
 800bbc8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2220      	movs	r2, #32
 800bbce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f7f4 ff2d 	bl	8000a38 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bbde:	89fb      	ldrh	r3, [r7, #14]
 800bbe0:	3b01      	subs	r3, #1
 800bbe2:	81fb      	strh	r3, [r7, #14]
 800bbe4:	89fb      	ldrh	r3, [r7, #14]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1be      	bne.n	800bb68 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbf0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bbf2:	897b      	ldrh	r3, [r7, #10]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d021      	beq.n	800bc3c <UART_RxISR_8BIT_FIFOEN+0xf8>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bbfe:	897a      	ldrh	r2, [r7, #10]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d21b      	bcs.n	800bc3c <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	689a      	ldr	r2, [r3, #8]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bc12:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4a0c      	ldr	r2, [pc, #48]	; (800bc48 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800bc18:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f042 0220 	orr.w	r2, r2, #32
 800bc28:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bc2a:	e007      	b.n	800bc3c <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	699a      	ldr	r2, [r3, #24]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f042 0208 	orr.w	r2, r2, #8
 800bc3a:	619a      	str	r2, [r3, #24]
}
 800bc3c:	bf00      	nop
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	effffffe 	.word	0xeffffffe
 800bc48:	0800b9f1 	.word	0x0800b9f1

0800bc4c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b086      	sub	sp, #24
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc5a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc62:	2b22      	cmp	r3, #34	; 0x22
 800bc64:	d166      	bne.n	800bd34 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bc6c:	82fb      	strh	r3, [r7, #22]
 800bc6e:	e03d      	b.n	800bcec <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc76:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc7c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800bc7e:	8a3a      	ldrh	r2, [r7, #16]
 800bc80:	8abb      	ldrh	r3, [r7, #20]
 800bc82:	4013      	ands	r3, r2
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc8e:	1c9a      	adds	r2, r3, #2
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d119      	bne.n	800bce6 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bcc0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	6899      	ldr	r1, [r3, #8]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	4b1f      	ldr	r3, [pc, #124]	; (800bd4c <UART_RxISR_16BIT_FIFOEN+0x100>)
 800bcce:	400b      	ands	r3, r1
 800bcd0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2220      	movs	r2, #32
 800bcd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f7f4 fea9 	bl	8000a38 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bce6:	8afb      	ldrh	r3, [r7, #22]
 800bce8:	3b01      	subs	r3, #1
 800bcea:	82fb      	strh	r3, [r7, #22]
 800bcec:	8afb      	ldrh	r3, [r7, #22]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d1be      	bne.n	800bc70 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bcf8:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bcfa:	8a7b      	ldrh	r3, [r7, #18]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d021      	beq.n	800bd44 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bd06:	8a7a      	ldrh	r2, [r7, #18]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d21b      	bcs.n	800bd44 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	689a      	ldr	r2, [r3, #8]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bd1a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a0c      	ldr	r2, [pc, #48]	; (800bd50 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800bd20:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f042 0220 	orr.w	r2, r2, #32
 800bd30:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bd32:	e007      	b.n	800bd44 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	699a      	ldr	r2, [r3, #24]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f042 0208 	orr.w	r2, r2, #8
 800bd42:	619a      	str	r2, [r3, #24]
}
 800bd44:	bf00      	nop
 800bd46:	3718      	adds	r7, #24
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	effffffe 	.word	0xeffffffe
 800bd50:	0800ba9b 	.word	0x0800ba9b

0800bd54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bd5c:	bf00      	nop
 800bd5e:	370c      	adds	r7, #12
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bd70:	bf00      	nop
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bd84:	bf00      	nop
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d101      	bne.n	800bda6 <HAL_UARTEx_DisableFifoMode+0x16>
 800bda2:	2302      	movs	r3, #2
 800bda4:	e027      	b.n	800bdf6 <HAL_UARTEx_DisableFifoMode+0x66>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2224      	movs	r2, #36	; 0x24
 800bdb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	681a      	ldr	r2, [r3, #0]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f022 0201 	bic.w	r2, r2, #1
 800bdcc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bdd4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	68fa      	ldr	r2, [r7, #12]
 800bde2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2220      	movs	r2, #32
 800bde8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3714      	adds	r7, #20
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr

0800be02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b084      	sub	sp, #16
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
 800be0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800be12:	2b01      	cmp	r3, #1
 800be14:	d101      	bne.n	800be1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800be16:	2302      	movs	r3, #2
 800be18:	e02d      	b.n	800be76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2201      	movs	r2, #1
 800be1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2224      	movs	r2, #36	; 0x24
 800be26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f022 0201 	bic.w	r2, r2, #1
 800be40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	683a      	ldr	r2, [r7, #0]
 800be52:	430a      	orrs	r2, r1
 800be54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 f850 	bl	800befc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	68fa      	ldr	r2, [r7, #12]
 800be62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2220      	movs	r2, #32
 800be68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800be74:	2300      	movs	r3, #0
}
 800be76:	4618      	mov	r0, r3
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be7e:	b580      	push	{r7, lr}
 800be80:	b084      	sub	sp, #16
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
 800be86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d101      	bne.n	800be96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800be92:	2302      	movs	r3, #2
 800be94:	e02d      	b.n	800bef2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2201      	movs	r2, #1
 800be9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2224      	movs	r2, #36	; 0x24
 800bea2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f022 0201 	bic.w	r2, r2, #1
 800bebc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	683a      	ldr	r2, [r7, #0]
 800bece:	430a      	orrs	r2, r1
 800bed0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 f812 	bl	800befc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2220      	movs	r2, #32
 800bee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
	...

0800befc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800befc:	b480      	push	{r7}
 800befe:	b089      	sub	sp, #36	; 0x24
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800bf04:	4a2f      	ldr	r2, [pc, #188]	; (800bfc4 <UARTEx_SetNbDataToProcess+0xc8>)
 800bf06:	f107 0314 	add.w	r3, r7, #20
 800bf0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf0e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800bf12:	4a2d      	ldr	r2, [pc, #180]	; (800bfc8 <UARTEx_SetNbDataToProcess+0xcc>)
 800bf14:	f107 030c 	add.w	r3, r7, #12
 800bf18:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf1c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d108      	bne.n	800bf3a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bf38:	e03d      	b.n	800bfb6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bf3a:	2308      	movs	r3, #8
 800bf3c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bf3e:	2308      	movs	r3, #8
 800bf40:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	0e5b      	lsrs	r3, r3, #25
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	f003 0307 	and.w	r3, r3, #7
 800bf50:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	0f5b      	lsrs	r3, r3, #29
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	f003 0307 	and.w	r3, r3, #7
 800bf60:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bf62:	7fbb      	ldrb	r3, [r7, #30]
 800bf64:	7f3a      	ldrb	r2, [r7, #28]
 800bf66:	f107 0120 	add.w	r1, r7, #32
 800bf6a:	440a      	add	r2, r1
 800bf6c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bf70:	fb02 f303 	mul.w	r3, r2, r3
 800bf74:	7f3a      	ldrb	r2, [r7, #28]
 800bf76:	f107 0120 	add.w	r1, r7, #32
 800bf7a:	440a      	add	r2, r1
 800bf7c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bf80:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf84:	b29a      	uxth	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800bf8c:	7ffb      	ldrb	r3, [r7, #31]
 800bf8e:	7f7a      	ldrb	r2, [r7, #29]
 800bf90:	f107 0120 	add.w	r1, r7, #32
 800bf94:	440a      	add	r2, r1
 800bf96:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bf9a:	fb02 f303 	mul.w	r3, r2, r3
 800bf9e:	7f7a      	ldrb	r2, [r7, #29]
 800bfa0:	f107 0120 	add.w	r1, r7, #32
 800bfa4:	440a      	add	r2, r1
 800bfa6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bfaa:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bfb6:	bf00      	nop
 800bfb8:	3724      	adds	r7, #36	; 0x24
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr
 800bfc2:	bf00      	nop
 800bfc4:	0800c03c 	.word	0x0800c03c
 800bfc8:	0800c044 	.word	0x0800c044

0800bfcc <__libc_init_array>:
 800bfcc:	b570      	push	{r4, r5, r6, lr}
 800bfce:	4e0d      	ldr	r6, [pc, #52]	; (800c004 <__libc_init_array+0x38>)
 800bfd0:	4c0d      	ldr	r4, [pc, #52]	; (800c008 <__libc_init_array+0x3c>)
 800bfd2:	1ba4      	subs	r4, r4, r6
 800bfd4:	10a4      	asrs	r4, r4, #2
 800bfd6:	2500      	movs	r5, #0
 800bfd8:	42a5      	cmp	r5, r4
 800bfda:	d109      	bne.n	800bff0 <__libc_init_array+0x24>
 800bfdc:	4e0b      	ldr	r6, [pc, #44]	; (800c00c <__libc_init_array+0x40>)
 800bfde:	4c0c      	ldr	r4, [pc, #48]	; (800c010 <__libc_init_array+0x44>)
 800bfe0:	f000 f820 	bl	800c024 <_init>
 800bfe4:	1ba4      	subs	r4, r4, r6
 800bfe6:	10a4      	asrs	r4, r4, #2
 800bfe8:	2500      	movs	r5, #0
 800bfea:	42a5      	cmp	r5, r4
 800bfec:	d105      	bne.n	800bffa <__libc_init_array+0x2e>
 800bfee:	bd70      	pop	{r4, r5, r6, pc}
 800bff0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bff4:	4798      	blx	r3
 800bff6:	3501      	adds	r5, #1
 800bff8:	e7ee      	b.n	800bfd8 <__libc_init_array+0xc>
 800bffa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bffe:	4798      	blx	r3
 800c000:	3501      	adds	r5, #1
 800c002:	e7f2      	b.n	800bfea <__libc_init_array+0x1e>
 800c004:	0800c06c 	.word	0x0800c06c
 800c008:	0800c06c 	.word	0x0800c06c
 800c00c:	0800c06c 	.word	0x0800c06c
 800c010:	0800c070 	.word	0x0800c070

0800c014 <memset>:
 800c014:	4402      	add	r2, r0
 800c016:	4603      	mov	r3, r0
 800c018:	4293      	cmp	r3, r2
 800c01a:	d100      	bne.n	800c01e <memset+0xa>
 800c01c:	4770      	bx	lr
 800c01e:	f803 1b01 	strb.w	r1, [r3], #1
 800c022:	e7f9      	b.n	800c018 <memset+0x4>

0800c024 <_init>:
 800c024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c026:	bf00      	nop
 800c028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c02a:	bc08      	pop	{r3}
 800c02c:	469e      	mov	lr, r3
 800c02e:	4770      	bx	lr

0800c030 <_fini>:
 800c030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c032:	bf00      	nop
 800c034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c036:	bc08      	pop	{r3}
 800c038:	469e      	mov	lr, r3
 800c03a:	4770      	bx	lr
