
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbf4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800be8c  0800be8c  0001be8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800beb4  0800beb4  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  0800beb4  0800beb4  0001beb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bebc  0800bebc  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bebc  0800bebc  0001bebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bec0  0800bec0  0001bec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  24000000  0800bec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  24000028  0800beec  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240006bc  0800beec  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020784  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ed3  00000000  00000000  000407da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015c8  00000000  00000000  000436b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b0  00000000  00000000  00044c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038692  00000000  00000000  00046128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001227c  00000000  00000000  0007e7ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0017387c  00000000  00000000  00090a36  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002042b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e30  00000000  00000000  00204330  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000028 	.word	0x24000028
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800be74 	.word	0x0800be74

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400002c 	.word	0x2400002c
 80002d4:	0800be74 	.word	0x0800be74

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayUs_Init+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <delayUs_Init+0x38>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <delayUs_Init+0x38>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delayUs_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delayUs_Init+0x3c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <delayUs_Init+0x3c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
    }
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000

08000618 <peripheralUART_Init>:
int trackingWait4CompassTx;
int trackingWait4CompassRx;
int trackingWait4SpinalCordTx;
int trackingWait4SpinalCordRx;
void peripheralUART_Init()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	4903      	ldr	r1, [pc, #12]	; (800062c <peripheralUART_Init+0x14>)
 8000620:	4803      	ldr	r0, [pc, #12]	; (8000630 <peripheralUART_Init+0x18>)
 8000622:	f008 fa57 	bl	8008ad4 <HAL_UART_Receive_IT>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	240005f4 	.word	0x240005f4
 8000630:	24000540 	.word	0x24000540

08000634 <compassReset>:

////////////////////////////////////////////////////////////
void compassReset(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <compassReset+0x1c>)
 800063a:	2261      	movs	r2, #97	; 0x61
 800063c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 800063e:	2201      	movs	r2, #1
 8000640:	4903      	ldr	r1, [pc, #12]	; (8000650 <compassReset+0x1c>)
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <compassReset+0x20>)
 8000644:	f008 f9c2 	bl	80089cc <HAL_UART_Transmit_IT>
	wait4CompassTx();
 8000648:	f000 f806 	bl	8000658 <wait4CompassTx>
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	24000000 	.word	0x24000000
 8000654:	240003d0 	.word	0x240003d0

08000658 <wait4CompassTx>:

	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
	while(compassTxCplt == 0)
 800065c:	e004      	b.n	8000668 <wait4CompassTx+0x10>
	{
		trackingWait4CompassTx++;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <wait4CompassTx+0x28>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	4a06      	ldr	r2, [pc, #24]	; (8000680 <wait4CompassTx+0x28>)
 8000666:	6013      	str	r3, [r2, #0]
	while(compassTxCplt == 0)
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <wait4CompassTx+0x2c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0f6      	beq.n	800065e <wait4CompassTx+0x6>
	}
	compassTxCplt = 0;
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <wait4CompassTx+0x2c>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	240006b4 	.word	0x240006b4
 8000684:	240005f0 	.word	0x240005f0

08000688 <controlMotor1>:
int trackingControlMotor2;
int trackingControlMotor3;
int trackingControlMotor4;

void controlMotor1(int _speed)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor1Dir_Pin, motor1Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor1Speed] = abs(_speed);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <controlMotor1+0x40>)
 800069c:	701a      	strb	r2, [r3, #0]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor1Dir] = ccw) : (spinalCordTxPacket[motor1Dir] = fcw);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db03      	blt.n	80006ac <controlMotor1+0x24>
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <controlMotor1+0x40>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	711a      	strb	r2, [r3, #4]
 80006aa:	e002      	b.n	80006b2 <controlMotor1+0x2a>
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <controlMotor1+0x40>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	711a      	strb	r2, [r3, #4]
	trackingControlMotor1++;
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <controlMotor1+0x44>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3301      	adds	r3, #1
 80006b8:	4a04      	ldr	r2, [pc, #16]	; (80006cc <controlMotor1+0x44>)
 80006ba:	6013      	str	r3, [r2, #0]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	2400000c 	.word	0x2400000c
 80006cc:	240003c0 	.word	0x240003c0

080006d0 <controlMotor2>:
void controlMotor2(int _speed)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor2Dir_Pin, motor2Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor2Speed] = abs(_speed);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	bfb8      	it	lt
 80006de:	425b      	neglt	r3, r3
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <controlMotor2+0x40>)
 80006e4:	705a      	strb	r2, [r3, #1]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor2Dir] = ccw) : (spinalCordTxPacket[motor2Dir] = fcw);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db03      	blt.n	80006f4 <controlMotor2+0x24>
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <controlMotor2+0x40>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	715a      	strb	r2, [r3, #5]
 80006f2:	e002      	b.n	80006fa <controlMotor2+0x2a>
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <controlMotor2+0x40>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	715a      	strb	r2, [r3, #5]
	trackingControlMotor2++;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <controlMotor2+0x44>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3301      	adds	r3, #1
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <controlMotor2+0x44>)
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	2400000c 	.word	0x2400000c
 8000714:	2400022c 	.word	0x2400022c

08000718 <controlMotor3>:
void controlMotor3(int _speed)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor3Dir_Pin, motor3Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor3Speed] = abs(_speed);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	bfb8      	it	lt
 8000726:	425b      	neglt	r3, r3
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <controlMotor3+0x40>)
 800072c:	709a      	strb	r2, [r3, #2]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor3Dir] = ccw) : (spinalCordTxPacket[motor3Dir] = fcw);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2b00      	cmp	r3, #0
 8000732:	db03      	blt.n	800073c <controlMotor3+0x24>
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <controlMotor3+0x40>)
 8000736:	2200      	movs	r2, #0
 8000738:	719a      	strb	r2, [r3, #6]
 800073a:	e002      	b.n	8000742 <controlMotor3+0x2a>
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <controlMotor3+0x40>)
 800073e:	2201      	movs	r2, #1
 8000740:	719a      	strb	r2, [r3, #6]
	trackingControlMotor3++;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <controlMotor3+0x44>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <controlMotor3+0x44>)
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	2400000c 	.word	0x2400000c
 800075c:	240001b0 	.word	0x240001b0

08000760 <controlMotor4>:
void controlMotor4(int _speed)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor3Dir_Pin, motor3Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor4Speed] = abs(_speed);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	bfb8      	it	lt
 800076e:	425b      	neglt	r3, r3
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <controlMotor4+0x40>)
 8000774:	70da      	strb	r2, [r3, #3]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor4Dir] = ccw) : (spinalCordTxPacket[motor4Dir] = fcw);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b00      	cmp	r3, #0
 800077a:	db03      	blt.n	8000784 <controlMotor4+0x24>
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <controlMotor4+0x40>)
 800077e:	2200      	movs	r2, #0
 8000780:	71da      	strb	r2, [r3, #7]
 8000782:	e002      	b.n	800078a <controlMotor4+0x2a>
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <controlMotor4+0x40>)
 8000786:	2201      	movs	r2, #1
 8000788:	71da      	strb	r2, [r3, #7]
	trackingControlMotor4++;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <controlMotor4+0x44>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	3301      	adds	r3, #1
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <controlMotor4+0x44>)
 8000792:	6013      	str	r3, [r2, #0]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	2400000c 	.word	0x2400000c
 80007a4:	240004f8 	.word	0x240004f8

080007a8 <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 80007ac:	4805      	ldr	r0, [pc, #20]	; (80007c4 <positionControl_Init+0x1c>)
 80007ae:	f007 fc9d 	bl	80080ec <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&leftArm);
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <positionControl_Init+0x20>)
 80007b4:	f007 fc9a 	bl	80080ec <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&rigtArm);
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <positionControl_Init+0x24>)
 80007ba:	f007 fc97 	bl	80080ec <HAL_TIM_Base_Start_IT>
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	24000660 	.word	0x24000660
 80007c8:	240001b8 	.word	0x240001b8
 80007cc:	24000618 	.word	0x24000618

080007d0 <HAL_UART_TxCpltCallback>:
//include cuối "USER CODE BEGIN 0"
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <HAL_UART_TxCpltCallback+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d103      	bne.n	80007ec <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt = 1;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <HAL_UART_TxCpltCallback+0x68>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == manualRobot.Instance)
	{
		manualRobotTxCplt = 1;
	}
}
 80007ea:	e01c      	b.n	8000826 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_UART_TxCpltCallback+0x6c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d103      	bne.n	8000800 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt = 1;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <HAL_UART_TxCpltCallback+0x70>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
}
 80007fe:	e012      	b.n	8000826 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_UART_TxCpltCallback+0x74>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	429a      	cmp	r2, r3
 800080a:	d103      	bne.n	8000814 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt = 1;
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_UART_TxCpltCallback+0x78>)
 800080e:	2201      	movs	r2, #1
 8000810:	701a      	strb	r2, [r3, #0]
}
 8000812:	e008      	b.n	8000826 <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == manualRobot.Instance)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <HAL_UART_TxCpltCallback+0x7c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	429a      	cmp	r2, r3
 800081e:	d102      	bne.n	8000826 <HAL_UART_TxCpltCallback+0x56>
		manualRobotTxCplt = 1;
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <HAL_UART_TxCpltCallback+0x80>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	240003d0 	.word	0x240003d0
 8000838:	240005f0 	.word	0x240005f0
 800083c:	24000124 	.word	0x24000124
 8000840:	24000228 	.word	0x24000228
 8000844:	24000540 	.word	0x24000540
 8000848:	24000468 	.word	0x24000468
 800084c:	24000070 	.word	0x24000070
 8000850:	2400050c 	.word	0x2400050c

08000854 <HAL_UART_RxCpltCallback>:
int trackingReceiSpinalCord;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <HAL_UART_RxCpltCallback+0x84>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	429a      	cmp	r2, r3
 8000866:	d103      	bne.n	8000870 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt = 1;
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <HAL_UART_RxCpltCallback+0x88>)
 800086a:	2201      	movs	r2, #1
 800086c:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == manualRobot.Instance)
	{
		manualRobotRxCplt = 1;
	}
}
 800086e:	e02f      	b.n	80008d0 <HAL_UART_RxCpltCallback+0x7c>
	else if(huart->Instance == PS2.Instance)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <HAL_UART_RxCpltCallback+0x8c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d103      	bne.n	8000884 <HAL_UART_RxCpltCallback+0x30>
		PS2RxCplt = 1;
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <HAL_UART_RxCpltCallback+0x90>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
}
 8000882:	e025      	b.n	80008d0 <HAL_UART_RxCpltCallback+0x7c>
	else if(huart->Instance == spinalCord.Instance)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <HAL_UART_RxCpltCallback+0x94>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	429a      	cmp	r2, r3
 800088e:	d116      	bne.n	80008be <HAL_UART_RxCpltCallback+0x6a>
		if(spinalCordRxPacket[0]!=0)
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <HAL_UART_RxCpltCallback+0x98>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d009      	beq.n	80008ac <HAL_UART_RxCpltCallback+0x58>
			trackingReceiSpinalCord++;
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <HAL_UART_RxCpltCallback+0x9c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <HAL_UART_RxCpltCallback+0x9c>)
 80008a0:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_IT(&spinalCord, spinalCordTxPacket, 9);
 80008a2:	2209      	movs	r2, #9
 80008a4:	4913      	ldr	r1, [pc, #76]	; (80008f4 <HAL_UART_RxCpltCallback+0xa0>)
 80008a6:	4810      	ldr	r0, [pc, #64]	; (80008e8 <HAL_UART_RxCpltCallback+0x94>)
 80008a8:	f008 f890 	bl	80089cc <HAL_UART_Transmit_IT>
		spinalCordRxCplt = 1;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_UART_RxCpltCallback+0xa4>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 80008b2:	2201      	movs	r2, #1
 80008b4:	490d      	ldr	r1, [pc, #52]	; (80008ec <HAL_UART_RxCpltCallback+0x98>)
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <HAL_UART_RxCpltCallback+0x94>)
 80008b8:	f008 f90c 	bl	8008ad4 <HAL_UART_Receive_IT>
}
 80008bc:	e008      	b.n	80008d0 <HAL_UART_RxCpltCallback+0x7c>
	else if(huart->Instance == manualRobot.Instance)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_UART_RxCpltCallback+0xa8>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d102      	bne.n	80008d0 <HAL_UART_RxCpltCallback+0x7c>
		manualRobotRxCplt = 1;
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <HAL_UART_RxCpltCallback+0xac>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	240003d0 	.word	0x240003d0
 80008dc:	240002d8 	.word	0x240002d8
 80008e0:	24000124 	.word	0x24000124
 80008e4:	24000469 	.word	0x24000469
 80008e8:	24000540 	.word	0x24000540
 80008ec:	240005f4 	.word	0x240005f4
 80008f0:	2400065c 	.word	0x2400065c
 80008f4:	2400000c 	.word	0x2400000c
 80008f8:	24000658 	.word	0x24000658
 80008fc:	24000070 	.word	0x24000070
 8000900:	24000348 	.word	0x24000348

08000904 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4ba3      	ldr	r3, [pc, #652]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	429a      	cmp	r2, r3
 8000916:	f040 8170 	bne.w	8000bfa <HAL_TIM_PeriodElapsedCallback+0x2f6>
	{
		if(legEn == 1)
 800091a:	4ba2      	ldr	r3, [pc, #648]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d16b      	bne.n	80009fa <HAL_TIM_PeriodElapsedCallback+0xf6>
		{
			if(legStatus == legInitShoot)
 8000922:	4ba1      	ldr	r3, [pc, #644]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d11f      	bne.n	800096a <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000930:	489e      	ldr	r0, [pc, #632]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000932:	f004 fd31 	bl	8005398 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);
 8000936:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093a:	489c      	ldr	r0, [pc, #624]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800093c:	f004 fd45 	bl	80053ca <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000940:	4b9b      	ldr	r3, [pc, #620]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	4a9a      	ldr	r2, [pc, #616]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000948:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;
 800094a:	4b9a      	ldr	r3, [pc, #616]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	3301      	adds	r3, #1
 8000950:	4a98      	ldr	r2, [pc, #608]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000952:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legInitShootPulse)
 8000954:	4b97      	ldr	r3, [pc, #604]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800095c:	db05      	blt.n	800096a <HAL_TIM_PeriodElapsedCallback+0x66>
				{
					legEn = 0;
 800095e:	4b91      	ldr	r3, [pc, #580]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;
 8000964:	4b93      	ldr	r3, [pc, #588]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legReInitShoot)
 800096a:	4b8f      	ldr	r3, [pc, #572]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d11f      	bne.n	80009b2 <HAL_TIM_PeriodElapsedCallback+0xae>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000978:	488c      	ldr	r0, [pc, #560]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800097a:	f004 fd0d 	bl	8005398 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);
 800097e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000982:	488a      	ldr	r0, [pc, #552]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000984:	f004 fd21 	bl	80053ca <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000988:	4b89      	ldr	r3, [pc, #548]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	4a88      	ldr	r2, [pc, #544]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000990:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;
 8000992:	4b88      	ldr	r3, [pc, #544]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3301      	adds	r3, #1
 8000998:	4a86      	ldr	r2, [pc, #536]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800099a:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legReInitShootPulse)
 800099c:	4b85      	ldr	r3, [pc, #532]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80009a4:	db05      	blt.n	80009b2 <HAL_TIM_PeriodElapsedCallback+0xae>
				{
					legEn = 0;
 80009a6:	4b7f      	ldr	r3, [pc, #508]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;
 80009ac:	4b81      	ldr	r3, [pc, #516]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 80009b2:	4b7d      	ldr	r3, [pc, #500]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d11f      	bne.n	80009fa <HAL_TIM_PeriodElapsedCallback+0xf6>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c0:	487a      	ldr	r0, [pc, #488]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80009c2:	f004 fce9 	bl	8005398 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);
 80009c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ca:	4878      	ldr	r0, [pc, #480]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80009cc:	f004 fcfd 	bl	80053ca <HAL_GPIO_TogglePin>
				trackingLeg++;
 80009d0:	4b77      	ldr	r3, [pc, #476]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	3301      	adds	r3, #1
 80009d6:	4a76      	ldr	r2, [pc, #472]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80009d8:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;
 80009da:	4b76      	ldr	r3, [pc, #472]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	4a74      	ldr	r2, [pc, #464]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80009e2:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legEndPulse)
 80009e4:	4b73      	ldr	r3, [pc, #460]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80009ec:	db05      	blt.n	80009fa <HAL_TIM_PeriodElapsedCallback+0xf6>
				{
					legEn = 0;
 80009ee:	4b6d      	ldr	r3, [pc, #436]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;
 80009f4:	4b6f      	ldr	r3, [pc, #444]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if(rigtArmEn == 1)
 80009fa:	4b6f      	ldr	r3, [pc, #444]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d16b      	bne.n	8000ada <HAL_TIM_PeriodElapsedCallback+0x1d6>
		{
			if(rigtArmStatus == rigtArmInit)
 8000a02:	4b6e      	ldr	r3, [pc, #440]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d11f      	bne.n	8000a4a <HAL_TIM_PeriodElapsedCallback+0x146>
			{
				HAL_GPIO_WritePin(rigtArmDir_GPIO_Port, rigtArmDir_Pin, rigtArm_CCW);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a10:	486b      	ldr	r0, [pc, #428]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a12:	f004 fcc1 	bl	8005398 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(rigtArmPul_GPIO_Port, rigtArmPul_Pin);
 8000a16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a1a:	4869      	ldr	r0, [pc, #420]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a1c:	f004 fcd5 	bl	80053ca <HAL_GPIO_TogglePin>
				trackingRigtArm++;
 8000a20:	4b68      	ldr	r3, [pc, #416]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	4a67      	ldr	r2, [pc, #412]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000a28:	6013      	str	r3, [r2, #0]
				rigtArmElapsedPulses++;
 8000a2a:	4b67      	ldr	r3, [pc, #412]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	4a65      	ldr	r2, [pc, #404]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000a32:	6013      	str	r3, [r2, #0]
				if (rigtArmElapsedPulses >= rigtArmInitPulse)
 8000a34:	4b64      	ldr	r3, [pc, #400]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000a3c:	db05      	blt.n	8000a4a <HAL_TIM_PeriodElapsedCallback+0x146>
				{
					rigtArmEn = 0;
 8000a3e:	4b5e      	ldr	r3, [pc, #376]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
					rigtArmElapsedPulses = 0;
 8000a44:	4b60      	ldr	r3, [pc, #384]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
				}
			}
			if(rigtArmStatus == rigtArmSetBall)
 8000a4a:	4b5c      	ldr	r3, [pc, #368]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d11f      	bne.n	8000a92 <HAL_TIM_PeriodElapsedCallback+0x18e>
			{
				HAL_GPIO_WritePin(rigtArmDir_GPIO_Port, rigtArmDir_Pin, rigtArm_CCW);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a58:	4859      	ldr	r0, [pc, #356]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a5a:	f004 fc9d 	bl	8005398 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(rigtArmPul_GPIO_Port, rigtArmPul_Pin);
 8000a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a62:	4857      	ldr	r0, [pc, #348]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a64:	f004 fcb1 	bl	80053ca <HAL_GPIO_TogglePin>
				trackingRigtArm++;
 8000a68:	4b56      	ldr	r3, [pc, #344]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	4a55      	ldr	r2, [pc, #340]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000a70:	6013      	str	r3, [r2, #0]
				rigtArmElapsedPulses++;
 8000a72:	4b55      	ldr	r3, [pc, #340]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3301      	adds	r3, #1
 8000a78:	4a53      	ldr	r2, [pc, #332]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000a7a:	6013      	str	r3, [r2, #0]
				if (rigtArmElapsedPulses >= rigtArmSetBallPulse)
 8000a7c:	4b52      	ldr	r3, [pc, #328]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000a84:	db05      	blt.n	8000a92 <HAL_TIM_PeriodElapsedCallback+0x18e>
				{
					rigtArmEn = 0;
 8000a86:	4b4c      	ldr	r3, [pc, #304]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
					rigtArmElapsedPulses = 0;
 8000a8c:	4b4e      	ldr	r3, [pc, #312]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
				}
			}
			if(rigtArmStatus == rigtArmReturn)
 8000a92:	4b4a      	ldr	r3, [pc, #296]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d11f      	bne.n	8000ada <HAL_TIM_PeriodElapsedCallback+0x1d6>
			{
				HAL_GPIO_WritePin(rigtArmDir_GPIO_Port, rigtArmDir_Pin, rigtArm_FCW);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa0:	4847      	ldr	r0, [pc, #284]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000aa2:	f004 fc79 	bl	8005398 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(rigtArmPul_GPIO_Port, rigtArmPul_Pin);
 8000aa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aaa:	4845      	ldr	r0, [pc, #276]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000aac:	f004 fc8d 	bl	80053ca <HAL_GPIO_TogglePin>
				trackingRigtArm++;
 8000ab0:	4b44      	ldr	r3, [pc, #272]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	4a43      	ldr	r2, [pc, #268]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000ab8:	6013      	str	r3, [r2, #0]
				rigtArmElapsedPulses++;
 8000aba:	4b43      	ldr	r3, [pc, #268]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a41      	ldr	r2, [pc, #260]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000ac2:	6013      	str	r3, [r2, #0]
				if (rigtArmElapsedPulses >= rigtArmSetBallPulse)
 8000ac4:	4b40      	ldr	r3, [pc, #256]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000acc:	db05      	blt.n	8000ada <HAL_TIM_PeriodElapsedCallback+0x1d6>
				{
					rigtArmEn = 0;
 8000ace:	4b3a      	ldr	r3, [pc, #232]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
					rigtArmElapsedPulses = 0;
 8000ad4:	4b3c      	ldr	r3, [pc, #240]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if(leftArmEn == 1)
 8000ada:	4b3c      	ldr	r3, [pc, #240]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	f040 808b 	bne.w	8000bfa <HAL_TIM_PeriodElapsedCallback+0x2f6>
		{
			if(leftArmStatus == leftArmInit)
 8000ae4:	4b3a      	ldr	r3, [pc, #232]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d11e      	bne.n	8000b2a <HAL_TIM_PeriodElapsedCallback+0x226>
			{
				HAL_GPIO_WritePin(leftArmDir_GPIO_Port, leftArmDir_Pin, leftArm_CCW);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af2:	4833      	ldr	r0, [pc, #204]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000af4:	f004 fc50 	bl	8005398 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(leftArmPul_GPIO_Port, leftArmPul_Pin);
 8000af8:	2102      	movs	r1, #2
 8000afa:	4836      	ldr	r0, [pc, #216]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000afc:	f004 fc65 	bl	80053ca <HAL_GPIO_TogglePin>
				trackingLeftArm++;
 8000b00:	4b35      	ldr	r3, [pc, #212]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	3301      	adds	r3, #1
 8000b06:	4a34      	ldr	r2, [pc, #208]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000b08:	6013      	str	r3, [r2, #0]
				leftArmElapsedPulses++;
 8000b0a:	4b34      	ldr	r3, [pc, #208]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	4a32      	ldr	r2, [pc, #200]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b12:	6013      	str	r3, [r2, #0]
				if (leftArmElapsedPulses >= leftArmInitPulse)
 8000b14:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000b1c:	db05      	blt.n	8000b2a <HAL_TIM_PeriodElapsedCallback+0x226>
				{
					leftArmEn = 0;
 8000b1e:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
					leftArmElapsedPulses = 0;
 8000b24:	4b2d      	ldr	r3, [pc, #180]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
				}
			}
			if(leftArmStatus == leftArmSetBall)
 8000b2a:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d11e      	bne.n	8000b70 <HAL_TIM_PeriodElapsedCallback+0x26c>
			{
				HAL_GPIO_WritePin(leftArmDir_GPIO_Port, leftArmDir_Pin, leftArm_CCW);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b38:	4821      	ldr	r0, [pc, #132]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000b3a:	f004 fc2d 	bl	8005398 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(leftArmPul_GPIO_Port, leftArmPul_Pin);
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4824      	ldr	r0, [pc, #144]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000b42:	f004 fc42 	bl	80053ca <HAL_GPIO_TogglePin>
				trackingLeftArm++;
 8000b46:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	4a22      	ldr	r2, [pc, #136]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000b4e:	6013      	str	r3, [r2, #0]
				leftArmElapsedPulses++;
 8000b50:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	4a21      	ldr	r2, [pc, #132]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b58:	6013      	str	r3, [r2, #0]
				if (leftArmElapsedPulses >= leftArmSetBallPulse)
 8000b5a:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000b62:	db05      	blt.n	8000b70 <HAL_TIM_PeriodElapsedCallback+0x26c>
				{
					leftArmEn = 0;
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
					leftArmElapsedPulses = 0;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
				}
			}
			if(leftArmStatus == leftArmReturn)
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d140      	bne.n	8000bfa <HAL_TIM_PeriodElapsedCallback+0x2f6>
			{
				HAL_GPIO_WritePin(leftArmDir_GPIO_Port, leftArmDir_Pin, leftArm_FCW);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b7e:	4810      	ldr	r0, [pc, #64]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000b80:	f004 fc0a 	bl	8005398 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(leftArmPul_GPIO_Port, leftArmPul_Pin);
 8000b84:	2102      	movs	r1, #2
 8000b86:	4813      	ldr	r0, [pc, #76]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000b88:	f004 fc1f 	bl	80053ca <HAL_GPIO_TogglePin>
				trackingLeftArm++;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3301      	adds	r3, #1
 8000b92:	4a11      	ldr	r2, [pc, #68]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000b94:	6013      	str	r3, [r2, #0]
				leftArmElapsedPulses++;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	e020      	b.n	8000be0 <HAL_TIM_PeriodElapsedCallback+0x2dc>
 8000b9e:	bf00      	nop
 8000ba0:	24000660 	.word	0x24000660
 8000ba4:	24000464 	.word	0x24000464
 8000ba8:	240005d4 	.word	0x240005d4
 8000bac:	58020c00 	.word	0x58020c00
 8000bb0:	2400045c 	.word	0x2400045c
 8000bb4:	24000518 	.word	0x24000518
 8000bb8:	24000508 	.word	0x24000508
 8000bbc:	2400006c 	.word	0x2400006c
 8000bc0:	58021800 	.word	0x58021800
 8000bc4:	240005d8 	.word	0x240005d8
 8000bc8:	2400052c 	.word	0x2400052c
 8000bcc:	240006a4 	.word	0x240006a4
 8000bd0:	240004e4 	.word	0x240004e4
 8000bd4:	58021000 	.word	0x58021000
 8000bd8:	24000600 	.word	0x24000600
 8000bdc:	240002dc 	.word	0x240002dc
 8000be0:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000be2:	6013      	str	r3, [r2, #0]
				if (leftArmElapsedPulses >= leftArmSetBallPulse)
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000bec:	db05      	blt.n	8000bfa <HAL_TIM_PeriodElapsedCallback+0x2f6>
				{
					leftArmEn = 0;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
					leftArmElapsedPulses = 0;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == leftArm.Instance)
	{

	}
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	240002dc 	.word	0x240002dc
 8000c08:	240006a4 	.word	0x240006a4

08000c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c12:	f001 f8f9 	bl	8001e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c16:	f000 f88d 	bl	8000d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1a:	f000 fc49 	bl	80014b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c1e:	f000 fc1f 	bl	8001460 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c22:	f000 f93d 	bl	8000ea0 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000c26:	f000 f9c3 	bl	8000fb0 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8000c2a:	f000 fb35 	bl	8001298 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000c2e:	f000 fb7f 	bl	8001330 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000c32:	f000 fa21 	bl	8001078 <MX_TIM7_Init>
  MX_TIM12_Init();
 8000c36:	f000 fa57 	bl	80010e8 <MX_TIM12_Init>
  MX_TIM15_Init();
 8000c3a:	f000 fa8f 	bl	800115c <MX_TIM15_Init>
  MX_UART7_Init();
 8000c3e:	f000 fadf 	bl	8001200 <MX_UART7_Init>
  MX_USART6_UART_Init();
 8000c42:	f000 fbc1 	bl	80013c8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  peripheralUART_Init();
 8000c46:	f7ff fce7 	bl	8000618 <peripheralUART_Init>
  compassReset();
 8000c4a:	f7ff fcf3 	bl	8000634 <compassReset>
  delayUs_Init();
 8000c4e:	f7ff fcc3 	bl	80005d8 <delayUs_Init>
  positionControl_Init();
 8000c52:	f7ff fda9 	bl	80007a8 <positionControl_Init>

//  legEn = 1;
//  legStatus = legInitShoot;
//  leftArmEn = 1;
//  leftArmStatus = leftArmInit;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2101      	movs	r1, #1
 8000c5a:	4835      	ldr	r0, [pc, #212]	; (8000d30 <main+0x124>)
 8000c5c:	f004 fb9c 	bl	8005398 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000c60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c64:	f001 f962 	bl	8001f2c <HAL_Delay>
//	  roL_pit_yaw_mixSpeed();
//	  tracking++;



	  for(int i = 0; i > -255; --i)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	e011      	b.n	8000c92 <main+0x86>
	  {
		  controlMotor1(i);
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f7ff fd0a 	bl	8000688 <controlMotor1>
		  controlMotor2(i);
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	f7ff fd2b 	bl	80006d0 <controlMotor2>
		  controlMotor3(i);
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f7ff fd4c 	bl	8000718 <controlMotor3>
		  controlMotor4(i);
 8000c80:	68f8      	ldr	r0, [r7, #12]
 8000c82:	f7ff fd6d 	bl	8000760 <controlMotor4>
		  HAL_Delay(20);
 8000c86:	2014      	movs	r0, #20
 8000c88:	f001 f950 	bl	8001f2c <HAL_Delay>
	  for(int i = 0; i > -255; --i)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f113 0ffe 	cmn.w	r3, #254	; 0xfe
 8000c98:	dae9      	bge.n	8000c6e <main+0x62>
	  }
	  for(int i = -255; i < 0; ++i)
 8000c9a:	f06f 03fe 	mvn.w	r3, #254	; 0xfe
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	e011      	b.n	8000cc6 <main+0xba>
	  {
		  controlMotor1(i);
 8000ca2:	68b8      	ldr	r0, [r7, #8]
 8000ca4:	f7ff fcf0 	bl	8000688 <controlMotor1>
		  controlMotor2(i);
 8000ca8:	68b8      	ldr	r0, [r7, #8]
 8000caa:	f7ff fd11 	bl	80006d0 <controlMotor2>
		  controlMotor3(i);
 8000cae:	68b8      	ldr	r0, [r7, #8]
 8000cb0:	f7ff fd32 	bl	8000718 <controlMotor3>
		  controlMotor4(i);
 8000cb4:	68b8      	ldr	r0, [r7, #8]
 8000cb6:	f7ff fd53 	bl	8000760 <controlMotor4>
		  HAL_Delay(20);
 8000cba:	2014      	movs	r0, #20
 8000cbc:	f001 f936 	bl	8001f2c <HAL_Delay>
	  for(int i = -255; i < 0; ++i)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	dbea      	blt.n	8000ca2 <main+0x96>
	  }
	  for(int i = 0; i < 255; ++i)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	e011      	b.n	8000cf6 <main+0xea>
	  {
		  controlMotor1(i);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff fcd8 	bl	8000688 <controlMotor1>
		  controlMotor2(i);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff fcf9 	bl	80006d0 <controlMotor2>
		  controlMotor3(i);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff fd1a 	bl	8000718 <controlMotor3>
		  controlMotor4(i);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff fd3b 	bl	8000760 <controlMotor4>
		  HAL_Delay(20);
 8000cea:	2014      	movs	r0, #20
 8000cec:	f001 f91e 	bl	8001f2c <HAL_Delay>
	  for(int i = 0; i < 255; ++i)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2bfe      	cmp	r3, #254	; 0xfe
 8000cfa:	ddea      	ble.n	8000cd2 <main+0xc6>
	  }
	  for(int i = 255; i > 0; --i)
 8000cfc:	23ff      	movs	r3, #255	; 0xff
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	e011      	b.n	8000d26 <main+0x11a>
	  {
		  controlMotor1(i);
 8000d02:	6838      	ldr	r0, [r7, #0]
 8000d04:	f7ff fcc0 	bl	8000688 <controlMotor1>
		  controlMotor2(i);
 8000d08:	6838      	ldr	r0, [r7, #0]
 8000d0a:	f7ff fce1 	bl	80006d0 <controlMotor2>
		  controlMotor3(i);
 8000d0e:	6838      	ldr	r0, [r7, #0]
 8000d10:	f7ff fd02 	bl	8000718 <controlMotor3>
		  controlMotor4(i);
 8000d14:	6838      	ldr	r0, [r7, #0]
 8000d16:	f7ff fd23 	bl	8000760 <controlMotor4>
		  HAL_Delay(20);
 8000d1a:	2014      	movs	r0, #20
 8000d1c:	f001 f906 	bl	8001f2c <HAL_Delay>
	  for(int i = 255; i > 0; --i)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	dcea      	bgt.n	8000d02 <main+0xf6>
	  for(int i = 0; i > -255; --i)
 8000d2c:	e79c      	b.n	8000c68 <main+0x5c>
 8000d2e:	bf00      	nop
 8000d30:	58020400 	.word	0x58020400

08000d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b0cc      	sub	sp, #304	; 0x130
 8000d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d3e:	224c      	movs	r2, #76	; 0x4c
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f00b f88e 	bl	800be64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d48:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d4c:	2220      	movs	r2, #32
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f00b f887 	bl	800be64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	23bc      	movs	r3, #188	; 0xbc
 8000d5e:	461a      	mov	r2, r3
 8000d60:	2100      	movs	r1, #0
 8000d62:	f00b f87f 	bl	800be64 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d66:	2002      	movs	r0, #2
 8000d68:	f004 fb4a 	bl	8005400 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	4b49      	ldr	r3, [pc, #292]	; (8000e98 <SystemClock_Config+0x164>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	4a48      	ldr	r2, [pc, #288]	; (8000e98 <SystemClock_Config+0x164>)
 8000d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d7c:	6193      	str	r3, [r2, #24]
 8000d7e:	4b46      	ldr	r3, [pc, #280]	; (8000e98 <SystemClock_Config+0x164>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	4b44      	ldr	r3, [pc, #272]	; (8000e9c <SystemClock_Config+0x168>)
 8000d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8e:	4a43      	ldr	r2, [pc, #268]	; (8000e9c <SystemClock_Config+0x168>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d96:	4b41      	ldr	r3, [pc, #260]	; (8000e9c <SystemClock_Config+0x168>)
 8000d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9a:	f003 0201 	and.w	r2, r3, #1
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000da6:	bf00      	nop
 8000da8:	4b3b      	ldr	r3, [pc, #236]	; (8000e98 <SystemClock_Config+0x164>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000db4:	d1f8      	bne.n	8000da8 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db6:	2302      	movs	r3, #2
 8000db8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc2:	2340      	movs	r3, #64	; 0x40
 8000dc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000dda:	233c      	movs	r3, #60	; 0x3c
 8000ddc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000de0:	2302      	movs	r3, #2
 8000de2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000de6:	2302      	movs	r3, #2
 8000de8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dec:	2302      	movs	r3, #2
 8000dee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000df2:	230c      	movs	r3, #12
 8000df4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e04:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f004 fb33 	bl	8005474 <HAL_RCC_OscConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000e14:	f000 fc54 	bl	80016c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e18:	233f      	movs	r3, #63	; 0x3f
 8000e1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e2a:	2308      	movs	r3, #8
 8000e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e30:	2340      	movs	r3, #64	; 0x40
 8000e32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e36:	2340      	movs	r3, #64	; 0x40
 8000e38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e44:	2340      	movs	r3, #64	; 0x40
 8000e46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e4a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e4e:	2104      	movs	r1, #4
 8000e50:	4618      	mov	r0, r3
 8000e52:	f004 fee7 	bl	8005c24 <HAL_RCC_ClockConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000e5c:	f000 fc30 	bl	80016c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 8000e60:	f107 0308 	add.w	r3, r7, #8
 8000e64:	2203      	movs	r2, #3
 8000e66:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000e70:	f107 0308 	add.w	r3, r7, #8
 8000e74:	2200      	movs	r2, #0
 8000e76:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f005 fa55 	bl	800632c <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x158>
  {
    Error_Handler();
 8000e88:	f000 fc1a 	bl	80016c0 <Error_Handler>
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	58024800 	.word	0x58024800
 8000e9c:	58000400 	.word	0x58000400

08000ea0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	615a      	str	r2, [r3, #20]
 8000ec2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000ec4:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000ec6:	4a37      	ldr	r2, [pc, #220]	; (8000fa4 <MX_ADC1_Init+0x104>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eca:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000ecc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ed0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed2:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000ed4:	2208      	movs	r2, #8
 8000ed6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ed8:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ede:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ee4:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000ef0:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000efc:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f02:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000f08:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f0e:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f22:	481f      	ldr	r0, [pc, #124]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f24:	f001 f9c6 	bl	80022b4 <HAL_ADC_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000f2e:	f000 fbc7 	bl	80016c0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4818      	ldr	r0, [pc, #96]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f3e:	f001 ff8b 	bl	8002e58 <HAL_ADCEx_MultiModeConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f48:	f000 fbba 	bl	80016c0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <MX_ADC1_Init+0x108>)
 8000f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f50:	2306      	movs	r3, #6
 8000f52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f58:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f5c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f66:	463b      	mov	r3, r7
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f6c:	f001 fb42 	bl	80025f4 <HAL_ADC_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000f76:	f000 fba3 	bl	80016c0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_ADC1_Init+0x10c>)
 8000f7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f7e:	230c      	movs	r3, #12
 8000f80:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f82:	463b      	mov	r3, r7
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f88:	f001 fb34 	bl	80025f4 <HAL_ADC_ConfigChannel>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000f92:	f000 fb95 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	; 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	240002e4 	.word	0x240002e4
 8000fa4:	40022000 	.word	0x40022000
 8000fa8:	2a000400 	.word	0x2a000400
 8000fac:	3ef08000 	.word	0x3ef08000

08000fb0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8000fc8:	4b28      	ldr	r3, [pc, #160]	; (800106c <MX_ADC3_Init+0xbc>)
 8000fca:	4a29      	ldr	r2, [pc, #164]	; (8001070 <MX_ADC3_Init+0xc0>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fce:	4b27      	ldr	r3, [pc, #156]	; (800106c <MX_ADC3_Init+0xbc>)
 8000fd0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fd4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <MX_ADC3_Init+0xbc>)
 8000fd8:	2208      	movs	r2, #8
 8000fda:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fdc:	4b23      	ldr	r3, [pc, #140]	; (800106c <MX_ADC3_Init+0xbc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe2:	4b22      	ldr	r3, [pc, #136]	; (800106c <MX_ADC3_Init+0xbc>)
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <MX_ADC3_Init+0xbc>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000fee:	4b1f      	ldr	r3, [pc, #124]	; (800106c <MX_ADC3_Init+0xbc>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <MX_ADC3_Init+0xbc>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_ADC3_Init+0xbc>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_ADC3_Init+0xbc>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <MX_ADC3_Init+0xbc>)
 8001008:	2200      	movs	r2, #0
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_ADC3_Init+0xbc>)
 800100e:	2203      	movs	r2, #3
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <MX_ADC3_Init+0xbc>)
 8001014:	2200      	movs	r2, #0
 8001016:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_ADC3_Init+0xbc>)
 800101a:	2200      	movs	r2, #0
 800101c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <MX_ADC3_Init+0xbc>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001026:	4811      	ldr	r0, [pc, #68]	; (800106c <MX_ADC3_Init+0xbc>)
 8001028:	f001 f944 	bl	80022b4 <HAL_ADC_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001032:	f000 fb45 	bl	80016c0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_ADC3_Init+0xc4>)
 8001038:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800103a:	2306      	movs	r3, #6
 800103c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001042:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001046:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001048:	2304      	movs	r3, #4
 800104a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_ADC3_Init+0xbc>)
 8001056:	f001 facd 	bl	80025f4 <HAL_ADC_ConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001060:	f000 fb2e 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	24000350 	.word	0x24000350
 8001070:	58026000 	.word	0x58026000
 8001074:	04300002 	.word	0x04300002

08001078 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_TIM7_Init+0x68>)
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <MX_TIM7_Init+0x6c>)
 800108c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_TIM7_Init+0x68>)
 8001090:	f640 125f 	movw	r2, #2399	; 0x95f
 8001094:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_TIM7_Init+0x68>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <MX_TIM7_Init+0x68>)
 800109e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010a2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_TIM7_Init+0x68>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <MX_TIM7_Init+0x68>)
 80010ac:	f006 fff2 	bl	8008094 <HAL_TIM_Base_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80010b6:	f000 fb03 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	4619      	mov	r1, r3
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <MX_TIM7_Init+0x68>)
 80010c8:	f007 fb8a 	bl	80087e0 <HAL_TIMEx_MasterConfigSynchronization>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80010d2:	f000 faf5 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	24000660 	.word	0x24000660
 80010e4:	40001400 	.word	0x40001400

080010e8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ee:	463b      	mov	r3, r7
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_TIM12_Init+0x6c>)
 80010fc:	4a16      	ldr	r2, [pc, #88]	; (8001158 <MX_TIM12_Init+0x70>)
 80010fe:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2399;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_TIM12_Init+0x6c>)
 8001102:	f640 125f 	movw	r2, #2399	; 0x95f
 8001106:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_TIM12_Init+0x6c>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_TIM12_Init+0x6c>)
 8001110:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001114:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_TIM12_Init+0x6c>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <MX_TIM12_Init+0x6c>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001122:	480c      	ldr	r0, [pc, #48]	; (8001154 <MX_TIM12_Init+0x6c>)
 8001124:	f006 ffb6 	bl	8008094 <HAL_TIM_Base_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 800112e:	f000 fac7 	bl	80016c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001136:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_TIM12_Init+0x6c>)
 800113e:	f007 f91f 	bl	8008380 <HAL_TIM_ConfigClockSource>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8001148:	f000 faba 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	24000618 	.word	0x24000618
 8001158:	40001800 	.word	0x40001800

0800115c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800117a:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <MX_TIM15_Init+0x9c>)
 800117c:	4a1f      	ldr	r2, [pc, #124]	; (80011fc <MX_TIM15_Init+0xa0>)
 800117e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2399;
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_TIM15_Init+0x9c>)
 8001182:	f640 125f 	movw	r2, #2399	; 0x95f
 8001186:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MX_TIM15_Init+0x9c>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_TIM15_Init+0x9c>)
 8001190:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001194:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_TIM15_Init+0x9c>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_TIM15_Init+0x9c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <MX_TIM15_Init+0x9c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80011a8:	4813      	ldr	r0, [pc, #76]	; (80011f8 <MX_TIM15_Init+0x9c>)
 80011aa:	f006 ff73 	bl	8008094 <HAL_TIM_Base_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80011b4:	f000 fa84 	bl	80016c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	4619      	mov	r1, r3
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <MX_TIM15_Init+0x9c>)
 80011c6:	f007 f8db 	bl	8008380 <HAL_TIM_ConfigClockSource>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80011d0:	f000 fa76 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_TIM15_Init+0x9c>)
 80011e2:	f007 fafd 	bl	80087e0 <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80011ec:	f000 fa68 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	240001b8 	.word	0x240001b8
 80011fc:	40014000 	.word	0x40014000

08001200 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001204:	4b22      	ldr	r3, [pc, #136]	; (8001290 <MX_UART7_Init+0x90>)
 8001206:	4a23      	ldr	r2, [pc, #140]	; (8001294 <MX_UART7_Init+0x94>)
 8001208:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800120a:	4b21      	ldr	r3, [pc, #132]	; (8001290 <MX_UART7_Init+0x90>)
 800120c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001210:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <MX_UART7_Init+0x90>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_UART7_Init+0x90>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <MX_UART7_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_UART7_Init+0x90>)
 8001226:	220c      	movs	r2, #12
 8001228:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <MX_UART7_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_UART7_Init+0x90>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <MX_UART7_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_UART7_Init+0x90>)
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <MX_UART7_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001248:	4811      	ldr	r0, [pc, #68]	; (8001290 <MX_UART7_Init+0x90>)
 800124a:	f007 fb6f 	bl	800892c <HAL_UART_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001254:	f000 fa34 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001258:	2100      	movs	r1, #0
 800125a:	480d      	ldr	r0, [pc, #52]	; (8001290 <MX_UART7_Init+0x90>)
 800125c:	f00a fcf9 	bl	800bc52 <HAL_UARTEx_SetTxFifoThreshold>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001266:	f000 fa2b 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800126a:	2100      	movs	r1, #0
 800126c:	4808      	ldr	r0, [pc, #32]	; (8001290 <MX_UART7_Init+0x90>)
 800126e:	f00a fd2e 	bl	800bcce <HAL_UARTEx_SetRxFifoThreshold>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001278:	f000 fa22 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800127c:	4804      	ldr	r0, [pc, #16]	; (8001290 <MX_UART7_Init+0x90>)
 800127e:	f00a fcaf 	bl	800bbe0 <HAL_UARTEx_DisableFifoMode>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001288:	f000 fa1a 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	24000070 	.word	0x24000070
 8001294:	40007800 	.word	0x40007800

08001298 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800129c:	4b22      	ldr	r3, [pc, #136]	; (8001328 <MX_USART1_UART_Init+0x90>)
 800129e:	4a23      	ldr	r2, [pc, #140]	; (800132c <MX_USART1_UART_Init+0x94>)
 80012a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <MX_USART1_UART_Init+0x90>)
 80012a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012aa:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <MX_USART1_UART_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <MX_USART1_UART_Init+0x90>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <MX_USART1_UART_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_USART1_UART_Init+0x90>)
 80012be:	220c      	movs	r2, #12
 80012c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <MX_USART1_UART_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MX_USART1_UART_Init+0x90>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <MX_USART1_UART_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_USART1_UART_Init+0x90>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <MX_USART1_UART_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012e0:	4811      	ldr	r0, [pc, #68]	; (8001328 <MX_USART1_UART_Init+0x90>)
 80012e2:	f007 fb23 	bl	800892c <HAL_UART_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80012ec:	f000 f9e8 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f0:	2100      	movs	r1, #0
 80012f2:	480d      	ldr	r0, [pc, #52]	; (8001328 <MX_USART1_UART_Init+0x90>)
 80012f4:	f00a fcad 	bl	800bc52 <HAL_UARTEx_SetTxFifoThreshold>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012fe:	f000 f9df 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001302:	2100      	movs	r1, #0
 8001304:	4808      	ldr	r0, [pc, #32]	; (8001328 <MX_USART1_UART_Init+0x90>)
 8001306:	f00a fce2 	bl	800bcce <HAL_UARTEx_SetRxFifoThreshold>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001310:	f000 f9d6 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001314:	4804      	ldr	r0, [pc, #16]	; (8001328 <MX_USART1_UART_Init+0x90>)
 8001316:	f00a fc63 	bl	800bbe0 <HAL_UARTEx_DisableFifoMode>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001320:	f000 f9ce 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	240003d0 	.word	0x240003d0
 800132c:	40011000 	.word	0x40011000

08001330 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001334:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <MX_USART3_UART_Init+0x90>)
 8001336:	4a23      	ldr	r2, [pc, #140]	; (80013c4 <MX_USART3_UART_Init+0x94>)
 8001338:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800133a:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <MX_USART3_UART_Init+0x90>)
 800133c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001340:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <MX_USART3_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <MX_USART3_UART_Init+0x90>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <MX_USART3_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001354:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <MX_USART3_UART_Init+0x90>)
 8001356:	220c      	movs	r2, #12
 8001358:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <MX_USART3_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001360:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <MX_USART3_UART_Init+0x90>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <MX_USART3_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <MX_USART3_UART_Init+0x90>)
 800136e:	2200      	movs	r2, #0
 8001370:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <MX_USART3_UART_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001378:	4811      	ldr	r0, [pc, #68]	; (80013c0 <MX_USART3_UART_Init+0x90>)
 800137a:	f007 fad7 	bl	800892c <HAL_UART_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001384:	f000 f99c 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001388:	2100      	movs	r1, #0
 800138a:	480d      	ldr	r0, [pc, #52]	; (80013c0 <MX_USART3_UART_Init+0x90>)
 800138c:	f00a fc61 	bl	800bc52 <HAL_UARTEx_SetTxFifoThreshold>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001396:	f000 f993 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800139a:	2100      	movs	r1, #0
 800139c:	4808      	ldr	r0, [pc, #32]	; (80013c0 <MX_USART3_UART_Init+0x90>)
 800139e:	f00a fc96 	bl	800bcce <HAL_UARTEx_SetRxFifoThreshold>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013a8:	f000 f98a 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <MX_USART3_UART_Init+0x90>)
 80013ae:	f00a fc17 	bl	800bbe0 <HAL_UARTEx_DisableFifoMode>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013b8:	f000 f982 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	24000124 	.word	0x24000124
 80013c4:	40004800 	.word	0x40004800

080013c8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013cc:	4b22      	ldr	r3, [pc, #136]	; (8001458 <MX_USART6_UART_Init+0x90>)
 80013ce:	4a23      	ldr	r2, [pc, #140]	; (800145c <MX_USART6_UART_Init+0x94>)
 80013d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013d2:	4b21      	ldr	r3, [pc, #132]	; (8001458 <MX_USART6_UART_Init+0x90>)
 80013d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <MX_USART6_UART_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <MX_USART6_UART_Init+0x90>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013e6:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <MX_USART6_UART_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <MX_USART6_UART_Init+0x90>)
 80013ee:	220c      	movs	r2, #12
 80013f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f2:	4b19      	ldr	r3, [pc, #100]	; (8001458 <MX_USART6_UART_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <MX_USART6_UART_Init+0x90>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fe:	4b16      	ldr	r3, [pc, #88]	; (8001458 <MX_USART6_UART_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001404:	4b14      	ldr	r3, [pc, #80]	; (8001458 <MX_USART6_UART_Init+0x90>)
 8001406:	2200      	movs	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <MX_USART6_UART_Init+0x90>)
 800140c:	2200      	movs	r2, #0
 800140e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001410:	4811      	ldr	r0, [pc, #68]	; (8001458 <MX_USART6_UART_Init+0x90>)
 8001412:	f007 fa8b 	bl	800892c <HAL_UART_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800141c:	f000 f950 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001420:	2100      	movs	r1, #0
 8001422:	480d      	ldr	r0, [pc, #52]	; (8001458 <MX_USART6_UART_Init+0x90>)
 8001424:	f00a fc15 	bl	800bc52 <HAL_UARTEx_SetTxFifoThreshold>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800142e:	f000 f947 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001432:	2100      	movs	r1, #0
 8001434:	4808      	ldr	r0, [pc, #32]	; (8001458 <MX_USART6_UART_Init+0x90>)
 8001436:	f00a fc4a 	bl	800bcce <HAL_UARTEx_SetRxFifoThreshold>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001440:	f000 f93e 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001444:	4804      	ldr	r0, [pc, #16]	; (8001458 <MX_USART6_UART_Init+0x90>)
 8001446:	f00a fbcb 	bl	800bbe0 <HAL_UARTEx_DisableFifoMode>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001450:	f000 f936 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	24000540 	.word	0x24000540
 800145c:	40011400 	.word	0x40011400

08001460 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_DMA_Init+0x4c>)
 8001468:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800146c:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <MX_DMA_Init+0x4c>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <MX_DMA_Init+0x4c>)
 8001478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	200b      	movs	r0, #11
 800148a:	f001 fe9a 	bl	80031c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800148e:	200b      	movs	r0, #11
 8001490:	f001 feb1 	bl	80031f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	200c      	movs	r0, #12
 800149a:	f001 fe92 	bl	80031c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800149e:	200c      	movs	r0, #12
 80014a0:	f001 fea9 	bl	80031f6 <HAL_NVIC_EnableIRQ>

}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	58024400 	.word	0x58024400

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	; 0x30
 80014b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014c6:	4b78      	ldr	r3, [pc, #480]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014cc:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 80014ce:	f043 0320 	orr.w	r3, r3, #32
 80014d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d6:	4b74      	ldr	r3, [pc, #464]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 80014d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014dc:	f003 0320 	and.w	r3, r3, #32
 80014e0:	61bb      	str	r3, [r7, #24]
 80014e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e4:	4b70      	ldr	r3, [pc, #448]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f4:	4b6c      	ldr	r3, [pc, #432]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	4b69      	ldr	r3, [pc, #420]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001508:	4a67      	ldr	r2, [pc, #412]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001512:	4b65      	ldr	r3, [pc, #404]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 8001514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	4b61      	ldr	r3, [pc, #388]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001526:	4a60      	ldr	r2, [pc, #384]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001530:	4b5d      	ldr	r3, [pc, #372]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 8001532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800153e:	4b5a      	ldr	r3, [pc, #360]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 8001540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001544:	4a58      	ldr	r2, [pc, #352]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 8001546:	f043 0310 	orr.w	r3, r3, #16
 800154a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800154e:	4b56      	ldr	r3, [pc, #344]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 8001550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001554:	f003 0310 	and.w	r3, r3, #16
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155c:	4b52      	ldr	r3, [pc, #328]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001562:	4a51      	ldr	r2, [pc, #324]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800156c:	4b4e      	ldr	r3, [pc, #312]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 800156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800157a:	4b4b      	ldr	r3, [pc, #300]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001580:	4a49      	ldr	r2, [pc, #292]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 8001582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001586:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800158a:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <MX_GPIO_Init+0x1f8>)
 800158c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	f240 7104 	movw	r1, #1796	; 0x704
 800159e:	4843      	ldr	r0, [pc, #268]	; (80016ac <MX_GPIO_Init+0x1fc>)
 80015a0:	f003 fefa 	bl	8005398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 80015a4:	2200      	movs	r2, #0
 80015a6:	f242 0167 	movw	r1, #8295	; 0x2067
 80015aa:	4841      	ldr	r0, [pc, #260]	; (80016b0 <MX_GPIO_Init+0x200>)
 80015ac:	f003 fef4 	bl	8005398 <HAL_GPIO_WritePin>
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2182      	movs	r1, #130	; 0x82
 80015b4:	483f      	ldr	r0, [pc, #252]	; (80016b4 <MX_GPIO_Init+0x204>)
 80015b6:	f003 feef 	bl	8005398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80015c0:	483d      	ldr	r0, [pc, #244]	; (80016b8 <MX_GPIO_Init+0x208>)
 80015c2:	f003 fee9 	bl	8005398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 5178 	mov.w	r1, #15872	; 0x3e00
 80015cc:	483b      	ldr	r0, [pc, #236]	; (80016bc <MX_GPIO_Init+0x20c>)
 80015ce:	f003 fee3 	bl	8005398 <HAL_GPIO_WritePin>
                          |rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : cylinder_SetTee_Pin cylinder_RigtArmHoldBallTop_Pin cylinder_HoldBall_Pin cylinder_LeftArmHoldBall_Pin */
  GPIO_InitStruct.Pin = cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin;
 80015d2:	f240 7304 	movw	r3, #1796	; 0x704
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	4830      	ldr	r0, [pc, #192]	; (80016ac <MX_GPIO_Init+0x1fc>)
 80015ec:	f003 fd24 	bl	8005038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 cylinder_RigtArmTrans_Pin cylinder_PassBall_Pin cylinder_LeftArmTrans_Pin 
                           cylinder_RigtArmHoldBallBot_Pin cylinder_LiftBall_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 80015f0:	f242 0367 	movw	r3, #8295	; 0x2067
 80015f4:	61fb      	str	r3, [r7, #28]
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4829      	ldr	r0, [pc, #164]	; (80016b0 <MX_GPIO_Init+0x200>)
 800160a:	f003 fd15 	bl	8005038 <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	4619      	mov	r1, r3
 8001624:	4823      	ldr	r0, [pc, #140]	; (80016b4 <MX_GPIO_Init+0x204>)
 8001626:	f003 fd07 	bl	8005038 <HAL_GPIO_Init>

  /*Configure GPIO pin : legDir_Pin */
  GPIO_InitStruct.Pin = legDir_Pin;
 800162a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legDir_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	481d      	ldr	r0, [pc, #116]	; (80016b8 <MX_GPIO_Init+0x208>)
 8001644:	f003 fcf8 	bl	8005038 <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 8001648:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800164c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	4815      	ldr	r0, [pc, #84]	; (80016b8 <MX_GPIO_Init+0x208>)
 8001662:	f003 fce9 	bl	8005038 <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8001666:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 800166a:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4619      	mov	r1, r3
 800167e:	480f      	ldr	r0, [pc, #60]	; (80016bc <MX_GPIO_Init+0x20c>)
 8001680:	f003 fcda 	bl	8005038 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 8001684:	2302      	movs	r3, #2
 8001686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <MX_GPIO_Init+0x204>)
 800169c:	f003 fccc 	bl	8005038 <HAL_GPIO_Init>

}
 80016a0:	bf00      	nop
 80016a2:	3730      	adds	r7, #48	; 0x30
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	58024400 	.word	0x58024400
 80016ac:	58020000 	.word	0x58020000
 80016b0:	58020400 	.word	0x58020400
 80016b4:	58021000 	.word	0x58021000
 80016b8:	58020c00 	.word	0x58020c00
 80016bc:	58021800 	.word	0x58021800

080016c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_MspInit+0x30>)
 80016d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016dc:	4a08      	ldr	r2, [pc, #32]	; (8001700 <HAL_MspInit+0x30>)
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_MspInit+0x30>)
 80016e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	58024400 	.word	0x58024400

08001704 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	; 0x30
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a6a      	ldr	r2, [pc, #424]	; (80018cc <HAL_ADC_MspInit+0x1c8>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d175      	bne.n	8001812 <HAL_ADC_MspInit+0x10e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001726:	4b6a      	ldr	r3, [pc, #424]	; (80018d0 <HAL_ADC_MspInit+0x1cc>)
 8001728:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800172c:	4a68      	ldr	r2, [pc, #416]	; (80018d0 <HAL_ADC_MspInit+0x1cc>)
 800172e:	f043 0320 	orr.w	r3, r3, #32
 8001732:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001736:	4b66      	ldr	r3, [pc, #408]	; (80018d0 <HAL_ADC_MspInit+0x1cc>)
 8001738:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800173c:	f003 0320 	and.w	r3, r3, #32
 8001740:	61bb      	str	r3, [r7, #24]
 8001742:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001744:	4b62      	ldr	r3, [pc, #392]	; (80018d0 <HAL_ADC_MspInit+0x1cc>)
 8001746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174a:	4a61      	ldr	r2, [pc, #388]	; (80018d0 <HAL_ADC_MspInit+0x1cc>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001754:	4b5e      	ldr	r3, [pc, #376]	; (80018d0 <HAL_ADC_MspInit+0x1cc>)
 8001756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	4b5b      	ldr	r3, [pc, #364]	; (80018d0 <HAL_ADC_MspInit+0x1cc>)
 8001764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001768:	4a59      	ldr	r2, [pc, #356]	; (80018d0 <HAL_ADC_MspInit+0x1cc>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001772:	4b57      	ldr	r3, [pc, #348]	; (80018d0 <HAL_ADC_MspInit+0x1cc>)
 8001774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_INP10
    PA3     ------> ADC1_INP15 
    */
    GPIO_InitStruct.Pin = RollRigt_Pin;
 8001780:	2301      	movs	r3, #1
 8001782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001784:	2303      	movs	r3, #3
 8001786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RollRigt_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	4619      	mov	r1, r3
 8001792:	4850      	ldr	r0, [pc, #320]	; (80018d4 <HAL_ADC_MspInit+0x1d0>)
 8001794:	f003 fc50 	bl	8005038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RollLeft_Pin;
 8001798:	2308      	movs	r3, #8
 800179a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800179c:	2303      	movs	r3, #3
 800179e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RollLeft_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4619      	mov	r1, r3
 80017aa:	484b      	ldr	r0, [pc, #300]	; (80018d8 <HAL_ADC_MspInit+0x1d4>)
 80017ac:	f003 fc44 	bl	8005038 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80017b0:	4b4a      	ldr	r3, [pc, #296]	; (80018dc <HAL_ADC_MspInit+0x1d8>)
 80017b2:	4a4b      	ldr	r2, [pc, #300]	; (80018e0 <HAL_ADC_MspInit+0x1dc>)
 80017b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80017b6:	4b49      	ldr	r3, [pc, #292]	; (80018dc <HAL_ADC_MspInit+0x1d8>)
 80017b8:	2209      	movs	r2, #9
 80017ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017bc:	4b47      	ldr	r3, [pc, #284]	; (80018dc <HAL_ADC_MspInit+0x1d8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c2:	4b46      	ldr	r3, [pc, #280]	; (80018dc <HAL_ADC_MspInit+0x1d8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017c8:	4b44      	ldr	r3, [pc, #272]	; (80018dc <HAL_ADC_MspInit+0x1d8>)
 80017ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017d0:	4b42      	ldr	r3, [pc, #264]	; (80018dc <HAL_ADC_MspInit+0x1d8>)
 80017d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017d8:	4b40      	ldr	r3, [pc, #256]	; (80018dc <HAL_ADC_MspInit+0x1d8>)
 80017da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017de:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017e0:	4b3e      	ldr	r3, [pc, #248]	; (80018dc <HAL_ADC_MspInit+0x1d8>)
 80017e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017e8:	4b3c      	ldr	r3, [pc, #240]	; (80018dc <HAL_ADC_MspInit+0x1d8>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <HAL_ADC_MspInit+0x1d8>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017f4:	4839      	ldr	r0, [pc, #228]	; (80018dc <HAL_ADC_MspInit+0x1d8>)
 80017f6:	f001 fd19 	bl	800322c <HAL_DMA_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001800:	f7ff ff5e 	bl	80016c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a35      	ldr	r2, [pc, #212]	; (80018dc <HAL_ADC_MspInit+0x1d8>)
 8001808:	64da      	str	r2, [r3, #76]	; 0x4c
 800180a:	4a34      	ldr	r2, [pc, #208]	; (80018dc <HAL_ADC_MspInit+0x1d8>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001810:	e058      	b.n	80018c4 <HAL_ADC_MspInit+0x1c0>
  else if(hadc->Instance==ADC3)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a33      	ldr	r2, [pc, #204]	; (80018e4 <HAL_ADC_MspInit+0x1e0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d153      	bne.n	80018c4 <HAL_ADC_MspInit+0x1c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800181c:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <HAL_ADC_MspInit+0x1cc>)
 800181e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001822:	4a2b      	ldr	r2, [pc, #172]	; (80018d0 <HAL_ADC_MspInit+0x1cc>)
 8001824:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001828:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800182c:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <HAL_ADC_MspInit+0x1cc>)
 800182e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001832:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800183a:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <HAL_ADC_MspInit+0x1cc>)
 800183c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001840:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <HAL_ADC_MspInit+0x1cc>)
 8001842:	f043 0304 	orr.w	r3, r3, #4
 8001846:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <HAL_ADC_MspInit+0x1cc>)
 800184c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001858:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800185c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001860:	f000 fb92 	bl	8001f88 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001864:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <HAL_ADC_MspInit+0x1e4>)
 8001866:	4a21      	ldr	r2, [pc, #132]	; (80018ec <HAL_ADC_MspInit+0x1e8>)
 8001868:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800186a:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <HAL_ADC_MspInit+0x1e4>)
 800186c:	2273      	movs	r2, #115	; 0x73
 800186e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <HAL_ADC_MspInit+0x1e4>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001876:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <HAL_ADC_MspInit+0x1e4>)
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_ADC_MspInit+0x1e4>)
 800187e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001882:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_ADC_MspInit+0x1e4>)
 8001886:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800188a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_ADC_MspInit+0x1e4>)
 800188e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001892:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <HAL_ADC_MspInit+0x1e4>)
 8001896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800189a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_ADC_MspInit+0x1e4>)
 800189e:	2200      	movs	r2, #0
 80018a0:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HAL_ADC_MspInit+0x1e4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80018a8:	480f      	ldr	r0, [pc, #60]	; (80018e8 <HAL_ADC_MspInit+0x1e4>)
 80018aa:	f001 fcbf 	bl	800322c <HAL_DMA_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_ADC_MspInit+0x1b4>
      Error_Handler();
 80018b4:	f7ff ff04 	bl	80016c0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <HAL_ADC_MspInit+0x1e4>)
 80018bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <HAL_ADC_MspInit+0x1e4>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80018c4:	bf00      	nop
 80018c6:	3730      	adds	r7, #48	; 0x30
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40022000 	.word	0x40022000
 80018d0:	58024400 	.word	0x58024400
 80018d4:	58020800 	.word	0x58020800
 80018d8:	58020000 	.word	0x58020000
 80018dc:	2400046c 	.word	0x2400046c
 80018e0:	40020010 	.word	0x40020010
 80018e4:	58026000 	.word	0x58026000
 80018e8:	24000238 	.word	0x24000238
 80018ec:	40020028 	.word	0x40020028

080018f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a2b      	ldr	r2, [pc, #172]	; (80019ac <HAL_TIM_Base_MspInit+0xbc>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d117      	bne.n	8001932 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001902:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_TIM_Base_MspInit+0xc0>)
 8001904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001908:	4a29      	ldr	r2, [pc, #164]	; (80019b0 <HAL_TIM_Base_MspInit+0xc0>)
 800190a:	f043 0320 	orr.w	r3, r3, #32
 800190e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <HAL_TIM_Base_MspInit+0xc0>)
 8001914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001918:	f003 0320 	and.w	r3, r3, #32
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	2037      	movs	r0, #55	; 0x37
 8001926:	f001 fc4c 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800192a:	2037      	movs	r0, #55	; 0x37
 800192c:	f001 fc63 	bl	80031f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001930:	e038      	b.n	80019a4 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM12)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a1f      	ldr	r2, [pc, #124]	; (80019b4 <HAL_TIM_Base_MspInit+0xc4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d117      	bne.n	800196c <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <HAL_TIM_Base_MspInit+0xc0>)
 800193e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001942:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <HAL_TIM_Base_MspInit+0xc0>)
 8001944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001948:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <HAL_TIM_Base_MspInit+0xc0>)
 800194e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	202b      	movs	r0, #43	; 0x2b
 8001960:	f001 fc2f 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001964:	202b      	movs	r0, #43	; 0x2b
 8001966:	f001 fc46 	bl	80031f6 <HAL_NVIC_EnableIRQ>
}
 800196a:	e01b      	b.n	80019a4 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM15)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <HAL_TIM_Base_MspInit+0xc8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d116      	bne.n	80019a4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_TIM_Base_MspInit+0xc0>)
 8001978:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800197c:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <HAL_TIM_Base_MspInit+0xc0>)
 800197e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001982:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_TIM_Base_MspInit+0xc0>)
 8001988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800198c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	2100      	movs	r1, #0
 8001998:	2074      	movs	r0, #116	; 0x74
 800199a:	f001 fc12 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800199e:	2074      	movs	r0, #116	; 0x74
 80019a0:	f001 fc29 	bl	80031f6 <HAL_NVIC_EnableIRQ>
}
 80019a4:	bf00      	nop
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40001400 	.word	0x40001400
 80019b0:	58024400 	.word	0x58024400
 80019b4:	40001800 	.word	0x40001800
 80019b8:	40014000 	.word	0x40014000

080019bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b090      	sub	sp, #64	; 0x40
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a79      	ldr	r2, [pc, #484]	; (8001bc0 <HAL_UART_MspInit+0x204>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d136      	bne.n	8001a4c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80019de:	4b79      	ldr	r3, [pc, #484]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 80019e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019e4:	4a77      	ldr	r2, [pc, #476]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 80019e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019ee:	4b75      	ldr	r3, [pc, #468]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 80019f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019fc:	4b71      	ldr	r3, [pc, #452]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 80019fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a02:	4a70      	ldr	r2, [pc, #448]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001a04:	f043 0320 	orr.w	r3, r3, #32
 8001a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0c:	4b6d      	ldr	r3, [pc, #436]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a12:	f003 0320 	and.w	r3, r3, #32
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 8001a1a:	23c0      	movs	r3, #192	; 0xc0
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a32:	4619      	mov	r1, r3
 8001a34:	4864      	ldr	r0, [pc, #400]	; (8001bc8 <HAL_UART_MspInit+0x20c>)
 8001a36:	f003 faff 	bl	8005038 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2104      	movs	r1, #4
 8001a3e:	2052      	movs	r0, #82	; 0x52
 8001a40:	f001 fbbf 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001a44:	2052      	movs	r0, #82	; 0x52
 8001a46:	f001 fbd6 	bl	80031f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a4a:	e0b4      	b.n	8001bb6 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a5e      	ldr	r2, [pc, #376]	; (8001bcc <HAL_UART_MspInit+0x210>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d137      	bne.n	8001ac6 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a56:	4b5b      	ldr	r3, [pc, #364]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001a58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a5c:	4a59      	ldr	r2, [pc, #356]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001a5e:	f043 0310 	orr.w	r3, r3, #16
 8001a62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a66:	4b57      	ldr	r3, [pc, #348]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001a68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	623b      	str	r3, [r7, #32]
 8001a72:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7a:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a84:	4b4f      	ldr	r3, [pc, #316]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	61fb      	str	r3, [r7, #28]
 8001a90:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 8001a92:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aac:	4619      	mov	r1, r3
 8001aae:	4848      	ldr	r0, [pc, #288]	; (8001bd0 <HAL_UART_MspInit+0x214>)
 8001ab0:	f003 fac2 	bl	8005038 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	2025      	movs	r0, #37	; 0x25
 8001aba:	f001 fb82 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001abe:	2025      	movs	r0, #37	; 0x25
 8001ac0:	f001 fb99 	bl	80031f6 <HAL_NVIC_EnableIRQ>
}
 8001ac4:	e077      	b.n	8001bb6 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a42      	ldr	r2, [pc, #264]	; (8001bd4 <HAL_UART_MspInit+0x218>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d137      	bne.n	8001b40 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ad0:	4b3c      	ldr	r3, [pc, #240]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001ad2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ad6:	4a3b      	ldr	r2, [pc, #236]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001adc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ae0:	4b38      	ldr	r3, [pc, #224]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001ae2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aea:	61bb      	str	r3, [r7, #24]
 8001aec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	4b35      	ldr	r3, [pc, #212]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af4:	4a33      	ldr	r2, [pc, #204]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001af6:	f043 0302 	orr.w	r3, r3, #2
 8001afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001afe:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 8001b0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b1e:	2307      	movs	r3, #7
 8001b20:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b26:	4619      	mov	r1, r3
 8001b28:	4829      	ldr	r0, [pc, #164]	; (8001bd0 <HAL_UART_MspInit+0x214>)
 8001b2a:	f003 fa85 	bl	8005038 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2103      	movs	r1, #3
 8001b32:	2027      	movs	r0, #39	; 0x27
 8001b34:	f001 fb45 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b38:	2027      	movs	r0, #39	; 0x27
 8001b3a:	f001 fb5c 	bl	80031f6 <HAL_NVIC_EnableIRQ>
}
 8001b3e:	e03a      	b.n	8001bb6 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART6)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a24      	ldr	r2, [pc, #144]	; (8001bd8 <HAL_UART_MspInit+0x21c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d135      	bne.n	8001bb6 <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b50:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001b52:	f043 0320 	orr.w	r3, r3, #32
 8001b56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b68:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6e:	4a15      	ldr	r2, [pc, #84]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_UART_MspInit+0x208>)
 8001b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 8001b86:	23c0      	movs	r3, #192	; 0xc0
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001b96:	2307      	movs	r3, #7
 8001b98:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480e      	ldr	r0, [pc, #56]	; (8001bdc <HAL_UART_MspInit+0x220>)
 8001ba2:	f003 fa49 	bl	8005038 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2102      	movs	r1, #2
 8001baa:	2047      	movs	r0, #71	; 0x47
 8001bac:	f001 fb09 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001bb0:	2047      	movs	r0, #71	; 0x47
 8001bb2:	f001 fb20 	bl	80031f6 <HAL_NVIC_EnableIRQ>
}
 8001bb6:	bf00      	nop
 8001bb8:	3740      	adds	r7, #64	; 0x40
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40007800 	.word	0x40007800
 8001bc4:	58024400 	.word	0x58024400
 8001bc8:	58021400 	.word	0x58021400
 8001bcc:	40011000 	.word	0x40011000
 8001bd0:	58020400 	.word	0x58020400
 8001bd4:	40004800 	.word	0x40004800
 8001bd8:	40011400 	.word	0x40011400
 8001bdc:	58020800 	.word	0x58020800

08001be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c34:	f000 f95a 	bl	8001eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <DMA1_Stream0_IRQHandler+0x10>)
 8001c42:	f002 f893 	bl	8003d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2400046c 	.word	0x2400046c

08001c50 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <DMA1_Stream1_IRQHandler+0x10>)
 8001c56:	f002 f889 	bl	8003d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	24000238 	.word	0x24000238

08001c64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <USART1_IRQHandler+0x10>)
 8001c6a:	f007 f80b 	bl	8008c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	240003d0 	.word	0x240003d0

08001c78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <USART3_IRQHandler+0x10>)
 8001c7e:	f007 f801 	bl	8008c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	24000124 	.word	0x24000124

08001c8c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001c92:	f006 fa55 	bl	8008140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	24000618 	.word	0x24000618

08001ca0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <TIM7_IRQHandler+0x10>)
 8001ca6:	f006 fa4b 	bl	8008140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	24000660 	.word	0x24000660

08001cb4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <USART6_IRQHandler+0x10>)
 8001cba:	f006 ffe3 	bl	8008c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	24000540 	.word	0x24000540

08001cc8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <UART7_IRQHandler+0x10>)
 8001cce:	f006 ffd9 	bl	8008c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	24000070 	.word	0x24000070

08001cdc <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <TIM15_IRQHandler+0x10>)
 8001ce2:	f006 fa2d 	bl	8008140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	240001b8 	.word	0x240001b8

08001cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cf4:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <SystemInit+0xac>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	4a28      	ldr	r2, [pc, #160]	; (8001d9c <SystemInit+0xac>)
 8001cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d04:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <SystemInit+0xb0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a25      	ldr	r2, [pc, #148]	; (8001da0 <SystemInit+0xb0>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d10:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <SystemInit+0xb0>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d16:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <SystemInit+0xb0>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4921      	ldr	r1, [pc, #132]	; (8001da0 <SystemInit+0xb0>)
 8001d1c:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <SystemInit+0xb4>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d22:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <SystemInit+0xb0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <SystemInit+0xb0>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <SystemInit+0xb0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001d34:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <SystemInit+0xb0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001d3a:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <SystemInit+0xb0>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001d40:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <SystemInit+0xb0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d46:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <SystemInit+0xb0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <SystemInit+0xb0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d52:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <SystemInit+0xb0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <SystemInit+0xb0>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <SystemInit+0xb0>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <SystemInit+0xb0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <SystemInit+0xb0>)
 8001d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <SystemInit+0xb0>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <SystemInit+0xb8>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <SystemInit+0xbc>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d82:	d202      	bcs.n	8001d8a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <SystemInit+0xc0>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <SystemInit+0xac>)
 8001d8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d90:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00
 8001da0:	58024400 	.word	0x58024400
 8001da4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001da8:	5c001000 	.word	0x5c001000
 8001dac:	ffff0000 	.word	0xffff0000
 8001db0:	51008108 	.word	0x51008108

08001db4 <Reset_Handler>:
 8001db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dec <LoopFillZerobss+0x14>
 8001db8:	2100      	movs	r1, #0
 8001dba:	e003      	b.n	8001dc4 <LoopCopyDataInit>

08001dbc <CopyDataInit>:
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <LoopFillZerobss+0x18>)
 8001dbe:	585b      	ldr	r3, [r3, r1]
 8001dc0:	5043      	str	r3, [r0, r1]
 8001dc2:	3104      	adds	r1, #4

08001dc4 <LoopCopyDataInit>:
 8001dc4:	480b      	ldr	r0, [pc, #44]	; (8001df4 <LoopFillZerobss+0x1c>)
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <LoopFillZerobss+0x20>)
 8001dc8:	1842      	adds	r2, r0, r1
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d3f6      	bcc.n	8001dbc <CopyDataInit>
 8001dce:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <LoopFillZerobss+0x24>)
 8001dd0:	e002      	b.n	8001dd8 <LoopFillZerobss>

08001dd2 <FillZerobss>:
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f842 3b04 	str.w	r3, [r2], #4

08001dd8 <LoopFillZerobss>:
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <LoopFillZerobss+0x28>)
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d3f9      	bcc.n	8001dd2 <FillZerobss>
 8001dde:	f7ff ff87 	bl	8001cf0 <SystemInit>
 8001de2:	f00a f81b 	bl	800be1c <__libc_init_array>
 8001de6:	f7fe ff11 	bl	8000c0c <main>
 8001dea:	4770      	bx	lr
 8001dec:	24080000 	.word	0x24080000
 8001df0:	0800bec4 	.word	0x0800bec4
 8001df4:	24000000 	.word	0x24000000
 8001df8:	24000028 	.word	0x24000028
 8001dfc:	24000028 	.word	0x24000028
 8001e00:	240006bc 	.word	0x240006bc

08001e04 <ADC3_IRQHandler>:
 8001e04:	e7fe      	b.n	8001e04 <ADC3_IRQHandler>
	...

08001e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0e:	2003      	movs	r0, #3
 8001e10:	f001 f9cc 	bl	80031ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e14:	f004 f8bc 	bl	8005f90 <HAL_RCC_GetSysClockFreq>
 8001e18:	4601      	mov	r1, r0
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <HAL_Init+0x68>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	0a1b      	lsrs	r3, r3, #8
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	4a13      	ldr	r2, [pc, #76]	; (8001e74 <HAL_Init+0x6c>)
 8001e26:	5cd3      	ldrb	r3, [r2, r3]
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8001e30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e32:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <HAL_Init+0x68>)
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	4a0e      	ldr	r2, [pc, #56]	; (8001e74 <HAL_Init+0x6c>)
 8001e3c:	5cd3      	ldrb	r3, [r2, r3]
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
 8001e48:	4a0b      	ldr	r2, [pc, #44]	; (8001e78 <HAL_Init+0x70>)
 8001e4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e4c:	4a0b      	ldr	r2, [pc, #44]	; (8001e7c <HAL_Init+0x74>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e52:	2000      	movs	r0, #0
 8001e54:	f000 f814 	bl	8001e80 <HAL_InitTick>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e002      	b.n	8001e68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e62:	f7ff fc35 	bl	80016d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	58024400 	.word	0x58024400
 8001e74:	0800be9c 	.word	0x0800be9c
 8001e78:	2400001c 	.word	0x2400001c
 8001e7c:	24000018 	.word	0x24000018

08001e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_InitTick+0x60>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e021      	b.n	8001ed8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <HAL_InitTick+0x64>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_InitTick+0x60>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f001 f9b1 	bl	8003212 <HAL_SYSTICK_Config>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00e      	b.n	8001ed8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b0f      	cmp	r3, #15
 8001ebe:	d80a      	bhi.n	8001ed6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	f001 f97b 	bl	80031c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ecc:	4a06      	ldr	r2, [pc, #24]	; (8001ee8 <HAL_InitTick+0x68>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e000      	b.n	8001ed8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	24000024 	.word	0x24000024
 8001ee4:	24000018 	.word	0x24000018
 8001ee8:	24000020 	.word	0x24000020

08001eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_IncTick+0x20>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_IncTick+0x24>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <HAL_IncTick+0x24>)
 8001efe:	6013      	str	r3, [r2, #0]
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	24000024 	.word	0x24000024
 8001f10:	240006b8 	.word	0x240006b8

08001f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return uwTick;
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <HAL_GetTick+0x14>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	240006b8 	.word	0x240006b8

08001f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff ffee 	bl	8001f14 <HAL_GetTick>
 8001f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d005      	beq.n	8001f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_Delay+0x40>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f52:	bf00      	nop
 8001f54:	f7ff ffde 	bl	8001f14 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d8f7      	bhi.n	8001f54 <HAL_Delay+0x28>
  {
  }
}
 8001f64:	bf00      	nop
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	24000024 	.word	0x24000024

08001f70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_GetREVID+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	0c1b      	lsrs	r3, r3, #16
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	5c001000 	.word	0x5c001000

08001f88 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	4904      	ldr	r1, [pc, #16]	; (8001fb0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	58000400 	.word	0x58000400

08001fb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800201c:	b490      	push	{r4, r7}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3360      	adds	r3, #96	; 0x60
 800202e:	461a      	mov	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	430b      	orrs	r3, r1
 8002048:	4313      	orrs	r3, r2
 800204a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800204c:	bf00      	nop
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bc90      	pop	{r4, r7}
 8002054:	4770      	bx	lr

08002056 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002056:	b480      	push	{r7}
 8002058:	b085      	sub	sp, #20
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	431a      	orrs	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	611a      	str	r2, [r3, #16]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002088:	b490      	push	{r4, r7}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3360      	adds	r3, #96	; 0x60
 8002098:	461a      	mov	r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80020a2:	6823      	ldr	r3, [r4, #0]
 80020a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	6023      	str	r3, [r4, #0]
}
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc90      	pop	{r4, r7}
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020b8:	b490      	push	{r4, r7}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3330      	adds	r3, #48	; 0x30
 80020c8:	461a      	mov	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	0a1b      	lsrs	r3, r3, #8
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	4413      	add	r3, r2
 80020d6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80020d8:	6822      	ldr	r2, [r4, #0]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	211f      	movs	r1, #31
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	401a      	ands	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	0e9b      	lsrs	r3, r3, #26
 80020ee:	f003 011f 	and.w	r1, r3, #31
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	fa01 f303 	lsl.w	r3, r1, r3
 80020fc:	4313      	orrs	r3, r2
 80020fe:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002100:	bf00      	nop
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bc90      	pop	{r4, r7}
 8002108:	4770      	bx	lr

0800210a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800210a:	b490      	push	{r4, r7}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	3314      	adds	r3, #20
 800211a:	461a      	mov	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	0e5b      	lsrs	r3, r3, #25
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	4413      	add	r3, r2
 8002128:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800212a:	6822      	ldr	r2, [r4, #0]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	0d1b      	lsrs	r3, r3, #20
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	2107      	movs	r1, #7
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	401a      	ands	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	0d1b      	lsrs	r3, r3, #20
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	4313      	orrs	r3, r2
 800214e:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bc90      	pop	{r4, r7}
 8002158:	4770      	bx	lr
	...

0800215c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002174:	43db      	mvns	r3, r3
 8002176:	401a      	ands	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f003 0318 	and.w	r3, r3, #24
 800217e:	4908      	ldr	r1, [pc, #32]	; (80021a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002180:	40d9      	lsrs	r1, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	400b      	ands	r3, r1
 8002186:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800218a:	431a      	orrs	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	000fffff 	.word	0x000fffff

080021a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6093      	str	r3, [r2, #8]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	5fffffc0 	.word	0x5fffffc0

080021c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021dc:	d101      	bne.n	80021e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <LL_ADC_EnableInternalRegulator+0x24>)
 80021fe:	4013      	ands	r3, r2
 8002200:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	6fffffc0 	.word	0x6fffffc0

08002218 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002228:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800222c:	d101      	bne.n	8002232 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <LL_ADC_IsEnabled+0x18>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <LL_ADC_IsEnabled+0x1a>
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b04      	cmp	r3, #4
 8002278:	d101      	bne.n	800227e <LL_ADC_REG_IsConversionOngoing+0x18>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b08      	cmp	r3, #8
 800229e:	d101      	bne.n	80022a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	b089      	sub	sp, #36	; 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e18e      	b.n	80025ec <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d109      	bne.n	80022f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff fa11 	bl	8001704 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff67 	bl	80021c8 <LL_ADC_IsDeepPowerDownEnabled>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d004      	beq.n	800230a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff4d 	bl	80021a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff ff82 	bl	8002218 <LL_ADC_IsInternalRegulatorEnabled>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d113      	bne.n	8002342 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ff66 	bl	80021f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002324:	4b9a      	ldr	r3, [pc, #616]	; (8002590 <HAL_ADC_Init+0x2dc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	099b      	lsrs	r3, r3, #6
 800232a:	4a9a      	ldr	r2, [pc, #616]	; (8002594 <HAL_ADC_Init+0x2e0>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	099b      	lsrs	r3, r3, #6
 8002332:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002334:	e002      	b.n	800233c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	3b01      	subs	r3, #1
 800233a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f9      	bne.n	8002336 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ff66 	bl	8002218 <LL_ADC_IsInternalRegulatorEnabled>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10d      	bne.n	800236e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002356:	f043 0210 	orr.w	r2, r3, #16
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	f043 0201 	orr.w	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff ff77 	bl	8002266 <LL_ADC_REG_IsConversionOngoing>
 8002378:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b00      	cmp	r3, #0
 8002384:	f040 8129 	bne.w	80025da <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f040 8125 	bne.w	80025da <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002394:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002398:	f043 0202 	orr.w	r2, r3, #2
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff4b 	bl	8002240 <LL_ADC_IsEnabled>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d136      	bne.n	800241e <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a78      	ldr	r2, [pc, #480]	; (8002598 <HAL_ADC_Init+0x2e4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d004      	beq.n	80023c4 <HAL_ADC_Init+0x110>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a77      	ldr	r2, [pc, #476]	; (800259c <HAL_ADC_Init+0x2e8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d10e      	bne.n	80023e2 <HAL_ADC_Init+0x12e>
 80023c4:	4874      	ldr	r0, [pc, #464]	; (8002598 <HAL_ADC_Init+0x2e4>)
 80023c6:	f7ff ff3b 	bl	8002240 <LL_ADC_IsEnabled>
 80023ca:	4604      	mov	r4, r0
 80023cc:	4873      	ldr	r0, [pc, #460]	; (800259c <HAL_ADC_Init+0x2e8>)
 80023ce:	f7ff ff37 	bl	8002240 <LL_ADC_IsEnabled>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4323      	orrs	r3, r4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	bf0c      	ite	eq
 80023da:	2301      	moveq	r3, #1
 80023dc:	2300      	movne	r3, #0
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	e008      	b.n	80023f4 <HAL_ADC_Init+0x140>
 80023e2:	486f      	ldr	r0, [pc, #444]	; (80025a0 <HAL_ADC_Init+0x2ec>)
 80023e4:	f7ff ff2c 	bl	8002240 <LL_ADC_IsEnabled>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	bf0c      	ite	eq
 80023ee:	2301      	moveq	r3, #1
 80023f0:	2300      	movne	r3, #0
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d012      	beq.n	800241e <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a66      	ldr	r2, [pc, #408]	; (8002598 <HAL_ADC_Init+0x2e4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d004      	beq.n	800240c <HAL_ADC_Init+0x158>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a65      	ldr	r2, [pc, #404]	; (800259c <HAL_ADC_Init+0x2e8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d101      	bne.n	8002410 <HAL_ADC_Init+0x15c>
 800240c:	4a65      	ldr	r2, [pc, #404]	; (80025a4 <HAL_ADC_Init+0x2f0>)
 800240e:	e000      	b.n	8002412 <HAL_ADC_Init+0x15e>
 8002410:	4a65      	ldr	r2, [pc, #404]	; (80025a8 <HAL_ADC_Init+0x2f4>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	4619      	mov	r1, r3
 8002418:	4610      	mov	r0, r2
 800241a:	f7ff fdcb 	bl	8001fb4 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800241e:	f7ff fda7 	bl	8001f70 <HAL_GetREVID>
 8002422:	4602      	mov	r2, r0
 8002424:	f241 0303 	movw	r3, #4099	; 0x1003
 8002428:	429a      	cmp	r2, r3
 800242a:	d914      	bls.n	8002456 <HAL_ADC_Init+0x1a2>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b10      	cmp	r3, #16
 8002432:	d110      	bne.n	8002456 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	7d5b      	ldrb	r3, [r3, #21]
 8002438:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800243e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002444:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	7f1b      	ldrb	r3, [r3, #28]
 800244a:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 800244c:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800244e:	f043 030c 	orr.w	r3, r3, #12
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	e00d      	b.n	8002472 <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7d5b      	ldrb	r3, [r3, #21]
 800245a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002460:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002466:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7f1b      	ldrb	r3, [r3, #28]
 800246c:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	7f1b      	ldrb	r3, [r3, #28]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d106      	bne.n	8002488 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	3b01      	subs	r3, #1
 8002480:	045b      	lsls	r3, r3, #17
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	2b00      	cmp	r3, #0
 800248e:	d009      	beq.n	80024a4 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	4b40      	ldr	r3, [pc, #256]	; (80025ac <HAL_ADC_Init+0x2f8>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	69b9      	ldr	r1, [r7, #24]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fed2 	bl	8002266 <LL_ADC_REG_IsConversionOngoing>
 80024c2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fedf 	bl	800228c <LL_ADC_INJ_IsConversionOngoing>
 80024ce:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d14a      	bne.n	800256c <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d147      	bne.n	800256c <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	7d1b      	ldrb	r3, [r3, #20]
 80024e0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <HAL_ADC_Init+0x2fc>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	69b9      	ldr	r1, [r7, #24]
 80024fa:	430b      	orrs	r3, r1
 80024fc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002504:	2b01      	cmp	r3, #1
 8002506:	d11b      	bne.n	8002540 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <HAL_ADC_Init+0x300>)
 8002516:	4013      	ands	r3, r2
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800251c:	3a01      	subs	r2, #1
 800251e:	0411      	lsls	r1, r2, #16
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002524:	4311      	orrs	r1, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800252a:	4311      	orrs	r1, r2
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002530:	430a      	orrs	r2, r1
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0201 	orr.w	r2, r2, #1
 800253c:	611a      	str	r2, [r3, #16]
 800253e:	e007      	b.n	8002550 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fb58 	bl	8002c1c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d121      	bne.n	80025b8 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f023 010f 	bic.w	r1, r3, #15
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	1e5a      	subs	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
 800258c:	e01c      	b.n	80025c8 <HAL_ADC_Init+0x314>
 800258e:	bf00      	nop
 8002590:	24000018 	.word	0x24000018
 8002594:	053e2d63 	.word	0x053e2d63
 8002598:	40022000 	.word	0x40022000
 800259c:	40022100 	.word	0x40022100
 80025a0:	58026000 	.word	0x58026000
 80025a4:	40022300 	.word	0x40022300
 80025a8:	58026300 	.word	0x58026300
 80025ac:	fff0c003 	.word	0xfff0c003
 80025b0:	ffffbffc 	.word	0xffffbffc
 80025b4:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 020f 	bic.w	r2, r2, #15
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025cc:	f023 0303 	bic.w	r3, r3, #3
 80025d0:	f043 0201 	orr.w	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54
 80025d8:	e007      	b.n	80025ea <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	f043 0210 	orr.w	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3724      	adds	r7, #36	; 0x24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd90      	pop	{r4, r7, pc}

080025f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b099      	sub	sp, #100	; 0x64
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4a99      	ldr	r2, [pc, #612]	; (8002874 <HAL_ADC_ConfigChannel+0x280>)
 800260e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_ADC_ConfigChannel+0x2a>
 800261a:	2302      	movs	r3, #2
 800261c:	e2e6      	b.n	8002bec <HAL_ADC_ConfigChannel+0x5f8>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fe1b 	bl	8002266 <LL_ADC_REG_IsConversionOngoing>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	f040 82cb 	bne.w	8002bce <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002640:	2b00      	cmp	r3, #0
 8002642:	d108      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x62>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0e9b      	lsrs	r3, r3, #26
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	2201      	movs	r2, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	e00f      	b.n	8002676 <HAL_ADC_ConfigChannel+0x82>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	2201      	movs	r2, #1
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	69d1      	ldr	r1, [r2, #28]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	430b      	orrs	r3, r1
 8002682:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	6859      	ldr	r1, [r3, #4]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	f7ff fd11 	bl	80020b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fde3 	bl	8002266 <LL_ADC_REG_IsConversionOngoing>
 80026a0:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fdf0 	bl	800228c <LL_ADC_INJ_IsConversionOngoing>
 80026ac:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f040 80b3 	bne.w	800281c <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f040 80af 	bne.w	800281c <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	6819      	ldr	r1, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	461a      	mov	r2, r3
 80026cc:	f7ff fd1d 	bl	800210a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026d0:	4b69      	ldr	r3, [pc, #420]	; (8002878 <HAL_ADC_ConfigChannel+0x284>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80026d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026dc:	d10b      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x102>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	089b      	lsrs	r3, r3, #2
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	e01d      	b.n	8002732 <HAL_ADC_ConfigChannel+0x13e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10b      	bne.n	800271c <HAL_ADC_ConfigChannel+0x128>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	089b      	lsrs	r3, r3, #2
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	e00a      	b.n	8002732 <HAL_ADC_ConfigChannel+0x13e>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	089b      	lsrs	r3, r3, #2
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b04      	cmp	r3, #4
 800273a:	d027      	beq.n	800278c <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6919      	ldr	r1, [r3, #16]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800274a:	f7ff fc67 	bl	800201c <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6919      	ldr	r1, [r3, #16]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	7e5b      	ldrb	r3, [r3, #25]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d102      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x170>
 800275e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002762:	e000      	b.n	8002766 <HAL_ADC_ConfigChannel+0x172>
 8002764:	2300      	movs	r3, #0
 8002766:	461a      	mov	r2, r3
 8002768:	f7ff fc8e 	bl	8002088 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	6919      	ldr	r1, [r3, #16]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	7e1b      	ldrb	r3, [r3, #24]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d102      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x18e>
 800277c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002780:	e000      	b.n	8002784 <HAL_ADC_ConfigChannel+0x190>
 8002782:	2300      	movs	r3, #0
 8002784:	461a      	mov	r2, r3
 8002786:	f7ff fc66 	bl	8002056 <LL_ADC_SetDataRightShift>
 800278a:	e047      	b.n	800281c <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002792:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	069b      	lsls	r3, r3, #26
 800279c:	429a      	cmp	r2, r3
 800279e:	d107      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027ae:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	069b      	lsls	r3, r3, #26
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d107      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027d2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	069b      	lsls	r3, r3, #26
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d107      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027f6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	069b      	lsls	r3, r3, #26
 8002808:	429a      	cmp	r2, r3
 800280a:	d107      	bne.n	800281c <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800281a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fd0d 	bl	8002240 <LL_ADC_IsEnabled>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	f040 81d9 	bne.w	8002be0 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6819      	ldr	r1, [r3, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	461a      	mov	r2, r3
 800283c:	f7ff fc8e 	bl	800215c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <HAL_ADC_ConfigChannel+0x280>)
 8002846:	4293      	cmp	r3, r2
 8002848:	f040 8101 	bne.w	8002a4e <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10f      	bne.n	800287c <HAL_ADC_ConfigChannel+0x288>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	0e9b      	lsrs	r3, r3, #26
 8002862:	3301      	adds	r3, #1
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	2b09      	cmp	r3, #9
 800286a:	bf94      	ite	ls
 800286c:	2301      	movls	r3, #1
 800286e:	2300      	movhi	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	e016      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x2ae>
 8002874:	47ff0000 	.word	0x47ff0000
 8002878:	5c001000 	.word	0x5c001000
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800288a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800288c:	fab3 f383 	clz	r3, r3
 8002890:	b2db      	uxtb	r3, r3
 8002892:	3301      	adds	r3, #1
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	2b09      	cmp	r3, #9
 800289a:	bf94      	ite	ls
 800289c:	2301      	movls	r3, #1
 800289e:	2300      	movhi	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d064      	beq.n	8002970 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d107      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x2ce>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	0e9b      	lsrs	r3, r3, #26
 80028b8:	3301      	adds	r3, #1
 80028ba:	069b      	lsls	r3, r3, #26
 80028bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028c0:	e00e      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x2ec>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	3301      	adds	r3, #1
 80028da:	069b      	lsls	r3, r3, #26
 80028dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d109      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x30c>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	3301      	adds	r3, #1
 80028f4:	f003 031f 	and.w	r3, r3, #31
 80028f8:	2101      	movs	r1, #1
 80028fa:	fa01 f303 	lsl.w	r3, r1, r3
 80028fe:	e010      	b.n	8002922 <HAL_ADC_ConfigChannel+0x32e>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002908:	fa93 f3a3 	rbit	r3, r3
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	3301      	adds	r3, #1
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	2101      	movs	r1, #1
 800291e:	fa01 f303 	lsl.w	r3, r1, r3
 8002922:	ea42 0103 	orr.w	r1, r2, r3
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10a      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x354>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	0e9b      	lsrs	r3, r3, #26
 8002938:	3301      	adds	r3, #1
 800293a:	f003 021f 	and.w	r2, r3, #31
 800293e:	4613      	mov	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4413      	add	r3, r2
 8002944:	051b      	lsls	r3, r3, #20
 8002946:	e011      	b.n	800296c <HAL_ADC_ConfigChannel+0x378>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	fab3 f383 	clz	r3, r3
 800295c:	b2db      	uxtb	r3, r3
 800295e:	3301      	adds	r3, #1
 8002960:	f003 021f 	and.w	r2, r3, #31
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800296c:	430b      	orrs	r3, r1
 800296e:	e069      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002978:	2b00      	cmp	r3, #0
 800297a:	d107      	bne.n	800298c <HAL_ADC_ConfigChannel+0x398>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0e9b      	lsrs	r3, r3, #26
 8002982:	3301      	adds	r3, #1
 8002984:	069b      	lsls	r3, r3, #26
 8002986:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800298a:	e00e      	b.n	80029aa <HAL_ADC_ConfigChannel+0x3b6>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	61fb      	str	r3, [r7, #28]
  return result;
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fab3 f383 	clz	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	3301      	adds	r3, #1
 80029a4:	069b      	lsls	r3, r3, #26
 80029a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x3d6>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	0e9b      	lsrs	r3, r3, #26
 80029bc:	3301      	adds	r3, #1
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	2101      	movs	r1, #1
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	e010      	b.n	80029ec <HAL_ADC_ConfigChannel+0x3f8>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	617b      	str	r3, [r7, #20]
  return result;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	f003 031f 	and.w	r3, r3, #31
 80029e6:	2101      	movs	r1, #1
 80029e8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ec:	ea42 0103 	orr.w	r1, r2, r3
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10d      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x424>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	0e9b      	lsrs	r3, r3, #26
 8002a02:	3301      	adds	r3, #1
 8002a04:	f003 021f 	and.w	r2, r3, #31
 8002a08:	4613      	mov	r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3b1e      	subs	r3, #30
 8002a10:	051b      	lsls	r3, r3, #20
 8002a12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a16:	e014      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x44e>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	60fb      	str	r3, [r7, #12]
  return result;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f003 021f 	and.w	r2, r3, #31
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	3b1e      	subs	r3, #30
 8002a3c:	051b      	lsls	r3, r3, #20
 8002a3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a42:	430b      	orrs	r3, r1
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	6892      	ldr	r2, [r2, #8]
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f7ff fb5e 	bl	800210a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f280 80c4 	bge.w	8002be0 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a65      	ldr	r2, [pc, #404]	; (8002bf4 <HAL_ADC_ConfigChannel+0x600>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d004      	beq.n	8002a6c <HAL_ADC_ConfigChannel+0x478>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a64      	ldr	r2, [pc, #400]	; (8002bf8 <HAL_ADC_ConfigChannel+0x604>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x47c>
 8002a6c:	4b63      	ldr	r3, [pc, #396]	; (8002bfc <HAL_ADC_ConfigChannel+0x608>)
 8002a6e:	e000      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x47e>
 8002a70:	4b63      	ldr	r3, [pc, #396]	; (8002c00 <HAL_ADC_ConfigChannel+0x60c>)
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fac4 	bl	8002000 <LL_ADC_GetCommonPathInternalCh>
 8002a78:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a5d      	ldr	r2, [pc, #372]	; (8002bf4 <HAL_ADC_ConfigChannel+0x600>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d004      	beq.n	8002a8e <HAL_ADC_ConfigChannel+0x49a>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a5b      	ldr	r2, [pc, #364]	; (8002bf8 <HAL_ADC_ConfigChannel+0x604>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d10e      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x4b8>
 8002a8e:	4859      	ldr	r0, [pc, #356]	; (8002bf4 <HAL_ADC_ConfigChannel+0x600>)
 8002a90:	f7ff fbd6 	bl	8002240 <LL_ADC_IsEnabled>
 8002a94:	4604      	mov	r4, r0
 8002a96:	4858      	ldr	r0, [pc, #352]	; (8002bf8 <HAL_ADC_ConfigChannel+0x604>)
 8002a98:	f7ff fbd2 	bl	8002240 <LL_ADC_IsEnabled>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4323      	orrs	r3, r4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	e008      	b.n	8002abe <HAL_ADC_ConfigChannel+0x4ca>
 8002aac:	4855      	ldr	r0, [pc, #340]	; (8002c04 <HAL_ADC_ConfigChannel+0x610>)
 8002aae:	f7ff fbc7 	bl	8002240 <LL_ADC_IsEnabled>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d07b      	beq.n	8002bba <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a50      	ldr	r2, [pc, #320]	; (8002c08 <HAL_ADC_ConfigChannel+0x614>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d12e      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x536>
 8002acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d129      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a4a      	ldr	r2, [pc, #296]	; (8002c04 <HAL_ADC_ConfigChannel+0x610>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d17f      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a43      	ldr	r2, [pc, #268]	; (8002bf4 <HAL_ADC_ConfigChannel+0x600>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d004      	beq.n	8002af4 <HAL_ADC_ConfigChannel+0x500>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a42      	ldr	r2, [pc, #264]	; (8002bf8 <HAL_ADC_ConfigChannel+0x604>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d101      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x504>
 8002af4:	4a41      	ldr	r2, [pc, #260]	; (8002bfc <HAL_ADC_ConfigChannel+0x608>)
 8002af6:	e000      	b.n	8002afa <HAL_ADC_ConfigChannel+0x506>
 8002af8:	4a41      	ldr	r2, [pc, #260]	; (8002c00 <HAL_ADC_ConfigChannel+0x60c>)
 8002afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002afc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f7ff fa69 	bl	8001fda <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002b08:	4b40      	ldr	r3, [pc, #256]	; (8002c0c <HAL_ADC_ConfigChannel+0x618>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	099b      	lsrs	r3, r3, #6
 8002b0e:	4a40      	ldr	r2, [pc, #256]	; (8002c10 <HAL_ADC_ConfigChannel+0x61c>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	099b      	lsrs	r3, r3, #6
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002b1a:	e002      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f9      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b28:	e05a      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a39      	ldr	r2, [pc, #228]	; (8002c14 <HAL_ADC_ConfigChannel+0x620>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d11e      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x57e>
 8002b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d119      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a30      	ldr	r2, [pc, #192]	; (8002c04 <HAL_ADC_ConfigChannel+0x610>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d14b      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a29      	ldr	r2, [pc, #164]	; (8002bf4 <HAL_ADC_ConfigChannel+0x600>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d004      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x568>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a28      	ldr	r2, [pc, #160]	; (8002bf8 <HAL_ADC_ConfigChannel+0x604>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x56c>
 8002b5c:	4a27      	ldr	r2, [pc, #156]	; (8002bfc <HAL_ADC_ConfigChannel+0x608>)
 8002b5e:	e000      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x56e>
 8002b60:	4a27      	ldr	r2, [pc, #156]	; (8002c00 <HAL_ADC_ConfigChannel+0x60c>)
 8002b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	f7ff fa35 	bl	8001fda <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b70:	e036      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a28      	ldr	r2, [pc, #160]	; (8002c18 <HAL_ADC_ConfigChannel+0x624>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d131      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x5ec>
 8002b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d12c      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1e      	ldr	r2, [pc, #120]	; (8002c04 <HAL_ADC_ConfigChannel+0x610>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d127      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a17      	ldr	r2, [pc, #92]	; (8002bf4 <HAL_ADC_ConfigChannel+0x600>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d004      	beq.n	8002ba4 <HAL_ADC_ConfigChannel+0x5b0>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a16      	ldr	r2, [pc, #88]	; (8002bf8 <HAL_ADC_ConfigChannel+0x604>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d101      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x5b4>
 8002ba4:	4a15      	ldr	r2, [pc, #84]	; (8002bfc <HAL_ADC_ConfigChannel+0x608>)
 8002ba6:	e000      	b.n	8002baa <HAL_ADC_ConfigChannel+0x5b6>
 8002ba8:	4a15      	ldr	r2, [pc, #84]	; (8002c00 <HAL_ADC_ConfigChannel+0x60c>)
 8002baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f7ff fa11 	bl	8001fda <LL_ADC_SetCommonPathInternalCh>
 8002bb8:	e012      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	f043 0220 	orr.w	r2, r3, #32
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002bcc:	e008      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd2:	f043 0220 	orr.w	r2, r3, #32
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002be8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3764      	adds	r7, #100	; 0x64
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd90      	pop	{r4, r7, pc}
 8002bf4:	40022000 	.word	0x40022000
 8002bf8:	40022100 	.word	0x40022100
 8002bfc:	40022300 	.word	0x40022300
 8002c00:	58026300 	.word	0x58026300
 8002c04:	58026000 	.word	0x58026000
 8002c08:	cb840000 	.word	0xcb840000
 8002c0c:	24000018 	.word	0x24000018
 8002c10:	053e2d63 	.word	0x053e2d63
 8002c14:	c7520000 	.word	0xc7520000
 8002c18:	cfb80000 	.word	0xcfb80000

08002c1c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a70      	ldr	r2, [pc, #448]	; (8002dec <ADC_ConfigureBoostMode+0x1d0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d004      	beq.n	8002c38 <ADC_ConfigureBoostMode+0x1c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a6f      	ldr	r2, [pc, #444]	; (8002df0 <ADC_ConfigureBoostMode+0x1d4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d109      	bne.n	8002c4c <ADC_ConfigureBoostMode+0x30>
 8002c38:	4b6e      	ldr	r3, [pc, #440]	; (8002df4 <ADC_ConfigureBoostMode+0x1d8>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf14      	ite	ne
 8002c44:	2301      	movne	r3, #1
 8002c46:	2300      	moveq	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e008      	b.n	8002c5e <ADC_ConfigureBoostMode+0x42>
 8002c4c:	4b6a      	ldr	r3, [pc, #424]	; (8002df8 <ADC_ConfigureBoostMode+0x1dc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf14      	ite	ne
 8002c58:	2301      	movne	r3, #1
 8002c5a:	2300      	moveq	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d01a      	beq.n	8002c98 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002c62:	f003 fb07 	bl	8006274 <HAL_RCC_GetHCLKFreq>
 8002c66:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c70:	d006      	beq.n	8002c80 <ADC_ConfigureBoostMode+0x64>
 8002c72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c76:	d00b      	beq.n	8002c90 <ADC_ConfigureBoostMode+0x74>
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7c:	d000      	beq.n	8002c80 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002c7e:	e05d      	b.n	8002d3c <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	0c1b      	lsrs	r3, r3, #16
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	60fb      	str	r3, [r7, #12]
        break;
 8002c8e:	e055      	b.n	8002d3c <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	089b      	lsrs	r3, r3, #2
 8002c94:	60fb      	str	r3, [r7, #12]
        break;
 8002c96:	e051      	b.n	8002d3c <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002c98:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002c9c:	f004 fa24 	bl	80070e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ca0:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002caa:	d02a      	beq.n	8002d02 <ADC_ConfigureBoostMode+0xe6>
 8002cac:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002cb0:	d813      	bhi.n	8002cda <ADC_ConfigureBoostMode+0xbe>
 8002cb2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002cb6:	d024      	beq.n	8002d02 <ADC_ConfigureBoostMode+0xe6>
 8002cb8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002cbc:	d806      	bhi.n	8002ccc <ADC_ConfigureBoostMode+0xb0>
 8002cbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cc2:	d01e      	beq.n	8002d02 <ADC_ConfigureBoostMode+0xe6>
 8002cc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cc8:	d01b      	beq.n	8002d02 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002cca:	e037      	b.n	8002d3c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002ccc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cd0:	d017      	beq.n	8002d02 <ADC_ConfigureBoostMode+0xe6>
 8002cd2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002cd6:	d014      	beq.n	8002d02 <ADC_ConfigureBoostMode+0xe6>
        break;
 8002cd8:	e030      	b.n	8002d3c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002cda:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002cde:	d021      	beq.n	8002d24 <ADC_ConfigureBoostMode+0x108>
 8002ce0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002ce4:	d806      	bhi.n	8002cf4 <ADC_ConfigureBoostMode+0xd8>
 8002ce6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002cea:	d013      	beq.n	8002d14 <ADC_ConfigureBoostMode+0xf8>
 8002cec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cf0:	d014      	beq.n	8002d1c <ADC_ConfigureBoostMode+0x100>
        break;
 8002cf2:	e023      	b.n	8002d3c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002cf4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002cf8:	d018      	beq.n	8002d2c <ADC_ConfigureBoostMode+0x110>
 8002cfa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002cfe:	d019      	beq.n	8002d34 <ADC_ConfigureBoostMode+0x118>
        break;
 8002d00:	e01c      	b.n	8002d3c <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	0c9b      	lsrs	r3, r3, #18
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d10:	60fb      	str	r3, [r7, #12]
        break;
 8002d12:	e013      	b.n	8002d3c <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	60fb      	str	r3, [r7, #12]
      break;
 8002d1a:	e00f      	b.n	8002d3c <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	60fb      	str	r3, [r7, #12]
        break;
 8002d22:	e00b      	b.n	8002d3c <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	099b      	lsrs	r3, r3, #6
 8002d28:	60fb      	str	r3, [r7, #12]
        break;
 8002d2a:	e007      	b.n	8002d3c <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	09db      	lsrs	r3, r3, #7
 8002d30:	60fb      	str	r3, [r7, #12]
        break;
 8002d32:	e003      	b.n	8002d3c <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	60fb      	str	r3, [r7, #12]
        break;
 8002d3a:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002d3c:	f7ff f918 	bl	8001f70 <HAL_GetREVID>
 8002d40:	4602      	mov	r2, r0
 8002d42:	f241 0303 	movw	r3, #4099	; 0x1003
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d815      	bhi.n	8002d76 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4a2b      	ldr	r2, [pc, #172]	; (8002dfc <ADC_ConfigureBoostMode+0x1e0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d908      	bls.n	8002d64 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d60:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002d62:	e03e      	b.n	8002de2 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d72:	609a      	str	r2, [r3, #8]
}
 8002d74:	e035      	b.n	8002de2 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4a20      	ldr	r2, [pc, #128]	; (8002e00 <ADC_ConfigureBoostMode+0x1e4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d808      	bhi.n	8002d96 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d92:	609a      	str	r2, [r3, #8]
}
 8002d94:	e025      	b.n	8002de2 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4a1a      	ldr	r2, [pc, #104]	; (8002e04 <ADC_ConfigureBoostMode+0x1e8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d80a      	bhi.n	8002db4 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002db0:	609a      	str	r2, [r3, #8]
}
 8002db2:	e016      	b.n	8002de2 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a14      	ldr	r2, [pc, #80]	; (8002e08 <ADC_ConfigureBoostMode+0x1ec>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d80a      	bhi.n	8002dd2 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dce:	609a      	str	r2, [r3, #8]
}
 8002dd0:	e007      	b.n	8002de2 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002de0:	609a      	str	r2, [r3, #8]
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40022000 	.word	0x40022000
 8002df0:	40022100 	.word	0x40022100
 8002df4:	40022300 	.word	0x40022300
 8002df8:	58026300 	.word	0x58026300
 8002dfc:	01312d00 	.word	0x01312d00
 8002e00:	005f5e10 	.word	0x005f5e10
 8002e04:	00bebc20 	.word	0x00bebc20
 8002e08:	017d7840 	.word	0x017d7840

08002e0c <LL_ADC_IsEnabled>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <LL_ADC_IsEnabled+0x18>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <LL_ADC_IsEnabled+0x1a>
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d101      	bne.n	8002e4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e58:	b590      	push	{r4, r7, lr}
 8002e5a:	b09f      	sub	sp, #124	; 0x7c
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e0ba      	b.n	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a5c      	ldr	r2, [pc, #368]	; (8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d102      	bne.n	8002e8e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002e88:	4b5b      	ldr	r3, [pc, #364]	; (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	e001      	b.n	8002e92 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10b      	bne.n	8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9c:	f043 0220 	orr.w	r2, r3, #32
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e09d      	b.n	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff ffbd 	bl	8002e32 <LL_ADC_REG_IsConversionOngoing>
 8002eb8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff ffb7 	bl	8002e32 <LL_ADC_REG_IsConversionOngoing>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d17f      	bne.n	8002fca <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d17c      	bne.n	8002fca <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a47      	ldr	r2, [pc, #284]	; (8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a46      	ldr	r2, [pc, #280]	; (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8002ee4:	4b45      	ldr	r3, [pc, #276]	; (8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ee6:	e000      	b.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002ee8:	4b45      	ldr	r3, [pc, #276]	; (8003000 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002eea:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d039      	beq.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	431a      	orrs	r2, r3
 8002f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f04:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a3a      	ldr	r2, [pc, #232]	; (8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d004      	beq.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a38      	ldr	r2, [pc, #224]	; (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d10e      	bne.n	8002f38 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002f1a:	4836      	ldr	r0, [pc, #216]	; (8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002f1c:	f7ff ff76 	bl	8002e0c <LL_ADC_IsEnabled>
 8002f20:	4604      	mov	r4, r0
 8002f22:	4835      	ldr	r0, [pc, #212]	; (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002f24:	f7ff ff72 	bl	8002e0c <LL_ADC_IsEnabled>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4323      	orrs	r3, r4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	e008      	b.n	8002f4a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002f38:	4832      	ldr	r0, [pc, #200]	; (8003004 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002f3a:	f7ff ff67 	bl	8002e0c <LL_ADC_IsEnabled>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf0c      	ite	eq
 8002f44:	2301      	moveq	r3, #1
 8002f46:	2300      	movne	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d047      	beq.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	6811      	ldr	r1, [r2, #0]
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	6892      	ldr	r2, [r2, #8]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	431a      	orrs	r2, r3
 8002f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f64:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f66:	e03a      	b.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f72:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1e      	ldr	r2, [pc, #120]	; (8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d004      	beq.n	8002f88 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1d      	ldr	r2, [pc, #116]	; (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d10e      	bne.n	8002fa6 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8002f88:	481a      	ldr	r0, [pc, #104]	; (8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002f8a:	f7ff ff3f 	bl	8002e0c <LL_ADC_IsEnabled>
 8002f8e:	4604      	mov	r4, r0
 8002f90:	4819      	ldr	r0, [pc, #100]	; (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002f92:	f7ff ff3b 	bl	8002e0c <LL_ADC_IsEnabled>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4323      	orrs	r3, r4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bf0c      	ite	eq
 8002f9e:	2301      	moveq	r3, #1
 8002fa0:	2300      	movne	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	e008      	b.n	8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8002fa6:	4817      	ldr	r0, [pc, #92]	; (8003004 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002fa8:	f7ff ff30 	bl	8002e0c <LL_ADC_IsEnabled>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	bf0c      	ite	eq
 8002fb2:	2301      	moveq	r3, #1
 8002fb4:	2300      	movne	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d010      	beq.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fc6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fc8:	e009      	b.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fce:	f043 0220 	orr.w	r2, r3, #32
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002fdc:	e000      	b.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fde:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fe8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	377c      	adds	r7, #124	; 0x7c
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd90      	pop	{r4, r7, pc}
 8002ff4:	40022000 	.word	0x40022000
 8002ff8:	40022100 	.word	0x40022100
 8002ffc:	40022300 	.word	0x40022300
 8003000:	58026300 	.word	0x58026300
 8003004:	58026000 	.word	0x58026000
 8003008:	fffff0e0 	.word	0xfffff0e0

0800300c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <__NVIC_SetPriorityGrouping+0x40>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003028:	4013      	ands	r3, r2
 800302a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <__NVIC_SetPriorityGrouping+0x44>)
 8003036:	4313      	orrs	r3, r2
 8003038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800303a:	4a04      	ldr	r2, [pc, #16]	; (800304c <__NVIC_SetPriorityGrouping+0x40>)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	60d3      	str	r3, [r2, #12]
}
 8003040:	bf00      	nop
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	e000ed00 	.word	0xe000ed00
 8003050:	05fa0000 	.word	0x05fa0000

08003054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <__NVIC_GetPriorityGrouping+0x18>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	0a1b      	lsrs	r3, r3, #8
 800305e:	f003 0307 	and.w	r3, r3, #7
}
 8003062:	4618      	mov	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800307a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800307e:	2b00      	cmp	r3, #0
 8003080:	db0b      	blt.n	800309a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	f003 021f 	and.w	r2, r3, #31
 8003088:	4907      	ldr	r1, [pc, #28]	; (80030a8 <__NVIC_EnableIRQ+0x38>)
 800308a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	2001      	movs	r0, #1
 8003092:	fa00 f202 	lsl.w	r2, r0, r2
 8003096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000e100 	.word	0xe000e100

080030ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	6039      	str	r1, [r7, #0]
 80030b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	db0a      	blt.n	80030d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	490c      	ldr	r1, [pc, #48]	; (80030f8 <__NVIC_SetPriority+0x4c>)
 80030c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ca:	0112      	lsls	r2, r2, #4
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	440b      	add	r3, r1
 80030d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030d4:	e00a      	b.n	80030ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	4908      	ldr	r1, [pc, #32]	; (80030fc <__NVIC_SetPriority+0x50>)
 80030dc:	88fb      	ldrh	r3, [r7, #6]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	3b04      	subs	r3, #4
 80030e4:	0112      	lsls	r2, r2, #4
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	440b      	add	r3, r1
 80030ea:	761a      	strb	r2, [r3, #24]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000e100 	.word	0xe000e100
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003100:	b480      	push	{r7}
 8003102:	b089      	sub	sp, #36	; 0x24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f1c3 0307 	rsb	r3, r3, #7
 800311a:	2b04      	cmp	r3, #4
 800311c:	bf28      	it	cs
 800311e:	2304      	movcs	r3, #4
 8003120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3304      	adds	r3, #4
 8003126:	2b06      	cmp	r3, #6
 8003128:	d902      	bls.n	8003130 <NVIC_EncodePriority+0x30>
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3b03      	subs	r3, #3
 800312e:	e000      	b.n	8003132 <NVIC_EncodePriority+0x32>
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	f04f 32ff 	mov.w	r2, #4294967295
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43da      	mvns	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	401a      	ands	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003148:	f04f 31ff 	mov.w	r1, #4294967295
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	fa01 f303 	lsl.w	r3, r1, r3
 8003152:	43d9      	mvns	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003158:	4313      	orrs	r3, r2
         );
}
 800315a:	4618      	mov	r0, r3
 800315c:	3724      	adds	r7, #36	; 0x24
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3b01      	subs	r3, #1
 8003174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003178:	d301      	bcc.n	800317e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800317a:	2301      	movs	r3, #1
 800317c:	e00f      	b.n	800319e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800317e:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <SysTick_Config+0x40>)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3b01      	subs	r3, #1
 8003184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003186:	210f      	movs	r1, #15
 8003188:	f04f 30ff 	mov.w	r0, #4294967295
 800318c:	f7ff ff8e 	bl	80030ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <SysTick_Config+0x40>)
 8003192:	2200      	movs	r2, #0
 8003194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003196:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <SysTick_Config+0x40>)
 8003198:	2207      	movs	r2, #7
 800319a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	e000e010 	.word	0xe000e010

080031ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff ff29 	bl	800300c <__NVIC_SetPriorityGrouping>
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b086      	sub	sp, #24
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	4603      	mov	r3, r0
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031d0:	f7ff ff40 	bl	8003054 <__NVIC_GetPriorityGrouping>
 80031d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	6978      	ldr	r0, [r7, #20]
 80031dc:	f7ff ff90 	bl	8003100 <NVIC_EncodePriority>
 80031e0:	4602      	mov	r2, r0
 80031e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031e6:	4611      	mov	r1, r2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff ff5f 	bl	80030ac <__NVIC_SetPriority>
}
 80031ee:	bf00      	nop
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	4603      	mov	r3, r0
 80031fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ff33 	bl	8003070 <__NVIC_EnableIRQ>
}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff ffa4 	bl	8003168 <SysTick_Config>
 8003220:	4603      	mov	r3, r0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003234:	f7fe fe6e 	bl	8001f14 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e316      	b.n	8003872 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a66      	ldr	r2, [pc, #408]	; (80033e4 <HAL_DMA_Init+0x1b8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d04a      	beq.n	80032e4 <HAL_DMA_Init+0xb8>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a65      	ldr	r2, [pc, #404]	; (80033e8 <HAL_DMA_Init+0x1bc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d045      	beq.n	80032e4 <HAL_DMA_Init+0xb8>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a63      	ldr	r2, [pc, #396]	; (80033ec <HAL_DMA_Init+0x1c0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d040      	beq.n	80032e4 <HAL_DMA_Init+0xb8>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a62      	ldr	r2, [pc, #392]	; (80033f0 <HAL_DMA_Init+0x1c4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d03b      	beq.n	80032e4 <HAL_DMA_Init+0xb8>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a60      	ldr	r2, [pc, #384]	; (80033f4 <HAL_DMA_Init+0x1c8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d036      	beq.n	80032e4 <HAL_DMA_Init+0xb8>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a5f      	ldr	r2, [pc, #380]	; (80033f8 <HAL_DMA_Init+0x1cc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d031      	beq.n	80032e4 <HAL_DMA_Init+0xb8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a5d      	ldr	r2, [pc, #372]	; (80033fc <HAL_DMA_Init+0x1d0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d02c      	beq.n	80032e4 <HAL_DMA_Init+0xb8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a5c      	ldr	r2, [pc, #368]	; (8003400 <HAL_DMA_Init+0x1d4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d027      	beq.n	80032e4 <HAL_DMA_Init+0xb8>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a5a      	ldr	r2, [pc, #360]	; (8003404 <HAL_DMA_Init+0x1d8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d022      	beq.n	80032e4 <HAL_DMA_Init+0xb8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a59      	ldr	r2, [pc, #356]	; (8003408 <HAL_DMA_Init+0x1dc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d01d      	beq.n	80032e4 <HAL_DMA_Init+0xb8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a57      	ldr	r2, [pc, #348]	; (800340c <HAL_DMA_Init+0x1e0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d018      	beq.n	80032e4 <HAL_DMA_Init+0xb8>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a56      	ldr	r2, [pc, #344]	; (8003410 <HAL_DMA_Init+0x1e4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d013      	beq.n	80032e4 <HAL_DMA_Init+0xb8>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a54      	ldr	r2, [pc, #336]	; (8003414 <HAL_DMA_Init+0x1e8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00e      	beq.n	80032e4 <HAL_DMA_Init+0xb8>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a53      	ldr	r2, [pc, #332]	; (8003418 <HAL_DMA_Init+0x1ec>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d009      	beq.n	80032e4 <HAL_DMA_Init+0xb8>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a51      	ldr	r2, [pc, #324]	; (800341c <HAL_DMA_Init+0x1f0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d004      	beq.n	80032e4 <HAL_DMA_Init+0xb8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a50      	ldr	r2, [pc, #320]	; (8003420 <HAL_DMA_Init+0x1f4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d101      	bne.n	80032e8 <HAL_DMA_Init+0xbc>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <HAL_DMA_Init+0xbe>
 80032e8:	2300      	movs	r3, #0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 813b 	beq.w	8003566 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a37      	ldr	r2, [pc, #220]	; (80033e4 <HAL_DMA_Init+0x1b8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d04a      	beq.n	80033a0 <HAL_DMA_Init+0x174>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a36      	ldr	r2, [pc, #216]	; (80033e8 <HAL_DMA_Init+0x1bc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d045      	beq.n	80033a0 <HAL_DMA_Init+0x174>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a34      	ldr	r2, [pc, #208]	; (80033ec <HAL_DMA_Init+0x1c0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d040      	beq.n	80033a0 <HAL_DMA_Init+0x174>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a33      	ldr	r2, [pc, #204]	; (80033f0 <HAL_DMA_Init+0x1c4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d03b      	beq.n	80033a0 <HAL_DMA_Init+0x174>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a31      	ldr	r2, [pc, #196]	; (80033f4 <HAL_DMA_Init+0x1c8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d036      	beq.n	80033a0 <HAL_DMA_Init+0x174>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a30      	ldr	r2, [pc, #192]	; (80033f8 <HAL_DMA_Init+0x1cc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d031      	beq.n	80033a0 <HAL_DMA_Init+0x174>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a2e      	ldr	r2, [pc, #184]	; (80033fc <HAL_DMA_Init+0x1d0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d02c      	beq.n	80033a0 <HAL_DMA_Init+0x174>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a2d      	ldr	r2, [pc, #180]	; (8003400 <HAL_DMA_Init+0x1d4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d027      	beq.n	80033a0 <HAL_DMA_Init+0x174>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a2b      	ldr	r2, [pc, #172]	; (8003404 <HAL_DMA_Init+0x1d8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d022      	beq.n	80033a0 <HAL_DMA_Init+0x174>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a2a      	ldr	r2, [pc, #168]	; (8003408 <HAL_DMA_Init+0x1dc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d01d      	beq.n	80033a0 <HAL_DMA_Init+0x174>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a28      	ldr	r2, [pc, #160]	; (800340c <HAL_DMA_Init+0x1e0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d018      	beq.n	80033a0 <HAL_DMA_Init+0x174>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a27      	ldr	r2, [pc, #156]	; (8003410 <HAL_DMA_Init+0x1e4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d013      	beq.n	80033a0 <HAL_DMA_Init+0x174>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a25      	ldr	r2, [pc, #148]	; (8003414 <HAL_DMA_Init+0x1e8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00e      	beq.n	80033a0 <HAL_DMA_Init+0x174>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a24      	ldr	r2, [pc, #144]	; (8003418 <HAL_DMA_Init+0x1ec>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d009      	beq.n	80033a0 <HAL_DMA_Init+0x174>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a22      	ldr	r2, [pc, #136]	; (800341c <HAL_DMA_Init+0x1f0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d004      	beq.n	80033a0 <HAL_DMA_Init+0x174>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a21      	ldr	r2, [pc, #132]	; (8003420 <HAL_DMA_Init+0x1f4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d108      	bne.n	80033b2 <HAL_DMA_Init+0x186>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	e007      	b.n	80033c2 <HAL_DMA_Init+0x196>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0201 	bic.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80033c2:	e02f      	b.n	8003424 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033c4:	f7fe fda6 	bl	8001f14 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b05      	cmp	r3, #5
 80033d0:	d928      	bls.n	8003424 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2220      	movs	r2, #32
 80033d6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2203      	movs	r2, #3
 80033dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e246      	b.n	8003872 <HAL_DMA_Init+0x646>
 80033e4:	40020010 	.word	0x40020010
 80033e8:	40020028 	.word	0x40020028
 80033ec:	40020040 	.word	0x40020040
 80033f0:	40020058 	.word	0x40020058
 80033f4:	40020070 	.word	0x40020070
 80033f8:	40020088 	.word	0x40020088
 80033fc:	400200a0 	.word	0x400200a0
 8003400:	400200b8 	.word	0x400200b8
 8003404:	40020410 	.word	0x40020410
 8003408:	40020428 	.word	0x40020428
 800340c:	40020440 	.word	0x40020440
 8003410:	40020458 	.word	0x40020458
 8003414:	40020470 	.word	0x40020470
 8003418:	40020488 	.word	0x40020488
 800341c:	400204a0 	.word	0x400204a0
 8003420:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1c8      	bne.n	80033c4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4b83      	ldr	r3, [pc, #524]	; (800364c <HAL_DMA_Init+0x420>)
 800343e:	4013      	ands	r3, r2
 8003440:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800344a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003456:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003462:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	2b04      	cmp	r3, #4
 8003476:	d107      	bne.n	8003488 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	4313      	orrs	r3, r2
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4313      	orrs	r3, r2
 8003486:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003488:	4b71      	ldr	r3, [pc, #452]	; (8003650 <HAL_DMA_Init+0x424>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4b71      	ldr	r3, [pc, #452]	; (8003654 <HAL_DMA_Init+0x428>)
 800348e:	4013      	ands	r3, r2
 8003490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003494:	d328      	bcc.n	80034e8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b28      	cmp	r3, #40	; 0x28
 800349c:	d903      	bls.n	80034a6 <HAL_DMA_Init+0x27a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b2e      	cmp	r3, #46	; 0x2e
 80034a4:	d917      	bls.n	80034d6 <HAL_DMA_Init+0x2aa>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b3e      	cmp	r3, #62	; 0x3e
 80034ac:	d903      	bls.n	80034b6 <HAL_DMA_Init+0x28a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b42      	cmp	r3, #66	; 0x42
 80034b4:	d90f      	bls.n	80034d6 <HAL_DMA_Init+0x2aa>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b46      	cmp	r3, #70	; 0x46
 80034bc:	d903      	bls.n	80034c6 <HAL_DMA_Init+0x29a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b48      	cmp	r3, #72	; 0x48
 80034c4:	d907      	bls.n	80034d6 <HAL_DMA_Init+0x2aa>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b4e      	cmp	r3, #78	; 0x4e
 80034cc:	d905      	bls.n	80034da <HAL_DMA_Init+0x2ae>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b52      	cmp	r3, #82	; 0x52
 80034d4:	d801      	bhi.n	80034da <HAL_DMA_Init+0x2ae>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <HAL_DMA_Init+0x2b0>
 80034da:	2300      	movs	r3, #0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034e6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f023 0307 	bic.w	r3, r3, #7
 80034fe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	2b04      	cmp	r3, #4
 8003510:	d117      	bne.n	8003542 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00e      	beq.n	8003542 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f001 fbfd 	bl	8004d24 <DMA_CheckFifoParam>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2240      	movs	r2, #64	; 0x40
 8003534:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e197      	b.n	8003872 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f001 fb38 	bl	8004bc0 <DMA_CalcBaseAndBitshift>
 8003550:	4603      	mov	r3, r0
 8003552:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	223f      	movs	r2, #63	; 0x3f
 800355e:	409a      	lsls	r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	e0cd      	b.n	8003702 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a3b      	ldr	r2, [pc, #236]	; (8003658 <HAL_DMA_Init+0x42c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d022      	beq.n	80035b6 <HAL_DMA_Init+0x38a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a39      	ldr	r2, [pc, #228]	; (800365c <HAL_DMA_Init+0x430>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d01d      	beq.n	80035b6 <HAL_DMA_Init+0x38a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a38      	ldr	r2, [pc, #224]	; (8003660 <HAL_DMA_Init+0x434>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d018      	beq.n	80035b6 <HAL_DMA_Init+0x38a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a36      	ldr	r2, [pc, #216]	; (8003664 <HAL_DMA_Init+0x438>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d013      	beq.n	80035b6 <HAL_DMA_Init+0x38a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a35      	ldr	r2, [pc, #212]	; (8003668 <HAL_DMA_Init+0x43c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00e      	beq.n	80035b6 <HAL_DMA_Init+0x38a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a33      	ldr	r2, [pc, #204]	; (800366c <HAL_DMA_Init+0x440>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d009      	beq.n	80035b6 <HAL_DMA_Init+0x38a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a32      	ldr	r2, [pc, #200]	; (8003670 <HAL_DMA_Init+0x444>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d004      	beq.n	80035b6 <HAL_DMA_Init+0x38a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a30      	ldr	r2, [pc, #192]	; (8003674 <HAL_DMA_Init+0x448>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d101      	bne.n	80035ba <HAL_DMA_Init+0x38e>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_DMA_Init+0x390>
 80035ba:	2300      	movs	r3, #0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 8097 	beq.w	80036f0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a24      	ldr	r2, [pc, #144]	; (8003658 <HAL_DMA_Init+0x42c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d021      	beq.n	8003610 <HAL_DMA_Init+0x3e4>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a22      	ldr	r2, [pc, #136]	; (800365c <HAL_DMA_Init+0x430>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01c      	beq.n	8003610 <HAL_DMA_Init+0x3e4>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a21      	ldr	r2, [pc, #132]	; (8003660 <HAL_DMA_Init+0x434>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d017      	beq.n	8003610 <HAL_DMA_Init+0x3e4>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1f      	ldr	r2, [pc, #124]	; (8003664 <HAL_DMA_Init+0x438>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d012      	beq.n	8003610 <HAL_DMA_Init+0x3e4>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a1e      	ldr	r2, [pc, #120]	; (8003668 <HAL_DMA_Init+0x43c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00d      	beq.n	8003610 <HAL_DMA_Init+0x3e4>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1c      	ldr	r2, [pc, #112]	; (800366c <HAL_DMA_Init+0x440>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d008      	beq.n	8003610 <HAL_DMA_Init+0x3e4>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a1b      	ldr	r2, [pc, #108]	; (8003670 <HAL_DMA_Init+0x444>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d003      	beq.n	8003610 <HAL_DMA_Init+0x3e4>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a19      	ldr	r2, [pc, #100]	; (8003674 <HAL_DMA_Init+0x448>)
 800360e:	4293      	cmp	r3, r2
 8003610:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2202      	movs	r2, #2
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4b12      	ldr	r3, [pc, #72]	; (8003678 <HAL_DMA_Init+0x44c>)
 800362e:	4013      	ands	r3, r2
 8003630:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b40      	cmp	r3, #64	; 0x40
 8003638:	d020      	beq.n	800367c <HAL_DMA_Init+0x450>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b80      	cmp	r3, #128	; 0x80
 8003640:	d102      	bne.n	8003648 <HAL_DMA_Init+0x41c>
 8003642:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003646:	e01a      	b.n	800367e <HAL_DMA_Init+0x452>
 8003648:	2300      	movs	r3, #0
 800364a:	e018      	b.n	800367e <HAL_DMA_Init+0x452>
 800364c:	fe10803f 	.word	0xfe10803f
 8003650:	5c001000 	.word	0x5c001000
 8003654:	ffff0000 	.word	0xffff0000
 8003658:	58025408 	.word	0x58025408
 800365c:	5802541c 	.word	0x5802541c
 8003660:	58025430 	.word	0x58025430
 8003664:	58025444 	.word	0x58025444
 8003668:	58025458 	.word	0x58025458
 800366c:	5802546c 	.word	0x5802546c
 8003670:	58025480 	.word	0x58025480
 8003674:	58025494 	.word	0x58025494
 8003678:	fffe000f 	.word	0xfffe000f
 800367c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68d2      	ldr	r2, [r2, #12]
 8003682:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003684:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800368c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003694:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800369c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80036a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80036ac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	461a      	mov	r2, r3
 80036c2:	4b6e      	ldr	r3, [pc, #440]	; (800387c <HAL_DMA_Init+0x650>)
 80036c4:	4413      	add	r3, r2
 80036c6:	4a6e      	ldr	r2, [pc, #440]	; (8003880 <HAL_DMA_Init+0x654>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	091b      	lsrs	r3, r3, #4
 80036ce:	009a      	lsls	r2, r3, #2
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f001 fa73 	bl	8004bc0 <DMA_CalcBaseAndBitshift>
 80036da:	4603      	mov	r3, r0
 80036dc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	2201      	movs	r2, #1
 80036e8:	409a      	lsls	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	e008      	b.n	8003702 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2240      	movs	r2, #64	; 0x40
 80036f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2203      	movs	r2, #3
 80036fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e0b7      	b.n	8003872 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a5f      	ldr	r2, [pc, #380]	; (8003884 <HAL_DMA_Init+0x658>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d072      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a5d      	ldr	r2, [pc, #372]	; (8003888 <HAL_DMA_Init+0x65c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d06d      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a5c      	ldr	r2, [pc, #368]	; (800388c <HAL_DMA_Init+0x660>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d068      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a5a      	ldr	r2, [pc, #360]	; (8003890 <HAL_DMA_Init+0x664>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d063      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a59      	ldr	r2, [pc, #356]	; (8003894 <HAL_DMA_Init+0x668>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d05e      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a57      	ldr	r2, [pc, #348]	; (8003898 <HAL_DMA_Init+0x66c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d059      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a56      	ldr	r2, [pc, #344]	; (800389c <HAL_DMA_Init+0x670>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d054      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a54      	ldr	r2, [pc, #336]	; (80038a0 <HAL_DMA_Init+0x674>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d04f      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a53      	ldr	r2, [pc, #332]	; (80038a4 <HAL_DMA_Init+0x678>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d04a      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a51      	ldr	r2, [pc, #324]	; (80038a8 <HAL_DMA_Init+0x67c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d045      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a50      	ldr	r2, [pc, #320]	; (80038ac <HAL_DMA_Init+0x680>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d040      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a4e      	ldr	r2, [pc, #312]	; (80038b0 <HAL_DMA_Init+0x684>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d03b      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a4d      	ldr	r2, [pc, #308]	; (80038b4 <HAL_DMA_Init+0x688>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d036      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a4b      	ldr	r2, [pc, #300]	; (80038b8 <HAL_DMA_Init+0x68c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d031      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a4a      	ldr	r2, [pc, #296]	; (80038bc <HAL_DMA_Init+0x690>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d02c      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a48      	ldr	r2, [pc, #288]	; (80038c0 <HAL_DMA_Init+0x694>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d027      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a47      	ldr	r2, [pc, #284]	; (80038c4 <HAL_DMA_Init+0x698>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d022      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a45      	ldr	r2, [pc, #276]	; (80038c8 <HAL_DMA_Init+0x69c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01d      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a44      	ldr	r2, [pc, #272]	; (80038cc <HAL_DMA_Init+0x6a0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d018      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a42      	ldr	r2, [pc, #264]	; (80038d0 <HAL_DMA_Init+0x6a4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d013      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a41      	ldr	r2, [pc, #260]	; (80038d4 <HAL_DMA_Init+0x6a8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00e      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a3f      	ldr	r2, [pc, #252]	; (80038d8 <HAL_DMA_Init+0x6ac>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d009      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a3e      	ldr	r2, [pc, #248]	; (80038dc <HAL_DMA_Init+0x6b0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d004      	beq.n	80037f2 <HAL_DMA_Init+0x5c6>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a3c      	ldr	r2, [pc, #240]	; (80038e0 <HAL_DMA_Init+0x6b4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d101      	bne.n	80037f6 <HAL_DMA_Init+0x5ca>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <HAL_DMA_Init+0x5cc>
 80037f6:	2300      	movs	r3, #0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d032      	beq.n	8003862 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f001 fb0d 	bl	8004e1c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b80      	cmp	r3, #128	; 0x80
 8003808:	d102      	bne.n	8003810 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003824:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d010      	beq.n	8003850 <HAL_DMA_Init+0x624>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b08      	cmp	r3, #8
 8003834:	d80c      	bhi.n	8003850 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f001 fb8a 	bl	8004f50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	e008      	b.n	8003862 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	a7fdabf8 	.word	0xa7fdabf8
 8003880:	cccccccd 	.word	0xcccccccd
 8003884:	40020010 	.word	0x40020010
 8003888:	40020028 	.word	0x40020028
 800388c:	40020040 	.word	0x40020040
 8003890:	40020058 	.word	0x40020058
 8003894:	40020070 	.word	0x40020070
 8003898:	40020088 	.word	0x40020088
 800389c:	400200a0 	.word	0x400200a0
 80038a0:	400200b8 	.word	0x400200b8
 80038a4:	40020410 	.word	0x40020410
 80038a8:	40020428 	.word	0x40020428
 80038ac:	40020440 	.word	0x40020440
 80038b0:	40020458 	.word	0x40020458
 80038b4:	40020470 	.word	0x40020470
 80038b8:	40020488 	.word	0x40020488
 80038bc:	400204a0 	.word	0x400204a0
 80038c0:	400204b8 	.word	0x400204b8
 80038c4:	58025408 	.word	0x58025408
 80038c8:	5802541c 	.word	0x5802541c
 80038cc:	58025430 	.word	0x58025430
 80038d0:	58025444 	.word	0x58025444
 80038d4:	58025458 	.word	0x58025458
 80038d8:	5802546c 	.word	0x5802546c
 80038dc:	58025480 	.word	0x58025480
 80038e0:	58025494 	.word	0x58025494

080038e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e205      	b.n	8003d02 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d004      	beq.n	800390c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2280      	movs	r2, #128	; 0x80
 8003906:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e1fa      	b.n	8003d02 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a8c      	ldr	r2, [pc, #560]	; (8003b44 <HAL_DMA_Abort_IT+0x260>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d04a      	beq.n	80039ac <HAL_DMA_Abort_IT+0xc8>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a8b      	ldr	r2, [pc, #556]	; (8003b48 <HAL_DMA_Abort_IT+0x264>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d045      	beq.n	80039ac <HAL_DMA_Abort_IT+0xc8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a89      	ldr	r2, [pc, #548]	; (8003b4c <HAL_DMA_Abort_IT+0x268>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d040      	beq.n	80039ac <HAL_DMA_Abort_IT+0xc8>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a88      	ldr	r2, [pc, #544]	; (8003b50 <HAL_DMA_Abort_IT+0x26c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d03b      	beq.n	80039ac <HAL_DMA_Abort_IT+0xc8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a86      	ldr	r2, [pc, #536]	; (8003b54 <HAL_DMA_Abort_IT+0x270>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d036      	beq.n	80039ac <HAL_DMA_Abort_IT+0xc8>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a85      	ldr	r2, [pc, #532]	; (8003b58 <HAL_DMA_Abort_IT+0x274>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d031      	beq.n	80039ac <HAL_DMA_Abort_IT+0xc8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a83      	ldr	r2, [pc, #524]	; (8003b5c <HAL_DMA_Abort_IT+0x278>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d02c      	beq.n	80039ac <HAL_DMA_Abort_IT+0xc8>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a82      	ldr	r2, [pc, #520]	; (8003b60 <HAL_DMA_Abort_IT+0x27c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d027      	beq.n	80039ac <HAL_DMA_Abort_IT+0xc8>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a80      	ldr	r2, [pc, #512]	; (8003b64 <HAL_DMA_Abort_IT+0x280>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d022      	beq.n	80039ac <HAL_DMA_Abort_IT+0xc8>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a7f      	ldr	r2, [pc, #508]	; (8003b68 <HAL_DMA_Abort_IT+0x284>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d01d      	beq.n	80039ac <HAL_DMA_Abort_IT+0xc8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a7d      	ldr	r2, [pc, #500]	; (8003b6c <HAL_DMA_Abort_IT+0x288>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d018      	beq.n	80039ac <HAL_DMA_Abort_IT+0xc8>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a7c      	ldr	r2, [pc, #496]	; (8003b70 <HAL_DMA_Abort_IT+0x28c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d013      	beq.n	80039ac <HAL_DMA_Abort_IT+0xc8>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a7a      	ldr	r2, [pc, #488]	; (8003b74 <HAL_DMA_Abort_IT+0x290>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00e      	beq.n	80039ac <HAL_DMA_Abort_IT+0xc8>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a79      	ldr	r2, [pc, #484]	; (8003b78 <HAL_DMA_Abort_IT+0x294>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d009      	beq.n	80039ac <HAL_DMA_Abort_IT+0xc8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a77      	ldr	r2, [pc, #476]	; (8003b7c <HAL_DMA_Abort_IT+0x298>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d004      	beq.n	80039ac <HAL_DMA_Abort_IT+0xc8>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a76      	ldr	r2, [pc, #472]	; (8003b80 <HAL_DMA_Abort_IT+0x29c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d101      	bne.n	80039b0 <HAL_DMA_Abort_IT+0xcc>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <HAL_DMA_Abort_IT+0xce>
 80039b0:	2300      	movs	r3, #0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d065      	beq.n	8003a82 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2204      	movs	r2, #4
 80039ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a60      	ldr	r2, [pc, #384]	; (8003b44 <HAL_DMA_Abort_IT+0x260>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d04a      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x17a>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a5e      	ldr	r2, [pc, #376]	; (8003b48 <HAL_DMA_Abort_IT+0x264>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d045      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x17a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a5d      	ldr	r2, [pc, #372]	; (8003b4c <HAL_DMA_Abort_IT+0x268>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d040      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x17a>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a5b      	ldr	r2, [pc, #364]	; (8003b50 <HAL_DMA_Abort_IT+0x26c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d03b      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x17a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a5a      	ldr	r2, [pc, #360]	; (8003b54 <HAL_DMA_Abort_IT+0x270>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d036      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x17a>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a58      	ldr	r2, [pc, #352]	; (8003b58 <HAL_DMA_Abort_IT+0x274>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d031      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x17a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a57      	ldr	r2, [pc, #348]	; (8003b5c <HAL_DMA_Abort_IT+0x278>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d02c      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x17a>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a55      	ldr	r2, [pc, #340]	; (8003b60 <HAL_DMA_Abort_IT+0x27c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d027      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x17a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a54      	ldr	r2, [pc, #336]	; (8003b64 <HAL_DMA_Abort_IT+0x280>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d022      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x17a>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a52      	ldr	r2, [pc, #328]	; (8003b68 <HAL_DMA_Abort_IT+0x284>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01d      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x17a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a51      	ldr	r2, [pc, #324]	; (8003b6c <HAL_DMA_Abort_IT+0x288>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d018      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x17a>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a4f      	ldr	r2, [pc, #316]	; (8003b70 <HAL_DMA_Abort_IT+0x28c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x17a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a4e      	ldr	r2, [pc, #312]	; (8003b74 <HAL_DMA_Abort_IT+0x290>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00e      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x17a>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a4c      	ldr	r2, [pc, #304]	; (8003b78 <HAL_DMA_Abort_IT+0x294>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d009      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x17a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a4b      	ldr	r2, [pc, #300]	; (8003b7c <HAL_DMA_Abort_IT+0x298>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d004      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x17a>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a49      	ldr	r2, [pc, #292]	; (8003b80 <HAL_DMA_Abort_IT+0x29c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d108      	bne.n	8003a70 <HAL_DMA_Abort_IT+0x18c>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	e147      	b.n	8003d00 <HAL_DMA_Abort_IT+0x41c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0201 	bic.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	e13e      	b.n	8003d00 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 020e 	bic.w	r2, r2, #14
 8003a90:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a2b      	ldr	r2, [pc, #172]	; (8003b44 <HAL_DMA_Abort_IT+0x260>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d04a      	beq.n	8003b32 <HAL_DMA_Abort_IT+0x24e>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a29      	ldr	r2, [pc, #164]	; (8003b48 <HAL_DMA_Abort_IT+0x264>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d045      	beq.n	8003b32 <HAL_DMA_Abort_IT+0x24e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a28      	ldr	r2, [pc, #160]	; (8003b4c <HAL_DMA_Abort_IT+0x268>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d040      	beq.n	8003b32 <HAL_DMA_Abort_IT+0x24e>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a26      	ldr	r2, [pc, #152]	; (8003b50 <HAL_DMA_Abort_IT+0x26c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d03b      	beq.n	8003b32 <HAL_DMA_Abort_IT+0x24e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a25      	ldr	r2, [pc, #148]	; (8003b54 <HAL_DMA_Abort_IT+0x270>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d036      	beq.n	8003b32 <HAL_DMA_Abort_IT+0x24e>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a23      	ldr	r2, [pc, #140]	; (8003b58 <HAL_DMA_Abort_IT+0x274>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d031      	beq.n	8003b32 <HAL_DMA_Abort_IT+0x24e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a22      	ldr	r2, [pc, #136]	; (8003b5c <HAL_DMA_Abort_IT+0x278>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d02c      	beq.n	8003b32 <HAL_DMA_Abort_IT+0x24e>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a20      	ldr	r2, [pc, #128]	; (8003b60 <HAL_DMA_Abort_IT+0x27c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d027      	beq.n	8003b32 <HAL_DMA_Abort_IT+0x24e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <HAL_DMA_Abort_IT+0x280>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d022      	beq.n	8003b32 <HAL_DMA_Abort_IT+0x24e>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1d      	ldr	r2, [pc, #116]	; (8003b68 <HAL_DMA_Abort_IT+0x284>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01d      	beq.n	8003b32 <HAL_DMA_Abort_IT+0x24e>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1c      	ldr	r2, [pc, #112]	; (8003b6c <HAL_DMA_Abort_IT+0x288>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d018      	beq.n	8003b32 <HAL_DMA_Abort_IT+0x24e>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1a      	ldr	r2, [pc, #104]	; (8003b70 <HAL_DMA_Abort_IT+0x28c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <HAL_DMA_Abort_IT+0x24e>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a19      	ldr	r2, [pc, #100]	; (8003b74 <HAL_DMA_Abort_IT+0x290>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00e      	beq.n	8003b32 <HAL_DMA_Abort_IT+0x24e>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a17      	ldr	r2, [pc, #92]	; (8003b78 <HAL_DMA_Abort_IT+0x294>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d009      	beq.n	8003b32 <HAL_DMA_Abort_IT+0x24e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a16      	ldr	r2, [pc, #88]	; (8003b7c <HAL_DMA_Abort_IT+0x298>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d004      	beq.n	8003b32 <HAL_DMA_Abort_IT+0x24e>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a14      	ldr	r2, [pc, #80]	; (8003b80 <HAL_DMA_Abort_IT+0x29c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d128      	bne.n	8003b84 <HAL_DMA_Abort_IT+0x2a0>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0201 	bic.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e027      	b.n	8003b94 <HAL_DMA_Abort_IT+0x2b0>
 8003b44:	40020010 	.word	0x40020010
 8003b48:	40020028 	.word	0x40020028
 8003b4c:	40020040 	.word	0x40020040
 8003b50:	40020058 	.word	0x40020058
 8003b54:	40020070 	.word	0x40020070
 8003b58:	40020088 	.word	0x40020088
 8003b5c:	400200a0 	.word	0x400200a0
 8003b60:	400200b8 	.word	0x400200b8
 8003b64:	40020410 	.word	0x40020410
 8003b68:	40020428 	.word	0x40020428
 8003b6c:	40020440 	.word	0x40020440
 8003b70:	40020458 	.word	0x40020458
 8003b74:	40020470 	.word	0x40020470
 8003b78:	40020488 	.word	0x40020488
 8003b7c:	400204a0 	.word	0x400204a0
 8003b80:	400204b8 	.word	0x400204b8
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a5c      	ldr	r2, [pc, #368]	; (8003d0c <HAL_DMA_Abort_IT+0x428>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d072      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a5b      	ldr	r2, [pc, #364]	; (8003d10 <HAL_DMA_Abort_IT+0x42c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d06d      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a59      	ldr	r2, [pc, #356]	; (8003d14 <HAL_DMA_Abort_IT+0x430>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d068      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a58      	ldr	r2, [pc, #352]	; (8003d18 <HAL_DMA_Abort_IT+0x434>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d063      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a56      	ldr	r2, [pc, #344]	; (8003d1c <HAL_DMA_Abort_IT+0x438>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d05e      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a55      	ldr	r2, [pc, #340]	; (8003d20 <HAL_DMA_Abort_IT+0x43c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d059      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a53      	ldr	r2, [pc, #332]	; (8003d24 <HAL_DMA_Abort_IT+0x440>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d054      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a52      	ldr	r2, [pc, #328]	; (8003d28 <HAL_DMA_Abort_IT+0x444>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d04f      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a50      	ldr	r2, [pc, #320]	; (8003d2c <HAL_DMA_Abort_IT+0x448>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d04a      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a4f      	ldr	r2, [pc, #316]	; (8003d30 <HAL_DMA_Abort_IT+0x44c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d045      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a4d      	ldr	r2, [pc, #308]	; (8003d34 <HAL_DMA_Abort_IT+0x450>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d040      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a4c      	ldr	r2, [pc, #304]	; (8003d38 <HAL_DMA_Abort_IT+0x454>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d03b      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a4a      	ldr	r2, [pc, #296]	; (8003d3c <HAL_DMA_Abort_IT+0x458>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d036      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a49      	ldr	r2, [pc, #292]	; (8003d40 <HAL_DMA_Abort_IT+0x45c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d031      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a47      	ldr	r2, [pc, #284]	; (8003d44 <HAL_DMA_Abort_IT+0x460>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d02c      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a46      	ldr	r2, [pc, #280]	; (8003d48 <HAL_DMA_Abort_IT+0x464>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d027      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a44      	ldr	r2, [pc, #272]	; (8003d4c <HAL_DMA_Abort_IT+0x468>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d022      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a43      	ldr	r2, [pc, #268]	; (8003d50 <HAL_DMA_Abort_IT+0x46c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d01d      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a41      	ldr	r2, [pc, #260]	; (8003d54 <HAL_DMA_Abort_IT+0x470>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d018      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a40      	ldr	r2, [pc, #256]	; (8003d58 <HAL_DMA_Abort_IT+0x474>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d013      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a3e      	ldr	r2, [pc, #248]	; (8003d5c <HAL_DMA_Abort_IT+0x478>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00e      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a3d      	ldr	r2, [pc, #244]	; (8003d60 <HAL_DMA_Abort_IT+0x47c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d009      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a3b      	ldr	r2, [pc, #236]	; (8003d64 <HAL_DMA_Abort_IT+0x480>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d004      	beq.n	8003c84 <HAL_DMA_Abort_IT+0x3a0>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a3a      	ldr	r2, [pc, #232]	; (8003d68 <HAL_DMA_Abort_IT+0x484>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d101      	bne.n	8003c88 <HAL_DMA_Abort_IT+0x3a4>
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <HAL_DMA_Abort_IT+0x3a6>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d028      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c9c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca8:	f003 031f 	and.w	r3, r3, #31
 8003cac:	2201      	movs	r2, #1
 8003cae:	409a      	lsls	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003cbc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00c      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cd4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003cde:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40020010 	.word	0x40020010
 8003d10:	40020028 	.word	0x40020028
 8003d14:	40020040 	.word	0x40020040
 8003d18:	40020058 	.word	0x40020058
 8003d1c:	40020070 	.word	0x40020070
 8003d20:	40020088 	.word	0x40020088
 8003d24:	400200a0 	.word	0x400200a0
 8003d28:	400200b8 	.word	0x400200b8
 8003d2c:	40020410 	.word	0x40020410
 8003d30:	40020428 	.word	0x40020428
 8003d34:	40020440 	.word	0x40020440
 8003d38:	40020458 	.word	0x40020458
 8003d3c:	40020470 	.word	0x40020470
 8003d40:	40020488 	.word	0x40020488
 8003d44:	400204a0 	.word	0x400204a0
 8003d48:	400204b8 	.word	0x400204b8
 8003d4c:	58025408 	.word	0x58025408
 8003d50:	5802541c 	.word	0x5802541c
 8003d54:	58025430 	.word	0x58025430
 8003d58:	58025444 	.word	0x58025444
 8003d5c:	58025458 	.word	0x58025458
 8003d60:	5802546c 	.word	0x5802546c
 8003d64:	58025480 	.word	0x58025480
 8003d68:	58025494 	.word	0x58025494

08003d6c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08a      	sub	sp, #40	; 0x28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d78:	4b67      	ldr	r3, [pc, #412]	; (8003f18 <HAL_DMA_IRQHandler+0x1ac>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a67      	ldr	r2, [pc, #412]	; (8003f1c <HAL_DMA_IRQHandler+0x1b0>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	0a9b      	lsrs	r3, r3, #10
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d90:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a5f      	ldr	r2, [pc, #380]	; (8003f20 <HAL_DMA_IRQHandler+0x1b4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d04a      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xd2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a5d      	ldr	r2, [pc, #372]	; (8003f24 <HAL_DMA_IRQHandler+0x1b8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d045      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xd2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a5c      	ldr	r2, [pc, #368]	; (8003f28 <HAL_DMA_IRQHandler+0x1bc>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d040      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xd2>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a5a      	ldr	r2, [pc, #360]	; (8003f2c <HAL_DMA_IRQHandler+0x1c0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d03b      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xd2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a59      	ldr	r2, [pc, #356]	; (8003f30 <HAL_DMA_IRQHandler+0x1c4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d036      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xd2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a57      	ldr	r2, [pc, #348]	; (8003f34 <HAL_DMA_IRQHandler+0x1c8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d031      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xd2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a56      	ldr	r2, [pc, #344]	; (8003f38 <HAL_DMA_IRQHandler+0x1cc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d02c      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xd2>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a54      	ldr	r2, [pc, #336]	; (8003f3c <HAL_DMA_IRQHandler+0x1d0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d027      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xd2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a53      	ldr	r2, [pc, #332]	; (8003f40 <HAL_DMA_IRQHandler+0x1d4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d022      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xd2>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a51      	ldr	r2, [pc, #324]	; (8003f44 <HAL_DMA_IRQHandler+0x1d8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d01d      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xd2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a50      	ldr	r2, [pc, #320]	; (8003f48 <HAL_DMA_IRQHandler+0x1dc>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d018      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xd2>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a4e      	ldr	r2, [pc, #312]	; (8003f4c <HAL_DMA_IRQHandler+0x1e0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d013      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xd2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a4d      	ldr	r2, [pc, #308]	; (8003f50 <HAL_DMA_IRQHandler+0x1e4>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00e      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xd2>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a4b      	ldr	r2, [pc, #300]	; (8003f54 <HAL_DMA_IRQHandler+0x1e8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d009      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xd2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a4a      	ldr	r2, [pc, #296]	; (8003f58 <HAL_DMA_IRQHandler+0x1ec>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d004      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xd2>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a48      	ldr	r2, [pc, #288]	; (8003f5c <HAL_DMA_IRQHandler+0x1f0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d101      	bne.n	8003e42 <HAL_DMA_IRQHandler+0xd6>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <HAL_DMA_IRQHandler+0xd8>
 8003e42:	2300      	movs	r3, #0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 842b 	beq.w	80046a0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	2208      	movs	r2, #8
 8003e54:	409a      	lsls	r2, r3
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 80a2 	beq.w	8003fa4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a2e      	ldr	r2, [pc, #184]	; (8003f20 <HAL_DMA_IRQHandler+0x1b4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d04a      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x194>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a2d      	ldr	r2, [pc, #180]	; (8003f24 <HAL_DMA_IRQHandler+0x1b8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d045      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x194>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a2b      	ldr	r2, [pc, #172]	; (8003f28 <HAL_DMA_IRQHandler+0x1bc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d040      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x194>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a2a      	ldr	r2, [pc, #168]	; (8003f2c <HAL_DMA_IRQHandler+0x1c0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d03b      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x194>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a28      	ldr	r2, [pc, #160]	; (8003f30 <HAL_DMA_IRQHandler+0x1c4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d036      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x194>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a27      	ldr	r2, [pc, #156]	; (8003f34 <HAL_DMA_IRQHandler+0x1c8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d031      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x194>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a25      	ldr	r2, [pc, #148]	; (8003f38 <HAL_DMA_IRQHandler+0x1cc>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d02c      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x194>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a24      	ldr	r2, [pc, #144]	; (8003f3c <HAL_DMA_IRQHandler+0x1d0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d027      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x194>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a22      	ldr	r2, [pc, #136]	; (8003f40 <HAL_DMA_IRQHandler+0x1d4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d022      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x194>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a21      	ldr	r2, [pc, #132]	; (8003f44 <HAL_DMA_IRQHandler+0x1d8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d01d      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x194>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1f      	ldr	r2, [pc, #124]	; (8003f48 <HAL_DMA_IRQHandler+0x1dc>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d018      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x194>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1e      	ldr	r2, [pc, #120]	; (8003f4c <HAL_DMA_IRQHandler+0x1e0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d013      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x194>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1c      	ldr	r2, [pc, #112]	; (8003f50 <HAL_DMA_IRQHandler+0x1e4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00e      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x194>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1b      	ldr	r2, [pc, #108]	; (8003f54 <HAL_DMA_IRQHandler+0x1e8>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d009      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x194>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a19      	ldr	r2, [pc, #100]	; (8003f58 <HAL_DMA_IRQHandler+0x1ec>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x194>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a18      	ldr	r2, [pc, #96]	; (8003f5c <HAL_DMA_IRQHandler+0x1f0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d12f      	bne.n	8003f60 <HAL_DMA_IRQHandler+0x1f4>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bf14      	ite	ne
 8003f0e:	2301      	movne	r3, #1
 8003f10:	2300      	moveq	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	e02e      	b.n	8003f74 <HAL_DMA_IRQHandler+0x208>
 8003f16:	bf00      	nop
 8003f18:	24000018 	.word	0x24000018
 8003f1c:	1b4e81b5 	.word	0x1b4e81b5
 8003f20:	40020010 	.word	0x40020010
 8003f24:	40020028 	.word	0x40020028
 8003f28:	40020040 	.word	0x40020040
 8003f2c:	40020058 	.word	0x40020058
 8003f30:	40020070 	.word	0x40020070
 8003f34:	40020088 	.word	0x40020088
 8003f38:	400200a0 	.word	0x400200a0
 8003f3c:	400200b8 	.word	0x400200b8
 8003f40:	40020410 	.word	0x40020410
 8003f44:	40020428 	.word	0x40020428
 8003f48:	40020440 	.word	0x40020440
 8003f4c:	40020458 	.word	0x40020458
 8003f50:	40020470 	.word	0x40020470
 8003f54:	40020488 	.word	0x40020488
 8003f58:	400204a0 	.word	0x400204a0
 8003f5c:	400204b8 	.word	0x400204b8
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bf14      	ite	ne
 8003f6e:	2301      	movne	r3, #1
 8003f70:	2300      	moveq	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d015      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0204 	bic.w	r2, r2, #4
 8003f86:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8c:	f003 031f 	and.w	r3, r3, #31
 8003f90:	2208      	movs	r2, #8
 8003f92:	409a      	lsls	r2, r3
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	f043 0201 	orr.w	r2, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d06e      	beq.n	8004098 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a69      	ldr	r2, [pc, #420]	; (8004164 <HAL_DMA_IRQHandler+0x3f8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d04a      	beq.n	800405a <HAL_DMA_IRQHandler+0x2ee>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a67      	ldr	r2, [pc, #412]	; (8004168 <HAL_DMA_IRQHandler+0x3fc>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d045      	beq.n	800405a <HAL_DMA_IRQHandler+0x2ee>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a66      	ldr	r2, [pc, #408]	; (800416c <HAL_DMA_IRQHandler+0x400>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d040      	beq.n	800405a <HAL_DMA_IRQHandler+0x2ee>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a64      	ldr	r2, [pc, #400]	; (8004170 <HAL_DMA_IRQHandler+0x404>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d03b      	beq.n	800405a <HAL_DMA_IRQHandler+0x2ee>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a63      	ldr	r2, [pc, #396]	; (8004174 <HAL_DMA_IRQHandler+0x408>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d036      	beq.n	800405a <HAL_DMA_IRQHandler+0x2ee>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a61      	ldr	r2, [pc, #388]	; (8004178 <HAL_DMA_IRQHandler+0x40c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d031      	beq.n	800405a <HAL_DMA_IRQHandler+0x2ee>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a60      	ldr	r2, [pc, #384]	; (800417c <HAL_DMA_IRQHandler+0x410>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d02c      	beq.n	800405a <HAL_DMA_IRQHandler+0x2ee>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a5e      	ldr	r2, [pc, #376]	; (8004180 <HAL_DMA_IRQHandler+0x414>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d027      	beq.n	800405a <HAL_DMA_IRQHandler+0x2ee>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a5d      	ldr	r2, [pc, #372]	; (8004184 <HAL_DMA_IRQHandler+0x418>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d022      	beq.n	800405a <HAL_DMA_IRQHandler+0x2ee>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a5b      	ldr	r2, [pc, #364]	; (8004188 <HAL_DMA_IRQHandler+0x41c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01d      	beq.n	800405a <HAL_DMA_IRQHandler+0x2ee>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a5a      	ldr	r2, [pc, #360]	; (800418c <HAL_DMA_IRQHandler+0x420>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d018      	beq.n	800405a <HAL_DMA_IRQHandler+0x2ee>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a58      	ldr	r2, [pc, #352]	; (8004190 <HAL_DMA_IRQHandler+0x424>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d013      	beq.n	800405a <HAL_DMA_IRQHandler+0x2ee>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a57      	ldr	r2, [pc, #348]	; (8004194 <HAL_DMA_IRQHandler+0x428>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00e      	beq.n	800405a <HAL_DMA_IRQHandler+0x2ee>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a55      	ldr	r2, [pc, #340]	; (8004198 <HAL_DMA_IRQHandler+0x42c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d009      	beq.n	800405a <HAL_DMA_IRQHandler+0x2ee>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a54      	ldr	r2, [pc, #336]	; (800419c <HAL_DMA_IRQHandler+0x430>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d004      	beq.n	800405a <HAL_DMA_IRQHandler+0x2ee>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a52      	ldr	r2, [pc, #328]	; (80041a0 <HAL_DMA_IRQHandler+0x434>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d10a      	bne.n	8004070 <HAL_DMA_IRQHandler+0x304>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf14      	ite	ne
 8004068:	2301      	movne	r3, #1
 800406a:	2300      	moveq	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	e003      	b.n	8004078 <HAL_DMA_IRQHandler+0x30c>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2300      	movs	r3, #0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00d      	beq.n	8004098 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	2201      	movs	r2, #1
 8004086:	409a      	lsls	r2, r3
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004090:	f043 0202 	orr.w	r2, r3, #2
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409c:	f003 031f 	and.w	r3, r3, #31
 80040a0:	2204      	movs	r2, #4
 80040a2:	409a      	lsls	r2, r3
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 808f 	beq.w	80041cc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a2c      	ldr	r2, [pc, #176]	; (8004164 <HAL_DMA_IRQHandler+0x3f8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d04a      	beq.n	800414e <HAL_DMA_IRQHandler+0x3e2>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a2a      	ldr	r2, [pc, #168]	; (8004168 <HAL_DMA_IRQHandler+0x3fc>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d045      	beq.n	800414e <HAL_DMA_IRQHandler+0x3e2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a29      	ldr	r2, [pc, #164]	; (800416c <HAL_DMA_IRQHandler+0x400>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d040      	beq.n	800414e <HAL_DMA_IRQHandler+0x3e2>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a27      	ldr	r2, [pc, #156]	; (8004170 <HAL_DMA_IRQHandler+0x404>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d03b      	beq.n	800414e <HAL_DMA_IRQHandler+0x3e2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a26      	ldr	r2, [pc, #152]	; (8004174 <HAL_DMA_IRQHandler+0x408>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d036      	beq.n	800414e <HAL_DMA_IRQHandler+0x3e2>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a24      	ldr	r2, [pc, #144]	; (8004178 <HAL_DMA_IRQHandler+0x40c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d031      	beq.n	800414e <HAL_DMA_IRQHandler+0x3e2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a23      	ldr	r2, [pc, #140]	; (800417c <HAL_DMA_IRQHandler+0x410>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d02c      	beq.n	800414e <HAL_DMA_IRQHandler+0x3e2>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a21      	ldr	r2, [pc, #132]	; (8004180 <HAL_DMA_IRQHandler+0x414>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d027      	beq.n	800414e <HAL_DMA_IRQHandler+0x3e2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a20      	ldr	r2, [pc, #128]	; (8004184 <HAL_DMA_IRQHandler+0x418>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d022      	beq.n	800414e <HAL_DMA_IRQHandler+0x3e2>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1e      	ldr	r2, [pc, #120]	; (8004188 <HAL_DMA_IRQHandler+0x41c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01d      	beq.n	800414e <HAL_DMA_IRQHandler+0x3e2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a1d      	ldr	r2, [pc, #116]	; (800418c <HAL_DMA_IRQHandler+0x420>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d018      	beq.n	800414e <HAL_DMA_IRQHandler+0x3e2>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a1b      	ldr	r2, [pc, #108]	; (8004190 <HAL_DMA_IRQHandler+0x424>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <HAL_DMA_IRQHandler+0x3e2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1a      	ldr	r2, [pc, #104]	; (8004194 <HAL_DMA_IRQHandler+0x428>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00e      	beq.n	800414e <HAL_DMA_IRQHandler+0x3e2>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a18      	ldr	r2, [pc, #96]	; (8004198 <HAL_DMA_IRQHandler+0x42c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d009      	beq.n	800414e <HAL_DMA_IRQHandler+0x3e2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a17      	ldr	r2, [pc, #92]	; (800419c <HAL_DMA_IRQHandler+0x430>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d004      	beq.n	800414e <HAL_DMA_IRQHandler+0x3e2>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a15      	ldr	r2, [pc, #84]	; (80041a0 <HAL_DMA_IRQHandler+0x434>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d12a      	bne.n	80041a4 <HAL_DMA_IRQHandler+0x438>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf14      	ite	ne
 800415c:	2301      	movne	r3, #1
 800415e:	2300      	moveq	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	e023      	b.n	80041ac <HAL_DMA_IRQHandler+0x440>
 8004164:	40020010 	.word	0x40020010
 8004168:	40020028 	.word	0x40020028
 800416c:	40020040 	.word	0x40020040
 8004170:	40020058 	.word	0x40020058
 8004174:	40020070 	.word	0x40020070
 8004178:	40020088 	.word	0x40020088
 800417c:	400200a0 	.word	0x400200a0
 8004180:	400200b8 	.word	0x400200b8
 8004184:	40020410 	.word	0x40020410
 8004188:	40020428 	.word	0x40020428
 800418c:	40020440 	.word	0x40020440
 8004190:	40020458 	.word	0x40020458
 8004194:	40020470 	.word	0x40020470
 8004198:	40020488 	.word	0x40020488
 800419c:	400204a0 	.word	0x400204a0
 80041a0:	400204b8 	.word	0x400204b8
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2300      	movs	r3, #0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00d      	beq.n	80041cc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b4:	f003 031f 	and.w	r3, r3, #31
 80041b8:	2204      	movs	r2, #4
 80041ba:	409a      	lsls	r2, r3
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c4:	f043 0204 	orr.w	r2, r3, #4
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	2210      	movs	r2, #16
 80041d6:	409a      	lsls	r2, r3
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	4013      	ands	r3, r2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 80a6 	beq.w	800432e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a85      	ldr	r2, [pc, #532]	; (80043fc <HAL_DMA_IRQHandler+0x690>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d04a      	beq.n	8004282 <HAL_DMA_IRQHandler+0x516>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a83      	ldr	r2, [pc, #524]	; (8004400 <HAL_DMA_IRQHandler+0x694>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d045      	beq.n	8004282 <HAL_DMA_IRQHandler+0x516>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a82      	ldr	r2, [pc, #520]	; (8004404 <HAL_DMA_IRQHandler+0x698>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d040      	beq.n	8004282 <HAL_DMA_IRQHandler+0x516>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a80      	ldr	r2, [pc, #512]	; (8004408 <HAL_DMA_IRQHandler+0x69c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d03b      	beq.n	8004282 <HAL_DMA_IRQHandler+0x516>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a7f      	ldr	r2, [pc, #508]	; (800440c <HAL_DMA_IRQHandler+0x6a0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d036      	beq.n	8004282 <HAL_DMA_IRQHandler+0x516>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a7d      	ldr	r2, [pc, #500]	; (8004410 <HAL_DMA_IRQHandler+0x6a4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d031      	beq.n	8004282 <HAL_DMA_IRQHandler+0x516>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a7c      	ldr	r2, [pc, #496]	; (8004414 <HAL_DMA_IRQHandler+0x6a8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d02c      	beq.n	8004282 <HAL_DMA_IRQHandler+0x516>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a7a      	ldr	r2, [pc, #488]	; (8004418 <HAL_DMA_IRQHandler+0x6ac>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d027      	beq.n	8004282 <HAL_DMA_IRQHandler+0x516>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a79      	ldr	r2, [pc, #484]	; (800441c <HAL_DMA_IRQHandler+0x6b0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d022      	beq.n	8004282 <HAL_DMA_IRQHandler+0x516>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a77      	ldr	r2, [pc, #476]	; (8004420 <HAL_DMA_IRQHandler+0x6b4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d01d      	beq.n	8004282 <HAL_DMA_IRQHandler+0x516>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a76      	ldr	r2, [pc, #472]	; (8004424 <HAL_DMA_IRQHandler+0x6b8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d018      	beq.n	8004282 <HAL_DMA_IRQHandler+0x516>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a74      	ldr	r2, [pc, #464]	; (8004428 <HAL_DMA_IRQHandler+0x6bc>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d013      	beq.n	8004282 <HAL_DMA_IRQHandler+0x516>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a73      	ldr	r2, [pc, #460]	; (800442c <HAL_DMA_IRQHandler+0x6c0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00e      	beq.n	8004282 <HAL_DMA_IRQHandler+0x516>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a71      	ldr	r2, [pc, #452]	; (8004430 <HAL_DMA_IRQHandler+0x6c4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d009      	beq.n	8004282 <HAL_DMA_IRQHandler+0x516>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a70      	ldr	r2, [pc, #448]	; (8004434 <HAL_DMA_IRQHandler+0x6c8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d004      	beq.n	8004282 <HAL_DMA_IRQHandler+0x516>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a6e      	ldr	r2, [pc, #440]	; (8004438 <HAL_DMA_IRQHandler+0x6cc>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d10a      	bne.n	8004298 <HAL_DMA_IRQHandler+0x52c>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b00      	cmp	r3, #0
 800428e:	bf14      	ite	ne
 8004290:	2301      	movne	r3, #1
 8004292:	2300      	moveq	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	e009      	b.n	80042ac <HAL_DMA_IRQHandler+0x540>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	bf14      	ite	ne
 80042a6:	2301      	movne	r3, #1
 80042a8:	2300      	moveq	r3, #0
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d03e      	beq.n	800432e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b4:	f003 031f 	and.w	r3, r3, #31
 80042b8:	2210      	movs	r2, #16
 80042ba:	409a      	lsls	r2, r3
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d018      	beq.n	8004300 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d108      	bne.n	80042ee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d024      	beq.n	800432e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4798      	blx	r3
 80042ec:	e01f      	b.n	800432e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01b      	beq.n	800432e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4798      	blx	r3
 80042fe:	e016      	b.n	800432e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430a:	2b00      	cmp	r3, #0
 800430c:	d107      	bne.n	800431e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0208 	bic.w	r2, r2, #8
 800431c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004332:	f003 031f 	and.w	r3, r3, #31
 8004336:	2220      	movs	r2, #32
 8004338:	409a      	lsls	r2, r3
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 8110 	beq.w	8004564 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a2c      	ldr	r2, [pc, #176]	; (80043fc <HAL_DMA_IRQHandler+0x690>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d04a      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x678>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2b      	ldr	r2, [pc, #172]	; (8004400 <HAL_DMA_IRQHandler+0x694>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d045      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x678>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a29      	ldr	r2, [pc, #164]	; (8004404 <HAL_DMA_IRQHandler+0x698>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d040      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x678>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a28      	ldr	r2, [pc, #160]	; (8004408 <HAL_DMA_IRQHandler+0x69c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d03b      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x678>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a26      	ldr	r2, [pc, #152]	; (800440c <HAL_DMA_IRQHandler+0x6a0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d036      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x678>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a25      	ldr	r2, [pc, #148]	; (8004410 <HAL_DMA_IRQHandler+0x6a4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d031      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x678>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a23      	ldr	r2, [pc, #140]	; (8004414 <HAL_DMA_IRQHandler+0x6a8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d02c      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x678>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a22      	ldr	r2, [pc, #136]	; (8004418 <HAL_DMA_IRQHandler+0x6ac>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d027      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x678>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a20      	ldr	r2, [pc, #128]	; (800441c <HAL_DMA_IRQHandler+0x6b0>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d022      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x678>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <HAL_DMA_IRQHandler+0x6b4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d01d      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x678>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <HAL_DMA_IRQHandler+0x6b8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d018      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x678>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1c      	ldr	r2, [pc, #112]	; (8004428 <HAL_DMA_IRQHandler+0x6bc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d013      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x678>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1a      	ldr	r2, [pc, #104]	; (800442c <HAL_DMA_IRQHandler+0x6c0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00e      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x678>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a19      	ldr	r2, [pc, #100]	; (8004430 <HAL_DMA_IRQHandler+0x6c4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d009      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x678>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a17      	ldr	r2, [pc, #92]	; (8004434 <HAL_DMA_IRQHandler+0x6c8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d004      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x678>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a16      	ldr	r2, [pc, #88]	; (8004438 <HAL_DMA_IRQHandler+0x6cc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d12b      	bne.n	800443c <HAL_DMA_IRQHandler+0x6d0>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0310 	and.w	r3, r3, #16
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	bf14      	ite	ne
 80043f2:	2301      	movne	r3, #1
 80043f4:	2300      	moveq	r3, #0
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	e02a      	b.n	8004450 <HAL_DMA_IRQHandler+0x6e4>
 80043fa:	bf00      	nop
 80043fc:	40020010 	.word	0x40020010
 8004400:	40020028 	.word	0x40020028
 8004404:	40020040 	.word	0x40020040
 8004408:	40020058 	.word	0x40020058
 800440c:	40020070 	.word	0x40020070
 8004410:	40020088 	.word	0x40020088
 8004414:	400200a0 	.word	0x400200a0
 8004418:	400200b8 	.word	0x400200b8
 800441c:	40020410 	.word	0x40020410
 8004420:	40020428 	.word	0x40020428
 8004424:	40020440 	.word	0x40020440
 8004428:	40020458 	.word	0x40020458
 800442c:	40020470 	.word	0x40020470
 8004430:	40020488 	.word	0x40020488
 8004434:	400204a0 	.word	0x400204a0
 8004438:	400204b8 	.word	0x400204b8
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	bf14      	ite	ne
 800444a:	2301      	movne	r3, #1
 800444c:	2300      	moveq	r3, #0
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 8087 	beq.w	8004564 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445a:	f003 031f 	and.w	r3, r3, #31
 800445e:	2220      	movs	r2, #32
 8004460:	409a      	lsls	r2, r3
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b04      	cmp	r3, #4
 8004470:	d139      	bne.n	80044e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0216 	bic.w	r2, r2, #22
 8004480:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004490:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d103      	bne.n	80044a2 <HAL_DMA_IRQHandler+0x736>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d007      	beq.n	80044b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0208 	bic.w	r2, r2, #8
 80044b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b6:	f003 031f 	and.w	r3, r3, #31
 80044ba:	223f      	movs	r2, #63	; 0x3f
 80044bc:	409a      	lsls	r2, r3
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 834a 	beq.w	8004b70 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	4798      	blx	r3
          }
          return;
 80044e4:	e344      	b.n	8004b70 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d018      	beq.n	8004526 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d108      	bne.n	8004514 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004506:	2b00      	cmp	r3, #0
 8004508:	d02c      	beq.n	8004564 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	4798      	blx	r3
 8004512:	e027      	b.n	8004564 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004518:	2b00      	cmp	r3, #0
 800451a:	d023      	beq.n	8004564 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	4798      	blx	r3
 8004524:	e01e      	b.n	8004564 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10f      	bne.n	8004554 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0210 	bic.w	r2, r2, #16
 8004542:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8306 	beq.w	8004b7a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 8088 	beq.w	800468c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2204      	movs	r2, #4
 8004580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a7a      	ldr	r2, [pc, #488]	; (8004774 <HAL_DMA_IRQHandler+0xa08>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d04a      	beq.n	8004624 <HAL_DMA_IRQHandler+0x8b8>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a79      	ldr	r2, [pc, #484]	; (8004778 <HAL_DMA_IRQHandler+0xa0c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d045      	beq.n	8004624 <HAL_DMA_IRQHandler+0x8b8>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a77      	ldr	r2, [pc, #476]	; (800477c <HAL_DMA_IRQHandler+0xa10>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d040      	beq.n	8004624 <HAL_DMA_IRQHandler+0x8b8>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a76      	ldr	r2, [pc, #472]	; (8004780 <HAL_DMA_IRQHandler+0xa14>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d03b      	beq.n	8004624 <HAL_DMA_IRQHandler+0x8b8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a74      	ldr	r2, [pc, #464]	; (8004784 <HAL_DMA_IRQHandler+0xa18>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d036      	beq.n	8004624 <HAL_DMA_IRQHandler+0x8b8>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a73      	ldr	r2, [pc, #460]	; (8004788 <HAL_DMA_IRQHandler+0xa1c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d031      	beq.n	8004624 <HAL_DMA_IRQHandler+0x8b8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a71      	ldr	r2, [pc, #452]	; (800478c <HAL_DMA_IRQHandler+0xa20>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d02c      	beq.n	8004624 <HAL_DMA_IRQHandler+0x8b8>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a70      	ldr	r2, [pc, #448]	; (8004790 <HAL_DMA_IRQHandler+0xa24>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d027      	beq.n	8004624 <HAL_DMA_IRQHandler+0x8b8>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a6e      	ldr	r2, [pc, #440]	; (8004794 <HAL_DMA_IRQHandler+0xa28>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d022      	beq.n	8004624 <HAL_DMA_IRQHandler+0x8b8>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a6d      	ldr	r2, [pc, #436]	; (8004798 <HAL_DMA_IRQHandler+0xa2c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d01d      	beq.n	8004624 <HAL_DMA_IRQHandler+0x8b8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a6b      	ldr	r2, [pc, #428]	; (800479c <HAL_DMA_IRQHandler+0xa30>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d018      	beq.n	8004624 <HAL_DMA_IRQHandler+0x8b8>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a6a      	ldr	r2, [pc, #424]	; (80047a0 <HAL_DMA_IRQHandler+0xa34>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d013      	beq.n	8004624 <HAL_DMA_IRQHandler+0x8b8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a68      	ldr	r2, [pc, #416]	; (80047a4 <HAL_DMA_IRQHandler+0xa38>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00e      	beq.n	8004624 <HAL_DMA_IRQHandler+0x8b8>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a67      	ldr	r2, [pc, #412]	; (80047a8 <HAL_DMA_IRQHandler+0xa3c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d009      	beq.n	8004624 <HAL_DMA_IRQHandler+0x8b8>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a65      	ldr	r2, [pc, #404]	; (80047ac <HAL_DMA_IRQHandler+0xa40>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d004      	beq.n	8004624 <HAL_DMA_IRQHandler+0x8b8>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a64      	ldr	r2, [pc, #400]	; (80047b0 <HAL_DMA_IRQHandler+0xa44>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d108      	bne.n	8004636 <HAL_DMA_IRQHandler+0x8ca>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0201 	bic.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	e007      	b.n	8004646 <HAL_DMA_IRQHandler+0x8da>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0201 	bic.w	r2, r2, #1
 8004644:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	3301      	adds	r3, #1
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464e:	429a      	cmp	r2, r3
 8004650:	d307      	bcc.n	8004662 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f2      	bne.n	8004646 <HAL_DMA_IRQHandler+0x8da>
 8004660:	e000      	b.n	8004664 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004662:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d004      	beq.n	8004684 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2203      	movs	r2, #3
 800467e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004682:	e003      	b.n	800468c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 8272 	beq.w	8004b7a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	4798      	blx	r3
 800469e:	e26c      	b.n	8004b7a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a43      	ldr	r2, [pc, #268]	; (80047b4 <HAL_DMA_IRQHandler+0xa48>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d022      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x984>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a42      	ldr	r2, [pc, #264]	; (80047b8 <HAL_DMA_IRQHandler+0xa4c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d01d      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x984>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a40      	ldr	r2, [pc, #256]	; (80047bc <HAL_DMA_IRQHandler+0xa50>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d018      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x984>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a3f      	ldr	r2, [pc, #252]	; (80047c0 <HAL_DMA_IRQHandler+0xa54>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d013      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x984>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a3d      	ldr	r2, [pc, #244]	; (80047c4 <HAL_DMA_IRQHandler+0xa58>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00e      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x984>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a3c      	ldr	r2, [pc, #240]	; (80047c8 <HAL_DMA_IRQHandler+0xa5c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d009      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x984>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a3a      	ldr	r2, [pc, #232]	; (80047cc <HAL_DMA_IRQHandler+0xa60>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d004      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x984>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a39      	ldr	r2, [pc, #228]	; (80047d0 <HAL_DMA_IRQHandler+0xa64>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d101      	bne.n	80046f4 <HAL_DMA_IRQHandler+0x988>
 80046f0:	2301      	movs	r3, #1
 80046f2:	e000      	b.n	80046f6 <HAL_DMA_IRQHandler+0x98a>
 80046f4:	2300      	movs	r3, #0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 823f 	beq.w	8004b7a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	2204      	movs	r2, #4
 800470e:	409a      	lsls	r2, r3
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	4013      	ands	r3, r2
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80cd 	beq.w	80048b4 <HAL_DMA_IRQHandler+0xb48>
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80c7 	beq.w	80048b4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472a:	f003 031f 	and.w	r3, r3, #31
 800472e:	2204      	movs	r2, #4
 8004730:	409a      	lsls	r2, r3
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d049      	beq.n	80047d4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d109      	bne.n	800475e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 8210 	beq.w	8004b74 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800475c:	e20a      	b.n	8004b74 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 8206 	beq.w	8004b74 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004770:	e200      	b.n	8004b74 <HAL_DMA_IRQHandler+0xe08>
 8004772:	bf00      	nop
 8004774:	40020010 	.word	0x40020010
 8004778:	40020028 	.word	0x40020028
 800477c:	40020040 	.word	0x40020040
 8004780:	40020058 	.word	0x40020058
 8004784:	40020070 	.word	0x40020070
 8004788:	40020088 	.word	0x40020088
 800478c:	400200a0 	.word	0x400200a0
 8004790:	400200b8 	.word	0x400200b8
 8004794:	40020410 	.word	0x40020410
 8004798:	40020428 	.word	0x40020428
 800479c:	40020440 	.word	0x40020440
 80047a0:	40020458 	.word	0x40020458
 80047a4:	40020470 	.word	0x40020470
 80047a8:	40020488 	.word	0x40020488
 80047ac:	400204a0 	.word	0x400204a0
 80047b0:	400204b8 	.word	0x400204b8
 80047b4:	58025408 	.word	0x58025408
 80047b8:	5802541c 	.word	0x5802541c
 80047bc:	58025430 	.word	0x58025430
 80047c0:	58025444 	.word	0x58025444
 80047c4:	58025458 	.word	0x58025458
 80047c8:	5802546c 	.word	0x5802546c
 80047cc:	58025480 	.word	0x58025480
 80047d0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f003 0320 	and.w	r3, r3, #32
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d160      	bne.n	80048a0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a8c      	ldr	r2, [pc, #560]	; (8004a14 <HAL_DMA_IRQHandler+0xca8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d04a      	beq.n	800487e <HAL_DMA_IRQHandler+0xb12>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a8a      	ldr	r2, [pc, #552]	; (8004a18 <HAL_DMA_IRQHandler+0xcac>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d045      	beq.n	800487e <HAL_DMA_IRQHandler+0xb12>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a89      	ldr	r2, [pc, #548]	; (8004a1c <HAL_DMA_IRQHandler+0xcb0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d040      	beq.n	800487e <HAL_DMA_IRQHandler+0xb12>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a87      	ldr	r2, [pc, #540]	; (8004a20 <HAL_DMA_IRQHandler+0xcb4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d03b      	beq.n	800487e <HAL_DMA_IRQHandler+0xb12>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a86      	ldr	r2, [pc, #536]	; (8004a24 <HAL_DMA_IRQHandler+0xcb8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d036      	beq.n	800487e <HAL_DMA_IRQHandler+0xb12>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a84      	ldr	r2, [pc, #528]	; (8004a28 <HAL_DMA_IRQHandler+0xcbc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d031      	beq.n	800487e <HAL_DMA_IRQHandler+0xb12>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a83      	ldr	r2, [pc, #524]	; (8004a2c <HAL_DMA_IRQHandler+0xcc0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d02c      	beq.n	800487e <HAL_DMA_IRQHandler+0xb12>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a81      	ldr	r2, [pc, #516]	; (8004a30 <HAL_DMA_IRQHandler+0xcc4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d027      	beq.n	800487e <HAL_DMA_IRQHandler+0xb12>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a80      	ldr	r2, [pc, #512]	; (8004a34 <HAL_DMA_IRQHandler+0xcc8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d022      	beq.n	800487e <HAL_DMA_IRQHandler+0xb12>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a7e      	ldr	r2, [pc, #504]	; (8004a38 <HAL_DMA_IRQHandler+0xccc>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d01d      	beq.n	800487e <HAL_DMA_IRQHandler+0xb12>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a7d      	ldr	r2, [pc, #500]	; (8004a3c <HAL_DMA_IRQHandler+0xcd0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d018      	beq.n	800487e <HAL_DMA_IRQHandler+0xb12>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a7b      	ldr	r2, [pc, #492]	; (8004a40 <HAL_DMA_IRQHandler+0xcd4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d013      	beq.n	800487e <HAL_DMA_IRQHandler+0xb12>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a7a      	ldr	r2, [pc, #488]	; (8004a44 <HAL_DMA_IRQHandler+0xcd8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00e      	beq.n	800487e <HAL_DMA_IRQHandler+0xb12>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a78      	ldr	r2, [pc, #480]	; (8004a48 <HAL_DMA_IRQHandler+0xcdc>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d009      	beq.n	800487e <HAL_DMA_IRQHandler+0xb12>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a77      	ldr	r2, [pc, #476]	; (8004a4c <HAL_DMA_IRQHandler+0xce0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d004      	beq.n	800487e <HAL_DMA_IRQHandler+0xb12>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a75      	ldr	r2, [pc, #468]	; (8004a50 <HAL_DMA_IRQHandler+0xce4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d108      	bne.n	8004890 <HAL_DMA_IRQHandler+0xb24>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0208 	bic.w	r2, r2, #8
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	e007      	b.n	80048a0 <HAL_DMA_IRQHandler+0xb34>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0204 	bic.w	r2, r2, #4
 800489e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 8165 	beq.w	8004b74 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048b2:	e15f      	b.n	8004b74 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b8:	f003 031f 	and.w	r3, r3, #31
 80048bc:	2202      	movs	r2, #2
 80048be:	409a      	lsls	r2, r3
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80c5 	beq.w	8004a54 <HAL_DMA_IRQHandler+0xce8>
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 80bf 	beq.w	8004a54 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048da:	f003 031f 	and.w	r3, r3, #31
 80048de:	2202      	movs	r2, #2
 80048e0:	409a      	lsls	r2, r3
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d018      	beq.n	8004922 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d109      	bne.n	800490e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 813a 	beq.w	8004b78 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800490c:	e134      	b.n	8004b78 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 8130 	beq.w	8004b78 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004920:	e12a      	b.n	8004b78 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f003 0320 	and.w	r3, r3, #32
 8004928:	2b00      	cmp	r3, #0
 800492a:	d168      	bne.n	80049fe <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a38      	ldr	r2, [pc, #224]	; (8004a14 <HAL_DMA_IRQHandler+0xca8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d04a      	beq.n	80049cc <HAL_DMA_IRQHandler+0xc60>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a37      	ldr	r2, [pc, #220]	; (8004a18 <HAL_DMA_IRQHandler+0xcac>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d045      	beq.n	80049cc <HAL_DMA_IRQHandler+0xc60>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a35      	ldr	r2, [pc, #212]	; (8004a1c <HAL_DMA_IRQHandler+0xcb0>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d040      	beq.n	80049cc <HAL_DMA_IRQHandler+0xc60>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a34      	ldr	r2, [pc, #208]	; (8004a20 <HAL_DMA_IRQHandler+0xcb4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d03b      	beq.n	80049cc <HAL_DMA_IRQHandler+0xc60>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a32      	ldr	r2, [pc, #200]	; (8004a24 <HAL_DMA_IRQHandler+0xcb8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d036      	beq.n	80049cc <HAL_DMA_IRQHandler+0xc60>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a31      	ldr	r2, [pc, #196]	; (8004a28 <HAL_DMA_IRQHandler+0xcbc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d031      	beq.n	80049cc <HAL_DMA_IRQHandler+0xc60>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a2f      	ldr	r2, [pc, #188]	; (8004a2c <HAL_DMA_IRQHandler+0xcc0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d02c      	beq.n	80049cc <HAL_DMA_IRQHandler+0xc60>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a2e      	ldr	r2, [pc, #184]	; (8004a30 <HAL_DMA_IRQHandler+0xcc4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d027      	beq.n	80049cc <HAL_DMA_IRQHandler+0xc60>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a2c      	ldr	r2, [pc, #176]	; (8004a34 <HAL_DMA_IRQHandler+0xcc8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d022      	beq.n	80049cc <HAL_DMA_IRQHandler+0xc60>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a2b      	ldr	r2, [pc, #172]	; (8004a38 <HAL_DMA_IRQHandler+0xccc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d01d      	beq.n	80049cc <HAL_DMA_IRQHandler+0xc60>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a29      	ldr	r2, [pc, #164]	; (8004a3c <HAL_DMA_IRQHandler+0xcd0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d018      	beq.n	80049cc <HAL_DMA_IRQHandler+0xc60>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a28      	ldr	r2, [pc, #160]	; (8004a40 <HAL_DMA_IRQHandler+0xcd4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d013      	beq.n	80049cc <HAL_DMA_IRQHandler+0xc60>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a26      	ldr	r2, [pc, #152]	; (8004a44 <HAL_DMA_IRQHandler+0xcd8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00e      	beq.n	80049cc <HAL_DMA_IRQHandler+0xc60>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a25      	ldr	r2, [pc, #148]	; (8004a48 <HAL_DMA_IRQHandler+0xcdc>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d009      	beq.n	80049cc <HAL_DMA_IRQHandler+0xc60>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a23      	ldr	r2, [pc, #140]	; (8004a4c <HAL_DMA_IRQHandler+0xce0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_DMA_IRQHandler+0xc60>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a22      	ldr	r2, [pc, #136]	; (8004a50 <HAL_DMA_IRQHandler+0xce4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d108      	bne.n	80049de <HAL_DMA_IRQHandler+0xc72>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0214 	bic.w	r2, r2, #20
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	e007      	b.n	80049ee <HAL_DMA_IRQHandler+0xc82>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 020a 	bic.w	r2, r2, #10
 80049ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 80b8 	beq.w	8004b78 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a10:	e0b2      	b.n	8004b78 <HAL_DMA_IRQHandler+0xe0c>
 8004a12:	bf00      	nop
 8004a14:	40020010 	.word	0x40020010
 8004a18:	40020028 	.word	0x40020028
 8004a1c:	40020040 	.word	0x40020040
 8004a20:	40020058 	.word	0x40020058
 8004a24:	40020070 	.word	0x40020070
 8004a28:	40020088 	.word	0x40020088
 8004a2c:	400200a0 	.word	0x400200a0
 8004a30:	400200b8 	.word	0x400200b8
 8004a34:	40020410 	.word	0x40020410
 8004a38:	40020428 	.word	0x40020428
 8004a3c:	40020440 	.word	0x40020440
 8004a40:	40020458 	.word	0x40020458
 8004a44:	40020470 	.word	0x40020470
 8004a48:	40020488 	.word	0x40020488
 8004a4c:	400204a0 	.word	0x400204a0
 8004a50:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a58:	f003 031f 	and.w	r3, r3, #31
 8004a5c:	2208      	movs	r2, #8
 8004a5e:	409a      	lsls	r2, r3
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 8088 	beq.w	8004b7a <HAL_DMA_IRQHandler+0xe0e>
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 8082 	beq.w	8004b7a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a41      	ldr	r2, [pc, #260]	; (8004b80 <HAL_DMA_IRQHandler+0xe14>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d04a      	beq.n	8004b16 <HAL_DMA_IRQHandler+0xdaa>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a3f      	ldr	r2, [pc, #252]	; (8004b84 <HAL_DMA_IRQHandler+0xe18>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d045      	beq.n	8004b16 <HAL_DMA_IRQHandler+0xdaa>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a3e      	ldr	r2, [pc, #248]	; (8004b88 <HAL_DMA_IRQHandler+0xe1c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d040      	beq.n	8004b16 <HAL_DMA_IRQHandler+0xdaa>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a3c      	ldr	r2, [pc, #240]	; (8004b8c <HAL_DMA_IRQHandler+0xe20>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d03b      	beq.n	8004b16 <HAL_DMA_IRQHandler+0xdaa>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a3b      	ldr	r2, [pc, #236]	; (8004b90 <HAL_DMA_IRQHandler+0xe24>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d036      	beq.n	8004b16 <HAL_DMA_IRQHandler+0xdaa>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a39      	ldr	r2, [pc, #228]	; (8004b94 <HAL_DMA_IRQHandler+0xe28>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d031      	beq.n	8004b16 <HAL_DMA_IRQHandler+0xdaa>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a38      	ldr	r2, [pc, #224]	; (8004b98 <HAL_DMA_IRQHandler+0xe2c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d02c      	beq.n	8004b16 <HAL_DMA_IRQHandler+0xdaa>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a36      	ldr	r2, [pc, #216]	; (8004b9c <HAL_DMA_IRQHandler+0xe30>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d027      	beq.n	8004b16 <HAL_DMA_IRQHandler+0xdaa>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a35      	ldr	r2, [pc, #212]	; (8004ba0 <HAL_DMA_IRQHandler+0xe34>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d022      	beq.n	8004b16 <HAL_DMA_IRQHandler+0xdaa>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a33      	ldr	r2, [pc, #204]	; (8004ba4 <HAL_DMA_IRQHandler+0xe38>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d01d      	beq.n	8004b16 <HAL_DMA_IRQHandler+0xdaa>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a32      	ldr	r2, [pc, #200]	; (8004ba8 <HAL_DMA_IRQHandler+0xe3c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d018      	beq.n	8004b16 <HAL_DMA_IRQHandler+0xdaa>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a30      	ldr	r2, [pc, #192]	; (8004bac <HAL_DMA_IRQHandler+0xe40>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d013      	beq.n	8004b16 <HAL_DMA_IRQHandler+0xdaa>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a2f      	ldr	r2, [pc, #188]	; (8004bb0 <HAL_DMA_IRQHandler+0xe44>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00e      	beq.n	8004b16 <HAL_DMA_IRQHandler+0xdaa>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a2d      	ldr	r2, [pc, #180]	; (8004bb4 <HAL_DMA_IRQHandler+0xe48>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d009      	beq.n	8004b16 <HAL_DMA_IRQHandler+0xdaa>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a2c      	ldr	r2, [pc, #176]	; (8004bb8 <HAL_DMA_IRQHandler+0xe4c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d004      	beq.n	8004b16 <HAL_DMA_IRQHandler+0xdaa>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a2a      	ldr	r2, [pc, #168]	; (8004bbc <HAL_DMA_IRQHandler+0xe50>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d108      	bne.n	8004b28 <HAL_DMA_IRQHandler+0xdbc>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 021c 	bic.w	r2, r2, #28
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e007      	b.n	8004b38 <HAL_DMA_IRQHandler+0xdcc>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 020e 	bic.w	r2, r2, #14
 8004b36:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3c:	f003 031f 	and.w	r3, r3, #31
 8004b40:	2201      	movs	r2, #1
 8004b42:	409a      	lsls	r2, r3
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	4798      	blx	r3
 8004b6e:	e004      	b.n	8004b7a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004b70:	bf00      	nop
 8004b72:	e002      	b.n	8004b7a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b74:	bf00      	nop
 8004b76:	e000      	b.n	8004b7a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b78:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b7a:	3728      	adds	r7, #40	; 0x28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40020010 	.word	0x40020010
 8004b84:	40020028 	.word	0x40020028
 8004b88:	40020040 	.word	0x40020040
 8004b8c:	40020058 	.word	0x40020058
 8004b90:	40020070 	.word	0x40020070
 8004b94:	40020088 	.word	0x40020088
 8004b98:	400200a0 	.word	0x400200a0
 8004b9c:	400200b8 	.word	0x400200b8
 8004ba0:	40020410 	.word	0x40020410
 8004ba4:	40020428 	.word	0x40020428
 8004ba8:	40020440 	.word	0x40020440
 8004bac:	40020458 	.word	0x40020458
 8004bb0:	40020470 	.word	0x40020470
 8004bb4:	40020488 	.word	0x40020488
 8004bb8:	400204a0 	.word	0x400204a0
 8004bbc:	400204b8 	.word	0x400204b8

08004bc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a42      	ldr	r2, [pc, #264]	; (8004cd8 <DMA_CalcBaseAndBitshift+0x118>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d04a      	beq.n	8004c68 <DMA_CalcBaseAndBitshift+0xa8>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a41      	ldr	r2, [pc, #260]	; (8004cdc <DMA_CalcBaseAndBitshift+0x11c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d045      	beq.n	8004c68 <DMA_CalcBaseAndBitshift+0xa8>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a3f      	ldr	r2, [pc, #252]	; (8004ce0 <DMA_CalcBaseAndBitshift+0x120>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d040      	beq.n	8004c68 <DMA_CalcBaseAndBitshift+0xa8>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a3e      	ldr	r2, [pc, #248]	; (8004ce4 <DMA_CalcBaseAndBitshift+0x124>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d03b      	beq.n	8004c68 <DMA_CalcBaseAndBitshift+0xa8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a3c      	ldr	r2, [pc, #240]	; (8004ce8 <DMA_CalcBaseAndBitshift+0x128>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d036      	beq.n	8004c68 <DMA_CalcBaseAndBitshift+0xa8>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a3b      	ldr	r2, [pc, #236]	; (8004cec <DMA_CalcBaseAndBitshift+0x12c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d031      	beq.n	8004c68 <DMA_CalcBaseAndBitshift+0xa8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a39      	ldr	r2, [pc, #228]	; (8004cf0 <DMA_CalcBaseAndBitshift+0x130>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d02c      	beq.n	8004c68 <DMA_CalcBaseAndBitshift+0xa8>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a38      	ldr	r2, [pc, #224]	; (8004cf4 <DMA_CalcBaseAndBitshift+0x134>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d027      	beq.n	8004c68 <DMA_CalcBaseAndBitshift+0xa8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a36      	ldr	r2, [pc, #216]	; (8004cf8 <DMA_CalcBaseAndBitshift+0x138>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d022      	beq.n	8004c68 <DMA_CalcBaseAndBitshift+0xa8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a35      	ldr	r2, [pc, #212]	; (8004cfc <DMA_CalcBaseAndBitshift+0x13c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d01d      	beq.n	8004c68 <DMA_CalcBaseAndBitshift+0xa8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a33      	ldr	r2, [pc, #204]	; (8004d00 <DMA_CalcBaseAndBitshift+0x140>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d018      	beq.n	8004c68 <DMA_CalcBaseAndBitshift+0xa8>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a32      	ldr	r2, [pc, #200]	; (8004d04 <DMA_CalcBaseAndBitshift+0x144>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d013      	beq.n	8004c68 <DMA_CalcBaseAndBitshift+0xa8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a30      	ldr	r2, [pc, #192]	; (8004d08 <DMA_CalcBaseAndBitshift+0x148>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00e      	beq.n	8004c68 <DMA_CalcBaseAndBitshift+0xa8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a2f      	ldr	r2, [pc, #188]	; (8004d0c <DMA_CalcBaseAndBitshift+0x14c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d009      	beq.n	8004c68 <DMA_CalcBaseAndBitshift+0xa8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a2d      	ldr	r2, [pc, #180]	; (8004d10 <DMA_CalcBaseAndBitshift+0x150>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <DMA_CalcBaseAndBitshift+0xa8>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a2c      	ldr	r2, [pc, #176]	; (8004d14 <DMA_CalcBaseAndBitshift+0x154>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d101      	bne.n	8004c6c <DMA_CalcBaseAndBitshift+0xac>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <DMA_CalcBaseAndBitshift+0xae>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d024      	beq.n	8004cbc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	3b10      	subs	r3, #16
 8004c7a:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <DMA_CalcBaseAndBitshift+0x158>)
 8004c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c80:	091b      	lsrs	r3, r3, #4
 8004c82:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	4a24      	ldr	r2, [pc, #144]	; (8004d1c <DMA_CalcBaseAndBitshift+0x15c>)
 8004c8c:	5cd3      	ldrb	r3, [r2, r3]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d908      	bls.n	8004cac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	4b1f      	ldr	r3, [pc, #124]	; (8004d20 <DMA_CalcBaseAndBitshift+0x160>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	1d1a      	adds	r2, r3, #4
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	659a      	str	r2, [r3, #88]	; 0x58
 8004caa:	e00d      	b.n	8004cc8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	4b1b      	ldr	r3, [pc, #108]	; (8004d20 <DMA_CalcBaseAndBitshift+0x160>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8004cba:	e005      	b.n	8004cc8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	40020010 	.word	0x40020010
 8004cdc:	40020028 	.word	0x40020028
 8004ce0:	40020040 	.word	0x40020040
 8004ce4:	40020058 	.word	0x40020058
 8004ce8:	40020070 	.word	0x40020070
 8004cec:	40020088 	.word	0x40020088
 8004cf0:	400200a0 	.word	0x400200a0
 8004cf4:	400200b8 	.word	0x400200b8
 8004cf8:	40020410 	.word	0x40020410
 8004cfc:	40020428 	.word	0x40020428
 8004d00:	40020440 	.word	0x40020440
 8004d04:	40020458 	.word	0x40020458
 8004d08:	40020470 	.word	0x40020470
 8004d0c:	40020488 	.word	0x40020488
 8004d10:	400204a0 	.word	0x400204a0
 8004d14:	400204b8 	.word	0x400204b8
 8004d18:	aaaaaaab 	.word	0xaaaaaaab
 8004d1c:	0800beac 	.word	0x0800beac
 8004d20:	fffffc00 	.word	0xfffffc00

08004d24 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d120      	bne.n	8004d7a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d858      	bhi.n	8004df2 <DMA_CheckFifoParam+0xce>
 8004d40:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <DMA_CheckFifoParam+0x24>)
 8004d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d46:	bf00      	nop
 8004d48:	08004d59 	.word	0x08004d59
 8004d4c:	08004d6b 	.word	0x08004d6b
 8004d50:	08004d59 	.word	0x08004d59
 8004d54:	08004df3 	.word	0x08004df3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d048      	beq.n	8004df6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d68:	e045      	b.n	8004df6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d72:	d142      	bne.n	8004dfa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d78:	e03f      	b.n	8004dfa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d82:	d123      	bne.n	8004dcc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d838      	bhi.n	8004dfe <DMA_CheckFifoParam+0xda>
 8004d8c:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <DMA_CheckFifoParam+0x70>)
 8004d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d92:	bf00      	nop
 8004d94:	08004da5 	.word	0x08004da5
 8004d98:	08004dab 	.word	0x08004dab
 8004d9c:	08004da5 	.word	0x08004da5
 8004da0:	08004dbd 	.word	0x08004dbd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
        break;
 8004da8:	e030      	b.n	8004e0c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d025      	beq.n	8004e02 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dba:	e022      	b.n	8004e02 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dc4:	d11f      	bne.n	8004e06 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dca:	e01c      	b.n	8004e06 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d902      	bls.n	8004dda <DMA_CheckFifoParam+0xb6>
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	d003      	beq.n	8004de0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004dd8:	e018      	b.n	8004e0c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	73fb      	strb	r3, [r7, #15]
        break;
 8004dde:	e015      	b.n	8004e0c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00e      	beq.n	8004e0a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
    break;
 8004df0:	e00b      	b.n	8004e0a <DMA_CheckFifoParam+0xe6>
        break;
 8004df2:	bf00      	nop
 8004df4:	e00a      	b.n	8004e0c <DMA_CheckFifoParam+0xe8>
        break;
 8004df6:	bf00      	nop
 8004df8:	e008      	b.n	8004e0c <DMA_CheckFifoParam+0xe8>
        break;
 8004dfa:	bf00      	nop
 8004dfc:	e006      	b.n	8004e0c <DMA_CheckFifoParam+0xe8>
        break;
 8004dfe:	bf00      	nop
 8004e00:	e004      	b.n	8004e0c <DMA_CheckFifoParam+0xe8>
        break;
 8004e02:	bf00      	nop
 8004e04:	e002      	b.n	8004e0c <DMA_CheckFifoParam+0xe8>
        break;
 8004e06:	bf00      	nop
 8004e08:	e000      	b.n	8004e0c <DMA_CheckFifoParam+0xe8>
    break;
 8004e0a:	bf00      	nop
    }
  }

  return status;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop

08004e1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a38      	ldr	r2, [pc, #224]	; (8004f10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d022      	beq.n	8004e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a36      	ldr	r2, [pc, #216]	; (8004f14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d01d      	beq.n	8004e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a35      	ldr	r2, [pc, #212]	; (8004f18 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d018      	beq.n	8004e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a33      	ldr	r2, [pc, #204]	; (8004f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d013      	beq.n	8004e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a32      	ldr	r2, [pc, #200]	; (8004f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00e      	beq.n	8004e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a30      	ldr	r2, [pc, #192]	; (8004f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d009      	beq.n	8004e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a2f      	ldr	r2, [pc, #188]	; (8004f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d004      	beq.n	8004e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a2d      	ldr	r2, [pc, #180]	; (8004f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d101      	bne.n	8004e7e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d01a      	beq.n	8004eba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	3b08      	subs	r3, #8
 8004e8c:	4a28      	ldr	r2, [pc, #160]	; (8004f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e92:	091b      	lsrs	r3, r3, #4
 8004e94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4b26      	ldr	r3, [pc, #152]	; (8004f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004e9a:	4413      	add	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a24      	ldr	r2, [pc, #144]	; (8004f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004ea8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004eb8:	e024      	b.n	8004f04 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	3b10      	subs	r3, #16
 8004ec2:	4a1e      	ldr	r2, [pc, #120]	; (8004f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec8:	091b      	lsrs	r3, r3, #4
 8004eca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	4a1c      	ldr	r2, [pc, #112]	; (8004f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d806      	bhi.n	8004ee2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4a1b      	ldr	r2, [pc, #108]	; (8004f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d902      	bls.n	8004ee2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3308      	adds	r3, #8
 8004ee0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4b18      	ldr	r3, [pc, #96]	; (8004f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	461a      	mov	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a16      	ldr	r2, [pc, #88]	; (8004f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004ef4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f003 031f 	and.w	r3, r3, #31
 8004efc:	2201      	movs	r2, #1
 8004efe:	409a      	lsls	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f04:	bf00      	nop
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	58025408 	.word	0x58025408
 8004f14:	5802541c 	.word	0x5802541c
 8004f18:	58025430 	.word	0x58025430
 8004f1c:	58025444 	.word	0x58025444
 8004f20:	58025458 	.word	0x58025458
 8004f24:	5802546c 	.word	0x5802546c
 8004f28:	58025480 	.word	0x58025480
 8004f2c:	58025494 	.word	0x58025494
 8004f30:	cccccccd 	.word	0xcccccccd
 8004f34:	16009600 	.word	0x16009600
 8004f38:	58025880 	.word	0x58025880
 8004f3c:	aaaaaaab 	.word	0xaaaaaaab
 8004f40:	400204b8 	.word	0x400204b8
 8004f44:	4002040f 	.word	0x4002040f
 8004f48:	10008200 	.word	0x10008200
 8004f4c:	40020880 	.word	0x40020880

08004f50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d04a      	beq.n	8004ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d847      	bhi.n	8004ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a25      	ldr	r2, [pc, #148]	; (8005008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d022      	beq.n	8004fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a24      	ldr	r2, [pc, #144]	; (800500c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d01d      	beq.n	8004fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a22      	ldr	r2, [pc, #136]	; (8005010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d018      	beq.n	8004fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a21      	ldr	r2, [pc, #132]	; (8005014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d013      	beq.n	8004fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a1f      	ldr	r2, [pc, #124]	; (8005018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00e      	beq.n	8004fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1e      	ldr	r2, [pc, #120]	; (800501c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d009      	beq.n	8004fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a1c      	ldr	r2, [pc, #112]	; (8005020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a1b      	ldr	r2, [pc, #108]	; (8005024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d101      	bne.n	8004fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e000      	b.n	8004fc2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4b17      	ldr	r3, [pc, #92]	; (8005028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	461a      	mov	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a15      	ldr	r2, [pc, #84]	; (800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004fd8:	671a      	str	r2, [r3, #112]	; 0x70
 8004fda:	e009      	b.n	8004ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4b14      	ldr	r3, [pc, #80]	; (8005030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a11      	ldr	r2, [pc, #68]	; (8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004fee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	409a      	lsls	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	58025408 	.word	0x58025408
 800500c:	5802541c 	.word	0x5802541c
 8005010:	58025430 	.word	0x58025430
 8005014:	58025444 	.word	0x58025444
 8005018:	58025458 	.word	0x58025458
 800501c:	5802546c 	.word	0x5802546c
 8005020:	58025480 	.word	0x58025480
 8005024:	58025494 	.word	0x58025494
 8005028:	1600963f 	.word	0x1600963f
 800502c:	58025940 	.word	0x58025940
 8005030:	1000823f 	.word	0x1000823f
 8005034:	40020940 	.word	0x40020940

08005038 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005038:	b480      	push	{r7}
 800503a:	b089      	sub	sp, #36	; 0x24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005046:	4b89      	ldr	r3, [pc, #548]	; (800526c <HAL_GPIO_Init+0x234>)
 8005048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800504a:	e194      	b.n	8005376 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	2101      	movs	r1, #1
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	fa01 f303 	lsl.w	r3, r1, r3
 8005058:	4013      	ands	r3, r2
 800505a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 8186 	beq.w	8005370 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d00b      	beq.n	8005084 <HAL_GPIO_Init+0x4c>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b02      	cmp	r3, #2
 8005072:	d007      	beq.n	8005084 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005078:	2b11      	cmp	r3, #17
 800507a:	d003      	beq.n	8005084 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b12      	cmp	r3, #18
 8005082:	d130      	bne.n	80050e6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	2203      	movs	r2, #3
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	43db      	mvns	r3, r3
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	4013      	ands	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050ba:	2201      	movs	r2, #1
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	43db      	mvns	r3, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	4013      	ands	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	091b      	lsrs	r3, r3, #4
 80050d0:	f003 0201 	and.w	r2, r3, #1
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	4313      	orrs	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	2203      	movs	r2, #3
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	43db      	mvns	r3, r3
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	4013      	ands	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4313      	orrs	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d003      	beq.n	8005126 <HAL_GPIO_Init+0xee>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2b12      	cmp	r3, #18
 8005124:	d123      	bne.n	800516e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	08da      	lsrs	r2, r3, #3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3208      	adds	r2, #8
 800512e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	220f      	movs	r2, #15
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	43db      	mvns	r3, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4013      	ands	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	691a      	ldr	r2, [r3, #16]
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4313      	orrs	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	08da      	lsrs	r2, r3, #3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3208      	adds	r2, #8
 8005168:	69b9      	ldr	r1, [r7, #24]
 800516a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	2203      	movs	r2, #3
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	43db      	mvns	r3, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4013      	ands	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f003 0203 	and.w	r2, r3, #3
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	4313      	orrs	r3, r2
 800519a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 80e0 	beq.w	8005370 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051b0:	4b2f      	ldr	r3, [pc, #188]	; (8005270 <HAL_GPIO_Init+0x238>)
 80051b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051b6:	4a2e      	ldr	r2, [pc, #184]	; (8005270 <HAL_GPIO_Init+0x238>)
 80051b8:	f043 0302 	orr.w	r3, r3, #2
 80051bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80051c0:	4b2b      	ldr	r3, [pc, #172]	; (8005270 <HAL_GPIO_Init+0x238>)
 80051c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051ce:	4a29      	ldr	r2, [pc, #164]	; (8005274 <HAL_GPIO_Init+0x23c>)
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	089b      	lsrs	r3, r3, #2
 80051d4:	3302      	adds	r3, #2
 80051d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	220f      	movs	r2, #15
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	43db      	mvns	r3, r3
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	4013      	ands	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a20      	ldr	r2, [pc, #128]	; (8005278 <HAL_GPIO_Init+0x240>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d052      	beq.n	80052a0 <HAL_GPIO_Init+0x268>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a1f      	ldr	r2, [pc, #124]	; (800527c <HAL_GPIO_Init+0x244>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d031      	beq.n	8005266 <HAL_GPIO_Init+0x22e>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a1e      	ldr	r2, [pc, #120]	; (8005280 <HAL_GPIO_Init+0x248>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d02b      	beq.n	8005262 <HAL_GPIO_Init+0x22a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a1d      	ldr	r2, [pc, #116]	; (8005284 <HAL_GPIO_Init+0x24c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d025      	beq.n	800525e <HAL_GPIO_Init+0x226>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a1c      	ldr	r2, [pc, #112]	; (8005288 <HAL_GPIO_Init+0x250>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d01f      	beq.n	800525a <HAL_GPIO_Init+0x222>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a1b      	ldr	r2, [pc, #108]	; (800528c <HAL_GPIO_Init+0x254>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d019      	beq.n	8005256 <HAL_GPIO_Init+0x21e>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a1a      	ldr	r2, [pc, #104]	; (8005290 <HAL_GPIO_Init+0x258>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <HAL_GPIO_Init+0x21a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a19      	ldr	r2, [pc, #100]	; (8005294 <HAL_GPIO_Init+0x25c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00d      	beq.n	800524e <HAL_GPIO_Init+0x216>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a18      	ldr	r2, [pc, #96]	; (8005298 <HAL_GPIO_Init+0x260>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d007      	beq.n	800524a <HAL_GPIO_Init+0x212>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a17      	ldr	r2, [pc, #92]	; (800529c <HAL_GPIO_Init+0x264>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d101      	bne.n	8005246 <HAL_GPIO_Init+0x20e>
 8005242:	2309      	movs	r3, #9
 8005244:	e02d      	b.n	80052a2 <HAL_GPIO_Init+0x26a>
 8005246:	230a      	movs	r3, #10
 8005248:	e02b      	b.n	80052a2 <HAL_GPIO_Init+0x26a>
 800524a:	2308      	movs	r3, #8
 800524c:	e029      	b.n	80052a2 <HAL_GPIO_Init+0x26a>
 800524e:	2307      	movs	r3, #7
 8005250:	e027      	b.n	80052a2 <HAL_GPIO_Init+0x26a>
 8005252:	2306      	movs	r3, #6
 8005254:	e025      	b.n	80052a2 <HAL_GPIO_Init+0x26a>
 8005256:	2305      	movs	r3, #5
 8005258:	e023      	b.n	80052a2 <HAL_GPIO_Init+0x26a>
 800525a:	2304      	movs	r3, #4
 800525c:	e021      	b.n	80052a2 <HAL_GPIO_Init+0x26a>
 800525e:	2303      	movs	r3, #3
 8005260:	e01f      	b.n	80052a2 <HAL_GPIO_Init+0x26a>
 8005262:	2302      	movs	r3, #2
 8005264:	e01d      	b.n	80052a2 <HAL_GPIO_Init+0x26a>
 8005266:	2301      	movs	r3, #1
 8005268:	e01b      	b.n	80052a2 <HAL_GPIO_Init+0x26a>
 800526a:	bf00      	nop
 800526c:	58000080 	.word	0x58000080
 8005270:	58024400 	.word	0x58024400
 8005274:	58000400 	.word	0x58000400
 8005278:	58020000 	.word	0x58020000
 800527c:	58020400 	.word	0x58020400
 8005280:	58020800 	.word	0x58020800
 8005284:	58020c00 	.word	0x58020c00
 8005288:	58021000 	.word	0x58021000
 800528c:	58021400 	.word	0x58021400
 8005290:	58021800 	.word	0x58021800
 8005294:	58021c00 	.word	0x58021c00
 8005298:	58022000 	.word	0x58022000
 800529c:	58022400 	.word	0x58022400
 80052a0:	2300      	movs	r3, #0
 80052a2:	69fa      	ldr	r2, [r7, #28]
 80052a4:	f002 0203 	and.w	r2, r2, #3
 80052a8:	0092      	lsls	r2, r2, #2
 80052aa:	4093      	lsls	r3, r2
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052b2:	4938      	ldr	r1, [pc, #224]	; (8005394 <HAL_GPIO_Init+0x35c>)
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	089b      	lsrs	r3, r3, #2
 80052b8:	3302      	adds	r3, #2
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	43db      	mvns	r3, r3
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	4013      	ands	r3, r2
 80052ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	43db      	mvns	r3, r3
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	4013      	ands	r3, r2
 80052f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	4313      	orrs	r3, r2
 800530c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	43db      	mvns	r3, r3
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	4013      	ands	r3, r2
 8005324:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800533a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	43db      	mvns	r3, r3
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	4013      	ands	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	3301      	adds	r3, #1
 8005374:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	fa22 f303 	lsr.w	r3, r2, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	f47f ae63 	bne.w	800504c <HAL_GPIO_Init+0x14>
  }
}
 8005386:	bf00      	nop
 8005388:	3724      	adds	r7, #36	; 0x24
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	58000400 	.word	0x58000400

08005398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	807b      	strh	r3, [r7, #2]
 80053a4:	4613      	mov	r3, r2
 80053a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053a8:	787b      	ldrb	r3, [r7, #1]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053ae:	887a      	ldrh	r2, [r7, #2]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80053b4:	e003      	b.n	80053be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80053b6:	887b      	ldrh	r3, [r7, #2]
 80053b8:	041a      	lsls	r2, r3, #16
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	619a      	str	r2, [r3, #24]
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	460b      	mov	r3, r1
 80053d4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695a      	ldr	r2, [r3, #20]
 80053da:	887b      	ldrh	r3, [r7, #2]
 80053dc:	401a      	ands	r2, r3
 80053de:	887b      	ldrh	r3, [r7, #2]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d104      	bne.n	80053ee <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80053e4:	887b      	ldrh	r3, [r7, #2]
 80053e6:	041a      	lsls	r2, r3, #16
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80053ec:	e002      	b.n	80053f4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80053ee:	887a      	ldrh	r2, [r7, #2]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	619a      	str	r2, [r3, #24]
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005408:	4b19      	ldr	r3, [pc, #100]	; (8005470 <HAL_PWREx_ConfigSupply+0x70>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b04      	cmp	r3, #4
 8005412:	d00a      	beq.n	800542a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005414:	4b16      	ldr	r3, [pc, #88]	; (8005470 <HAL_PWREx_ConfigSupply+0x70>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	429a      	cmp	r2, r3
 8005420:	d001      	beq.n	8005426 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e01f      	b.n	8005466 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	e01d      	b.n	8005466 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800542a:	4b11      	ldr	r3, [pc, #68]	; (8005470 <HAL_PWREx_ConfigSupply+0x70>)
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f023 0207 	bic.w	r2, r3, #7
 8005432:	490f      	ldr	r1, [pc, #60]	; (8005470 <HAL_PWREx_ConfigSupply+0x70>)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4313      	orrs	r3, r2
 8005438:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800543a:	f7fc fd6b 	bl	8001f14 <HAL_GetTick>
 800543e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005440:	e009      	b.n	8005456 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005442:	f7fc fd67 	bl	8001f14 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005450:	d901      	bls.n	8005456 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e007      	b.n	8005466 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005456:	4b06      	ldr	r3, [pc, #24]	; (8005470 <HAL_PWREx_ConfigSupply+0x70>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800545e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005462:	d1ee      	bne.n	8005442 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	58024800 	.word	0x58024800

08005474 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08c      	sub	sp, #48	; 0x30
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e3c4      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 8087 	beq.w	80055a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005494:	4ba2      	ldr	r3, [pc, #648]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800549c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800549e:	4ba0      	ldr	r3, [pc, #640]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80054a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a6:	2b10      	cmp	r3, #16
 80054a8:	d007      	beq.n	80054ba <HAL_RCC_OscConfig+0x46>
 80054aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ac:	2b18      	cmp	r3, #24
 80054ae:	d110      	bne.n	80054d2 <HAL_RCC_OscConfig+0x5e>
 80054b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d10b      	bne.n	80054d2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ba:	4b99      	ldr	r3, [pc, #612]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d06c      	beq.n	80055a0 <HAL_RCC_OscConfig+0x12c>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d168      	bne.n	80055a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e39e      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054da:	d106      	bne.n	80054ea <HAL_RCC_OscConfig+0x76>
 80054dc:	4b90      	ldr	r3, [pc, #576]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a8f      	ldr	r2, [pc, #572]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80054e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	e02e      	b.n	8005548 <HAL_RCC_OscConfig+0xd4>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10c      	bne.n	800550c <HAL_RCC_OscConfig+0x98>
 80054f2:	4b8b      	ldr	r3, [pc, #556]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a8a      	ldr	r2, [pc, #552]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80054f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	4b88      	ldr	r3, [pc, #544]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a87      	ldr	r2, [pc, #540]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005504:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	e01d      	b.n	8005548 <HAL_RCC_OscConfig+0xd4>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005514:	d10c      	bne.n	8005530 <HAL_RCC_OscConfig+0xbc>
 8005516:	4b82      	ldr	r3, [pc, #520]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a81      	ldr	r2, [pc, #516]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 800551c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	4b7f      	ldr	r3, [pc, #508]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a7e      	ldr	r2, [pc, #504]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	e00b      	b.n	8005548 <HAL_RCC_OscConfig+0xd4>
 8005530:	4b7b      	ldr	r3, [pc, #492]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a7a      	ldr	r2, [pc, #488]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	4b78      	ldr	r3, [pc, #480]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a77      	ldr	r2, [pc, #476]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d013      	beq.n	8005578 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005550:	f7fc fce0 	bl	8001f14 <HAL_GetTick>
 8005554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005558:	f7fc fcdc 	bl	8001f14 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b64      	cmp	r3, #100	; 0x64
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e352      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800556a:	4b6d      	ldr	r3, [pc, #436]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0f0      	beq.n	8005558 <HAL_RCC_OscConfig+0xe4>
 8005576:	e014      	b.n	80055a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005578:	f7fc fccc 	bl	8001f14 <HAL_GetTick>
 800557c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005580:	f7fc fcc8 	bl	8001f14 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b64      	cmp	r3, #100	; 0x64
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e33e      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005592:	4b63      	ldr	r3, [pc, #396]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f0      	bne.n	8005580 <HAL_RCC_OscConfig+0x10c>
 800559e:	e000      	b.n	80055a2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 8092 	beq.w	80056d4 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055b0:	4b5b      	ldr	r3, [pc, #364]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055ba:	4b59      	ldr	r3, [pc, #356]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80055bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055be:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <HAL_RCC_OscConfig+0x162>
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	2b18      	cmp	r3, #24
 80055ca:	d12d      	bne.n	8005628 <HAL_RCC_OscConfig+0x1b4>
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d128      	bne.n	8005628 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055d6:	4b52      	ldr	r3, [pc, #328]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d005      	beq.n	80055ee <HAL_RCC_OscConfig+0x17a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e310      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ee:	f7fc fcbf 	bl	8001f70 <HAL_GetREVID>
 80055f2:	4602      	mov	r2, r0
 80055f4:	f241 0303 	movw	r3, #4099	; 0x1003
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d80a      	bhi.n	8005612 <HAL_RCC_OscConfig+0x19e>
 80055fc:	4b48      	ldr	r3, [pc, #288]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	031b      	lsls	r3, r3, #12
 800560a:	4945      	ldr	r1, [pc, #276]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 800560c:	4313      	orrs	r3, r2
 800560e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005610:	e060      	b.n	80056d4 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005612:	4b43      	ldr	r3, [pc, #268]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	061b      	lsls	r3, r3, #24
 8005620:	493f      	ldr	r1, [pc, #252]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005622:	4313      	orrs	r3, r2
 8005624:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005626:	e055      	b.n	80056d4 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d038      	beq.n	80056a2 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005630:	4b3b      	ldr	r3, [pc, #236]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f023 0219 	bic.w	r2, r3, #25
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	4938      	ldr	r1, [pc, #224]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 800563e:	4313      	orrs	r3, r2
 8005640:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005642:	f7fc fc67 	bl	8001f14 <HAL_GetTick>
 8005646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800564a:	f7fc fc63 	bl	8001f14 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e2d9      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800565c:	4b30      	ldr	r3, [pc, #192]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	d0f0      	beq.n	800564a <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005668:	f7fc fc82 	bl	8001f70 <HAL_GetREVID>
 800566c:	4602      	mov	r2, r0
 800566e:	f241 0303 	movw	r3, #4099	; 0x1003
 8005672:	429a      	cmp	r2, r3
 8005674:	d80a      	bhi.n	800568c <HAL_RCC_OscConfig+0x218>
 8005676:	4b2a      	ldr	r3, [pc, #168]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	031b      	lsls	r3, r3, #12
 8005684:	4926      	ldr	r1, [pc, #152]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005686:	4313      	orrs	r3, r2
 8005688:	604b      	str	r3, [r1, #4]
 800568a:	e023      	b.n	80056d4 <HAL_RCC_OscConfig+0x260>
 800568c:	4b24      	ldr	r3, [pc, #144]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	061b      	lsls	r3, r3, #24
 800569a:	4921      	ldr	r1, [pc, #132]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 800569c:	4313      	orrs	r3, r2
 800569e:	604b      	str	r3, [r1, #4]
 80056a0:	e018      	b.n	80056d4 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056a2:	4b1f      	ldr	r3, [pc, #124]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1e      	ldr	r2, [pc, #120]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80056a8:	f023 0301 	bic.w	r3, r3, #1
 80056ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ae:	f7fc fc31 	bl	8001f14 <HAL_GetTick>
 80056b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056b6:	f7fc fc2d 	bl	8001f14 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e2a3      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056c8:	4b15      	ldr	r3, [pc, #84]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1f0      	bne.n	80056b6 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 8091 	beq.w	8005804 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056e2:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056ec:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80056ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d007      	beq.n	8005708 <HAL_RCC_OscConfig+0x294>
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	2b18      	cmp	r3, #24
 80056fc:	d12f      	bne.n	800575e <HAL_RCC_OscConfig+0x2ea>
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f003 0303 	and.w	r3, r3, #3
 8005704:	2b01      	cmp	r3, #1
 8005706:	d12a      	bne.n	800575e <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005708:	4b05      	ldr	r3, [pc, #20]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005710:	2b00      	cmp	r3, #0
 8005712:	d007      	beq.n	8005724 <HAL_RCC_OscConfig+0x2b0>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	2b80      	cmp	r3, #128	; 0x80
 800571a:	d003      	beq.n	8005724 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e277      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
 8005720:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005724:	f7fc fc24 	bl	8001f70 <HAL_GetREVID>
 8005728:	4602      	mov	r2, r0
 800572a:	f241 0303 	movw	r3, #4099	; 0x1003
 800572e:	429a      	cmp	r2, r3
 8005730:	d80a      	bhi.n	8005748 <HAL_RCC_OscConfig+0x2d4>
 8005732:	4ba2      	ldr	r3, [pc, #648]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	069b      	lsls	r3, r3, #26
 8005740:	499e      	ldr	r1, [pc, #632]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 8005742:	4313      	orrs	r3, r2
 8005744:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005746:	e05d      	b.n	8005804 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005748:	4b9c      	ldr	r3, [pc, #624]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	061b      	lsls	r3, r3, #24
 8005756:	4999      	ldr	r1, [pc, #612]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 8005758:	4313      	orrs	r3, r2
 800575a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800575c:	e052      	b.n	8005804 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d035      	beq.n	80057d2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005766:	4b95      	ldr	r3, [pc, #596]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a94      	ldr	r2, [pc, #592]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 800576c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005772:	f7fc fbcf 	bl	8001f14 <HAL_GetTick>
 8005776:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800577a:	f7fc fbcb 	bl	8001f14 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e241      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800578c:	4b8b      	ldr	r3, [pc, #556]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0f0      	beq.n	800577a <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005798:	f7fc fbea 	bl	8001f70 <HAL_GetREVID>
 800579c:	4602      	mov	r2, r0
 800579e:	f241 0303 	movw	r3, #4099	; 0x1003
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d80a      	bhi.n	80057bc <HAL_RCC_OscConfig+0x348>
 80057a6:	4b85      	ldr	r3, [pc, #532]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	069b      	lsls	r3, r3, #26
 80057b4:	4981      	ldr	r1, [pc, #516]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	604b      	str	r3, [r1, #4]
 80057ba:	e023      	b.n	8005804 <HAL_RCC_OscConfig+0x390>
 80057bc:	4b7f      	ldr	r3, [pc, #508]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	061b      	lsls	r3, r3, #24
 80057ca:	497c      	ldr	r1, [pc, #496]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60cb      	str	r3, [r1, #12]
 80057d0:	e018      	b.n	8005804 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80057d2:	4b7a      	ldr	r3, [pc, #488]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a79      	ldr	r2, [pc, #484]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 80057d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057de:	f7fc fb99 	bl	8001f14 <HAL_GetTick>
 80057e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80057e6:	f7fc fb95 	bl	8001f14 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e20b      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057f8:	4b70      	ldr	r3, [pc, #448]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1f0      	bne.n	80057e6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0308 	and.w	r3, r3, #8
 800580c:	2b00      	cmp	r3, #0
 800580e:	d036      	beq.n	800587e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d019      	beq.n	800584c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005818:	4b68      	ldr	r3, [pc, #416]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 800581a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800581c:	4a67      	ldr	r2, [pc, #412]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005824:	f7fc fb76 	bl	8001f14 <HAL_GetTick>
 8005828:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800582c:	f7fc fb72 	bl	8001f14 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e1e8      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800583e:	4b5f      	ldr	r3, [pc, #380]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 8005840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f0      	beq.n	800582c <HAL_RCC_OscConfig+0x3b8>
 800584a:	e018      	b.n	800587e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800584c:	4b5b      	ldr	r3, [pc, #364]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 800584e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005850:	4a5a      	ldr	r2, [pc, #360]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 8005852:	f023 0301 	bic.w	r3, r3, #1
 8005856:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005858:	f7fc fb5c 	bl	8001f14 <HAL_GetTick>
 800585c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005860:	f7fc fb58 	bl	8001f14 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e1ce      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005872:	4b52      	ldr	r3, [pc, #328]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 8005874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f0      	bne.n	8005860 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0320 	and.w	r3, r3, #32
 8005886:	2b00      	cmp	r3, #0
 8005888:	d036      	beq.n	80058f8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d019      	beq.n	80058c6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005892:	4b4a      	ldr	r3, [pc, #296]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a49      	ldr	r2, [pc, #292]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 8005898:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800589c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800589e:	f7fc fb39 	bl	8001f14 <HAL_GetTick>
 80058a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80058a6:	f7fc fb35 	bl	8001f14 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e1ab      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80058b8:	4b40      	ldr	r3, [pc, #256]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0f0      	beq.n	80058a6 <HAL_RCC_OscConfig+0x432>
 80058c4:	e018      	b.n	80058f8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058c6:	4b3d      	ldr	r3, [pc, #244]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a3c      	ldr	r2, [pc, #240]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 80058cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80058d2:	f7fc fb1f 	bl	8001f14 <HAL_GetTick>
 80058d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058d8:	e008      	b.n	80058ec <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80058da:	f7fc fb1b 	bl	8001f14 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d901      	bls.n	80058ec <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e191      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058ec:	4b33      	ldr	r3, [pc, #204]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1f0      	bne.n	80058da <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 8086 	beq.w	8005a12 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005906:	4b2e      	ldr	r3, [pc, #184]	; (80059c0 <HAL_RCC_OscConfig+0x54c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a2d      	ldr	r2, [pc, #180]	; (80059c0 <HAL_RCC_OscConfig+0x54c>)
 800590c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005910:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005912:	f7fc faff 	bl	8001f14 <HAL_GetTick>
 8005916:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800591a:	f7fc fafb 	bl	8001f14 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b64      	cmp	r3, #100	; 0x64
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e171      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800592c:	4b24      	ldr	r3, [pc, #144]	; (80059c0 <HAL_RCC_OscConfig+0x54c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0f0      	beq.n	800591a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d106      	bne.n	800594e <HAL_RCC_OscConfig+0x4da>
 8005940:	4b1e      	ldr	r3, [pc, #120]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 8005942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005944:	4a1d      	ldr	r2, [pc, #116]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 8005946:	f043 0301 	orr.w	r3, r3, #1
 800594a:	6713      	str	r3, [r2, #112]	; 0x70
 800594c:	e02d      	b.n	80059aa <HAL_RCC_OscConfig+0x536>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10c      	bne.n	8005970 <HAL_RCC_OscConfig+0x4fc>
 8005956:	4b19      	ldr	r3, [pc, #100]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 8005958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595a:	4a18      	ldr	r2, [pc, #96]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 800595c:	f023 0301 	bic.w	r3, r3, #1
 8005960:	6713      	str	r3, [r2, #112]	; 0x70
 8005962:	4b16      	ldr	r3, [pc, #88]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 8005964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005966:	4a15      	ldr	r2, [pc, #84]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 8005968:	f023 0304 	bic.w	r3, r3, #4
 800596c:	6713      	str	r3, [r2, #112]	; 0x70
 800596e:	e01c      	b.n	80059aa <HAL_RCC_OscConfig+0x536>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	2b05      	cmp	r3, #5
 8005976:	d10c      	bne.n	8005992 <HAL_RCC_OscConfig+0x51e>
 8005978:	4b10      	ldr	r3, [pc, #64]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 800597a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597c:	4a0f      	ldr	r2, [pc, #60]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 800597e:	f043 0304 	orr.w	r3, r3, #4
 8005982:	6713      	str	r3, [r2, #112]	; 0x70
 8005984:	4b0d      	ldr	r3, [pc, #52]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 8005986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005988:	4a0c      	ldr	r2, [pc, #48]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 800598a:	f043 0301 	orr.w	r3, r3, #1
 800598e:	6713      	str	r3, [r2, #112]	; 0x70
 8005990:	e00b      	b.n	80059aa <HAL_RCC_OscConfig+0x536>
 8005992:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 8005994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005996:	4a09      	ldr	r2, [pc, #36]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 8005998:	f023 0301 	bic.w	r3, r3, #1
 800599c:	6713      	str	r3, [r2, #112]	; 0x70
 800599e:	4b07      	ldr	r3, [pc, #28]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 80059a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a2:	4a06      	ldr	r2, [pc, #24]	; (80059bc <HAL_RCC_OscConfig+0x548>)
 80059a4:	f023 0304 	bic.w	r3, r3, #4
 80059a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d01a      	beq.n	80059e8 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b2:	f7fc faaf 	bl	8001f14 <HAL_GetTick>
 80059b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059b8:	e00f      	b.n	80059da <HAL_RCC_OscConfig+0x566>
 80059ba:	bf00      	nop
 80059bc:	58024400 	.word	0x58024400
 80059c0:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059c4:	f7fc faa6 	bl	8001f14 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e11a      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059da:	4b8f      	ldr	r3, [pc, #572]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 80059dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0ee      	beq.n	80059c4 <HAL_RCC_OscConfig+0x550>
 80059e6:	e014      	b.n	8005a12 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e8:	f7fc fa94 	bl	8001f14 <HAL_GetTick>
 80059ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059ee:	e00a      	b.n	8005a06 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059f0:	f7fc fa90 	bl	8001f14 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e104      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a06:	4b84      	ldr	r3, [pc, #528]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1ee      	bne.n	80059f0 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 80f9 	beq.w	8005c0e <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005a1c:	4b7e      	ldr	r3, [pc, #504]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a24:	2b18      	cmp	r3, #24
 8005a26:	f000 80b4 	beq.w	8005b92 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	f040 8095 	bne.w	8005b5e <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a34:	4b78      	ldr	r3, [pc, #480]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a77      	ldr	r2, [pc, #476]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a40:	f7fc fa68 	bl	8001f14 <HAL_GetTick>
 8005a44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a48:	f7fc fa64 	bl	8001f14 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e0da      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a5a:	4b6f      	ldr	r3, [pc, #444]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f0      	bne.n	8005a48 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a66:	4b6c      	ldr	r3, [pc, #432]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a6a:	4b6c      	ldr	r3, [pc, #432]	; (8005c1c <HAL_RCC_OscConfig+0x7a8>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a76:	0112      	lsls	r2, r2, #4
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	4967      	ldr	r1, [pc, #412]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	628b      	str	r3, [r1, #40]	; 0x28
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a84:	3b01      	subs	r3, #1
 8005a86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	025b      	lsls	r3, r3, #9
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	431a      	orrs	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	041b      	lsls	r3, r3, #16
 8005a9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	061b      	lsls	r3, r3, #24
 8005aac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ab0:	4959      	ldr	r1, [pc, #356]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005ab6:	4b58      	ldr	r3, [pc, #352]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	4a57      	ldr	r2, [pc, #348]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005abc:	f023 0301 	bic.w	r3, r3, #1
 8005ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ac2:	4b55      	ldr	r3, [pc, #340]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ac6:	4b56      	ldr	r3, [pc, #344]	; (8005c20 <HAL_RCC_OscConfig+0x7ac>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ace:	00d2      	lsls	r2, r2, #3
 8005ad0:	4951      	ldr	r1, [pc, #324]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005ad6:	4b50      	ldr	r3, [pc, #320]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ada:	f023 020c 	bic.w	r2, r3, #12
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	494d      	ldr	r1, [pc, #308]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005ae8:	4b4b      	ldr	r3, [pc, #300]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	f023 0202 	bic.w	r2, r3, #2
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af4:	4948      	ldr	r1, [pc, #288]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005afa:	4b47      	ldr	r3, [pc, #284]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afe:	4a46      	ldr	r2, [pc, #280]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b06:	4b44      	ldr	r3, [pc, #272]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0a:	4a43      	ldr	r2, [pc, #268]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005b12:	4b41      	ldr	r3, [pc, #260]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b16:	4a40      	ldr	r2, [pc, #256]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005b1e:	4b3e      	ldr	r3, [pc, #248]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b22:	4a3d      	ldr	r2, [pc, #244]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005b24:	f043 0301 	orr.w	r3, r3, #1
 8005b28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b2a:	4b3b      	ldr	r3, [pc, #236]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a3a      	ldr	r2, [pc, #232]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005b30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b36:	f7fc f9ed 	bl	8001f14 <HAL_GetTick>
 8005b3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b3c:	e008      	b.n	8005b50 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b3e:	f7fc f9e9 	bl	8001f14 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e05f      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b50:	4b31      	ldr	r3, [pc, #196]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d0f0      	beq.n	8005b3e <HAL_RCC_OscConfig+0x6ca>
 8005b5c:	e057      	b.n	8005c0e <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b5e:	4b2e      	ldr	r3, [pc, #184]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a2d      	ldr	r2, [pc, #180]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005b64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6a:	f7fc f9d3 	bl	8001f14 <HAL_GetTick>
 8005b6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b70:	e008      	b.n	8005b84 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b72:	f7fc f9cf 	bl	8001f14 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e045      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b84:	4b24      	ldr	r3, [pc, #144]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1f0      	bne.n	8005b72 <HAL_RCC_OscConfig+0x6fe>
 8005b90:	e03d      	b.n	8005c0e <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005b92:	4b21      	ldr	r3, [pc, #132]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b96:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b98:	4b1f      	ldr	r3, [pc, #124]	; (8005c18 <HAL_RCC_OscConfig+0x7a4>)
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d031      	beq.n	8005c0a <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f003 0203 	and.w	r2, r3, #3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d12a      	bne.n	8005c0a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	091b      	lsrs	r3, r3, #4
 8005bb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d122      	bne.n	8005c0a <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bce:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d11a      	bne.n	8005c0a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	0a5b      	lsrs	r3, r3, #9
 8005bd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d111      	bne.n	8005c0a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	0c1b      	lsrs	r3, r3, #16
 8005bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d108      	bne.n	8005c0a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	0e1b      	lsrs	r3, r3, #24
 8005bfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c04:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d001      	beq.n	8005c0e <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3730      	adds	r7, #48	; 0x30
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	58024400 	.word	0x58024400
 8005c1c:	fffffc0c 	.word	0xfffffc0c
 8005c20:	ffff0007 	.word	0xffff0007

08005c24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e19c      	b.n	8005f72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c38:	4b8a      	ldr	r3, [pc, #552]	; (8005e64 <HAL_RCC_ClockConfig+0x240>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d910      	bls.n	8005c68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c46:	4b87      	ldr	r3, [pc, #540]	; (8005e64 <HAL_RCC_ClockConfig+0x240>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f023 020f 	bic.w	r2, r3, #15
 8005c4e:	4985      	ldr	r1, [pc, #532]	; (8005e64 <HAL_RCC_ClockConfig+0x240>)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c56:	4b83      	ldr	r3, [pc, #524]	; (8005e64 <HAL_RCC_ClockConfig+0x240>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d001      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e184      	b.n	8005f72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d010      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691a      	ldr	r2, [r3, #16]
 8005c78:	4b7b      	ldr	r3, [pc, #492]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d908      	bls.n	8005c96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c84:	4b78      	ldr	r3, [pc, #480]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	4975      	ldr	r1, [pc, #468]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d010      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	695a      	ldr	r2, [r3, #20]
 8005ca6:	4b70      	ldr	r3, [pc, #448]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d908      	bls.n	8005cc4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005cb2:	4b6d      	ldr	r3, [pc, #436]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	496a      	ldr	r1, [pc, #424]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d010      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699a      	ldr	r2, [r3, #24]
 8005cd4:	4b64      	ldr	r3, [pc, #400]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d908      	bls.n	8005cf2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ce0:	4b61      	ldr	r3, [pc, #388]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	495e      	ldr	r1, [pc, #376]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d010      	beq.n	8005d20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	69da      	ldr	r2, [r3, #28]
 8005d02:	4b59      	ldr	r3, [pc, #356]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d908      	bls.n	8005d20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005d0e:	4b56      	ldr	r3, [pc, #344]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	4953      	ldr	r1, [pc, #332]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d010      	beq.n	8005d4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	4b4d      	ldr	r3, [pc, #308]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	f003 030f 	and.w	r3, r3, #15
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d908      	bls.n	8005d4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d3c:	4b4a      	ldr	r3, [pc, #296]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	f023 020f 	bic.w	r2, r3, #15
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	4947      	ldr	r1, [pc, #284]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d055      	beq.n	8005e06 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005d5a:	4b43      	ldr	r3, [pc, #268]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	4940      	ldr	r1, [pc, #256]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d107      	bne.n	8005d84 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d74:	4b3c      	ldr	r3, [pc, #240]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d121      	bne.n	8005dc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0f6      	b.n	8005f72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	2b03      	cmp	r3, #3
 8005d8a:	d107      	bne.n	8005d9c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d8c:	4b36      	ldr	r3, [pc, #216]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d115      	bne.n	8005dc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e0ea      	b.n	8005f72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d107      	bne.n	8005db4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005da4:	4b30      	ldr	r3, [pc, #192]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d109      	bne.n	8005dc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e0de      	b.n	8005f72 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005db4:	4b2c      	ldr	r3, [pc, #176]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e0d6      	b.n	8005f72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005dc4:	4b28      	ldr	r3, [pc, #160]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	f023 0207 	bic.w	r2, r3, #7
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	4925      	ldr	r1, [pc, #148]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd6:	f7fc f89d 	bl	8001f14 <HAL_GetTick>
 8005dda:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ddc:	e00a      	b.n	8005df4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dde:	f7fc f899 	bl	8001f14 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e0be      	b.n	8005f72 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005df4:	4b1c      	ldr	r3, [pc, #112]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d1eb      	bne.n	8005dde <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d010      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d208      	bcs.n	8005e34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e22:	4b11      	ldr	r3, [pc, #68]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	f023 020f 	bic.w	r2, r3, #15
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	490e      	ldr	r1, [pc, #56]	; (8005e68 <HAL_RCC_ClockConfig+0x244>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e34:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <HAL_RCC_ClockConfig+0x240>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 030f 	and.w	r3, r3, #15
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d214      	bcs.n	8005e6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e42:	4b08      	ldr	r3, [pc, #32]	; (8005e64 <HAL_RCC_ClockConfig+0x240>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f023 020f 	bic.w	r2, r3, #15
 8005e4a:	4906      	ldr	r1, [pc, #24]	; (8005e64 <HAL_RCC_ClockConfig+0x240>)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e52:	4b04      	ldr	r3, [pc, #16]	; (8005e64 <HAL_RCC_ClockConfig+0x240>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 030f 	and.w	r3, r3, #15
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d005      	beq.n	8005e6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e086      	b.n	8005f72 <HAL_RCC_ClockConfig+0x34e>
 8005e64:	52002000 	.word	0x52002000
 8005e68:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d010      	beq.n	8005e9a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691a      	ldr	r2, [r3, #16]
 8005e7c:	4b3f      	ldr	r3, [pc, #252]	; (8005f7c <HAL_RCC_ClockConfig+0x358>)
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d208      	bcs.n	8005e9a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e88:	4b3c      	ldr	r3, [pc, #240]	; (8005f7c <HAL_RCC_ClockConfig+0x358>)
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	4939      	ldr	r1, [pc, #228]	; (8005f7c <HAL_RCC_ClockConfig+0x358>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d010      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	695a      	ldr	r2, [r3, #20]
 8005eaa:	4b34      	ldr	r3, [pc, #208]	; (8005f7c <HAL_RCC_ClockConfig+0x358>)
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d208      	bcs.n	8005ec8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005eb6:	4b31      	ldr	r3, [pc, #196]	; (8005f7c <HAL_RCC_ClockConfig+0x358>)
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	492e      	ldr	r1, [pc, #184]	; (8005f7c <HAL_RCC_ClockConfig+0x358>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d010      	beq.n	8005ef6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	699a      	ldr	r2, [r3, #24]
 8005ed8:	4b28      	ldr	r3, [pc, #160]	; (8005f7c <HAL_RCC_ClockConfig+0x358>)
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d208      	bcs.n	8005ef6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ee4:	4b25      	ldr	r3, [pc, #148]	; (8005f7c <HAL_RCC_ClockConfig+0x358>)
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	4922      	ldr	r1, [pc, #136]	; (8005f7c <HAL_RCC_ClockConfig+0x358>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0320 	and.w	r3, r3, #32
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d010      	beq.n	8005f24 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69da      	ldr	r2, [r3, #28]
 8005f06:	4b1d      	ldr	r3, [pc, #116]	; (8005f7c <HAL_RCC_ClockConfig+0x358>)
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d208      	bcs.n	8005f24 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005f12:	4b1a      	ldr	r3, [pc, #104]	; (8005f7c <HAL_RCC_ClockConfig+0x358>)
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	4917      	ldr	r1, [pc, #92]	; (8005f7c <HAL_RCC_ClockConfig+0x358>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005f24:	f000 f834 	bl	8005f90 <HAL_RCC_GetSysClockFreq>
 8005f28:	4601      	mov	r1, r0
 8005f2a:	4b14      	ldr	r3, [pc, #80]	; (8005f7c <HAL_RCC_ClockConfig+0x358>)
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	0a1b      	lsrs	r3, r3, #8
 8005f30:	f003 030f 	and.w	r3, r3, #15
 8005f34:	4a12      	ldr	r2, [pc, #72]	; (8005f80 <HAL_RCC_ClockConfig+0x35c>)
 8005f36:	5cd3      	ldrb	r3, [r2, r3]
 8005f38:	f003 031f 	and.w	r3, r3, #31
 8005f3c:	fa21 f303 	lsr.w	r3, r1, r3
 8005f40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f42:	4b0e      	ldr	r3, [pc, #56]	; (8005f7c <HAL_RCC_ClockConfig+0x358>)
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	4a0d      	ldr	r2, [pc, #52]	; (8005f80 <HAL_RCC_ClockConfig+0x35c>)
 8005f4c:	5cd3      	ldrb	r3, [r2, r3]
 8005f4e:	f003 031f 	and.w	r3, r3, #31
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	fa22 f303 	lsr.w	r3, r2, r3
 8005f58:	4a0a      	ldr	r2, [pc, #40]	; (8005f84 <HAL_RCC_ClockConfig+0x360>)
 8005f5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f5c:	4a0a      	ldr	r2, [pc, #40]	; (8005f88 <HAL_RCC_ClockConfig+0x364>)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005f62:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <HAL_RCC_ClockConfig+0x368>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fb ff8a 	bl	8001e80 <HAL_InitTick>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	58024400 	.word	0x58024400
 8005f80:	0800be9c 	.word	0x0800be9c
 8005f84:	2400001c 	.word	0x2400001c
 8005f88:	24000018 	.word	0x24000018
 8005f8c:	24000020 	.word	0x24000020

08005f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b089      	sub	sp, #36	; 0x24
 8005f94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f96:	4baf      	ldr	r3, [pc, #700]	; (8006254 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f9e:	2b18      	cmp	r3, #24
 8005fa0:	f200 814e 	bhi.w	8006240 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005fa4:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <HAL_RCC_GetSysClockFreq+0x1c>)
 8005fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005faa:	bf00      	nop
 8005fac:	08006011 	.word	0x08006011
 8005fb0:	08006241 	.word	0x08006241
 8005fb4:	08006241 	.word	0x08006241
 8005fb8:	08006241 	.word	0x08006241
 8005fbc:	08006241 	.word	0x08006241
 8005fc0:	08006241 	.word	0x08006241
 8005fc4:	08006241 	.word	0x08006241
 8005fc8:	08006241 	.word	0x08006241
 8005fcc:	08006037 	.word	0x08006037
 8005fd0:	08006241 	.word	0x08006241
 8005fd4:	08006241 	.word	0x08006241
 8005fd8:	08006241 	.word	0x08006241
 8005fdc:	08006241 	.word	0x08006241
 8005fe0:	08006241 	.word	0x08006241
 8005fe4:	08006241 	.word	0x08006241
 8005fe8:	08006241 	.word	0x08006241
 8005fec:	0800603d 	.word	0x0800603d
 8005ff0:	08006241 	.word	0x08006241
 8005ff4:	08006241 	.word	0x08006241
 8005ff8:	08006241 	.word	0x08006241
 8005ffc:	08006241 	.word	0x08006241
 8006000:	08006241 	.word	0x08006241
 8006004:	08006241 	.word	0x08006241
 8006008:	08006241 	.word	0x08006241
 800600c:	08006043 	.word	0x08006043
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006010:	4b90      	ldr	r3, [pc, #576]	; (8006254 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0320 	and.w	r3, r3, #32
 8006018:	2b00      	cmp	r3, #0
 800601a:	d009      	beq.n	8006030 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800601c:	4b8d      	ldr	r3, [pc, #564]	; (8006254 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	08db      	lsrs	r3, r3, #3
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	4a8c      	ldr	r2, [pc, #560]	; (8006258 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006028:	fa22 f303 	lsr.w	r3, r2, r3
 800602c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800602e:	e10a      	b.n	8006246 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006030:	4b89      	ldr	r3, [pc, #548]	; (8006258 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006032:	61bb      	str	r3, [r7, #24]
    break;
 8006034:	e107      	b.n	8006246 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006036:	4b89      	ldr	r3, [pc, #548]	; (800625c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006038:	61bb      	str	r3, [r7, #24]
    break;
 800603a:	e104      	b.n	8006246 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800603c:	4b88      	ldr	r3, [pc, #544]	; (8006260 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800603e:	61bb      	str	r3, [r7, #24]
    break;
 8006040:	e101      	b.n	8006246 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006042:	4b84      	ldr	r3, [pc, #528]	; (8006254 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800604c:	4b81      	ldr	r3, [pc, #516]	; (8006254 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800604e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006050:	091b      	lsrs	r3, r3, #4
 8006052:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006056:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006058:	4b7e      	ldr	r3, [pc, #504]	; (8006254 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006062:	4b7c      	ldr	r3, [pc, #496]	; (8006254 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006066:	08db      	lsrs	r3, r3, #3
 8006068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	fb02 f303 	mul.w	r3, r2, r3
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 80da 	beq.w	800623a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d05a      	beq.n	8006142 <HAL_RCC_GetSysClockFreq+0x1b2>
 800608c:	2b01      	cmp	r3, #1
 800608e:	d302      	bcc.n	8006096 <HAL_RCC_GetSysClockFreq+0x106>
 8006090:	2b02      	cmp	r3, #2
 8006092:	d078      	beq.n	8006186 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006094:	e099      	b.n	80061ca <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006096:	4b6f      	ldr	r3, [pc, #444]	; (8006254 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0320 	and.w	r3, r3, #32
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d02d      	beq.n	80060fe <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060a2:	4b6c      	ldr	r3, [pc, #432]	; (8006254 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	08db      	lsrs	r3, r3, #3
 80060a8:	f003 0303 	and.w	r3, r3, #3
 80060ac:	4a6a      	ldr	r2, [pc, #424]	; (8006258 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80060ae:	fa22 f303 	lsr.w	r3, r2, r3
 80060b2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	ee07 3a90 	vmov	s15, r3
 80060c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060cc:	4b61      	ldr	r3, [pc, #388]	; (8006254 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d4:	ee07 3a90 	vmov	s15, r3
 80060d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80060e0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006264 <HAL_RCC_GetSysClockFreq+0x2d4>
 80060e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80060fc:	e087      	b.n	800620e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	ee07 3a90 	vmov	s15, r3
 8006104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006108:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006268 <HAL_RCC_GetSysClockFreq+0x2d8>
 800610c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006110:	4b50      	ldr	r3, [pc, #320]	; (8006254 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006118:	ee07 3a90 	vmov	s15, r3
 800611c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006120:	ed97 6a02 	vldr	s12, [r7, #8]
 8006124:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006264 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006128:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800612c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006130:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006134:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800613c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006140:	e065      	b.n	800620e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	ee07 3a90 	vmov	s15, r3
 8006148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800614c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800626c <HAL_RCC_GetSysClockFreq+0x2dc>
 8006150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006154:	4b3f      	ldr	r3, [pc, #252]	; (8006254 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800615c:	ee07 3a90 	vmov	s15, r3
 8006160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006164:	ed97 6a02 	vldr	s12, [r7, #8]
 8006168:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006264 <HAL_RCC_GetSysClockFreq+0x2d4>
 800616c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006170:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006174:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006178:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800617c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006180:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006184:	e043      	b.n	800620e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	ee07 3a90 	vmov	s15, r3
 800618c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006190:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006270 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006198:	4b2e      	ldr	r3, [pc, #184]	; (8006254 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800619a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a0:	ee07 3a90 	vmov	s15, r3
 80061a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80061ac:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006264 <HAL_RCC_GetSysClockFreq+0x2d4>
 80061b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061c8:	e021      	b.n	800620e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	ee07 3a90 	vmov	s15, r3
 80061d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800626c <HAL_RCC_GetSysClockFreq+0x2dc>
 80061d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061dc:	4b1d      	ldr	r3, [pc, #116]	; (8006254 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e4:	ee07 3a90 	vmov	s15, r3
 80061e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80061f0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006264 <HAL_RCC_GetSysClockFreq+0x2d4>
 80061f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006200:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006208:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800620c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800620e:	4b11      	ldr	r3, [pc, #68]	; (8006254 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	0a5b      	lsrs	r3, r3, #9
 8006214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006218:	3301      	adds	r3, #1
 800621a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	ee07 3a90 	vmov	s15, r3
 8006222:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006226:	edd7 6a07 	vldr	s13, [r7, #28]
 800622a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800622e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006232:	ee17 3a90 	vmov	r3, s15
 8006236:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006238:	e005      	b.n	8006246 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	61bb      	str	r3, [r7, #24]
    break;
 800623e:	e002      	b.n	8006246 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006240:	4b06      	ldr	r3, [pc, #24]	; (800625c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006242:	61bb      	str	r3, [r7, #24]
    break;
 8006244:	bf00      	nop
  }

  return sysclockfreq;
 8006246:	69bb      	ldr	r3, [r7, #24]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3724      	adds	r7, #36	; 0x24
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	58024400 	.word	0x58024400
 8006258:	03d09000 	.word	0x03d09000
 800625c:	003d0900 	.word	0x003d0900
 8006260:	017d7840 	.word	0x017d7840
 8006264:	46000000 	.word	0x46000000
 8006268:	4c742400 	.word	0x4c742400
 800626c:	4a742400 	.word	0x4a742400
 8006270:	4bbebc20 	.word	0x4bbebc20

08006274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800627a:	f7ff fe89 	bl	8005f90 <HAL_RCC_GetSysClockFreq>
 800627e:	4601      	mov	r1, r0
 8006280:	4b10      	ldr	r3, [pc, #64]	; (80062c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	0a1b      	lsrs	r3, r3, #8
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	4a0f      	ldr	r2, [pc, #60]	; (80062c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800628c:	5cd3      	ldrb	r3, [r2, r3]
 800628e:	f003 031f 	and.w	r3, r3, #31
 8006292:	fa21 f303 	lsr.w	r3, r1, r3
 8006296:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006298:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	f003 030f 	and.w	r3, r3, #15
 80062a0:	4a09      	ldr	r2, [pc, #36]	; (80062c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80062a2:	5cd3      	ldrb	r3, [r2, r3]
 80062a4:	f003 031f 	and.w	r3, r3, #31
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	fa22 f303 	lsr.w	r3, r2, r3
 80062ae:	4a07      	ldr	r2, [pc, #28]	; (80062cc <HAL_RCC_GetHCLKFreq+0x58>)
 80062b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80062b2:	4a07      	ldr	r2, [pc, #28]	; (80062d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80062b8:	4b04      	ldr	r3, [pc, #16]	; (80062cc <HAL_RCC_GetHCLKFreq+0x58>)
 80062ba:	681b      	ldr	r3, [r3, #0]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	58024400 	.word	0x58024400
 80062c8:	0800be9c 	.word	0x0800be9c
 80062cc:	2400001c 	.word	0x2400001c
 80062d0:	24000018 	.word	0x24000018

080062d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80062d8:	f7ff ffcc 	bl	8006274 <HAL_RCC_GetHCLKFreq>
 80062dc:	4601      	mov	r1, r0
 80062de:	4b06      	ldr	r3, [pc, #24]	; (80062f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	091b      	lsrs	r3, r3, #4
 80062e4:	f003 0307 	and.w	r3, r3, #7
 80062e8:	4a04      	ldr	r2, [pc, #16]	; (80062fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80062ea:	5cd3      	ldrb	r3, [r2, r3]
 80062ec:	f003 031f 	and.w	r3, r3, #31
 80062f0:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	58024400 	.word	0x58024400
 80062fc:	0800be9c 	.word	0x0800be9c

08006300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006304:	f7ff ffb6 	bl	8006274 <HAL_RCC_GetHCLKFreq>
 8006308:	4601      	mov	r1, r0
 800630a:	4b06      	ldr	r3, [pc, #24]	; (8006324 <HAL_RCC_GetPCLK2Freq+0x24>)
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	0a1b      	lsrs	r3, r3, #8
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	4a04      	ldr	r2, [pc, #16]	; (8006328 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006316:	5cd3      	ldrb	r3, [r2, r3]
 8006318:	f003 031f 	and.w	r3, r3, #31
 800631c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006320:	4618      	mov	r0, r3
 8006322:	bd80      	pop	{r7, pc}
 8006324:	58024400 	.word	0x58024400
 8006328:	0800be9c 	.word	0x0800be9c

0800632c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006334:	2300      	movs	r3, #0
 8006336:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006338:	2300      	movs	r3, #0
 800633a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d03d      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800634c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006350:	d013      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006356:	d802      	bhi.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006358:	2b00      	cmp	r3, #0
 800635a:	d007      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800635c:	e01f      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800635e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006362:	d013      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006364:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006368:	d01c      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800636a:	e018      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800636c:	4baf      	ldr	r3, [pc, #700]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	4aae      	ldr	r2, [pc, #696]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006376:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006378:	e015      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3304      	adds	r3, #4
 800637e:	2102      	movs	r1, #2
 8006380:	4618      	mov	r0, r3
 8006382:	f001 fd23 	bl	8007dcc <RCCEx_PLL2_Config>
 8006386:	4603      	mov	r3, r0
 8006388:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800638a:	e00c      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3324      	adds	r3, #36	; 0x24
 8006390:	2102      	movs	r1, #2
 8006392:	4618      	mov	r0, r3
 8006394:	f001 fdcc 	bl	8007f30 <RCCEx_PLL3_Config>
 8006398:	4603      	mov	r3, r0
 800639a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800639c:	e003      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	75fb      	strb	r3, [r7, #23]
      break;
 80063a2:	e000      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80063a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d109      	bne.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80063ac:	4b9f      	ldr	r3, [pc, #636]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063b8:	499c      	ldr	r1, [pc, #624]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	650b      	str	r3, [r1, #80]	; 0x50
 80063be:	e001      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c0:	7dfb      	ldrb	r3, [r7, #23]
 80063c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d03d      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d4:	2b04      	cmp	r3, #4
 80063d6:	d826      	bhi.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80063d8:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80063da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063de:	bf00      	nop
 80063e0:	080063f5 	.word	0x080063f5
 80063e4:	08006403 	.word	0x08006403
 80063e8:	08006415 	.word	0x08006415
 80063ec:	0800642d 	.word	0x0800642d
 80063f0:	0800642d 	.word	0x0800642d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f4:	4b8d      	ldr	r3, [pc, #564]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	4a8c      	ldr	r2, [pc, #560]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006400:	e015      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3304      	adds	r3, #4
 8006406:	2100      	movs	r1, #0
 8006408:	4618      	mov	r0, r3
 800640a:	f001 fcdf 	bl	8007dcc <RCCEx_PLL2_Config>
 800640e:	4603      	mov	r3, r0
 8006410:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006412:	e00c      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3324      	adds	r3, #36	; 0x24
 8006418:	2100      	movs	r1, #0
 800641a:	4618      	mov	r0, r3
 800641c:	f001 fd88 	bl	8007f30 <RCCEx_PLL3_Config>
 8006420:	4603      	mov	r3, r0
 8006422:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006424:	e003      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	75fb      	strb	r3, [r7, #23]
      break;
 800642a:	e000      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800642c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800642e:	7dfb      	ldrb	r3, [r7, #23]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d109      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006434:	4b7d      	ldr	r3, [pc, #500]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006438:	f023 0207 	bic.w	r2, r3, #7
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006440:	497a      	ldr	r1, [pc, #488]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006442:	4313      	orrs	r3, r2
 8006444:	650b      	str	r3, [r1, #80]	; 0x50
 8006446:	e001      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006448:	7dfb      	ldrb	r3, [r7, #23]
 800644a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006454:	2b00      	cmp	r3, #0
 8006456:	d03e      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800645c:	2b80      	cmp	r3, #128	; 0x80
 800645e:	d01c      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006460:	2b80      	cmp	r3, #128	; 0x80
 8006462:	d804      	bhi.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006464:	2b00      	cmp	r3, #0
 8006466:	d008      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006468:	2b40      	cmp	r3, #64	; 0x40
 800646a:	d00d      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800646c:	e01e      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x180>
 800646e:	2bc0      	cmp	r3, #192	; 0xc0
 8006470:	d01f      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006476:	d01e      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006478:	e018      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800647a:	4b6c      	ldr	r3, [pc, #432]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800647c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647e:	4a6b      	ldr	r2, [pc, #428]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006484:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006486:	e017      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3304      	adds	r3, #4
 800648c:	2100      	movs	r1, #0
 800648e:	4618      	mov	r0, r3
 8006490:	f001 fc9c 	bl	8007dcc <RCCEx_PLL2_Config>
 8006494:	4603      	mov	r3, r0
 8006496:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006498:	e00e      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	3324      	adds	r3, #36	; 0x24
 800649e:	2100      	movs	r1, #0
 80064a0:	4618      	mov	r0, r3
 80064a2:	f001 fd45 	bl	8007f30 <RCCEx_PLL3_Config>
 80064a6:	4603      	mov	r3, r0
 80064a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80064aa:	e005      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	75fb      	strb	r3, [r7, #23]
      break;
 80064b0:	e002      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80064b2:	bf00      	nop
 80064b4:	e000      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80064b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064b8:	7dfb      	ldrb	r3, [r7, #23]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d109      	bne.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80064be:	4b5b      	ldr	r3, [pc, #364]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ca:	4958      	ldr	r1, [pc, #352]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	650b      	str	r3, [r1, #80]	; 0x50
 80064d0:	e001      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d2:	7dfb      	ldrb	r3, [r7, #23]
 80064d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d044      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064ec:	d01f      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80064ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064f2:	d805      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80064f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064fc:	d00e      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80064fe:	e01f      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006500:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006504:	d01f      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006506:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800650a:	d01e      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800650c:	e018      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800650e:	4b47      	ldr	r3, [pc, #284]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	4a46      	ldr	r2, [pc, #280]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006518:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800651a:	e017      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3304      	adds	r3, #4
 8006520:	2100      	movs	r1, #0
 8006522:	4618      	mov	r0, r3
 8006524:	f001 fc52 	bl	8007dcc <RCCEx_PLL2_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800652c:	e00e      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3324      	adds	r3, #36	; 0x24
 8006532:	2100      	movs	r1, #0
 8006534:	4618      	mov	r0, r3
 8006536:	f001 fcfb 	bl	8007f30 <RCCEx_PLL3_Config>
 800653a:	4603      	mov	r3, r0
 800653c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800653e:	e005      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	75fb      	strb	r3, [r7, #23]
      break;
 8006544:	e002      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006546:	bf00      	nop
 8006548:	e000      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800654a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800654c:	7dfb      	ldrb	r3, [r7, #23]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10a      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006552:	4b36      	ldr	r3, [pc, #216]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006556:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006560:	4932      	ldr	r1, [pc, #200]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006562:	4313      	orrs	r3, r2
 8006564:	658b      	str	r3, [r1, #88]	; 0x58
 8006566:	e001      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006568:	7dfb      	ldrb	r3, [r7, #23]
 800656a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006574:	2b00      	cmp	r3, #0
 8006576:	d044      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800657e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006582:	d01f      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006588:	d805      	bhi.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800658e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006592:	d00e      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006594:	e01f      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006596:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800659a:	d01f      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800659c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065a0:	d01e      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80065a2:	e018      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a4:	4b21      	ldr	r3, [pc, #132]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a8:	4a20      	ldr	r2, [pc, #128]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065b0:	e017      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	3304      	adds	r3, #4
 80065b6:	2100      	movs	r1, #0
 80065b8:	4618      	mov	r0, r3
 80065ba:	f001 fc07 	bl	8007dcc <RCCEx_PLL2_Config>
 80065be:	4603      	mov	r3, r0
 80065c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80065c2:	e00e      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3324      	adds	r3, #36	; 0x24
 80065c8:	2100      	movs	r1, #0
 80065ca:	4618      	mov	r0, r3
 80065cc:	f001 fcb0 	bl	8007f30 <RCCEx_PLL3_Config>
 80065d0:	4603      	mov	r3, r0
 80065d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065d4:	e005      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	75fb      	strb	r3, [r7, #23]
      break;
 80065da:	e002      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80065dc:	bf00      	nop
 80065de:	e000      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80065e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065e2:	7dfb      	ldrb	r3, [r7, #23]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10a      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80065e8:	4b10      	ldr	r3, [pc, #64]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065f6:	490d      	ldr	r1, [pc, #52]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	658b      	str	r3, [r1, #88]	; 0x58
 80065fc:	e001      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
 8006600:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d035      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006612:	2b10      	cmp	r3, #16
 8006614:	d00c      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006616:	2b10      	cmp	r3, #16
 8006618:	d802      	bhi.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800661a:	2b00      	cmp	r3, #0
 800661c:	d01b      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800661e:	e017      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006620:	2b20      	cmp	r3, #32
 8006622:	d00c      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006624:	2b30      	cmp	r3, #48	; 0x30
 8006626:	d018      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006628:	e012      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800662a:	bf00      	nop
 800662c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006630:	4baf      	ldr	r3, [pc, #700]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	4aae      	ldr	r2, [pc, #696]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800663a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800663c:	e00e      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3304      	adds	r3, #4
 8006642:	2102      	movs	r1, #2
 8006644:	4618      	mov	r0, r3
 8006646:	f001 fbc1 	bl	8007dcc <RCCEx_PLL2_Config>
 800664a:	4603      	mov	r3, r0
 800664c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800664e:	e005      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	75fb      	strb	r3, [r7, #23]
      break;
 8006654:	e002      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006656:	bf00      	nop
 8006658:	e000      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800665a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800665c:	7dfb      	ldrb	r3, [r7, #23]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d109      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006662:	4ba3      	ldr	r3, [pc, #652]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006666:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800666e:	49a0      	ldr	r1, [pc, #640]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006670:	4313      	orrs	r3, r2
 8006672:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006674:	e001      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006676:	7dfb      	ldrb	r3, [r7, #23]
 8006678:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d042      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800668e:	d01f      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006694:	d805      	bhi.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800669a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800669e:	d00e      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x392>
 80066a0:	e01f      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80066a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066a6:	d01f      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80066a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066ac:	d01e      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80066ae:	e018      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066b0:	4b8f      	ldr	r3, [pc, #572]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b4:	4a8e      	ldr	r2, [pc, #568]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066bc:	e017      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	3304      	adds	r3, #4
 80066c2:	2100      	movs	r1, #0
 80066c4:	4618      	mov	r0, r3
 80066c6:	f001 fb81 	bl	8007dcc <RCCEx_PLL2_Config>
 80066ca:	4603      	mov	r3, r0
 80066cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066ce:	e00e      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3324      	adds	r3, #36	; 0x24
 80066d4:	2100      	movs	r1, #0
 80066d6:	4618      	mov	r0, r3
 80066d8:	f001 fc2a 	bl	8007f30 <RCCEx_PLL3_Config>
 80066dc:	4603      	mov	r3, r0
 80066de:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066e0:	e005      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	75fb      	strb	r3, [r7, #23]
      break;
 80066e6:	e002      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80066e8:	bf00      	nop
 80066ea:	e000      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80066ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066ee:	7dfb      	ldrb	r3, [r7, #23]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d109      	bne.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066f4:	4b7e      	ldr	r3, [pc, #504]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006700:	497b      	ldr	r1, [pc, #492]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006702:	4313      	orrs	r3, r2
 8006704:	650b      	str	r3, [r1, #80]	; 0x50
 8006706:	e001      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006708:	7dfb      	ldrb	r3, [r7, #23]
 800670a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d042      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800671c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006720:	d01b      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006722:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006726:	d805      	bhi.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d022      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800672c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006730:	d00a      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006732:	e01b      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006734:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006738:	d01d      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800673a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800673e:	d01c      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006740:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006744:	d01b      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006746:	e011      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	3304      	adds	r3, #4
 800674c:	2101      	movs	r1, #1
 800674e:	4618      	mov	r0, r3
 8006750:	f001 fb3c 	bl	8007dcc <RCCEx_PLL2_Config>
 8006754:	4603      	mov	r3, r0
 8006756:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006758:	e012      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3324      	adds	r3, #36	; 0x24
 800675e:	2101      	movs	r1, #1
 8006760:	4618      	mov	r0, r3
 8006762:	f001 fbe5 	bl	8007f30 <RCCEx_PLL3_Config>
 8006766:	4603      	mov	r3, r0
 8006768:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800676a:	e009      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	75fb      	strb	r3, [r7, #23]
      break;
 8006770:	e006      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006772:	bf00      	nop
 8006774:	e004      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006776:	bf00      	nop
 8006778:	e002      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800677a:	bf00      	nop
 800677c:	e000      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800677e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006780:	7dfb      	ldrb	r3, [r7, #23]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d109      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006786:	4b5a      	ldr	r3, [pc, #360]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800678a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006792:	4957      	ldr	r1, [pc, #348]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006794:	4313      	orrs	r3, r2
 8006796:	650b      	str	r3, [r1, #80]	; 0x50
 8006798:	e001      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679a:	7dfb      	ldrb	r3, [r7, #23]
 800679c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d044      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b4:	d01b      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80067b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ba:	d805      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d022      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80067c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067c4:	d00a      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80067c6:	e01b      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80067c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067cc:	d01d      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80067ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067d2:	d01c      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80067d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067d8:	d01b      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80067da:	e011      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3304      	adds	r3, #4
 80067e0:	2101      	movs	r1, #1
 80067e2:	4618      	mov	r0, r3
 80067e4:	f001 faf2 	bl	8007dcc <RCCEx_PLL2_Config>
 80067e8:	4603      	mov	r3, r0
 80067ea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067ec:	e012      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	3324      	adds	r3, #36	; 0x24
 80067f2:	2101      	movs	r1, #1
 80067f4:	4618      	mov	r0, r3
 80067f6:	f001 fb9b 	bl	8007f30 <RCCEx_PLL3_Config>
 80067fa:	4603      	mov	r3, r0
 80067fc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067fe:	e009      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	75fb      	strb	r3, [r7, #23]
      break;
 8006804:	e006      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006806:	bf00      	nop
 8006808:	e004      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800680a:	bf00      	nop
 800680c:	e002      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800680e:	bf00      	nop
 8006810:	e000      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006814:	7dfb      	ldrb	r3, [r7, #23]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10a      	bne.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800681a:	4b35      	ldr	r3, [pc, #212]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800681c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006828:	4931      	ldr	r1, [pc, #196]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800682a:	4313      	orrs	r3, r2
 800682c:	658b      	str	r3, [r1, #88]	; 0x58
 800682e:	e001      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006830:	7dfb      	ldrb	r3, [r7, #23]
 8006832:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d02d      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006844:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006848:	d005      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800684a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800684e:	d009      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006850:	2b00      	cmp	r3, #0
 8006852:	d013      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006854:	e00f      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006856:	4b26      	ldr	r3, [pc, #152]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685a:	4a25      	ldr	r2, [pc, #148]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800685c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006860:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006862:	e00c      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	3304      	adds	r3, #4
 8006868:	2101      	movs	r1, #1
 800686a:	4618      	mov	r0, r3
 800686c:	f001 faae 	bl	8007dcc <RCCEx_PLL2_Config>
 8006870:	4603      	mov	r3, r0
 8006872:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006874:	e003      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	75fb      	strb	r3, [r7, #23]
      break;
 800687a:	e000      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800687c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d109      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006884:	4b1a      	ldr	r3, [pc, #104]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006888:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006890:	4917      	ldr	r1, [pc, #92]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006892:	4313      	orrs	r3, r2
 8006894:	650b      	str	r3, [r1, #80]	; 0x50
 8006896:	e001      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006898:	7dfb      	ldrb	r3, [r7, #23]
 800689a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d035      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d81b      	bhi.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80068b0:	a201      	add	r2, pc, #4	; (adr r2, 80068b8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80068b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b6:	bf00      	nop
 80068b8:	080068f5 	.word	0x080068f5
 80068bc:	080068c9 	.word	0x080068c9
 80068c0:	080068d7 	.word	0x080068d7
 80068c4:	080068f5 	.word	0x080068f5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068c8:	4b09      	ldr	r3, [pc, #36]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	4a08      	ldr	r2, [pc, #32]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80068ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068d4:	e00f      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	3304      	adds	r3, #4
 80068da:	2102      	movs	r1, #2
 80068dc:	4618      	mov	r0, r3
 80068de:	f001 fa75 	bl	8007dcc <RCCEx_PLL2_Config>
 80068e2:	4603      	mov	r3, r0
 80068e4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068e6:	e006      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	75fb      	strb	r3, [r7, #23]
      break;
 80068ec:	e003      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80068ee:	bf00      	nop
 80068f0:	58024400 	.word	0x58024400
      break;
 80068f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068f6:	7dfb      	ldrb	r3, [r7, #23]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d109      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068fc:	4bba      	ldr	r3, [pc, #744]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006900:	f023 0203 	bic.w	r2, r3, #3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006908:	49b7      	ldr	r1, [pc, #732]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800690a:	4313      	orrs	r3, r2
 800690c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800690e:	e001      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006910:	7dfb      	ldrb	r3, [r7, #23]
 8006912:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 8086 	beq.w	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006922:	4bb2      	ldr	r3, [pc, #712]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4ab1      	ldr	r2, [pc, #708]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800692c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800692e:	f7fb faf1 	bl	8001f14 <HAL_GetTick>
 8006932:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006934:	e009      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006936:	f7fb faed 	bl	8001f14 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b64      	cmp	r3, #100	; 0x64
 8006942:	d902      	bls.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	75fb      	strb	r3, [r7, #23]
        break;
 8006948:	e005      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800694a:	4ba8      	ldr	r3, [pc, #672]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006952:	2b00      	cmp	r3, #0
 8006954:	d0ef      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8006956:	7dfb      	ldrb	r3, [r7, #23]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d166      	bne.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800695c:	4ba2      	ldr	r3, [pc, #648]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800695e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006966:	4053      	eors	r3, r2
 8006968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800696c:	2b00      	cmp	r3, #0
 800696e:	d013      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006970:	4b9d      	ldr	r3, [pc, #628]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006978:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800697a:	4b9b      	ldr	r3, [pc, #620]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800697c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697e:	4a9a      	ldr	r2, [pc, #616]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006984:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006986:	4b98      	ldr	r3, [pc, #608]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698a:	4a97      	ldr	r2, [pc, #604]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800698c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006990:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006992:	4a95      	ldr	r2, [pc, #596]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800699e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069a2:	d115      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a4:	f7fb fab6 	bl	8001f14 <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069aa:	e00b      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ac:	f7fb fab2 	bl	8001f14 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d902      	bls.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	75fb      	strb	r3, [r7, #23]
            break;
 80069c2:	e005      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069c4:	4b88      	ldr	r3, [pc, #544]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d0ed      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80069d0:	7dfb      	ldrb	r3, [r7, #23]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d126      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069e4:	d10d      	bne.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80069e6:	4b80      	ldr	r3, [pc, #512]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069f4:	0919      	lsrs	r1, r3, #4
 80069f6:	4b7e      	ldr	r3, [pc, #504]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80069f8:	400b      	ands	r3, r1
 80069fa:	497b      	ldr	r1, [pc, #492]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	610b      	str	r3, [r1, #16]
 8006a00:	e005      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8006a02:	4b79      	ldr	r3, [pc, #484]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	4a78      	ldr	r2, [pc, #480]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006a0c:	6113      	str	r3, [r2, #16]
 8006a0e:	4b76      	ldr	r3, [pc, #472]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a1c:	4972      	ldr	r1, [pc, #456]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	670b      	str	r3, [r1, #112]	; 0x70
 8006a22:	e004      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
 8006a26:	75bb      	strb	r3, [r7, #22]
 8006a28:	e001      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
 8006a2c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d07d      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a3e:	2b28      	cmp	r3, #40	; 0x28
 8006a40:	d866      	bhi.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8006a42:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a48:	08006b17 	.word	0x08006b17
 8006a4c:	08006b11 	.word	0x08006b11
 8006a50:	08006b11 	.word	0x08006b11
 8006a54:	08006b11 	.word	0x08006b11
 8006a58:	08006b11 	.word	0x08006b11
 8006a5c:	08006b11 	.word	0x08006b11
 8006a60:	08006b11 	.word	0x08006b11
 8006a64:	08006b11 	.word	0x08006b11
 8006a68:	08006aed 	.word	0x08006aed
 8006a6c:	08006b11 	.word	0x08006b11
 8006a70:	08006b11 	.word	0x08006b11
 8006a74:	08006b11 	.word	0x08006b11
 8006a78:	08006b11 	.word	0x08006b11
 8006a7c:	08006b11 	.word	0x08006b11
 8006a80:	08006b11 	.word	0x08006b11
 8006a84:	08006b11 	.word	0x08006b11
 8006a88:	08006aff 	.word	0x08006aff
 8006a8c:	08006b11 	.word	0x08006b11
 8006a90:	08006b11 	.word	0x08006b11
 8006a94:	08006b11 	.word	0x08006b11
 8006a98:	08006b11 	.word	0x08006b11
 8006a9c:	08006b11 	.word	0x08006b11
 8006aa0:	08006b11 	.word	0x08006b11
 8006aa4:	08006b11 	.word	0x08006b11
 8006aa8:	08006b17 	.word	0x08006b17
 8006aac:	08006b11 	.word	0x08006b11
 8006ab0:	08006b11 	.word	0x08006b11
 8006ab4:	08006b11 	.word	0x08006b11
 8006ab8:	08006b11 	.word	0x08006b11
 8006abc:	08006b11 	.word	0x08006b11
 8006ac0:	08006b11 	.word	0x08006b11
 8006ac4:	08006b11 	.word	0x08006b11
 8006ac8:	08006b17 	.word	0x08006b17
 8006acc:	08006b11 	.word	0x08006b11
 8006ad0:	08006b11 	.word	0x08006b11
 8006ad4:	08006b11 	.word	0x08006b11
 8006ad8:	08006b11 	.word	0x08006b11
 8006adc:	08006b11 	.word	0x08006b11
 8006ae0:	08006b11 	.word	0x08006b11
 8006ae4:	08006b11 	.word	0x08006b11
 8006ae8:	08006b17 	.word	0x08006b17
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	3304      	adds	r3, #4
 8006af0:	2101      	movs	r1, #1
 8006af2:	4618      	mov	r0, r3
 8006af4:	f001 f96a 	bl	8007dcc <RCCEx_PLL2_Config>
 8006af8:	4603      	mov	r3, r0
 8006afa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006afc:	e00c      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	3324      	adds	r3, #36	; 0x24
 8006b02:	2101      	movs	r1, #1
 8006b04:	4618      	mov	r0, r3
 8006b06:	f001 fa13 	bl	8007f30 <RCCEx_PLL3_Config>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006b0e:	e003      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	75fb      	strb	r3, [r7, #23]
      break;
 8006b14:	e000      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b18:	7dfb      	ldrb	r3, [r7, #23]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d109      	bne.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b1e:	4b32      	ldr	r3, [pc, #200]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b2a:	492f      	ldr	r1, [pc, #188]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	654b      	str	r3, [r1, #84]	; 0x54
 8006b30:	e001      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
 8006b34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d037      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b46:	2b05      	cmp	r3, #5
 8006b48:	d820      	bhi.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006b4a:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b50:	08006b93 	.word	0x08006b93
 8006b54:	08006b69 	.word	0x08006b69
 8006b58:	08006b7b 	.word	0x08006b7b
 8006b5c:	08006b93 	.word	0x08006b93
 8006b60:	08006b93 	.word	0x08006b93
 8006b64:	08006b93 	.word	0x08006b93
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f001 f92c 	bl	8007dcc <RCCEx_PLL2_Config>
 8006b74:	4603      	mov	r3, r0
 8006b76:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b78:	e00c      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3324      	adds	r3, #36	; 0x24
 8006b7e:	2101      	movs	r1, #1
 8006b80:	4618      	mov	r0, r3
 8006b82:	f001 f9d5 	bl	8007f30 <RCCEx_PLL3_Config>
 8006b86:	4603      	mov	r3, r0
 8006b88:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b8a:	e003      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b90:	e000      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006b92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b94:	7dfb      	ldrb	r3, [r7, #23]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d109      	bne.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b9a:	4b13      	ldr	r3, [pc, #76]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9e:	f023 0207 	bic.w	r2, r3, #7
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ba6:	4910      	ldr	r1, [pc, #64]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	654b      	str	r3, [r1, #84]	; 0x54
 8006bac:	e001      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bae:	7dfb      	ldrb	r3, [r7, #23]
 8006bb0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0304 	and.w	r3, r3, #4
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d040      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc4:	2b05      	cmp	r3, #5
 8006bc6:	d827      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006bc8:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bce:	bf00      	nop
 8006bd0:	08006c1f 	.word	0x08006c1f
 8006bd4:	08006bf5 	.word	0x08006bf5
 8006bd8:	08006c07 	.word	0x08006c07
 8006bdc:	08006c1f 	.word	0x08006c1f
 8006be0:	08006c1f 	.word	0x08006c1f
 8006be4:	08006c1f 	.word	0x08006c1f
 8006be8:	58024400 	.word	0x58024400
 8006bec:	58024800 	.word	0x58024800
 8006bf0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f001 f8e6 	bl	8007dcc <RCCEx_PLL2_Config>
 8006c00:	4603      	mov	r3, r0
 8006c02:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006c04:	e00c      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	3324      	adds	r3, #36	; 0x24
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f001 f98f 	bl	8007f30 <RCCEx_PLL3_Config>
 8006c12:	4603      	mov	r3, r0
 8006c14:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006c16:	e003      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c1c:	e000      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006c1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c20:	7dfb      	ldrb	r3, [r7, #23]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10a      	bne.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c26:	4bb2      	ldr	r3, [pc, #712]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2a:	f023 0207 	bic.w	r2, r3, #7
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c34:	49ae      	ldr	r1, [pc, #696]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	658b      	str	r3, [r1, #88]	; 0x58
 8006c3a:	e001      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
 8006c3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0320 	and.w	r3, r3, #32
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d044      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c56:	d01b      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c5c:	d805      	bhi.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d022      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006c62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c66:	d00a      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006c68:	e01b      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c6e:	d01d      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c74:	d01c      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006c76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c7a:	d01b      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006c7c:	e011      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	3304      	adds	r3, #4
 8006c82:	2100      	movs	r1, #0
 8006c84:	4618      	mov	r0, r3
 8006c86:	f001 f8a1 	bl	8007dcc <RCCEx_PLL2_Config>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c8e:	e012      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3324      	adds	r3, #36	; 0x24
 8006c94:	2102      	movs	r1, #2
 8006c96:	4618      	mov	r0, r3
 8006c98:	f001 f94a 	bl	8007f30 <RCCEx_PLL3_Config>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006ca0:	e009      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca6:	e006      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006ca8:	bf00      	nop
 8006caa:	e004      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006cac:	bf00      	nop
 8006cae:	e002      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006cb0:	bf00      	nop
 8006cb2:	e000      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10a      	bne.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cbc:	4b8c      	ldr	r3, [pc, #560]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cca:	4989      	ldr	r1, [pc, #548]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	654b      	str	r3, [r1, #84]	; 0x54
 8006cd0:	e001      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d044      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cec:	d01b      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cf2:	d805      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d022      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cfc:	d00a      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006cfe:	e01b      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d04:	d01d      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006d06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d0a:	d01c      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006d0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d10:	d01b      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006d12:	e011      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3304      	adds	r3, #4
 8006d18:	2100      	movs	r1, #0
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f001 f856 	bl	8007dcc <RCCEx_PLL2_Config>
 8006d20:	4603      	mov	r3, r0
 8006d22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d24:	e012      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	3324      	adds	r3, #36	; 0x24
 8006d2a:	2102      	movs	r1, #2
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f001 f8ff 	bl	8007f30 <RCCEx_PLL3_Config>
 8006d32:	4603      	mov	r3, r0
 8006d34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d36:	e009      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d3c:	e006      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006d3e:	bf00      	nop
 8006d40:	e004      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006d42:	bf00      	nop
 8006d44:	e002      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006d46:	bf00      	nop
 8006d48:	e000      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006d4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10a      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d52:	4b67      	ldr	r3, [pc, #412]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d56:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d60:	4963      	ldr	r1, [pc, #396]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	658b      	str	r3, [r1, #88]	; 0x58
 8006d66:	e001      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d68:	7dfb      	ldrb	r3, [r7, #23]
 8006d6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d044      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d82:	d01b      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d88:	d805      	bhi.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d022      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d92:	d00a      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006d94:	e01b      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d9a:	d01d      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006d9c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006da0:	d01c      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006da2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006da6:	d01b      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006da8:	e011      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	3304      	adds	r3, #4
 8006dae:	2100      	movs	r1, #0
 8006db0:	4618      	mov	r0, r3
 8006db2:	f001 f80b 	bl	8007dcc <RCCEx_PLL2_Config>
 8006db6:	4603      	mov	r3, r0
 8006db8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006dba:	e012      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3324      	adds	r3, #36	; 0x24
 8006dc0:	2102      	movs	r1, #2
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f001 f8b4 	bl	8007f30 <RCCEx_PLL3_Config>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006dcc:	e009      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8006dd2:	e006      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006dd4:	bf00      	nop
 8006dd6:	e004      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006dd8:	bf00      	nop
 8006dda:	e002      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006ddc:	bf00      	nop
 8006dde:	e000      	b.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006de0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006de2:	7dfb      	ldrb	r3, [r7, #23]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006de8:	4b41      	ldr	r3, [pc, #260]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006df6:	493e      	ldr	r1, [pc, #248]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	658b      	str	r3, [r1, #88]	; 0x58
 8006dfc:	e001      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfe:	7dfb      	ldrb	r3, [r7, #23]
 8006e00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0308 	and.w	r3, r3, #8
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d01a      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e18:	d10a      	bne.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3324      	adds	r3, #36	; 0x24
 8006e1e:	2102      	movs	r1, #2
 8006e20:	4618      	mov	r0, r3
 8006e22:	f001 f885 	bl	8007f30 <RCCEx_PLL3_Config>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e30:	4b2f      	ldr	r3, [pc, #188]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e3e:	492c      	ldr	r1, [pc, #176]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0310 	and.w	r3, r3, #16
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d01a      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e5a:	d10a      	bne.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	3324      	adds	r3, #36	; 0x24
 8006e60:	2102      	movs	r1, #2
 8006e62:	4618      	mov	r0, r3
 8006e64:	f001 f864 	bl	8007f30 <RCCEx_PLL3_Config>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e72:	4b1f      	ldr	r3, [pc, #124]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e80:	491b      	ldr	r1, [pc, #108]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d032      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e9c:	d00d      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006e9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ea2:	d016      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d111      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	2100      	movs	r1, #0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 ff8c 	bl	8007dcc <RCCEx_PLL2_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006eb8:	e00c      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	3324      	adds	r3, #36	; 0x24
 8006ebe:	2102      	movs	r1, #2
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f001 f835 	bl	8007f30 <RCCEx_PLL3_Config>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006eca:	e003      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed0:	e000      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10c      	bne.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006eda:	4b05      	ldr	r3, [pc, #20]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ede:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ee8:	4901      	ldr	r1, [pc, #4]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	658b      	str	r3, [r1, #88]	; 0x58
 8006eee:	e003      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006ef0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
 8006ef6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d02f      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f0e:	d00c      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006f10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f14:	d015      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f1a:	d10f      	bne.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f1c:	4b71      	ldr	r3, [pc, #452]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	4a70      	ldr	r2, [pc, #448]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f28:	e00c      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3324      	adds	r3, #36	; 0x24
 8006f2e:	2101      	movs	r1, #1
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 fffd 	bl	8007f30 <RCCEx_PLL3_Config>
 8006f36:	4603      	mov	r3, r0
 8006f38:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f3a:	e003      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f40:	e000      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f44:	7dfb      	ldrb	r3, [r7, #23]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10a      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f4a:	4b66      	ldr	r3, [pc, #408]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f58:	4962      	ldr	r1, [pc, #392]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	654b      	str	r3, [r1, #84]	; 0x54
 8006f5e:	e001      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
 8006f62:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d029      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f7c:	d007      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006f7e:	e00f      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f80:	4b58      	ldr	r3, [pc, #352]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	4a57      	ldr	r2, [pc, #348]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006f86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f8c:	e00b      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	3304      	adds	r3, #4
 8006f92:	2102      	movs	r1, #2
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 ff19 	bl	8007dcc <RCCEx_PLL2_Config>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f9e:	e002      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d109      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006fac:	4b4d      	ldr	r3, [pc, #308]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb8:	494a      	ldr	r1, [pc, #296]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006fbe:	e001      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
 8006fc2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00a      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	3324      	adds	r3, #36	; 0x24
 8006fd4:	2102      	movs	r1, #2
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 ffaa 	bl	8007f30 <RCCEx_PLL3_Config>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d02f      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ffa:	d00c      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007000:	d802      	bhi.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007002:	2b00      	cmp	r3, #0
 8007004:	d011      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007006:	e00d      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800700c:	d00f      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800700e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007012:	d00e      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007014:	e006      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007016:	4b33      	ldr	r3, [pc, #204]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	4a32      	ldr	r2, [pc, #200]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800701c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007020:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007022:	e007      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	75fb      	strb	r3, [r7, #23]
      break;
 8007028:	e004      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800702a:	bf00      	nop
 800702c:	e002      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800702e:	bf00      	nop
 8007030:	e000      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007034:	7dfb      	ldrb	r3, [r7, #23]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d109      	bne.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800703a:	4b2a      	ldr	r3, [pc, #168]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800703c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007046:	4927      	ldr	r1, [pc, #156]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007048:	4313      	orrs	r3, r2
 800704a:	654b      	str	r3, [r1, #84]	; 0x54
 800704c:	e001      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800704e:	7dfb      	ldrb	r3, [r7, #23]
 8007050:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d008      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800705e:	4b21      	ldr	r3, [pc, #132]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007062:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706a:	491e      	ldr	r1, [pc, #120]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800706c:	4313      	orrs	r3, r2
 800706e:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d008      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800707c:	4b19      	ldr	r3, [pc, #100]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800707e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007080:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007088:	4916      	ldr	r1, [pc, #88]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800708a:	4313      	orrs	r3, r2
 800708c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00d      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800709a:	4b12      	ldr	r3, [pc, #72]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	4a11      	ldr	r2, [pc, #68]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80070a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070a4:	6113      	str	r3, [r2, #16]
 80070a6:	4b0f      	ldr	r3, [pc, #60]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80070a8:	691a      	ldr	r2, [r3, #16]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80070b0:	490c      	ldr	r1, [pc, #48]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	da08      	bge.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80070be:	4b09      	ldr	r3, [pc, #36]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80070c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ca:	4906      	ldr	r1, [pc, #24]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80070d0:	7dbb      	ldrb	r3, [r7, #22]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	e000      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	58024400 	.word	0x58024400

080070e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b090      	sub	sp, #64	; 0x40
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f6:	d150      	bne.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80070f8:	4ba1      	ldr	r3, [pc, #644]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070fc:	f003 0307 	and.w	r3, r3, #7
 8007100:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007104:	2b04      	cmp	r3, #4
 8007106:	d844      	bhi.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007108:	a201      	add	r2, pc, #4	; (adr r2, 8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800710a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710e:	bf00      	nop
 8007110:	08007125 	.word	0x08007125
 8007114:	08007135 	.word	0x08007135
 8007118:	08007145 	.word	0x08007145
 800711c:	0800718d 	.word	0x0800718d
 8007120:	08007155 	.word	0x08007155
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007128:	4618      	mov	r0, r3
 800712a:	f000 fd03 	bl	8007b34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007130:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007132:	e241      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007134:	f107 0318 	add.w	r3, r7, #24
 8007138:	4618      	mov	r0, r3
 800713a:	f000 fa63 	bl	8007604 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007142:	e239      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007144:	f107 030c 	add.w	r3, r7, #12
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fba7 	bl	800789c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007152:	e231      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007154:	4b8a      	ldr	r3, [pc, #552]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007158:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800715c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800715e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007160:	2b00      	cmp	r3, #0
 8007162:	d102      	bne.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007164:	4b87      	ldr	r3, [pc, #540]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007166:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007168:	e226      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800716a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007170:	d102      	bne.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007172:	4b85      	ldr	r3, [pc, #532]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007174:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007176:	e21f      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800717a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800717e:	d102      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007180:	4b82      	ldr	r3, [pc, #520]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007182:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007184:	e218      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007186:	2300      	movs	r3, #0
 8007188:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800718a:	e215      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800718c:	4b80      	ldr	r3, [pc, #512]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800718e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007190:	e212      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007192:	2300      	movs	r3, #0
 8007194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007196:	bf00      	nop
 8007198:	e20e      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a0:	d14f      	bne.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80071a2:	4b77      	ldr	r3, [pc, #476]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80071a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80071aa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80071ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ae:	2b80      	cmp	r3, #128	; 0x80
 80071b0:	d01c      	beq.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80071b2:	2b80      	cmp	r3, #128	; 0x80
 80071b4:	d804      	bhi.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d008      	beq.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80071ba:	2b40      	cmp	r3, #64	; 0x40
 80071bc:	d00e      	beq.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80071be:	e03c      	b.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80071c0:	2bc0      	cmp	r3, #192	; 0xc0
 80071c2:	d037      	beq.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80071c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071c8:	d018      	beq.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80071ca:	e036      	b.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 fcaf 	bl	8007b34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071da:	e1ed      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071dc:	f107 0318 	add.w	r3, r7, #24
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 fa0f 	bl	8007604 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ea:	e1e5      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071ec:	f107 030c 	add.w	r3, r7, #12
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 fb53 	bl	800789c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071fa:	e1dd      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80071fc:	4b60      	ldr	r3, [pc, #384]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80071fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007200:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007204:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007208:	2b00      	cmp	r3, #0
 800720a:	d102      	bne.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800720c:	4b5d      	ldr	r3, [pc, #372]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800720e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007210:	e1d2      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007214:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007218:	d102      	bne.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800721a:	4b5b      	ldr	r3, [pc, #364]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800721c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800721e:	e1cb      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007222:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007226:	d102      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007228:	4b58      	ldr	r3, [pc, #352]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800722a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800722c:	e1c4      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007232:	e1c1      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007234:	4b56      	ldr	r3, [pc, #344]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007236:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007238:	e1be      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800723a:	2300      	movs	r3, #0
 800723c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800723e:	bf00      	nop
 8007240:	e1ba      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007248:	d153      	bne.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800724a:	4b4d      	ldr	r3, [pc, #308]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800724c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800724e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007252:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800725a:	d01f      	beq.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800725c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007260:	d805      	bhi.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007266:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800726a:	d00f      	beq.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800726c:	e03d      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800726e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007272:	d037      	beq.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007274:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007278:	d018      	beq.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800727a:	e036      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800727c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fc57 	bl	8007b34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800728a:	e195      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800728c:	f107 0318 	add.w	r3, r7, #24
 8007290:	4618      	mov	r0, r3
 8007292:	f000 f9b7 	bl	8007604 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800729a:	e18d      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800729c:	f107 030c 	add.w	r3, r7, #12
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 fafb 	bl	800789c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072aa:	e185      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80072ac:	4b34      	ldr	r3, [pc, #208]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80072ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072b4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80072b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d102      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80072bc:	4b31      	ldr	r3, [pc, #196]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80072be:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80072c0:	e17a      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80072c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072c8:	d102      	bne.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80072ca:	4b2f      	ldr	r3, [pc, #188]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80072cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ce:	e173      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80072d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072d6:	d102      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80072d8:	4b2c      	ldr	r3, [pc, #176]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80072da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072dc:	e16c      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80072de:	2300      	movs	r3, #0
 80072e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072e2:	e169      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80072e4:	4b2a      	ldr	r3, [pc, #168]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80072e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072e8:	e166      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80072ea:	2300      	movs	r3, #0
 80072ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ee:	bf00      	nop
 80072f0:	e162      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072f8:	d15d      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80072fa:	4b21      	ldr	r3, [pc, #132]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80072fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072fe:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007302:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007306:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800730a:	d01f      	beq.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800730c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007310:	d805      	bhi.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007316:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800731a:	d00f      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800731c:	e047      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800731e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007322:	d041      	beq.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007324:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007328:	d018      	beq.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800732a:	e040      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800732c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007330:	4618      	mov	r0, r3
 8007332:	f000 fbff 	bl	8007b34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007338:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800733a:	e13d      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800733c:	f107 0318 	add.w	r3, r7, #24
 8007340:	4618      	mov	r0, r3
 8007342:	f000 f95f 	bl	8007604 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800734a:	e135      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800734c:	f107 030c 	add.w	r3, r7, #12
 8007350:	4618      	mov	r0, r3
 8007352:	f000 faa3 	bl	800789c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800735a:	e12d      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800735c:	4b08      	ldr	r3, [pc, #32]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800735e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007360:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007364:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007368:	2b00      	cmp	r3, #0
 800736a:	d102      	bne.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800736c:	4b05      	ldr	r3, [pc, #20]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800736e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007370:	e122      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007374:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007378:	d10c      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800737a:	4b03      	ldr	r3, [pc, #12]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800737c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800737e:	e11b      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007380:	58024400 	.word	0x58024400
 8007384:	03d09000 	.word	0x03d09000
 8007388:	003d0900 	.word	0x003d0900
 800738c:	017d7840 	.word	0x017d7840
 8007390:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800739a:	d102      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800739c:	4b89      	ldr	r3, [pc, #548]	; (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800739e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073a0:	e10a      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073a6:	e107      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80073a8:	4b87      	ldr	r3, [pc, #540]	; (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80073aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073ac:	e104      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073b2:	bf00      	nop
 80073b4:	e100      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073bc:	d153      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80073be:	4b83      	ldr	r3, [pc, #524]	; (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80073c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073c2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80073c6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80073c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ce:	d01f      	beq.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80073d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073d4:	d805      	bhi.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80073da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073de:	d00f      	beq.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80073e0:	e03d      	b.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80073e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073e6:	d037      	beq.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80073e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073ec:	d018      	beq.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80073ee:	e036      	b.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073f4:	4618      	mov	r0, r3
 80073f6:	f000 fb9d 	bl	8007b34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073fe:	e0db      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007400:	f107 0318 	add.w	r3, r7, #24
 8007404:	4618      	mov	r0, r3
 8007406:	f000 f8fd 	bl	8007604 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800740e:	e0d3      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007410:	f107 030c 	add.w	r3, r7, #12
 8007414:	4618      	mov	r0, r3
 8007416:	f000 fa41 	bl	800789c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800741e:	e0cb      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007420:	4b6a      	ldr	r3, [pc, #424]	; (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007424:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007428:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800742a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742c:	2b00      	cmp	r3, #0
 800742e:	d102      	bne.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007430:	4b67      	ldr	r3, [pc, #412]	; (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007432:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007434:	e0c0      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007438:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800743c:	d102      	bne.n	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800743e:	4b65      	ldr	r3, [pc, #404]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007440:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007442:	e0b9      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800744a:	d102      	bne.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800744c:	4b5d      	ldr	r3, [pc, #372]	; (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800744e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007450:	e0b2      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007452:	2300      	movs	r3, #0
 8007454:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007456:	e0af      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007458:	4b5b      	ldr	r3, [pc, #364]	; (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800745a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800745c:	e0ac      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800745e:	2300      	movs	r3, #0
 8007460:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007462:	bf00      	nop
 8007464:	e0a8      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800746c:	d13d      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800746e:	4b57      	ldr	r3, [pc, #348]	; (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007472:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007476:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800747e:	d00c      	beq.n	800749a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007480:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007484:	d011      	beq.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007486:	2b00      	cmp	r3, #0
 8007488:	d12b      	bne.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800748a:	f107 0318 	add.w	r3, r7, #24
 800748e:	4618      	mov	r0, r3
 8007490:	f000 f8b8 	bl	8007604 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007498:	e08e      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800749a:	f107 030c 	add.w	r3, r7, #12
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 f9fc 	bl	800789c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074a8:	e086      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80074aa:	4b48      	ldr	r3, [pc, #288]	; (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80074ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074b2:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80074b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d102      	bne.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80074ba:	4b45      	ldr	r3, [pc, #276]	; (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80074bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80074be:	e07b      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80074c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074c6:	d102      	bne.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80074c8:	4b42      	ldr	r3, [pc, #264]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80074ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074cc:	e074      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80074ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074d4:	d102      	bne.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80074d6:	4b3b      	ldr	r3, [pc, #236]	; (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80074d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074da:	e06d      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80074dc:	2300      	movs	r3, #0
 80074de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074e0:	e06a      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80074e2:	2300      	movs	r3, #0
 80074e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074e6:	bf00      	nop
 80074e8:	e066      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074f0:	d11f      	bne.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80074f2:	4b36      	ldr	r3, [pc, #216]	; (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80074f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074fa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80074fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007506:	d008      	beq.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007508:	e00f      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800750a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800750e:	4618      	mov	r0, r3
 8007510:	f000 fb10 	bl	8007b34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007518:	e04e      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800751a:	f107 0318 	add.w	r3, r7, #24
 800751e:	4618      	mov	r0, r3
 8007520:	f000 f870 	bl	8007604 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007528:	e046      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800752a:	2300      	movs	r3, #0
 800752c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800752e:	bf00      	nop
 8007530:	e042      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007538:	d13c      	bne.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800753a:	4b24      	ldr	r3, [pc, #144]	; (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800753c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800753e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007542:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800754a:	d01e      	beq.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800754c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007550:	d805      	bhi.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00d      	beq.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007556:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800755a:	d00e      	beq.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800755c:	e026      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800755e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007562:	d01d      	beq.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007564:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007568:	d01d      	beq.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800756a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800756e:	d014      	beq.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007570:	e01c      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007572:	f000 f831 	bl	80075d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007576:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007578:	e01e      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800757a:	f107 0318 	add.w	r3, r7, #24
 800757e:	4618      	mov	r0, r3
 8007580:	f000 f840 	bl	8007604 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007588:	e016      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800758a:	f107 030c 	add.w	r3, r7, #12
 800758e:	4618      	mov	r0, r3
 8007590:	f000 f984 	bl	800789c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007598:	e00e      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800759a:	4b0d      	ldr	r3, [pc, #52]	; (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800759c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800759e:	e00b      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80075a0:	4b0c      	ldr	r3, [pc, #48]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80075a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075a4:	e008      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80075a6:	4b07      	ldr	r3, [pc, #28]	; (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80075a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075aa:	e005      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075b0:	bf00      	nop
 80075b2:	e001      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80075b4:	2300      	movs	r3, #0
 80075b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80075b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3740      	adds	r7, #64	; 0x40
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	017d7840 	.word	0x017d7840
 80075c8:	00bb8000 	.word	0x00bb8000
 80075cc:	58024400 	.word	0x58024400
 80075d0:	03d09000 	.word	0x03d09000
 80075d4:	003d0900 	.word	0x003d0900

080075d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80075dc:	f7fe fe4a 	bl	8006274 <HAL_RCC_GetHCLKFreq>
 80075e0:	4601      	mov	r1, r0
 80075e2:	4b06      	ldr	r3, [pc, #24]	; (80075fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	091b      	lsrs	r3, r3, #4
 80075e8:	f003 0307 	and.w	r3, r3, #7
 80075ec:	4a04      	ldr	r2, [pc, #16]	; (8007600 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80075ee:	5cd3      	ldrb	r3, [r2, r3]
 80075f0:	f003 031f 	and.w	r3, r3, #31
 80075f4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	58024400 	.word	0x58024400
 8007600:	0800be9c 	.word	0x0800be9c

08007604 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007604:	b480      	push	{r7}
 8007606:	b089      	sub	sp, #36	; 0x24
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800760c:	4b9d      	ldr	r3, [pc, #628]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800760e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007610:	f003 0303 	and.w	r3, r3, #3
 8007614:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007616:	4b9b      	ldr	r3, [pc, #620]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761a:	0b1b      	lsrs	r3, r3, #12
 800761c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007620:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007622:	4b98      	ldr	r3, [pc, #608]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007626:	091b      	lsrs	r3, r3, #4
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800762e:	4b95      	ldr	r3, [pc, #596]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007632:	08db      	lsrs	r3, r3, #3
 8007634:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	fb02 f303 	mul.w	r3, r2, r3
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007646:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 810a 	beq.w	8007866 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d05a      	beq.n	800770e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007658:	2b01      	cmp	r3, #1
 800765a:	d302      	bcc.n	8007662 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800765c:	2b02      	cmp	r3, #2
 800765e:	d078      	beq.n	8007752 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007660:	e099      	b.n	8007796 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007662:	4b88      	ldr	r3, [pc, #544]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0320 	and.w	r3, r3, #32
 800766a:	2b00      	cmp	r3, #0
 800766c:	d02d      	beq.n	80076ca <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800766e:	4b85      	ldr	r3, [pc, #532]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	08db      	lsrs	r3, r3, #3
 8007674:	f003 0303 	and.w	r3, r3, #3
 8007678:	4a83      	ldr	r2, [pc, #524]	; (8007888 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800767a:	fa22 f303 	lsr.w	r3, r2, r3
 800767e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	ee07 3a90 	vmov	s15, r3
 8007686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	ee07 3a90 	vmov	s15, r3
 8007690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007698:	4b7a      	ldr	r3, [pc, #488]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800769a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a0:	ee07 3a90 	vmov	s15, r3
 80076a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ac:	eddf 5a77 	vldr	s11, [pc, #476]	; 800788c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80076b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80076c8:	e087      	b.n	80077da <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	ee07 3a90 	vmov	s15, r3
 80076d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007890 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80076d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076dc:	4b69      	ldr	r3, [pc, #420]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80076de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e4:	ee07 3a90 	vmov	s15, r3
 80076e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80076f0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800788c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80076f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007708:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800770c:	e065      	b.n	80077da <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	ee07 3a90 	vmov	s15, r3
 8007714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007718:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007894 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800771c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007720:	4b58      	ldr	r3, [pc, #352]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007728:	ee07 3a90 	vmov	s15, r3
 800772c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007730:	ed97 6a03 	vldr	s12, [r7, #12]
 8007734:	eddf 5a55 	vldr	s11, [pc, #340]	; 800788c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007738:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800773c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007740:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007744:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800774c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007750:	e043      	b.n	80077da <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	ee07 3a90 	vmov	s15, r3
 8007758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007898 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007764:	4b47      	ldr	r3, [pc, #284]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800776c:	ee07 3a90 	vmov	s15, r3
 8007770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007774:	ed97 6a03 	vldr	s12, [r7, #12]
 8007778:	eddf 5a44 	vldr	s11, [pc, #272]	; 800788c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800777c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007780:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007784:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007788:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800778c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007790:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007794:	e021      	b.n	80077da <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	ee07 3a90 	vmov	s15, r3
 800779c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007894 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80077a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077a8:	4b36      	ldr	r3, [pc, #216]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077b0:	ee07 3a90 	vmov	s15, r3
 80077b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80077bc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800788c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80077c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077d8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80077da:	4b2a      	ldr	r3, [pc, #168]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077de:	0a5b      	lsrs	r3, r3, #9
 80077e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077e4:	ee07 3a90 	vmov	s15, r3
 80077e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80077f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007800:	ee17 2a90 	vmov	r2, s15
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007808:	4b1e      	ldr	r3, [pc, #120]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800780a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780c:	0c1b      	lsrs	r3, r3, #16
 800780e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800781e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007822:	edd7 6a07 	vldr	s13, [r7, #28]
 8007826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800782a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800782e:	ee17 2a90 	vmov	r2, s15
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007836:	4b13      	ldr	r3, [pc, #76]	; (8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	0e1b      	lsrs	r3, r3, #24
 800783c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007840:	ee07 3a90 	vmov	s15, r3
 8007844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007848:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800784c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007850:	edd7 6a07 	vldr	s13, [r7, #28]
 8007854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800785c:	ee17 2a90 	vmov	r2, s15
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007864:	e008      	b.n	8007878 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	609a      	str	r2, [r3, #8]
}
 8007878:	bf00      	nop
 800787a:	3724      	adds	r7, #36	; 0x24
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	58024400 	.word	0x58024400
 8007888:	03d09000 	.word	0x03d09000
 800788c:	46000000 	.word	0x46000000
 8007890:	4c742400 	.word	0x4c742400
 8007894:	4a742400 	.word	0x4a742400
 8007898:	4bbebc20 	.word	0x4bbebc20

0800789c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800789c:	b480      	push	{r7}
 800789e:	b089      	sub	sp, #36	; 0x24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078a4:	4b9d      	ldr	r3, [pc, #628]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a8:	f003 0303 	and.w	r3, r3, #3
 80078ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80078ae:	4b9b      	ldr	r3, [pc, #620]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b2:	0d1b      	lsrs	r3, r3, #20
 80078b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80078ba:	4b98      	ldr	r3, [pc, #608]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078be:	0a1b      	lsrs	r3, r3, #8
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80078c6:	4b95      	ldr	r3, [pc, #596]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ca:	08db      	lsrs	r3, r3, #3
 80078cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	fb02 f303 	mul.w	r3, r2, r3
 80078d6:	ee07 3a90 	vmov	s15, r3
 80078da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 810a 	beq.w	8007afe <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d05a      	beq.n	80079a6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d302      	bcc.n	80078fa <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d078      	beq.n	80079ea <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80078f8:	e099      	b.n	8007a2e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078fa:	4b88      	ldr	r3, [pc, #544]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0320 	and.w	r3, r3, #32
 8007902:	2b00      	cmp	r3, #0
 8007904:	d02d      	beq.n	8007962 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007906:	4b85      	ldr	r3, [pc, #532]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	08db      	lsrs	r3, r3, #3
 800790c:	f003 0303 	and.w	r3, r3, #3
 8007910:	4a83      	ldr	r2, [pc, #524]	; (8007b20 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007912:	fa22 f303 	lsr.w	r3, r2, r3
 8007916:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	ee07 3a90 	vmov	s15, r3
 800791e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	ee07 3a90 	vmov	s15, r3
 8007928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007930:	4b7a      	ldr	r3, [pc, #488]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007938:	ee07 3a90 	vmov	s15, r3
 800793c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007940:	ed97 6a03 	vldr	s12, [r7, #12]
 8007944:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007b24 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007948:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800794c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007950:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007960:	e087      	b.n	8007a72 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	ee07 3a90 	vmov	s15, r3
 8007968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007b28 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007970:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007974:	4b69      	ldr	r3, [pc, #420]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797c:	ee07 3a90 	vmov	s15, r3
 8007980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007984:	ed97 6a03 	vldr	s12, [r7, #12]
 8007988:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007b24 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800798c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007990:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007994:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007998:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800799c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079a4:	e065      	b.n	8007a72 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	ee07 3a90 	vmov	s15, r3
 80079ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80079b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079b8:	4b58      	ldr	r3, [pc, #352]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c0:	ee07 3a90 	vmov	s15, r3
 80079c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80079cc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007b24 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80079d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079e8:	e043      	b.n	8007a72 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	ee07 3a90 	vmov	s15, r3
 80079f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007b30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80079f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079fc:	4b47      	ldr	r3, [pc, #284]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a04:	ee07 3a90 	vmov	s15, r3
 8007a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a10:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007b24 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007a14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a2c:	e021      	b.n	8007a72 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	ee07 3a90 	vmov	s15, r3
 8007a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a38:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007b2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007a3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a40:	4b36      	ldr	r3, [pc, #216]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a48:	ee07 3a90 	vmov	s15, r3
 8007a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a50:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a54:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007b24 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007a58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a70:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007a72:	4b2a      	ldr	r3, [pc, #168]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a76:	0a5b      	lsrs	r3, r3, #9
 8007a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a7c:	ee07 3a90 	vmov	s15, r3
 8007a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a98:	ee17 2a90 	vmov	r2, s15
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007aa0:	4b1e      	ldr	r3, [pc, #120]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa4:	0c1b      	lsrs	r3, r3, #16
 8007aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aaa:	ee07 3a90 	vmov	s15, r3
 8007aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ab6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aba:	edd7 6a07 	vldr	s13, [r7, #28]
 8007abe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ac6:	ee17 2a90 	vmov	r2, s15
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007ace:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad2:	0e1b      	lsrs	r3, r3, #24
 8007ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ad8:	ee07 3a90 	vmov	s15, r3
 8007adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ae4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ae8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007af4:	ee17 2a90 	vmov	r2, s15
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007afc:	e008      	b.n	8007b10 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	609a      	str	r2, [r3, #8]
}
 8007b10:	bf00      	nop
 8007b12:	3724      	adds	r7, #36	; 0x24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr
 8007b1c:	58024400 	.word	0x58024400
 8007b20:	03d09000 	.word	0x03d09000
 8007b24:	46000000 	.word	0x46000000
 8007b28:	4c742400 	.word	0x4c742400
 8007b2c:	4a742400 	.word	0x4a742400
 8007b30:	4bbebc20 	.word	0x4bbebc20

08007b34 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b089      	sub	sp, #36	; 0x24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b3c:	4b9d      	ldr	r3, [pc, #628]	; (8007db4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b40:	f003 0303 	and.w	r3, r3, #3
 8007b44:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007b46:	4b9b      	ldr	r3, [pc, #620]	; (8007db4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4a:	091b      	lsrs	r3, r3, #4
 8007b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b50:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007b52:	4b98      	ldr	r3, [pc, #608]	; (8007db4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007b5c:	4b95      	ldr	r3, [pc, #596]	; (8007db4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b60:	08db      	lsrs	r3, r3, #3
 8007b62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	fb02 f303 	mul.w	r3, r2, r3
 8007b6c:	ee07 3a90 	vmov	s15, r3
 8007b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b74:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 810a 	beq.w	8007d94 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d05a      	beq.n	8007c3c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d302      	bcc.n	8007b90 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d078      	beq.n	8007c80 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007b8e:	e099      	b.n	8007cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b90:	4b88      	ldr	r3, [pc, #544]	; (8007db4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0320 	and.w	r3, r3, #32
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d02d      	beq.n	8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b9c:	4b85      	ldr	r3, [pc, #532]	; (8007db4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	08db      	lsrs	r3, r3, #3
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	4a84      	ldr	r2, [pc, #528]	; (8007db8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bac:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	ee07 3a90 	vmov	s15, r3
 8007bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	ee07 3a90 	vmov	s15, r3
 8007bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bc6:	4b7b      	ldr	r3, [pc, #492]	; (8007db4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bce:	ee07 3a90 	vmov	s15, r3
 8007bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bda:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007dbc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bf2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007bf6:	e087      	b.n	8007d08 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	ee07 3a90 	vmov	s15, r3
 8007bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c0a:	4b6a      	ldr	r3, [pc, #424]	; (8007db4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c12:	ee07 3a90 	vmov	s15, r3
 8007c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007dbc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c3a:	e065      	b.n	8007d08 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c4e:	4b59      	ldr	r3, [pc, #356]	; (8007db4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c56:	ee07 3a90 	vmov	s15, r3
 8007c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c62:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007dbc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c7e:	e043      	b.n	8007d08 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	ee07 3a90 	vmov	s15, r3
 8007c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c92:	4b48      	ldr	r3, [pc, #288]	; (8007db4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c9a:	ee07 3a90 	vmov	s15, r3
 8007c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ca6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007dbc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cc2:	e021      	b.n	8007d08 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cd6:	4b37      	ldr	r3, [pc, #220]	; (8007db4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cde:	ee07 3a90 	vmov	s15, r3
 8007ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cea:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007dbc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d06:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007d08:	4b2a      	ldr	r3, [pc, #168]	; (8007db4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0c:	0a5b      	lsrs	r3, r3, #9
 8007d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d12:	ee07 3a90 	vmov	s15, r3
 8007d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d2e:	ee17 2a90 	vmov	r2, s15
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007d36:	4b1f      	ldr	r3, [pc, #124]	; (8007db4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3a:	0c1b      	lsrs	r3, r3, #16
 8007d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d40:	ee07 3a90 	vmov	s15, r3
 8007d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d50:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d5c:	ee17 2a90 	vmov	r2, s15
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007d64:	4b13      	ldr	r3, [pc, #76]	; (8007db4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d68:	0e1b      	lsrs	r3, r3, #24
 8007d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d6e:	ee07 3a90 	vmov	s15, r3
 8007d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d8a:	ee17 2a90 	vmov	r2, s15
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007d92:	e008      	b.n	8007da6 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	609a      	str	r2, [r3, #8]
}
 8007da6:	bf00      	nop
 8007da8:	3724      	adds	r7, #36	; 0x24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	58024400 	.word	0x58024400
 8007db8:	03d09000 	.word	0x03d09000
 8007dbc:	46000000 	.word	0x46000000
 8007dc0:	4c742400 	.word	0x4c742400
 8007dc4:	4a742400 	.word	0x4a742400
 8007dc8:	4bbebc20 	.word	0x4bbebc20

08007dcc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007dda:	4b53      	ldr	r3, [pc, #332]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dde:	f003 0303 	and.w	r3, r3, #3
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d101      	bne.n	8007dea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e099      	b.n	8007f1e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007dea:	4b4f      	ldr	r3, [pc, #316]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a4e      	ldr	r2, [pc, #312]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007df0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007df4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007df6:	f7fa f88d 	bl	8001f14 <HAL_GetTick>
 8007dfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007dfc:	e008      	b.n	8007e10 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007dfe:	f7fa f889 	bl	8001f14 <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d901      	bls.n	8007e10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e086      	b.n	8007f1e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e10:	4b45      	ldr	r3, [pc, #276]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1f0      	bne.n	8007dfe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007e1c:	4b42      	ldr	r3, [pc, #264]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	031b      	lsls	r3, r3, #12
 8007e2a:	493f      	ldr	r1, [pc, #252]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	628b      	str	r3, [r1, #40]	; 0x28
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	3b01      	subs	r3, #1
 8007e36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	025b      	lsls	r3, r3, #9
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	431a      	orrs	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	041b      	lsls	r3, r3, #16
 8007e4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e52:	431a      	orrs	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	061b      	lsls	r3, r3, #24
 8007e5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e60:	4931      	ldr	r1, [pc, #196]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007e66:	4b30      	ldr	r3, [pc, #192]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	492d      	ldr	r1, [pc, #180]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007e74:	4313      	orrs	r3, r2
 8007e76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007e78:	4b2b      	ldr	r3, [pc, #172]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7c:	f023 0220 	bic.w	r2, r3, #32
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	4928      	ldr	r1, [pc, #160]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007e8a:	4b27      	ldr	r3, [pc, #156]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8e:	4a26      	ldr	r2, [pc, #152]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007e90:	f023 0310 	bic.w	r3, r3, #16
 8007e94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007e96:	4b24      	ldr	r3, [pc, #144]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007e98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e9a:	4b24      	ldr	r3, [pc, #144]	; (8007f2c <RCCEx_PLL2_Config+0x160>)
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	69d2      	ldr	r2, [r2, #28]
 8007ea2:	00d2      	lsls	r2, r2, #3
 8007ea4:	4920      	ldr	r1, [pc, #128]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007eaa:	4b1f      	ldr	r3, [pc, #124]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	4a1e      	ldr	r2, [pc, #120]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007eb0:	f043 0310 	orr.w	r3, r3, #16
 8007eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d106      	bne.n	8007eca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007ebc:	4b1a      	ldr	r3, [pc, #104]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec0:	4a19      	ldr	r2, [pc, #100]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007ec2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ec6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ec8:	e00f      	b.n	8007eea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d106      	bne.n	8007ede <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007ed0:	4b15      	ldr	r3, [pc, #84]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed4:	4a14      	ldr	r2, [pc, #80]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007eda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007edc:	e005      	b.n	8007eea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007ede:	4b12      	ldr	r3, [pc, #72]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee2:	4a11      	ldr	r2, [pc, #68]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007ee4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ee8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007eea:	4b0f      	ldr	r3, [pc, #60]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a0e      	ldr	r2, [pc, #56]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007ef0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ef6:	f7fa f80d 	bl	8001f14 <HAL_GetTick>
 8007efa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007efc:	e008      	b.n	8007f10 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007efe:	f7fa f809 	bl	8001f14 <HAL_GetTick>
 8007f02:	4602      	mov	r2, r0
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d901      	bls.n	8007f10 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e006      	b.n	8007f1e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f10:	4b05      	ldr	r3, [pc, #20]	; (8007f28 <RCCEx_PLL2_Config+0x15c>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d0f0      	beq.n	8007efe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	58024400 	.word	0x58024400
 8007f2c:	ffff0007 	.word	0xffff0007

08007f30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f3e:	4b53      	ldr	r3, [pc, #332]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8007f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f42:	f003 0303 	and.w	r3, r3, #3
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	d101      	bne.n	8007f4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e099      	b.n	8008082 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007f4e:	4b4f      	ldr	r3, [pc, #316]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a4e      	ldr	r2, [pc, #312]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8007f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f5a:	f7f9 ffdb 	bl	8001f14 <HAL_GetTick>
 8007f5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f60:	e008      	b.n	8007f74 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007f62:	f7f9 ffd7 	bl	8001f14 <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d901      	bls.n	8007f74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e086      	b.n	8008082 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f74:	4b45      	ldr	r3, [pc, #276]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1f0      	bne.n	8007f62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007f80:	4b42      	ldr	r3, [pc, #264]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8007f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f84:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	051b      	lsls	r3, r3, #20
 8007f8e:	493f      	ldr	r1, [pc, #252]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	628b      	str	r3, [r1, #40]	; 0x28
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	025b      	lsls	r3, r3, #9
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	431a      	orrs	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	041b      	lsls	r3, r3, #16
 8007fb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	061b      	lsls	r3, r3, #24
 8007fc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007fc4:	4931      	ldr	r1, [pc, #196]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007fca:	4b30      	ldr	r3, [pc, #192]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8007fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	492d      	ldr	r1, [pc, #180]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007fdc:	4b2b      	ldr	r3, [pc, #172]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8007fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	4928      	ldr	r1, [pc, #160]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007fee:	4b27      	ldr	r3, [pc, #156]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8007ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff2:	4a26      	ldr	r2, [pc, #152]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8007ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007ffa:	4b24      	ldr	r3, [pc, #144]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8007ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ffe:	4b24      	ldr	r3, [pc, #144]	; (8008090 <RCCEx_PLL3_Config+0x160>)
 8008000:	4013      	ands	r3, r2
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	69d2      	ldr	r2, [r2, #28]
 8008006:	00d2      	lsls	r2, r2, #3
 8008008:	4920      	ldr	r1, [pc, #128]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 800800a:	4313      	orrs	r3, r2
 800800c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800800e:	4b1f      	ldr	r3, [pc, #124]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8008010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008012:	4a1e      	ldr	r2, [pc, #120]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8008014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008018:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d106      	bne.n	800802e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008020:	4b1a      	ldr	r3, [pc, #104]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8008022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008024:	4a19      	ldr	r2, [pc, #100]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8008026:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800802a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800802c:	e00f      	b.n	800804e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d106      	bne.n	8008042 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008034:	4b15      	ldr	r3, [pc, #84]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8008036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008038:	4a14      	ldr	r2, [pc, #80]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 800803a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800803e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008040:	e005      	b.n	800804e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008042:	4b12      	ldr	r3, [pc, #72]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8008044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008046:	4a11      	ldr	r2, [pc, #68]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8008048:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800804c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800804e:	4b0f      	ldr	r3, [pc, #60]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a0e      	ldr	r2, [pc, #56]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8008054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800805a:	f7f9 ff5b 	bl	8001f14 <HAL_GetTick>
 800805e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008060:	e008      	b.n	8008074 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008062:	f7f9 ff57 	bl	8001f14 <HAL_GetTick>
 8008066:	4602      	mov	r2, r0
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	2b02      	cmp	r3, #2
 800806e:	d901      	bls.n	8008074 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e006      	b.n	8008082 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008074:	4b05      	ldr	r3, [pc, #20]	; (800808c <RCCEx_PLL3_Config+0x15c>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d0f0      	beq.n	8008062 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008080:	7bfb      	ldrb	r3, [r7, #15]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	58024400 	.word	0x58024400
 8008090:	ffff0007 	.word	0xffff0007

08008094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e01d      	b.n	80080e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d106      	bne.n	80080c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7f9 fc18 	bl	80018f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3304      	adds	r3, #4
 80080d0:	4619      	mov	r1, r3
 80080d2:	4610      	mov	r0, r2
 80080d4:	f000 fa4c 	bl	8008570 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
	...

080080ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f042 0201 	orr.w	r2, r2, #1
 8008102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689a      	ldr	r2, [r3, #8]
 800810a:	4b0c      	ldr	r3, [pc, #48]	; (800813c <HAL_TIM_Base_Start_IT+0x50>)
 800810c:	4013      	ands	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b06      	cmp	r3, #6
 8008114:	d00b      	beq.n	800812e <HAL_TIM_Base_Start_IT+0x42>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800811c:	d007      	beq.n	800812e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f042 0201 	orr.w	r2, r2, #1
 800812c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	00010007 	.word	0x00010007

08008140 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b02      	cmp	r3, #2
 8008154:	d122      	bne.n	800819c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f003 0302 	and.w	r3, r3, #2
 8008160:	2b02      	cmp	r3, #2
 8008162:	d11b      	bne.n	800819c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f06f 0202 	mvn.w	r2, #2
 800816c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	f003 0303 	and.w	r3, r3, #3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f9d6 	bl	8008534 <HAL_TIM_IC_CaptureCallback>
 8008188:	e005      	b.n	8008196 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f9c8 	bl	8008520 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f9d9 	bl	8008548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	f003 0304 	and.w	r3, r3, #4
 80081a6:	2b04      	cmp	r3, #4
 80081a8:	d122      	bne.n	80081f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	f003 0304 	and.w	r3, r3, #4
 80081b4:	2b04      	cmp	r3, #4
 80081b6:	d11b      	bne.n	80081f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f06f 0204 	mvn.w	r2, #4
 80081c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2202      	movs	r2, #2
 80081c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d003      	beq.n	80081de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f9ac 	bl	8008534 <HAL_TIM_IC_CaptureCallback>
 80081dc:	e005      	b.n	80081ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f99e 	bl	8008520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 f9af 	bl	8008548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	f003 0308 	and.w	r3, r3, #8
 80081fa:	2b08      	cmp	r3, #8
 80081fc:	d122      	bne.n	8008244 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f003 0308 	and.w	r3, r3, #8
 8008208:	2b08      	cmp	r3, #8
 800820a:	d11b      	bne.n	8008244 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f06f 0208 	mvn.w	r2, #8
 8008214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2204      	movs	r2, #4
 800821a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	f003 0303 	and.w	r3, r3, #3
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f982 	bl	8008534 <HAL_TIM_IC_CaptureCallback>
 8008230:	e005      	b.n	800823e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f974 	bl	8008520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 f985 	bl	8008548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	f003 0310 	and.w	r3, r3, #16
 800824e:	2b10      	cmp	r3, #16
 8008250:	d122      	bne.n	8008298 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	f003 0310 	and.w	r3, r3, #16
 800825c:	2b10      	cmp	r3, #16
 800825e:	d11b      	bne.n	8008298 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f06f 0210 	mvn.w	r2, #16
 8008268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2208      	movs	r2, #8
 800826e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800827a:	2b00      	cmp	r3, #0
 800827c:	d003      	beq.n	8008286 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f958 	bl	8008534 <HAL_TIM_IC_CaptureCallback>
 8008284:	e005      	b.n	8008292 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f94a 	bl	8008520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f95b 	bl	8008548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d10e      	bne.n	80082c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	f003 0301 	and.w	r3, r3, #1
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d107      	bne.n	80082c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f06f 0201 	mvn.w	r2, #1
 80082bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7f8 fb20 	bl	8000904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ce:	2b80      	cmp	r3, #128	; 0x80
 80082d0:	d10e      	bne.n	80082f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082dc:	2b80      	cmp	r3, #128	; 0x80
 80082de:	d107      	bne.n	80082f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fb0a 	bl	8008904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082fe:	d10e      	bne.n	800831e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800830a:	2b80      	cmp	r3, #128	; 0x80
 800830c:	d107      	bne.n	800831e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fafd 	bl	8008918 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008328:	2b40      	cmp	r3, #64	; 0x40
 800832a:	d10e      	bne.n	800834a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008336:	2b40      	cmp	r3, #64	; 0x40
 8008338:	d107      	bne.n	800834a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f909 	bl	800855c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	f003 0320 	and.w	r3, r3, #32
 8008354:	2b20      	cmp	r3, #32
 8008356:	d10e      	bne.n	8008376 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	f003 0320 	and.w	r3, r3, #32
 8008362:	2b20      	cmp	r3, #32
 8008364:	d107      	bne.n	8008376 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f06f 0220 	mvn.w	r2, #32
 800836e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fabd 	bl	80088f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008376:	bf00      	nop
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
	...

08008380 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008390:	2b01      	cmp	r3, #1
 8008392:	d101      	bne.n	8008398 <HAL_TIM_ConfigClockSource+0x18>
 8008394:	2302      	movs	r3, #2
 8008396:	e0b7      	b.n	8008508 <HAL_TIM_ConfigClockSource+0x188>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2202      	movs	r2, #2
 80083a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	4b57      	ldr	r3, [pc, #348]	; (8008510 <HAL_TIM_ConfigClockSource+0x190>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b70      	cmp	r3, #112	; 0x70
 80083ce:	d02e      	beq.n	800842e <HAL_TIM_ConfigClockSource+0xae>
 80083d0:	2b70      	cmp	r3, #112	; 0x70
 80083d2:	d812      	bhi.n	80083fa <HAL_TIM_ConfigClockSource+0x7a>
 80083d4:	2b30      	cmp	r3, #48	; 0x30
 80083d6:	f000 8084 	beq.w	80084e2 <HAL_TIM_ConfigClockSource+0x162>
 80083da:	2b30      	cmp	r3, #48	; 0x30
 80083dc:	d806      	bhi.n	80083ec <HAL_TIM_ConfigClockSource+0x6c>
 80083de:	2b10      	cmp	r3, #16
 80083e0:	d07f      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0x162>
 80083e2:	2b20      	cmp	r3, #32
 80083e4:	d07d      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0x162>
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d07b      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80083ea:	e084      	b.n	80084f6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80083ec:	2b50      	cmp	r3, #80	; 0x50
 80083ee:	d048      	beq.n	8008482 <HAL_TIM_ConfigClockSource+0x102>
 80083f0:	2b60      	cmp	r3, #96	; 0x60
 80083f2:	d056      	beq.n	80084a2 <HAL_TIM_ConfigClockSource+0x122>
 80083f4:	2b40      	cmp	r3, #64	; 0x40
 80083f6:	d064      	beq.n	80084c2 <HAL_TIM_ConfigClockSource+0x142>
      break;
 80083f8:	e07d      	b.n	80084f6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80083fa:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80083fe:	d070      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0x162>
 8008400:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008404:	d809      	bhi.n	800841a <HAL_TIM_ConfigClockSource+0x9a>
 8008406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800840a:	d027      	beq.n	800845c <HAL_TIM_ConfigClockSource+0xdc>
 800840c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008410:	d067      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0x162>
 8008412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008416:	d06d      	beq.n	80084f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008418:	e06d      	b.n	80084f6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800841a:	4a3e      	ldr	r2, [pc, #248]	; (8008514 <HAL_TIM_ConfigClockSource+0x194>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d060      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0x162>
 8008420:	4a3d      	ldr	r2, [pc, #244]	; (8008518 <HAL_TIM_ConfigClockSource+0x198>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d05d      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0x162>
 8008426:	4a3d      	ldr	r2, [pc, #244]	; (800851c <HAL_TIM_ConfigClockSource+0x19c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d05a      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0x162>
      break;
 800842c:	e063      	b.n	80084f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6818      	ldr	r0, [r3, #0]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	6899      	ldr	r1, [r3, #8]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	685a      	ldr	r2, [r3, #4]
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	f000 f9af 	bl	80087a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008450:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	609a      	str	r2, [r3, #8]
      break;
 800845a:	e04c      	b.n	80084f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	6899      	ldr	r1, [r3, #8]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	f000 f998 	bl	80087a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689a      	ldr	r2, [r3, #8]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800847e:	609a      	str	r2, [r3, #8]
      break;
 8008480:	e039      	b.n	80084f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6818      	ldr	r0, [r3, #0]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	6859      	ldr	r1, [r3, #4]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	461a      	mov	r2, r3
 8008490:	f000 f908 	bl	80086a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2150      	movs	r1, #80	; 0x50
 800849a:	4618      	mov	r0, r3
 800849c:	f000 f962 	bl	8008764 <TIM_ITRx_SetConfig>
      break;
 80084a0:	e029      	b.n	80084f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6818      	ldr	r0, [r3, #0]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	6859      	ldr	r1, [r3, #4]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	461a      	mov	r2, r3
 80084b0:	f000 f927 	bl	8008702 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2160      	movs	r1, #96	; 0x60
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 f952 	bl	8008764 <TIM_ITRx_SetConfig>
      break;
 80084c0:	e019      	b.n	80084f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6818      	ldr	r0, [r3, #0]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	6859      	ldr	r1, [r3, #4]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	461a      	mov	r2, r3
 80084d0:	f000 f8e8 	bl	80086a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2140      	movs	r1, #64	; 0x40
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 f942 	bl	8008764 <TIM_ITRx_SetConfig>
      break;
 80084e0:	e009      	b.n	80084f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4619      	mov	r1, r3
 80084ec:	4610      	mov	r0, r2
 80084ee:	f000 f939 	bl	8008764 <TIM_ITRx_SetConfig>
      break;
 80084f2:	e000      	b.n	80084f6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80084f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	ffceff88 	.word	0xffceff88
 8008514:	00100030 	.word	0x00100030
 8008518:	00100040 	.word	0x00100040
 800851c:	00100020 	.word	0x00100020

08008520 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a40      	ldr	r2, [pc, #256]	; (8008684 <TIM_Base_SetConfig+0x114>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d013      	beq.n	80085b0 <TIM_Base_SetConfig+0x40>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800858e:	d00f      	beq.n	80085b0 <TIM_Base_SetConfig+0x40>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a3d      	ldr	r2, [pc, #244]	; (8008688 <TIM_Base_SetConfig+0x118>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d00b      	beq.n	80085b0 <TIM_Base_SetConfig+0x40>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a3c      	ldr	r2, [pc, #240]	; (800868c <TIM_Base_SetConfig+0x11c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d007      	beq.n	80085b0 <TIM_Base_SetConfig+0x40>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a3b      	ldr	r2, [pc, #236]	; (8008690 <TIM_Base_SetConfig+0x120>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d003      	beq.n	80085b0 <TIM_Base_SetConfig+0x40>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a3a      	ldr	r2, [pc, #232]	; (8008694 <TIM_Base_SetConfig+0x124>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d108      	bne.n	80085c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	4313      	orrs	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a2f      	ldr	r2, [pc, #188]	; (8008684 <TIM_Base_SetConfig+0x114>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d01f      	beq.n	800860a <TIM_Base_SetConfig+0x9a>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d0:	d01b      	beq.n	800860a <TIM_Base_SetConfig+0x9a>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a2c      	ldr	r2, [pc, #176]	; (8008688 <TIM_Base_SetConfig+0x118>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d017      	beq.n	800860a <TIM_Base_SetConfig+0x9a>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a2b      	ldr	r2, [pc, #172]	; (800868c <TIM_Base_SetConfig+0x11c>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d013      	beq.n	800860a <TIM_Base_SetConfig+0x9a>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a2a      	ldr	r2, [pc, #168]	; (8008690 <TIM_Base_SetConfig+0x120>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d00f      	beq.n	800860a <TIM_Base_SetConfig+0x9a>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a29      	ldr	r2, [pc, #164]	; (8008694 <TIM_Base_SetConfig+0x124>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d00b      	beq.n	800860a <TIM_Base_SetConfig+0x9a>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a28      	ldr	r2, [pc, #160]	; (8008698 <TIM_Base_SetConfig+0x128>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d007      	beq.n	800860a <TIM_Base_SetConfig+0x9a>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a27      	ldr	r2, [pc, #156]	; (800869c <TIM_Base_SetConfig+0x12c>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d003      	beq.n	800860a <TIM_Base_SetConfig+0x9a>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a26      	ldr	r2, [pc, #152]	; (80086a0 <TIM_Base_SetConfig+0x130>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d108      	bne.n	800861c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	4313      	orrs	r3, r2
 800861a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	4313      	orrs	r3, r2
 8008628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	689a      	ldr	r2, [r3, #8]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a10      	ldr	r2, [pc, #64]	; (8008684 <TIM_Base_SetConfig+0x114>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d00f      	beq.n	8008668 <TIM_Base_SetConfig+0xf8>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a12      	ldr	r2, [pc, #72]	; (8008694 <TIM_Base_SetConfig+0x124>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d00b      	beq.n	8008668 <TIM_Base_SetConfig+0xf8>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a11      	ldr	r2, [pc, #68]	; (8008698 <TIM_Base_SetConfig+0x128>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d007      	beq.n	8008668 <TIM_Base_SetConfig+0xf8>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a10      	ldr	r2, [pc, #64]	; (800869c <TIM_Base_SetConfig+0x12c>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d003      	beq.n	8008668 <TIM_Base_SetConfig+0xf8>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a0f      	ldr	r2, [pc, #60]	; (80086a0 <TIM_Base_SetConfig+0x130>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d103      	bne.n	8008670 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	691a      	ldr	r2, [r3, #16]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	615a      	str	r2, [r3, #20]
}
 8008676:	bf00      	nop
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	40010000 	.word	0x40010000
 8008688:	40000400 	.word	0x40000400
 800868c:	40000800 	.word	0x40000800
 8008690:	40000c00 	.word	0x40000c00
 8008694:	40010400 	.word	0x40010400
 8008698:	40014000 	.word	0x40014000
 800869c:	40014400 	.word	0x40014400
 80086a0:	40014800 	.word	0x40014800

080086a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6a1b      	ldr	r3, [r3, #32]
 80086ba:	f023 0201 	bic.w	r2, r3, #1
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	011b      	lsls	r3, r3, #4
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f023 030a 	bic.w	r3, r3, #10
 80086e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	621a      	str	r2, [r3, #32]
}
 80086f6:	bf00      	nop
 80086f8:	371c      	adds	r7, #28
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008702:	b480      	push	{r7}
 8008704:	b087      	sub	sp, #28
 8008706:	af00      	add	r7, sp, #0
 8008708:	60f8      	str	r0, [r7, #12]
 800870a:	60b9      	str	r1, [r7, #8]
 800870c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	f023 0210 	bic.w	r2, r3, #16
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6a1b      	ldr	r3, [r3, #32]
 8008724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800872c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	031b      	lsls	r3, r3, #12
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	4313      	orrs	r3, r2
 8008736:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800873e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	011b      	lsls	r3, r3, #4
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	4313      	orrs	r3, r2
 8008748:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	621a      	str	r2, [r3, #32]
}
 8008756:	bf00      	nop
 8008758:	371c      	adds	r7, #28
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
	...

08008764 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	4b09      	ldr	r3, [pc, #36]	; (800879c <TIM_ITRx_SetConfig+0x38>)
 8008778:	4013      	ands	r3, r2
 800877a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4313      	orrs	r3, r2
 8008782:	f043 0307 	orr.w	r3, r3, #7
 8008786:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	609a      	str	r2, [r3, #8]
}
 800878e:	bf00      	nop
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	ffcfff8f 	.word	0xffcfff8f

080087a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
 80087ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	021a      	lsls	r2, r3, #8
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	431a      	orrs	r2, r3
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	609a      	str	r2, [r3, #8]
}
 80087d4:	bf00      	nop
 80087d6:	371c      	adds	r7, #28
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d101      	bne.n	80087f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087f4:	2302      	movs	r3, #2
 80087f6:	e068      	b.n	80088ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2202      	movs	r2, #2
 8008804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a2e      	ldr	r2, [pc, #184]	; (80088d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d004      	beq.n	800882c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a2d      	ldr	r2, [pc, #180]	; (80088dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d108      	bne.n	800883e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008832:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	4313      	orrs	r3, r2
 800883c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008844:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	4313      	orrs	r3, r2
 800884e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a1e      	ldr	r2, [pc, #120]	; (80088d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d01d      	beq.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800886a:	d018      	beq.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a1b      	ldr	r2, [pc, #108]	; (80088e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d013      	beq.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a1a      	ldr	r2, [pc, #104]	; (80088e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d00e      	beq.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a18      	ldr	r2, [pc, #96]	; (80088e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d009      	beq.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a13      	ldr	r2, [pc, #76]	; (80088dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d004      	beq.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a14      	ldr	r2, [pc, #80]	; (80088ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d10c      	bne.n	80088b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	40010000 	.word	0x40010000
 80088dc:	40010400 	.word	0x40010400
 80088e0:	40000400 	.word	0x40000400
 80088e4:	40000800 	.word	0x40000800
 80088e8:	40000c00 	.word	0x40000c00
 80088ec:	40001800 	.word	0x40001800

080088f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d101      	bne.n	800893e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e042      	b.n	80089c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008944:	2b00      	cmp	r3, #0
 8008946:	d106      	bne.n	8008956 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7f9 f833 	bl	80019bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2224      	movs	r2, #36	; 0x24
 800895a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f022 0201 	bic.w	r2, r2, #1
 800896c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fb12 	bl	8008f98 <UART_SetConfig>
 8008974:	4603      	mov	r3, r0
 8008976:	2b01      	cmp	r3, #1
 8008978:	d101      	bne.n	800897e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e022      	b.n	80089c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f002 fc84 	bl	800b294 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800899a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689a      	ldr	r2, [r3, #8]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f042 0201 	orr.w	r2, r2, #1
 80089ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f002 fd0b 	bl	800b3d8 <UART_CheckIdleState>
 80089c2:	4603      	mov	r3, r0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	4613      	mov	r3, r2
 80089d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089e0:	2b20      	cmp	r3, #32
 80089e2:	d168      	bne.n	8008ab6 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <HAL_UART_Transmit_IT+0x24>
 80089ea:	88fb      	ldrh	r3, [r7, #6]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d101      	bne.n	80089f4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e061      	b.n	8008ab8 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d101      	bne.n	8008a02 <HAL_UART_Transmit_IT+0x36>
 80089fe:	2302      	movs	r3, #2
 8008a00:	e05a      	b.n	8008ab8 <HAL_UART_Transmit_IT+0xec>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	88fa      	ldrh	r2, [r7, #6]
 8008a14:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	88fa      	ldrh	r2, [r7, #6]
 8008a1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2200      	movs	r2, #0
 8008a24:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2221      	movs	r2, #33	; 0x21
 8008a32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a3e:	d11c      	bne.n	8008a7a <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a48:	d107      	bne.n	8008a5a <HAL_UART_Transmit_IT+0x8e>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d103      	bne.n	8008a5a <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	4a1b      	ldr	r2, [pc, #108]	; (8008ac4 <HAL_UART_Transmit_IT+0xf8>)
 8008a56:	671a      	str	r2, [r3, #112]	; 0x70
 8008a58:	e002      	b.n	8008a60 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	4a1a      	ldr	r2, [pc, #104]	; (8008ac8 <HAL_UART_Transmit_IT+0xfc>)
 8008a5e:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	689a      	ldr	r2, [r3, #8]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008a76:	609a      	str	r2, [r3, #8]
 8008a78:	e01b      	b.n	8008ab2 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a82:	d107      	bne.n	8008a94 <HAL_UART_Transmit_IT+0xc8>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d103      	bne.n	8008a94 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	4a0f      	ldr	r2, [pc, #60]	; (8008acc <HAL_UART_Transmit_IT+0x100>)
 8008a90:	671a      	str	r2, [r3, #112]	; 0x70
 8008a92:	e002      	b.n	8008a9a <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4a0e      	ldr	r2, [pc, #56]	; (8008ad0 <HAL_UART_Transmit_IT+0x104>)
 8008a98:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ab0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	e000      	b.n	8008ab8 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8008ab6:	2302      	movs	r3, #2
  }
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3714      	adds	r7, #20
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr
 8008ac4:	0800b769 	.word	0x0800b769
 8008ac8:	0800b6cf 	.word	0x0800b6cf
 8008acc:	0800b651 	.word	0x0800b651
 8008ad0:	0800b5dd 	.word	0x0800b5dd

08008ad4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ae8:	2b20      	cmp	r3, #32
 8008aea:	f040 80bc 	bne.w	8008c66 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d002      	beq.n	8008afa <HAL_UART_Receive_IT+0x26>
 8008af4:	88fb      	ldrh	r3, [r7, #6]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e0b4      	b.n	8008c68 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d101      	bne.n	8008b0c <HAL_UART_Receive_IT+0x38>
 8008b08:	2302      	movs	r3, #2
 8008b0a:	e0ad      	b.n	8008c68 <HAL_UART_Receive_IT+0x194>
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	88fa      	ldrh	r2, [r7, #6]
 8008b1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	88fa      	ldrh	r2, [r7, #6]
 8008b26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b38:	d10e      	bne.n	8008b58 <HAL_UART_Receive_IT+0x84>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d105      	bne.n	8008b4e <HAL_UART_Receive_IT+0x7a>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008b48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b4c:	e02d      	b.n	8008baa <HAL_UART_Receive_IT+0xd6>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	22ff      	movs	r2, #255	; 0xff
 8008b52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b56:	e028      	b.n	8008baa <HAL_UART_Receive_IT+0xd6>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10d      	bne.n	8008b7c <HAL_UART_Receive_IT+0xa8>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d104      	bne.n	8008b72 <HAL_UART_Receive_IT+0x9e>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	22ff      	movs	r2, #255	; 0xff
 8008b6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b70:	e01b      	b.n	8008baa <HAL_UART_Receive_IT+0xd6>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	227f      	movs	r2, #127	; 0x7f
 8008b76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b7a:	e016      	b.n	8008baa <HAL_UART_Receive_IT+0xd6>
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b84:	d10d      	bne.n	8008ba2 <HAL_UART_Receive_IT+0xce>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d104      	bne.n	8008b98 <HAL_UART_Receive_IT+0xc4>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	227f      	movs	r2, #127	; 0x7f
 8008b92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b96:	e008      	b.n	8008baa <HAL_UART_Receive_IT+0xd6>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	223f      	movs	r2, #63	; 0x3f
 8008b9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ba0:	e003      	b.n	8008baa <HAL_UART_Receive_IT+0xd6>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2222      	movs	r2, #34	; 0x22
 8008bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	689a      	ldr	r2, [r3, #8]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f042 0201 	orr.w	r2, r2, #1
 8008bc8:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bd2:	d12a      	bne.n	8008c2a <HAL_UART_Receive_IT+0x156>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008bda:	88fa      	ldrh	r2, [r7, #6]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d324      	bcc.n	8008c2a <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008be8:	d107      	bne.n	8008bfa <HAL_UART_Receive_IT+0x126>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d103      	bne.n	8008bfa <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	4a1f      	ldr	r2, [pc, #124]	; (8008c74 <HAL_UART_Receive_IT+0x1a0>)
 8008bf6:	66da      	str	r2, [r3, #108]	; 0x6c
 8008bf8:	e002      	b.n	8008c00 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	4a1e      	ldr	r2, [pc, #120]	; (8008c78 <HAL_UART_Receive_IT+0x1a4>)
 8008bfe:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c16:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689a      	ldr	r2, [r3, #8]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008c26:	609a      	str	r2, [r3, #8]
 8008c28:	e01b      	b.n	8008c62 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c32:	d107      	bne.n	8008c44 <HAL_UART_Receive_IT+0x170>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d103      	bne.n	8008c44 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	4a0f      	ldr	r2, [pc, #60]	; (8008c7c <HAL_UART_Receive_IT+0x1a8>)
 8008c40:	66da      	str	r2, [r3, #108]	; 0x6c
 8008c42:	e002      	b.n	8008c4a <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4a0e      	ldr	r2, [pc, #56]	; (8008c80 <HAL_UART_Receive_IT+0x1ac>)
 8008c48:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008c60:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	e000      	b.n	8008c68 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8008c66:	2302      	movs	r3, #2
  }
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	0800ba9d 	.word	0x0800ba9d
 8008c78:	0800b995 	.word	0x0800b995
 8008c7c:	0800b8eb 	.word	0x0800b8eb
 8008c80:	0800b841 	.word	0x0800b841

08008c84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b088      	sub	sp, #32
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	69db      	ldr	r3, [r3, #28]
 8008c92:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008ca4:	69fa      	ldr	r2, [r7, #28]
 8008ca6:	f640 030f 	movw	r3, #2063	; 0x80f
 8008caa:	4013      	ands	r3, r2
 8008cac:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d118      	bne.n	8008ce6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	f003 0320 	and.w	r3, r3, #32
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d013      	beq.n	8008ce6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	f003 0320 	and.w	r3, r3, #32
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d104      	bne.n	8008cd2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d009      	beq.n	8008ce6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 8145 	beq.w	8008f66 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	4798      	blx	r3
      }
      return;
 8008ce4:	e13f      	b.n	8008f66 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f000 80e8 	beq.w	8008ebe <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	4ba1      	ldr	r3, [pc, #644]	; (8008f78 <HAL_UART_IRQHandler+0x2f4>)
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d105      	bne.n	8008d04 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	4ba0      	ldr	r3, [pc, #640]	; (8008f7c <HAL_UART_IRQHandler+0x2f8>)
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 80dd 	beq.w	8008ebe <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d010      	beq.n	8008d30 <HAL_UART_IRQHandler+0xac>
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00b      	beq.n	8008d30 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d26:	f043 0201 	orr.w	r2, r3, #1
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	f003 0302 	and.w	r3, r3, #2
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d010      	beq.n	8008d5c <HAL_UART_IRQHandler+0xd8>
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f003 0301 	and.w	r3, r3, #1
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00b      	beq.n	8008d5c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2202      	movs	r2, #2
 8008d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d52:	f043 0204 	orr.w	r2, r3, #4
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	f003 0304 	and.w	r3, r3, #4
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d010      	beq.n	8008d88 <HAL_UART_IRQHandler+0x104>
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	f003 0301 	and.w	r3, r3, #1
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00b      	beq.n	8008d88 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2204      	movs	r2, #4
 8008d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d7e:	f043 0202 	orr.w	r2, r3, #2
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	f003 0308 	and.w	r3, r3, #8
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d015      	beq.n	8008dbe <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	f003 0320 	and.w	r3, r3, #32
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d104      	bne.n	8008da6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	4b76      	ldr	r3, [pc, #472]	; (8008f78 <HAL_UART_IRQHandler+0x2f4>)
 8008da0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00b      	beq.n	8008dbe <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2208      	movs	r2, #8
 8008dac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008db4:	f043 0208 	orr.w	r2, r3, #8
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d011      	beq.n	8008dec <HAL_UART_IRQHandler+0x168>
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00c      	beq.n	8008dec <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008de2:	f043 0220 	orr.w	r2, r3, #32
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f000 80b9 	beq.w	8008f6a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	f003 0320 	and.w	r3, r3, #32
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d011      	beq.n	8008e26 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	f003 0320 	and.w	r3, r3, #32
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d104      	bne.n	8008e16 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d007      	beq.n	8008e26 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e2c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e38:	2b40      	cmp	r3, #64	; 0x40
 8008e3a:	d004      	beq.n	8008e46 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d031      	beq.n	8008eaa <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f002 fb8e 	bl	800b568 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e56:	2b40      	cmp	r3, #64	; 0x40
 8008e58:	d123      	bne.n	8008ea2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	689a      	ldr	r2, [r3, #8]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e68:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d013      	beq.n	8008e9a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e76:	4a42      	ldr	r2, [pc, #264]	; (8008f80 <HAL_UART_IRQHandler+0x2fc>)
 8008e78:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fa fd30 	bl	80038e4 <HAL_DMA_Abort_IT>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d017      	beq.n	8008eba <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8008e94:	4610      	mov	r0, r2
 8008e96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e98:	e00f      	b.n	8008eba <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 f872 	bl	8008f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ea0:	e00b      	b.n	8008eba <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f86e 	bl	8008f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ea8:	e007      	b.n	8008eba <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f86a 	bl	8008f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8008eb8:	e057      	b.n	8008f6a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eba:	bf00      	nop
    return;
 8008ebc:	e055      	b.n	8008f6a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00d      	beq.n	8008ee4 <HAL_UART_IRQHandler+0x260>
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d008      	beq.n	8008ee4 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008eda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f002 fe61 	bl	800bba4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ee2:	e045      	b.n	8008f70 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d012      	beq.n	8008f14 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d104      	bne.n	8008f02 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d008      	beq.n	8008f14 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d031      	beq.n	8008f6e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	4798      	blx	r3
    }
    return;
 8008f12:	e02c      	b.n	8008f6e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d008      	beq.n	8008f30 <HAL_UART_IRQHandler+0x2ac>
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d003      	beq.n	8008f30 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f002 fc6f 	bl	800b80c <UART_EndTransmit_IT>
    return;
 8008f2e:	e01f      	b.n	8008f70 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d008      	beq.n	8008f4c <HAL_UART_IRQHandler+0x2c8>
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d003      	beq.n	8008f4c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f002 fe41 	bl	800bbcc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f4a:	e011      	b.n	8008f70 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00c      	beq.n	8008f70 <HAL_UART_IRQHandler+0x2ec>
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	da09      	bge.n	8008f70 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f002 fe2b 	bl	800bbb8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f62:	bf00      	nop
 8008f64:	e004      	b.n	8008f70 <HAL_UART_IRQHandler+0x2ec>
      return;
 8008f66:	bf00      	nop
 8008f68:	e002      	b.n	8008f70 <HAL_UART_IRQHandler+0x2ec>
    return;
 8008f6a:	bf00      	nop
 8008f6c:	e000      	b.n	8008f70 <HAL_UART_IRQHandler+0x2ec>
    return;
 8008f6e:	bf00      	nop
  }
}
 8008f70:	3720      	adds	r7, #32
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	10000001 	.word	0x10000001
 8008f7c:	04000120 	.word	0x04000120
 8008f80:	0800b5b1 	.word	0x0800b5b1

08008f84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f98:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008f9c:	b090      	sub	sp, #64	; 0x40
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8008fac:	2300      	movs	r3, #0
 8008fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689a      	ldr	r2, [r3, #8]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	431a      	orrs	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	69db      	ldr	r3, [r3, #28]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	4bc1      	ldr	r3, [pc, #772]	; (80092e0 <UART_SetConfig+0x348>)
 8008fda:	4013      	ands	r3, r2
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	6812      	ldr	r2, [r2, #0]
 8008fe0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fe2:	430b      	orrs	r3, r1
 8008fe4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	68da      	ldr	r2, [r3, #12]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4ab7      	ldr	r2, [pc, #732]	; (80092e4 <UART_SetConfig+0x34c>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d004      	beq.n	8009016 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a1b      	ldr	r3, [r3, #32]
 8009010:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009012:	4313      	orrs	r3, r2
 8009014:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	689a      	ldr	r2, [r3, #8]
 800901c:	4bb2      	ldr	r3, [pc, #712]	; (80092e8 <UART_SetConfig+0x350>)
 800901e:	4013      	ands	r3, r2
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	6812      	ldr	r2, [r2, #0]
 8009024:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009026:	430b      	orrs	r3, r1
 8009028:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009030:	f023 010f 	bic.w	r1, r3, #15
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	430a      	orrs	r2, r1
 800903e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4aa9      	ldr	r2, [pc, #676]	; (80092ec <UART_SetConfig+0x354>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d177      	bne.n	800913a <UART_SetConfig+0x1a2>
 800904a:	4ba9      	ldr	r3, [pc, #676]	; (80092f0 <UART_SetConfig+0x358>)
 800904c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800904e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009052:	2b28      	cmp	r3, #40	; 0x28
 8009054:	d86c      	bhi.n	8009130 <UART_SetConfig+0x198>
 8009056:	a201      	add	r2, pc, #4	; (adr r2, 800905c <UART_SetConfig+0xc4>)
 8009058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905c:	08009101 	.word	0x08009101
 8009060:	08009131 	.word	0x08009131
 8009064:	08009131 	.word	0x08009131
 8009068:	08009131 	.word	0x08009131
 800906c:	08009131 	.word	0x08009131
 8009070:	08009131 	.word	0x08009131
 8009074:	08009131 	.word	0x08009131
 8009078:	08009131 	.word	0x08009131
 800907c:	08009109 	.word	0x08009109
 8009080:	08009131 	.word	0x08009131
 8009084:	08009131 	.word	0x08009131
 8009088:	08009131 	.word	0x08009131
 800908c:	08009131 	.word	0x08009131
 8009090:	08009131 	.word	0x08009131
 8009094:	08009131 	.word	0x08009131
 8009098:	08009131 	.word	0x08009131
 800909c:	08009111 	.word	0x08009111
 80090a0:	08009131 	.word	0x08009131
 80090a4:	08009131 	.word	0x08009131
 80090a8:	08009131 	.word	0x08009131
 80090ac:	08009131 	.word	0x08009131
 80090b0:	08009131 	.word	0x08009131
 80090b4:	08009131 	.word	0x08009131
 80090b8:	08009131 	.word	0x08009131
 80090bc:	08009119 	.word	0x08009119
 80090c0:	08009131 	.word	0x08009131
 80090c4:	08009131 	.word	0x08009131
 80090c8:	08009131 	.word	0x08009131
 80090cc:	08009131 	.word	0x08009131
 80090d0:	08009131 	.word	0x08009131
 80090d4:	08009131 	.word	0x08009131
 80090d8:	08009131 	.word	0x08009131
 80090dc:	08009121 	.word	0x08009121
 80090e0:	08009131 	.word	0x08009131
 80090e4:	08009131 	.word	0x08009131
 80090e8:	08009131 	.word	0x08009131
 80090ec:	08009131 	.word	0x08009131
 80090f0:	08009131 	.word	0x08009131
 80090f4:	08009131 	.word	0x08009131
 80090f8:	08009131 	.word	0x08009131
 80090fc:	08009129 	.word	0x08009129
 8009100:	2301      	movs	r3, #1
 8009102:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009106:	e233      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009108:	2304      	movs	r3, #4
 800910a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800910e:	e22f      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009110:	2308      	movs	r3, #8
 8009112:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009116:	e22b      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009118:	2310      	movs	r3, #16
 800911a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800911e:	e227      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009120:	2320      	movs	r3, #32
 8009122:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009126:	e223      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009128:	2340      	movs	r3, #64	; 0x40
 800912a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800912e:	e21f      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009130:	2380      	movs	r3, #128	; 0x80
 8009132:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009136:	bf00      	nop
 8009138:	e21a      	b.n	8009570 <UART_SetConfig+0x5d8>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a6d      	ldr	r2, [pc, #436]	; (80092f4 <UART_SetConfig+0x35c>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d132      	bne.n	80091aa <UART_SetConfig+0x212>
 8009144:	4b6a      	ldr	r3, [pc, #424]	; (80092f0 <UART_SetConfig+0x358>)
 8009146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009148:	f003 0307 	and.w	r3, r3, #7
 800914c:	2b05      	cmp	r3, #5
 800914e:	d827      	bhi.n	80091a0 <UART_SetConfig+0x208>
 8009150:	a201      	add	r2, pc, #4	; (adr r2, 8009158 <UART_SetConfig+0x1c0>)
 8009152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009156:	bf00      	nop
 8009158:	08009171 	.word	0x08009171
 800915c:	08009179 	.word	0x08009179
 8009160:	08009181 	.word	0x08009181
 8009164:	08009189 	.word	0x08009189
 8009168:	08009191 	.word	0x08009191
 800916c:	08009199 	.word	0x08009199
 8009170:	2300      	movs	r3, #0
 8009172:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009176:	e1fb      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009178:	2304      	movs	r3, #4
 800917a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800917e:	e1f7      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009180:	2308      	movs	r3, #8
 8009182:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009186:	e1f3      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009188:	2310      	movs	r3, #16
 800918a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800918e:	e1ef      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009190:	2320      	movs	r3, #32
 8009192:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009196:	e1eb      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009198:	2340      	movs	r3, #64	; 0x40
 800919a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800919e:	e1e7      	b.n	8009570 <UART_SetConfig+0x5d8>
 80091a0:	2380      	movs	r3, #128	; 0x80
 80091a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80091a6:	bf00      	nop
 80091a8:	e1e2      	b.n	8009570 <UART_SetConfig+0x5d8>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a52      	ldr	r2, [pc, #328]	; (80092f8 <UART_SetConfig+0x360>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d132      	bne.n	800921a <UART_SetConfig+0x282>
 80091b4:	4b4e      	ldr	r3, [pc, #312]	; (80092f0 <UART_SetConfig+0x358>)
 80091b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091b8:	f003 0307 	and.w	r3, r3, #7
 80091bc:	2b05      	cmp	r3, #5
 80091be:	d827      	bhi.n	8009210 <UART_SetConfig+0x278>
 80091c0:	a201      	add	r2, pc, #4	; (adr r2, 80091c8 <UART_SetConfig+0x230>)
 80091c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c6:	bf00      	nop
 80091c8:	080091e1 	.word	0x080091e1
 80091cc:	080091e9 	.word	0x080091e9
 80091d0:	080091f1 	.word	0x080091f1
 80091d4:	080091f9 	.word	0x080091f9
 80091d8:	08009201 	.word	0x08009201
 80091dc:	08009209 	.word	0x08009209
 80091e0:	2300      	movs	r3, #0
 80091e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80091e6:	e1c3      	b.n	8009570 <UART_SetConfig+0x5d8>
 80091e8:	2304      	movs	r3, #4
 80091ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80091ee:	e1bf      	b.n	8009570 <UART_SetConfig+0x5d8>
 80091f0:	2308      	movs	r3, #8
 80091f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80091f6:	e1bb      	b.n	8009570 <UART_SetConfig+0x5d8>
 80091f8:	2310      	movs	r3, #16
 80091fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80091fe:	e1b7      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009200:	2320      	movs	r3, #32
 8009202:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009206:	e1b3      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009208:	2340      	movs	r3, #64	; 0x40
 800920a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800920e:	e1af      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009210:	2380      	movs	r3, #128	; 0x80
 8009212:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009216:	bf00      	nop
 8009218:	e1aa      	b.n	8009570 <UART_SetConfig+0x5d8>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a37      	ldr	r2, [pc, #220]	; (80092fc <UART_SetConfig+0x364>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d132      	bne.n	800928a <UART_SetConfig+0x2f2>
 8009224:	4b32      	ldr	r3, [pc, #200]	; (80092f0 <UART_SetConfig+0x358>)
 8009226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009228:	f003 0307 	and.w	r3, r3, #7
 800922c:	2b05      	cmp	r3, #5
 800922e:	d827      	bhi.n	8009280 <UART_SetConfig+0x2e8>
 8009230:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <UART_SetConfig+0x2a0>)
 8009232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009236:	bf00      	nop
 8009238:	08009251 	.word	0x08009251
 800923c:	08009259 	.word	0x08009259
 8009240:	08009261 	.word	0x08009261
 8009244:	08009269 	.word	0x08009269
 8009248:	08009271 	.word	0x08009271
 800924c:	08009279 	.word	0x08009279
 8009250:	2300      	movs	r3, #0
 8009252:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009256:	e18b      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009258:	2304      	movs	r3, #4
 800925a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800925e:	e187      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009260:	2308      	movs	r3, #8
 8009262:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009266:	e183      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009268:	2310      	movs	r3, #16
 800926a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800926e:	e17f      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009270:	2320      	movs	r3, #32
 8009272:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009276:	e17b      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009278:	2340      	movs	r3, #64	; 0x40
 800927a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800927e:	e177      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009280:	2380      	movs	r3, #128	; 0x80
 8009282:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009286:	bf00      	nop
 8009288:	e172      	b.n	8009570 <UART_SetConfig+0x5d8>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a1c      	ldr	r2, [pc, #112]	; (8009300 <UART_SetConfig+0x368>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d144      	bne.n	800931e <UART_SetConfig+0x386>
 8009294:	4b16      	ldr	r3, [pc, #88]	; (80092f0 <UART_SetConfig+0x358>)
 8009296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009298:	f003 0307 	and.w	r3, r3, #7
 800929c:	2b05      	cmp	r3, #5
 800929e:	d839      	bhi.n	8009314 <UART_SetConfig+0x37c>
 80092a0:	a201      	add	r2, pc, #4	; (adr r2, 80092a8 <UART_SetConfig+0x310>)
 80092a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a6:	bf00      	nop
 80092a8:	080092c1 	.word	0x080092c1
 80092ac:	080092c9 	.word	0x080092c9
 80092b0:	080092d1 	.word	0x080092d1
 80092b4:	080092d9 	.word	0x080092d9
 80092b8:	08009305 	.word	0x08009305
 80092bc:	0800930d 	.word	0x0800930d
 80092c0:	2300      	movs	r3, #0
 80092c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80092c6:	e153      	b.n	8009570 <UART_SetConfig+0x5d8>
 80092c8:	2304      	movs	r3, #4
 80092ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80092ce:	e14f      	b.n	8009570 <UART_SetConfig+0x5d8>
 80092d0:	2308      	movs	r3, #8
 80092d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80092d6:	e14b      	b.n	8009570 <UART_SetConfig+0x5d8>
 80092d8:	2310      	movs	r3, #16
 80092da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80092de:	e147      	b.n	8009570 <UART_SetConfig+0x5d8>
 80092e0:	cfff69f3 	.word	0xcfff69f3
 80092e4:	58000c00 	.word	0x58000c00
 80092e8:	11fff4ff 	.word	0x11fff4ff
 80092ec:	40011000 	.word	0x40011000
 80092f0:	58024400 	.word	0x58024400
 80092f4:	40004400 	.word	0x40004400
 80092f8:	40004800 	.word	0x40004800
 80092fc:	40004c00 	.word	0x40004c00
 8009300:	40005000 	.word	0x40005000
 8009304:	2320      	movs	r3, #32
 8009306:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800930a:	e131      	b.n	8009570 <UART_SetConfig+0x5d8>
 800930c:	2340      	movs	r3, #64	; 0x40
 800930e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009312:	e12d      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009314:	2380      	movs	r3, #128	; 0x80
 8009316:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800931a:	bf00      	nop
 800931c:	e128      	b.n	8009570 <UART_SetConfig+0x5d8>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4ac3      	ldr	r2, [pc, #780]	; (8009630 <UART_SetConfig+0x698>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d178      	bne.n	800941a <UART_SetConfig+0x482>
 8009328:	4bc2      	ldr	r3, [pc, #776]	; (8009634 <UART_SetConfig+0x69c>)
 800932a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800932c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009330:	2b28      	cmp	r3, #40	; 0x28
 8009332:	d86d      	bhi.n	8009410 <UART_SetConfig+0x478>
 8009334:	a201      	add	r2, pc, #4	; (adr r2, 800933c <UART_SetConfig+0x3a4>)
 8009336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933a:	bf00      	nop
 800933c:	080093e1 	.word	0x080093e1
 8009340:	08009411 	.word	0x08009411
 8009344:	08009411 	.word	0x08009411
 8009348:	08009411 	.word	0x08009411
 800934c:	08009411 	.word	0x08009411
 8009350:	08009411 	.word	0x08009411
 8009354:	08009411 	.word	0x08009411
 8009358:	08009411 	.word	0x08009411
 800935c:	080093e9 	.word	0x080093e9
 8009360:	08009411 	.word	0x08009411
 8009364:	08009411 	.word	0x08009411
 8009368:	08009411 	.word	0x08009411
 800936c:	08009411 	.word	0x08009411
 8009370:	08009411 	.word	0x08009411
 8009374:	08009411 	.word	0x08009411
 8009378:	08009411 	.word	0x08009411
 800937c:	080093f1 	.word	0x080093f1
 8009380:	08009411 	.word	0x08009411
 8009384:	08009411 	.word	0x08009411
 8009388:	08009411 	.word	0x08009411
 800938c:	08009411 	.word	0x08009411
 8009390:	08009411 	.word	0x08009411
 8009394:	08009411 	.word	0x08009411
 8009398:	08009411 	.word	0x08009411
 800939c:	080093f9 	.word	0x080093f9
 80093a0:	08009411 	.word	0x08009411
 80093a4:	08009411 	.word	0x08009411
 80093a8:	08009411 	.word	0x08009411
 80093ac:	08009411 	.word	0x08009411
 80093b0:	08009411 	.word	0x08009411
 80093b4:	08009411 	.word	0x08009411
 80093b8:	08009411 	.word	0x08009411
 80093bc:	08009401 	.word	0x08009401
 80093c0:	08009411 	.word	0x08009411
 80093c4:	08009411 	.word	0x08009411
 80093c8:	08009411 	.word	0x08009411
 80093cc:	08009411 	.word	0x08009411
 80093d0:	08009411 	.word	0x08009411
 80093d4:	08009411 	.word	0x08009411
 80093d8:	08009411 	.word	0x08009411
 80093dc:	08009409 	.word	0x08009409
 80093e0:	2301      	movs	r3, #1
 80093e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80093e6:	e0c3      	b.n	8009570 <UART_SetConfig+0x5d8>
 80093e8:	2304      	movs	r3, #4
 80093ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80093ee:	e0bf      	b.n	8009570 <UART_SetConfig+0x5d8>
 80093f0:	2308      	movs	r3, #8
 80093f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80093f6:	e0bb      	b.n	8009570 <UART_SetConfig+0x5d8>
 80093f8:	2310      	movs	r3, #16
 80093fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80093fe:	e0b7      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009400:	2320      	movs	r3, #32
 8009402:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009406:	e0b3      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009408:	2340      	movs	r3, #64	; 0x40
 800940a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800940e:	e0af      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009410:	2380      	movs	r3, #128	; 0x80
 8009412:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009416:	bf00      	nop
 8009418:	e0aa      	b.n	8009570 <UART_SetConfig+0x5d8>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a86      	ldr	r2, [pc, #536]	; (8009638 <UART_SetConfig+0x6a0>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d132      	bne.n	800948a <UART_SetConfig+0x4f2>
 8009424:	4b83      	ldr	r3, [pc, #524]	; (8009634 <UART_SetConfig+0x69c>)
 8009426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009428:	f003 0307 	and.w	r3, r3, #7
 800942c:	2b05      	cmp	r3, #5
 800942e:	d827      	bhi.n	8009480 <UART_SetConfig+0x4e8>
 8009430:	a201      	add	r2, pc, #4	; (adr r2, 8009438 <UART_SetConfig+0x4a0>)
 8009432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009436:	bf00      	nop
 8009438:	08009451 	.word	0x08009451
 800943c:	08009459 	.word	0x08009459
 8009440:	08009461 	.word	0x08009461
 8009444:	08009469 	.word	0x08009469
 8009448:	08009471 	.word	0x08009471
 800944c:	08009479 	.word	0x08009479
 8009450:	2300      	movs	r3, #0
 8009452:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009456:	e08b      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009458:	2304      	movs	r3, #4
 800945a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800945e:	e087      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009460:	2308      	movs	r3, #8
 8009462:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009466:	e083      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009468:	2310      	movs	r3, #16
 800946a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800946e:	e07f      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009470:	2320      	movs	r3, #32
 8009472:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009476:	e07b      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009478:	2340      	movs	r3, #64	; 0x40
 800947a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800947e:	e077      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009480:	2380      	movs	r3, #128	; 0x80
 8009482:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009486:	bf00      	nop
 8009488:	e072      	b.n	8009570 <UART_SetConfig+0x5d8>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a6b      	ldr	r2, [pc, #428]	; (800963c <UART_SetConfig+0x6a4>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d132      	bne.n	80094fa <UART_SetConfig+0x562>
 8009494:	4b67      	ldr	r3, [pc, #412]	; (8009634 <UART_SetConfig+0x69c>)
 8009496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009498:	f003 0307 	and.w	r3, r3, #7
 800949c:	2b05      	cmp	r3, #5
 800949e:	d827      	bhi.n	80094f0 <UART_SetConfig+0x558>
 80094a0:	a201      	add	r2, pc, #4	; (adr r2, 80094a8 <UART_SetConfig+0x510>)
 80094a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a6:	bf00      	nop
 80094a8:	080094c1 	.word	0x080094c1
 80094ac:	080094c9 	.word	0x080094c9
 80094b0:	080094d1 	.word	0x080094d1
 80094b4:	080094d9 	.word	0x080094d9
 80094b8:	080094e1 	.word	0x080094e1
 80094bc:	080094e9 	.word	0x080094e9
 80094c0:	2300      	movs	r3, #0
 80094c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094c6:	e053      	b.n	8009570 <UART_SetConfig+0x5d8>
 80094c8:	2304      	movs	r3, #4
 80094ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094ce:	e04f      	b.n	8009570 <UART_SetConfig+0x5d8>
 80094d0:	2308      	movs	r3, #8
 80094d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094d6:	e04b      	b.n	8009570 <UART_SetConfig+0x5d8>
 80094d8:	2310      	movs	r3, #16
 80094da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094de:	e047      	b.n	8009570 <UART_SetConfig+0x5d8>
 80094e0:	2320      	movs	r3, #32
 80094e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094e6:	e043      	b.n	8009570 <UART_SetConfig+0x5d8>
 80094e8:	2340      	movs	r3, #64	; 0x40
 80094ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094ee:	e03f      	b.n	8009570 <UART_SetConfig+0x5d8>
 80094f0:	2380      	movs	r3, #128	; 0x80
 80094f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80094f6:	bf00      	nop
 80094f8:	e03a      	b.n	8009570 <UART_SetConfig+0x5d8>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a50      	ldr	r2, [pc, #320]	; (8009640 <UART_SetConfig+0x6a8>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d132      	bne.n	800956a <UART_SetConfig+0x5d2>
 8009504:	4b4b      	ldr	r3, [pc, #300]	; (8009634 <UART_SetConfig+0x69c>)
 8009506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009508:	f003 0307 	and.w	r3, r3, #7
 800950c:	2b05      	cmp	r3, #5
 800950e:	d827      	bhi.n	8009560 <UART_SetConfig+0x5c8>
 8009510:	a201      	add	r2, pc, #4	; (adr r2, 8009518 <UART_SetConfig+0x580>)
 8009512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009516:	bf00      	nop
 8009518:	08009531 	.word	0x08009531
 800951c:	08009539 	.word	0x08009539
 8009520:	08009541 	.word	0x08009541
 8009524:	08009549 	.word	0x08009549
 8009528:	08009551 	.word	0x08009551
 800952c:	08009559 	.word	0x08009559
 8009530:	2302      	movs	r3, #2
 8009532:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009536:	e01b      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009538:	2304      	movs	r3, #4
 800953a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800953e:	e017      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009540:	2308      	movs	r3, #8
 8009542:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009546:	e013      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009548:	2310      	movs	r3, #16
 800954a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800954e:	e00f      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009550:	2320      	movs	r3, #32
 8009552:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009556:	e00b      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009558:	2340      	movs	r3, #64	; 0x40
 800955a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800955e:	e007      	b.n	8009570 <UART_SetConfig+0x5d8>
 8009560:	2380      	movs	r3, #128	; 0x80
 8009562:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009566:	bf00      	nop
 8009568:	e002      	b.n	8009570 <UART_SetConfig+0x5d8>
 800956a:	2380      	movs	r3, #128	; 0x80
 800956c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a32      	ldr	r2, [pc, #200]	; (8009640 <UART_SetConfig+0x6a8>)
 8009576:	4293      	cmp	r3, r2
 8009578:	f040 86f7 	bne.w	800a36a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800957c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009580:	2b08      	cmp	r3, #8
 8009582:	f000 80c0 	beq.w	8009706 <UART_SetConfig+0x76e>
 8009586:	2b08      	cmp	r3, #8
 8009588:	dc04      	bgt.n	8009594 <UART_SetConfig+0x5fc>
 800958a:	2b02      	cmp	r3, #2
 800958c:	d00c      	beq.n	80095a8 <UART_SetConfig+0x610>
 800958e:	2b04      	cmp	r3, #4
 8009590:	d065      	beq.n	800965e <UART_SetConfig+0x6c6>
 8009592:	e27a      	b.n	8009a8a <UART_SetConfig+0xaf2>
 8009594:	2b20      	cmp	r3, #32
 8009596:	f000 81b0 	beq.w	80098fa <UART_SetConfig+0x962>
 800959a:	2b40      	cmp	r3, #64	; 0x40
 800959c:	f000 821e 	beq.w	80099dc <UART_SetConfig+0xa44>
 80095a0:	2b10      	cmp	r3, #16
 80095a2:	f000 8104 	beq.w	80097ae <UART_SetConfig+0x816>
 80095a6:	e270      	b.n	8009a8a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80095a8:	f7fe f816 	bl	80075d8 <HAL_RCCEx_GetD3PCLK1Freq>
 80095ac:	4602      	mov	r2, r0
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d04e      	beq.n	8009654 <UART_SetConfig+0x6bc>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d048      	beq.n	8009650 <UART_SetConfig+0x6b8>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d042      	beq.n	800964c <UART_SetConfig+0x6b4>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ca:	2b03      	cmp	r3, #3
 80095cc:	d03c      	beq.n	8009648 <UART_SetConfig+0x6b0>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d2:	2b04      	cmp	r3, #4
 80095d4:	d036      	beq.n	8009644 <UART_SetConfig+0x6ac>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095da:	2b05      	cmp	r3, #5
 80095dc:	d026      	beq.n	800962c <UART_SetConfig+0x694>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e2:	2b06      	cmp	r3, #6
 80095e4:	d020      	beq.n	8009628 <UART_SetConfig+0x690>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ea:	2b07      	cmp	r3, #7
 80095ec:	d01a      	beq.n	8009624 <UART_SetConfig+0x68c>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f2:	2b08      	cmp	r3, #8
 80095f4:	d014      	beq.n	8009620 <UART_SetConfig+0x688>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fa:	2b09      	cmp	r3, #9
 80095fc:	d00e      	beq.n	800961c <UART_SetConfig+0x684>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009602:	2b0a      	cmp	r3, #10
 8009604:	d008      	beq.n	8009618 <UART_SetConfig+0x680>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960a:	2b0b      	cmp	r3, #11
 800960c:	d102      	bne.n	8009614 <UART_SetConfig+0x67c>
 800960e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009612:	e020      	b.n	8009656 <UART_SetConfig+0x6be>
 8009614:	2301      	movs	r3, #1
 8009616:	e01e      	b.n	8009656 <UART_SetConfig+0x6be>
 8009618:	2380      	movs	r3, #128	; 0x80
 800961a:	e01c      	b.n	8009656 <UART_SetConfig+0x6be>
 800961c:	2340      	movs	r3, #64	; 0x40
 800961e:	e01a      	b.n	8009656 <UART_SetConfig+0x6be>
 8009620:	2320      	movs	r3, #32
 8009622:	e018      	b.n	8009656 <UART_SetConfig+0x6be>
 8009624:	2310      	movs	r3, #16
 8009626:	e016      	b.n	8009656 <UART_SetConfig+0x6be>
 8009628:	230c      	movs	r3, #12
 800962a:	e014      	b.n	8009656 <UART_SetConfig+0x6be>
 800962c:	230a      	movs	r3, #10
 800962e:	e012      	b.n	8009656 <UART_SetConfig+0x6be>
 8009630:	40011400 	.word	0x40011400
 8009634:	58024400 	.word	0x58024400
 8009638:	40007800 	.word	0x40007800
 800963c:	40007c00 	.word	0x40007c00
 8009640:	58000c00 	.word	0x58000c00
 8009644:	2308      	movs	r3, #8
 8009646:	e006      	b.n	8009656 <UART_SetConfig+0x6be>
 8009648:	2306      	movs	r3, #6
 800964a:	e004      	b.n	8009656 <UART_SetConfig+0x6be>
 800964c:	2304      	movs	r3, #4
 800964e:	e002      	b.n	8009656 <UART_SetConfig+0x6be>
 8009650:	2302      	movs	r3, #2
 8009652:	e000      	b.n	8009656 <UART_SetConfig+0x6be>
 8009654:	2301      	movs	r3, #1
 8009656:	fbb2 f3f3 	udiv	r3, r2, r3
 800965a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800965c:	e219      	b.n	8009a92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800965e:	f107 0318 	add.w	r3, r7, #24
 8009662:	4618      	mov	r0, r3
 8009664:	f7fd ffce 	bl	8007604 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009668:	69fa      	ldr	r2, [r7, #28]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966e:	2b00      	cmp	r3, #0
 8009670:	d044      	beq.n	80096fc <UART_SetConfig+0x764>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009676:	2b01      	cmp	r3, #1
 8009678:	d03e      	beq.n	80096f8 <UART_SetConfig+0x760>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967e:	2b02      	cmp	r3, #2
 8009680:	d038      	beq.n	80096f4 <UART_SetConfig+0x75c>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009686:	2b03      	cmp	r3, #3
 8009688:	d032      	beq.n	80096f0 <UART_SetConfig+0x758>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968e:	2b04      	cmp	r3, #4
 8009690:	d02c      	beq.n	80096ec <UART_SetConfig+0x754>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009696:	2b05      	cmp	r3, #5
 8009698:	d026      	beq.n	80096e8 <UART_SetConfig+0x750>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969e:	2b06      	cmp	r3, #6
 80096a0:	d020      	beq.n	80096e4 <UART_SetConfig+0x74c>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a6:	2b07      	cmp	r3, #7
 80096a8:	d01a      	beq.n	80096e0 <UART_SetConfig+0x748>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ae:	2b08      	cmp	r3, #8
 80096b0:	d014      	beq.n	80096dc <UART_SetConfig+0x744>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b6:	2b09      	cmp	r3, #9
 80096b8:	d00e      	beq.n	80096d8 <UART_SetConfig+0x740>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096be:	2b0a      	cmp	r3, #10
 80096c0:	d008      	beq.n	80096d4 <UART_SetConfig+0x73c>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c6:	2b0b      	cmp	r3, #11
 80096c8:	d102      	bne.n	80096d0 <UART_SetConfig+0x738>
 80096ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096ce:	e016      	b.n	80096fe <UART_SetConfig+0x766>
 80096d0:	2301      	movs	r3, #1
 80096d2:	e014      	b.n	80096fe <UART_SetConfig+0x766>
 80096d4:	2380      	movs	r3, #128	; 0x80
 80096d6:	e012      	b.n	80096fe <UART_SetConfig+0x766>
 80096d8:	2340      	movs	r3, #64	; 0x40
 80096da:	e010      	b.n	80096fe <UART_SetConfig+0x766>
 80096dc:	2320      	movs	r3, #32
 80096de:	e00e      	b.n	80096fe <UART_SetConfig+0x766>
 80096e0:	2310      	movs	r3, #16
 80096e2:	e00c      	b.n	80096fe <UART_SetConfig+0x766>
 80096e4:	230c      	movs	r3, #12
 80096e6:	e00a      	b.n	80096fe <UART_SetConfig+0x766>
 80096e8:	230a      	movs	r3, #10
 80096ea:	e008      	b.n	80096fe <UART_SetConfig+0x766>
 80096ec:	2308      	movs	r3, #8
 80096ee:	e006      	b.n	80096fe <UART_SetConfig+0x766>
 80096f0:	2306      	movs	r3, #6
 80096f2:	e004      	b.n	80096fe <UART_SetConfig+0x766>
 80096f4:	2304      	movs	r3, #4
 80096f6:	e002      	b.n	80096fe <UART_SetConfig+0x766>
 80096f8:	2302      	movs	r3, #2
 80096fa:	e000      	b.n	80096fe <UART_SetConfig+0x766>
 80096fc:	2301      	movs	r3, #1
 80096fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009702:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009704:	e1c5      	b.n	8009a92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009706:	f107 030c 	add.w	r3, r7, #12
 800970a:	4618      	mov	r0, r3
 800970c:	f7fe f8c6 	bl	800789c <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009716:	2b00      	cmp	r3, #0
 8009718:	d044      	beq.n	80097a4 <UART_SetConfig+0x80c>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971e:	2b01      	cmp	r3, #1
 8009720:	d03e      	beq.n	80097a0 <UART_SetConfig+0x808>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009726:	2b02      	cmp	r3, #2
 8009728:	d038      	beq.n	800979c <UART_SetConfig+0x804>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972e:	2b03      	cmp	r3, #3
 8009730:	d032      	beq.n	8009798 <UART_SetConfig+0x800>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009736:	2b04      	cmp	r3, #4
 8009738:	d02c      	beq.n	8009794 <UART_SetConfig+0x7fc>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973e:	2b05      	cmp	r3, #5
 8009740:	d026      	beq.n	8009790 <UART_SetConfig+0x7f8>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009746:	2b06      	cmp	r3, #6
 8009748:	d020      	beq.n	800978c <UART_SetConfig+0x7f4>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	2b07      	cmp	r3, #7
 8009750:	d01a      	beq.n	8009788 <UART_SetConfig+0x7f0>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009756:	2b08      	cmp	r3, #8
 8009758:	d014      	beq.n	8009784 <UART_SetConfig+0x7ec>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975e:	2b09      	cmp	r3, #9
 8009760:	d00e      	beq.n	8009780 <UART_SetConfig+0x7e8>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009766:	2b0a      	cmp	r3, #10
 8009768:	d008      	beq.n	800977c <UART_SetConfig+0x7e4>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976e:	2b0b      	cmp	r3, #11
 8009770:	d102      	bne.n	8009778 <UART_SetConfig+0x7e0>
 8009772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009776:	e016      	b.n	80097a6 <UART_SetConfig+0x80e>
 8009778:	2301      	movs	r3, #1
 800977a:	e014      	b.n	80097a6 <UART_SetConfig+0x80e>
 800977c:	2380      	movs	r3, #128	; 0x80
 800977e:	e012      	b.n	80097a6 <UART_SetConfig+0x80e>
 8009780:	2340      	movs	r3, #64	; 0x40
 8009782:	e010      	b.n	80097a6 <UART_SetConfig+0x80e>
 8009784:	2320      	movs	r3, #32
 8009786:	e00e      	b.n	80097a6 <UART_SetConfig+0x80e>
 8009788:	2310      	movs	r3, #16
 800978a:	e00c      	b.n	80097a6 <UART_SetConfig+0x80e>
 800978c:	230c      	movs	r3, #12
 800978e:	e00a      	b.n	80097a6 <UART_SetConfig+0x80e>
 8009790:	230a      	movs	r3, #10
 8009792:	e008      	b.n	80097a6 <UART_SetConfig+0x80e>
 8009794:	2308      	movs	r3, #8
 8009796:	e006      	b.n	80097a6 <UART_SetConfig+0x80e>
 8009798:	2306      	movs	r3, #6
 800979a:	e004      	b.n	80097a6 <UART_SetConfig+0x80e>
 800979c:	2304      	movs	r3, #4
 800979e:	e002      	b.n	80097a6 <UART_SetConfig+0x80e>
 80097a0:	2302      	movs	r3, #2
 80097a2:	e000      	b.n	80097a6 <UART_SetConfig+0x80e>
 80097a4:	2301      	movs	r3, #1
 80097a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80097aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097ac:	e171      	b.n	8009a92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097ae:	4b7a      	ldr	r3, [pc, #488]	; (8009998 <UART_SetConfig+0xa00>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0320 	and.w	r3, r3, #32
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d054      	beq.n	8009864 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80097ba:	4b77      	ldr	r3, [pc, #476]	; (8009998 <UART_SetConfig+0xa00>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	08db      	lsrs	r3, r3, #3
 80097c0:	f003 0303 	and.w	r3, r3, #3
 80097c4:	4a75      	ldr	r2, [pc, #468]	; (800999c <UART_SetConfig+0xa04>)
 80097c6:	40da      	lsrs	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d044      	beq.n	800985a <UART_SetConfig+0x8c2>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d03e      	beq.n	8009856 <UART_SetConfig+0x8be>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d038      	beq.n	8009852 <UART_SetConfig+0x8ba>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e4:	2b03      	cmp	r3, #3
 80097e6:	d032      	beq.n	800984e <UART_SetConfig+0x8b6>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ec:	2b04      	cmp	r3, #4
 80097ee:	d02c      	beq.n	800984a <UART_SetConfig+0x8b2>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f4:	2b05      	cmp	r3, #5
 80097f6:	d026      	beq.n	8009846 <UART_SetConfig+0x8ae>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fc:	2b06      	cmp	r3, #6
 80097fe:	d020      	beq.n	8009842 <UART_SetConfig+0x8aa>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009804:	2b07      	cmp	r3, #7
 8009806:	d01a      	beq.n	800983e <UART_SetConfig+0x8a6>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	2b08      	cmp	r3, #8
 800980e:	d014      	beq.n	800983a <UART_SetConfig+0x8a2>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009814:	2b09      	cmp	r3, #9
 8009816:	d00e      	beq.n	8009836 <UART_SetConfig+0x89e>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981c:	2b0a      	cmp	r3, #10
 800981e:	d008      	beq.n	8009832 <UART_SetConfig+0x89a>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009824:	2b0b      	cmp	r3, #11
 8009826:	d102      	bne.n	800982e <UART_SetConfig+0x896>
 8009828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800982c:	e016      	b.n	800985c <UART_SetConfig+0x8c4>
 800982e:	2301      	movs	r3, #1
 8009830:	e014      	b.n	800985c <UART_SetConfig+0x8c4>
 8009832:	2380      	movs	r3, #128	; 0x80
 8009834:	e012      	b.n	800985c <UART_SetConfig+0x8c4>
 8009836:	2340      	movs	r3, #64	; 0x40
 8009838:	e010      	b.n	800985c <UART_SetConfig+0x8c4>
 800983a:	2320      	movs	r3, #32
 800983c:	e00e      	b.n	800985c <UART_SetConfig+0x8c4>
 800983e:	2310      	movs	r3, #16
 8009840:	e00c      	b.n	800985c <UART_SetConfig+0x8c4>
 8009842:	230c      	movs	r3, #12
 8009844:	e00a      	b.n	800985c <UART_SetConfig+0x8c4>
 8009846:	230a      	movs	r3, #10
 8009848:	e008      	b.n	800985c <UART_SetConfig+0x8c4>
 800984a:	2308      	movs	r3, #8
 800984c:	e006      	b.n	800985c <UART_SetConfig+0x8c4>
 800984e:	2306      	movs	r3, #6
 8009850:	e004      	b.n	800985c <UART_SetConfig+0x8c4>
 8009852:	2304      	movs	r3, #4
 8009854:	e002      	b.n	800985c <UART_SetConfig+0x8c4>
 8009856:	2302      	movs	r3, #2
 8009858:	e000      	b.n	800985c <UART_SetConfig+0x8c4>
 800985a:	2301      	movs	r3, #1
 800985c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009860:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8009862:	e116      	b.n	8009a92 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009868:	2b00      	cmp	r3, #0
 800986a:	d043      	beq.n	80098f4 <UART_SetConfig+0x95c>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009870:	2b01      	cmp	r3, #1
 8009872:	d03d      	beq.n	80098f0 <UART_SetConfig+0x958>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009878:	2b02      	cmp	r3, #2
 800987a:	d037      	beq.n	80098ec <UART_SetConfig+0x954>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009880:	2b03      	cmp	r3, #3
 8009882:	d031      	beq.n	80098e8 <UART_SetConfig+0x950>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009888:	2b04      	cmp	r3, #4
 800988a:	d02b      	beq.n	80098e4 <UART_SetConfig+0x94c>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009890:	2b05      	cmp	r3, #5
 8009892:	d025      	beq.n	80098e0 <UART_SetConfig+0x948>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009898:	2b06      	cmp	r3, #6
 800989a:	d01f      	beq.n	80098dc <UART_SetConfig+0x944>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a0:	2b07      	cmp	r3, #7
 80098a2:	d019      	beq.n	80098d8 <UART_SetConfig+0x940>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a8:	2b08      	cmp	r3, #8
 80098aa:	d013      	beq.n	80098d4 <UART_SetConfig+0x93c>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b0:	2b09      	cmp	r3, #9
 80098b2:	d00d      	beq.n	80098d0 <UART_SetConfig+0x938>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b8:	2b0a      	cmp	r3, #10
 80098ba:	d007      	beq.n	80098cc <UART_SetConfig+0x934>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c0:	2b0b      	cmp	r3, #11
 80098c2:	d101      	bne.n	80098c8 <UART_SetConfig+0x930>
 80098c4:	4b36      	ldr	r3, [pc, #216]	; (80099a0 <UART_SetConfig+0xa08>)
 80098c6:	e016      	b.n	80098f6 <UART_SetConfig+0x95e>
 80098c8:	4b34      	ldr	r3, [pc, #208]	; (800999c <UART_SetConfig+0xa04>)
 80098ca:	e014      	b.n	80098f6 <UART_SetConfig+0x95e>
 80098cc:	4b35      	ldr	r3, [pc, #212]	; (80099a4 <UART_SetConfig+0xa0c>)
 80098ce:	e012      	b.n	80098f6 <UART_SetConfig+0x95e>
 80098d0:	4b35      	ldr	r3, [pc, #212]	; (80099a8 <UART_SetConfig+0xa10>)
 80098d2:	e010      	b.n	80098f6 <UART_SetConfig+0x95e>
 80098d4:	4b35      	ldr	r3, [pc, #212]	; (80099ac <UART_SetConfig+0xa14>)
 80098d6:	e00e      	b.n	80098f6 <UART_SetConfig+0x95e>
 80098d8:	4b35      	ldr	r3, [pc, #212]	; (80099b0 <UART_SetConfig+0xa18>)
 80098da:	e00c      	b.n	80098f6 <UART_SetConfig+0x95e>
 80098dc:	4b35      	ldr	r3, [pc, #212]	; (80099b4 <UART_SetConfig+0xa1c>)
 80098de:	e00a      	b.n	80098f6 <UART_SetConfig+0x95e>
 80098e0:	4b35      	ldr	r3, [pc, #212]	; (80099b8 <UART_SetConfig+0xa20>)
 80098e2:	e008      	b.n	80098f6 <UART_SetConfig+0x95e>
 80098e4:	4b35      	ldr	r3, [pc, #212]	; (80099bc <UART_SetConfig+0xa24>)
 80098e6:	e006      	b.n	80098f6 <UART_SetConfig+0x95e>
 80098e8:	4b35      	ldr	r3, [pc, #212]	; (80099c0 <UART_SetConfig+0xa28>)
 80098ea:	e004      	b.n	80098f6 <UART_SetConfig+0x95e>
 80098ec:	4b35      	ldr	r3, [pc, #212]	; (80099c4 <UART_SetConfig+0xa2c>)
 80098ee:	e002      	b.n	80098f6 <UART_SetConfig+0x95e>
 80098f0:	4b35      	ldr	r3, [pc, #212]	; (80099c8 <UART_SetConfig+0xa30>)
 80098f2:	e000      	b.n	80098f6 <UART_SetConfig+0x95e>
 80098f4:	4b29      	ldr	r3, [pc, #164]	; (800999c <UART_SetConfig+0xa04>)
 80098f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80098f8:	e0cb      	b.n	8009a92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d046      	beq.n	8009990 <UART_SetConfig+0x9f8>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009906:	2b01      	cmp	r3, #1
 8009908:	d040      	beq.n	800998c <UART_SetConfig+0x9f4>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990e:	2b02      	cmp	r3, #2
 8009910:	d03a      	beq.n	8009988 <UART_SetConfig+0x9f0>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009916:	2b03      	cmp	r3, #3
 8009918:	d034      	beq.n	8009984 <UART_SetConfig+0x9ec>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991e:	2b04      	cmp	r3, #4
 8009920:	d02e      	beq.n	8009980 <UART_SetConfig+0x9e8>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009926:	2b05      	cmp	r3, #5
 8009928:	d028      	beq.n	800997c <UART_SetConfig+0x9e4>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992e:	2b06      	cmp	r3, #6
 8009930:	d022      	beq.n	8009978 <UART_SetConfig+0x9e0>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009936:	2b07      	cmp	r3, #7
 8009938:	d01c      	beq.n	8009974 <UART_SetConfig+0x9dc>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993e:	2b08      	cmp	r3, #8
 8009940:	d016      	beq.n	8009970 <UART_SetConfig+0x9d8>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009946:	2b09      	cmp	r3, #9
 8009948:	d00f      	beq.n	800996a <UART_SetConfig+0x9d2>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994e:	2b0a      	cmp	r3, #10
 8009950:	d008      	beq.n	8009964 <UART_SetConfig+0x9cc>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009956:	2b0b      	cmp	r3, #11
 8009958:	d102      	bne.n	8009960 <UART_SetConfig+0x9c8>
 800995a:	f643 5309 	movw	r3, #15625	; 0x3d09
 800995e:	e018      	b.n	8009992 <UART_SetConfig+0x9fa>
 8009960:	4b13      	ldr	r3, [pc, #76]	; (80099b0 <UART_SetConfig+0xa18>)
 8009962:	e016      	b.n	8009992 <UART_SetConfig+0x9fa>
 8009964:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009968:	e013      	b.n	8009992 <UART_SetConfig+0x9fa>
 800996a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800996e:	e010      	b.n	8009992 <UART_SetConfig+0x9fa>
 8009970:	4b16      	ldr	r3, [pc, #88]	; (80099cc <UART_SetConfig+0xa34>)
 8009972:	e00e      	b.n	8009992 <UART_SetConfig+0x9fa>
 8009974:	4b0a      	ldr	r3, [pc, #40]	; (80099a0 <UART_SetConfig+0xa08>)
 8009976:	e00c      	b.n	8009992 <UART_SetConfig+0x9fa>
 8009978:	4b15      	ldr	r3, [pc, #84]	; (80099d0 <UART_SetConfig+0xa38>)
 800997a:	e00a      	b.n	8009992 <UART_SetConfig+0x9fa>
 800997c:	4b15      	ldr	r3, [pc, #84]	; (80099d4 <UART_SetConfig+0xa3c>)
 800997e:	e008      	b.n	8009992 <UART_SetConfig+0x9fa>
 8009980:	4b08      	ldr	r3, [pc, #32]	; (80099a4 <UART_SetConfig+0xa0c>)
 8009982:	e006      	b.n	8009992 <UART_SetConfig+0x9fa>
 8009984:	4b14      	ldr	r3, [pc, #80]	; (80099d8 <UART_SetConfig+0xa40>)
 8009986:	e004      	b.n	8009992 <UART_SetConfig+0x9fa>
 8009988:	4b07      	ldr	r3, [pc, #28]	; (80099a8 <UART_SetConfig+0xa10>)
 800998a:	e002      	b.n	8009992 <UART_SetConfig+0x9fa>
 800998c:	4b07      	ldr	r3, [pc, #28]	; (80099ac <UART_SetConfig+0xa14>)
 800998e:	e000      	b.n	8009992 <UART_SetConfig+0x9fa>
 8009990:	4b07      	ldr	r3, [pc, #28]	; (80099b0 <UART_SetConfig+0xa18>)
 8009992:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009994:	e07d      	b.n	8009a92 <UART_SetConfig+0xafa>
 8009996:	bf00      	nop
 8009998:	58024400 	.word	0x58024400
 800999c:	03d09000 	.word	0x03d09000
 80099a0:	0003d090 	.word	0x0003d090
 80099a4:	0007a120 	.word	0x0007a120
 80099a8:	000f4240 	.word	0x000f4240
 80099ac:	001e8480 	.word	0x001e8480
 80099b0:	003d0900 	.word	0x003d0900
 80099b4:	00516155 	.word	0x00516155
 80099b8:	0061a800 	.word	0x0061a800
 80099bc:	007a1200 	.word	0x007a1200
 80099c0:	00a2c2aa 	.word	0x00a2c2aa
 80099c4:	00f42400 	.word	0x00f42400
 80099c8:	01e84800 	.word	0x01e84800
 80099cc:	0001e848 	.word	0x0001e848
 80099d0:	00051615 	.word	0x00051615
 80099d4:	00061a80 	.word	0x00061a80
 80099d8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d04e      	beq.n	8009a82 <UART_SetConfig+0xaea>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d047      	beq.n	8009a7c <UART_SetConfig+0xae4>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d040      	beq.n	8009a76 <UART_SetConfig+0xade>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f8:	2b03      	cmp	r3, #3
 80099fa:	d039      	beq.n	8009a70 <UART_SetConfig+0xad8>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a00:	2b04      	cmp	r3, #4
 8009a02:	d032      	beq.n	8009a6a <UART_SetConfig+0xad2>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a08:	2b05      	cmp	r3, #5
 8009a0a:	d02b      	beq.n	8009a64 <UART_SetConfig+0xacc>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a10:	2b06      	cmp	r3, #6
 8009a12:	d024      	beq.n	8009a5e <UART_SetConfig+0xac6>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	2b07      	cmp	r3, #7
 8009a1a:	d01d      	beq.n	8009a58 <UART_SetConfig+0xac0>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	2b08      	cmp	r3, #8
 8009a22:	d016      	beq.n	8009a52 <UART_SetConfig+0xaba>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a28:	2b09      	cmp	r3, #9
 8009a2a:	d00f      	beq.n	8009a4c <UART_SetConfig+0xab4>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a30:	2b0a      	cmp	r3, #10
 8009a32:	d008      	beq.n	8009a46 <UART_SetConfig+0xaae>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	2b0b      	cmp	r3, #11
 8009a3a:	d101      	bne.n	8009a40 <UART_SetConfig+0xaa8>
 8009a3c:	2380      	movs	r3, #128	; 0x80
 8009a3e:	e022      	b.n	8009a86 <UART_SetConfig+0xaee>
 8009a40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a44:	e01f      	b.n	8009a86 <UART_SetConfig+0xaee>
 8009a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a4a:	e01c      	b.n	8009a86 <UART_SetConfig+0xaee>
 8009a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a50:	e019      	b.n	8009a86 <UART_SetConfig+0xaee>
 8009a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a56:	e016      	b.n	8009a86 <UART_SetConfig+0xaee>
 8009a58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a5c:	e013      	b.n	8009a86 <UART_SetConfig+0xaee>
 8009a5e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009a62:	e010      	b.n	8009a86 <UART_SetConfig+0xaee>
 8009a64:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009a68:	e00d      	b.n	8009a86 <UART_SetConfig+0xaee>
 8009a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a6e:	e00a      	b.n	8009a86 <UART_SetConfig+0xaee>
 8009a70:	f241 5355 	movw	r3, #5461	; 0x1555
 8009a74:	e007      	b.n	8009a86 <UART_SetConfig+0xaee>
 8009a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a7a:	e004      	b.n	8009a86 <UART_SetConfig+0xaee>
 8009a7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009a80:	e001      	b.n	8009a86 <UART_SetConfig+0xaee>
 8009a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a88:	e003      	b.n	8009a92 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009a90:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f001 83e8 	beq.w	800b26a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	685a      	ldr	r2, [r3, #4]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	005b      	lsls	r3, r3, #1
 8009aa2:	4413      	add	r3, r2
 8009aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d305      	bcc.n	8009ab6 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d904      	bls.n	8009ac0 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009abc:	f001 bbd5 	b.w	800b26a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8009ac0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009ac4:	2b08      	cmp	r3, #8
 8009ac6:	f000 8154 	beq.w	8009d72 <UART_SetConfig+0xdda>
 8009aca:	2b08      	cmp	r3, #8
 8009acc:	dc06      	bgt.n	8009adc <UART_SetConfig+0xb44>
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d00f      	beq.n	8009af2 <UART_SetConfig+0xb5a>
 8009ad2:	2b04      	cmp	r3, #4
 8009ad4:	f000 80ac 	beq.w	8009c30 <UART_SetConfig+0xc98>
 8009ad8:	f000 bc30 	b.w	800a33c <UART_SetConfig+0x13a4>
 8009adc:	2b20      	cmp	r3, #32
 8009ade:	f000 832d 	beq.w	800a13c <UART_SetConfig+0x11a4>
 8009ae2:	2b40      	cmp	r3, #64	; 0x40
 8009ae4:	f000 83a5 	beq.w	800a232 <UART_SetConfig+0x129a>
 8009ae8:	2b10      	cmp	r3, #16
 8009aea:	f000 81e3 	beq.w	8009eb4 <UART_SetConfig+0xf1c>
 8009aee:	f000 bc25 	b.w	800a33c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009af2:	f7fd fd71 	bl	80075d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009af6:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	4618      	mov	r0, r3
 8009afc:	f04f 0100 	mov.w	r1, #0
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d067      	beq.n	8009bd8 <UART_SetConfig+0xc40>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d05e      	beq.n	8009bce <UART_SetConfig+0xc36>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d055      	beq.n	8009bc4 <UART_SetConfig+0xc2c>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1c:	2b03      	cmp	r3, #3
 8009b1e:	d04c      	beq.n	8009bba <UART_SetConfig+0xc22>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b24:	2b04      	cmp	r3, #4
 8009b26:	d043      	beq.n	8009bb0 <UART_SetConfig+0xc18>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2c:	2b05      	cmp	r3, #5
 8009b2e:	d03a      	beq.n	8009ba6 <UART_SetConfig+0xc0e>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b34:	2b06      	cmp	r3, #6
 8009b36:	d031      	beq.n	8009b9c <UART_SetConfig+0xc04>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3c:	2b07      	cmp	r3, #7
 8009b3e:	d028      	beq.n	8009b92 <UART_SetConfig+0xbfa>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b44:	2b08      	cmp	r3, #8
 8009b46:	d01f      	beq.n	8009b88 <UART_SetConfig+0xbf0>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4c:	2b09      	cmp	r3, #9
 8009b4e:	d016      	beq.n	8009b7e <UART_SetConfig+0xbe6>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b54:	2b0a      	cmp	r3, #10
 8009b56:	d00d      	beq.n	8009b74 <UART_SetConfig+0xbdc>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5c:	2b0b      	cmp	r3, #11
 8009b5e:	d104      	bne.n	8009b6a <UART_SetConfig+0xbd2>
 8009b60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b64:	f04f 0400 	mov.w	r4, #0
 8009b68:	e03a      	b.n	8009be0 <UART_SetConfig+0xc48>
 8009b6a:	f04f 0301 	mov.w	r3, #1
 8009b6e:	f04f 0400 	mov.w	r4, #0
 8009b72:	e035      	b.n	8009be0 <UART_SetConfig+0xc48>
 8009b74:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009b78:	f04f 0400 	mov.w	r4, #0
 8009b7c:	e030      	b.n	8009be0 <UART_SetConfig+0xc48>
 8009b7e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009b82:	f04f 0400 	mov.w	r4, #0
 8009b86:	e02b      	b.n	8009be0 <UART_SetConfig+0xc48>
 8009b88:	f04f 0320 	mov.w	r3, #32
 8009b8c:	f04f 0400 	mov.w	r4, #0
 8009b90:	e026      	b.n	8009be0 <UART_SetConfig+0xc48>
 8009b92:	f04f 0310 	mov.w	r3, #16
 8009b96:	f04f 0400 	mov.w	r4, #0
 8009b9a:	e021      	b.n	8009be0 <UART_SetConfig+0xc48>
 8009b9c:	f04f 030c 	mov.w	r3, #12
 8009ba0:	f04f 0400 	mov.w	r4, #0
 8009ba4:	e01c      	b.n	8009be0 <UART_SetConfig+0xc48>
 8009ba6:	f04f 030a 	mov.w	r3, #10
 8009baa:	f04f 0400 	mov.w	r4, #0
 8009bae:	e017      	b.n	8009be0 <UART_SetConfig+0xc48>
 8009bb0:	f04f 0308 	mov.w	r3, #8
 8009bb4:	f04f 0400 	mov.w	r4, #0
 8009bb8:	e012      	b.n	8009be0 <UART_SetConfig+0xc48>
 8009bba:	f04f 0306 	mov.w	r3, #6
 8009bbe:	f04f 0400 	mov.w	r4, #0
 8009bc2:	e00d      	b.n	8009be0 <UART_SetConfig+0xc48>
 8009bc4:	f04f 0304 	mov.w	r3, #4
 8009bc8:	f04f 0400 	mov.w	r4, #0
 8009bcc:	e008      	b.n	8009be0 <UART_SetConfig+0xc48>
 8009bce:	f04f 0302 	mov.w	r3, #2
 8009bd2:	f04f 0400 	mov.w	r4, #0
 8009bd6:	e003      	b.n	8009be0 <UART_SetConfig+0xc48>
 8009bd8:	f04f 0301 	mov.w	r3, #1
 8009bdc:	f04f 0400 	mov.w	r4, #0
 8009be0:	461a      	mov	r2, r3
 8009be2:	4623      	mov	r3, r4
 8009be4:	f7f6 fb78 	bl	80002d8 <__aeabi_uldivmod>
 8009be8:	4603      	mov	r3, r0
 8009bea:	460c      	mov	r4, r1
 8009bec:	4619      	mov	r1, r3
 8009bee:	4622      	mov	r2, r4
 8009bf0:	f04f 0300 	mov.w	r3, #0
 8009bf4:	f04f 0400 	mov.w	r4, #0
 8009bf8:	0214      	lsls	r4, r2, #8
 8009bfa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009bfe:	020b      	lsls	r3, r1, #8
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	6852      	ldr	r2, [r2, #4]
 8009c04:	0852      	lsrs	r2, r2, #1
 8009c06:	4611      	mov	r1, r2
 8009c08:	f04f 0200 	mov.w	r2, #0
 8009c0c:	eb13 0b01 	adds.w	fp, r3, r1
 8009c10:	eb44 0c02 	adc.w	ip, r4, r2
 8009c14:	4658      	mov	r0, fp
 8009c16:	4661      	mov	r1, ip
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	f04f 0400 	mov.w	r4, #0
 8009c20:	461a      	mov	r2, r3
 8009c22:	4623      	mov	r3, r4
 8009c24:	f7f6 fb58 	bl	80002d8 <__aeabi_uldivmod>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009c2e:	e389      	b.n	800a344 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c30:	f107 0318 	add.w	r3, r7, #24
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fd fce5 	bl	8007604 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f04f 0100 	mov.w	r1, #0
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d067      	beq.n	8009d1a <UART_SetConfig+0xd82>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d05e      	beq.n	8009d10 <UART_SetConfig+0xd78>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d055      	beq.n	8009d06 <UART_SetConfig+0xd6e>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5e:	2b03      	cmp	r3, #3
 8009c60:	d04c      	beq.n	8009cfc <UART_SetConfig+0xd64>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c66:	2b04      	cmp	r3, #4
 8009c68:	d043      	beq.n	8009cf2 <UART_SetConfig+0xd5a>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6e:	2b05      	cmp	r3, #5
 8009c70:	d03a      	beq.n	8009ce8 <UART_SetConfig+0xd50>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	2b06      	cmp	r3, #6
 8009c78:	d031      	beq.n	8009cde <UART_SetConfig+0xd46>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7e:	2b07      	cmp	r3, #7
 8009c80:	d028      	beq.n	8009cd4 <UART_SetConfig+0xd3c>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c86:	2b08      	cmp	r3, #8
 8009c88:	d01f      	beq.n	8009cca <UART_SetConfig+0xd32>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	2b09      	cmp	r3, #9
 8009c90:	d016      	beq.n	8009cc0 <UART_SetConfig+0xd28>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c96:	2b0a      	cmp	r3, #10
 8009c98:	d00d      	beq.n	8009cb6 <UART_SetConfig+0xd1e>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9e:	2b0b      	cmp	r3, #11
 8009ca0:	d104      	bne.n	8009cac <UART_SetConfig+0xd14>
 8009ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ca6:	f04f 0400 	mov.w	r4, #0
 8009caa:	e03a      	b.n	8009d22 <UART_SetConfig+0xd8a>
 8009cac:	f04f 0301 	mov.w	r3, #1
 8009cb0:	f04f 0400 	mov.w	r4, #0
 8009cb4:	e035      	b.n	8009d22 <UART_SetConfig+0xd8a>
 8009cb6:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009cba:	f04f 0400 	mov.w	r4, #0
 8009cbe:	e030      	b.n	8009d22 <UART_SetConfig+0xd8a>
 8009cc0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009cc4:	f04f 0400 	mov.w	r4, #0
 8009cc8:	e02b      	b.n	8009d22 <UART_SetConfig+0xd8a>
 8009cca:	f04f 0320 	mov.w	r3, #32
 8009cce:	f04f 0400 	mov.w	r4, #0
 8009cd2:	e026      	b.n	8009d22 <UART_SetConfig+0xd8a>
 8009cd4:	f04f 0310 	mov.w	r3, #16
 8009cd8:	f04f 0400 	mov.w	r4, #0
 8009cdc:	e021      	b.n	8009d22 <UART_SetConfig+0xd8a>
 8009cde:	f04f 030c 	mov.w	r3, #12
 8009ce2:	f04f 0400 	mov.w	r4, #0
 8009ce6:	e01c      	b.n	8009d22 <UART_SetConfig+0xd8a>
 8009ce8:	f04f 030a 	mov.w	r3, #10
 8009cec:	f04f 0400 	mov.w	r4, #0
 8009cf0:	e017      	b.n	8009d22 <UART_SetConfig+0xd8a>
 8009cf2:	f04f 0308 	mov.w	r3, #8
 8009cf6:	f04f 0400 	mov.w	r4, #0
 8009cfa:	e012      	b.n	8009d22 <UART_SetConfig+0xd8a>
 8009cfc:	f04f 0306 	mov.w	r3, #6
 8009d00:	f04f 0400 	mov.w	r4, #0
 8009d04:	e00d      	b.n	8009d22 <UART_SetConfig+0xd8a>
 8009d06:	f04f 0304 	mov.w	r3, #4
 8009d0a:	f04f 0400 	mov.w	r4, #0
 8009d0e:	e008      	b.n	8009d22 <UART_SetConfig+0xd8a>
 8009d10:	f04f 0302 	mov.w	r3, #2
 8009d14:	f04f 0400 	mov.w	r4, #0
 8009d18:	e003      	b.n	8009d22 <UART_SetConfig+0xd8a>
 8009d1a:	f04f 0301 	mov.w	r3, #1
 8009d1e:	f04f 0400 	mov.w	r4, #0
 8009d22:	461a      	mov	r2, r3
 8009d24:	4623      	mov	r3, r4
 8009d26:	f7f6 fad7 	bl	80002d8 <__aeabi_uldivmod>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	460c      	mov	r4, r1
 8009d2e:	4619      	mov	r1, r3
 8009d30:	4622      	mov	r2, r4
 8009d32:	f04f 0300 	mov.w	r3, #0
 8009d36:	f04f 0400 	mov.w	r4, #0
 8009d3a:	0214      	lsls	r4, r2, #8
 8009d3c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009d40:	020b      	lsls	r3, r1, #8
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	6852      	ldr	r2, [r2, #4]
 8009d46:	0852      	lsrs	r2, r2, #1
 8009d48:	4611      	mov	r1, r2
 8009d4a:	f04f 0200 	mov.w	r2, #0
 8009d4e:	eb13 0b01 	adds.w	fp, r3, r1
 8009d52:	eb44 0c02 	adc.w	ip, r4, r2
 8009d56:	4658      	mov	r0, fp
 8009d58:	4661      	mov	r1, ip
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	f04f 0400 	mov.w	r4, #0
 8009d62:	461a      	mov	r2, r3
 8009d64:	4623      	mov	r3, r4
 8009d66:	f7f6 fab7 	bl	80002d8 <__aeabi_uldivmod>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	460c      	mov	r4, r1
 8009d6e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009d70:	e2e8      	b.n	800a344 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d72:	f107 030c 	add.w	r3, r7, #12
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fd fd90 	bl	800789c <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f04f 0100 	mov.w	r1, #0
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d067      	beq.n	8009e5c <UART_SetConfig+0xec4>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d05e      	beq.n	8009e52 <UART_SetConfig+0xeba>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d055      	beq.n	8009e48 <UART_SetConfig+0xeb0>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da0:	2b03      	cmp	r3, #3
 8009da2:	d04c      	beq.n	8009e3e <UART_SetConfig+0xea6>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da8:	2b04      	cmp	r3, #4
 8009daa:	d043      	beq.n	8009e34 <UART_SetConfig+0xe9c>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db0:	2b05      	cmp	r3, #5
 8009db2:	d03a      	beq.n	8009e2a <UART_SetConfig+0xe92>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db8:	2b06      	cmp	r3, #6
 8009dba:	d031      	beq.n	8009e20 <UART_SetConfig+0xe88>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc0:	2b07      	cmp	r3, #7
 8009dc2:	d028      	beq.n	8009e16 <UART_SetConfig+0xe7e>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc8:	2b08      	cmp	r3, #8
 8009dca:	d01f      	beq.n	8009e0c <UART_SetConfig+0xe74>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd0:	2b09      	cmp	r3, #9
 8009dd2:	d016      	beq.n	8009e02 <UART_SetConfig+0xe6a>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd8:	2b0a      	cmp	r3, #10
 8009dda:	d00d      	beq.n	8009df8 <UART_SetConfig+0xe60>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de0:	2b0b      	cmp	r3, #11
 8009de2:	d104      	bne.n	8009dee <UART_SetConfig+0xe56>
 8009de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009de8:	f04f 0400 	mov.w	r4, #0
 8009dec:	e03a      	b.n	8009e64 <UART_SetConfig+0xecc>
 8009dee:	f04f 0301 	mov.w	r3, #1
 8009df2:	f04f 0400 	mov.w	r4, #0
 8009df6:	e035      	b.n	8009e64 <UART_SetConfig+0xecc>
 8009df8:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009dfc:	f04f 0400 	mov.w	r4, #0
 8009e00:	e030      	b.n	8009e64 <UART_SetConfig+0xecc>
 8009e02:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009e06:	f04f 0400 	mov.w	r4, #0
 8009e0a:	e02b      	b.n	8009e64 <UART_SetConfig+0xecc>
 8009e0c:	f04f 0320 	mov.w	r3, #32
 8009e10:	f04f 0400 	mov.w	r4, #0
 8009e14:	e026      	b.n	8009e64 <UART_SetConfig+0xecc>
 8009e16:	f04f 0310 	mov.w	r3, #16
 8009e1a:	f04f 0400 	mov.w	r4, #0
 8009e1e:	e021      	b.n	8009e64 <UART_SetConfig+0xecc>
 8009e20:	f04f 030c 	mov.w	r3, #12
 8009e24:	f04f 0400 	mov.w	r4, #0
 8009e28:	e01c      	b.n	8009e64 <UART_SetConfig+0xecc>
 8009e2a:	f04f 030a 	mov.w	r3, #10
 8009e2e:	f04f 0400 	mov.w	r4, #0
 8009e32:	e017      	b.n	8009e64 <UART_SetConfig+0xecc>
 8009e34:	f04f 0308 	mov.w	r3, #8
 8009e38:	f04f 0400 	mov.w	r4, #0
 8009e3c:	e012      	b.n	8009e64 <UART_SetConfig+0xecc>
 8009e3e:	f04f 0306 	mov.w	r3, #6
 8009e42:	f04f 0400 	mov.w	r4, #0
 8009e46:	e00d      	b.n	8009e64 <UART_SetConfig+0xecc>
 8009e48:	f04f 0304 	mov.w	r3, #4
 8009e4c:	f04f 0400 	mov.w	r4, #0
 8009e50:	e008      	b.n	8009e64 <UART_SetConfig+0xecc>
 8009e52:	f04f 0302 	mov.w	r3, #2
 8009e56:	f04f 0400 	mov.w	r4, #0
 8009e5a:	e003      	b.n	8009e64 <UART_SetConfig+0xecc>
 8009e5c:	f04f 0301 	mov.w	r3, #1
 8009e60:	f04f 0400 	mov.w	r4, #0
 8009e64:	461a      	mov	r2, r3
 8009e66:	4623      	mov	r3, r4
 8009e68:	f7f6 fa36 	bl	80002d8 <__aeabi_uldivmod>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	460c      	mov	r4, r1
 8009e70:	4619      	mov	r1, r3
 8009e72:	4622      	mov	r2, r4
 8009e74:	f04f 0300 	mov.w	r3, #0
 8009e78:	f04f 0400 	mov.w	r4, #0
 8009e7c:	0214      	lsls	r4, r2, #8
 8009e7e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009e82:	020b      	lsls	r3, r1, #8
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	6852      	ldr	r2, [r2, #4]
 8009e88:	0852      	lsrs	r2, r2, #1
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	f04f 0200 	mov.w	r2, #0
 8009e90:	eb13 0b01 	adds.w	fp, r3, r1
 8009e94:	eb44 0c02 	adc.w	ip, r4, r2
 8009e98:	4658      	mov	r0, fp
 8009e9a:	4661      	mov	r1, ip
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	f04f 0400 	mov.w	r4, #0
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	4623      	mov	r3, r4
 8009ea8:	f7f6 fa16 	bl	80002d8 <__aeabi_uldivmod>
 8009eac:	4603      	mov	r3, r0
 8009eae:	460c      	mov	r4, r1
 8009eb0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009eb2:	e247      	b.n	800a344 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009eb4:	4b96      	ldr	r3, [pc, #600]	; (800a110 <UART_SetConfig+0x1178>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f003 0320 	and.w	r3, r3, #32
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f000 80a3 	beq.w	800a008 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ec2:	4b93      	ldr	r3, [pc, #588]	; (800a110 <UART_SetConfig+0x1178>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	08db      	lsrs	r3, r3, #3
 8009ec8:	f003 0303 	and.w	r3, r3, #3
 8009ecc:	4a91      	ldr	r2, [pc, #580]	; (800a114 <UART_SetConfig+0x117c>)
 8009ece:	fa22 f303 	lsr.w	r3, r2, r3
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f04f 0100 	mov.w	r1, #0
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d067      	beq.n	8009fb0 <UART_SetConfig+0x1018>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d05e      	beq.n	8009fa6 <UART_SetConfig+0x100e>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d055      	beq.n	8009f9c <UART_SetConfig+0x1004>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef4:	2b03      	cmp	r3, #3
 8009ef6:	d04c      	beq.n	8009f92 <UART_SetConfig+0xffa>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efc:	2b04      	cmp	r3, #4
 8009efe:	d043      	beq.n	8009f88 <UART_SetConfig+0xff0>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f04:	2b05      	cmp	r3, #5
 8009f06:	d03a      	beq.n	8009f7e <UART_SetConfig+0xfe6>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0c:	2b06      	cmp	r3, #6
 8009f0e:	d031      	beq.n	8009f74 <UART_SetConfig+0xfdc>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f14:	2b07      	cmp	r3, #7
 8009f16:	d028      	beq.n	8009f6a <UART_SetConfig+0xfd2>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1c:	2b08      	cmp	r3, #8
 8009f1e:	d01f      	beq.n	8009f60 <UART_SetConfig+0xfc8>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f24:	2b09      	cmp	r3, #9
 8009f26:	d016      	beq.n	8009f56 <UART_SetConfig+0xfbe>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2c:	2b0a      	cmp	r3, #10
 8009f2e:	d00d      	beq.n	8009f4c <UART_SetConfig+0xfb4>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	2b0b      	cmp	r3, #11
 8009f36:	d104      	bne.n	8009f42 <UART_SetConfig+0xfaa>
 8009f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f3c:	f04f 0400 	mov.w	r4, #0
 8009f40:	e03a      	b.n	8009fb8 <UART_SetConfig+0x1020>
 8009f42:	f04f 0301 	mov.w	r3, #1
 8009f46:	f04f 0400 	mov.w	r4, #0
 8009f4a:	e035      	b.n	8009fb8 <UART_SetConfig+0x1020>
 8009f4c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009f50:	f04f 0400 	mov.w	r4, #0
 8009f54:	e030      	b.n	8009fb8 <UART_SetConfig+0x1020>
 8009f56:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009f5a:	f04f 0400 	mov.w	r4, #0
 8009f5e:	e02b      	b.n	8009fb8 <UART_SetConfig+0x1020>
 8009f60:	f04f 0320 	mov.w	r3, #32
 8009f64:	f04f 0400 	mov.w	r4, #0
 8009f68:	e026      	b.n	8009fb8 <UART_SetConfig+0x1020>
 8009f6a:	f04f 0310 	mov.w	r3, #16
 8009f6e:	f04f 0400 	mov.w	r4, #0
 8009f72:	e021      	b.n	8009fb8 <UART_SetConfig+0x1020>
 8009f74:	f04f 030c 	mov.w	r3, #12
 8009f78:	f04f 0400 	mov.w	r4, #0
 8009f7c:	e01c      	b.n	8009fb8 <UART_SetConfig+0x1020>
 8009f7e:	f04f 030a 	mov.w	r3, #10
 8009f82:	f04f 0400 	mov.w	r4, #0
 8009f86:	e017      	b.n	8009fb8 <UART_SetConfig+0x1020>
 8009f88:	f04f 0308 	mov.w	r3, #8
 8009f8c:	f04f 0400 	mov.w	r4, #0
 8009f90:	e012      	b.n	8009fb8 <UART_SetConfig+0x1020>
 8009f92:	f04f 0306 	mov.w	r3, #6
 8009f96:	f04f 0400 	mov.w	r4, #0
 8009f9a:	e00d      	b.n	8009fb8 <UART_SetConfig+0x1020>
 8009f9c:	f04f 0304 	mov.w	r3, #4
 8009fa0:	f04f 0400 	mov.w	r4, #0
 8009fa4:	e008      	b.n	8009fb8 <UART_SetConfig+0x1020>
 8009fa6:	f04f 0302 	mov.w	r3, #2
 8009faa:	f04f 0400 	mov.w	r4, #0
 8009fae:	e003      	b.n	8009fb8 <UART_SetConfig+0x1020>
 8009fb0:	f04f 0301 	mov.w	r3, #1
 8009fb4:	f04f 0400 	mov.w	r4, #0
 8009fb8:	461a      	mov	r2, r3
 8009fba:	4623      	mov	r3, r4
 8009fbc:	f7f6 f98c 	bl	80002d8 <__aeabi_uldivmod>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4622      	mov	r2, r4
 8009fc8:	f04f 0300 	mov.w	r3, #0
 8009fcc:	f04f 0400 	mov.w	r4, #0
 8009fd0:	0214      	lsls	r4, r2, #8
 8009fd2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009fd6:	020b      	lsls	r3, r1, #8
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	6852      	ldr	r2, [r2, #4]
 8009fdc:	0852      	lsrs	r2, r2, #1
 8009fde:	4611      	mov	r1, r2
 8009fe0:	f04f 0200 	mov.w	r2, #0
 8009fe4:	eb13 0b01 	adds.w	fp, r3, r1
 8009fe8:	eb44 0c02 	adc.w	ip, r4, r2
 8009fec:	4658      	mov	r0, fp
 8009fee:	4661      	mov	r1, ip
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	f04f 0400 	mov.w	r4, #0
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	4623      	mov	r3, r4
 8009ffc:	f7f6 f96c 	bl	80002d8 <__aeabi_uldivmod>
 800a000:	4603      	mov	r3, r0
 800a002:	460c      	mov	r4, r1
 800a004:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800a006:	e19d      	b.n	800a344 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d05b      	beq.n	800a0c8 <UART_SetConfig+0x1130>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a014:	2b01      	cmp	r3, #1
 800a016:	d053      	beq.n	800a0c0 <UART_SetConfig+0x1128>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d04b      	beq.n	800a0b8 <UART_SetConfig+0x1120>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a024:	2b03      	cmp	r3, #3
 800a026:	d043      	beq.n	800a0b0 <UART_SetConfig+0x1118>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02c:	2b04      	cmp	r3, #4
 800a02e:	d03b      	beq.n	800a0a8 <UART_SetConfig+0x1110>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a034:	2b05      	cmp	r3, #5
 800a036:	d033      	beq.n	800a0a0 <UART_SetConfig+0x1108>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03c:	2b06      	cmp	r3, #6
 800a03e:	d02b      	beq.n	800a098 <UART_SetConfig+0x1100>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a044:	2b07      	cmp	r3, #7
 800a046:	d023      	beq.n	800a090 <UART_SetConfig+0x10f8>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04c:	2b08      	cmp	r3, #8
 800a04e:	d01b      	beq.n	800a088 <UART_SetConfig+0x10f0>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a054:	2b09      	cmp	r3, #9
 800a056:	d013      	beq.n	800a080 <UART_SetConfig+0x10e8>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05c:	2b0a      	cmp	r3, #10
 800a05e:	d00b      	beq.n	800a078 <UART_SetConfig+0x10e0>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a064:	2b0b      	cmp	r3, #11
 800a066:	d103      	bne.n	800a070 <UART_SetConfig+0x10d8>
 800a068:	4b2a      	ldr	r3, [pc, #168]	; (800a114 <UART_SetConfig+0x117c>)
 800a06a:	f04f 0400 	mov.w	r4, #0
 800a06e:	e02e      	b.n	800a0ce <UART_SetConfig+0x1136>
 800a070:	4b29      	ldr	r3, [pc, #164]	; (800a118 <UART_SetConfig+0x1180>)
 800a072:	f04f 0403 	mov.w	r4, #3
 800a076:	e02a      	b.n	800a0ce <UART_SetConfig+0x1136>
 800a078:	4b28      	ldr	r3, [pc, #160]	; (800a11c <UART_SetConfig+0x1184>)
 800a07a:	f04f 0400 	mov.w	r4, #0
 800a07e:	e026      	b.n	800a0ce <UART_SetConfig+0x1136>
 800a080:	4b27      	ldr	r3, [pc, #156]	; (800a120 <UART_SetConfig+0x1188>)
 800a082:	f04f 0400 	mov.w	r4, #0
 800a086:	e022      	b.n	800a0ce <UART_SetConfig+0x1136>
 800a088:	4b26      	ldr	r3, [pc, #152]	; (800a124 <UART_SetConfig+0x118c>)
 800a08a:	f04f 0400 	mov.w	r4, #0
 800a08e:	e01e      	b.n	800a0ce <UART_SetConfig+0x1136>
 800a090:	4b25      	ldr	r3, [pc, #148]	; (800a128 <UART_SetConfig+0x1190>)
 800a092:	f04f 0400 	mov.w	r4, #0
 800a096:	e01a      	b.n	800a0ce <UART_SetConfig+0x1136>
 800a098:	a419      	add	r4, pc, #100	; (adr r4, 800a100 <UART_SetConfig+0x1168>)
 800a09a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a09e:	e016      	b.n	800a0ce <UART_SetConfig+0x1136>
 800a0a0:	4b22      	ldr	r3, [pc, #136]	; (800a12c <UART_SetConfig+0x1194>)
 800a0a2:	f04f 0400 	mov.w	r4, #0
 800a0a6:	e012      	b.n	800a0ce <UART_SetConfig+0x1136>
 800a0a8:	4b21      	ldr	r3, [pc, #132]	; (800a130 <UART_SetConfig+0x1198>)
 800a0aa:	f04f 0400 	mov.w	r4, #0
 800a0ae:	e00e      	b.n	800a0ce <UART_SetConfig+0x1136>
 800a0b0:	a415      	add	r4, pc, #84	; (adr r4, 800a108 <UART_SetConfig+0x1170>)
 800a0b2:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a0b6:	e00a      	b.n	800a0ce <UART_SetConfig+0x1136>
 800a0b8:	4b1e      	ldr	r3, [pc, #120]	; (800a134 <UART_SetConfig+0x119c>)
 800a0ba:	f04f 0400 	mov.w	r4, #0
 800a0be:	e006      	b.n	800a0ce <UART_SetConfig+0x1136>
 800a0c0:	4b1d      	ldr	r3, [pc, #116]	; (800a138 <UART_SetConfig+0x11a0>)
 800a0c2:	f04f 0401 	mov.w	r4, #1
 800a0c6:	e002      	b.n	800a0ce <UART_SetConfig+0x1136>
 800a0c8:	4b13      	ldr	r3, [pc, #76]	; (800a118 <UART_SetConfig+0x1180>)
 800a0ca:	f04f 0403 	mov.w	r4, #3
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	6852      	ldr	r2, [r2, #4]
 800a0d2:	0852      	lsrs	r2, r2, #1
 800a0d4:	4611      	mov	r1, r2
 800a0d6:	f04f 0200 	mov.w	r2, #0
 800a0da:	eb13 0b01 	adds.w	fp, r3, r1
 800a0de:	eb44 0c02 	adc.w	ip, r4, r2
 800a0e2:	4658      	mov	r0, fp
 800a0e4:	4661      	mov	r1, ip
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	f04f 0400 	mov.w	r4, #0
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	4623      	mov	r3, r4
 800a0f2:	f7f6 f8f1 	bl	80002d8 <__aeabi_uldivmod>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a0fc:	e122      	b.n	800a344 <UART_SetConfig+0x13ac>
 800a0fe:	bf00      	nop
 800a100:	51615500 	.word	0x51615500
 800a104:	00000000 	.word	0x00000000
 800a108:	a2c2aa00 	.word	0xa2c2aa00
 800a10c:	00000000 	.word	0x00000000
 800a110:	58024400 	.word	0x58024400
 800a114:	03d09000 	.word	0x03d09000
 800a118:	d0900000 	.word	0xd0900000
 800a11c:	07a12000 	.word	0x07a12000
 800a120:	0f424000 	.word	0x0f424000
 800a124:	1e848000 	.word	0x1e848000
 800a128:	3d090000 	.word	0x3d090000
 800a12c:	61a80000 	.word	0x61a80000
 800a130:	7a120000 	.word	0x7a120000
 800a134:	f4240000 	.word	0xf4240000
 800a138:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a140:	2b00      	cmp	r3, #0
 800a142:	d05b      	beq.n	800a1fc <UART_SetConfig+0x1264>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d053      	beq.n	800a1f4 <UART_SetConfig+0x125c>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a150:	2b02      	cmp	r3, #2
 800a152:	d04b      	beq.n	800a1ec <UART_SetConfig+0x1254>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a158:	2b03      	cmp	r3, #3
 800a15a:	d043      	beq.n	800a1e4 <UART_SetConfig+0x124c>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a160:	2b04      	cmp	r3, #4
 800a162:	d03b      	beq.n	800a1dc <UART_SetConfig+0x1244>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a168:	2b05      	cmp	r3, #5
 800a16a:	d033      	beq.n	800a1d4 <UART_SetConfig+0x123c>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a170:	2b06      	cmp	r3, #6
 800a172:	d02b      	beq.n	800a1cc <UART_SetConfig+0x1234>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a178:	2b07      	cmp	r3, #7
 800a17a:	d023      	beq.n	800a1c4 <UART_SetConfig+0x122c>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a180:	2b08      	cmp	r3, #8
 800a182:	d01b      	beq.n	800a1bc <UART_SetConfig+0x1224>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a188:	2b09      	cmp	r3, #9
 800a18a:	d013      	beq.n	800a1b4 <UART_SetConfig+0x121c>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a190:	2b0a      	cmp	r3, #10
 800a192:	d00b      	beq.n	800a1ac <UART_SetConfig+0x1214>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a198:	2b0b      	cmp	r3, #11
 800a19a:	d103      	bne.n	800a1a4 <UART_SetConfig+0x120c>
 800a19c:	4bc0      	ldr	r3, [pc, #768]	; (800a4a0 <UART_SetConfig+0x1508>)
 800a19e:	f04f 0400 	mov.w	r4, #0
 800a1a2:	e02e      	b.n	800a202 <UART_SetConfig+0x126a>
 800a1a4:	4bbf      	ldr	r3, [pc, #764]	; (800a4a4 <UART_SetConfig+0x150c>)
 800a1a6:	f04f 0400 	mov.w	r4, #0
 800a1aa:	e02a      	b.n	800a202 <UART_SetConfig+0x126a>
 800a1ac:	4bbe      	ldr	r3, [pc, #760]	; (800a4a8 <UART_SetConfig+0x1510>)
 800a1ae:	f04f 0400 	mov.w	r4, #0
 800a1b2:	e026      	b.n	800a202 <UART_SetConfig+0x126a>
 800a1b4:	4bbd      	ldr	r3, [pc, #756]	; (800a4ac <UART_SetConfig+0x1514>)
 800a1b6:	f04f 0400 	mov.w	r4, #0
 800a1ba:	e022      	b.n	800a202 <UART_SetConfig+0x126a>
 800a1bc:	4bbc      	ldr	r3, [pc, #752]	; (800a4b0 <UART_SetConfig+0x1518>)
 800a1be:	f04f 0400 	mov.w	r4, #0
 800a1c2:	e01e      	b.n	800a202 <UART_SetConfig+0x126a>
 800a1c4:	4bbb      	ldr	r3, [pc, #748]	; (800a4b4 <UART_SetConfig+0x151c>)
 800a1c6:	f04f 0400 	mov.w	r4, #0
 800a1ca:	e01a      	b.n	800a202 <UART_SetConfig+0x126a>
 800a1cc:	a4b0      	add	r4, pc, #704	; (adr r4, 800a490 <UART_SetConfig+0x14f8>)
 800a1ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a1d2:	e016      	b.n	800a202 <UART_SetConfig+0x126a>
 800a1d4:	4bb8      	ldr	r3, [pc, #736]	; (800a4b8 <UART_SetConfig+0x1520>)
 800a1d6:	f04f 0400 	mov.w	r4, #0
 800a1da:	e012      	b.n	800a202 <UART_SetConfig+0x126a>
 800a1dc:	4bb7      	ldr	r3, [pc, #732]	; (800a4bc <UART_SetConfig+0x1524>)
 800a1de:	f04f 0400 	mov.w	r4, #0
 800a1e2:	e00e      	b.n	800a202 <UART_SetConfig+0x126a>
 800a1e4:	a4ac      	add	r4, pc, #688	; (adr r4, 800a498 <UART_SetConfig+0x1500>)
 800a1e6:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a1ea:	e00a      	b.n	800a202 <UART_SetConfig+0x126a>
 800a1ec:	4bb4      	ldr	r3, [pc, #720]	; (800a4c0 <UART_SetConfig+0x1528>)
 800a1ee:	f04f 0400 	mov.w	r4, #0
 800a1f2:	e006      	b.n	800a202 <UART_SetConfig+0x126a>
 800a1f4:	4bb3      	ldr	r3, [pc, #716]	; (800a4c4 <UART_SetConfig+0x152c>)
 800a1f6:	f04f 0400 	mov.w	r4, #0
 800a1fa:	e002      	b.n	800a202 <UART_SetConfig+0x126a>
 800a1fc:	4ba9      	ldr	r3, [pc, #676]	; (800a4a4 <UART_SetConfig+0x150c>)
 800a1fe:	f04f 0400 	mov.w	r4, #0
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	6852      	ldr	r2, [r2, #4]
 800a206:	0852      	lsrs	r2, r2, #1
 800a208:	4611      	mov	r1, r2
 800a20a:	f04f 0200 	mov.w	r2, #0
 800a20e:	eb13 0b01 	adds.w	fp, r3, r1
 800a212:	eb44 0c02 	adc.w	ip, r4, r2
 800a216:	4658      	mov	r0, fp
 800a218:	4661      	mov	r1, ip
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	f04f 0400 	mov.w	r4, #0
 800a222:	461a      	mov	r2, r3
 800a224:	4623      	mov	r3, r4
 800a226:	f7f6 f857 	bl	80002d8 <__aeabi_uldivmod>
 800a22a:	4603      	mov	r3, r0
 800a22c:	460c      	mov	r4, r1
 800a22e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a230:	e088      	b.n	800a344 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a236:	2b00      	cmp	r3, #0
 800a238:	d064      	beq.n	800a304 <UART_SetConfig+0x136c>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d05b      	beq.n	800a2fa <UART_SetConfig+0x1362>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a246:	2b02      	cmp	r3, #2
 800a248:	d052      	beq.n	800a2f0 <UART_SetConfig+0x1358>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24e:	2b03      	cmp	r3, #3
 800a250:	d04a      	beq.n	800a2e8 <UART_SetConfig+0x1350>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a256:	2b04      	cmp	r3, #4
 800a258:	d041      	beq.n	800a2de <UART_SetConfig+0x1346>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25e:	2b05      	cmp	r3, #5
 800a260:	d039      	beq.n	800a2d6 <UART_SetConfig+0x133e>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a266:	2b06      	cmp	r3, #6
 800a268:	d031      	beq.n	800a2ce <UART_SetConfig+0x1336>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	2b07      	cmp	r3, #7
 800a270:	d028      	beq.n	800a2c4 <UART_SetConfig+0x132c>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a276:	2b08      	cmp	r3, #8
 800a278:	d01f      	beq.n	800a2ba <UART_SetConfig+0x1322>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27e:	2b09      	cmp	r3, #9
 800a280:	d016      	beq.n	800a2b0 <UART_SetConfig+0x1318>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a286:	2b0a      	cmp	r3, #10
 800a288:	d00d      	beq.n	800a2a6 <UART_SetConfig+0x130e>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28e:	2b0b      	cmp	r3, #11
 800a290:	d104      	bne.n	800a29c <UART_SetConfig+0x1304>
 800a292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a296:	f04f 0400 	mov.w	r4, #0
 800a29a:	e037      	b.n	800a30c <UART_SetConfig+0x1374>
 800a29c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a2a0:	f04f 0400 	mov.w	r4, #0
 800a2a4:	e032      	b.n	800a30c <UART_SetConfig+0x1374>
 800a2a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a2aa:	f04f 0400 	mov.w	r4, #0
 800a2ae:	e02d      	b.n	800a30c <UART_SetConfig+0x1374>
 800a2b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a2b4:	f04f 0400 	mov.w	r4, #0
 800a2b8:	e028      	b.n	800a30c <UART_SetConfig+0x1374>
 800a2ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a2be:	f04f 0400 	mov.w	r4, #0
 800a2c2:	e023      	b.n	800a30c <UART_SetConfig+0x1374>
 800a2c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a2c8:	f04f 0400 	mov.w	r4, #0
 800a2cc:	e01e      	b.n	800a30c <UART_SetConfig+0x1374>
 800a2ce:	4b7e      	ldr	r3, [pc, #504]	; (800a4c8 <UART_SetConfig+0x1530>)
 800a2d0:	f04f 0400 	mov.w	r4, #0
 800a2d4:	e01a      	b.n	800a30c <UART_SetConfig+0x1374>
 800a2d6:	4b7d      	ldr	r3, [pc, #500]	; (800a4cc <UART_SetConfig+0x1534>)
 800a2d8:	f04f 0400 	mov.w	r4, #0
 800a2dc:	e016      	b.n	800a30c <UART_SetConfig+0x1374>
 800a2de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a2e2:	f04f 0400 	mov.w	r4, #0
 800a2e6:	e011      	b.n	800a30c <UART_SetConfig+0x1374>
 800a2e8:	4b79      	ldr	r3, [pc, #484]	; (800a4d0 <UART_SetConfig+0x1538>)
 800a2ea:	f04f 0400 	mov.w	r4, #0
 800a2ee:	e00d      	b.n	800a30c <UART_SetConfig+0x1374>
 800a2f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a2f4:	f04f 0400 	mov.w	r4, #0
 800a2f8:	e008      	b.n	800a30c <UART_SetConfig+0x1374>
 800a2fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a2fe:	f04f 0400 	mov.w	r4, #0
 800a302:	e003      	b.n	800a30c <UART_SetConfig+0x1374>
 800a304:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a308:	f04f 0400 	mov.w	r4, #0
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	6852      	ldr	r2, [r2, #4]
 800a310:	0852      	lsrs	r2, r2, #1
 800a312:	4611      	mov	r1, r2
 800a314:	f04f 0200 	mov.w	r2, #0
 800a318:	eb13 0b01 	adds.w	fp, r3, r1
 800a31c:	eb44 0c02 	adc.w	ip, r4, r2
 800a320:	4658      	mov	r0, fp
 800a322:	4661      	mov	r1, ip
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	f04f 0400 	mov.w	r4, #0
 800a32c:	461a      	mov	r2, r3
 800a32e:	4623      	mov	r3, r4
 800a330:	f7f5 ffd2 	bl	80002d8 <__aeabi_uldivmod>
 800a334:	4603      	mov	r3, r0
 800a336:	460c      	mov	r4, r1
 800a338:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a33a:	e003      	b.n	800a344 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800a342:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a34a:	d309      	bcc.n	800a360 <UART_SetConfig+0x13c8>
 800a34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a34e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a352:	d205      	bcs.n	800a360 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a35a:	60da      	str	r2, [r3, #12]
 800a35c:	f000 bf85 	b.w	800b26a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a366:	f000 bf80 	b.w	800b26a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	69db      	ldr	r3, [r3, #28]
 800a36e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a372:	f040 83da 	bne.w	800ab2a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800a376:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a37a:	2b40      	cmp	r3, #64	; 0x40
 800a37c:	f200 83b3 	bhi.w	800aae6 <UART_SetConfig+0x1b4e>
 800a380:	a201      	add	r2, pc, #4	; (adr r2, 800a388 <UART_SetConfig+0x13f0>)
 800a382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a386:	bf00      	nop
 800a388:	0800a4d5 	.word	0x0800a4d5
 800a38c:	0800a58d 	.word	0x0800a58d
 800a390:	0800aae7 	.word	0x0800aae7
 800a394:	0800aae7 	.word	0x0800aae7
 800a398:	0800a645 	.word	0x0800a645
 800a39c:	0800aae7 	.word	0x0800aae7
 800a3a0:	0800aae7 	.word	0x0800aae7
 800a3a4:	0800aae7 	.word	0x0800aae7
 800a3a8:	0800a701 	.word	0x0800a701
 800a3ac:	0800aae7 	.word	0x0800aae7
 800a3b0:	0800aae7 	.word	0x0800aae7
 800a3b4:	0800aae7 	.word	0x0800aae7
 800a3b8:	0800aae7 	.word	0x0800aae7
 800a3bc:	0800aae7 	.word	0x0800aae7
 800a3c0:	0800aae7 	.word	0x0800aae7
 800a3c4:	0800aae7 	.word	0x0800aae7
 800a3c8:	0800a7bd 	.word	0x0800a7bd
 800a3cc:	0800aae7 	.word	0x0800aae7
 800a3d0:	0800aae7 	.word	0x0800aae7
 800a3d4:	0800aae7 	.word	0x0800aae7
 800a3d8:	0800aae7 	.word	0x0800aae7
 800a3dc:	0800aae7 	.word	0x0800aae7
 800a3e0:	0800aae7 	.word	0x0800aae7
 800a3e4:	0800aae7 	.word	0x0800aae7
 800a3e8:	0800aae7 	.word	0x0800aae7
 800a3ec:	0800aae7 	.word	0x0800aae7
 800a3f0:	0800aae7 	.word	0x0800aae7
 800a3f4:	0800aae7 	.word	0x0800aae7
 800a3f8:	0800aae7 	.word	0x0800aae7
 800a3fc:	0800aae7 	.word	0x0800aae7
 800a400:	0800aae7 	.word	0x0800aae7
 800a404:	0800aae7 	.word	0x0800aae7
 800a408:	0800a92f 	.word	0x0800a92f
 800a40c:	0800aae7 	.word	0x0800aae7
 800a410:	0800aae7 	.word	0x0800aae7
 800a414:	0800aae7 	.word	0x0800aae7
 800a418:	0800aae7 	.word	0x0800aae7
 800a41c:	0800aae7 	.word	0x0800aae7
 800a420:	0800aae7 	.word	0x0800aae7
 800a424:	0800aae7 	.word	0x0800aae7
 800a428:	0800aae7 	.word	0x0800aae7
 800a42c:	0800aae7 	.word	0x0800aae7
 800a430:	0800aae7 	.word	0x0800aae7
 800a434:	0800aae7 	.word	0x0800aae7
 800a438:	0800aae7 	.word	0x0800aae7
 800a43c:	0800aae7 	.word	0x0800aae7
 800a440:	0800aae7 	.word	0x0800aae7
 800a444:	0800aae7 	.word	0x0800aae7
 800a448:	0800aae7 	.word	0x0800aae7
 800a44c:	0800aae7 	.word	0x0800aae7
 800a450:	0800aae7 	.word	0x0800aae7
 800a454:	0800aae7 	.word	0x0800aae7
 800a458:	0800aae7 	.word	0x0800aae7
 800a45c:	0800aae7 	.word	0x0800aae7
 800a460:	0800aae7 	.word	0x0800aae7
 800a464:	0800aae7 	.word	0x0800aae7
 800a468:	0800aae7 	.word	0x0800aae7
 800a46c:	0800aae7 	.word	0x0800aae7
 800a470:	0800aae7 	.word	0x0800aae7
 800a474:	0800aae7 	.word	0x0800aae7
 800a478:	0800aae7 	.word	0x0800aae7
 800a47c:	0800aae7 	.word	0x0800aae7
 800a480:	0800aae7 	.word	0x0800aae7
 800a484:	0800aae7 	.word	0x0800aae7
 800a488:	0800aa25 	.word	0x0800aa25
 800a48c:	f3af 8000 	nop.w
 800a490:	05161500 	.word	0x05161500
 800a494:	00000000 	.word	0x00000000
 800a498:	0a2c2a00 	.word	0x0a2c2a00
 800a49c:	00000000 	.word	0x00000000
 800a4a0:	003d0900 	.word	0x003d0900
 800a4a4:	3d090000 	.word	0x3d090000
 800a4a8:	007a1200 	.word	0x007a1200
 800a4ac:	00f42400 	.word	0x00f42400
 800a4b0:	01e84800 	.word	0x01e84800
 800a4b4:	03d09000 	.word	0x03d09000
 800a4b8:	061a8000 	.word	0x061a8000
 800a4bc:	07a12000 	.word	0x07a12000
 800a4c0:	0f424000 	.word	0x0f424000
 800a4c4:	1e848000 	.word	0x1e848000
 800a4c8:	000aaa00 	.word	0x000aaa00
 800a4cc:	000ccc00 	.word	0x000ccc00
 800a4d0:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4d4:	f7fb fefe 	bl	80062d4 <HAL_RCC_GetPCLK1Freq>
 800a4d8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d044      	beq.n	800a56c <UART_SetConfig+0x15d4>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d03e      	beq.n	800a568 <UART_SetConfig+0x15d0>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d038      	beq.n	800a564 <UART_SetConfig+0x15cc>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f6:	2b03      	cmp	r3, #3
 800a4f8:	d032      	beq.n	800a560 <UART_SetConfig+0x15c8>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fe:	2b04      	cmp	r3, #4
 800a500:	d02c      	beq.n	800a55c <UART_SetConfig+0x15c4>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a506:	2b05      	cmp	r3, #5
 800a508:	d026      	beq.n	800a558 <UART_SetConfig+0x15c0>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50e:	2b06      	cmp	r3, #6
 800a510:	d020      	beq.n	800a554 <UART_SetConfig+0x15bc>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a516:	2b07      	cmp	r3, #7
 800a518:	d01a      	beq.n	800a550 <UART_SetConfig+0x15b8>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51e:	2b08      	cmp	r3, #8
 800a520:	d014      	beq.n	800a54c <UART_SetConfig+0x15b4>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a526:	2b09      	cmp	r3, #9
 800a528:	d00e      	beq.n	800a548 <UART_SetConfig+0x15b0>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52e:	2b0a      	cmp	r3, #10
 800a530:	d008      	beq.n	800a544 <UART_SetConfig+0x15ac>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a536:	2b0b      	cmp	r3, #11
 800a538:	d102      	bne.n	800a540 <UART_SetConfig+0x15a8>
 800a53a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a53e:	e016      	b.n	800a56e <UART_SetConfig+0x15d6>
 800a540:	2301      	movs	r3, #1
 800a542:	e014      	b.n	800a56e <UART_SetConfig+0x15d6>
 800a544:	2380      	movs	r3, #128	; 0x80
 800a546:	e012      	b.n	800a56e <UART_SetConfig+0x15d6>
 800a548:	2340      	movs	r3, #64	; 0x40
 800a54a:	e010      	b.n	800a56e <UART_SetConfig+0x15d6>
 800a54c:	2320      	movs	r3, #32
 800a54e:	e00e      	b.n	800a56e <UART_SetConfig+0x15d6>
 800a550:	2310      	movs	r3, #16
 800a552:	e00c      	b.n	800a56e <UART_SetConfig+0x15d6>
 800a554:	230c      	movs	r3, #12
 800a556:	e00a      	b.n	800a56e <UART_SetConfig+0x15d6>
 800a558:	230a      	movs	r3, #10
 800a55a:	e008      	b.n	800a56e <UART_SetConfig+0x15d6>
 800a55c:	2308      	movs	r3, #8
 800a55e:	e006      	b.n	800a56e <UART_SetConfig+0x15d6>
 800a560:	2306      	movs	r3, #6
 800a562:	e004      	b.n	800a56e <UART_SetConfig+0x15d6>
 800a564:	2304      	movs	r3, #4
 800a566:	e002      	b.n	800a56e <UART_SetConfig+0x15d6>
 800a568:	2302      	movs	r3, #2
 800a56a:	e000      	b.n	800a56e <UART_SetConfig+0x15d6>
 800a56c:	2301      	movs	r3, #1
 800a56e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a570:	fbb2 f3f3 	udiv	r3, r2, r3
 800a574:	005a      	lsls	r2, r3, #1
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	085b      	lsrs	r3, r3, #1
 800a57c:	441a      	add	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	fbb2 f3f3 	udiv	r3, r2, r3
 800a586:	b29b      	uxth	r3, r3
 800a588:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a58a:	e2b0      	b.n	800aaee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a58c:	f7fb feb8 	bl	8006300 <HAL_RCC_GetPCLK2Freq>
 800a590:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a596:	2b00      	cmp	r3, #0
 800a598:	d044      	beq.n	800a624 <UART_SetConfig+0x168c>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d03e      	beq.n	800a620 <UART_SetConfig+0x1688>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d038      	beq.n	800a61c <UART_SetConfig+0x1684>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ae:	2b03      	cmp	r3, #3
 800a5b0:	d032      	beq.n	800a618 <UART_SetConfig+0x1680>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b6:	2b04      	cmp	r3, #4
 800a5b8:	d02c      	beq.n	800a614 <UART_SetConfig+0x167c>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5be:	2b05      	cmp	r3, #5
 800a5c0:	d026      	beq.n	800a610 <UART_SetConfig+0x1678>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c6:	2b06      	cmp	r3, #6
 800a5c8:	d020      	beq.n	800a60c <UART_SetConfig+0x1674>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ce:	2b07      	cmp	r3, #7
 800a5d0:	d01a      	beq.n	800a608 <UART_SetConfig+0x1670>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d6:	2b08      	cmp	r3, #8
 800a5d8:	d014      	beq.n	800a604 <UART_SetConfig+0x166c>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5de:	2b09      	cmp	r3, #9
 800a5e0:	d00e      	beq.n	800a600 <UART_SetConfig+0x1668>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e6:	2b0a      	cmp	r3, #10
 800a5e8:	d008      	beq.n	800a5fc <UART_SetConfig+0x1664>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ee:	2b0b      	cmp	r3, #11
 800a5f0:	d102      	bne.n	800a5f8 <UART_SetConfig+0x1660>
 800a5f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5f6:	e016      	b.n	800a626 <UART_SetConfig+0x168e>
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e014      	b.n	800a626 <UART_SetConfig+0x168e>
 800a5fc:	2380      	movs	r3, #128	; 0x80
 800a5fe:	e012      	b.n	800a626 <UART_SetConfig+0x168e>
 800a600:	2340      	movs	r3, #64	; 0x40
 800a602:	e010      	b.n	800a626 <UART_SetConfig+0x168e>
 800a604:	2320      	movs	r3, #32
 800a606:	e00e      	b.n	800a626 <UART_SetConfig+0x168e>
 800a608:	2310      	movs	r3, #16
 800a60a:	e00c      	b.n	800a626 <UART_SetConfig+0x168e>
 800a60c:	230c      	movs	r3, #12
 800a60e:	e00a      	b.n	800a626 <UART_SetConfig+0x168e>
 800a610:	230a      	movs	r3, #10
 800a612:	e008      	b.n	800a626 <UART_SetConfig+0x168e>
 800a614:	2308      	movs	r3, #8
 800a616:	e006      	b.n	800a626 <UART_SetConfig+0x168e>
 800a618:	2306      	movs	r3, #6
 800a61a:	e004      	b.n	800a626 <UART_SetConfig+0x168e>
 800a61c:	2304      	movs	r3, #4
 800a61e:	e002      	b.n	800a626 <UART_SetConfig+0x168e>
 800a620:	2302      	movs	r3, #2
 800a622:	e000      	b.n	800a626 <UART_SetConfig+0x168e>
 800a624:	2301      	movs	r3, #1
 800a626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a628:	fbb2 f3f3 	udiv	r3, r2, r3
 800a62c:	005a      	lsls	r2, r3, #1
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	085b      	lsrs	r3, r3, #1
 800a634:	441a      	add	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a63e:	b29b      	uxth	r3, r3
 800a640:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a642:	e254      	b.n	800aaee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a644:	f107 0318 	add.w	r3, r7, #24
 800a648:	4618      	mov	r0, r3
 800a64a:	f7fc ffdb 	bl	8007604 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a64e:	69fa      	ldr	r2, [r7, #28]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a654:	2b00      	cmp	r3, #0
 800a656:	d044      	beq.n	800a6e2 <UART_SetConfig+0x174a>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d03e      	beq.n	800a6de <UART_SetConfig+0x1746>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a664:	2b02      	cmp	r3, #2
 800a666:	d038      	beq.n	800a6da <UART_SetConfig+0x1742>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66c:	2b03      	cmp	r3, #3
 800a66e:	d032      	beq.n	800a6d6 <UART_SetConfig+0x173e>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a674:	2b04      	cmp	r3, #4
 800a676:	d02c      	beq.n	800a6d2 <UART_SetConfig+0x173a>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67c:	2b05      	cmp	r3, #5
 800a67e:	d026      	beq.n	800a6ce <UART_SetConfig+0x1736>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a684:	2b06      	cmp	r3, #6
 800a686:	d020      	beq.n	800a6ca <UART_SetConfig+0x1732>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68c:	2b07      	cmp	r3, #7
 800a68e:	d01a      	beq.n	800a6c6 <UART_SetConfig+0x172e>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a694:	2b08      	cmp	r3, #8
 800a696:	d014      	beq.n	800a6c2 <UART_SetConfig+0x172a>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69c:	2b09      	cmp	r3, #9
 800a69e:	d00e      	beq.n	800a6be <UART_SetConfig+0x1726>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a4:	2b0a      	cmp	r3, #10
 800a6a6:	d008      	beq.n	800a6ba <UART_SetConfig+0x1722>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ac:	2b0b      	cmp	r3, #11
 800a6ae:	d102      	bne.n	800a6b6 <UART_SetConfig+0x171e>
 800a6b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6b4:	e016      	b.n	800a6e4 <UART_SetConfig+0x174c>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e014      	b.n	800a6e4 <UART_SetConfig+0x174c>
 800a6ba:	2380      	movs	r3, #128	; 0x80
 800a6bc:	e012      	b.n	800a6e4 <UART_SetConfig+0x174c>
 800a6be:	2340      	movs	r3, #64	; 0x40
 800a6c0:	e010      	b.n	800a6e4 <UART_SetConfig+0x174c>
 800a6c2:	2320      	movs	r3, #32
 800a6c4:	e00e      	b.n	800a6e4 <UART_SetConfig+0x174c>
 800a6c6:	2310      	movs	r3, #16
 800a6c8:	e00c      	b.n	800a6e4 <UART_SetConfig+0x174c>
 800a6ca:	230c      	movs	r3, #12
 800a6cc:	e00a      	b.n	800a6e4 <UART_SetConfig+0x174c>
 800a6ce:	230a      	movs	r3, #10
 800a6d0:	e008      	b.n	800a6e4 <UART_SetConfig+0x174c>
 800a6d2:	2308      	movs	r3, #8
 800a6d4:	e006      	b.n	800a6e4 <UART_SetConfig+0x174c>
 800a6d6:	2306      	movs	r3, #6
 800a6d8:	e004      	b.n	800a6e4 <UART_SetConfig+0x174c>
 800a6da:	2304      	movs	r3, #4
 800a6dc:	e002      	b.n	800a6e4 <UART_SetConfig+0x174c>
 800a6de:	2302      	movs	r3, #2
 800a6e0:	e000      	b.n	800a6e4 <UART_SetConfig+0x174c>
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6e8:	005a      	lsls	r2, r3, #1
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	085b      	lsrs	r3, r3, #1
 800a6f0:	441a      	add	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a6fe:	e1f6      	b.n	800aaee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a700:	f107 030c 	add.w	r3, r7, #12
 800a704:	4618      	mov	r0, r3
 800a706:	f7fd f8c9 	bl	800789c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a70a:	693a      	ldr	r2, [r7, #16]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a710:	2b00      	cmp	r3, #0
 800a712:	d044      	beq.n	800a79e <UART_SetConfig+0x1806>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d03e      	beq.n	800a79a <UART_SetConfig+0x1802>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a720:	2b02      	cmp	r3, #2
 800a722:	d038      	beq.n	800a796 <UART_SetConfig+0x17fe>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a728:	2b03      	cmp	r3, #3
 800a72a:	d032      	beq.n	800a792 <UART_SetConfig+0x17fa>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a730:	2b04      	cmp	r3, #4
 800a732:	d02c      	beq.n	800a78e <UART_SetConfig+0x17f6>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a738:	2b05      	cmp	r3, #5
 800a73a:	d026      	beq.n	800a78a <UART_SetConfig+0x17f2>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a740:	2b06      	cmp	r3, #6
 800a742:	d020      	beq.n	800a786 <UART_SetConfig+0x17ee>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a748:	2b07      	cmp	r3, #7
 800a74a:	d01a      	beq.n	800a782 <UART_SetConfig+0x17ea>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a750:	2b08      	cmp	r3, #8
 800a752:	d014      	beq.n	800a77e <UART_SetConfig+0x17e6>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a758:	2b09      	cmp	r3, #9
 800a75a:	d00e      	beq.n	800a77a <UART_SetConfig+0x17e2>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a760:	2b0a      	cmp	r3, #10
 800a762:	d008      	beq.n	800a776 <UART_SetConfig+0x17de>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a768:	2b0b      	cmp	r3, #11
 800a76a:	d102      	bne.n	800a772 <UART_SetConfig+0x17da>
 800a76c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a770:	e016      	b.n	800a7a0 <UART_SetConfig+0x1808>
 800a772:	2301      	movs	r3, #1
 800a774:	e014      	b.n	800a7a0 <UART_SetConfig+0x1808>
 800a776:	2380      	movs	r3, #128	; 0x80
 800a778:	e012      	b.n	800a7a0 <UART_SetConfig+0x1808>
 800a77a:	2340      	movs	r3, #64	; 0x40
 800a77c:	e010      	b.n	800a7a0 <UART_SetConfig+0x1808>
 800a77e:	2320      	movs	r3, #32
 800a780:	e00e      	b.n	800a7a0 <UART_SetConfig+0x1808>
 800a782:	2310      	movs	r3, #16
 800a784:	e00c      	b.n	800a7a0 <UART_SetConfig+0x1808>
 800a786:	230c      	movs	r3, #12
 800a788:	e00a      	b.n	800a7a0 <UART_SetConfig+0x1808>
 800a78a:	230a      	movs	r3, #10
 800a78c:	e008      	b.n	800a7a0 <UART_SetConfig+0x1808>
 800a78e:	2308      	movs	r3, #8
 800a790:	e006      	b.n	800a7a0 <UART_SetConfig+0x1808>
 800a792:	2306      	movs	r3, #6
 800a794:	e004      	b.n	800a7a0 <UART_SetConfig+0x1808>
 800a796:	2304      	movs	r3, #4
 800a798:	e002      	b.n	800a7a0 <UART_SetConfig+0x1808>
 800a79a:	2302      	movs	r3, #2
 800a79c:	e000      	b.n	800a7a0 <UART_SetConfig+0x1808>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7a4:	005a      	lsls	r2, r3, #1
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	085b      	lsrs	r3, r3, #1
 800a7ac:	441a      	add	r2, r3
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a7ba:	e198      	b.n	800aaee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7bc:	4b87      	ldr	r3, [pc, #540]	; (800a9dc <UART_SetConfig+0x1a44>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f003 0320 	and.w	r3, r3, #32
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d05e      	beq.n	800a886 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7c8:	4b84      	ldr	r3, [pc, #528]	; (800a9dc <UART_SetConfig+0x1a44>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	08db      	lsrs	r3, r3, #3
 800a7ce:	f003 0303 	and.w	r3, r3, #3
 800a7d2:	4a83      	ldr	r2, [pc, #524]	; (800a9e0 <UART_SetConfig+0x1a48>)
 800a7d4:	40da      	lsrs	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d044      	beq.n	800a868 <UART_SetConfig+0x18d0>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d03e      	beq.n	800a864 <UART_SetConfig+0x18cc>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d038      	beq.n	800a860 <UART_SetConfig+0x18c8>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f2:	2b03      	cmp	r3, #3
 800a7f4:	d032      	beq.n	800a85c <UART_SetConfig+0x18c4>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fa:	2b04      	cmp	r3, #4
 800a7fc:	d02c      	beq.n	800a858 <UART_SetConfig+0x18c0>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a802:	2b05      	cmp	r3, #5
 800a804:	d026      	beq.n	800a854 <UART_SetConfig+0x18bc>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80a:	2b06      	cmp	r3, #6
 800a80c:	d020      	beq.n	800a850 <UART_SetConfig+0x18b8>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a812:	2b07      	cmp	r3, #7
 800a814:	d01a      	beq.n	800a84c <UART_SetConfig+0x18b4>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81a:	2b08      	cmp	r3, #8
 800a81c:	d014      	beq.n	800a848 <UART_SetConfig+0x18b0>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a822:	2b09      	cmp	r3, #9
 800a824:	d00e      	beq.n	800a844 <UART_SetConfig+0x18ac>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82a:	2b0a      	cmp	r3, #10
 800a82c:	d008      	beq.n	800a840 <UART_SetConfig+0x18a8>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a832:	2b0b      	cmp	r3, #11
 800a834:	d102      	bne.n	800a83c <UART_SetConfig+0x18a4>
 800a836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a83a:	e016      	b.n	800a86a <UART_SetConfig+0x18d2>
 800a83c:	2301      	movs	r3, #1
 800a83e:	e014      	b.n	800a86a <UART_SetConfig+0x18d2>
 800a840:	2380      	movs	r3, #128	; 0x80
 800a842:	e012      	b.n	800a86a <UART_SetConfig+0x18d2>
 800a844:	2340      	movs	r3, #64	; 0x40
 800a846:	e010      	b.n	800a86a <UART_SetConfig+0x18d2>
 800a848:	2320      	movs	r3, #32
 800a84a:	e00e      	b.n	800a86a <UART_SetConfig+0x18d2>
 800a84c:	2310      	movs	r3, #16
 800a84e:	e00c      	b.n	800a86a <UART_SetConfig+0x18d2>
 800a850:	230c      	movs	r3, #12
 800a852:	e00a      	b.n	800a86a <UART_SetConfig+0x18d2>
 800a854:	230a      	movs	r3, #10
 800a856:	e008      	b.n	800a86a <UART_SetConfig+0x18d2>
 800a858:	2308      	movs	r3, #8
 800a85a:	e006      	b.n	800a86a <UART_SetConfig+0x18d2>
 800a85c:	2306      	movs	r3, #6
 800a85e:	e004      	b.n	800a86a <UART_SetConfig+0x18d2>
 800a860:	2304      	movs	r3, #4
 800a862:	e002      	b.n	800a86a <UART_SetConfig+0x18d2>
 800a864:	2302      	movs	r3, #2
 800a866:	e000      	b.n	800a86a <UART_SetConfig+0x18d2>
 800a868:	2301      	movs	r3, #1
 800a86a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a86e:	005a      	lsls	r2, r3, #1
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	085b      	lsrs	r3, r3, #1
 800a876:	441a      	add	r2, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a880:	b29b      	uxth	r3, r3
 800a882:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800a884:	e133      	b.n	800aaee <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d043      	beq.n	800a916 <UART_SetConfig+0x197e>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a892:	2b01      	cmp	r3, #1
 800a894:	d03d      	beq.n	800a912 <UART_SetConfig+0x197a>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89a:	2b02      	cmp	r3, #2
 800a89c:	d037      	beq.n	800a90e <UART_SetConfig+0x1976>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a2:	2b03      	cmp	r3, #3
 800a8a4:	d031      	beq.n	800a90a <UART_SetConfig+0x1972>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8aa:	2b04      	cmp	r3, #4
 800a8ac:	d02b      	beq.n	800a906 <UART_SetConfig+0x196e>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b2:	2b05      	cmp	r3, #5
 800a8b4:	d025      	beq.n	800a902 <UART_SetConfig+0x196a>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ba:	2b06      	cmp	r3, #6
 800a8bc:	d01f      	beq.n	800a8fe <UART_SetConfig+0x1966>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c2:	2b07      	cmp	r3, #7
 800a8c4:	d019      	beq.n	800a8fa <UART_SetConfig+0x1962>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ca:	2b08      	cmp	r3, #8
 800a8cc:	d013      	beq.n	800a8f6 <UART_SetConfig+0x195e>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d2:	2b09      	cmp	r3, #9
 800a8d4:	d00d      	beq.n	800a8f2 <UART_SetConfig+0x195a>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8da:	2b0a      	cmp	r3, #10
 800a8dc:	d007      	beq.n	800a8ee <UART_SetConfig+0x1956>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e2:	2b0b      	cmp	r3, #11
 800a8e4:	d101      	bne.n	800a8ea <UART_SetConfig+0x1952>
 800a8e6:	4b3f      	ldr	r3, [pc, #252]	; (800a9e4 <UART_SetConfig+0x1a4c>)
 800a8e8:	e016      	b.n	800a918 <UART_SetConfig+0x1980>
 800a8ea:	4b3f      	ldr	r3, [pc, #252]	; (800a9e8 <UART_SetConfig+0x1a50>)
 800a8ec:	e014      	b.n	800a918 <UART_SetConfig+0x1980>
 800a8ee:	4b3f      	ldr	r3, [pc, #252]	; (800a9ec <UART_SetConfig+0x1a54>)
 800a8f0:	e012      	b.n	800a918 <UART_SetConfig+0x1980>
 800a8f2:	4b3f      	ldr	r3, [pc, #252]	; (800a9f0 <UART_SetConfig+0x1a58>)
 800a8f4:	e010      	b.n	800a918 <UART_SetConfig+0x1980>
 800a8f6:	4b3f      	ldr	r3, [pc, #252]	; (800a9f4 <UART_SetConfig+0x1a5c>)
 800a8f8:	e00e      	b.n	800a918 <UART_SetConfig+0x1980>
 800a8fa:	4b3f      	ldr	r3, [pc, #252]	; (800a9f8 <UART_SetConfig+0x1a60>)
 800a8fc:	e00c      	b.n	800a918 <UART_SetConfig+0x1980>
 800a8fe:	4b3f      	ldr	r3, [pc, #252]	; (800a9fc <UART_SetConfig+0x1a64>)
 800a900:	e00a      	b.n	800a918 <UART_SetConfig+0x1980>
 800a902:	4b3f      	ldr	r3, [pc, #252]	; (800aa00 <UART_SetConfig+0x1a68>)
 800a904:	e008      	b.n	800a918 <UART_SetConfig+0x1980>
 800a906:	4b3f      	ldr	r3, [pc, #252]	; (800aa04 <UART_SetConfig+0x1a6c>)
 800a908:	e006      	b.n	800a918 <UART_SetConfig+0x1980>
 800a90a:	4b3f      	ldr	r3, [pc, #252]	; (800aa08 <UART_SetConfig+0x1a70>)
 800a90c:	e004      	b.n	800a918 <UART_SetConfig+0x1980>
 800a90e:	4b3f      	ldr	r3, [pc, #252]	; (800aa0c <UART_SetConfig+0x1a74>)
 800a910:	e002      	b.n	800a918 <UART_SetConfig+0x1980>
 800a912:	4b33      	ldr	r3, [pc, #204]	; (800a9e0 <UART_SetConfig+0x1a48>)
 800a914:	e000      	b.n	800a918 <UART_SetConfig+0x1980>
 800a916:	4b34      	ldr	r3, [pc, #208]	; (800a9e8 <UART_SetConfig+0x1a50>)
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	6852      	ldr	r2, [r2, #4]
 800a91c:	0852      	lsrs	r2, r2, #1
 800a91e:	441a      	add	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	fbb2 f3f3 	udiv	r3, r2, r3
 800a928:	b29b      	uxth	r3, r3
 800a92a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a92c:	e0df      	b.n	800aaee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a932:	2b00      	cmp	r3, #0
 800a934:	d045      	beq.n	800a9c2 <UART_SetConfig+0x1a2a>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d03f      	beq.n	800a9be <UART_SetConfig+0x1a26>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a942:	2b02      	cmp	r3, #2
 800a944:	d039      	beq.n	800a9ba <UART_SetConfig+0x1a22>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94a:	2b03      	cmp	r3, #3
 800a94c:	d033      	beq.n	800a9b6 <UART_SetConfig+0x1a1e>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a952:	2b04      	cmp	r3, #4
 800a954:	d02d      	beq.n	800a9b2 <UART_SetConfig+0x1a1a>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95a:	2b05      	cmp	r3, #5
 800a95c:	d027      	beq.n	800a9ae <UART_SetConfig+0x1a16>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a962:	2b06      	cmp	r3, #6
 800a964:	d021      	beq.n	800a9aa <UART_SetConfig+0x1a12>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96a:	2b07      	cmp	r3, #7
 800a96c:	d01b      	beq.n	800a9a6 <UART_SetConfig+0x1a0e>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a972:	2b08      	cmp	r3, #8
 800a974:	d015      	beq.n	800a9a2 <UART_SetConfig+0x1a0a>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97a:	2b09      	cmp	r3, #9
 800a97c:	d00f      	beq.n	800a99e <UART_SetConfig+0x1a06>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a982:	2b0a      	cmp	r3, #10
 800a984:	d008      	beq.n	800a998 <UART_SetConfig+0x1a00>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98a:	2b0b      	cmp	r3, #11
 800a98c:	d102      	bne.n	800a994 <UART_SetConfig+0x19fc>
 800a98e:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a992:	e017      	b.n	800a9c4 <UART_SetConfig+0x1a2c>
 800a994:	4b18      	ldr	r3, [pc, #96]	; (800a9f8 <UART_SetConfig+0x1a60>)
 800a996:	e015      	b.n	800a9c4 <UART_SetConfig+0x1a2c>
 800a998:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a99c:	e012      	b.n	800a9c4 <UART_SetConfig+0x1a2c>
 800a99e:	4b1c      	ldr	r3, [pc, #112]	; (800aa10 <UART_SetConfig+0x1a78>)
 800a9a0:	e010      	b.n	800a9c4 <UART_SetConfig+0x1a2c>
 800a9a2:	4b1c      	ldr	r3, [pc, #112]	; (800aa14 <UART_SetConfig+0x1a7c>)
 800a9a4:	e00e      	b.n	800a9c4 <UART_SetConfig+0x1a2c>
 800a9a6:	4b0f      	ldr	r3, [pc, #60]	; (800a9e4 <UART_SetConfig+0x1a4c>)
 800a9a8:	e00c      	b.n	800a9c4 <UART_SetConfig+0x1a2c>
 800a9aa:	4b1b      	ldr	r3, [pc, #108]	; (800aa18 <UART_SetConfig+0x1a80>)
 800a9ac:	e00a      	b.n	800a9c4 <UART_SetConfig+0x1a2c>
 800a9ae:	4b1b      	ldr	r3, [pc, #108]	; (800aa1c <UART_SetConfig+0x1a84>)
 800a9b0:	e008      	b.n	800a9c4 <UART_SetConfig+0x1a2c>
 800a9b2:	4b0e      	ldr	r3, [pc, #56]	; (800a9ec <UART_SetConfig+0x1a54>)
 800a9b4:	e006      	b.n	800a9c4 <UART_SetConfig+0x1a2c>
 800a9b6:	4b1a      	ldr	r3, [pc, #104]	; (800aa20 <UART_SetConfig+0x1a88>)
 800a9b8:	e004      	b.n	800a9c4 <UART_SetConfig+0x1a2c>
 800a9ba:	4b0d      	ldr	r3, [pc, #52]	; (800a9f0 <UART_SetConfig+0x1a58>)
 800a9bc:	e002      	b.n	800a9c4 <UART_SetConfig+0x1a2c>
 800a9be:	4b0d      	ldr	r3, [pc, #52]	; (800a9f4 <UART_SetConfig+0x1a5c>)
 800a9c0:	e000      	b.n	800a9c4 <UART_SetConfig+0x1a2c>
 800a9c2:	4b0d      	ldr	r3, [pc, #52]	; (800a9f8 <UART_SetConfig+0x1a60>)
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	6852      	ldr	r2, [r2, #4]
 800a9c8:	0852      	lsrs	r2, r2, #1
 800a9ca:	441a      	add	r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a9d8:	e089      	b.n	800aaee <UART_SetConfig+0x1b56>
 800a9da:	bf00      	nop
 800a9dc:	58024400 	.word	0x58024400
 800a9e0:	03d09000 	.word	0x03d09000
 800a9e4:	0007a120 	.word	0x0007a120
 800a9e8:	07a12000 	.word	0x07a12000
 800a9ec:	000f4240 	.word	0x000f4240
 800a9f0:	001e8480 	.word	0x001e8480
 800a9f4:	003d0900 	.word	0x003d0900
 800a9f8:	007a1200 	.word	0x007a1200
 800a9fc:	00a2c2aa 	.word	0x00a2c2aa
 800aa00:	00c35000 	.word	0x00c35000
 800aa04:	00f42400 	.word	0x00f42400
 800aa08:	01458554 	.word	0x01458554
 800aa0c:	01e84800 	.word	0x01e84800
 800aa10:	0001e848 	.word	0x0001e848
 800aa14:	0003d090 	.word	0x0003d090
 800aa18:	000a2c2a 	.word	0x000a2c2a
 800aa1c:	000c3500 	.word	0x000c3500
 800aa20:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d04f      	beq.n	800aacc <UART_SetConfig+0x1b34>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d048      	beq.n	800aac6 <UART_SetConfig+0x1b2e>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa38:	2b02      	cmp	r3, #2
 800aa3a:	d041      	beq.n	800aac0 <UART_SetConfig+0x1b28>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa40:	2b03      	cmp	r3, #3
 800aa42:	d03a      	beq.n	800aaba <UART_SetConfig+0x1b22>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa48:	2b04      	cmp	r3, #4
 800aa4a:	d033      	beq.n	800aab4 <UART_SetConfig+0x1b1c>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa50:	2b05      	cmp	r3, #5
 800aa52:	d02c      	beq.n	800aaae <UART_SetConfig+0x1b16>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa58:	2b06      	cmp	r3, #6
 800aa5a:	d025      	beq.n	800aaa8 <UART_SetConfig+0x1b10>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa60:	2b07      	cmp	r3, #7
 800aa62:	d01e      	beq.n	800aaa2 <UART_SetConfig+0x1b0a>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa68:	2b08      	cmp	r3, #8
 800aa6a:	d017      	beq.n	800aa9c <UART_SetConfig+0x1b04>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa70:	2b09      	cmp	r3, #9
 800aa72:	d010      	beq.n	800aa96 <UART_SetConfig+0x1afe>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa78:	2b0a      	cmp	r3, #10
 800aa7a:	d009      	beq.n	800aa90 <UART_SetConfig+0x1af8>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa80:	2b0b      	cmp	r3, #11
 800aa82:	d102      	bne.n	800aa8a <UART_SetConfig+0x1af2>
 800aa84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa88:	e022      	b.n	800aad0 <UART_SetConfig+0x1b38>
 800aa8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800aa8e:	e01f      	b.n	800aad0 <UART_SetConfig+0x1b38>
 800aa90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa94:	e01c      	b.n	800aad0 <UART_SetConfig+0x1b38>
 800aa96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa9a:	e019      	b.n	800aad0 <UART_SetConfig+0x1b38>
 800aa9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aaa0:	e016      	b.n	800aad0 <UART_SetConfig+0x1b38>
 800aaa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aaa6:	e013      	b.n	800aad0 <UART_SetConfig+0x1b38>
 800aaa8:	f241 5354 	movw	r3, #5460	; 0x1554
 800aaac:	e010      	b.n	800aad0 <UART_SetConfig+0x1b38>
 800aaae:	f641 1398 	movw	r3, #6552	; 0x1998
 800aab2:	e00d      	b.n	800aad0 <UART_SetConfig+0x1b38>
 800aab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aab8:	e00a      	b.n	800aad0 <UART_SetConfig+0x1b38>
 800aaba:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800aabe:	e007      	b.n	800aad0 <UART_SetConfig+0x1b38>
 800aac0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aac4:	e004      	b.n	800aad0 <UART_SetConfig+0x1b38>
 800aac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaca:	e001      	b.n	800aad0 <UART_SetConfig+0x1b38>
 800aacc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	6852      	ldr	r2, [r2, #4]
 800aad4:	0852      	lsrs	r2, r2, #1
 800aad6:	441a      	add	r2, r3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aae4:	e003      	b.n	800aaee <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800aaec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aaee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf0:	2b0f      	cmp	r3, #15
 800aaf2:	d916      	bls.n	800ab22 <UART_SetConfig+0x1b8a>
 800aaf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aafa:	d212      	bcs.n	800ab22 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aafc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	f023 030f 	bic.w	r3, r3, #15
 800ab04:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab08:	085b      	lsrs	r3, r3, #1
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	f003 0307 	and.w	r3, r3, #7
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ab14:	4313      	orrs	r3, r2
 800ab16:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ab1e:	60da      	str	r2, [r3, #12]
 800ab20:	e3a3      	b.n	800b26a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800ab22:	2301      	movs	r3, #1
 800ab24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab28:	e39f      	b.n	800b26a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800ab2a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ab2e:	2b40      	cmp	r3, #64	; 0x40
 800ab30:	f200 8388 	bhi.w	800b244 <UART_SetConfig+0x22ac>
 800ab34:	a201      	add	r2, pc, #4	; (adr r2, 800ab3c <UART_SetConfig+0x1ba4>)
 800ab36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab3a:	bf00      	nop
 800ab3c:	0800ac41 	.word	0x0800ac41
 800ab40:	0800acf7 	.word	0x0800acf7
 800ab44:	0800b245 	.word	0x0800b245
 800ab48:	0800b245 	.word	0x0800b245
 800ab4c:	0800adad 	.word	0x0800adad
 800ab50:	0800b245 	.word	0x0800b245
 800ab54:	0800b245 	.word	0x0800b245
 800ab58:	0800b245 	.word	0x0800b245
 800ab5c:	0800ae67 	.word	0x0800ae67
 800ab60:	0800b245 	.word	0x0800b245
 800ab64:	0800b245 	.word	0x0800b245
 800ab68:	0800b245 	.word	0x0800b245
 800ab6c:	0800b245 	.word	0x0800b245
 800ab70:	0800b245 	.word	0x0800b245
 800ab74:	0800b245 	.word	0x0800b245
 800ab78:	0800b245 	.word	0x0800b245
 800ab7c:	0800af21 	.word	0x0800af21
 800ab80:	0800b245 	.word	0x0800b245
 800ab84:	0800b245 	.word	0x0800b245
 800ab88:	0800b245 	.word	0x0800b245
 800ab8c:	0800b245 	.word	0x0800b245
 800ab90:	0800b245 	.word	0x0800b245
 800ab94:	0800b245 	.word	0x0800b245
 800ab98:	0800b245 	.word	0x0800b245
 800ab9c:	0800b245 	.word	0x0800b245
 800aba0:	0800b245 	.word	0x0800b245
 800aba4:	0800b245 	.word	0x0800b245
 800aba8:	0800b245 	.word	0x0800b245
 800abac:	0800b245 	.word	0x0800b245
 800abb0:	0800b245 	.word	0x0800b245
 800abb4:	0800b245 	.word	0x0800b245
 800abb8:	0800b245 	.word	0x0800b245
 800abbc:	0800b091 	.word	0x0800b091
 800abc0:	0800b245 	.word	0x0800b245
 800abc4:	0800b245 	.word	0x0800b245
 800abc8:	0800b245 	.word	0x0800b245
 800abcc:	0800b245 	.word	0x0800b245
 800abd0:	0800b245 	.word	0x0800b245
 800abd4:	0800b245 	.word	0x0800b245
 800abd8:	0800b245 	.word	0x0800b245
 800abdc:	0800b245 	.word	0x0800b245
 800abe0:	0800b245 	.word	0x0800b245
 800abe4:	0800b245 	.word	0x0800b245
 800abe8:	0800b245 	.word	0x0800b245
 800abec:	0800b245 	.word	0x0800b245
 800abf0:	0800b245 	.word	0x0800b245
 800abf4:	0800b245 	.word	0x0800b245
 800abf8:	0800b245 	.word	0x0800b245
 800abfc:	0800b245 	.word	0x0800b245
 800ac00:	0800b245 	.word	0x0800b245
 800ac04:	0800b245 	.word	0x0800b245
 800ac08:	0800b245 	.word	0x0800b245
 800ac0c:	0800b245 	.word	0x0800b245
 800ac10:	0800b245 	.word	0x0800b245
 800ac14:	0800b245 	.word	0x0800b245
 800ac18:	0800b245 	.word	0x0800b245
 800ac1c:	0800b245 	.word	0x0800b245
 800ac20:	0800b245 	.word	0x0800b245
 800ac24:	0800b245 	.word	0x0800b245
 800ac28:	0800b245 	.word	0x0800b245
 800ac2c:	0800b245 	.word	0x0800b245
 800ac30:	0800b245 	.word	0x0800b245
 800ac34:	0800b245 	.word	0x0800b245
 800ac38:	0800b245 	.word	0x0800b245
 800ac3c:	0800b185 	.word	0x0800b185
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac40:	f7fb fb48 	bl	80062d4 <HAL_RCC_GetPCLK1Freq>
 800ac44:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d044      	beq.n	800acd8 <UART_SetConfig+0x1d40>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d03e      	beq.n	800acd4 <UART_SetConfig+0x1d3c>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d038      	beq.n	800acd0 <UART_SetConfig+0x1d38>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac62:	2b03      	cmp	r3, #3
 800ac64:	d032      	beq.n	800accc <UART_SetConfig+0x1d34>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6a:	2b04      	cmp	r3, #4
 800ac6c:	d02c      	beq.n	800acc8 <UART_SetConfig+0x1d30>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac72:	2b05      	cmp	r3, #5
 800ac74:	d026      	beq.n	800acc4 <UART_SetConfig+0x1d2c>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7a:	2b06      	cmp	r3, #6
 800ac7c:	d020      	beq.n	800acc0 <UART_SetConfig+0x1d28>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac82:	2b07      	cmp	r3, #7
 800ac84:	d01a      	beq.n	800acbc <UART_SetConfig+0x1d24>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8a:	2b08      	cmp	r3, #8
 800ac8c:	d014      	beq.n	800acb8 <UART_SetConfig+0x1d20>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac92:	2b09      	cmp	r3, #9
 800ac94:	d00e      	beq.n	800acb4 <UART_SetConfig+0x1d1c>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9a:	2b0a      	cmp	r3, #10
 800ac9c:	d008      	beq.n	800acb0 <UART_SetConfig+0x1d18>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca2:	2b0b      	cmp	r3, #11
 800aca4:	d102      	bne.n	800acac <UART_SetConfig+0x1d14>
 800aca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acaa:	e016      	b.n	800acda <UART_SetConfig+0x1d42>
 800acac:	2301      	movs	r3, #1
 800acae:	e014      	b.n	800acda <UART_SetConfig+0x1d42>
 800acb0:	2380      	movs	r3, #128	; 0x80
 800acb2:	e012      	b.n	800acda <UART_SetConfig+0x1d42>
 800acb4:	2340      	movs	r3, #64	; 0x40
 800acb6:	e010      	b.n	800acda <UART_SetConfig+0x1d42>
 800acb8:	2320      	movs	r3, #32
 800acba:	e00e      	b.n	800acda <UART_SetConfig+0x1d42>
 800acbc:	2310      	movs	r3, #16
 800acbe:	e00c      	b.n	800acda <UART_SetConfig+0x1d42>
 800acc0:	230c      	movs	r3, #12
 800acc2:	e00a      	b.n	800acda <UART_SetConfig+0x1d42>
 800acc4:	230a      	movs	r3, #10
 800acc6:	e008      	b.n	800acda <UART_SetConfig+0x1d42>
 800acc8:	2308      	movs	r3, #8
 800acca:	e006      	b.n	800acda <UART_SetConfig+0x1d42>
 800accc:	2306      	movs	r3, #6
 800acce:	e004      	b.n	800acda <UART_SetConfig+0x1d42>
 800acd0:	2304      	movs	r3, #4
 800acd2:	e002      	b.n	800acda <UART_SetConfig+0x1d42>
 800acd4:	2302      	movs	r3, #2
 800acd6:	e000      	b.n	800acda <UART_SetConfig+0x1d42>
 800acd8:	2301      	movs	r3, #1
 800acda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acdc:	fbb2 f2f3 	udiv	r2, r2, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	085b      	lsrs	r3, r3, #1
 800ace6:	441a      	add	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	fbb2 f3f3 	udiv	r3, r2, r3
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800acf4:	e2aa      	b.n	800b24c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acf6:	f7fb fb03 	bl	8006300 <HAL_RCC_GetPCLK2Freq>
 800acfa:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d044      	beq.n	800ad8e <UART_SetConfig+0x1df6>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d03e      	beq.n	800ad8a <UART_SetConfig+0x1df2>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	d038      	beq.n	800ad86 <UART_SetConfig+0x1dee>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad18:	2b03      	cmp	r3, #3
 800ad1a:	d032      	beq.n	800ad82 <UART_SetConfig+0x1dea>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad20:	2b04      	cmp	r3, #4
 800ad22:	d02c      	beq.n	800ad7e <UART_SetConfig+0x1de6>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad28:	2b05      	cmp	r3, #5
 800ad2a:	d026      	beq.n	800ad7a <UART_SetConfig+0x1de2>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad30:	2b06      	cmp	r3, #6
 800ad32:	d020      	beq.n	800ad76 <UART_SetConfig+0x1dde>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad38:	2b07      	cmp	r3, #7
 800ad3a:	d01a      	beq.n	800ad72 <UART_SetConfig+0x1dda>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad40:	2b08      	cmp	r3, #8
 800ad42:	d014      	beq.n	800ad6e <UART_SetConfig+0x1dd6>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad48:	2b09      	cmp	r3, #9
 800ad4a:	d00e      	beq.n	800ad6a <UART_SetConfig+0x1dd2>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad50:	2b0a      	cmp	r3, #10
 800ad52:	d008      	beq.n	800ad66 <UART_SetConfig+0x1dce>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad58:	2b0b      	cmp	r3, #11
 800ad5a:	d102      	bne.n	800ad62 <UART_SetConfig+0x1dca>
 800ad5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad60:	e016      	b.n	800ad90 <UART_SetConfig+0x1df8>
 800ad62:	2301      	movs	r3, #1
 800ad64:	e014      	b.n	800ad90 <UART_SetConfig+0x1df8>
 800ad66:	2380      	movs	r3, #128	; 0x80
 800ad68:	e012      	b.n	800ad90 <UART_SetConfig+0x1df8>
 800ad6a:	2340      	movs	r3, #64	; 0x40
 800ad6c:	e010      	b.n	800ad90 <UART_SetConfig+0x1df8>
 800ad6e:	2320      	movs	r3, #32
 800ad70:	e00e      	b.n	800ad90 <UART_SetConfig+0x1df8>
 800ad72:	2310      	movs	r3, #16
 800ad74:	e00c      	b.n	800ad90 <UART_SetConfig+0x1df8>
 800ad76:	230c      	movs	r3, #12
 800ad78:	e00a      	b.n	800ad90 <UART_SetConfig+0x1df8>
 800ad7a:	230a      	movs	r3, #10
 800ad7c:	e008      	b.n	800ad90 <UART_SetConfig+0x1df8>
 800ad7e:	2308      	movs	r3, #8
 800ad80:	e006      	b.n	800ad90 <UART_SetConfig+0x1df8>
 800ad82:	2306      	movs	r3, #6
 800ad84:	e004      	b.n	800ad90 <UART_SetConfig+0x1df8>
 800ad86:	2304      	movs	r3, #4
 800ad88:	e002      	b.n	800ad90 <UART_SetConfig+0x1df8>
 800ad8a:	2302      	movs	r3, #2
 800ad8c:	e000      	b.n	800ad90 <UART_SetConfig+0x1df8>
 800ad8e:	2301      	movs	r3, #1
 800ad90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad92:	fbb2 f2f3 	udiv	r2, r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	085b      	lsrs	r3, r3, #1
 800ad9c:	441a      	add	r2, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800adaa:	e24f      	b.n	800b24c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adac:	f107 0318 	add.w	r3, r7, #24
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7fc fc27 	bl	8007604 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adb6:	69fa      	ldr	r2, [r7, #28]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d044      	beq.n	800ae4a <UART_SetConfig+0x1eb2>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d03e      	beq.n	800ae46 <UART_SetConfig+0x1eae>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adcc:	2b02      	cmp	r3, #2
 800adce:	d038      	beq.n	800ae42 <UART_SetConfig+0x1eaa>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add4:	2b03      	cmp	r3, #3
 800add6:	d032      	beq.n	800ae3e <UART_SetConfig+0x1ea6>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800addc:	2b04      	cmp	r3, #4
 800adde:	d02c      	beq.n	800ae3a <UART_SetConfig+0x1ea2>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade4:	2b05      	cmp	r3, #5
 800ade6:	d026      	beq.n	800ae36 <UART_SetConfig+0x1e9e>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adec:	2b06      	cmp	r3, #6
 800adee:	d020      	beq.n	800ae32 <UART_SetConfig+0x1e9a>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf4:	2b07      	cmp	r3, #7
 800adf6:	d01a      	beq.n	800ae2e <UART_SetConfig+0x1e96>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfc:	2b08      	cmp	r3, #8
 800adfe:	d014      	beq.n	800ae2a <UART_SetConfig+0x1e92>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae04:	2b09      	cmp	r3, #9
 800ae06:	d00e      	beq.n	800ae26 <UART_SetConfig+0x1e8e>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0c:	2b0a      	cmp	r3, #10
 800ae0e:	d008      	beq.n	800ae22 <UART_SetConfig+0x1e8a>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae14:	2b0b      	cmp	r3, #11
 800ae16:	d102      	bne.n	800ae1e <UART_SetConfig+0x1e86>
 800ae18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae1c:	e016      	b.n	800ae4c <UART_SetConfig+0x1eb4>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e014      	b.n	800ae4c <UART_SetConfig+0x1eb4>
 800ae22:	2380      	movs	r3, #128	; 0x80
 800ae24:	e012      	b.n	800ae4c <UART_SetConfig+0x1eb4>
 800ae26:	2340      	movs	r3, #64	; 0x40
 800ae28:	e010      	b.n	800ae4c <UART_SetConfig+0x1eb4>
 800ae2a:	2320      	movs	r3, #32
 800ae2c:	e00e      	b.n	800ae4c <UART_SetConfig+0x1eb4>
 800ae2e:	2310      	movs	r3, #16
 800ae30:	e00c      	b.n	800ae4c <UART_SetConfig+0x1eb4>
 800ae32:	230c      	movs	r3, #12
 800ae34:	e00a      	b.n	800ae4c <UART_SetConfig+0x1eb4>
 800ae36:	230a      	movs	r3, #10
 800ae38:	e008      	b.n	800ae4c <UART_SetConfig+0x1eb4>
 800ae3a:	2308      	movs	r3, #8
 800ae3c:	e006      	b.n	800ae4c <UART_SetConfig+0x1eb4>
 800ae3e:	2306      	movs	r3, #6
 800ae40:	e004      	b.n	800ae4c <UART_SetConfig+0x1eb4>
 800ae42:	2304      	movs	r3, #4
 800ae44:	e002      	b.n	800ae4c <UART_SetConfig+0x1eb4>
 800ae46:	2302      	movs	r3, #2
 800ae48:	e000      	b.n	800ae4c <UART_SetConfig+0x1eb4>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	fbb2 f2f3 	udiv	r2, r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	085b      	lsrs	r3, r3, #1
 800ae56:	441a      	add	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae64:	e1f2      	b.n	800b24c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae66:	f107 030c 	add.w	r3, r7, #12
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fc fd16 	bl	800789c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae70:	693a      	ldr	r2, [r7, #16]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d044      	beq.n	800af04 <UART_SetConfig+0x1f6c>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d03e      	beq.n	800af00 <UART_SetConfig+0x1f68>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	d038      	beq.n	800aefc <UART_SetConfig+0x1f64>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8e:	2b03      	cmp	r3, #3
 800ae90:	d032      	beq.n	800aef8 <UART_SetConfig+0x1f60>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae96:	2b04      	cmp	r3, #4
 800ae98:	d02c      	beq.n	800aef4 <UART_SetConfig+0x1f5c>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9e:	2b05      	cmp	r3, #5
 800aea0:	d026      	beq.n	800aef0 <UART_SetConfig+0x1f58>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea6:	2b06      	cmp	r3, #6
 800aea8:	d020      	beq.n	800aeec <UART_SetConfig+0x1f54>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeae:	2b07      	cmp	r3, #7
 800aeb0:	d01a      	beq.n	800aee8 <UART_SetConfig+0x1f50>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb6:	2b08      	cmp	r3, #8
 800aeb8:	d014      	beq.n	800aee4 <UART_SetConfig+0x1f4c>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aebe:	2b09      	cmp	r3, #9
 800aec0:	d00e      	beq.n	800aee0 <UART_SetConfig+0x1f48>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec6:	2b0a      	cmp	r3, #10
 800aec8:	d008      	beq.n	800aedc <UART_SetConfig+0x1f44>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aece:	2b0b      	cmp	r3, #11
 800aed0:	d102      	bne.n	800aed8 <UART_SetConfig+0x1f40>
 800aed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aed6:	e016      	b.n	800af06 <UART_SetConfig+0x1f6e>
 800aed8:	2301      	movs	r3, #1
 800aeda:	e014      	b.n	800af06 <UART_SetConfig+0x1f6e>
 800aedc:	2380      	movs	r3, #128	; 0x80
 800aede:	e012      	b.n	800af06 <UART_SetConfig+0x1f6e>
 800aee0:	2340      	movs	r3, #64	; 0x40
 800aee2:	e010      	b.n	800af06 <UART_SetConfig+0x1f6e>
 800aee4:	2320      	movs	r3, #32
 800aee6:	e00e      	b.n	800af06 <UART_SetConfig+0x1f6e>
 800aee8:	2310      	movs	r3, #16
 800aeea:	e00c      	b.n	800af06 <UART_SetConfig+0x1f6e>
 800aeec:	230c      	movs	r3, #12
 800aeee:	e00a      	b.n	800af06 <UART_SetConfig+0x1f6e>
 800aef0:	230a      	movs	r3, #10
 800aef2:	e008      	b.n	800af06 <UART_SetConfig+0x1f6e>
 800aef4:	2308      	movs	r3, #8
 800aef6:	e006      	b.n	800af06 <UART_SetConfig+0x1f6e>
 800aef8:	2306      	movs	r3, #6
 800aefa:	e004      	b.n	800af06 <UART_SetConfig+0x1f6e>
 800aefc:	2304      	movs	r3, #4
 800aefe:	e002      	b.n	800af06 <UART_SetConfig+0x1f6e>
 800af00:	2302      	movs	r3, #2
 800af02:	e000      	b.n	800af06 <UART_SetConfig+0x1f6e>
 800af04:	2301      	movs	r3, #1
 800af06:	fbb2 f2f3 	udiv	r2, r2, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	085b      	lsrs	r3, r3, #1
 800af10:	441a      	add	r2, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	fbb2 f3f3 	udiv	r3, r2, r3
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800af1e:	e195      	b.n	800b24c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af20:	4b87      	ldr	r3, [pc, #540]	; (800b140 <UART_SetConfig+0x21a8>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f003 0320 	and.w	r3, r3, #32
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d05d      	beq.n	800afe8 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af2c:	4b84      	ldr	r3, [pc, #528]	; (800b140 <UART_SetConfig+0x21a8>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	08db      	lsrs	r3, r3, #3
 800af32:	f003 0303 	and.w	r3, r3, #3
 800af36:	4a83      	ldr	r2, [pc, #524]	; (800b144 <UART_SetConfig+0x21ac>)
 800af38:	40da      	lsrs	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d044      	beq.n	800afcc <UART_SetConfig+0x2034>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af46:	2b01      	cmp	r3, #1
 800af48:	d03e      	beq.n	800afc8 <UART_SetConfig+0x2030>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4e:	2b02      	cmp	r3, #2
 800af50:	d038      	beq.n	800afc4 <UART_SetConfig+0x202c>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af56:	2b03      	cmp	r3, #3
 800af58:	d032      	beq.n	800afc0 <UART_SetConfig+0x2028>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5e:	2b04      	cmp	r3, #4
 800af60:	d02c      	beq.n	800afbc <UART_SetConfig+0x2024>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af66:	2b05      	cmp	r3, #5
 800af68:	d026      	beq.n	800afb8 <UART_SetConfig+0x2020>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6e:	2b06      	cmp	r3, #6
 800af70:	d020      	beq.n	800afb4 <UART_SetConfig+0x201c>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af76:	2b07      	cmp	r3, #7
 800af78:	d01a      	beq.n	800afb0 <UART_SetConfig+0x2018>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7e:	2b08      	cmp	r3, #8
 800af80:	d014      	beq.n	800afac <UART_SetConfig+0x2014>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af86:	2b09      	cmp	r3, #9
 800af88:	d00e      	beq.n	800afa8 <UART_SetConfig+0x2010>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8e:	2b0a      	cmp	r3, #10
 800af90:	d008      	beq.n	800afa4 <UART_SetConfig+0x200c>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af96:	2b0b      	cmp	r3, #11
 800af98:	d102      	bne.n	800afa0 <UART_SetConfig+0x2008>
 800af9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af9e:	e016      	b.n	800afce <UART_SetConfig+0x2036>
 800afa0:	2301      	movs	r3, #1
 800afa2:	e014      	b.n	800afce <UART_SetConfig+0x2036>
 800afa4:	2380      	movs	r3, #128	; 0x80
 800afa6:	e012      	b.n	800afce <UART_SetConfig+0x2036>
 800afa8:	2340      	movs	r3, #64	; 0x40
 800afaa:	e010      	b.n	800afce <UART_SetConfig+0x2036>
 800afac:	2320      	movs	r3, #32
 800afae:	e00e      	b.n	800afce <UART_SetConfig+0x2036>
 800afb0:	2310      	movs	r3, #16
 800afb2:	e00c      	b.n	800afce <UART_SetConfig+0x2036>
 800afb4:	230c      	movs	r3, #12
 800afb6:	e00a      	b.n	800afce <UART_SetConfig+0x2036>
 800afb8:	230a      	movs	r3, #10
 800afba:	e008      	b.n	800afce <UART_SetConfig+0x2036>
 800afbc:	2308      	movs	r3, #8
 800afbe:	e006      	b.n	800afce <UART_SetConfig+0x2036>
 800afc0:	2306      	movs	r3, #6
 800afc2:	e004      	b.n	800afce <UART_SetConfig+0x2036>
 800afc4:	2304      	movs	r3, #4
 800afc6:	e002      	b.n	800afce <UART_SetConfig+0x2036>
 800afc8:	2302      	movs	r3, #2
 800afca:	e000      	b.n	800afce <UART_SetConfig+0x2036>
 800afcc:	2301      	movs	r3, #1
 800afce:	fbb2 f2f3 	udiv	r2, r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	085b      	lsrs	r3, r3, #1
 800afd8:	441a      	add	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	fbb2 f3f3 	udiv	r3, r2, r3
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800afe6:	e131      	b.n	800b24c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afec:	2b00      	cmp	r3, #0
 800afee:	d043      	beq.n	800b078 <UART_SetConfig+0x20e0>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d03d      	beq.n	800b074 <UART_SetConfig+0x20dc>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affc:	2b02      	cmp	r3, #2
 800affe:	d037      	beq.n	800b070 <UART_SetConfig+0x20d8>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b004:	2b03      	cmp	r3, #3
 800b006:	d031      	beq.n	800b06c <UART_SetConfig+0x20d4>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00c:	2b04      	cmp	r3, #4
 800b00e:	d02b      	beq.n	800b068 <UART_SetConfig+0x20d0>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b014:	2b05      	cmp	r3, #5
 800b016:	d025      	beq.n	800b064 <UART_SetConfig+0x20cc>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01c:	2b06      	cmp	r3, #6
 800b01e:	d01f      	beq.n	800b060 <UART_SetConfig+0x20c8>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b024:	2b07      	cmp	r3, #7
 800b026:	d019      	beq.n	800b05c <UART_SetConfig+0x20c4>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02c:	2b08      	cmp	r3, #8
 800b02e:	d013      	beq.n	800b058 <UART_SetConfig+0x20c0>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b034:	2b09      	cmp	r3, #9
 800b036:	d00d      	beq.n	800b054 <UART_SetConfig+0x20bc>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03c:	2b0a      	cmp	r3, #10
 800b03e:	d007      	beq.n	800b050 <UART_SetConfig+0x20b8>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b044:	2b0b      	cmp	r3, #11
 800b046:	d101      	bne.n	800b04c <UART_SetConfig+0x20b4>
 800b048:	4b3f      	ldr	r3, [pc, #252]	; (800b148 <UART_SetConfig+0x21b0>)
 800b04a:	e016      	b.n	800b07a <UART_SetConfig+0x20e2>
 800b04c:	4b3d      	ldr	r3, [pc, #244]	; (800b144 <UART_SetConfig+0x21ac>)
 800b04e:	e014      	b.n	800b07a <UART_SetConfig+0x20e2>
 800b050:	4b3e      	ldr	r3, [pc, #248]	; (800b14c <UART_SetConfig+0x21b4>)
 800b052:	e012      	b.n	800b07a <UART_SetConfig+0x20e2>
 800b054:	4b3e      	ldr	r3, [pc, #248]	; (800b150 <UART_SetConfig+0x21b8>)
 800b056:	e010      	b.n	800b07a <UART_SetConfig+0x20e2>
 800b058:	4b3e      	ldr	r3, [pc, #248]	; (800b154 <UART_SetConfig+0x21bc>)
 800b05a:	e00e      	b.n	800b07a <UART_SetConfig+0x20e2>
 800b05c:	4b3e      	ldr	r3, [pc, #248]	; (800b158 <UART_SetConfig+0x21c0>)
 800b05e:	e00c      	b.n	800b07a <UART_SetConfig+0x20e2>
 800b060:	4b3e      	ldr	r3, [pc, #248]	; (800b15c <UART_SetConfig+0x21c4>)
 800b062:	e00a      	b.n	800b07a <UART_SetConfig+0x20e2>
 800b064:	4b3e      	ldr	r3, [pc, #248]	; (800b160 <UART_SetConfig+0x21c8>)
 800b066:	e008      	b.n	800b07a <UART_SetConfig+0x20e2>
 800b068:	4b3e      	ldr	r3, [pc, #248]	; (800b164 <UART_SetConfig+0x21cc>)
 800b06a:	e006      	b.n	800b07a <UART_SetConfig+0x20e2>
 800b06c:	4b3e      	ldr	r3, [pc, #248]	; (800b168 <UART_SetConfig+0x21d0>)
 800b06e:	e004      	b.n	800b07a <UART_SetConfig+0x20e2>
 800b070:	4b3e      	ldr	r3, [pc, #248]	; (800b16c <UART_SetConfig+0x21d4>)
 800b072:	e002      	b.n	800b07a <UART_SetConfig+0x20e2>
 800b074:	4b3e      	ldr	r3, [pc, #248]	; (800b170 <UART_SetConfig+0x21d8>)
 800b076:	e000      	b.n	800b07a <UART_SetConfig+0x20e2>
 800b078:	4b32      	ldr	r3, [pc, #200]	; (800b144 <UART_SetConfig+0x21ac>)
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	6852      	ldr	r2, [r2, #4]
 800b07e:	0852      	lsrs	r2, r2, #1
 800b080:	441a      	add	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	fbb2 f3f3 	udiv	r3, r2, r3
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b08e:	e0dd      	b.n	800b24c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b094:	2b00      	cmp	r3, #0
 800b096:	d046      	beq.n	800b126 <UART_SetConfig+0x218e>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d040      	beq.n	800b122 <UART_SetConfig+0x218a>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a4:	2b02      	cmp	r3, #2
 800b0a6:	d03a      	beq.n	800b11e <UART_SetConfig+0x2186>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ac:	2b03      	cmp	r3, #3
 800b0ae:	d034      	beq.n	800b11a <UART_SetConfig+0x2182>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b4:	2b04      	cmp	r3, #4
 800b0b6:	d02e      	beq.n	800b116 <UART_SetConfig+0x217e>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0bc:	2b05      	cmp	r3, #5
 800b0be:	d028      	beq.n	800b112 <UART_SetConfig+0x217a>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c4:	2b06      	cmp	r3, #6
 800b0c6:	d022      	beq.n	800b10e <UART_SetConfig+0x2176>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0cc:	2b07      	cmp	r3, #7
 800b0ce:	d01c      	beq.n	800b10a <UART_SetConfig+0x2172>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d4:	2b08      	cmp	r3, #8
 800b0d6:	d016      	beq.n	800b106 <UART_SetConfig+0x216e>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0dc:	2b09      	cmp	r3, #9
 800b0de:	d00f      	beq.n	800b100 <UART_SetConfig+0x2168>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e4:	2b0a      	cmp	r3, #10
 800b0e6:	d008      	beq.n	800b0fa <UART_SetConfig+0x2162>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ec:	2b0b      	cmp	r3, #11
 800b0ee:	d102      	bne.n	800b0f6 <UART_SetConfig+0x215e>
 800b0f0:	f643 5309 	movw	r3, #15625	; 0x3d09
 800b0f4:	e018      	b.n	800b128 <UART_SetConfig+0x2190>
 800b0f6:	4b18      	ldr	r3, [pc, #96]	; (800b158 <UART_SetConfig+0x21c0>)
 800b0f8:	e016      	b.n	800b128 <UART_SetConfig+0x2190>
 800b0fa:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b0fe:	e013      	b.n	800b128 <UART_SetConfig+0x2190>
 800b100:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b104:	e010      	b.n	800b128 <UART_SetConfig+0x2190>
 800b106:	4b1b      	ldr	r3, [pc, #108]	; (800b174 <UART_SetConfig+0x21dc>)
 800b108:	e00e      	b.n	800b128 <UART_SetConfig+0x2190>
 800b10a:	4b0f      	ldr	r3, [pc, #60]	; (800b148 <UART_SetConfig+0x21b0>)
 800b10c:	e00c      	b.n	800b128 <UART_SetConfig+0x2190>
 800b10e:	4b1a      	ldr	r3, [pc, #104]	; (800b178 <UART_SetConfig+0x21e0>)
 800b110:	e00a      	b.n	800b128 <UART_SetConfig+0x2190>
 800b112:	4b1a      	ldr	r3, [pc, #104]	; (800b17c <UART_SetConfig+0x21e4>)
 800b114:	e008      	b.n	800b128 <UART_SetConfig+0x2190>
 800b116:	4b0d      	ldr	r3, [pc, #52]	; (800b14c <UART_SetConfig+0x21b4>)
 800b118:	e006      	b.n	800b128 <UART_SetConfig+0x2190>
 800b11a:	4b19      	ldr	r3, [pc, #100]	; (800b180 <UART_SetConfig+0x21e8>)
 800b11c:	e004      	b.n	800b128 <UART_SetConfig+0x2190>
 800b11e:	4b0c      	ldr	r3, [pc, #48]	; (800b150 <UART_SetConfig+0x21b8>)
 800b120:	e002      	b.n	800b128 <UART_SetConfig+0x2190>
 800b122:	4b0c      	ldr	r3, [pc, #48]	; (800b154 <UART_SetConfig+0x21bc>)
 800b124:	e000      	b.n	800b128 <UART_SetConfig+0x2190>
 800b126:	4b0c      	ldr	r3, [pc, #48]	; (800b158 <UART_SetConfig+0x21c0>)
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	6852      	ldr	r2, [r2, #4]
 800b12c:	0852      	lsrs	r2, r2, #1
 800b12e:	441a      	add	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	fbb2 f3f3 	udiv	r3, r2, r3
 800b138:	b29b      	uxth	r3, r3
 800b13a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b13c:	e086      	b.n	800b24c <UART_SetConfig+0x22b4>
 800b13e:	bf00      	nop
 800b140:	58024400 	.word	0x58024400
 800b144:	03d09000 	.word	0x03d09000
 800b148:	0003d090 	.word	0x0003d090
 800b14c:	0007a120 	.word	0x0007a120
 800b150:	000f4240 	.word	0x000f4240
 800b154:	001e8480 	.word	0x001e8480
 800b158:	003d0900 	.word	0x003d0900
 800b15c:	00516155 	.word	0x00516155
 800b160:	0061a800 	.word	0x0061a800
 800b164:	007a1200 	.word	0x007a1200
 800b168:	00a2c2aa 	.word	0x00a2c2aa
 800b16c:	00f42400 	.word	0x00f42400
 800b170:	01e84800 	.word	0x01e84800
 800b174:	0001e848 	.word	0x0001e848
 800b178:	00051615 	.word	0x00051615
 800b17c:	00061a80 	.word	0x00061a80
 800b180:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d04e      	beq.n	800b22a <UART_SetConfig+0x2292>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b190:	2b01      	cmp	r3, #1
 800b192:	d047      	beq.n	800b224 <UART_SetConfig+0x228c>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d040      	beq.n	800b21e <UART_SetConfig+0x2286>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a0:	2b03      	cmp	r3, #3
 800b1a2:	d039      	beq.n	800b218 <UART_SetConfig+0x2280>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a8:	2b04      	cmp	r3, #4
 800b1aa:	d032      	beq.n	800b212 <UART_SetConfig+0x227a>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b0:	2b05      	cmp	r3, #5
 800b1b2:	d02b      	beq.n	800b20c <UART_SetConfig+0x2274>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b8:	2b06      	cmp	r3, #6
 800b1ba:	d024      	beq.n	800b206 <UART_SetConfig+0x226e>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c0:	2b07      	cmp	r3, #7
 800b1c2:	d01d      	beq.n	800b200 <UART_SetConfig+0x2268>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c8:	2b08      	cmp	r3, #8
 800b1ca:	d016      	beq.n	800b1fa <UART_SetConfig+0x2262>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d0:	2b09      	cmp	r3, #9
 800b1d2:	d00f      	beq.n	800b1f4 <UART_SetConfig+0x225c>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d8:	2b0a      	cmp	r3, #10
 800b1da:	d008      	beq.n	800b1ee <UART_SetConfig+0x2256>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e0:	2b0b      	cmp	r3, #11
 800b1e2:	d101      	bne.n	800b1e8 <UART_SetConfig+0x2250>
 800b1e4:	2380      	movs	r3, #128	; 0x80
 800b1e6:	e022      	b.n	800b22e <UART_SetConfig+0x2296>
 800b1e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1ec:	e01f      	b.n	800b22e <UART_SetConfig+0x2296>
 800b1ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1f2:	e01c      	b.n	800b22e <UART_SetConfig+0x2296>
 800b1f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1f8:	e019      	b.n	800b22e <UART_SetConfig+0x2296>
 800b1fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1fe:	e016      	b.n	800b22e <UART_SetConfig+0x2296>
 800b200:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b204:	e013      	b.n	800b22e <UART_SetConfig+0x2296>
 800b206:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800b20a:	e010      	b.n	800b22e <UART_SetConfig+0x2296>
 800b20c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800b210:	e00d      	b.n	800b22e <UART_SetConfig+0x2296>
 800b212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b216:	e00a      	b.n	800b22e <UART_SetConfig+0x2296>
 800b218:	f241 5355 	movw	r3, #5461	; 0x1555
 800b21c:	e007      	b.n	800b22e <UART_SetConfig+0x2296>
 800b21e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b222:	e004      	b.n	800b22e <UART_SetConfig+0x2296>
 800b224:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b228:	e001      	b.n	800b22e <UART_SetConfig+0x2296>
 800b22a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	6852      	ldr	r2, [r2, #4]
 800b232:	0852      	lsrs	r2, r2, #1
 800b234:	441a      	add	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b23e:	b29b      	uxth	r3, r3
 800b240:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b242:	e003      	b.n	800b24c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800b244:	2301      	movs	r3, #1
 800b246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b24a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b24e:	2b0f      	cmp	r3, #15
 800b250:	d908      	bls.n	800b264 <UART_SetConfig+0x22cc>
 800b252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b258:	d204      	bcs.n	800b264 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b260:	60da      	str	r2, [r3, #12]
 800b262:	e002      	b.n	800b26a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b264:	2301      	movs	r3, #1
 800b266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2201      	movs	r2, #1
 800b26e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2201      	movs	r2, #1
 800b276:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b286:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3740      	adds	r7, #64	; 0x40
 800b28e:	46bd      	mov	sp, r7
 800b290:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800b294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a0:	f003 0301 	and.w	r3, r3, #1
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00a      	beq.n	800b2be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	430a      	orrs	r2, r1
 800b2bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c2:	f003 0302 	and.w	r3, r3, #2
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00a      	beq.n	800b2e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	430a      	orrs	r2, r1
 800b2de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e4:	f003 0304 	and.w	r3, r3, #4
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d00a      	beq.n	800b302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	430a      	orrs	r2, r1
 800b300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b306:	f003 0308 	and.w	r3, r3, #8
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d00a      	beq.n	800b324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	430a      	orrs	r2, r1
 800b322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b328:	f003 0310 	and.w	r3, r3, #16
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00a      	beq.n	800b346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	430a      	orrs	r2, r1
 800b344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b34a:	f003 0320 	and.w	r3, r3, #32
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00a      	beq.n	800b368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	430a      	orrs	r2, r1
 800b366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b370:	2b00      	cmp	r3, #0
 800b372:	d01a      	beq.n	800b3aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	430a      	orrs	r2, r1
 800b388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b38e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b392:	d10a      	bne.n	800b3aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	430a      	orrs	r2, r1
 800b3a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00a      	beq.n	800b3cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	430a      	orrs	r2, r1
 800b3ca:	605a      	str	r2, [r3, #4]
  }
}
 800b3cc:	bf00      	nop
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b086      	sub	sp, #24
 800b3dc:	af02      	add	r7, sp, #8
 800b3de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b3e8:	f7f6 fd94 	bl	8001f14 <HAL_GetTick>
 800b3ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f003 0308 	and.w	r3, r3, #8
 800b3f8:	2b08      	cmp	r3, #8
 800b3fa:	d10e      	bne.n	800b41a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b400:	9300      	str	r3, [sp, #0]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 f82c 	bl	800b468 <UART_WaitOnFlagUntilTimeout>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d001      	beq.n	800b41a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b416:	2303      	movs	r3, #3
 800b418:	e022      	b.n	800b460 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f003 0304 	and.w	r3, r3, #4
 800b424:	2b04      	cmp	r3, #4
 800b426:	d10e      	bne.n	800b446 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b42c:	9300      	str	r3, [sp, #0]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 f816 	bl	800b468 <UART_WaitOnFlagUntilTimeout>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d001      	beq.n	800b446 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b442:	2303      	movs	r3, #3
 800b444:	e00c      	b.n	800b460 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2220      	movs	r2, #32
 800b44a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2220      	movs	r2, #32
 800b452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	603b      	str	r3, [r7, #0]
 800b474:	4613      	mov	r3, r2
 800b476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b478:	e062      	b.n	800b540 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b47a:	69bb      	ldr	r3, [r7, #24]
 800b47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b480:	d05e      	beq.n	800b540 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b482:	f7f6 fd47 	bl	8001f14 <HAL_GetTick>
 800b486:	4602      	mov	r2, r0
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	1ad3      	subs	r3, r2, r3
 800b48c:	69ba      	ldr	r2, [r7, #24]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d302      	bcc.n	800b498 <UART_WaitOnFlagUntilTimeout+0x30>
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d11d      	bne.n	800b4d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b4a6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	689a      	ldr	r2, [r3, #8]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f022 0201 	bic.w	r2, r2, #1
 800b4b6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2220      	movs	r2, #32
 800b4bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2220      	movs	r2, #32
 800b4c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	e045      	b.n	800b560 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f003 0304 	and.w	r3, r3, #4
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d02e      	beq.n	800b540 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	69db      	ldr	r3, [r3, #28]
 800b4e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4f0:	d126      	bne.n	800b540 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b4fa:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b50a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	689a      	ldr	r2, [r3, #8]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f022 0201 	bic.w	r2, r2, #1
 800b51a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2220      	movs	r2, #32
 800b520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2220      	movs	r2, #32
 800b528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2220      	movs	r2, #32
 800b530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2200      	movs	r2, #0
 800b538:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800b53c:	2303      	movs	r3, #3
 800b53e:	e00f      	b.n	800b560 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	69da      	ldr	r2, [r3, #28]
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	4013      	ands	r3, r2
 800b54a:	68ba      	ldr	r2, [r7, #8]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	bf0c      	ite	eq
 800b550:	2301      	moveq	r3, #1
 800b552:	2300      	movne	r3, #0
 800b554:	b2db      	uxtb	r3, r3
 800b556:	461a      	mov	r2, r3
 800b558:	79fb      	ldrb	r3, [r7, #7]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d08d      	beq.n	800b47a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b57e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	6899      	ldr	r1, [r3, #8]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	4b08      	ldr	r3, [pc, #32]	; (800b5ac <UART_EndRxTransfer+0x44>)
 800b58c:	400b      	ands	r3, r1
 800b58e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2220      	movs	r2, #32
 800b594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800b59e:	bf00      	nop
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	effffffe 	.word	0xeffffffe

0800b5b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	f7fd fcd8 	bl	8008f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5d4:	bf00      	nop
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5ea:	2b21      	cmp	r3, #33	; 0x21
 800b5ec:	d12a      	bne.n	800b644 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d110      	bne.n	800b61c <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b608:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b618:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b61a:	e013      	b.n	800b644 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b620:	781a      	ldrb	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b62c:	1c5a      	adds	r2, r3, #1
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b638:	b29b      	uxth	r3, r3
 800b63a:	3b01      	subs	r3, #1
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800b644:	bf00      	nop
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b65e:	2b21      	cmp	r3, #33	; 0x21
 800b660:	d12f      	bne.n	800b6c2 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b668:	b29b      	uxth	r3, r3
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d110      	bne.n	800b690 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b67c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b68c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b68e:	e018      	b.n	800b6c2 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b694:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	881b      	ldrh	r3, [r3, #0]
 800b69a:	461a      	mov	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b6a4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6aa:	1c9a      	adds	r2, r3, #2
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	3b01      	subs	r3, #1
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800b6c2:	bf00      	nop
 800b6c4:	3714      	adds	r7, #20
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr

0800b6ce <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b6ce:	b480      	push	{r7}
 800b6d0:	b085      	sub	sp, #20
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6dc:	2b21      	cmp	r3, #33	; 0x21
 800b6de:	d13d      	bne.n	800b75c <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b6e6:	81fb      	strh	r3, [r7, #14]
 800b6e8:	e035      	b.n	800b756 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d111      	bne.n	800b71a <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	689a      	ldr	r2, [r3, #8]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800b704:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b714:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800b716:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800b718:	e020      	b.n	800b75c <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	69db      	ldr	r3, [r3, #28]
 800b720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b724:	2b00      	cmp	r3, #0
 800b726:	d013      	beq.n	800b750 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b72c:	781a      	ldrb	r2, [r3, #0]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b738:	1c5a      	adds	r2, r3, #1
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b744:	b29b      	uxth	r3, r3
 800b746:	3b01      	subs	r3, #1
 800b748:	b29a      	uxth	r2, r3
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b750:	89fb      	ldrh	r3, [r7, #14]
 800b752:	3b01      	subs	r3, #1
 800b754:	81fb      	strh	r3, [r7, #14]
 800b756:	89fb      	ldrh	r3, [r7, #14]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1c6      	bne.n	800b6ea <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800b75c:	bf00      	nop
 800b75e:	3714      	adds	r7, #20
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b776:	2b21      	cmp	r3, #33	; 0x21
 800b778:	d142      	bne.n	800b800 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b780:	81fb      	strh	r3, [r7, #14]
 800b782:	e03a      	b.n	800b7fa <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d111      	bne.n	800b7b4 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	689a      	ldr	r2, [r3, #8]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800b79e:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7ae:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800b7b0:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800b7b2:	e025      	b.n	800b800 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	69db      	ldr	r3, [r3, #28]
 800b7ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d018      	beq.n	800b7f4 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c6:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	881b      	ldrh	r3, [r3, #0]
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b7d6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7dc:	1c9a      	adds	r2, r3, #2
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	b29a      	uxth	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b7f4:	89fb      	ldrh	r3, [r7, #14]
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	81fb      	strh	r3, [r7, #14]
 800b7fa:	89fb      	ldrh	r3, [r7, #14]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1c1      	bne.n	800b784 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800b800:	bf00      	nop
 800b802:	3714      	adds	r7, #20
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b822:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2220      	movs	r2, #32
 800b828:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f7f4 ffcc 	bl	80007d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b838:	bf00      	nop
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b84e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b856:	2b22      	cmp	r3, #34	; 0x22
 800b858:	d13b      	bne.n	800b8d2 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b860:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b862:	89bb      	ldrh	r3, [r7, #12]
 800b864:	b2d9      	uxtb	r1, r3
 800b866:	89fb      	ldrh	r3, [r7, #14]
 800b868:	b2da      	uxtb	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b86e:	400a      	ands	r2, r1
 800b870:	b2d2      	uxtb	r2, r2
 800b872:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b878:	1c5a      	adds	r2, r3, #1
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b884:	b29b      	uxth	r3, r3
 800b886:	3b01      	subs	r3, #1
 800b888:	b29a      	uxth	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b896:	b29b      	uxth	r3, r3
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d122      	bne.n	800b8e2 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b8aa:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	689a      	ldr	r2, [r3, #8]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f022 0201 	bic.w	r2, r2, #1
 800b8ba:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2220      	movs	r2, #32
 800b8c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7f4 ffc2 	bl	8000854 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b8d0:	e007      	b.n	800b8e2 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	699a      	ldr	r2, [r3, #24]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f042 0208 	orr.w	r2, r2, #8
 800b8e0:	619a      	str	r2, [r3, #24]
}
 800b8e2:	bf00      	nop
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b084      	sub	sp, #16
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b8f8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b900:	2b22      	cmp	r3, #34	; 0x22
 800b902:	d13b      	bne.n	800b97c <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b910:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b912:	89ba      	ldrh	r2, [r7, #12]
 800b914:	89fb      	ldrh	r3, [r7, #14]
 800b916:	4013      	ands	r3, r2
 800b918:	b29a      	uxth	r2, r3
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b922:	1c9a      	adds	r2, r3, #2
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b92e:	b29b      	uxth	r3, r3
 800b930:	3b01      	subs	r3, #1
 800b932:	b29a      	uxth	r2, r3
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b940:	b29b      	uxth	r3, r3
 800b942:	2b00      	cmp	r3, #0
 800b944:	d122      	bne.n	800b98c <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b954:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	689a      	ldr	r2, [r3, #8]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f022 0201 	bic.w	r2, r2, #1
 800b964:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2220      	movs	r2, #32
 800b96a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f7f4 ff6d 	bl	8000854 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b97a:	e007      	b.n	800b98c <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	699a      	ldr	r2, [r3, #24]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f042 0208 	orr.w	r2, r2, #8
 800b98a:	619a      	str	r2, [r3, #24]
}
 800b98c:	bf00      	nop
 800b98e:	3710      	adds	r7, #16
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b9a2:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9aa:	2b22      	cmp	r3, #34	; 0x22
 800b9ac:	d166      	bne.n	800ba7c <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b9b4:	81fb      	strh	r3, [r7, #14]
 800b9b6:	e03d      	b.n	800ba34 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9be:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b9c0:	893b      	ldrh	r3, [r7, #8]
 800b9c2:	b2d9      	uxtb	r1, r3
 800b9c4:	89bb      	ldrh	r3, [r7, #12]
 800b9c6:	b2da      	uxtb	r2, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9cc:	400a      	ands	r2, r1
 800b9ce:	b2d2      	uxtb	r2, r2
 800b9d0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9d6:	1c5a      	adds	r2, r3, #1
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	b29a      	uxth	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d119      	bne.n	800ba2e <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba08:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	6899      	ldr	r1, [r3, #8]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	4b1f      	ldr	r3, [pc, #124]	; (800ba94 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800ba16:	400b      	ands	r3, r1
 800ba18:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2220      	movs	r2, #32
 800ba1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f7f4 ff13 	bl	8000854 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800ba2e:	89fb      	ldrh	r3, [r7, #14]
 800ba30:	3b01      	subs	r3, #1
 800ba32:	81fb      	strh	r3, [r7, #14]
 800ba34:	89fb      	ldrh	r3, [r7, #14]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d1be      	bne.n	800b9b8 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba40:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ba42:	897b      	ldrh	r3, [r7, #10]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d021      	beq.n	800ba8c <UART_RxISR_8BIT_FIFOEN+0xf8>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ba4e:	897a      	ldrh	r2, [r7, #10]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d21b      	bcs.n	800ba8c <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	689a      	ldr	r2, [r3, #8]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ba62:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	4a0c      	ldr	r2, [pc, #48]	; (800ba98 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800ba68:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f042 0220 	orr.w	r2, r2, #32
 800ba78:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ba7a:	e007      	b.n	800ba8c <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	699a      	ldr	r2, [r3, #24]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f042 0208 	orr.w	r2, r2, #8
 800ba8a:	619a      	str	r2, [r3, #24]
}
 800ba8c:	bf00      	nop
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	effffffe 	.word	0xeffffffe
 800ba98:	0800b841 	.word	0x0800b841

0800ba9c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b086      	sub	sp, #24
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800baaa:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bab2:	2b22      	cmp	r3, #34	; 0x22
 800bab4:	d166      	bne.n	800bb84 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800babc:	82fb      	strh	r3, [r7, #22]
 800babe:	e03d      	b.n	800bb3c <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac6:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bacc:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800bace:	8a3a      	ldrh	r2, [r7, #16]
 800bad0:	8abb      	ldrh	r3, [r7, #20]
 800bad2:	4013      	ands	r3, r2
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bade:	1c9a      	adds	r2, r3, #2
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800baea:	b29b      	uxth	r3, r3
 800baec:	3b01      	subs	r3, #1
 800baee:	b29a      	uxth	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d119      	bne.n	800bb36 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb10:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6899      	ldr	r1, [r3, #8]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	4b1f      	ldr	r3, [pc, #124]	; (800bb9c <UART_RxISR_16BIT_FIFOEN+0x100>)
 800bb1e:	400b      	ands	r3, r1
 800bb20:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2220      	movs	r2, #32
 800bb26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f7f4 fe8f 	bl	8000854 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800bb36:	8afb      	ldrh	r3, [r7, #22]
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	82fb      	strh	r3, [r7, #22]
 800bb3c:	8afb      	ldrh	r3, [r7, #22]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d1be      	bne.n	800bac0 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb48:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bb4a:	8a7b      	ldrh	r3, [r7, #18]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d021      	beq.n	800bb94 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bb56:	8a7a      	ldrh	r2, [r7, #18]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d21b      	bcs.n	800bb94 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	689a      	ldr	r2, [r3, #8]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bb6a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	4a0c      	ldr	r2, [pc, #48]	; (800bba0 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800bb70:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f042 0220 	orr.w	r2, r2, #32
 800bb80:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bb82:	e007      	b.n	800bb94 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	699a      	ldr	r2, [r3, #24]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f042 0208 	orr.w	r2, r2, #8
 800bb92:	619a      	str	r2, [r3, #24]
}
 800bb94:	bf00      	nop
 800bb96:	3718      	adds	r7, #24
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	effffffe 	.word	0xeffffffe
 800bba0:	0800b8eb 	.word	0x0800b8eb

0800bba4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bbd4:	bf00      	nop
 800bbd6:	370c      	adds	r7, #12
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b085      	sub	sp, #20
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d101      	bne.n	800bbf6 <HAL_UARTEx_DisableFifoMode+0x16>
 800bbf2:	2302      	movs	r3, #2
 800bbf4:	e027      	b.n	800bc46 <HAL_UARTEx_DisableFifoMode+0x66>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2224      	movs	r2, #36	; 0x24
 800bc02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f022 0201 	bic.w	r2, r2, #1
 800bc1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bc24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2220      	movs	r2, #32
 800bc38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3714      	adds	r7, #20
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr

0800bc52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b084      	sub	sp, #16
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d101      	bne.n	800bc6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bc66:	2302      	movs	r3, #2
 800bc68:	e02d      	b.n	800bcc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2224      	movs	r2, #36	; 0x24
 800bc76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f022 0201 	bic.w	r2, r2, #1
 800bc90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	683a      	ldr	r2, [r7, #0]
 800bca2:	430a      	orrs	r2, r1
 800bca4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 f850 	bl	800bd4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2220      	movs	r2, #32
 800bcb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bcc4:	2300      	movs	r3, #0
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3710      	adds	r7, #16
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcce:	b580      	push	{r7, lr}
 800bcd0:	b084      	sub	sp, #16
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
 800bcd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d101      	bne.n	800bce6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bce2:	2302      	movs	r3, #2
 800bce4:	e02d      	b.n	800bd42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2201      	movs	r2, #1
 800bcea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2224      	movs	r2, #36	; 0x24
 800bcf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f022 0201 	bic.w	r2, r2, #1
 800bd0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	689b      	ldr	r3, [r3, #8]
 800bd14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	683a      	ldr	r2, [r7, #0]
 800bd1e:	430a      	orrs	r2, r1
 800bd20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 f812 	bl	800bd4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	68fa      	ldr	r2, [r7, #12]
 800bd2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2220      	movs	r2, #32
 800bd34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bd40:	2300      	movs	r3, #0
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
	...

0800bd4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b089      	sub	sp, #36	; 0x24
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800bd54:	4a2f      	ldr	r2, [pc, #188]	; (800be14 <UARTEx_SetNbDataToProcess+0xc8>)
 800bd56:	f107 0314 	add.w	r3, r7, #20
 800bd5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bd5e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800bd62:	4a2d      	ldr	r2, [pc, #180]	; (800be18 <UARTEx_SetNbDataToProcess+0xcc>)
 800bd64:	f107 030c 	add.w	r3, r7, #12
 800bd68:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bd6c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d108      	bne.n	800bd8a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bd88:	e03d      	b.n	800be06 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bd8a:	2308      	movs	r3, #8
 800bd8c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bd8e:	2308      	movs	r3, #8
 800bd90:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	0e5b      	lsrs	r3, r3, #25
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	f003 0307 	and.w	r3, r3, #7
 800bda0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	0f5b      	lsrs	r3, r3, #29
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	f003 0307 	and.w	r3, r3, #7
 800bdb0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bdb2:	7fbb      	ldrb	r3, [r7, #30]
 800bdb4:	7f3a      	ldrb	r2, [r7, #28]
 800bdb6:	f107 0120 	add.w	r1, r7, #32
 800bdba:	440a      	add	r2, r1
 800bdbc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bdc0:	fb02 f303 	mul.w	r3, r2, r3
 800bdc4:	7f3a      	ldrb	r2, [r7, #28]
 800bdc6:	f107 0120 	add.w	r1, r7, #32
 800bdca:	440a      	add	r2, r1
 800bdcc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bdd0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdd4:	b29a      	uxth	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800bddc:	7ffb      	ldrb	r3, [r7, #31]
 800bdde:	7f7a      	ldrb	r2, [r7, #29]
 800bde0:	f107 0120 	add.w	r1, r7, #32
 800bde4:	440a      	add	r2, r1
 800bde6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bdea:	fb02 f303 	mul.w	r3, r2, r3
 800bdee:	7f7a      	ldrb	r2, [r7, #29]
 800bdf0:	f107 0120 	add.w	r1, r7, #32
 800bdf4:	440a      	add	r2, r1
 800bdf6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bdfa:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdfe:	b29a      	uxth	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800be06:	bf00      	nop
 800be08:	3724      	adds	r7, #36	; 0x24
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	0800be8c 	.word	0x0800be8c
 800be18:	0800be94 	.word	0x0800be94

0800be1c <__libc_init_array>:
 800be1c:	b570      	push	{r4, r5, r6, lr}
 800be1e:	4e0d      	ldr	r6, [pc, #52]	; (800be54 <__libc_init_array+0x38>)
 800be20:	4c0d      	ldr	r4, [pc, #52]	; (800be58 <__libc_init_array+0x3c>)
 800be22:	1ba4      	subs	r4, r4, r6
 800be24:	10a4      	asrs	r4, r4, #2
 800be26:	2500      	movs	r5, #0
 800be28:	42a5      	cmp	r5, r4
 800be2a:	d109      	bne.n	800be40 <__libc_init_array+0x24>
 800be2c:	4e0b      	ldr	r6, [pc, #44]	; (800be5c <__libc_init_array+0x40>)
 800be2e:	4c0c      	ldr	r4, [pc, #48]	; (800be60 <__libc_init_array+0x44>)
 800be30:	f000 f820 	bl	800be74 <_init>
 800be34:	1ba4      	subs	r4, r4, r6
 800be36:	10a4      	asrs	r4, r4, #2
 800be38:	2500      	movs	r5, #0
 800be3a:	42a5      	cmp	r5, r4
 800be3c:	d105      	bne.n	800be4a <__libc_init_array+0x2e>
 800be3e:	bd70      	pop	{r4, r5, r6, pc}
 800be40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800be44:	4798      	blx	r3
 800be46:	3501      	adds	r5, #1
 800be48:	e7ee      	b.n	800be28 <__libc_init_array+0xc>
 800be4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800be4e:	4798      	blx	r3
 800be50:	3501      	adds	r5, #1
 800be52:	e7f2      	b.n	800be3a <__libc_init_array+0x1e>
 800be54:	0800bebc 	.word	0x0800bebc
 800be58:	0800bebc 	.word	0x0800bebc
 800be5c:	0800bebc 	.word	0x0800bebc
 800be60:	0800bec0 	.word	0x0800bec0

0800be64 <memset>:
 800be64:	4402      	add	r2, r0
 800be66:	4603      	mov	r3, r0
 800be68:	4293      	cmp	r3, r2
 800be6a:	d100      	bne.n	800be6e <memset+0xa>
 800be6c:	4770      	bx	lr
 800be6e:	f803 1b01 	strb.w	r1, [r3], #1
 800be72:	e7f9      	b.n	800be68 <memset+0x4>

0800be74 <_init>:
 800be74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be76:	bf00      	nop
 800be78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be7a:	bc08      	pop	{r3}
 800be7c:	469e      	mov	lr, r3
 800be7e:	4770      	bx	lr

0800be80 <_fini>:
 800be80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be82:	bf00      	nop
 800be84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be86:	bc08      	pop	{r3}
 800be88:	469e      	mov	lr, r3
 800be8a:	4770      	bx	lr
