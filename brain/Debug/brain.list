
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df34  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0800e1d0  0800e1d0  0001e1d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e418  0800e418  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e418  0800e418  0001e418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e420  0800e420  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e420  0800e420  0001e420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e424  0800e424  0001e424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  24000000  0800e428  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000069c  240000b8  0800e4e0  000200b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000754  0800e4e0  00020754  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020730  00000000  00000000  000200e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002efc  00000000  00000000  00040816  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015d0  00000000  00000000  00043718  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b8  00000000  00000000  00044ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000386bc  00000000  00000000  000461a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012221  00000000  00000000  0007e85c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0017390a  00000000  00000000  00090a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00204387  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006158  00000000  00000000  00204404  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000b8 	.word	0x240000b8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800e1b4 	.word	0x0800e1b4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000bc 	.word	0x240000bc
 80002d4:	0800e1b4 	.word	0x0800e1b4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayUs_Init+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <delayUs_Init+0x38>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <delayUs_Init+0x38>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delayUs_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delayUs_Init+0x3c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <delayUs_Init+0x3c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
    }
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000

08000618 <peripheralUART_Init>:
int trackingWait4CompassTx;
int trackingWait4CompassRx;
int trackingWait4SpinalCordTx;
int trackingWait4SpinalCordRx;
void peripheralUART_Init()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	4903      	ldr	r1, [pc, #12]	; (800062c <peripheralUART_Init+0x14>)
 8000620:	4803      	ldr	r0, [pc, #12]	; (8000630 <peripheralUART_Init+0x18>)
 8000622:	f009 fb95 	bl	8009d50 <HAL_UART_Receive_IT>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	24000694 	.word	0x24000694
 8000630:	240005e0 	.word	0x240005e0

08000634 <compassReset>:

////////////////////////////////////////////////////////////
void compassReset(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <compassReset+0x1c>)
 800063a:	2261      	movs	r2, #97	; 0x61
 800063c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 800063e:	2201      	movs	r2, #1
 8000640:	4903      	ldr	r1, [pc, #12]	; (8000650 <compassReset+0x1c>)
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <compassReset+0x20>)
 8000644:	f009 fb00 	bl	8009c48 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 8000648:	f000 f806 	bl	8000658 <wait4CompassTx>
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	24000000 	.word	0x24000000
 8000654:	24000470 	.word	0x24000470

08000658 <wait4CompassTx>:

	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
	while(compassTxCplt == 0)
 800065c:	e004      	b.n	8000668 <wait4CompassTx+0x10>
	{
		trackingWait4CompassTx++;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <wait4CompassTx+0x28>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	4a06      	ldr	r2, [pc, #24]	; (8000680 <wait4CompassTx+0x28>)
 8000666:	6013      	str	r3, [r2, #0]
	while(compassTxCplt == 0)
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <wait4CompassTx+0x2c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0f6      	beq.n	800065e <wait4CompassTx+0x6>
	}
	compassTxCplt = 0;
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <wait4CompassTx+0x2c>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	2400074c 	.word	0x2400074c
 8000684:	24000690 	.word	0x24000690

08000688 <readADC>:
uint16_t _pitchFilterWindow[10] = {0,0,0,0,0,0,0,0,0,0};
uint16_t _pitchFinalFilter;


void readADC(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&roll, (uint32_t*)rollRawValue, 2);
 800068c:	2202      	movs	r2, #2
 800068e:	4928      	ldr	r1, [pc, #160]	; (8000730 <readADC+0xa8>)
 8000690:	4828      	ldr	r0, [pc, #160]	; (8000734 <readADC+0xac>)
 8000692:	f002 fadd 	bl	8002c50 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&pitch, (uint32_t*)pitchRawValue, 1);
 8000696:	2201      	movs	r2, #1
 8000698:	4927      	ldr	r1, [pc, #156]	; (8000738 <readADC+0xb0>)
 800069a:	4828      	ldr	r0, [pc, #160]	; (800073c <readADC+0xb4>)
 800069c:	f002 fad8 	bl	8002c50 <HAL_ADC_Start_DMA>
	leftRawDistance = a_Linear *rollRawValue[rigt] + b_Linear;
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <readADC+0xa8>)
 80006a2:	885b      	ldrh	r3, [r3, #2]
 80006a4:	ee07 3a90 	vmov	s15, r3
 80006a8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80006ac:	4b24      	ldr	r3, [pc, #144]	; (8000740 <readADC+0xb8>)
 80006ae:	ed93 7b00 	vldr	d7, [r3]
 80006b2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80006b6:	4b23      	ldr	r3, [pc, #140]	; (8000744 <readADC+0xbc>)
 80006b8:	ed93 7b00 	vldr	d7, [r3]
 80006bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80006c0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80006c4:	ee17 3a90 	vmov	r3, s15
 80006c8:	b21a      	sxth	r2, r3
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <readADC+0xc0>)
 80006cc:	801a      	strh	r2, [r3, #0]
	rigtRawDistance = a_Linear *rollRawValue[left] + b_Linear;
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <readADC+0xa8>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	ee07 3a90 	vmov	s15, r3
 80006d6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <readADC+0xb8>)
 80006dc:	ed93 7b00 	vldr	d7, [r3]
 80006e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <readADC+0xbc>)
 80006e6:	ed93 7b00 	vldr	d7, [r3]
 80006ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80006ee:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80006f2:	ee17 3a90 	vmov	r3, s15
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <readADC+0xc4>)
 80006fa:	801a      	strh	r2, [r3, #0]
	pitchRawDistance = a_Linear *pitchRawValue[0] + b_Linear;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <readADC+0xb0>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	ee07 3a90 	vmov	s15, r3
 8000704:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <readADC+0xb8>)
 800070a:	ed93 7b00 	vldr	d7, [r3]
 800070e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <readADC+0xbc>)
 8000714:	ed93 7b00 	vldr	d7, [r3]
 8000718:	ee36 7b07 	vadd.f64	d7, d6, d7
 800071c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000720:	ee17 3a90 	vmov	r3, s15
 8000724:	b21a      	sxth	r2, r3
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <readADC+0xc8>)
 8000728:	801a      	strh	r2, [r3, #0]
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	240003ec 	.word	0x240003ec
 8000734:	24000384 	.word	0x24000384
 8000738:	240005d0 	.word	0x240005d0
 800073c:	240003f0 	.word	0x240003f0
 8000740:	24000018 	.word	0x24000018
 8000744:	24000020 	.word	0x24000020
 8000748:	24000108 	.word	0x24000108
 800074c:	240001b0 	.word	0x240001b0
 8000750:	24000748 	.word	0x24000748

08000754 <controlMotor1>:
int trackingControlMotor4;

#define BRAKE_SPEED 1

void controlMotor1(int _speed)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor1Dir_Pin, motor1Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor1Speed] = abs(_speed);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	bfb8      	it	lt
 8000762:	425b      	neglt	r3, r3
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <controlMotor1+0x40>)
 8000768:	701a      	strb	r2, [r3, #0]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor1Dir] = ccw) : (spinalCordTxPacket[motor1Dir] = fcw);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b00      	cmp	r3, #0
 800076e:	db03      	blt.n	8000778 <controlMotor1+0x24>
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <controlMotor1+0x40>)
 8000772:	2200      	movs	r2, #0
 8000774:	711a      	strb	r2, [r3, #4]
 8000776:	e002      	b.n	800077e <controlMotor1+0x2a>
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <controlMotor1+0x40>)
 800077a:	2201      	movs	r2, #1
 800077c:	711a      	strb	r2, [r3, #4]
	trackingControlMotor1++;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <controlMotor1+0x44>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	3301      	adds	r3, #1
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <controlMotor1+0x44>)
 8000786:	6013      	str	r3, [r2, #0]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	2400000c 	.word	0x2400000c
 8000798:	24000460 	.word	0x24000460

0800079c <controlMotor2>:
void controlMotor2(int _speed)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor2Dir_Pin, motor2Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor2Speed] = abs(_speed);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	bfb8      	it	lt
 80007aa:	425b      	neglt	r3, r3
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <controlMotor2+0x40>)
 80007b0:	705a      	strb	r2, [r3, #1]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor2Dir] = ccw) : (spinalCordTxPacket[motor2Dir] = fcw);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	db03      	blt.n	80007c0 <controlMotor2+0x24>
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <controlMotor2+0x40>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	715a      	strb	r2, [r3, #5]
 80007be:	e002      	b.n	80007c6 <controlMotor2+0x2a>
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <controlMotor2+0x40>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	715a      	strb	r2, [r3, #5]
	trackingControlMotor2++;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <controlMotor2+0x44>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	3301      	adds	r3, #1
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <controlMotor2+0x44>)
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	2400000c 	.word	0x2400000c
 80007e0:	240002cc 	.word	0x240002cc

080007e4 <controlMotor3>:
void controlMotor3(int _speed)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor3Dir_Pin, motor3Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor3Speed] = abs(_speed);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <controlMotor3+0x40>)
 80007f8:	709a      	strb	r2, [r3, #2]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor3Dir] = ccw) : (spinalCordTxPacket[motor3Dir] = fcw);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db03      	blt.n	8000808 <controlMotor3+0x24>
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <controlMotor3+0x40>)
 8000802:	2200      	movs	r2, #0
 8000804:	719a      	strb	r2, [r3, #6]
 8000806:	e002      	b.n	800080e <controlMotor3+0x2a>
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <controlMotor3+0x40>)
 800080a:	2201      	movs	r2, #1
 800080c:	719a      	strb	r2, [r3, #6]
	trackingControlMotor3++;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <controlMotor3+0x44>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	4a04      	ldr	r2, [pc, #16]	; (8000828 <controlMotor3+0x44>)
 8000816:	6013      	str	r3, [r2, #0]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	2400000c 	.word	0x2400000c
 8000828:	24000250 	.word	0x24000250

0800082c <controlMotor4>:
void controlMotor4(int _speed)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	// }
	// else
	// {
	// 	HAL_GPIO_WritePin(motor3Dir_Pin, motor3Dir_GPIO_Port, fcw);
	// }
	spinalCordTxPacket[motor4Speed] = abs(_speed);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	bfb8      	it	lt
 800083a:	425b      	neglt	r3, r3
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <controlMotor4+0x40>)
 8000840:	70da      	strb	r2, [r3, #3]
	(_speed>=0) ? 
	(spinalCordTxPacket[motor4Dir] = ccw) : (spinalCordTxPacket[motor4Dir] = fcw);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	db03      	blt.n	8000850 <controlMotor4+0x24>
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <controlMotor4+0x40>)
 800084a:	2200      	movs	r2, #0
 800084c:	71da      	strb	r2, [r3, #7]
 800084e:	e002      	b.n	8000856 <controlMotor4+0x2a>
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <controlMotor4+0x40>)
 8000852:	2201      	movs	r2, #1
 8000854:	71da      	strb	r2, [r3, #7]
	trackingControlMotor4++;
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <controlMotor4+0x44>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <controlMotor4+0x44>)
 800085e:	6013      	str	r3, [r2, #0]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	2400000c 	.word	0x2400000c
 8000870:	24000598 	.word	0x24000598
 8000874:	00000000 	.word	0x00000000

08000878 <PIDyaw>:

double PIDyaw(int _yawValue, int _yawSetpoint)
{
 8000878:	b490      	push	{r4, r7}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
	yawError = _yawSetpoint - _yawValue;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	b29a      	uxth	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	b29b      	uxth	r3, r3
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	b29b      	uxth	r3, r3
 800088e:	b21a      	sxth	r2, r3
 8000890:	4b41      	ldr	r3, [pc, #260]	; (8000998 <PIDyaw+0x120>)
 8000892:	801a      	strh	r2, [r3, #0]
	yawP = yawError;
 8000894:	4b40      	ldr	r3, [pc, #256]	; (8000998 <PIDyaw+0x120>)
 8000896:	f9b3 3000 	ldrsh.w	r3, [r3]
 800089a:	ee07 3a90 	vmov	s15, r3
 800089e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008a2:	4b3e      	ldr	r3, [pc, #248]	; (800099c <PIDyaw+0x124>)
 80008a4:	ed83 7b00 	vstr	d7, [r3]
	yawD = yawError - yawPreError;
 80008a8:	4b3b      	ldr	r3, [pc, #236]	; (8000998 <PIDyaw+0x120>)
 80008aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ae:	461a      	mov	r2, r3
 80008b0:	4b3b      	ldr	r3, [pc, #236]	; (80009a0 <PIDyaw+0x128>)
 80008b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	ee07 3a90 	vmov	s15, r3
 80008bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008c0:	4b38      	ldr	r3, [pc, #224]	; (80009a4 <PIDyaw+0x12c>)
 80008c2:	ed83 7b00 	vstr	d7, [r3]
	yawI = yawError + yawI;
 80008c6:	4b34      	ldr	r3, [pc, #208]	; (8000998 <PIDyaw+0x120>)
 80008c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008cc:	ee07 3a90 	vmov	s15, r3
 80008d0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80008d4:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <PIDyaw+0x130>)
 80008d6:	ed93 7b00 	vldr	d7, [r3]
 80008da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008de:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <PIDyaw+0x130>)
 80008e0:	ed83 7b00 	vstr	d7, [r3]
	yawPID = yawKp*yawP + yawKd*yawD + yawKi*yawI;
 80008e4:	4b31      	ldr	r3, [pc, #196]	; (80009ac <PIDyaw+0x134>)
 80008e6:	ed93 6b00 	vldr	d6, [r3]
 80008ea:	4b2c      	ldr	r3, [pc, #176]	; (800099c <PIDyaw+0x124>)
 80008ec:	ed93 7b00 	vldr	d7, [r3]
 80008f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80008f4:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <PIDyaw+0x138>)
 80008f6:	ed93 5b00 	vldr	d5, [r3]
 80008fa:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <PIDyaw+0x12c>)
 80008fc:	ed93 7b00 	vldr	d7, [r3]
 8000900:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000904:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000908:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <PIDyaw+0x13c>)
 800090a:	ed93 5b00 	vldr	d5, [r3]
 800090e:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <PIDyaw+0x130>)
 8000910:	ed93 7b00 	vldr	d7, [r3]
 8000914:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000918:	ee36 7b07 	vadd.f64	d7, d6, d7
 800091c:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <PIDyaw+0x140>)
 800091e:	ed83 7b00 	vstr	d7, [r3]
	if(yawPID > MAX_YAW_PID)
 8000922:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <PIDyaw+0x140>)
 8000924:	ed93 7b00 	vldr	d7, [r3]
 8000928:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000988 <PIDyaw+0x110>
 800092c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000934:	dd05      	ble.n	8000942 <PIDyaw+0xca>
	{
		yawPID = MAX_YAW_PID;
 8000936:	4a20      	ldr	r2, [pc, #128]	; (80009b8 <PIDyaw+0x140>)
 8000938:	f04f 0300 	mov.w	r3, #0
 800093c:	4c1f      	ldr	r4, [pc, #124]	; (80009bc <PIDyaw+0x144>)
 800093e:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(yawPID < MIN_YAW_PID)
 8000942:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <PIDyaw+0x140>)
 8000944:	ed93 7b00 	vldr	d7, [r3]
 8000948:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000990 <PIDyaw+0x118>
 800094c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000954:	d505      	bpl.n	8000962 <PIDyaw+0xea>
	{
		yawPID = MIN_YAW_PID;
 8000956:	4a18      	ldr	r2, [pc, #96]	; (80009b8 <PIDyaw+0x140>)
 8000958:	f04f 0300 	mov.w	r3, #0
 800095c:	4c18      	ldr	r4, [pc, #96]	; (80009c0 <PIDyaw+0x148>)
 800095e:	e9c2 3400 	strd	r3, r4, [r2]
	}
	yawPreError = yawError;
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <PIDyaw+0x120>)
 8000964:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000968:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <PIDyaw+0x128>)
 800096a:	801a      	strh	r2, [r3, #0]
	return yawPID;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <PIDyaw+0x140>)
 800096e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000972:	ec44 3b17 	vmov	d7, r3, r4
}
 8000976:	eeb0 0b47 	vmov.f64	d0, d7
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bc90      	pop	{r4, r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	f3af 8000 	nop.w
 8000988:	00000000 	.word	0x00000000
 800098c:	40590000 	.word	0x40590000
 8000990:	00000000 	.word	0x00000000
 8000994:	c0590000 	.word	0xc0590000
 8000998:	24000358 	.word	0x24000358
 800099c:	24000360 	.word	0x24000360
 80009a0:	240001c0 	.word	0x240001c0
 80009a4:	24000100 	.word	0x24000100
 80009a8:	24000350 	.word	0x24000350
 80009ac:	24000028 	.word	0x24000028
 80009b0:	240000d8 	.word	0x240000d8
 80009b4:	240000e0 	.word	0x240000e0
 80009b8:	240005d8 	.word	0x240005d8
 80009bc:	40590000 	.word	0x40590000
 80009c0:	c0590000 	.word	0xc0590000
 80009c4:	00000000 	.word	0x00000000

080009c8 <PIDroL>:
	roRPreError = roRError;
	return roRPID;
}

double PIDroL(int _roLValue, int _roLSetpoint)
{
 80009c8:	b490      	push	{r4, r7}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
	roLError = -_roLSetpoint + _roLValue;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	b29b      	uxth	r3, r3
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	b29b      	uxth	r3, r3
 80009de:	b21a      	sxth	r2, r3
 80009e0:	4b41      	ldr	r3, [pc, #260]	; (8000ae8 <PIDroL+0x120>)
 80009e2:	801a      	strh	r2, [r3, #0]
	roLP = roLError;
 80009e4:	4b40      	ldr	r3, [pc, #256]	; (8000ae8 <PIDroL+0x120>)
 80009e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ea:	ee07 3a90 	vmov	s15, r3
 80009ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009f2:	4b3e      	ldr	r3, [pc, #248]	; (8000aec <PIDroL+0x124>)
 80009f4:	ed83 7b00 	vstr	d7, [r3]
	roLD = roLError - roLPreError;
 80009f8:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <PIDroL+0x120>)
 80009fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009fe:	461a      	mov	r2, r3
 8000a00:	4b3b      	ldr	r3, [pc, #236]	; (8000af0 <PIDroL+0x128>)
 8000a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	ee07 3a90 	vmov	s15, r3
 8000a0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a10:	4b38      	ldr	r3, [pc, #224]	; (8000af4 <PIDroL+0x12c>)
 8000a12:	ed83 7b00 	vstr	d7, [r3]
	roLI = roLError + roLI;
 8000a16:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <PIDroL+0x120>)
 8000a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1c:	ee07 3a90 	vmov	s15, r3
 8000a20:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a24:	4b34      	ldr	r3, [pc, #208]	; (8000af8 <PIDroL+0x130>)
 8000a26:	ed93 7b00 	vldr	d7, [r3]
 8000a2a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a2e:	4b32      	ldr	r3, [pc, #200]	; (8000af8 <PIDroL+0x130>)
 8000a30:	ed83 7b00 	vstr	d7, [r3]
	roLPID = roLKp*roLP + roLKd*roLD + roLKi*roLI;
 8000a34:	4b31      	ldr	r3, [pc, #196]	; (8000afc <PIDroL+0x134>)
 8000a36:	ed93 6b00 	vldr	d6, [r3]
 8000a3a:	4b2c      	ldr	r3, [pc, #176]	; (8000aec <PIDroL+0x124>)
 8000a3c:	ed93 7b00 	vldr	d7, [r3]
 8000a40:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000a44:	4b2e      	ldr	r3, [pc, #184]	; (8000b00 <PIDroL+0x138>)
 8000a46:	ed93 5b00 	vldr	d5, [r3]
 8000a4a:	4b2a      	ldr	r3, [pc, #168]	; (8000af4 <PIDroL+0x12c>)
 8000a4c:	ed93 7b00 	vldr	d7, [r3]
 8000a50:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000a54:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000a58:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <PIDroL+0x13c>)
 8000a5a:	ed93 5b00 	vldr	d5, [r3]
 8000a5e:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <PIDroL+0x130>)
 8000a60:	ed93 7b00 	vldr	d7, [r3]
 8000a64:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000a68:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a6c:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <PIDroL+0x140>)
 8000a6e:	ed83 7b00 	vstr	d7, [r3]
	if(roLPID > MAX_ROL_PID)
 8000a72:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <PIDroL+0x140>)
 8000a74:	ed93 7b00 	vldr	d7, [r3]
 8000a78:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000ad8 <PIDroL+0x110>
 8000a7c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a84:	dd05      	ble.n	8000a92 <PIDroL+0xca>
	{
		roLPID = MAX_ROL_PID;
 8000a86:	4a20      	ldr	r2, [pc, #128]	; (8000b08 <PIDroL+0x140>)
 8000a88:	f04f 0300 	mov.w	r3, #0
 8000a8c:	4c1f      	ldr	r4, [pc, #124]	; (8000b0c <PIDroL+0x144>)
 8000a8e:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(roLPID < MIN_ROL_PID)
 8000a92:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <PIDroL+0x140>)
 8000a94:	ed93 7b00 	vldr	d7, [r3]
 8000a98:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000ae0 <PIDroL+0x118>
 8000a9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa4:	d505      	bpl.n	8000ab2 <PIDroL+0xea>
	{
		roLPID = MIN_ROL_PID;
 8000aa6:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <PIDroL+0x140>)
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	4c18      	ldr	r4, [pc, #96]	; (8000b10 <PIDroL+0x148>)
 8000aae:	e9c2 3400 	strd	r3, r4, [r2]
	}
	roLPreError = roLError;
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <PIDroL+0x120>)
 8000ab4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <PIDroL+0x128>)
 8000aba:	801a      	strh	r2, [r3, #0]
	return roLPID;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <PIDroL+0x140>)
 8000abe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ac2:	ec44 3b17 	vmov	d7, r3, r4
}
 8000ac6:	eeb0 0b47 	vmov.f64	d0, d7
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc90      	pop	{r4, r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	f3af 8000 	nop.w
 8000ad8:	00000000 	.word	0x00000000
 8000adc:	40490000 	.word	0x40490000
 8000ae0:	00000000 	.word	0x00000000
 8000ae4:	c0490000 	.word	0xc0490000
 8000ae8:	2400035c 	.word	0x2400035c
 8000aec:	240005b0 	.word	0x240005b0
 8000af0:	24000500 	.word	0x24000500
 8000af4:	240001a8 	.word	0x240001a8
 8000af8:	240001b8 	.word	0x240001b8
 8000afc:	24000030 	.word	0x24000030
 8000b00:	240002d0 	.word	0x240002d0
 8000b04:	24000680 	.word	0x24000680
 8000b08:	24000368 	.word	0x24000368
 8000b0c:	40490000 	.word	0x40490000
 8000b10:	c0490000 	.word	0xc0490000
 8000b14:	00000000 	.word	0x00000000

08000b18 <PIDpit>:

double PIDpit(int _pitValue, int _pitSetpoint)
{
 8000b18:	b490      	push	{r4, r7}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
	pitError = _pitSetpoint - _pitValue;
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	ee07 3a90 	vmov	s15, r3
 8000b2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b30:	4b3b      	ldr	r3, [pc, #236]	; (8000c20 <PIDpit+0x108>)
 8000b32:	ed83 7b00 	vstr	d7, [r3]
	pitP = pitError;
 8000b36:	4b3a      	ldr	r3, [pc, #232]	; (8000c20 <PIDpit+0x108>)
 8000b38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000b3c:	4a39      	ldr	r2, [pc, #228]	; (8000c24 <PIDpit+0x10c>)
 8000b3e:	e9c2 3400 	strd	r3, r4, [r2]
	pitD = pitError - pitPreError;
 8000b42:	4b37      	ldr	r3, [pc, #220]	; (8000c20 <PIDpit+0x108>)
 8000b44:	ed93 6b00 	vldr	d6, [r3]
 8000b48:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <PIDpit+0x110>)
 8000b4a:	ed93 7b00 	vldr	d7, [r3]
 8000b4e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b52:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <PIDpit+0x114>)
 8000b54:	ed83 7b00 	vstr	d7, [r3]
	pitI = pitError + pitI;
 8000b58:	4b31      	ldr	r3, [pc, #196]	; (8000c20 <PIDpit+0x108>)
 8000b5a:	ed93 6b00 	vldr	d6, [r3]
 8000b5e:	4b34      	ldr	r3, [pc, #208]	; (8000c30 <PIDpit+0x118>)
 8000b60:	ed93 7b00 	vldr	d7, [r3]
 8000b64:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b68:	4b31      	ldr	r3, [pc, #196]	; (8000c30 <PIDpit+0x118>)
 8000b6a:	ed83 7b00 	vstr	d7, [r3]
	pitPID = pitKp*pitP + pitKd*pitD + pitKi*pitI;
 8000b6e:	4b31      	ldr	r3, [pc, #196]	; (8000c34 <PIDpit+0x11c>)
 8000b70:	ed93 6b00 	vldr	d6, [r3]
 8000b74:	4b2b      	ldr	r3, [pc, #172]	; (8000c24 <PIDpit+0x10c>)
 8000b76:	ed93 7b00 	vldr	d7, [r3]
 8000b7a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <PIDpit+0x120>)
 8000b80:	ed93 5b00 	vldr	d5, [r3]
 8000b84:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <PIDpit+0x114>)
 8000b86:	ed93 7b00 	vldr	d7, [r3]
 8000b8a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b8e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b92:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <PIDpit+0x124>)
 8000b94:	ed93 5b00 	vldr	d5, [r3]
 8000b98:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <PIDpit+0x118>)
 8000b9a:	ed93 7b00 	vldr	d7, [r3]
 8000b9e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000ba2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ba6:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <PIDpit+0x128>)
 8000ba8:	ed83 7b00 	vstr	d7, [r3]
	if(pitPID > MAX_PIT_PID)
 8000bac:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <PIDpit+0x128>)
 8000bae:	ed93 7b00 	vldr	d7, [r3]
 8000bb2:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000c10 <PIDpit+0xf8>
 8000bb6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bbe:	dd05      	ble.n	8000bcc <PIDpit+0xb4>
	{
		pitPID = MAX_PIT_PID;
 8000bc0:	4a1f      	ldr	r2, [pc, #124]	; (8000c40 <PIDpit+0x128>)
 8000bc2:	f04f 0300 	mov.w	r3, #0
 8000bc6:	4c1f      	ldr	r4, [pc, #124]	; (8000c44 <PIDpit+0x12c>)
 8000bc8:	e9c2 3400 	strd	r3, r4, [r2]
	}
	if(pitPID < MIN_PIT_PID)
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <PIDpit+0x128>)
 8000bce:	ed93 7b00 	vldr	d7, [r3]
 8000bd2:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000c18 <PIDpit+0x100>
 8000bd6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bde:	d505      	bpl.n	8000bec <PIDpit+0xd4>
	{
		pitPID = MIN_PIT_PID;
 8000be0:	4a17      	ldr	r2, [pc, #92]	; (8000c40 <PIDpit+0x128>)
 8000be2:	f04f 0300 	mov.w	r3, #0
 8000be6:	4c18      	ldr	r4, [pc, #96]	; (8000c48 <PIDpit+0x130>)
 8000be8:	e9c2 3400 	strd	r3, r4, [r2]
	}
	pitPreError = pitError;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <PIDpit+0x108>)
 8000bee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000bf2:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <PIDpit+0x110>)
 8000bf4:	e9c2 3400 	strd	r3, r4, [r2]
	return pitPID;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <PIDpit+0x128>)
 8000bfa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000bfe:	ec44 3b17 	vmov	d7, r3, r4
}
 8000c02:	eeb0 0b47 	vmov.f64	d0, d7
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc90      	pop	{r4, r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	00000000 	.word	0x00000000
 8000c14:	40590000 	.word	0x40590000
 8000c18:	00000000 	.word	0x00000000
 8000c1c:	c0590000 	.word	0xc0590000
 8000c20:	240002a0 	.word	0x240002a0
 8000c24:	24000458 	.word	0x24000458
 8000c28:	240000e8 	.word	0x240000e8
 8000c2c:	240001a0 	.word	0x240001a0
 8000c30:	24000370 	.word	0x24000370
 8000c34:	24000038 	.word	0x24000038
 8000c38:	240002a8 	.word	0x240002a8
 8000c3c:	240006a8 	.word	0x240006a8
 8000c40:	24000590 	.word	0x24000590
 8000c44:	40590000 	.word	0x40590000
 8000c48:	c0590000 	.word	0xc0590000
 8000c4c:	00000000 	.word	0x00000000

08000c50 <roL_pit_yaw_mixSpeed>:
	controlMotor4(yawPID);
	// spinalCordTrans();
}

void roL_pit_yaw_mixSpeed(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	ed2d 8b02 	vpush	{d8}
 8000c56:	b08c      	sub	sp, #48	; 0x30
 8000c58:	af00      	add	r7, sp, #0
	double _roL_pit_speed = sqrt(roLPID*roLPID + pitPID*pitPID);
 8000c5a:	4b5d      	ldr	r3, [pc, #372]	; (8000dd0 <roL_pit_yaw_mixSpeed+0x180>)
 8000c5c:	ed93 6b00 	vldr	d6, [r3]
 8000c60:	4b5b      	ldr	r3, [pc, #364]	; (8000dd0 <roL_pit_yaw_mixSpeed+0x180>)
 8000c62:	ed93 7b00 	vldr	d7, [r3]
 8000c66:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000c6a:	4b5a      	ldr	r3, [pc, #360]	; (8000dd4 <roL_pit_yaw_mixSpeed+0x184>)
 8000c6c:	ed93 5b00 	vldr	d5, [r3]
 8000c70:	4b58      	ldr	r3, [pc, #352]	; (8000dd4 <roL_pit_yaw_mixSpeed+0x184>)
 8000c72:	ed93 7b00 	vldr	d7, [r3]
 8000c76:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c7a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c7e:	eeb0 0b47 	vmov.f64	d0, d7
 8000c82:	f00c fab9 	bl	800d1f8 <sqrt>
 8000c86:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	double _roL_pit_dir = atan2(pitPID, roLPID);
 8000c8a:	4b52      	ldr	r3, [pc, #328]	; (8000dd4 <roL_pit_yaw_mixSpeed+0x184>)
 8000c8c:	ed93 7b00 	vldr	d7, [r3]
 8000c90:	4b4f      	ldr	r3, [pc, #316]	; (8000dd0 <roL_pit_yaw_mixSpeed+0x180>)
 8000c92:	ed93 6b00 	vldr	d6, [r3]
 8000c96:	eeb0 1b46 	vmov.f64	d1, d6
 8000c9a:	eeb0 0b47 	vmov.f64	d0, d7
 8000c9e:	f00c faa7 	bl	800d1f0 <atan2>
 8000ca2:	ed87 0b08 	vstr	d0, [r7, #32]
	double _motor1Speed = yawPID + -(_roL_pit_speed *sin(_roL_pit_dir + M_PI/4) + 0);
 8000ca6:	4b4c      	ldr	r3, [pc, #304]	; (8000dd8 <roL_pit_yaw_mixSpeed+0x188>)
 8000ca8:	ed93 8b00 	vldr	d8, [r3]
 8000cac:	ed97 7b08 	vldr	d7, [r7, #32]
 8000cb0:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8000dc0 <roL_pit_yaw_mixSpeed+0x170>
 8000cb4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000cb8:	eeb0 0b47 	vmov.f64	d0, d7
 8000cbc:	f00c fa5c 	bl	800d178 <sin>
 8000cc0:	eeb0 6b40 	vmov.f64	d6, d0
 8000cc4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000cc8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ccc:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8000dc8 <roL_pit_yaw_mixSpeed+0x178>
 8000cd0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000cd4:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000cd8:	ed87 7b06 	vstr	d7, [r7, #24]
	double _motor2Speed = yawPID + -(_roL_pit_speed *cos(_roL_pit_dir + M_PI/4) - 0);
 8000cdc:	4b3e      	ldr	r3, [pc, #248]	; (8000dd8 <roL_pit_yaw_mixSpeed+0x188>)
 8000cde:	ed93 8b00 	vldr	d8, [r3]
 8000ce2:	ed97 7b08 	vldr	d7, [r7, #32]
 8000ce6:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8000dc0 <roL_pit_yaw_mixSpeed+0x170>
 8000cea:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000cee:	eeb0 0b47 	vmov.f64	d0, d7
 8000cf2:	f00c fa05 	bl	800d100 <cos>
 8000cf6:	eeb0 6b40 	vmov.f64	d6, d0
 8000cfa:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000cfe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d02:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000d06:	ed87 7b04 	vstr	d7, [r7, #16]
	double _motor3Speed = yawPID +   _roL_pit_speed *sin(_roL_pit_dir + M_PI/4) + 0;
 8000d0a:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d0e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8000dc0 <roL_pit_yaw_mixSpeed+0x170>
 8000d12:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d16:	eeb0 0b47 	vmov.f64	d0, d7
 8000d1a:	f00c fa2d 	bl	800d178 <sin>
 8000d1e:	eeb0 6b40 	vmov.f64	d6, d0
 8000d22:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000d26:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000d2a:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <roL_pit_yaw_mixSpeed+0x188>)
 8000d2c:	ed93 7b00 	vldr	d7, [r3]
 8000d30:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d34:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8000dc8 <roL_pit_yaw_mixSpeed+0x178>
 8000d38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d3c:	ed87 7b02 	vstr	d7, [r7, #8]
	double _motor4Speed = yawPID +   _roL_pit_speed *cos(_roL_pit_dir + M_PI/4) - 0;
 8000d40:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d44:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8000dc0 <roL_pit_yaw_mixSpeed+0x170>
 8000d48:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d4c:	eeb0 0b47 	vmov.f64	d0, d7
 8000d50:	f00c f9d6 	bl	800d100 <cos>
 8000d54:	eeb0 6b40 	vmov.f64	d6, d0
 8000d58:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000d5c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <roL_pit_yaw_mixSpeed+0x188>)
 8000d62:	ed93 7b00 	vldr	d7, [r3]
 8000d66:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d6a:	ed87 7b00 	vstr	d7, [r7]
	controlMotor1(_motor1Speed);
 8000d6e:	ed97 7b06 	vldr	d7, [r7, #24]
 8000d72:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d76:	ee17 0a90 	vmov	r0, s15
 8000d7a:	f7ff fceb 	bl	8000754 <controlMotor1>
	controlMotor2(_motor2Speed);
 8000d7e:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d82:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d86:	ee17 0a90 	vmov	r0, s15
 8000d8a:	f7ff fd07 	bl	800079c <controlMotor2>
	controlMotor3(_motor3Speed);
 8000d8e:	ed97 7b02 	vldr	d7, [r7, #8]
 8000d92:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d96:	ee17 0a90 	vmov	r0, s15
 8000d9a:	f7ff fd23 	bl	80007e4 <controlMotor3>
	controlMotor4(_motor4Speed);
 8000d9e:	ed97 7b00 	vldr	d7, [r7]
 8000da2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000da6:	ee17 0a90 	vmov	r0, s15
 8000daa:	f7ff fd3f 	bl	800082c <controlMotor4>
//	spinalCordTrans();
}
 8000dae:	bf00      	nop
 8000db0:	3730      	adds	r7, #48	; 0x30
 8000db2:	46bd      	mov	sp, r7
 8000db4:	ecbd 8b02 	vpop	{d8}
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	f3af 8000 	nop.w
 8000dc0:	54442d18 	.word	0x54442d18
 8000dc4:	3fe921fb 	.word	0x3fe921fb
	...
 8000dd0:	24000368 	.word	0x24000368
 8000dd4:	24000590 	.word	0x24000590
 8000dd8:	240005d8 	.word	0x240005d8

08000ddc <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <positionControl_Init+0x1c>)
 8000de2:	f008 fac1 	bl	8009368 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&leftArm);
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <positionControl_Init+0x20>)
 8000de8:	f008 fabe 	bl	8009368 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&rigtArm);
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <positionControl_Init+0x24>)
 8000dee:	f008 fabb 	bl	8009368 <HAL_TIM_Base_Start_IT>
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	240006f8 	.word	0x240006f8
 8000dfc:	24000258 	.word	0x24000258
 8000e00:	240006b0 	.word	0x240006b0

08000e04 <HAL_UART_TxCpltCallback>:
//include cuối "USER CODE BEGIN 0"
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_UART_TxCpltCallback+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d103      	bne.n	8000e20 <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt = 1;
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_UART_TxCpltCallback+0x68>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == manualRobot.Instance)
	{
		manualRobotTxCplt = 1;
	}
}
 8000e1e:	e01c      	b.n	8000e5a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_UART_TxCpltCallback+0x6c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d103      	bne.n	8000e34 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt = 1;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_UART_TxCpltCallback+0x70>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
}
 8000e32:	e012      	b.n	8000e5a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <HAL_UART_TxCpltCallback+0x74>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d103      	bne.n	8000e48 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt = 1;
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_UART_TxCpltCallback+0x78>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
}
 8000e46:	e008      	b.n	8000e5a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == manualRobot.Instance)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_UART_TxCpltCallback+0x7c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d102      	bne.n	8000e5a <HAL_UART_TxCpltCallback+0x56>
		manualRobotTxCplt = 1;
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_UART_TxCpltCallback+0x80>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	24000470 	.word	0x24000470
 8000e6c:	24000690 	.word	0x24000690
 8000e70:	240001c4 	.word	0x240001c4
 8000e74:	240002c8 	.word	0x240002c8
 8000e78:	240005e0 	.word	0x240005e0
 8000e7c:	24000508 	.word	0x24000508
 8000e80:	24000110 	.word	0x24000110
 8000e84:	240005ac 	.word	0x240005ac

08000e88 <HAL_UART_RxCpltCallback>:
int trackingReceiSpinalCord;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <HAL_UART_RxCpltCallback+0x84>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d103      	bne.n	8000ea4 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt = 1;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_UART_RxCpltCallback+0x88>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == manualRobot.Instance)
	{
		manualRobotRxCplt = 1;
	}
}
 8000ea2:	e02f      	b.n	8000f04 <HAL_UART_RxCpltCallback+0x7c>
	else if(huart->Instance == PS2.Instance)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <HAL_UART_RxCpltCallback+0x8c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d103      	bne.n	8000eb8 <HAL_UART_RxCpltCallback+0x30>
		PS2RxCplt = 1;
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <HAL_UART_RxCpltCallback+0x90>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]
}
 8000eb6:	e025      	b.n	8000f04 <HAL_UART_RxCpltCallback+0x7c>
	else if(huart->Instance == spinalCord.Instance)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_UART_RxCpltCallback+0x94>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d116      	bne.n	8000ef2 <HAL_UART_RxCpltCallback+0x6a>
		if(spinalCordRxPacket[0]!=0)
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_UART_RxCpltCallback+0x98>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d009      	beq.n	8000ee0 <HAL_UART_RxCpltCallback+0x58>
			trackingReceiSpinalCord++;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_UART_RxCpltCallback+0x9c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <HAL_UART_RxCpltCallback+0x9c>)
 8000ed4:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_IT(&spinalCord, spinalCordTxPacket, 9);
 8000ed6:	2209      	movs	r2, #9
 8000ed8:	4913      	ldr	r1, [pc, #76]	; (8000f28 <HAL_UART_RxCpltCallback+0xa0>)
 8000eda:	4810      	ldr	r0, [pc, #64]	; (8000f1c <HAL_UART_RxCpltCallback+0x94>)
 8000edc:	f008 feb4 	bl	8009c48 <HAL_UART_Transmit_IT>
		spinalCordRxCplt = 1;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_UART_RxCpltCallback+0xa4>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	490d      	ldr	r1, [pc, #52]	; (8000f20 <HAL_UART_RxCpltCallback+0x98>)
 8000eea:	480c      	ldr	r0, [pc, #48]	; (8000f1c <HAL_UART_RxCpltCallback+0x94>)
 8000eec:	f008 ff30 	bl	8009d50 <HAL_UART_Receive_IT>
}
 8000ef0:	e008      	b.n	8000f04 <HAL_UART_RxCpltCallback+0x7c>
	else if(huart->Instance == manualRobot.Instance)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_UART_RxCpltCallback+0xa8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d102      	bne.n	8000f04 <HAL_UART_RxCpltCallback+0x7c>
		manualRobotRxCplt = 1;
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <HAL_UART_RxCpltCallback+0xac>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	24000470 	.word	0x24000470
 8000f10:	24000378 	.word	0x24000378
 8000f14:	240001c4 	.word	0x240001c4
 8000f18:	24000509 	.word	0x24000509
 8000f1c:	240005e0 	.word	0x240005e0
 8000f20:	24000694 	.word	0x24000694
 8000f24:	240006f4 	.word	0x240006f4
 8000f28:	2400000c 	.word	0x2400000c
 8000f2c:	240006f0 	.word	0x240006f0
 8000f30:	24000110 	.word	0x24000110
 8000f34:	240003e8 	.word	0x240003e8

08000f38 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4ba3      	ldr	r3, [pc, #652]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	f040 8170 	bne.w	800122e <HAL_TIM_PeriodElapsedCallback+0x2f6>
	{
		if(legEn == 1)
 8000f4e:	4ba2      	ldr	r3, [pc, #648]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d16b      	bne.n	800102e <HAL_TIM_PeriodElapsedCallback+0xf6>
		{
			if(legStatus == legInitShoot)
 8000f56:	4ba1      	ldr	r3, [pc, #644]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d11f      	bne.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f64:	489e      	ldr	r0, [pc, #632]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000f66:	f005 fb55 	bl	8006614 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);
 8000f6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f6e:	489c      	ldr	r0, [pc, #624]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000f70:	f005 fb69 	bl	8006646 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000f74:	4b9b      	ldr	r3, [pc, #620]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	4a9a      	ldr	r2, [pc, #616]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000f7c:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;
 8000f7e:	4b9a      	ldr	r3, [pc, #616]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	4a98      	ldr	r2, [pc, #608]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000f86:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legInitShootPulse)
 8000f88:	4b97      	ldr	r3, [pc, #604]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000f90:	db05      	blt.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x66>
				{
					legEn = 0;
 8000f92:	4b91      	ldr	r3, [pc, #580]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;
 8000f98:	4b93      	ldr	r3, [pc, #588]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legReInitShoot)
 8000f9e:	4b8f      	ldr	r3, [pc, #572]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d11f      	bne.n	8000fe6 <HAL_TIM_PeriodElapsedCallback+0xae>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fac:	488c      	ldr	r0, [pc, #560]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000fae:	f005 fb31 	bl	8006614 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);
 8000fb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fb6:	488a      	ldr	r0, [pc, #552]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000fb8:	f005 fb45 	bl	8006646 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000fbc:	4b89      	ldr	r3, [pc, #548]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	4a88      	ldr	r2, [pc, #544]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000fc4:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;
 8000fc6:	4b88      	ldr	r3, [pc, #544]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	4a86      	ldr	r2, [pc, #536]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000fce:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legReInitShootPulse)
 8000fd0:	4b85      	ldr	r3, [pc, #532]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000fd8:	db05      	blt.n	8000fe6 <HAL_TIM_PeriodElapsedCallback+0xae>
				{
					legEn = 0;
 8000fda:	4b7f      	ldr	r3, [pc, #508]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;
 8000fe0:	4b81      	ldr	r3, [pc, #516]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 8000fe6:	4b7d      	ldr	r3, [pc, #500]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d11f      	bne.n	800102e <HAL_TIM_PeriodElapsedCallback+0xf6>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff4:	487a      	ldr	r0, [pc, #488]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000ff6:	f005 fb0d 	bl	8006614 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);
 8000ffa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffe:	4878      	ldr	r0, [pc, #480]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001000:	f005 fb21 	bl	8006646 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8001004:	4b77      	ldr	r3, [pc, #476]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	4a76      	ldr	r2, [pc, #472]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800100c:	6013      	str	r3, [r2, #0]
	//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
				legElapsedPulses++;
 800100e:	4b76      	ldr	r3, [pc, #472]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	3301      	adds	r3, #1
 8001014:	4a74      	ldr	r2, [pc, #464]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001016:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= legEndPulse)
 8001018:	4b73      	ldr	r3, [pc, #460]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8001020:	db05      	blt.n	800102e <HAL_TIM_PeriodElapsedCallback+0xf6>
				{
					legEn = 0;
 8001022:	4b6d      	ldr	r3, [pc, #436]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;
 8001028:	4b6f      	ldr	r3, [pc, #444]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if(rigtArmEn == 1)
 800102e:	4b6f      	ldr	r3, [pc, #444]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d16b      	bne.n	800110e <HAL_TIM_PeriodElapsedCallback+0x1d6>
		{
			if(rigtArmStatus == rigtArmInit)
 8001036:	4b6e      	ldr	r3, [pc, #440]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d11f      	bne.n	800107e <HAL_TIM_PeriodElapsedCallback+0x146>
			{
				HAL_GPIO_WritePin(rigtArmDir_GPIO_Port, rigtArmDir_Pin, rigtArm_CCW);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001044:	486b      	ldr	r0, [pc, #428]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001046:	f005 fae5 	bl	8006614 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(rigtArmPul_GPIO_Port, rigtArmPul_Pin);
 800104a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800104e:	4869      	ldr	r0, [pc, #420]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001050:	f005 faf9 	bl	8006646 <HAL_GPIO_TogglePin>
				trackingRigtArm++;
 8001054:	4b68      	ldr	r3, [pc, #416]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4a67      	ldr	r2, [pc, #412]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800105c:	6013      	str	r3, [r2, #0]
				rigtArmElapsedPulses++;
 800105e:	4b67      	ldr	r3, [pc, #412]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	4a65      	ldr	r2, [pc, #404]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001066:	6013      	str	r3, [r2, #0]
				if (rigtArmElapsedPulses >= rigtArmInitPulse)
 8001068:	4b64      	ldr	r3, [pc, #400]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001070:	db05      	blt.n	800107e <HAL_TIM_PeriodElapsedCallback+0x146>
				{
					rigtArmEn = 0;
 8001072:	4b5e      	ldr	r3, [pc, #376]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
					rigtArmElapsedPulses = 0;
 8001078:	4b60      	ldr	r3, [pc, #384]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
				}
			}
			if(rigtArmStatus == rigtArmSetBall)
 800107e:	4b5c      	ldr	r3, [pc, #368]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d11f      	bne.n	80010c6 <HAL_TIM_PeriodElapsedCallback+0x18e>
			{
				HAL_GPIO_WritePin(rigtArmDir_GPIO_Port, rigtArmDir_Pin, rigtArm_CCW);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108c:	4859      	ldr	r0, [pc, #356]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800108e:	f005 fac1 	bl	8006614 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(rigtArmPul_GPIO_Port, rigtArmPul_Pin);
 8001092:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001096:	4857      	ldr	r0, [pc, #348]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001098:	f005 fad5 	bl	8006646 <HAL_GPIO_TogglePin>
				trackingRigtArm++;
 800109c:	4b56      	ldr	r3, [pc, #344]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	4a55      	ldr	r2, [pc, #340]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80010a4:	6013      	str	r3, [r2, #0]
				rigtArmElapsedPulses++;
 80010a6:	4b55      	ldr	r3, [pc, #340]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	4a53      	ldr	r2, [pc, #332]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80010ae:	6013      	str	r3, [r2, #0]
				if (rigtArmElapsedPulses >= rigtArmSetBallPulse)
 80010b0:	4b52      	ldr	r3, [pc, #328]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80010b8:	db05      	blt.n	80010c6 <HAL_TIM_PeriodElapsedCallback+0x18e>
				{
					rigtArmEn = 0;
 80010ba:	4b4c      	ldr	r3, [pc, #304]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
					rigtArmElapsedPulses = 0;
 80010c0:	4b4e      	ldr	r3, [pc, #312]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
				}
			}
			if(rigtArmStatus == rigtArmReturn)
 80010c6:	4b4a      	ldr	r3, [pc, #296]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d11f      	bne.n	800110e <HAL_TIM_PeriodElapsedCallback+0x1d6>
			{
				HAL_GPIO_WritePin(rigtArmDir_GPIO_Port, rigtArmDir_Pin, rigtArm_FCW);
 80010ce:	2201      	movs	r2, #1
 80010d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010d4:	4847      	ldr	r0, [pc, #284]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80010d6:	f005 fa9d 	bl	8006614 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(rigtArmPul_GPIO_Port, rigtArmPul_Pin);
 80010da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010de:	4845      	ldr	r0, [pc, #276]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80010e0:	f005 fab1 	bl	8006646 <HAL_GPIO_TogglePin>
				trackingRigtArm++;
 80010e4:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	4a43      	ldr	r2, [pc, #268]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80010ec:	6013      	str	r3, [r2, #0]
				rigtArmElapsedPulses++;
 80010ee:	4b43      	ldr	r3, [pc, #268]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	3301      	adds	r3, #1
 80010f4:	4a41      	ldr	r2, [pc, #260]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80010f6:	6013      	str	r3, [r2, #0]
				if (rigtArmElapsedPulses >= rigtArmSetBallPulse)
 80010f8:	4b40      	ldr	r3, [pc, #256]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001100:	db05      	blt.n	800110e <HAL_TIM_PeriodElapsedCallback+0x1d6>
				{
					rigtArmEn = 0;
 8001102:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
					rigtArmElapsedPulses = 0;
 8001108:	4b3c      	ldr	r3, [pc, #240]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if(leftArmEn == 1)
 800110e:	4b3c      	ldr	r3, [pc, #240]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b01      	cmp	r3, #1
 8001114:	f040 808b 	bne.w	800122e <HAL_TIM_PeriodElapsedCallback+0x2f6>
		{
			if(leftArmStatus == leftArmInit)
 8001118:	4b3a      	ldr	r3, [pc, #232]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d11e      	bne.n	800115e <HAL_TIM_PeriodElapsedCallback+0x226>
			{
				HAL_GPIO_WritePin(leftArmDir_GPIO_Port, leftArmDir_Pin, leftArm_CCW);
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001126:	4833      	ldr	r0, [pc, #204]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001128:	f005 fa74 	bl	8006614 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(leftArmPul_GPIO_Port, leftArmPul_Pin);
 800112c:	2102      	movs	r1, #2
 800112e:	4836      	ldr	r0, [pc, #216]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001130:	f005 fa89 	bl	8006646 <HAL_GPIO_TogglePin>
				trackingLeftArm++;
 8001134:	4b35      	ldr	r3, [pc, #212]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4a34      	ldr	r2, [pc, #208]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800113c:	6013      	str	r3, [r2, #0]
				leftArmElapsedPulses++;
 800113e:	4b34      	ldr	r3, [pc, #208]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	4a32      	ldr	r2, [pc, #200]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001146:	6013      	str	r3, [r2, #0]
				if (leftArmElapsedPulses >= leftArmInitPulse)
 8001148:	4b31      	ldr	r3, [pc, #196]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001150:	db05      	blt.n	800115e <HAL_TIM_PeriodElapsedCallback+0x226>
				{
					leftArmEn = 0;
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
					leftArmElapsedPulses = 0;
 8001158:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
				}
			}
			if(leftArmStatus == leftArmSetBall)
 800115e:	4b29      	ldr	r3, [pc, #164]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d11e      	bne.n	80011a4 <HAL_TIM_PeriodElapsedCallback+0x26c>
			{
				HAL_GPIO_WritePin(leftArmDir_GPIO_Port, leftArmDir_Pin, leftArm_CCW);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 7100 	mov.w	r1, #512	; 0x200
 800116c:	4821      	ldr	r0, [pc, #132]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800116e:	f005 fa51 	bl	8006614 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(leftArmPul_GPIO_Port, leftArmPul_Pin);
 8001172:	2102      	movs	r1, #2
 8001174:	4824      	ldr	r0, [pc, #144]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001176:	f005 fa66 	bl	8006646 <HAL_GPIO_TogglePin>
				trackingLeftArm++;
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	4a22      	ldr	r2, [pc, #136]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001182:	6013      	str	r3, [r2, #0]
				leftArmElapsedPulses++;
 8001184:	4b22      	ldr	r3, [pc, #136]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	4a21      	ldr	r2, [pc, #132]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800118c:	6013      	str	r3, [r2, #0]
				if (leftArmElapsedPulses >= leftArmSetBallPulse)
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001196:	db05      	blt.n	80011a4 <HAL_TIM_PeriodElapsedCallback+0x26c>
				{
					leftArmEn = 0;
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
					leftArmElapsedPulses = 0;
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
				}
			}
			if(leftArmStatus == leftArmReturn)
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d140      	bne.n	800122e <HAL_TIM_PeriodElapsedCallback+0x2f6>
			{
				HAL_GPIO_WritePin(leftArmDir_GPIO_Port, leftArmDir_Pin, leftArm_FCW);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b2:	4810      	ldr	r0, [pc, #64]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80011b4:	f005 fa2e 	bl	8006614 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(leftArmPul_GPIO_Port, leftArmPul_Pin);
 80011b8:	2102      	movs	r1, #2
 80011ba:	4813      	ldr	r0, [pc, #76]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80011bc:	f005 fa43 	bl	8006646 <HAL_GPIO_TogglePin>
				trackingLeftArm++;
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	4a11      	ldr	r2, [pc, #68]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80011c8:	6013      	str	r3, [r2, #0]
				leftArmElapsedPulses++;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	e020      	b.n	8001214 <HAL_TIM_PeriodElapsedCallback+0x2dc>
 80011d2:	bf00      	nop
 80011d4:	240006f8 	.word	0x240006f8
 80011d8:	24000504 	.word	0x24000504
 80011dc:	24000674 	.word	0x24000674
 80011e0:	58020c00 	.word	0x58020c00
 80011e4:	240004fc 	.word	0x240004fc
 80011e8:	240005b8 	.word	0x240005b8
 80011ec:	240005a8 	.word	0x240005a8
 80011f0:	2400010c 	.word	0x2400010c
 80011f4:	58021800 	.word	0x58021800
 80011f8:	24000678 	.word	0x24000678
 80011fc:	240005cc 	.word	0x240005cc
 8001200:	2400073c 	.word	0x2400073c
 8001204:	24000584 	.word	0x24000584
 8001208:	58021000 	.word	0x58021000
 800120c:	240006a0 	.word	0x240006a0
 8001210:	2400037c 	.word	0x2400037c
 8001214:	4a08      	ldr	r2, [pc, #32]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001216:	6013      	str	r3, [r2, #0]
				if (leftArmElapsedPulses >= leftArmSetBallPulse)
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001220:	db05      	blt.n	800122e <HAL_TIM_PeriodElapsedCallback+0x2f6>
				{
					leftArmEn = 0;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
					leftArmElapsedPulses = 0;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == leftArm.Instance)
	{

	}
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	2400037c 	.word	0x2400037c
 800123c:	2400073c 	.word	0x2400073c

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001244:	f001 f8b2 	bl	80023ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001248:	f000 f846 	bl	80012d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124c:	f000 fc02 	bl	8001a54 <MX_GPIO_Init>
  MX_DMA_Init();
 8001250:	f000 fbd8 	bl	8001a04 <MX_DMA_Init>
  MX_ADC1_Init();
 8001254:	f000 f8f6 	bl	8001444 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001258:	f000 f97c 	bl	8001554 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 800125c:	f000 faee 	bl	800183c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001260:	f000 fb38 	bl	80018d4 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8001264:	f000 f9da 	bl	800161c <MX_TIM7_Init>
  MX_TIM12_Init();
 8001268:	f000 fa10 	bl	800168c <MX_TIM12_Init>
  MX_TIM15_Init();
 800126c:	f000 fa48 	bl	8001700 <MX_TIM15_Init>
  MX_UART7_Init();
 8001270:	f000 fa98 	bl	80017a4 <MX_UART7_Init>
  MX_USART6_UART_Init();
 8001274:	f000 fb7a 	bl	800196c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  peripheralUART_Init();
 8001278:	f7ff f9ce 	bl	8000618 <peripheralUART_Init>
  compassReset();
 800127c:	f7ff f9da 	bl	8000634 <compassReset>
  delayUs_Init();
 8001280:	f7ff f9aa 	bl	80005d8 <delayUs_Init>
  positionControl_Init();
 8001284:	f7ff fdaa 	bl	8000ddc <positionControl_Init>

//  legEn = 1;
//  legStatus = legInitShoot;
//  leftArmEn = 1;
//  leftArmStatus = leftArmInit;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2101      	movs	r1, #1
 800128c:	480f      	ldr	r0, [pc, #60]	; (80012cc <main+0x8c>)
 800128e:	f005 f9c1 	bl	8006614 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001292:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001296:	f001 f91b 	bl	80024d0 <HAL_Delay>
//	  tracking++;
//////////////////////////////////////////////////////////////////////


/////////////////PID left////////////////////////////////
	  readADC();
 800129a:	f7ff f9f5 	bl	8000688 <readADC>
	  PIDpit(0, 0);
 800129e:	2100      	movs	r1, #0
 80012a0:	2000      	movs	r0, #0
 80012a2:	f7ff fc39 	bl	8000b18 <PIDpit>
	  PIDroL(leftRawDistance, 200);
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <main+0x90>)
 80012a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ac:	21c8      	movs	r1, #200	; 0xc8
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fb8a 	bl	80009c8 <PIDroL>
//	  PIDroL(_roLValue, _roLSetpoint)
	  PIDyaw(0, 0);
 80012b4:	2100      	movs	r1, #0
 80012b6:	2000      	movs	r0, #0
 80012b8:	f7ff fade 	bl	8000878 <PIDyaw>
	  roL_pit_yaw_mixSpeed();
 80012bc:	f7ff fcc8 	bl	8000c50 <roL_pit_yaw_mixSpeed>

	  tracking++;
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <main+0x94>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a03      	ldr	r2, [pc, #12]	; (80012d4 <main+0x94>)
 80012c8:	6013      	str	r3, [r2, #0]
	  readADC();
 80012ca:	e7e6      	b.n	800129a <main+0x5a>
 80012cc:	58020400 	.word	0x58020400
 80012d0:	24000108 	.word	0x24000108
 80012d4:	24000588 	.word	0x24000588

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b0cc      	sub	sp, #304	; 0x130
 80012dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012e2:	224c      	movs	r2, #76	; 0x4c
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f00b ff02 	bl	800d0f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012f0:	2220      	movs	r2, #32
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f00b fefb 	bl	800d0f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	4618      	mov	r0, r3
 8001300:	23bc      	movs	r3, #188	; 0xbc
 8001302:	461a      	mov	r2, r3
 8001304:	2100      	movs	r1, #0
 8001306:	f00b fef3 	bl	800d0f0 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800130a:	2002      	movs	r0, #2
 800130c:	f005 f9b6 	bl	800667c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	4b49      	ldr	r3, [pc, #292]	; (800143c <SystemClock_Config+0x164>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	4a48      	ldr	r2, [pc, #288]	; (800143c <SystemClock_Config+0x164>)
 800131c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001320:	6193      	str	r3, [r2, #24]
 8001322:	4b46      	ldr	r3, [pc, #280]	; (800143c <SystemClock_Config+0x164>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	4b44      	ldr	r3, [pc, #272]	; (8001440 <SystemClock_Config+0x168>)
 8001330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001332:	4a43      	ldr	r2, [pc, #268]	; (8001440 <SystemClock_Config+0x168>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	62d3      	str	r3, [r2, #44]	; 0x2c
 800133a:	4b41      	ldr	r3, [pc, #260]	; (8001440 <SystemClock_Config+0x168>)
 800133c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133e:	f003 0201 	and.w	r2, r3, #1
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800134a:	bf00      	nop
 800134c:	4b3b      	ldr	r3, [pc, #236]	; (800143c <SystemClock_Config+0x164>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001358:	d1f8      	bne.n	800134c <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800135a:	2302      	movs	r3, #2
 800135c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001360:	2301      	movs	r3, #1
 8001362:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001366:	2340      	movs	r3, #64	; 0x40
 8001368:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136c:	2302      	movs	r3, #2
 800136e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001378:	2304      	movs	r3, #4
 800137a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 800137e:	233c      	movs	r3, #60	; 0x3c
 8001380:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001384:	2302      	movs	r3, #2
 8001386:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800138a:	2302      	movs	r3, #2
 800138c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001390:	2302      	movs	r3, #2
 8001392:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001396:	230c      	movs	r3, #12
 8001398:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013ac:	4618      	mov	r0, r3
 80013ae:	f005 f99f 	bl	80066f0 <HAL_RCC_OscConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80013b8:	f000 fc54 	bl	8001c64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013bc:	233f      	movs	r3, #63	; 0x3f
 80013be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c2:	2303      	movs	r3, #3
 80013c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013ce:	2308      	movs	r3, #8
 80013d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013d4:	2340      	movs	r3, #64	; 0x40
 80013d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013da:	2340      	movs	r3, #64	; 0x40
 80013dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013e8:	2340      	movs	r3, #64	; 0x40
 80013ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013f2:	2104      	movs	r1, #4
 80013f4:	4618      	mov	r0, r3
 80013f6:	f005 fd53 	bl	8006ea0 <HAL_RCC_ClockConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001400:	f000 fc30 	bl	8001c64 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	2203      	movs	r2, #3
 800140a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	2200      	movs	r2, #0
 8001412:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	2200      	movs	r2, #0
 800141a:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	4618      	mov	r0, r3
 8001422:	f006 f8c1 	bl	80075a8 <HAL_RCCEx_PeriphCLKConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0x158>
  {
    Error_Handler();
 800142c:	f000 fc1a 	bl	8001c64 <Error_Handler>
  }
}
 8001430:	bf00      	nop
 8001432:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	58024800 	.word	0x58024800
 8001440:	58000400 	.word	0x58000400

08001444 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001456:	463b      	mov	r3, r7
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
 8001464:	615a      	str	r2, [r3, #20]
 8001466:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001468:	4b36      	ldr	r3, [pc, #216]	; (8001544 <MX_ADC1_Init+0x100>)
 800146a:	4a37      	ldr	r2, [pc, #220]	; (8001548 <MX_ADC1_Init+0x104>)
 800146c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800146e:	4b35      	ldr	r3, [pc, #212]	; (8001544 <MX_ADC1_Init+0x100>)
 8001470:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001474:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001476:	4b33      	ldr	r3, [pc, #204]	; (8001544 <MX_ADC1_Init+0x100>)
 8001478:	2208      	movs	r2, #8
 800147a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800147c:	4b31      	ldr	r3, [pc, #196]	; (8001544 <MX_ADC1_Init+0x100>)
 800147e:	2201      	movs	r2, #1
 8001480:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <MX_ADC1_Init+0x100>)
 8001484:	2204      	movs	r2, #4
 8001486:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001488:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <MX_ADC1_Init+0x100>)
 800148a:	2200      	movs	r2, #0
 800148c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <MX_ADC1_Init+0x100>)
 8001490:	2200      	movs	r2, #0
 8001492:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <MX_ADC1_Init+0x100>)
 8001496:	2202      	movs	r2, #2
 8001498:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800149a:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <MX_ADC1_Init+0x100>)
 800149c:	2200      	movs	r2, #0
 800149e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a0:	4b28      	ldr	r3, [pc, #160]	; (8001544 <MX_ADC1_Init+0x100>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014a6:	4b27      	ldr	r3, [pc, #156]	; (8001544 <MX_ADC1_Init+0x100>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80014ac:	4b25      	ldr	r3, [pc, #148]	; (8001544 <MX_ADC1_Init+0x100>)
 80014ae:	2203      	movs	r2, #3
 80014b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014b2:	4b24      	ldr	r3, [pc, #144]	; (8001544 <MX_ADC1_Init+0x100>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014b8:	4b22      	ldr	r3, [pc, #136]	; (8001544 <MX_ADC1_Init+0x100>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <MX_ADC1_Init+0x100>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c6:	481f      	ldr	r0, [pc, #124]	; (8001544 <MX_ADC1_Init+0x100>)
 80014c8:	f001 fa22 	bl	8002910 <HAL_ADC_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80014d2:	f000 fbc7 	bl	8001c64 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	4818      	ldr	r0, [pc, #96]	; (8001544 <MX_ADC1_Init+0x100>)
 80014e2:	f002 f9e1 	bl	80038a8 <HAL_ADCEx_MultiModeConfigChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80014ec:	f000 fbba 	bl	8001c64 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014f0:	4b16      	ldr	r3, [pc, #88]	; (800154c <MX_ADC1_Init+0x108>)
 80014f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014f4:	2306      	movs	r3, #6
 80014f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014fc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001500:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001502:	2304      	movs	r3, #4
 8001504:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800150a:	463b      	mov	r3, r7
 800150c:	4619      	mov	r1, r3
 800150e:	480d      	ldr	r0, [pc, #52]	; (8001544 <MX_ADC1_Init+0x100>)
 8001510:	f001 fc80 	bl	8002e14 <HAL_ADC_ConfigChannel>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800151a:	f000 fba3 	bl	8001c64 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_ADC1_Init+0x10c>)
 8001520:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001522:	230c      	movs	r3, #12
 8001524:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001526:	463b      	mov	r3, r7
 8001528:	4619      	mov	r1, r3
 800152a:	4806      	ldr	r0, [pc, #24]	; (8001544 <MX_ADC1_Init+0x100>)
 800152c:	f001 fc72 	bl	8002e14 <HAL_ADC_ConfigChannel>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8001536:	f000 fb95 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	; 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	24000384 	.word	0x24000384
 8001548:	40022000 	.word	0x40022000
 800154c:	2a000400 	.word	0x2a000400
 8001550:	3ef08000 	.word	0x3ef08000

08001554 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
 8001568:	615a      	str	r2, [r3, #20]
 800156a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <MX_ADC3_Init+0xbc>)
 800156e:	4a29      	ldr	r2, [pc, #164]	; (8001614 <MX_ADC3_Init+0xc0>)
 8001570:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001572:	4b27      	ldr	r3, [pc, #156]	; (8001610 <MX_ADC3_Init+0xbc>)
 8001574:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001578:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800157a:	4b25      	ldr	r3, [pc, #148]	; (8001610 <MX_ADC3_Init+0xbc>)
 800157c:	2208      	movs	r2, #8
 800157e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001580:	4b23      	ldr	r3, [pc, #140]	; (8001610 <MX_ADC3_Init+0xbc>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001586:	4b22      	ldr	r3, [pc, #136]	; (8001610 <MX_ADC3_Init+0xbc>)
 8001588:	2204      	movs	r2, #4
 800158a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800158c:	4b20      	ldr	r3, [pc, #128]	; (8001610 <MX_ADC3_Init+0xbc>)
 800158e:	2200      	movs	r2, #0
 8001590:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <MX_ADC3_Init+0xbc>)
 8001594:	2200      	movs	r2, #0
 8001596:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <MX_ADC3_Init+0xbc>)
 800159a:	2201      	movs	r2, #1
 800159c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800159e:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <MX_ADC3_Init+0xbc>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <MX_ADC3_Init+0xbc>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <MX_ADC3_Init+0xbc>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <MX_ADC3_Init+0xbc>)
 80015b2:	2203      	movs	r2, #3
 80015b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <MX_ADC3_Init+0xbc>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <MX_ADC3_Init+0xbc>)
 80015be:	2200      	movs	r2, #0
 80015c0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <MX_ADC3_Init+0xbc>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80015ca:	4811      	ldr	r0, [pc, #68]	; (8001610 <MX_ADC3_Init+0xbc>)
 80015cc:	f001 f9a0 	bl	8002910 <HAL_ADC_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80015d6:	f000 fb45 	bl	8001c64 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_ADC3_Init+0xc4>)
 80015dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015de:	2306      	movs	r3, #6
 80015e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015e6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80015ea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015ec:	2304      	movs	r3, #4
 80015ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_ADC3_Init+0xbc>)
 80015fa:	f001 fc0b 	bl	8002e14 <HAL_ADC_ConfigChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001604:	f000 fb2e 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	3720      	adds	r7, #32
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	240003f0 	.word	0x240003f0
 8001614:	58026000 	.word	0x58026000
 8001618:	04300002 	.word	0x04300002

0800161c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_TIM7_Init+0x68>)
 800162e:	4a16      	ldr	r2, [pc, #88]	; (8001688 <MX_TIM7_Init+0x6c>)
 8001630:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_TIM7_Init+0x68>)
 8001634:	f640 125f 	movw	r2, #2399	; 0x95f
 8001638:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <MX_TIM7_Init+0x68>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <MX_TIM7_Init+0x68>)
 8001642:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001646:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_TIM7_Init+0x68>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800164e:	480d      	ldr	r0, [pc, #52]	; (8001684 <MX_TIM7_Init+0x68>)
 8001650:	f007 fe5e 	bl	8009310 <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800165a:	f000 fb03 	bl	8001c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <MX_TIM7_Init+0x68>)
 800166c:	f008 f9f6 	bl	8009a5c <HAL_TIMEx_MasterConfigSynchronization>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001676:	f000 faf5 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	240006f8 	.word	0x240006f8
 8001688:	40001400 	.word	0x40001400

0800168c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001692:	463b      	mov	r3, r7
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <MX_TIM12_Init+0x6c>)
 80016a0:	4a16      	ldr	r2, [pc, #88]	; (80016fc <MX_TIM12_Init+0x70>)
 80016a2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2399;
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_TIM12_Init+0x6c>)
 80016a6:	f640 125f 	movw	r2, #2399	; 0x95f
 80016aa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_TIM12_Init+0x6c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_TIM12_Init+0x6c>)
 80016b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016b8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_TIM12_Init+0x6c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c0:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <MX_TIM12_Init+0x6c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80016c6:	480c      	ldr	r0, [pc, #48]	; (80016f8 <MX_TIM12_Init+0x6c>)
 80016c8:	f007 fe22 	bl	8009310 <HAL_TIM_Base_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 80016d2:	f000 fac7 	bl	8001c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016da:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_TIM12_Init+0x6c>)
 80016e2:	f007 ff8b 	bl	80095fc <HAL_TIM_ConfigClockSource>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 80016ec:	f000 faba 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	240006b0 	.word	0x240006b0
 80016fc:	40001800 	.word	0x40001800

08001700 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800171e:	4b1f      	ldr	r3, [pc, #124]	; (800179c <MX_TIM15_Init+0x9c>)
 8001720:	4a1f      	ldr	r2, [pc, #124]	; (80017a0 <MX_TIM15_Init+0xa0>)
 8001722:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2399;
 8001724:	4b1d      	ldr	r3, [pc, #116]	; (800179c <MX_TIM15_Init+0x9c>)
 8001726:	f640 125f 	movw	r2, #2399	; 0x95f
 800172a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <MX_TIM15_Init+0x9c>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <MX_TIM15_Init+0x9c>)
 8001734:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001738:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <MX_TIM15_Init+0x9c>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <MX_TIM15_Init+0x9c>)
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <MX_TIM15_Init+0x9c>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800174c:	4813      	ldr	r0, [pc, #76]	; (800179c <MX_TIM15_Init+0x9c>)
 800174e:	f007 fddf 	bl	8009310 <HAL_TIM_Base_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001758:	f000 fa84 	bl	8001c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800175c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001760:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001762:	f107 0310 	add.w	r3, r7, #16
 8001766:	4619      	mov	r1, r3
 8001768:	480c      	ldr	r0, [pc, #48]	; (800179c <MX_TIM15_Init+0x9c>)
 800176a:	f007 ff47 	bl	80095fc <HAL_TIM_ConfigClockSource>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001774:	f000 fa76 	bl	8001c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_TIM15_Init+0x9c>)
 8001786:	f008 f969 	bl	8009a5c <HAL_TIMEx_MasterConfigSynchronization>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001790:	f000 fa68 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	24000258 	.word	0x24000258
 80017a0:	40014000 	.word	0x40014000

080017a4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80017a8:	4b22      	ldr	r3, [pc, #136]	; (8001834 <MX_UART7_Init+0x90>)
 80017aa:	4a23      	ldr	r2, [pc, #140]	; (8001838 <MX_UART7_Init+0x94>)
 80017ac:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <MX_UART7_Init+0x90>)
 80017b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80017b6:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <MX_UART7_Init+0x90>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <MX_UART7_Init+0x90>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <MX_UART7_Init+0x90>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80017c8:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <MX_UART7_Init+0x90>)
 80017ca:	220c      	movs	r2, #12
 80017cc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <MX_UART7_Init+0x90>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d4:	4b17      	ldr	r3, [pc, #92]	; (8001834 <MX_UART7_Init+0x90>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <MX_UART7_Init+0x90>)
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <MX_UART7_Init+0x90>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <MX_UART7_Init+0x90>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80017ec:	4811      	ldr	r0, [pc, #68]	; (8001834 <MX_UART7_Init+0x90>)
 80017ee:	f008 f9db 	bl	8009ba8 <HAL_UART_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80017f8:	f000 fa34 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017fc:	2100      	movs	r1, #0
 80017fe:	480d      	ldr	r0, [pc, #52]	; (8001834 <MX_UART7_Init+0x90>)
 8001800:	f00b fb67 	bl	800ced2 <HAL_UARTEx_SetTxFifoThreshold>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800180a:	f000 fa2b 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800180e:	2100      	movs	r1, #0
 8001810:	4808      	ldr	r0, [pc, #32]	; (8001834 <MX_UART7_Init+0x90>)
 8001812:	f00b fb9c 	bl	800cf4e <HAL_UARTEx_SetRxFifoThreshold>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 800181c:	f000 fa22 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <MX_UART7_Init+0x90>)
 8001822:	f00b fb1d 	bl	800ce60 <HAL_UARTEx_DisableFifoMode>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 800182c:	f000 fa1a 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	24000110 	.word	0x24000110
 8001838:	40007800 	.word	0x40007800

0800183c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001840:	4b22      	ldr	r3, [pc, #136]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001842:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <MX_USART1_UART_Init+0x94>)
 8001844:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800184c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <MX_USART1_UART_Init+0x90>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001862:	220c      	movs	r2, #12
 8001864:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <MX_USART1_UART_Init+0x90>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <MX_USART1_UART_Init+0x90>)
 800187a:	2200      	movs	r2, #0
 800187c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001880:	2200      	movs	r2, #0
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001884:	4811      	ldr	r0, [pc, #68]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001886:	f008 f98f 	bl	8009ba8 <HAL_UART_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001890:	f000 f9e8 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001894:	2100      	movs	r1, #0
 8001896:	480d      	ldr	r0, [pc, #52]	; (80018cc <MX_USART1_UART_Init+0x90>)
 8001898:	f00b fb1b 	bl	800ced2 <HAL_UARTEx_SetTxFifoThreshold>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80018a2:	f000 f9df 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a6:	2100      	movs	r1, #0
 80018a8:	4808      	ldr	r0, [pc, #32]	; (80018cc <MX_USART1_UART_Init+0x90>)
 80018aa:	f00b fb50 	bl	800cf4e <HAL_UARTEx_SetRxFifoThreshold>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80018b4:	f000 f9d6 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <MX_USART1_UART_Init+0x90>)
 80018ba:	f00b fad1 	bl	800ce60 <HAL_UARTEx_DisableFifoMode>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80018c4:	f000 f9ce 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	24000470 	.word	0x24000470
 80018d0:	40011000 	.word	0x40011000

080018d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018d8:	4b22      	ldr	r3, [pc, #136]	; (8001964 <MX_USART3_UART_Init+0x90>)
 80018da:	4a23      	ldr	r2, [pc, #140]	; (8001968 <MX_USART3_UART_Init+0x94>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018de:	4b21      	ldr	r3, [pc, #132]	; (8001964 <MX_USART3_UART_Init+0x90>)
 80018e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018e6:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <MX_USART3_UART_Init+0x90>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <MX_USART3_UART_Init+0x90>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <MX_USART3_UART_Init+0x90>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <MX_USART3_UART_Init+0x90>)
 80018fa:	220c      	movs	r2, #12
 80018fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <MX_USART3_UART_Init+0x90>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <MX_USART3_UART_Init+0x90>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <MX_USART3_UART_Init+0x90>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <MX_USART3_UART_Init+0x90>)
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <MX_USART3_UART_Init+0x90>)
 8001918:	2200      	movs	r2, #0
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800191c:	4811      	ldr	r0, [pc, #68]	; (8001964 <MX_USART3_UART_Init+0x90>)
 800191e:	f008 f943 	bl	8009ba8 <HAL_UART_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001928:	f000 f99c 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800192c:	2100      	movs	r1, #0
 800192e:	480d      	ldr	r0, [pc, #52]	; (8001964 <MX_USART3_UART_Init+0x90>)
 8001930:	f00b facf 	bl	800ced2 <HAL_UARTEx_SetTxFifoThreshold>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800193a:	f000 f993 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800193e:	2100      	movs	r1, #0
 8001940:	4808      	ldr	r0, [pc, #32]	; (8001964 <MX_USART3_UART_Init+0x90>)
 8001942:	f00b fb04 	bl	800cf4e <HAL_UARTEx_SetRxFifoThreshold>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800194c:	f000 f98a 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001950:	4804      	ldr	r0, [pc, #16]	; (8001964 <MX_USART3_UART_Init+0x90>)
 8001952:	f00b fa85 	bl	800ce60 <HAL_UARTEx_DisableFifoMode>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800195c:	f000 f982 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	240001c4 	.word	0x240001c4
 8001968:	40004800 	.word	0x40004800

0800196c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001970:	4b22      	ldr	r3, [pc, #136]	; (80019fc <MX_USART6_UART_Init+0x90>)
 8001972:	4a23      	ldr	r2, [pc, #140]	; (8001a00 <MX_USART6_UART_Init+0x94>)
 8001974:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <MX_USART6_UART_Init+0x90>)
 8001978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800197c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <MX_USART6_UART_Init+0x90>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <MX_USART6_UART_Init+0x90>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800198a:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <MX_USART6_UART_Init+0x90>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <MX_USART6_UART_Init+0x90>)
 8001992:	220c      	movs	r2, #12
 8001994:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001996:	4b19      	ldr	r3, [pc, #100]	; (80019fc <MX_USART6_UART_Init+0x90>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <MX_USART6_UART_Init+0x90>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <MX_USART6_UART_Init+0x90>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <MX_USART6_UART_Init+0x90>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ae:	4b13      	ldr	r3, [pc, #76]	; (80019fc <MX_USART6_UART_Init+0x90>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019b4:	4811      	ldr	r0, [pc, #68]	; (80019fc <MX_USART6_UART_Init+0x90>)
 80019b6:	f008 f8f7 	bl	8009ba8 <HAL_UART_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80019c0:	f000 f950 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c4:	2100      	movs	r1, #0
 80019c6:	480d      	ldr	r0, [pc, #52]	; (80019fc <MX_USART6_UART_Init+0x90>)
 80019c8:	f00b fa83 	bl	800ced2 <HAL_UARTEx_SetTxFifoThreshold>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80019d2:	f000 f947 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019d6:	2100      	movs	r1, #0
 80019d8:	4808      	ldr	r0, [pc, #32]	; (80019fc <MX_USART6_UART_Init+0x90>)
 80019da:	f00b fab8 	bl	800cf4e <HAL_UARTEx_SetRxFifoThreshold>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80019e4:	f000 f93e 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80019e8:	4804      	ldr	r0, [pc, #16]	; (80019fc <MX_USART6_UART_Init+0x90>)
 80019ea:	f00b fa39 	bl	800ce60 <HAL_UARTEx_DisableFifoMode>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80019f4:	f000 f936 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	240005e0 	.word	0x240005e0
 8001a00:	40011400 	.word	0x40011400

08001a04 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_DMA_Init+0x4c>)
 8001a0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a10:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <MX_DMA_Init+0x4c>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <MX_DMA_Init+0x4c>)
 8001a1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	200b      	movs	r0, #11
 8001a2e:	f002 f8f0 	bl	8003c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a32:	200b      	movs	r0, #11
 8001a34:	f002 f907 	bl	8003c46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	200c      	movs	r0, #12
 8001a3e:	f002 f8e8 	bl	8003c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a42:	200c      	movs	r0, #12
 8001a44:	f002 f8ff 	bl	8003c46 <HAL_NVIC_EnableIRQ>

}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	58024400 	.word	0x58024400

08001a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08c      	sub	sp, #48	; 0x30
 8001a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a6a:	4b78      	ldr	r3, [pc, #480]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a70:	4a76      	ldr	r2, [pc, #472]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001a72:	f043 0320 	orr.w	r3, r3, #32
 8001a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a7a:	4b74      	ldr	r3, [pc, #464]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a80:	f003 0320 	and.w	r3, r3, #32
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a88:	4b70      	ldr	r3, [pc, #448]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8e:	4a6f      	ldr	r2, [pc, #444]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a98:	4b6c      	ldr	r3, [pc, #432]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	4b69      	ldr	r3, [pc, #420]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aac:	4a67      	ldr	r2, [pc, #412]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab6:	4b65      	ldr	r3, [pc, #404]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac4:	4b61      	ldr	r3, [pc, #388]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aca:	4a60      	ldr	r2, [pc, #384]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad4:	4b5d      	ldr	r3, [pc, #372]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ae2:	4b5a      	ldr	r3, [pc, #360]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae8:	4a58      	ldr	r2, [pc, #352]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001aea:	f043 0310 	orr.w	r3, r3, #16
 8001aee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af2:	4b56      	ldr	r3, [pc, #344]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b00:	4b52      	ldr	r3, [pc, #328]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b06:	4a51      	ldr	r2, [pc, #324]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001b08:	f043 0308 	orr.w	r3, r3, #8
 8001b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b10:	4b4e      	ldr	r3, [pc, #312]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b1e:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b24:	4a49      	ldr	r2, [pc, #292]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b2e:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <MX_GPIO_Init+0x1f8>)
 8001b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin, GPIO_PIN_RESET);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f240 7104 	movw	r1, #1796	; 0x704
 8001b42:	4843      	ldr	r0, [pc, #268]	; (8001c50 <MX_GPIO_Init+0x1fc>)
 8001b44:	f004 fd66 	bl	8006614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f242 0167 	movw	r1, #8295	; 0x2067
 8001b4e:	4841      	ldr	r0, [pc, #260]	; (8001c54 <MX_GPIO_Init+0x200>)
 8001b50:	f004 fd60 	bl	8006614 <HAL_GPIO_WritePin>
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2182      	movs	r1, #130	; 0x82
 8001b58:	483f      	ldr	r0, [pc, #252]	; (8001c58 <MX_GPIO_Init+0x204>)
 8001b5a:	f004 fd5b 	bl	8006614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001b64:	483d      	ldr	r0, [pc, #244]	; (8001c5c <MX_GPIO_Init+0x208>)
 8001b66:	f004 fd55 	bl	8006614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f44f 5178 	mov.w	r1, #15872	; 0x3e00
 8001b70:	483b      	ldr	r0, [pc, #236]	; (8001c60 <MX_GPIO_Init+0x20c>)
 8001b72:	f004 fd4f 	bl	8006614 <HAL_GPIO_WritePin>
                          |rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : cylinder_SetTee_Pin cylinder_RigtArmHoldBallTop_Pin cylinder_HoldBall_Pin cylinder_LeftArmHoldBall_Pin */
  GPIO_InitStruct.Pin = cylinder_SetTee_Pin|cylinder_RigtArmHoldBallTop_Pin|cylinder_HoldBall_Pin|cylinder_LeftArmHoldBall_Pin;
 8001b76:	f240 7304 	movw	r3, #1796	; 0x704
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 031c 	add.w	r3, r7, #28
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4830      	ldr	r0, [pc, #192]	; (8001c50 <MX_GPIO_Init+0x1fc>)
 8001b90:	f004 fb90 	bl	80062b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 cylinder_RigtArmTrans_Pin cylinder_PassBall_Pin cylinder_LeftArmTrans_Pin 
                           cylinder_RigtArmHoldBallBot_Pin cylinder_LiftBall_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|cylinder_RigtArmTrans_Pin|cylinder_PassBall_Pin|cylinder_LeftArmTrans_Pin 
 8001b94:	f242 0367 	movw	r3, #8295	; 0x2067
 8001b98:	61fb      	str	r3, [r7, #28]
                          |cylinder_RigtArmHoldBallBot_Pin|cylinder_LiftBall_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	4829      	ldr	r0, [pc, #164]	; (8001c54 <MX_GPIO_Init+0x200>)
 8001bae:	f004 fb81 	bl	80062b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4823      	ldr	r0, [pc, #140]	; (8001c58 <MX_GPIO_Init+0x204>)
 8001bca:	f004 fb73 	bl	80062b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : legDir_Pin */
  GPIO_InitStruct.Pin = legDir_Pin;
 8001bce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legDir_GPIO_Port, &GPIO_InitStruct);
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	4619      	mov	r1, r3
 8001be6:	481d      	ldr	r0, [pc, #116]	; (8001c5c <MX_GPIO_Init+0x208>)
 8001be8:	f004 fb64 	bl	80062b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 8001bec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	4815      	ldr	r0, [pc, #84]	; (8001c5c <MX_GPIO_Init+0x208>)
 8001c06:	f004 fb55 	bl	80062b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 8001c0a:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 8001c0e:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	4619      	mov	r1, r3
 8001c22:	480f      	ldr	r0, [pc, #60]	; (8001c60 <MX_GPIO_Init+0x20c>)
 8001c24:	f004 fb46 	bl	80062b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	2303      	movs	r3, #3
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4806      	ldr	r0, [pc, #24]	; (8001c58 <MX_GPIO_Init+0x204>)
 8001c40:	f004 fb38 	bl	80062b4 <HAL_GPIO_Init>

}
 8001c44:	bf00      	nop
 8001c46:	3730      	adds	r7, #48	; 0x30
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	58024400 	.word	0x58024400
 8001c50:	58020000 	.word	0x58020000
 8001c54:	58020400 	.word	0x58020400
 8001c58:	58021000 	.word	0x58021000
 8001c5c:	58020c00 	.word	0x58020c00
 8001c60:	58021800 	.word	0x58021800

08001c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <HAL_MspInit+0x30>)
 8001c7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c80:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <HAL_MspInit+0x30>)
 8001c82:	f043 0302 	orr.w	r3, r3, #2
 8001c86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_MspInit+0x30>)
 8001c8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	58024400 	.word	0x58024400

08001ca8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	; 0x30
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a6a      	ldr	r2, [pc, #424]	; (8001e70 <HAL_ADC_MspInit+0x1c8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d175      	bne.n	8001db6 <HAL_ADC_MspInit+0x10e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001cca:	4b6a      	ldr	r3, [pc, #424]	; (8001e74 <HAL_ADC_MspInit+0x1cc>)
 8001ccc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cd0:	4a68      	ldr	r2, [pc, #416]	; (8001e74 <HAL_ADC_MspInit+0x1cc>)
 8001cd2:	f043 0320 	orr.w	r3, r3, #32
 8001cd6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001cda:	4b66      	ldr	r3, [pc, #408]	; (8001e74 <HAL_ADC_MspInit+0x1cc>)
 8001cdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce8:	4b62      	ldr	r3, [pc, #392]	; (8001e74 <HAL_ADC_MspInit+0x1cc>)
 8001cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cee:	4a61      	ldr	r2, [pc, #388]	; (8001e74 <HAL_ADC_MspInit+0x1cc>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf8:	4b5e      	ldr	r3, [pc, #376]	; (8001e74 <HAL_ADC_MspInit+0x1cc>)
 8001cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b5b      	ldr	r3, [pc, #364]	; (8001e74 <HAL_ADC_MspInit+0x1cc>)
 8001d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0c:	4a59      	ldr	r2, [pc, #356]	; (8001e74 <HAL_ADC_MspInit+0x1cc>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d16:	4b57      	ldr	r3, [pc, #348]	; (8001e74 <HAL_ADC_MspInit+0x1cc>)
 8001d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_INP10
    PA3     ------> ADC1_INP15 
    */
    GPIO_InitStruct.Pin = RollRigt_Pin;
 8001d24:	2301      	movs	r3, #1
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RollRigt_GPIO_Port, &GPIO_InitStruct);
 8001d30:	f107 031c 	add.w	r3, r7, #28
 8001d34:	4619      	mov	r1, r3
 8001d36:	4850      	ldr	r0, [pc, #320]	; (8001e78 <HAL_ADC_MspInit+0x1d0>)
 8001d38:	f004 fabc 	bl	80062b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RollLeft_Pin;
 8001d3c:	2308      	movs	r3, #8
 8001d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d40:	2303      	movs	r3, #3
 8001d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RollLeft_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	484b      	ldr	r0, [pc, #300]	; (8001e7c <HAL_ADC_MspInit+0x1d4>)
 8001d50:	f004 fab0 	bl	80062b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001d54:	4b4a      	ldr	r3, [pc, #296]	; (8001e80 <HAL_ADC_MspInit+0x1d8>)
 8001d56:	4a4b      	ldr	r2, [pc, #300]	; (8001e84 <HAL_ADC_MspInit+0x1dc>)
 8001d58:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001d5a:	4b49      	ldr	r3, [pc, #292]	; (8001e80 <HAL_ADC_MspInit+0x1d8>)
 8001d5c:	2209      	movs	r2, #9
 8001d5e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d60:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <HAL_ADC_MspInit+0x1d8>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d66:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <HAL_ADC_MspInit+0x1d8>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d6c:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <HAL_ADC_MspInit+0x1d8>)
 8001d6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d72:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d74:	4b42      	ldr	r3, [pc, #264]	; (8001e80 <HAL_ADC_MspInit+0x1d8>)
 8001d76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d7a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d7c:	4b40      	ldr	r3, [pc, #256]	; (8001e80 <HAL_ADC_MspInit+0x1d8>)
 8001d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d82:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d84:	4b3e      	ldr	r3, [pc, #248]	; (8001e80 <HAL_ADC_MspInit+0x1d8>)
 8001d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d8a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d8c:	4b3c      	ldr	r3, [pc, #240]	; (8001e80 <HAL_ADC_MspInit+0x1d8>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d92:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <HAL_ADC_MspInit+0x1d8>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d98:	4839      	ldr	r0, [pc, #228]	; (8001e80 <HAL_ADC_MspInit+0x1d8>)
 8001d9a:	f001 ff6f 	bl	8003c7c <HAL_DMA_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001da4:	f7ff ff5e 	bl	8001c64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a35      	ldr	r2, [pc, #212]	; (8001e80 <HAL_ADC_MspInit+0x1d8>)
 8001dac:	64da      	str	r2, [r3, #76]	; 0x4c
 8001dae:	4a34      	ldr	r2, [pc, #208]	; (8001e80 <HAL_ADC_MspInit+0x1d8>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001db4:	e058      	b.n	8001e68 <HAL_ADC_MspInit+0x1c0>
  else if(hadc->Instance==ADC3)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a33      	ldr	r2, [pc, #204]	; (8001e88 <HAL_ADC_MspInit+0x1e0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d153      	bne.n	8001e68 <HAL_ADC_MspInit+0x1c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001dc0:	4b2c      	ldr	r3, [pc, #176]	; (8001e74 <HAL_ADC_MspInit+0x1cc>)
 8001dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc6:	4a2b      	ldr	r2, [pc, #172]	; (8001e74 <HAL_ADC_MspInit+0x1cc>)
 8001dc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd0:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <HAL_ADC_MspInit+0x1cc>)
 8001dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dde:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <HAL_ADC_MspInit+0x1cc>)
 8001de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de4:	4a23      	ldr	r2, [pc, #140]	; (8001e74 <HAL_ADC_MspInit+0x1cc>)
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dee:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <HAL_ADC_MspInit+0x1cc>)
 8001df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001dfc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001e00:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001e04:	f000 fb92 	bl	800252c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001e08:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <HAL_ADC_MspInit+0x1e4>)
 8001e0a:	4a21      	ldr	r2, [pc, #132]	; (8001e90 <HAL_ADC_MspInit+0x1e8>)
 8001e0c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <HAL_ADC_MspInit+0x1e4>)
 8001e10:	2273      	movs	r2, #115	; 0x73
 8001e12:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_ADC_MspInit+0x1e4>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <HAL_ADC_MspInit+0x1e4>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <HAL_ADC_MspInit+0x1e4>)
 8001e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e26:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_ADC_MspInit+0x1e4>)
 8001e2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e2e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e30:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <HAL_ADC_MspInit+0x1e4>)
 8001e32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e36:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001e38:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_ADC_MspInit+0x1e4>)
 8001e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e3e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_ADC_MspInit+0x1e4>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <HAL_ADC_MspInit+0x1e4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001e4c:	480f      	ldr	r0, [pc, #60]	; (8001e8c <HAL_ADC_MspInit+0x1e4>)
 8001e4e:	f001 ff15 	bl	8003c7c <HAL_DMA_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_ADC_MspInit+0x1b4>
      Error_Handler();
 8001e58:	f7ff ff04 	bl	8001c64 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <HAL_ADC_MspInit+0x1e4>)
 8001e60:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_ADC_MspInit+0x1e4>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e68:	bf00      	nop
 8001e6a:	3730      	adds	r7, #48	; 0x30
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40022000 	.word	0x40022000
 8001e74:	58024400 	.word	0x58024400
 8001e78:	58020800 	.word	0x58020800
 8001e7c:	58020000 	.word	0x58020000
 8001e80:	2400050c 	.word	0x2400050c
 8001e84:	40020010 	.word	0x40020010
 8001e88:	58026000 	.word	0x58026000
 8001e8c:	240002d8 	.word	0x240002d8
 8001e90:	40020028 	.word	0x40020028

08001e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a2b      	ldr	r2, [pc, #172]	; (8001f50 <HAL_TIM_Base_MspInit+0xbc>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d117      	bne.n	8001ed6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ea6:	4b2b      	ldr	r3, [pc, #172]	; (8001f54 <HAL_TIM_Base_MspInit+0xc0>)
 8001ea8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eac:	4a29      	ldr	r2, [pc, #164]	; (8001f54 <HAL_TIM_Base_MspInit+0xc0>)
 8001eae:	f043 0320 	orr.w	r3, r3, #32
 8001eb2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001eb6:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <HAL_TIM_Base_MspInit+0xc0>)
 8001eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ebc:	f003 0320 	and.w	r3, r3, #32
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	2037      	movs	r0, #55	; 0x37
 8001eca:	f001 fea2 	bl	8003c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ece:	2037      	movs	r0, #55	; 0x37
 8001ed0:	f001 feb9 	bl	8003c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001ed4:	e038      	b.n	8001f48 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM12)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <HAL_TIM_Base_MspInit+0xc4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d117      	bne.n	8001f10 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001ee0:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <HAL_TIM_Base_MspInit+0xc0>)
 8001ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ee6:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <HAL_TIM_Base_MspInit+0xc0>)
 8001ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ef0:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <HAL_TIM_Base_MspInit+0xc0>)
 8001ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2100      	movs	r1, #0
 8001f02:	202b      	movs	r0, #43	; 0x2b
 8001f04:	f001 fe85 	bl	8003c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001f08:	202b      	movs	r0, #43	; 0x2b
 8001f0a:	f001 fe9c 	bl	8003c46 <HAL_NVIC_EnableIRQ>
}
 8001f0e:	e01b      	b.n	8001f48 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM15)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <HAL_TIM_Base_MspInit+0xc8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d116      	bne.n	8001f48 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <HAL_TIM_Base_MspInit+0xc0>)
 8001f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f20:	4a0c      	ldr	r2, [pc, #48]	; (8001f54 <HAL_TIM_Base_MspInit+0xc0>)
 8001f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_TIM_Base_MspInit+0xc0>)
 8001f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	2074      	movs	r0, #116	; 0x74
 8001f3e:	f001 fe68 	bl	8003c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001f42:	2074      	movs	r0, #116	; 0x74
 8001f44:	f001 fe7f 	bl	8003c46 <HAL_NVIC_EnableIRQ>
}
 8001f48:	bf00      	nop
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40001400 	.word	0x40001400
 8001f54:	58024400 	.word	0x58024400
 8001f58:	40001800 	.word	0x40001800
 8001f5c:	40014000 	.word	0x40014000

08001f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b090      	sub	sp, #64	; 0x40
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a79      	ldr	r2, [pc, #484]	; (8002164 <HAL_UART_MspInit+0x204>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d136      	bne.n	8001ff0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001f82:	4b79      	ldr	r3, [pc, #484]	; (8002168 <HAL_UART_MspInit+0x208>)
 8001f84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f88:	4a77      	ldr	r2, [pc, #476]	; (8002168 <HAL_UART_MspInit+0x208>)
 8001f8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f92:	4b75      	ldr	r3, [pc, #468]	; (8002168 <HAL_UART_MspInit+0x208>)
 8001f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fa0:	4b71      	ldr	r3, [pc, #452]	; (8002168 <HAL_UART_MspInit+0x208>)
 8001fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa6:	4a70      	ldr	r2, [pc, #448]	; (8002168 <HAL_UART_MspInit+0x208>)
 8001fa8:	f043 0320 	orr.w	r3, r3, #32
 8001fac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb0:	4b6d      	ldr	r3, [pc, #436]	; (8002168 <HAL_UART_MspInit+0x208>)
 8001fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb6:	f003 0320 	and.w	r3, r3, #32
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 8001fbe:	23c0      	movs	r3, #192	; 0xc0
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001fce:	2307      	movs	r3, #7
 8001fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4864      	ldr	r0, [pc, #400]	; (800216c <HAL_UART_MspInit+0x20c>)
 8001fda:	f004 f96b 	bl	80062b4 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2104      	movs	r1, #4
 8001fe2:	2052      	movs	r0, #82	; 0x52
 8001fe4:	f001 fe15 	bl	8003c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001fe8:	2052      	movs	r0, #82	; 0x52
 8001fea:	f001 fe2c 	bl	8003c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001fee:	e0b4      	b.n	800215a <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a5e      	ldr	r2, [pc, #376]	; (8002170 <HAL_UART_MspInit+0x210>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d137      	bne.n	800206a <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ffa:	4b5b      	ldr	r3, [pc, #364]	; (8002168 <HAL_UART_MspInit+0x208>)
 8001ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002000:	4a59      	ldr	r2, [pc, #356]	; (8002168 <HAL_UART_MspInit+0x208>)
 8002002:	f043 0310 	orr.w	r3, r3, #16
 8002006:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800200a:	4b57      	ldr	r3, [pc, #348]	; (8002168 <HAL_UART_MspInit+0x208>)
 800200c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	623b      	str	r3, [r7, #32]
 8002016:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002018:	4b53      	ldr	r3, [pc, #332]	; (8002168 <HAL_UART_MspInit+0x208>)
 800201a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201e:	4a52      	ldr	r2, [pc, #328]	; (8002168 <HAL_UART_MspInit+0x208>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002028:	4b4f      	ldr	r3, [pc, #316]	; (8002168 <HAL_UART_MspInit+0x208>)
 800202a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 8002036:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2300      	movs	r3, #0
 8002046:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002048:	2304      	movs	r3, #4
 800204a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002050:	4619      	mov	r1, r3
 8002052:	4848      	ldr	r0, [pc, #288]	; (8002174 <HAL_UART_MspInit+0x214>)
 8002054:	f004 f92e 	bl	80062b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002058:	2200      	movs	r2, #0
 800205a:	2101      	movs	r1, #1
 800205c:	2025      	movs	r0, #37	; 0x25
 800205e:	f001 fdd8 	bl	8003c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002062:	2025      	movs	r0, #37	; 0x25
 8002064:	f001 fdef 	bl	8003c46 <HAL_NVIC_EnableIRQ>
}
 8002068:	e077      	b.n	800215a <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a42      	ldr	r2, [pc, #264]	; (8002178 <HAL_UART_MspInit+0x218>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d137      	bne.n	80020e4 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002074:	4b3c      	ldr	r3, [pc, #240]	; (8002168 <HAL_UART_MspInit+0x208>)
 8002076:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800207a:	4a3b      	ldr	r2, [pc, #236]	; (8002168 <HAL_UART_MspInit+0x208>)
 800207c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002080:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002084:	4b38      	ldr	r3, [pc, #224]	; (8002168 <HAL_UART_MspInit+0x208>)
 8002086:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800208a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800208e:	61bb      	str	r3, [r7, #24]
 8002090:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002092:	4b35      	ldr	r3, [pc, #212]	; (8002168 <HAL_UART_MspInit+0x208>)
 8002094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002098:	4a33      	ldr	r2, [pc, #204]	; (8002168 <HAL_UART_MspInit+0x208>)
 800209a:	f043 0302 	orr.w	r3, r3, #2
 800209e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <HAL_UART_MspInit+0x208>)
 80020a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 80020b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020c2:	2307      	movs	r3, #7
 80020c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ca:	4619      	mov	r1, r3
 80020cc:	4829      	ldr	r0, [pc, #164]	; (8002174 <HAL_UART_MspInit+0x214>)
 80020ce:	f004 f8f1 	bl	80062b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2103      	movs	r1, #3
 80020d6:	2027      	movs	r0, #39	; 0x27
 80020d8:	f001 fd9b 	bl	8003c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020dc:	2027      	movs	r0, #39	; 0x27
 80020de:	f001 fdb2 	bl	8003c46 <HAL_NVIC_EnableIRQ>
}
 80020e2:	e03a      	b.n	800215a <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART6)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a24      	ldr	r2, [pc, #144]	; (800217c <HAL_UART_MspInit+0x21c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d135      	bne.n	800215a <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART6_CLK_ENABLE();
 80020ee:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <HAL_UART_MspInit+0x208>)
 80020f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020f4:	4a1c      	ldr	r2, [pc, #112]	; (8002168 <HAL_UART_MspInit+0x208>)
 80020f6:	f043 0320 	orr.w	r3, r3, #32
 80020fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020fe:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <HAL_UART_MspInit+0x208>)
 8002100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002104:	f003 0320 	and.w	r3, r3, #32
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <HAL_UART_MspInit+0x208>)
 800210e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002112:	4a15      	ldr	r2, [pc, #84]	; (8002168 <HAL_UART_MspInit+0x208>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_UART_MspInit+0x208>)
 800211e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 800212a:	23c0      	movs	r3, #192	; 0xc0
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800213a:	2307      	movs	r3, #7
 800213c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002142:	4619      	mov	r1, r3
 8002144:	480e      	ldr	r0, [pc, #56]	; (8002180 <HAL_UART_MspInit+0x220>)
 8002146:	f004 f8b5 	bl	80062b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2102      	movs	r1, #2
 800214e:	2047      	movs	r0, #71	; 0x47
 8002150:	f001 fd5f 	bl	8003c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002154:	2047      	movs	r0, #71	; 0x47
 8002156:	f001 fd76 	bl	8003c46 <HAL_NVIC_EnableIRQ>
}
 800215a:	bf00      	nop
 800215c:	3740      	adds	r7, #64	; 0x40
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40007800 	.word	0x40007800
 8002168:	58024400 	.word	0x58024400
 800216c:	58021400 	.word	0x58021400
 8002170:	40011000 	.word	0x40011000
 8002174:	58020400 	.word	0x58020400
 8002178:	40004800 	.word	0x40004800
 800217c:	40011400 	.word	0x40011400
 8002180:	58020800 	.word	0x58020800

08002184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002196:	e7fe      	b.n	8002196 <HardFault_Handler+0x4>

08002198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800219c:	e7fe      	b.n	800219c <MemManage_Handler+0x4>

0800219e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a2:	e7fe      	b.n	80021a2 <BusFault_Handler+0x4>

080021a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <UsageFault_Handler+0x4>

080021aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d8:	f000 f95a 	bl	8002490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}

080021e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <DMA1_Stream0_IRQHandler+0x10>)
 80021e6:	f002 fd53 	bl	8004c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	2400050c 	.word	0x2400050c

080021f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <DMA1_Stream1_IRQHandler+0x10>)
 80021fa:	f002 fd49 	bl	8004c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	240002d8 	.word	0x240002d8

08002208 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <USART1_IRQHandler+0x10>)
 800220e:	f007 fe77 	bl	8009f00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	24000470 	.word	0x24000470

0800221c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <USART3_IRQHandler+0x10>)
 8002222:	f007 fe6d 	bl	8009f00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	240001c4 	.word	0x240001c4

08002230 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002236:	f007 f8c1 	bl	80093bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	240006b0 	.word	0x240006b0

08002244 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <TIM7_IRQHandler+0x10>)
 800224a:	f007 f8b7 	bl	80093bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	240006f8 	.word	0x240006f8

08002258 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <USART6_IRQHandler+0x10>)
 800225e:	f007 fe4f 	bl	8009f00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	240005e0 	.word	0x240005e0

0800226c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <UART7_IRQHandler+0x10>)
 8002272:	f007 fe45 	bl	8009f00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	24000110 	.word	0x24000110

08002280 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <TIM15_IRQHandler+0x10>)
 8002286:	f007 f899 	bl	80093bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	24000258 	.word	0x24000258

08002294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002298:	4b29      	ldr	r3, [pc, #164]	; (8002340 <SystemInit+0xac>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	4a28      	ldr	r2, [pc, #160]	; (8002340 <SystemInit+0xac>)
 80022a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80022a8:	4b26      	ldr	r3, [pc, #152]	; (8002344 <SystemInit+0xb0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a25      	ldr	r2, [pc, #148]	; (8002344 <SystemInit+0xb0>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022b4:	4b23      	ldr	r3, [pc, #140]	; (8002344 <SystemInit+0xb0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80022ba:	4b22      	ldr	r3, [pc, #136]	; (8002344 <SystemInit+0xb0>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	4921      	ldr	r1, [pc, #132]	; (8002344 <SystemInit+0xb0>)
 80022c0:	4b21      	ldr	r3, [pc, #132]	; (8002348 <SystemInit+0xb4>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80022c6:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <SystemInit+0xb0>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <SystemInit+0xb0>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80022d2:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <SystemInit+0xb0>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80022d8:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <SystemInit+0xb0>)
 80022da:	2200      	movs	r2, #0
 80022dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80022de:	4b19      	ldr	r3, [pc, #100]	; (8002344 <SystemInit+0xb0>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80022e4:	4b17      	ldr	r3, [pc, #92]	; (8002344 <SystemInit+0xb0>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80022ea:	4b16      	ldr	r3, [pc, #88]	; (8002344 <SystemInit+0xb0>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <SystemInit+0xb0>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80022f6:	4b13      	ldr	r3, [pc, #76]	; (8002344 <SystemInit+0xb0>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <SystemInit+0xb0>)
 80022fe:	2200      	movs	r2, #0
 8002300:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002302:	4b10      	ldr	r3, [pc, #64]	; (8002344 <SystemInit+0xb0>)
 8002304:	2200      	movs	r2, #0
 8002306:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002308:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <SystemInit+0xb0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0d      	ldr	r2, [pc, #52]	; (8002344 <SystemInit+0xb0>)
 800230e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002312:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <SystemInit+0xb0>)
 8002316:	2200      	movs	r2, #0
 8002318:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <SystemInit+0xb8>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <SystemInit+0xbc>)
 8002320:	4013      	ands	r3, r2
 8002322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002326:	d202      	bcs.n	800232e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <SystemInit+0xc0>)
 800232a:	2201      	movs	r2, #1
 800232c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800232e:	4b04      	ldr	r3, [pc, #16]	; (8002340 <SystemInit+0xac>)
 8002330:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002334:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00
 8002344:	58024400 	.word	0x58024400
 8002348:	eaf6ed7f 	.word	0xeaf6ed7f
 800234c:	5c001000 	.word	0x5c001000
 8002350:	ffff0000 	.word	0xffff0000
 8002354:	51008108 	.word	0x51008108

08002358 <Reset_Handler>:
 8002358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002390 <LoopFillZerobss+0x14>
 800235c:	2100      	movs	r1, #0
 800235e:	e003      	b.n	8002368 <LoopCopyDataInit>

08002360 <CopyDataInit>:
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <LoopFillZerobss+0x18>)
 8002362:	585b      	ldr	r3, [r3, r1]
 8002364:	5043      	str	r3, [r0, r1]
 8002366:	3104      	adds	r1, #4

08002368 <LoopCopyDataInit>:
 8002368:	480b      	ldr	r0, [pc, #44]	; (8002398 <LoopFillZerobss+0x1c>)
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <LoopFillZerobss+0x20>)
 800236c:	1842      	adds	r2, r0, r1
 800236e:	429a      	cmp	r2, r3
 8002370:	d3f6      	bcc.n	8002360 <CopyDataInit>
 8002372:	4a0b      	ldr	r2, [pc, #44]	; (80023a0 <LoopFillZerobss+0x24>)
 8002374:	e002      	b.n	800237c <LoopFillZerobss>

08002376 <FillZerobss>:
 8002376:	2300      	movs	r3, #0
 8002378:	f842 3b04 	str.w	r3, [r2], #4

0800237c <LoopFillZerobss>:
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <LoopFillZerobss+0x28>)
 800237e:	429a      	cmp	r2, r3
 8002380:	d3f9      	bcc.n	8002376 <FillZerobss>
 8002382:	f7ff ff87 	bl	8002294 <SystemInit>
 8002386:	f00a fe8f 	bl	800d0a8 <__libc_init_array>
 800238a:	f7fe ff59 	bl	8001240 <main>
 800238e:	4770      	bx	lr
 8002390:	24080000 	.word	0x24080000
 8002394:	0800e428 	.word	0x0800e428
 8002398:	24000000 	.word	0x24000000
 800239c:	240000b8 	.word	0x240000b8
 80023a0:	240000b8 	.word	0x240000b8
 80023a4:	24000754 	.word	0x24000754

080023a8 <ADC3_IRQHandler>:
 80023a8:	e7fe      	b.n	80023a8 <ADC3_IRQHandler>
	...

080023ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b2:	2003      	movs	r0, #3
 80023b4:	f001 fc22 	bl	8003bfc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023b8:	f004 ff28 	bl	800720c <HAL_RCC_GetSysClockFreq>
 80023bc:	4601      	mov	r1, r0
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_Init+0x68>)
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	4a13      	ldr	r2, [pc, #76]	; (8002418 <HAL_Init+0x6c>)
 80023ca:	5cd3      	ldrb	r3, [r2, r3]
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	fa21 f303 	lsr.w	r3, r1, r3
 80023d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <HAL_Init+0x68>)
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <HAL_Init+0x6c>)
 80023e0:	5cd3      	ldrb	r3, [r2, r3]
 80023e2:	f003 031f 	and.w	r3, r3, #31
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	fa22 f303 	lsr.w	r3, r2, r3
 80023ec:	4a0b      	ldr	r2, [pc, #44]	; (800241c <HAL_Init+0x70>)
 80023ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023f0:	4a0b      	ldr	r2, [pc, #44]	; (8002420 <HAL_Init+0x74>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023f6:	2000      	movs	r0, #0
 80023f8:	f000 f814 	bl	8002424 <HAL_InitTick>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e002      	b.n	800240c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002406:	f7ff fc35 	bl	8001c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	58024400 	.word	0x58024400
 8002418:	0800e1e0 	.word	0x0800e1e0
 800241c:	24000044 	.word	0x24000044
 8002420:	24000040 	.word	0x24000040

08002424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800242c:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_InitTick+0x60>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e021      	b.n	800247c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002438:	4b13      	ldr	r3, [pc, #76]	; (8002488 <HAL_InitTick+0x64>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b11      	ldr	r3, [pc, #68]	; (8002484 <HAL_InitTick+0x60>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002446:	fbb3 f3f1 	udiv	r3, r3, r1
 800244a:	fbb2 f3f3 	udiv	r3, r2, r3
 800244e:	4618      	mov	r0, r3
 8002450:	f001 fc07 	bl	8003c62 <HAL_SYSTICK_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e00e      	b.n	800247c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b0f      	cmp	r3, #15
 8002462:	d80a      	bhi.n	800247a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002464:	2200      	movs	r2, #0
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	f001 fbd1 	bl	8003c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002470:	4a06      	ldr	r2, [pc, #24]	; (800248c <HAL_InitTick+0x68>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	e000      	b.n	800247c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	2400004c 	.word	0x2400004c
 8002488:	24000040 	.word	0x24000040
 800248c:	24000048 	.word	0x24000048

08002490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_IncTick+0x20>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_IncTick+0x24>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <HAL_IncTick+0x24>)
 80024a2:	6013      	str	r3, [r2, #0]
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	2400004c 	.word	0x2400004c
 80024b4:	24000750 	.word	0x24000750

080024b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return uwTick;
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <HAL_GetTick+0x14>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	24000750 	.word	0x24000750

080024d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d8:	f7ff ffee 	bl	80024b8 <HAL_GetTick>
 80024dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d005      	beq.n	80024f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_Delay+0x40>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024f6:	bf00      	nop
 80024f8:	f7ff ffde 	bl	80024b8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	429a      	cmp	r2, r3
 8002506:	d8f7      	bhi.n	80024f8 <HAL_Delay+0x28>
  {
  }
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	2400004c 	.word	0x2400004c

08002514 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_GetREVID+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	0c1b      	lsrs	r3, r3, #16
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	5c001000 	.word	0x5c001000

0800252c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002536:	4b07      	ldr	r3, [pc, #28]	; (8002554 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	43db      	mvns	r3, r3
 800253e:	401a      	ands	r2, r3
 8002540:	4904      	ldr	r1, [pc, #16]	; (8002554 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	58000400 	.word	0x58000400

08002558 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	609a      	str	r2, [r3, #8]
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	609a      	str	r2, [r3, #8]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025c0:	b490      	push	{r4, r7}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	3360      	adds	r3, #96	; 0x60
 80025d2:	461a      	mov	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80025dc:	6823      	ldr	r3, [r4, #0]
 80025de:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	430b      	orrs	r3, r1
 80025ec:	4313      	orrs	r3, r2
 80025ee:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc90      	pop	{r4, r7}
 80025f8:	4770      	bx	lr

080025fa <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b085      	sub	sp, #20
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	431a      	orrs	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	611a      	str	r2, [r3, #16]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800262c:	b490      	push	{r4, r7}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3360      	adds	r3, #96	; 0x60
 800263c:	461a      	mov	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002646:	6823      	ldr	r3, [r4, #0]
 8002648:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4313      	orrs	r3, r2
 8002650:	6023      	str	r3, [r4, #0]
}
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bc90      	pop	{r4, r7}
 800265a:	4770      	bx	lr

0800265c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002682:	b490      	push	{r4, r7}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3330      	adds	r3, #48	; 0x30
 8002692:	461a      	mov	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	4413      	add	r3, r2
 80026a0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80026a2:	6822      	ldr	r2, [r4, #0]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	211f      	movs	r1, #31
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	401a      	ands	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	0e9b      	lsrs	r3, r3, #26
 80026b8:	f003 011f 	and.w	r1, r3, #31
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	4313      	orrs	r3, r2
 80026c8:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc90      	pop	{r4, r7}
 80026d2:	4770      	bx	lr

080026d4 <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f023 0203 	bic.w	r2, r3, #3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	60da      	str	r2, [r3, #12]
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026fa:	b490      	push	{r4, r7}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3314      	adds	r3, #20
 800270a:	461a      	mov	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	0e5b      	lsrs	r3, r3, #25
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	4413      	add	r3, r2
 8002718:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800271a:	6822      	ldr	r2, [r4, #0]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	0d1b      	lsrs	r3, r3, #20
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	2107      	movs	r1, #7
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	401a      	ands	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	0d1b      	lsrs	r3, r3, #20
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	4313      	orrs	r3, r2
 800273e:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bc90      	pop	{r4, r7}
 8002748:	4770      	bx	lr
	...

0800274c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002764:	43db      	mvns	r3, r3
 8002766:	401a      	ands	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 0318 	and.w	r3, r3, #24
 800276e:	4908      	ldr	r1, [pc, #32]	; (8002790 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002770:	40d9      	lsrs	r1, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	400b      	ands	r3, r1
 8002776:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800277a:	431a      	orrs	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	000fffff 	.word	0x000fffff

08002794 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 031f 	and.w	r3, r3, #31
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80027be:	4013      	ands	r3, r2
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6093      	str	r3, [r2, #8]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	5fffffc0 	.word	0x5fffffc0

080027d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027e8:	d101      	bne.n	80027ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <LL_ADC_EnableInternalRegulator+0x24>)
 800280a:	4013      	ands	r3, r2
 800280c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	6fffffc0 	.word	0x6fffffc0

08002824 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002834:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002838:	d101      	bne.n	800283e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <LL_ADC_Enable+0x24>)
 800285a:	4013      	ands	r3, r2
 800285c:	f043 0201 	orr.w	r2, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	7fffffc0 	.word	0x7fffffc0

08002874 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <LL_ADC_IsEnabled+0x18>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <LL_ADC_IsEnabled+0x1a>
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <LL_ADC_REG_StartConversion+0x24>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	f043 0204 	orr.w	r2, r3, #4
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	7fffffc0 	.word	0x7fffffc0

080028c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d101      	bne.n	80028dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d101      	bne.n	8002902 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b089      	sub	sp, #36	; 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800291c:	2300      	movs	r3, #0
 800291e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e18e      	b.n	8002c48 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff f9b5 	bl	8001ca8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff3f 	bl	80027d4 <LL_ADC_IsDeepPowerDownEnabled>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff25 	bl	80027b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff ff5a 	bl	8002824 <LL_ADC_IsInternalRegulatorEnabled>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d113      	bne.n	800299e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff3e 	bl	80027fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002980:	4b9a      	ldr	r3, [pc, #616]	; (8002bec <HAL_ADC_Init+0x2dc>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	099b      	lsrs	r3, r3, #6
 8002986:	4a9a      	ldr	r2, [pc, #616]	; (8002bf0 <HAL_ADC_Init+0x2e0>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	099b      	lsrs	r3, r3, #6
 800298e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002990:	e002      	b.n	8002998 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	3b01      	subs	r3, #1
 8002996:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f9      	bne.n	8002992 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ff3e 	bl	8002824 <LL_ADC_IsInternalRegulatorEnabled>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10d      	bne.n	80029ca <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	f043 0210 	orr.w	r2, r3, #16
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029be:	f043 0201 	orr.w	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff ff78 	bl	80028c4 <LL_ADC_REG_IsConversionOngoing>
 80029d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f040 8129 	bne.w	8002c36 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f040 8125 	bne.w	8002c36 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029f4:	f043 0202 	orr.w	r2, r3, #2
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff37 	bl	8002874 <LL_ADC_IsEnabled>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d136      	bne.n	8002a7a <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a78      	ldr	r2, [pc, #480]	; (8002bf4 <HAL_ADC_Init+0x2e4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d004      	beq.n	8002a20 <HAL_ADC_Init+0x110>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a77      	ldr	r2, [pc, #476]	; (8002bf8 <HAL_ADC_Init+0x2e8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d10e      	bne.n	8002a3e <HAL_ADC_Init+0x12e>
 8002a20:	4874      	ldr	r0, [pc, #464]	; (8002bf4 <HAL_ADC_Init+0x2e4>)
 8002a22:	f7ff ff27 	bl	8002874 <LL_ADC_IsEnabled>
 8002a26:	4604      	mov	r4, r0
 8002a28:	4873      	ldr	r0, [pc, #460]	; (8002bf8 <HAL_ADC_Init+0x2e8>)
 8002a2a:	f7ff ff23 	bl	8002874 <LL_ADC_IsEnabled>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4323      	orrs	r3, r4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bf0c      	ite	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	2300      	movne	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	e008      	b.n	8002a50 <HAL_ADC_Init+0x140>
 8002a3e:	486f      	ldr	r0, [pc, #444]	; (8002bfc <HAL_ADC_Init+0x2ec>)
 8002a40:	f7ff ff18 	bl	8002874 <LL_ADC_IsEnabled>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	bf0c      	ite	eq
 8002a4a:	2301      	moveq	r3, #1
 8002a4c:	2300      	movne	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d012      	beq.n	8002a7a <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a66      	ldr	r2, [pc, #408]	; (8002bf4 <HAL_ADC_Init+0x2e4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d004      	beq.n	8002a68 <HAL_ADC_Init+0x158>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a65      	ldr	r2, [pc, #404]	; (8002bf8 <HAL_ADC_Init+0x2e8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d101      	bne.n	8002a6c <HAL_ADC_Init+0x15c>
 8002a68:	4a65      	ldr	r2, [pc, #404]	; (8002c00 <HAL_ADC_Init+0x2f0>)
 8002a6a:	e000      	b.n	8002a6e <HAL_ADC_Init+0x15e>
 8002a6c:	4a65      	ldr	r2, [pc, #404]	; (8002c04 <HAL_ADC_Init+0x2f4>)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4619      	mov	r1, r3
 8002a74:	4610      	mov	r0, r2
 8002a76:	f7ff fd6f 	bl	8002558 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002a7a:	f7ff fd4b 	bl	8002514 <HAL_GetREVID>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d914      	bls.n	8002ab2 <HAL_ADC_Init+0x1a2>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b10      	cmp	r3, #16
 8002a8e:	d110      	bne.n	8002ab2 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	7d5b      	ldrb	r3, [r3, #21]
 8002a94:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a9a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002aa0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	7f1b      	ldrb	r3, [r3, #28]
 8002aa6:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002aa8:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002aaa:	f043 030c 	orr.w	r3, r3, #12
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	e00d      	b.n	8002ace <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	7d5b      	ldrb	r3, [r3, #21]
 8002ab6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002abc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002ac2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	7f1b      	ldrb	r3, [r3, #28]
 8002ac8:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	7f1b      	ldrb	r3, [r3, #28]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d106      	bne.n	8002ae4 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	045b      	lsls	r3, r3, #17
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d009      	beq.n	8002b00 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	4b40      	ldr	r3, [pc, #256]	; (8002c08 <HAL_ADC_Init+0x2f8>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	69b9      	ldr	r1, [r7, #24]
 8002b10:	430b      	orrs	r3, r1
 8002b12:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fed3 	bl	80028c4 <LL_ADC_REG_IsConversionOngoing>
 8002b1e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fee0 	bl	80028ea <LL_ADC_INJ_IsConversionOngoing>
 8002b2a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d14a      	bne.n	8002bc8 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d147      	bne.n	8002bc8 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	7d1b      	ldrb	r3, [r3, #20]
 8002b3c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	4b2f      	ldr	r3, [pc, #188]	; (8002c0c <HAL_ADC_Init+0x2fc>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	69b9      	ldr	r1, [r7, #24]
 8002b56:	430b      	orrs	r3, r1
 8002b58:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d11b      	bne.n	8002b9c <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <HAL_ADC_Init+0x300>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b78:	3a01      	subs	r2, #1
 8002b7a:	0411      	lsls	r1, r2, #16
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b80:	4311      	orrs	r1, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b86:	4311      	orrs	r1, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 0201 	orr.w	r2, r2, #1
 8002b98:	611a      	str	r2, [r3, #16]
 8002b9a:	e007      	b.n	8002bac <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0201 	bic.w	r2, r2, #1
 8002baa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fd52 	bl	800366c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d121      	bne.n	8002c14 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f023 010f 	bic.w	r1, r3, #15
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	1e5a      	subs	r2, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
 8002be8:	e01c      	b.n	8002c24 <HAL_ADC_Init+0x314>
 8002bea:	bf00      	nop
 8002bec:	24000040 	.word	0x24000040
 8002bf0:	053e2d63 	.word	0x053e2d63
 8002bf4:	40022000 	.word	0x40022000
 8002bf8:	40022100 	.word	0x40022100
 8002bfc:	58026000 	.word	0x58026000
 8002c00:	40022300 	.word	0x40022300
 8002c04:	58026300 	.word	0x58026300
 8002c08:	fff0c003 	.word	0xfff0c003
 8002c0c:	ffffbffc 	.word	0xffffbffc
 8002c10:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 020f 	bic.w	r2, r2, #15
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c28:	f023 0303 	bic.w	r3, r3, #3
 8002c2c:	f043 0201 	orr.w	r2, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	655a      	str	r2, [r3, #84]	; 0x54
 8002c34:	e007      	b.n	8002c46 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3a:	f043 0210 	orr.w	r2, r3, #16
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c46:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3724      	adds	r7, #36	; 0x24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd90      	pop	{r4, r7, pc}

08002c50 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a55      	ldr	r2, [pc, #340]	; (8002db8 <HAL_ADC_Start_DMA+0x168>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d004      	beq.n	8002c70 <HAL_ADC_Start_DMA+0x20>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a54      	ldr	r2, [pc, #336]	; (8002dbc <HAL_ADC_Start_DMA+0x16c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d101      	bne.n	8002c74 <HAL_ADC_Start_DMA+0x24>
 8002c70:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <HAL_ADC_Start_DMA+0x170>)
 8002c72:	e000      	b.n	8002c76 <HAL_ADC_Start_DMA+0x26>
 8002c74:	4b53      	ldr	r3, [pc, #332]	; (8002dc4 <HAL_ADC_Start_DMA+0x174>)
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fd8c 	bl	8002794 <LL_ADC_GetMultimode>
 8002c7c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fe1e 	bl	80028c4 <LL_ADC_REG_IsConversionOngoing>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f040 808c 	bne.w	8002da8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_Start_DMA+0x4e>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e087      	b.n	8002dae <HAL_ADC_Start_DMA+0x15e>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	2b05      	cmp	r3, #5
 8002cb0:	d002      	beq.n	8002cb8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b09      	cmp	r3, #9
 8002cb6:	d170      	bne.n	8002d9a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fbbf 	bl	800343c <ADC_Enable>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d163      	bne.n	8002d90 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ccc:	4b3e      	ldr	r3, [pc, #248]	; (8002dc8 <HAL_ADC_Start_DMA+0x178>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a37      	ldr	r2, [pc, #220]	; (8002dbc <HAL_ADC_Start_DMA+0x16c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d002      	beq.n	8002ce8 <HAL_ADC_Start_DMA+0x98>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	e000      	b.n	8002cea <HAL_ADC_Start_DMA+0x9a>
 8002ce8:	4b33      	ldr	r3, [pc, #204]	; (8002db8 <HAL_ADC_Start_DMA+0x168>)
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d002      	beq.n	8002cf8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d105      	bne.n	8002d04 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d006      	beq.n	8002d1e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d14:	f023 0206 	bic.w	r2, r3, #6
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	659a      	str	r2, [r3, #88]	; 0x58
 8002d1c:	e002      	b.n	8002d24 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d28:	4a28      	ldr	r2, [pc, #160]	; (8002dcc <HAL_ADC_Start_DMA+0x17c>)
 8002d2a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d30:	4a27      	ldr	r2, [pc, #156]	; (8002dd0 <HAL_ADC_Start_DMA+0x180>)
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d38:	4a26      	ldr	r2, [pc, #152]	; (8002dd4 <HAL_ADC_Start_DMA+0x184>)
 8002d3a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	221c      	movs	r2, #28
 8002d42:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0210 	orr.w	r2, r2, #16
 8002d5a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	4619      	mov	r1, r3
 8002d66:	4610      	mov	r0, r2
 8002d68:	f7ff fcb4 	bl	80026d4 <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3340      	adds	r3, #64	; 0x40
 8002d76:	4619      	mov	r1, r3
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f001 fada 	bl	8004334 <HAL_DMA_Start_IT>
 8002d80:	4603      	mov	r3, r0
 8002d82:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fd87 	bl	800289c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002d8e:	e00d      	b.n	8002dac <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002d98:	e008      	b.n	8002dac <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002da6:	e001      	b.n	8002dac <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
 8002daa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40022000 	.word	0x40022000
 8002dbc:	40022100 	.word	0x40022100
 8002dc0:	40022300 	.word	0x40022300
 8002dc4:	58026300 	.word	0x58026300
 8002dc8:	fffff0fe 	.word	0xfffff0fe
 8002dcc:	08003545 	.word	0x08003545
 8002dd0:	0800361d 	.word	0x0800361d
 8002dd4:	08003639 	.word	0x08003639

08002dd8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e14:	b590      	push	{r4, r7, lr}
 8002e16:	b099      	sub	sp, #100	; 0x64
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4a99      	ldr	r2, [pc, #612]	; (8003094 <HAL_ADC_ConfigChannel+0x280>)
 8002e2e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x2a>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e2e6      	b.n	800340c <HAL_ADC_ConfigChannel+0x5f8>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fd3a 	bl	80028c4 <LL_ADC_REG_IsConversionOngoing>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f040 82cb 	bne.w	80033ee <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d108      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x62>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	0e9b      	lsrs	r3, r3, #26
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	2201      	movs	r2, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	e00f      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x82>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e86:	fab3 f383 	clz	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	2201      	movs	r2, #1
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	69d1      	ldr	r1, [r2, #28]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	6859      	ldr	r1, [r3, #4]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	f7ff fbe6 	bl	8002682 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff fd02 	bl	80028c4 <LL_ADC_REG_IsConversionOngoing>
 8002ec0:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fd0f 	bl	80028ea <LL_ADC_INJ_IsConversionOngoing>
 8002ecc:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f040 80b3 	bne.w	800303c <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f040 80af 	bne.w	800303c <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6819      	ldr	r1, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f7ff fc05 	bl	80026fa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ef0:	4b69      	ldr	r3, [pc, #420]	; (8003098 <HAL_ADC_ConfigChannel+0x284>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002ef8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002efc:	d10b      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x102>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	089b      	lsrs	r3, r3, #2
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	e01d      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x13e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10b      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x128>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	695a      	ldr	r2, [r3, #20]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	089b      	lsrs	r3, r3, #2
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	e00a      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x13e>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	089b      	lsrs	r3, r3, #2
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d027      	beq.n	8002fac <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6818      	ldr	r0, [r3, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	6919      	ldr	r1, [r3, #16]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f6a:	f7ff fb29 	bl	80025c0 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6919      	ldr	r1, [r3, #16]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	7e5b      	ldrb	r3, [r3, #25]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d102      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x170>
 8002f7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f82:	e000      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x172>
 8002f84:	2300      	movs	r3, #0
 8002f86:	461a      	mov	r2, r3
 8002f88:	f7ff fb50 	bl	800262c <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	6919      	ldr	r1, [r3, #16]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	7e1b      	ldrb	r3, [r3, #24]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d102      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x18e>
 8002f9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fa0:	e000      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x190>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	f7ff fb28 	bl	80025fa <LL_ADC_SetDataRightShift>
 8002faa:	e047      	b.n	800303c <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	069b      	lsls	r3, r3, #26
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d107      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fce:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	069b      	lsls	r3, r3, #26
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d107      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ff2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ffa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	069b      	lsls	r3, r3, #26
 8003004:	429a      	cmp	r2, r3
 8003006:	d107      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003016:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800301e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	069b      	lsls	r3, r3, #26
 8003028:	429a      	cmp	r2, r3
 800302a:	d107      	bne.n	800303c <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800303a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fc17 	bl	8002874 <LL_ADC_IsEnabled>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	f040 81d9 	bne.w	8003400 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6819      	ldr	r1, [r3, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	461a      	mov	r2, r3
 800305c:	f7ff fb76 	bl	800274c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a0b      	ldr	r2, [pc, #44]	; (8003094 <HAL_ADC_ConfigChannel+0x280>)
 8003066:	4293      	cmp	r3, r2
 8003068:	f040 8101 	bne.w	800326e <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10f      	bne.n	800309c <HAL_ADC_ConfigChannel+0x288>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	0e9b      	lsrs	r3, r3, #26
 8003082:	3301      	adds	r3, #1
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	2b09      	cmp	r3, #9
 800308a:	bf94      	ite	ls
 800308c:	2301      	movls	r3, #1
 800308e:	2300      	movhi	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	e016      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x2ae>
 8003094:	47ff0000 	.word	0x47ff0000
 8003098:	5c001000 	.word	0x5c001000
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a4:	fa93 f3a3 	rbit	r3, r3
 80030a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80030aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ac:	fab3 f383 	clz	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	3301      	adds	r3, #1
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	2b09      	cmp	r3, #9
 80030ba:	bf94      	ite	ls
 80030bc:	2301      	movls	r3, #1
 80030be:	2300      	movhi	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d064      	beq.n	8003190 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d107      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x2ce>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	0e9b      	lsrs	r3, r3, #26
 80030d8:	3301      	adds	r3, #1
 80030da:	069b      	lsls	r3, r3, #26
 80030dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030e0:	e00e      	b.n	8003100 <HAL_ADC_ConfigChannel+0x2ec>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f2:	fab3 f383 	clz	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	3301      	adds	r3, #1
 80030fa:	069b      	lsls	r3, r3, #26
 80030fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003108:	2b00      	cmp	r3, #0
 800310a:	d109      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x30c>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	0e9b      	lsrs	r3, r3, #26
 8003112:	3301      	adds	r3, #1
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	2101      	movs	r1, #1
 800311a:	fa01 f303 	lsl.w	r3, r1, r3
 800311e:	e010      	b.n	8003142 <HAL_ADC_ConfigChannel+0x32e>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800312e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003130:	fab3 f383 	clz	r3, r3
 8003134:	b2db      	uxtb	r3, r3
 8003136:	3301      	adds	r3, #1
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	2101      	movs	r1, #1
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	ea42 0103 	orr.w	r1, r2, r3
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10a      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x354>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	0e9b      	lsrs	r3, r3, #26
 8003158:	3301      	adds	r3, #1
 800315a:	f003 021f 	and.w	r2, r3, #31
 800315e:	4613      	mov	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	051b      	lsls	r3, r3, #20
 8003166:	e011      	b.n	800318c <HAL_ADC_ConfigChannel+0x378>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	fab3 f383 	clz	r3, r3
 800317c:	b2db      	uxtb	r3, r3
 800317e:	3301      	adds	r3, #1
 8003180:	f003 021f 	and.w	r2, r3, #31
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800318c:	430b      	orrs	r3, r1
 800318e:	e069      	b.n	8003264 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003198:	2b00      	cmp	r3, #0
 800319a:	d107      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x398>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	0e9b      	lsrs	r3, r3, #26
 80031a2:	3301      	adds	r3, #1
 80031a4:	069b      	lsls	r3, r3, #26
 80031a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031aa:	e00e      	b.n	80031ca <HAL_ADC_ConfigChannel+0x3b6>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	fa93 f3a3 	rbit	r3, r3
 80031b8:	61fb      	str	r3, [r7, #28]
  return result;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	fab3 f383 	clz	r3, r3
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	3301      	adds	r3, #1
 80031c4:	069b      	lsls	r3, r3, #26
 80031c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d109      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x3d6>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	0e9b      	lsrs	r3, r3, #26
 80031dc:	3301      	adds	r3, #1
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	2101      	movs	r1, #1
 80031e4:	fa01 f303 	lsl.w	r3, r1, r3
 80031e8:	e010      	b.n	800320c <HAL_ADC_ConfigChannel+0x3f8>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	fa93 f3a3 	rbit	r3, r3
 80031f6:	617b      	str	r3, [r7, #20]
  return result;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fab3 f383 	clz	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	3301      	adds	r3, #1
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	ea42 0103 	orr.w	r1, r2, r3
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10d      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x424>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	0e9b      	lsrs	r3, r3, #26
 8003222:	3301      	adds	r3, #1
 8003224:	f003 021f 	and.w	r2, r3, #31
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	3b1e      	subs	r3, #30
 8003230:	051b      	lsls	r3, r3, #20
 8003232:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003236:	e014      	b.n	8003262 <HAL_ADC_ConfigChannel+0x44e>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	fa93 f3a3 	rbit	r3, r3
 8003244:	60fb      	str	r3, [r7, #12]
  return result;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	3301      	adds	r3, #1
 8003250:	f003 021f 	and.w	r2, r3, #31
 8003254:	4613      	mov	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4413      	add	r3, r2
 800325a:	3b1e      	subs	r3, #30
 800325c:	051b      	lsls	r3, r3, #20
 800325e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003262:	430b      	orrs	r3, r1
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	6892      	ldr	r2, [r2, #8]
 8003268:	4619      	mov	r1, r3
 800326a:	f7ff fa46 	bl	80026fa <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	f280 80c4 	bge.w	8003400 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a65      	ldr	r2, [pc, #404]	; (8003414 <HAL_ADC_ConfigChannel+0x600>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d004      	beq.n	800328c <HAL_ADC_ConfigChannel+0x478>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a64      	ldr	r2, [pc, #400]	; (8003418 <HAL_ADC_ConfigChannel+0x604>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d101      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x47c>
 800328c:	4b63      	ldr	r3, [pc, #396]	; (800341c <HAL_ADC_ConfigChannel+0x608>)
 800328e:	e000      	b.n	8003292 <HAL_ADC_ConfigChannel+0x47e>
 8003290:	4b63      	ldr	r3, [pc, #396]	; (8003420 <HAL_ADC_ConfigChannel+0x60c>)
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff f986 	bl	80025a4 <LL_ADC_GetCommonPathInternalCh>
 8003298:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a5d      	ldr	r2, [pc, #372]	; (8003414 <HAL_ADC_ConfigChannel+0x600>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d004      	beq.n	80032ae <HAL_ADC_ConfigChannel+0x49a>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a5b      	ldr	r2, [pc, #364]	; (8003418 <HAL_ADC_ConfigChannel+0x604>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d10e      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x4b8>
 80032ae:	4859      	ldr	r0, [pc, #356]	; (8003414 <HAL_ADC_ConfigChannel+0x600>)
 80032b0:	f7ff fae0 	bl	8002874 <LL_ADC_IsEnabled>
 80032b4:	4604      	mov	r4, r0
 80032b6:	4858      	ldr	r0, [pc, #352]	; (8003418 <HAL_ADC_ConfigChannel+0x604>)
 80032b8:	f7ff fadc 	bl	8002874 <LL_ADC_IsEnabled>
 80032bc:	4603      	mov	r3, r0
 80032be:	4323      	orrs	r3, r4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bf0c      	ite	eq
 80032c4:	2301      	moveq	r3, #1
 80032c6:	2300      	movne	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	e008      	b.n	80032de <HAL_ADC_ConfigChannel+0x4ca>
 80032cc:	4855      	ldr	r0, [pc, #340]	; (8003424 <HAL_ADC_ConfigChannel+0x610>)
 80032ce:	f7ff fad1 	bl	8002874 <LL_ADC_IsEnabled>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	bf0c      	ite	eq
 80032d8:	2301      	moveq	r3, #1
 80032da:	2300      	movne	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d07b      	beq.n	80033da <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a50      	ldr	r2, [pc, #320]	; (8003428 <HAL_ADC_ConfigChannel+0x614>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d12e      	bne.n	800334a <HAL_ADC_ConfigChannel+0x536>
 80032ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d129      	bne.n	800334a <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a4a      	ldr	r2, [pc, #296]	; (8003424 <HAL_ADC_ConfigChannel+0x610>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d17f      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a43      	ldr	r2, [pc, #268]	; (8003414 <HAL_ADC_ConfigChannel+0x600>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d004      	beq.n	8003314 <HAL_ADC_ConfigChannel+0x500>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a42      	ldr	r2, [pc, #264]	; (8003418 <HAL_ADC_ConfigChannel+0x604>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d101      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x504>
 8003314:	4a41      	ldr	r2, [pc, #260]	; (800341c <HAL_ADC_ConfigChannel+0x608>)
 8003316:	e000      	b.n	800331a <HAL_ADC_ConfigChannel+0x506>
 8003318:	4a41      	ldr	r2, [pc, #260]	; (8003420 <HAL_ADC_ConfigChannel+0x60c>)
 800331a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800331c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003320:	4619      	mov	r1, r3
 8003322:	4610      	mov	r0, r2
 8003324:	f7ff f92b 	bl	800257e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003328:	4b40      	ldr	r3, [pc, #256]	; (800342c <HAL_ADC_ConfigChannel+0x618>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	099b      	lsrs	r3, r3, #6
 800332e:	4a40      	ldr	r2, [pc, #256]	; (8003430 <HAL_ADC_ConfigChannel+0x61c>)
 8003330:	fba2 2303 	umull	r2, r3, r2, r3
 8003334:	099b      	lsrs	r3, r3, #6
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800333a:	e002      	b.n	8003342 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	3b01      	subs	r3, #1
 8003340:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f9      	bne.n	800333c <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003348:	e05a      	b.n	8003400 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a39      	ldr	r2, [pc, #228]	; (8003434 <HAL_ADC_ConfigChannel+0x620>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d11e      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x57e>
 8003354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003356:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d119      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a30      	ldr	r2, [pc, #192]	; (8003424 <HAL_ADC_ConfigChannel+0x610>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d14b      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a29      	ldr	r2, [pc, #164]	; (8003414 <HAL_ADC_ConfigChannel+0x600>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d004      	beq.n	800337c <HAL_ADC_ConfigChannel+0x568>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a28      	ldr	r2, [pc, #160]	; (8003418 <HAL_ADC_ConfigChannel+0x604>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d101      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x56c>
 800337c:	4a27      	ldr	r2, [pc, #156]	; (800341c <HAL_ADC_ConfigChannel+0x608>)
 800337e:	e000      	b.n	8003382 <HAL_ADC_ConfigChannel+0x56e>
 8003380:	4a27      	ldr	r2, [pc, #156]	; (8003420 <HAL_ADC_ConfigChannel+0x60c>)
 8003382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003384:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f7ff f8f7 	bl	800257e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003390:	e036      	b.n	8003400 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a28      	ldr	r2, [pc, #160]	; (8003438 <HAL_ADC_ConfigChannel+0x624>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d131      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x5ec>
 800339c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800339e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d12c      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1e      	ldr	r2, [pc, #120]	; (8003424 <HAL_ADC_ConfigChannel+0x610>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d127      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a17      	ldr	r2, [pc, #92]	; (8003414 <HAL_ADC_ConfigChannel+0x600>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d004      	beq.n	80033c4 <HAL_ADC_ConfigChannel+0x5b0>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a16      	ldr	r2, [pc, #88]	; (8003418 <HAL_ADC_ConfigChannel+0x604>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d101      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x5b4>
 80033c4:	4a15      	ldr	r2, [pc, #84]	; (800341c <HAL_ADC_ConfigChannel+0x608>)
 80033c6:	e000      	b.n	80033ca <HAL_ADC_ConfigChannel+0x5b6>
 80033c8:	4a15      	ldr	r2, [pc, #84]	; (8003420 <HAL_ADC_ConfigChannel+0x60c>)
 80033ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033d0:	4619      	mov	r1, r3
 80033d2:	4610      	mov	r0, r2
 80033d4:	f7ff f8d3 	bl	800257e <LL_ADC_SetCommonPathInternalCh>
 80033d8:	e012      	b.n	8003400 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033de:	f043 0220 	orr.w	r2, r3, #32
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80033ec:	e008      	b.n	8003400 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	f043 0220 	orr.w	r2, r3, #32
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003408:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800340c:	4618      	mov	r0, r3
 800340e:	3764      	adds	r7, #100	; 0x64
 8003410:	46bd      	mov	sp, r7
 8003412:	bd90      	pop	{r4, r7, pc}
 8003414:	40022000 	.word	0x40022000
 8003418:	40022100 	.word	0x40022100
 800341c:	40022300 	.word	0x40022300
 8003420:	58026300 	.word	0x58026300
 8003424:	58026000 	.word	0x58026000
 8003428:	cb840000 	.word	0xcb840000
 800342c:	24000040 	.word	0x24000040
 8003430:	053e2d63 	.word	0x053e2d63
 8003434:	c7520000 	.word	0xc7520000
 8003438:	cfb80000 	.word	0xcfb80000

0800343c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fa13 	bl	8002874 <LL_ADC_IsEnabled>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d167      	bne.n	8003524 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	4b35      	ldr	r3, [pc, #212]	; (8003530 <ADC_Enable+0xf4>)
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00d      	beq.n	800347e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	f043 0210 	orr.w	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	f043 0201 	orr.w	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e053      	b.n	8003526 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff f9e2 	bl	800284c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003488:	f7ff f816 	bl	80024b8 <HAL_GetTick>
 800348c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a28      	ldr	r2, [pc, #160]	; (8003534 <ADC_Enable+0xf8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d004      	beq.n	80034a2 <ADC_Enable+0x66>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a26      	ldr	r2, [pc, #152]	; (8003538 <ADC_Enable+0xfc>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d101      	bne.n	80034a6 <ADC_Enable+0x6a>
 80034a2:	4b26      	ldr	r3, [pc, #152]	; (800353c <ADC_Enable+0x100>)
 80034a4:	e000      	b.n	80034a8 <ADC_Enable+0x6c>
 80034a6:	4b26      	ldr	r3, [pc, #152]	; (8003540 <ADC_Enable+0x104>)
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff f973 	bl	8002794 <LL_ADC_GetMultimode>
 80034ae:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a20      	ldr	r2, [pc, #128]	; (8003538 <ADC_Enable+0xfc>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d002      	beq.n	80034c0 <ADC_Enable+0x84>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	e000      	b.n	80034c2 <ADC_Enable+0x86>
 80034c0:	4b1c      	ldr	r3, [pc, #112]	; (8003534 <ADC_Enable+0xf8>)
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d025      	beq.n	8003516 <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d129      	bne.n	8003524 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034d0:	e021      	b.n	8003516 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff f9cc 	bl	8002874 <LL_ADC_IsEnabled>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff f9b0 	bl	800284c <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034ec:	f7fe ffe4 	bl	80024b8 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d90d      	bls.n	8003516 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fe:	f043 0210 	orr.w	r2, r3, #16
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350a:	f043 0201 	orr.w	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e007      	b.n	8003526 <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b01      	cmp	r3, #1
 8003522:	d1d6      	bne.n	80034d2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	8000003f 	.word	0x8000003f
 8003534:	40022000 	.word	0x40022000
 8003538:	40022100 	.word	0x40022100
 800353c:	40022300 	.word	0x40022300
 8003540:	58026300 	.word	0x58026300

08003544 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800355a:	2b00      	cmp	r3, #0
 800355c:	d14b      	bne.n	80035f6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003562:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d021      	beq.n	80035bc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff f86d 	bl	800265c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d032      	beq.n	80035ee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d12b      	bne.n	80035ee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d11f      	bne.n	80035ee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b2:	f043 0201 	orr.w	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	655a      	str	r2, [r3, #84]	; 0x54
 80035ba:	e018      	b.n	80035ee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d111      	bne.n	80035ee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d105      	bne.n	80035ee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e6:	f043 0201 	orr.w	r2, r3, #1
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7ff fbf2 	bl	8002dd8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035f4:	e00e      	b.n	8003614 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f7ff fbfc 	bl	8002e00 <HAL_ADC_ErrorCallback>
}
 8003608:	e004      	b.n	8003614 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	4798      	blx	r3
}
 8003614:	bf00      	nop
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003628:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f7ff fbde 	bl	8002dec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003630:	bf00      	nop
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003644:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	f043 0204 	orr.w	r2, r3, #4
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f7ff fbce 	bl	8002e00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a70      	ldr	r2, [pc, #448]	; (800383c <ADC_ConfigureBoostMode+0x1d0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d004      	beq.n	8003688 <ADC_ConfigureBoostMode+0x1c>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a6f      	ldr	r2, [pc, #444]	; (8003840 <ADC_ConfigureBoostMode+0x1d4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d109      	bne.n	800369c <ADC_ConfigureBoostMode+0x30>
 8003688:	4b6e      	ldr	r3, [pc, #440]	; (8003844 <ADC_ConfigureBoostMode+0x1d8>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf14      	ite	ne
 8003694:	2301      	movne	r3, #1
 8003696:	2300      	moveq	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e008      	b.n	80036ae <ADC_ConfigureBoostMode+0x42>
 800369c:	4b6a      	ldr	r3, [pc, #424]	; (8003848 <ADC_ConfigureBoostMode+0x1dc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf14      	ite	ne
 80036a8:	2301      	movne	r3, #1
 80036aa:	2300      	moveq	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d01a      	beq.n	80036e8 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80036b2:	f003 ff1d 	bl	80074f0 <HAL_RCC_GetHCLKFreq>
 80036b6:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036c0:	d006      	beq.n	80036d0 <ADC_ConfigureBoostMode+0x64>
 80036c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036c6:	d00b      	beq.n	80036e0 <ADC_ConfigureBoostMode+0x74>
 80036c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036cc:	d000      	beq.n	80036d0 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80036ce:	e05d      	b.n	800378c <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	60fb      	str	r3, [r7, #12]
        break;
 80036de:	e055      	b.n	800378c <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	089b      	lsrs	r3, r3, #2
 80036e4:	60fb      	str	r3, [r7, #12]
        break;
 80036e6:	e051      	b.n	800378c <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80036e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80036ec:	f004 fe3a 	bl	8008364 <HAL_RCCEx_GetPeriphCLKFreq>
 80036f0:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80036fa:	d02a      	beq.n	8003752 <ADC_ConfigureBoostMode+0xe6>
 80036fc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003700:	d813      	bhi.n	800372a <ADC_ConfigureBoostMode+0xbe>
 8003702:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003706:	d024      	beq.n	8003752 <ADC_ConfigureBoostMode+0xe6>
 8003708:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800370c:	d806      	bhi.n	800371c <ADC_ConfigureBoostMode+0xb0>
 800370e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003712:	d01e      	beq.n	8003752 <ADC_ConfigureBoostMode+0xe6>
 8003714:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003718:	d01b      	beq.n	8003752 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 800371a:	e037      	b.n	800378c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800371c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003720:	d017      	beq.n	8003752 <ADC_ConfigureBoostMode+0xe6>
 8003722:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003726:	d014      	beq.n	8003752 <ADC_ConfigureBoostMode+0xe6>
        break;
 8003728:	e030      	b.n	800378c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 800372a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800372e:	d021      	beq.n	8003774 <ADC_ConfigureBoostMode+0x108>
 8003730:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003734:	d806      	bhi.n	8003744 <ADC_ConfigureBoostMode+0xd8>
 8003736:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800373a:	d013      	beq.n	8003764 <ADC_ConfigureBoostMode+0xf8>
 800373c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003740:	d014      	beq.n	800376c <ADC_ConfigureBoostMode+0x100>
        break;
 8003742:	e023      	b.n	800378c <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8003744:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003748:	d018      	beq.n	800377c <ADC_ConfigureBoostMode+0x110>
 800374a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800374e:	d019      	beq.n	8003784 <ADC_ConfigureBoostMode+0x118>
        break;
 8003750:	e01c      	b.n	800378c <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	0c9b      	lsrs	r3, r3, #18
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003760:	60fb      	str	r3, [r7, #12]
        break;
 8003762:	e013      	b.n	800378c <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	091b      	lsrs	r3, r3, #4
 8003768:	60fb      	str	r3, [r7, #12]
      break;
 800376a:	e00f      	b.n	800378c <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	60fb      	str	r3, [r7, #12]
        break;
 8003772:	e00b      	b.n	800378c <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	099b      	lsrs	r3, r3, #6
 8003778:	60fb      	str	r3, [r7, #12]
        break;
 800377a:	e007      	b.n	800378c <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	09db      	lsrs	r3, r3, #7
 8003780:	60fb      	str	r3, [r7, #12]
        break;
 8003782:	e003      	b.n	800378c <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	0a1b      	lsrs	r3, r3, #8
 8003788:	60fb      	str	r3, [r7, #12]
        break;
 800378a:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800378c:	f7fe fec2 	bl	8002514 <HAL_GetREVID>
 8003790:	4602      	mov	r2, r0
 8003792:	f241 0303 	movw	r3, #4099	; 0x1003
 8003796:	429a      	cmp	r2, r3
 8003798:	d815      	bhi.n	80037c6 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4a2b      	ldr	r2, [pc, #172]	; (800384c <ADC_ConfigureBoostMode+0x1e0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d908      	bls.n	80037b4 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b0:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80037b2:	e03e      	b.n	8003832 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037c2:	609a      	str	r2, [r3, #8]
}
 80037c4:	e035      	b.n	8003832 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a20      	ldr	r2, [pc, #128]	; (8003850 <ADC_ConfigureBoostMode+0x1e4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d808      	bhi.n	80037e6 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80037e2:	609a      	str	r2, [r3, #8]
}
 80037e4:	e025      	b.n	8003832 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4a1a      	ldr	r2, [pc, #104]	; (8003854 <ADC_ConfigureBoostMode+0x1e8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d80a      	bhi.n	8003804 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003800:	609a      	str	r2, [r3, #8]
}
 8003802:	e016      	b.n	8003832 <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4a14      	ldr	r2, [pc, #80]	; (8003858 <ADC_ConfigureBoostMode+0x1ec>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d80a      	bhi.n	8003822 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381e:	609a      	str	r2, [r3, #8]
}
 8003820:	e007      	b.n	8003832 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003830:	609a      	str	r2, [r3, #8]
}
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40022000 	.word	0x40022000
 8003840:	40022100 	.word	0x40022100
 8003844:	40022300 	.word	0x40022300
 8003848:	58026300 	.word	0x58026300
 800384c:	01312d00 	.word	0x01312d00
 8003850:	005f5e10 	.word	0x005f5e10
 8003854:	00bebc20 	.word	0x00bebc20
 8003858:	017d7840 	.word	0x017d7840

0800385c <LL_ADC_IsEnabled>:
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <LL_ADC_IsEnabled+0x18>
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <LL_ADC_IsEnabled+0x1a>
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <LL_ADC_REG_IsConversionOngoing>:
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b04      	cmp	r3, #4
 8003894:	d101      	bne.n	800389a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80038a8:	b590      	push	{r4, r7, lr}
 80038aa:	b09f      	sub	sp, #124	; 0x7c
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e0ba      	b.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x194>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a5c      	ldr	r2, [pc, #368]	; (8003a44 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d102      	bne.n	80038de <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80038d8:	4b5b      	ldr	r3, [pc, #364]	; (8003a48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	e001      	b.n	80038e2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80038de:	2300      	movs	r3, #0
 80038e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10b      	bne.n	8003900 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ec:	f043 0220 	orr.w	r2, r3, #32
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e09d      	b.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff ffbd 	bl	8003882 <LL_ADC_REG_IsConversionOngoing>
 8003908:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff ffb7 	bl	8003882 <LL_ADC_REG_IsConversionOngoing>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d17f      	bne.n	8003a1a <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800391a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800391c:	2b00      	cmp	r3, #0
 800391e:	d17c      	bne.n	8003a1a <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a47      	ldr	r2, [pc, #284]	; (8003a44 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a46      	ldr	r2, [pc, #280]	; (8003a48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d101      	bne.n	8003938 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8003934:	4b45      	ldr	r3, [pc, #276]	; (8003a4c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003936:	e000      	b.n	800393a <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003938:	4b45      	ldr	r3, [pc, #276]	; (8003a50 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800393a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d039      	beq.n	80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	431a      	orrs	r2, r3
 8003952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003954:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a3a      	ldr	r2, [pc, #232]	; (8003a44 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a38      	ldr	r2, [pc, #224]	; (8003a48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d10e      	bne.n	8003988 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800396a:	4836      	ldr	r0, [pc, #216]	; (8003a44 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800396c:	f7ff ff76 	bl	800385c <LL_ADC_IsEnabled>
 8003970:	4604      	mov	r4, r0
 8003972:	4835      	ldr	r0, [pc, #212]	; (8003a48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003974:	f7ff ff72 	bl	800385c <LL_ADC_IsEnabled>
 8003978:	4603      	mov	r3, r0
 800397a:	4323      	orrs	r3, r4
 800397c:	2b00      	cmp	r3, #0
 800397e:	bf0c      	ite	eq
 8003980:	2301      	moveq	r3, #1
 8003982:	2300      	movne	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	e008      	b.n	800399a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003988:	4832      	ldr	r0, [pc, #200]	; (8003a54 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800398a:	f7ff ff67 	bl	800385c <LL_ADC_IsEnabled>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	bf0c      	ite	eq
 8003994:	2301      	moveq	r3, #1
 8003996:	2300      	movne	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d047      	beq.n	8003a2e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800399e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	4b2d      	ldr	r3, [pc, #180]	; (8003a58 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	6811      	ldr	r1, [r2, #0]
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	6892      	ldr	r2, [r2, #8]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	431a      	orrs	r2, r3
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039b6:	e03a      	b.n	8003a2e <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80039b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a1e      	ldr	r2, [pc, #120]	; (8003a44 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d004      	beq.n	80039d8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d10e      	bne.n	80039f6 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 80039d8:	481a      	ldr	r0, [pc, #104]	; (8003a44 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80039da:	f7ff ff3f 	bl	800385c <LL_ADC_IsEnabled>
 80039de:	4604      	mov	r4, r0
 80039e0:	4819      	ldr	r0, [pc, #100]	; (8003a48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80039e2:	f7ff ff3b 	bl	800385c <LL_ADC_IsEnabled>
 80039e6:	4603      	mov	r3, r0
 80039e8:	4323      	orrs	r3, r4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bf0c      	ite	eq
 80039ee:	2301      	moveq	r3, #1
 80039f0:	2300      	movne	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	e008      	b.n	8003a08 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 80039f6:	4817      	ldr	r0, [pc, #92]	; (8003a54 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80039f8:	f7ff ff30 	bl	800385c <LL_ADC_IsEnabled>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bf0c      	ite	eq
 8003a02:	2301      	moveq	r3, #1
 8003a04:	2300      	movne	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d010      	beq.n	8003a2e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a16:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a18:	e009      	b.n	8003a2e <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1e:	f043 0220 	orr.w	r2, r3, #32
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003a2c:	e000      	b.n	8003a30 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a2e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a38:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	377c      	adds	r7, #124	; 0x7c
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd90      	pop	{r4, r7, pc}
 8003a44:	40022000 	.word	0x40022000
 8003a48:	40022100 	.word	0x40022100
 8003a4c:	40022300 	.word	0x40022300
 8003a50:	58026300 	.word	0x58026300
 8003a54:	58026000 	.word	0x58026000
 8003a58:	fffff0e0 	.word	0xfffff0e0

08003a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <__NVIC_SetPriorityGrouping+0x40>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a8a:	4a04      	ldr	r2, [pc, #16]	; (8003a9c <__NVIC_SetPriorityGrouping+0x40>)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	60d3      	str	r3, [r2, #12]
}
 8003a90:	bf00      	nop
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	e000ed00 	.word	0xe000ed00
 8003aa0:	05fa0000 	.word	0x05fa0000

08003aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <__NVIC_GetPriorityGrouping+0x18>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	f003 0307 	and.w	r3, r3, #7
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	db0b      	blt.n	8003aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ad2:	88fb      	ldrh	r3, [r7, #6]
 8003ad4:	f003 021f 	and.w	r2, r3, #31
 8003ad8:	4907      	ldr	r1, [pc, #28]	; (8003af8 <__NVIC_EnableIRQ+0x38>)
 8003ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	e000e100 	.word	0xe000e100

08003afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	6039      	str	r1, [r7, #0]
 8003b06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	db0a      	blt.n	8003b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	490c      	ldr	r1, [pc, #48]	; (8003b48 <__NVIC_SetPriority+0x4c>)
 8003b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b1a:	0112      	lsls	r2, r2, #4
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	440b      	add	r3, r1
 8003b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b24:	e00a      	b.n	8003b3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	4908      	ldr	r1, [pc, #32]	; (8003b4c <__NVIC_SetPriority+0x50>)
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	3b04      	subs	r3, #4
 8003b34:	0112      	lsls	r2, r2, #4
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	440b      	add	r3, r1
 8003b3a:	761a      	strb	r2, [r3, #24]
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	e000e100 	.word	0xe000e100
 8003b4c:	e000ed00 	.word	0xe000ed00

08003b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b089      	sub	sp, #36	; 0x24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f1c3 0307 	rsb	r3, r3, #7
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	bf28      	it	cs
 8003b6e:	2304      	movcs	r3, #4
 8003b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	3304      	adds	r3, #4
 8003b76:	2b06      	cmp	r3, #6
 8003b78:	d902      	bls.n	8003b80 <NVIC_EncodePriority+0x30>
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3b03      	subs	r3, #3
 8003b7e:	e000      	b.n	8003b82 <NVIC_EncodePriority+0x32>
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b84:	f04f 32ff 	mov.w	r2, #4294967295
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	43da      	mvns	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	401a      	ands	r2, r3
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b98:	f04f 31ff 	mov.w	r1, #4294967295
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba2:	43d9      	mvns	r1, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba8:	4313      	orrs	r3, r2
         );
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3724      	adds	r7, #36	; 0x24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bc8:	d301      	bcc.n	8003bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e00f      	b.n	8003bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bce:	4a0a      	ldr	r2, [pc, #40]	; (8003bf8 <SysTick_Config+0x40>)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bd6:	210f      	movs	r1, #15
 8003bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bdc:	f7ff ff8e 	bl	8003afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <SysTick_Config+0x40>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003be6:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <SysTick_Config+0x40>)
 8003be8:	2207      	movs	r2, #7
 8003bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	e000e010 	.word	0xe000e010

08003bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff ff29 	bl	8003a5c <__NVIC_SetPriorityGrouping>
}
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b086      	sub	sp, #24
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	4603      	mov	r3, r0
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c20:	f7ff ff40 	bl	8003aa4 <__NVIC_GetPriorityGrouping>
 8003c24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	6978      	ldr	r0, [r7, #20]
 8003c2c:	f7ff ff90 	bl	8003b50 <NVIC_EncodePriority>
 8003c30:	4602      	mov	r2, r0
 8003c32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c36:	4611      	mov	r1, r2
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff ff5f 	bl	8003afc <__NVIC_SetPriority>
}
 8003c3e:	bf00      	nop
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff ff33 	bl	8003ac0 <__NVIC_EnableIRQ>
}
 8003c5a:	bf00      	nop
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff ffa4 	bl	8003bb8 <SysTick_Config>
 8003c70:	4603      	mov	r3, r0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003c84:	f7fe fc18 	bl	80024b8 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e316      	b.n	80042c2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a66      	ldr	r2, [pc, #408]	; (8003e34 <HAL_DMA_Init+0x1b8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d04a      	beq.n	8003d34 <HAL_DMA_Init+0xb8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a65      	ldr	r2, [pc, #404]	; (8003e38 <HAL_DMA_Init+0x1bc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d045      	beq.n	8003d34 <HAL_DMA_Init+0xb8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a63      	ldr	r2, [pc, #396]	; (8003e3c <HAL_DMA_Init+0x1c0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d040      	beq.n	8003d34 <HAL_DMA_Init+0xb8>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a62      	ldr	r2, [pc, #392]	; (8003e40 <HAL_DMA_Init+0x1c4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d03b      	beq.n	8003d34 <HAL_DMA_Init+0xb8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a60      	ldr	r2, [pc, #384]	; (8003e44 <HAL_DMA_Init+0x1c8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d036      	beq.n	8003d34 <HAL_DMA_Init+0xb8>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a5f      	ldr	r2, [pc, #380]	; (8003e48 <HAL_DMA_Init+0x1cc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d031      	beq.n	8003d34 <HAL_DMA_Init+0xb8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a5d      	ldr	r2, [pc, #372]	; (8003e4c <HAL_DMA_Init+0x1d0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d02c      	beq.n	8003d34 <HAL_DMA_Init+0xb8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a5c      	ldr	r2, [pc, #368]	; (8003e50 <HAL_DMA_Init+0x1d4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d027      	beq.n	8003d34 <HAL_DMA_Init+0xb8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a5a      	ldr	r2, [pc, #360]	; (8003e54 <HAL_DMA_Init+0x1d8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d022      	beq.n	8003d34 <HAL_DMA_Init+0xb8>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a59      	ldr	r2, [pc, #356]	; (8003e58 <HAL_DMA_Init+0x1dc>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d01d      	beq.n	8003d34 <HAL_DMA_Init+0xb8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a57      	ldr	r2, [pc, #348]	; (8003e5c <HAL_DMA_Init+0x1e0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d018      	beq.n	8003d34 <HAL_DMA_Init+0xb8>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a56      	ldr	r2, [pc, #344]	; (8003e60 <HAL_DMA_Init+0x1e4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d013      	beq.n	8003d34 <HAL_DMA_Init+0xb8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a54      	ldr	r2, [pc, #336]	; (8003e64 <HAL_DMA_Init+0x1e8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00e      	beq.n	8003d34 <HAL_DMA_Init+0xb8>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a53      	ldr	r2, [pc, #332]	; (8003e68 <HAL_DMA_Init+0x1ec>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d009      	beq.n	8003d34 <HAL_DMA_Init+0xb8>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a51      	ldr	r2, [pc, #324]	; (8003e6c <HAL_DMA_Init+0x1f0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_DMA_Init+0xb8>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a50      	ldr	r2, [pc, #320]	; (8003e70 <HAL_DMA_Init+0x1f4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d101      	bne.n	8003d38 <HAL_DMA_Init+0xbc>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <HAL_DMA_Init+0xbe>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 813b 	beq.w	8003fb6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a37      	ldr	r2, [pc, #220]	; (8003e34 <HAL_DMA_Init+0x1b8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d04a      	beq.n	8003df0 <HAL_DMA_Init+0x174>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a36      	ldr	r2, [pc, #216]	; (8003e38 <HAL_DMA_Init+0x1bc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d045      	beq.n	8003df0 <HAL_DMA_Init+0x174>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a34      	ldr	r2, [pc, #208]	; (8003e3c <HAL_DMA_Init+0x1c0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d040      	beq.n	8003df0 <HAL_DMA_Init+0x174>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a33      	ldr	r2, [pc, #204]	; (8003e40 <HAL_DMA_Init+0x1c4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d03b      	beq.n	8003df0 <HAL_DMA_Init+0x174>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a31      	ldr	r2, [pc, #196]	; (8003e44 <HAL_DMA_Init+0x1c8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d036      	beq.n	8003df0 <HAL_DMA_Init+0x174>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a30      	ldr	r2, [pc, #192]	; (8003e48 <HAL_DMA_Init+0x1cc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d031      	beq.n	8003df0 <HAL_DMA_Init+0x174>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a2e      	ldr	r2, [pc, #184]	; (8003e4c <HAL_DMA_Init+0x1d0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d02c      	beq.n	8003df0 <HAL_DMA_Init+0x174>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a2d      	ldr	r2, [pc, #180]	; (8003e50 <HAL_DMA_Init+0x1d4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d027      	beq.n	8003df0 <HAL_DMA_Init+0x174>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a2b      	ldr	r2, [pc, #172]	; (8003e54 <HAL_DMA_Init+0x1d8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d022      	beq.n	8003df0 <HAL_DMA_Init+0x174>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a2a      	ldr	r2, [pc, #168]	; (8003e58 <HAL_DMA_Init+0x1dc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d01d      	beq.n	8003df0 <HAL_DMA_Init+0x174>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a28      	ldr	r2, [pc, #160]	; (8003e5c <HAL_DMA_Init+0x1e0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d018      	beq.n	8003df0 <HAL_DMA_Init+0x174>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a27      	ldr	r2, [pc, #156]	; (8003e60 <HAL_DMA_Init+0x1e4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d013      	beq.n	8003df0 <HAL_DMA_Init+0x174>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a25      	ldr	r2, [pc, #148]	; (8003e64 <HAL_DMA_Init+0x1e8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00e      	beq.n	8003df0 <HAL_DMA_Init+0x174>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a24      	ldr	r2, [pc, #144]	; (8003e68 <HAL_DMA_Init+0x1ec>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d009      	beq.n	8003df0 <HAL_DMA_Init+0x174>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a22      	ldr	r2, [pc, #136]	; (8003e6c <HAL_DMA_Init+0x1f0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d004      	beq.n	8003df0 <HAL_DMA_Init+0x174>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a21      	ldr	r2, [pc, #132]	; (8003e70 <HAL_DMA_Init+0x1f4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d108      	bne.n	8003e02 <HAL_DMA_Init+0x186>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0201 	bic.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	e007      	b.n	8003e12 <HAL_DMA_Init+0x196>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0201 	bic.w	r2, r2, #1
 8003e10:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e12:	e02f      	b.n	8003e74 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e14:	f7fe fb50 	bl	80024b8 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b05      	cmp	r3, #5
 8003e20:	d928      	bls.n	8003e74 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2220      	movs	r2, #32
 8003e26:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2203      	movs	r2, #3
 8003e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e246      	b.n	80042c2 <HAL_DMA_Init+0x646>
 8003e34:	40020010 	.word	0x40020010
 8003e38:	40020028 	.word	0x40020028
 8003e3c:	40020040 	.word	0x40020040
 8003e40:	40020058 	.word	0x40020058
 8003e44:	40020070 	.word	0x40020070
 8003e48:	40020088 	.word	0x40020088
 8003e4c:	400200a0 	.word	0x400200a0
 8003e50:	400200b8 	.word	0x400200b8
 8003e54:	40020410 	.word	0x40020410
 8003e58:	40020428 	.word	0x40020428
 8003e5c:	40020440 	.word	0x40020440
 8003e60:	40020458 	.word	0x40020458
 8003e64:	40020470 	.word	0x40020470
 8003e68:	40020488 	.word	0x40020488
 8003e6c:	400204a0 	.word	0x400204a0
 8003e70:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1c8      	bne.n	8003e14 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4b83      	ldr	r3, [pc, #524]	; (800409c <HAL_DMA_Init+0x420>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003e9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ea6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eb2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d107      	bne.n	8003ed8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003ed8:	4b71      	ldr	r3, [pc, #452]	; (80040a0 <HAL_DMA_Init+0x424>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4b71      	ldr	r3, [pc, #452]	; (80040a4 <HAL_DMA_Init+0x428>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee4:	d328      	bcc.n	8003f38 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b28      	cmp	r3, #40	; 0x28
 8003eec:	d903      	bls.n	8003ef6 <HAL_DMA_Init+0x27a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ef4:	d917      	bls.n	8003f26 <HAL_DMA_Init+0x2aa>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b3e      	cmp	r3, #62	; 0x3e
 8003efc:	d903      	bls.n	8003f06 <HAL_DMA_Init+0x28a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b42      	cmp	r3, #66	; 0x42
 8003f04:	d90f      	bls.n	8003f26 <HAL_DMA_Init+0x2aa>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b46      	cmp	r3, #70	; 0x46
 8003f0c:	d903      	bls.n	8003f16 <HAL_DMA_Init+0x29a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b48      	cmp	r3, #72	; 0x48
 8003f14:	d907      	bls.n	8003f26 <HAL_DMA_Init+0x2aa>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b4e      	cmp	r3, #78	; 0x4e
 8003f1c:	d905      	bls.n	8003f2a <HAL_DMA_Init+0x2ae>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b52      	cmp	r3, #82	; 0x52
 8003f24:	d801      	bhi.n	8003f2a <HAL_DMA_Init+0x2ae>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <HAL_DMA_Init+0x2b0>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f36:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f023 0307 	bic.w	r3, r3, #7
 8003f4e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d117      	bne.n	8003f92 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00e      	beq.n	8003f92 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f002 f813 	bl	8005fa0 <DMA_CheckFifoParam>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2240      	movs	r2, #64	; 0x40
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e197      	b.n	80042c2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f001 ff4e 	bl	8005e3c <DMA_CalcBaseAndBitshift>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	223f      	movs	r2, #63	; 0x3f
 8003fae:	409a      	lsls	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	e0cd      	b.n	8004152 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a3b      	ldr	r2, [pc, #236]	; (80040a8 <HAL_DMA_Init+0x42c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d022      	beq.n	8004006 <HAL_DMA_Init+0x38a>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a39      	ldr	r2, [pc, #228]	; (80040ac <HAL_DMA_Init+0x430>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d01d      	beq.n	8004006 <HAL_DMA_Init+0x38a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a38      	ldr	r2, [pc, #224]	; (80040b0 <HAL_DMA_Init+0x434>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d018      	beq.n	8004006 <HAL_DMA_Init+0x38a>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a36      	ldr	r2, [pc, #216]	; (80040b4 <HAL_DMA_Init+0x438>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d013      	beq.n	8004006 <HAL_DMA_Init+0x38a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a35      	ldr	r2, [pc, #212]	; (80040b8 <HAL_DMA_Init+0x43c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00e      	beq.n	8004006 <HAL_DMA_Init+0x38a>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a33      	ldr	r2, [pc, #204]	; (80040bc <HAL_DMA_Init+0x440>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d009      	beq.n	8004006 <HAL_DMA_Init+0x38a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a32      	ldr	r2, [pc, #200]	; (80040c0 <HAL_DMA_Init+0x444>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d004      	beq.n	8004006 <HAL_DMA_Init+0x38a>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a30      	ldr	r2, [pc, #192]	; (80040c4 <HAL_DMA_Init+0x448>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d101      	bne.n	800400a <HAL_DMA_Init+0x38e>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <HAL_DMA_Init+0x390>
 800400a:	2300      	movs	r3, #0
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8097 	beq.w	8004140 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a24      	ldr	r2, [pc, #144]	; (80040a8 <HAL_DMA_Init+0x42c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d021      	beq.n	8004060 <HAL_DMA_Init+0x3e4>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a22      	ldr	r2, [pc, #136]	; (80040ac <HAL_DMA_Init+0x430>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01c      	beq.n	8004060 <HAL_DMA_Init+0x3e4>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a21      	ldr	r2, [pc, #132]	; (80040b0 <HAL_DMA_Init+0x434>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d017      	beq.n	8004060 <HAL_DMA_Init+0x3e4>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a1f      	ldr	r2, [pc, #124]	; (80040b4 <HAL_DMA_Init+0x438>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d012      	beq.n	8004060 <HAL_DMA_Init+0x3e4>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a1e      	ldr	r2, [pc, #120]	; (80040b8 <HAL_DMA_Init+0x43c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00d      	beq.n	8004060 <HAL_DMA_Init+0x3e4>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a1c      	ldr	r2, [pc, #112]	; (80040bc <HAL_DMA_Init+0x440>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d008      	beq.n	8004060 <HAL_DMA_Init+0x3e4>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a1b      	ldr	r2, [pc, #108]	; (80040c0 <HAL_DMA_Init+0x444>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <HAL_DMA_Init+0x3e4>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a19      	ldr	r2, [pc, #100]	; (80040c4 <HAL_DMA_Init+0x448>)
 800405e:	4293      	cmp	r3, r2
 8004060:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2202      	movs	r2, #2
 800406e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <HAL_DMA_Init+0x44c>)
 800407e:	4013      	ands	r3, r2
 8004080:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b40      	cmp	r3, #64	; 0x40
 8004088:	d020      	beq.n	80040cc <HAL_DMA_Init+0x450>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b80      	cmp	r3, #128	; 0x80
 8004090:	d102      	bne.n	8004098 <HAL_DMA_Init+0x41c>
 8004092:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004096:	e01a      	b.n	80040ce <HAL_DMA_Init+0x452>
 8004098:	2300      	movs	r3, #0
 800409a:	e018      	b.n	80040ce <HAL_DMA_Init+0x452>
 800409c:	fe10803f 	.word	0xfe10803f
 80040a0:	5c001000 	.word	0x5c001000
 80040a4:	ffff0000 	.word	0xffff0000
 80040a8:	58025408 	.word	0x58025408
 80040ac:	5802541c 	.word	0x5802541c
 80040b0:	58025430 	.word	0x58025430
 80040b4:	58025444 	.word	0x58025444
 80040b8:	58025458 	.word	0x58025458
 80040bc:	5802546c 	.word	0x5802546c
 80040c0:	58025480 	.word	0x58025480
 80040c4:	58025494 	.word	0x58025494
 80040c8:	fffe000f 	.word	0xfffe000f
 80040cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	68d2      	ldr	r2, [r2, #12]
 80040d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80040dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80040e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80040ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80040f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80040fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	4b6e      	ldr	r3, [pc, #440]	; (80042cc <HAL_DMA_Init+0x650>)
 8004114:	4413      	add	r3, r2
 8004116:	4a6e      	ldr	r2, [pc, #440]	; (80042d0 <HAL_DMA_Init+0x654>)
 8004118:	fba2 2303 	umull	r2, r3, r2, r3
 800411c:	091b      	lsrs	r3, r3, #4
 800411e:	009a      	lsls	r2, r3, #2
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f001 fe89 	bl	8005e3c <DMA_CalcBaseAndBitshift>
 800412a:	4603      	mov	r3, r0
 800412c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004132:	f003 031f 	and.w	r3, r3, #31
 8004136:	2201      	movs	r2, #1
 8004138:	409a      	lsls	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	e008      	b.n	8004152 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2240      	movs	r2, #64	; 0x40
 8004144:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2203      	movs	r2, #3
 800414a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e0b7      	b.n	80042c2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a5f      	ldr	r2, [pc, #380]	; (80042d4 <HAL_DMA_Init+0x658>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d072      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a5d      	ldr	r2, [pc, #372]	; (80042d8 <HAL_DMA_Init+0x65c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d06d      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a5c      	ldr	r2, [pc, #368]	; (80042dc <HAL_DMA_Init+0x660>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d068      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a5a      	ldr	r2, [pc, #360]	; (80042e0 <HAL_DMA_Init+0x664>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d063      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a59      	ldr	r2, [pc, #356]	; (80042e4 <HAL_DMA_Init+0x668>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d05e      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a57      	ldr	r2, [pc, #348]	; (80042e8 <HAL_DMA_Init+0x66c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d059      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a56      	ldr	r2, [pc, #344]	; (80042ec <HAL_DMA_Init+0x670>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d054      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a54      	ldr	r2, [pc, #336]	; (80042f0 <HAL_DMA_Init+0x674>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d04f      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a53      	ldr	r2, [pc, #332]	; (80042f4 <HAL_DMA_Init+0x678>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d04a      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a51      	ldr	r2, [pc, #324]	; (80042f8 <HAL_DMA_Init+0x67c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d045      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a50      	ldr	r2, [pc, #320]	; (80042fc <HAL_DMA_Init+0x680>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d040      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a4e      	ldr	r2, [pc, #312]	; (8004300 <HAL_DMA_Init+0x684>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d03b      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a4d      	ldr	r2, [pc, #308]	; (8004304 <HAL_DMA_Init+0x688>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d036      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a4b      	ldr	r2, [pc, #300]	; (8004308 <HAL_DMA_Init+0x68c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d031      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a4a      	ldr	r2, [pc, #296]	; (800430c <HAL_DMA_Init+0x690>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d02c      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a48      	ldr	r2, [pc, #288]	; (8004310 <HAL_DMA_Init+0x694>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d027      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a47      	ldr	r2, [pc, #284]	; (8004314 <HAL_DMA_Init+0x698>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d022      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a45      	ldr	r2, [pc, #276]	; (8004318 <HAL_DMA_Init+0x69c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d01d      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a44      	ldr	r2, [pc, #272]	; (800431c <HAL_DMA_Init+0x6a0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d018      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a42      	ldr	r2, [pc, #264]	; (8004320 <HAL_DMA_Init+0x6a4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d013      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a41      	ldr	r2, [pc, #260]	; (8004324 <HAL_DMA_Init+0x6a8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00e      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a3f      	ldr	r2, [pc, #252]	; (8004328 <HAL_DMA_Init+0x6ac>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d009      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a3e      	ldr	r2, [pc, #248]	; (800432c <HAL_DMA_Init+0x6b0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d004      	beq.n	8004242 <HAL_DMA_Init+0x5c6>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a3c      	ldr	r2, [pc, #240]	; (8004330 <HAL_DMA_Init+0x6b4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d101      	bne.n	8004246 <HAL_DMA_Init+0x5ca>
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <HAL_DMA_Init+0x5cc>
 8004246:	2300      	movs	r3, #0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d032      	beq.n	80042b2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f001 ff23 	bl	8006098 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b80      	cmp	r3, #128	; 0x80
 8004258:	d102      	bne.n	8004260 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004274:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d010      	beq.n	80042a0 <HAL_DMA_Init+0x624>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b08      	cmp	r3, #8
 8004284:	d80c      	bhi.n	80042a0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f001 ffa0 	bl	80061cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800429c:	605a      	str	r2, [r3, #4]
 800429e:	e008      	b.n	80042b2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	a7fdabf8 	.word	0xa7fdabf8
 80042d0:	cccccccd 	.word	0xcccccccd
 80042d4:	40020010 	.word	0x40020010
 80042d8:	40020028 	.word	0x40020028
 80042dc:	40020040 	.word	0x40020040
 80042e0:	40020058 	.word	0x40020058
 80042e4:	40020070 	.word	0x40020070
 80042e8:	40020088 	.word	0x40020088
 80042ec:	400200a0 	.word	0x400200a0
 80042f0:	400200b8 	.word	0x400200b8
 80042f4:	40020410 	.word	0x40020410
 80042f8:	40020428 	.word	0x40020428
 80042fc:	40020440 	.word	0x40020440
 8004300:	40020458 	.word	0x40020458
 8004304:	40020470 	.word	0x40020470
 8004308:	40020488 	.word	0x40020488
 800430c:	400204a0 	.word	0x400204a0
 8004310:	400204b8 	.word	0x400204b8
 8004314:	58025408 	.word	0x58025408
 8004318:	5802541c 	.word	0x5802541c
 800431c:	58025430 	.word	0x58025430
 8004320:	58025444 	.word	0x58025444
 8004324:	58025458 	.word	0x58025458
 8004328:	5802546c 	.word	0x5802546c
 800432c:	58025480 	.word	0x58025480
 8004330:	58025494 	.word	0x58025494

08004334 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e226      	b.n	800479e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_DMA_Start_IT+0x2a>
 800435a:	2302      	movs	r3, #2
 800435c:	e21f      	b.n	800479e <HAL_DMA_Start_IT+0x46a>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b01      	cmp	r3, #1
 8004370:	f040 820a 	bne.w	8004788 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a68      	ldr	r2, [pc, #416]	; (8004528 <HAL_DMA_Start_IT+0x1f4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d04a      	beq.n	8004422 <HAL_DMA_Start_IT+0xee>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a66      	ldr	r2, [pc, #408]	; (800452c <HAL_DMA_Start_IT+0x1f8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d045      	beq.n	8004422 <HAL_DMA_Start_IT+0xee>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a65      	ldr	r2, [pc, #404]	; (8004530 <HAL_DMA_Start_IT+0x1fc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d040      	beq.n	8004422 <HAL_DMA_Start_IT+0xee>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a63      	ldr	r2, [pc, #396]	; (8004534 <HAL_DMA_Start_IT+0x200>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d03b      	beq.n	8004422 <HAL_DMA_Start_IT+0xee>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a62      	ldr	r2, [pc, #392]	; (8004538 <HAL_DMA_Start_IT+0x204>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d036      	beq.n	8004422 <HAL_DMA_Start_IT+0xee>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a60      	ldr	r2, [pc, #384]	; (800453c <HAL_DMA_Start_IT+0x208>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d031      	beq.n	8004422 <HAL_DMA_Start_IT+0xee>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a5f      	ldr	r2, [pc, #380]	; (8004540 <HAL_DMA_Start_IT+0x20c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d02c      	beq.n	8004422 <HAL_DMA_Start_IT+0xee>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a5d      	ldr	r2, [pc, #372]	; (8004544 <HAL_DMA_Start_IT+0x210>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d027      	beq.n	8004422 <HAL_DMA_Start_IT+0xee>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a5c      	ldr	r2, [pc, #368]	; (8004548 <HAL_DMA_Start_IT+0x214>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d022      	beq.n	8004422 <HAL_DMA_Start_IT+0xee>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a5a      	ldr	r2, [pc, #360]	; (800454c <HAL_DMA_Start_IT+0x218>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01d      	beq.n	8004422 <HAL_DMA_Start_IT+0xee>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a59      	ldr	r2, [pc, #356]	; (8004550 <HAL_DMA_Start_IT+0x21c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d018      	beq.n	8004422 <HAL_DMA_Start_IT+0xee>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a57      	ldr	r2, [pc, #348]	; (8004554 <HAL_DMA_Start_IT+0x220>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d013      	beq.n	8004422 <HAL_DMA_Start_IT+0xee>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a56      	ldr	r2, [pc, #344]	; (8004558 <HAL_DMA_Start_IT+0x224>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00e      	beq.n	8004422 <HAL_DMA_Start_IT+0xee>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a54      	ldr	r2, [pc, #336]	; (800455c <HAL_DMA_Start_IT+0x228>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d009      	beq.n	8004422 <HAL_DMA_Start_IT+0xee>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a53      	ldr	r2, [pc, #332]	; (8004560 <HAL_DMA_Start_IT+0x22c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d004      	beq.n	8004422 <HAL_DMA_Start_IT+0xee>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a51      	ldr	r2, [pc, #324]	; (8004564 <HAL_DMA_Start_IT+0x230>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d108      	bne.n	8004434 <HAL_DMA_Start_IT+0x100>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0201 	bic.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	e007      	b.n	8004444 <HAL_DMA_Start_IT+0x110>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0201 	bic.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f001 fb4a 	bl	8005ae4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a34      	ldr	r2, [pc, #208]	; (8004528 <HAL_DMA_Start_IT+0x1f4>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d04a      	beq.n	80044f0 <HAL_DMA_Start_IT+0x1bc>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a33      	ldr	r2, [pc, #204]	; (800452c <HAL_DMA_Start_IT+0x1f8>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d045      	beq.n	80044f0 <HAL_DMA_Start_IT+0x1bc>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a31      	ldr	r2, [pc, #196]	; (8004530 <HAL_DMA_Start_IT+0x1fc>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d040      	beq.n	80044f0 <HAL_DMA_Start_IT+0x1bc>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a30      	ldr	r2, [pc, #192]	; (8004534 <HAL_DMA_Start_IT+0x200>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d03b      	beq.n	80044f0 <HAL_DMA_Start_IT+0x1bc>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a2e      	ldr	r2, [pc, #184]	; (8004538 <HAL_DMA_Start_IT+0x204>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d036      	beq.n	80044f0 <HAL_DMA_Start_IT+0x1bc>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a2d      	ldr	r2, [pc, #180]	; (800453c <HAL_DMA_Start_IT+0x208>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d031      	beq.n	80044f0 <HAL_DMA_Start_IT+0x1bc>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a2b      	ldr	r2, [pc, #172]	; (8004540 <HAL_DMA_Start_IT+0x20c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d02c      	beq.n	80044f0 <HAL_DMA_Start_IT+0x1bc>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a2a      	ldr	r2, [pc, #168]	; (8004544 <HAL_DMA_Start_IT+0x210>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d027      	beq.n	80044f0 <HAL_DMA_Start_IT+0x1bc>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a28      	ldr	r2, [pc, #160]	; (8004548 <HAL_DMA_Start_IT+0x214>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d022      	beq.n	80044f0 <HAL_DMA_Start_IT+0x1bc>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a27      	ldr	r2, [pc, #156]	; (800454c <HAL_DMA_Start_IT+0x218>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d01d      	beq.n	80044f0 <HAL_DMA_Start_IT+0x1bc>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a25      	ldr	r2, [pc, #148]	; (8004550 <HAL_DMA_Start_IT+0x21c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d018      	beq.n	80044f0 <HAL_DMA_Start_IT+0x1bc>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a24      	ldr	r2, [pc, #144]	; (8004554 <HAL_DMA_Start_IT+0x220>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d013      	beq.n	80044f0 <HAL_DMA_Start_IT+0x1bc>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a22      	ldr	r2, [pc, #136]	; (8004558 <HAL_DMA_Start_IT+0x224>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00e      	beq.n	80044f0 <HAL_DMA_Start_IT+0x1bc>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a21      	ldr	r2, [pc, #132]	; (800455c <HAL_DMA_Start_IT+0x228>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d009      	beq.n	80044f0 <HAL_DMA_Start_IT+0x1bc>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1f      	ldr	r2, [pc, #124]	; (8004560 <HAL_DMA_Start_IT+0x22c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d004      	beq.n	80044f0 <HAL_DMA_Start_IT+0x1bc>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1e      	ldr	r2, [pc, #120]	; (8004564 <HAL_DMA_Start_IT+0x230>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d101      	bne.n	80044f4 <HAL_DMA_Start_IT+0x1c0>
 80044f0:	2301      	movs	r3, #1
 80044f2:	e000      	b.n	80044f6 <HAL_DMA_Start_IT+0x1c2>
 80044f4:	2300      	movs	r3, #0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d036      	beq.n	8004568 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f023 021e 	bic.w	r2, r3, #30
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0216 	orr.w	r2, r2, #22
 800450c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d03e      	beq.n	8004594 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0208 	orr.w	r2, r2, #8
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	e035      	b.n	8004594 <HAL_DMA_Start_IT+0x260>
 8004528:	40020010 	.word	0x40020010
 800452c:	40020028 	.word	0x40020028
 8004530:	40020040 	.word	0x40020040
 8004534:	40020058 	.word	0x40020058
 8004538:	40020070 	.word	0x40020070
 800453c:	40020088 	.word	0x40020088
 8004540:	400200a0 	.word	0x400200a0
 8004544:	400200b8 	.word	0x400200b8
 8004548:	40020410 	.word	0x40020410
 800454c:	40020428 	.word	0x40020428
 8004550:	40020440 	.word	0x40020440
 8004554:	40020458 	.word	0x40020458
 8004558:	40020470 	.word	0x40020470
 800455c:	40020488 	.word	0x40020488
 8004560:	400204a0 	.word	0x400204a0
 8004564:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f023 020e 	bic.w	r2, r3, #14
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 020a 	orr.w	r2, r2, #10
 800457a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	2b00      	cmp	r3, #0
 8004582:	d007      	beq.n	8004594 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0204 	orr.w	r2, r2, #4
 8004592:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a83      	ldr	r2, [pc, #524]	; (80047a8 <HAL_DMA_Start_IT+0x474>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d072      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a82      	ldr	r2, [pc, #520]	; (80047ac <HAL_DMA_Start_IT+0x478>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d06d      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a80      	ldr	r2, [pc, #512]	; (80047b0 <HAL_DMA_Start_IT+0x47c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d068      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a7f      	ldr	r2, [pc, #508]	; (80047b4 <HAL_DMA_Start_IT+0x480>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d063      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a7d      	ldr	r2, [pc, #500]	; (80047b8 <HAL_DMA_Start_IT+0x484>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d05e      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a7c      	ldr	r2, [pc, #496]	; (80047bc <HAL_DMA_Start_IT+0x488>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d059      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a7a      	ldr	r2, [pc, #488]	; (80047c0 <HAL_DMA_Start_IT+0x48c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d054      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a79      	ldr	r2, [pc, #484]	; (80047c4 <HAL_DMA_Start_IT+0x490>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d04f      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a77      	ldr	r2, [pc, #476]	; (80047c8 <HAL_DMA_Start_IT+0x494>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d04a      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a76      	ldr	r2, [pc, #472]	; (80047cc <HAL_DMA_Start_IT+0x498>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d045      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a74      	ldr	r2, [pc, #464]	; (80047d0 <HAL_DMA_Start_IT+0x49c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d040      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a73      	ldr	r2, [pc, #460]	; (80047d4 <HAL_DMA_Start_IT+0x4a0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d03b      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a71      	ldr	r2, [pc, #452]	; (80047d8 <HAL_DMA_Start_IT+0x4a4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d036      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a70      	ldr	r2, [pc, #448]	; (80047dc <HAL_DMA_Start_IT+0x4a8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d031      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a6e      	ldr	r2, [pc, #440]	; (80047e0 <HAL_DMA_Start_IT+0x4ac>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d02c      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a6d      	ldr	r2, [pc, #436]	; (80047e4 <HAL_DMA_Start_IT+0x4b0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d027      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a6b      	ldr	r2, [pc, #428]	; (80047e8 <HAL_DMA_Start_IT+0x4b4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d022      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a6a      	ldr	r2, [pc, #424]	; (80047ec <HAL_DMA_Start_IT+0x4b8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d01d      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a68      	ldr	r2, [pc, #416]	; (80047f0 <HAL_DMA_Start_IT+0x4bc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d018      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a67      	ldr	r2, [pc, #412]	; (80047f4 <HAL_DMA_Start_IT+0x4c0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d013      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a65      	ldr	r2, [pc, #404]	; (80047f8 <HAL_DMA_Start_IT+0x4c4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00e      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a64      	ldr	r2, [pc, #400]	; (80047fc <HAL_DMA_Start_IT+0x4c8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d009      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a62      	ldr	r2, [pc, #392]	; (8004800 <HAL_DMA_Start_IT+0x4cc>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d004      	beq.n	8004684 <HAL_DMA_Start_IT+0x350>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a61      	ldr	r2, [pc, #388]	; (8004804 <HAL_DMA_Start_IT+0x4d0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d101      	bne.n	8004688 <HAL_DMA_Start_IT+0x354>
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <HAL_DMA_Start_IT+0x356>
 8004688:	2300      	movs	r3, #0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d01a      	beq.n	80046c4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d007      	beq.n	80046ac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046aa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046c2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a37      	ldr	r2, [pc, #220]	; (80047a8 <HAL_DMA_Start_IT+0x474>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d04a      	beq.n	8004764 <HAL_DMA_Start_IT+0x430>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a36      	ldr	r2, [pc, #216]	; (80047ac <HAL_DMA_Start_IT+0x478>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d045      	beq.n	8004764 <HAL_DMA_Start_IT+0x430>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a34      	ldr	r2, [pc, #208]	; (80047b0 <HAL_DMA_Start_IT+0x47c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d040      	beq.n	8004764 <HAL_DMA_Start_IT+0x430>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a33      	ldr	r2, [pc, #204]	; (80047b4 <HAL_DMA_Start_IT+0x480>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d03b      	beq.n	8004764 <HAL_DMA_Start_IT+0x430>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a31      	ldr	r2, [pc, #196]	; (80047b8 <HAL_DMA_Start_IT+0x484>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d036      	beq.n	8004764 <HAL_DMA_Start_IT+0x430>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a30      	ldr	r2, [pc, #192]	; (80047bc <HAL_DMA_Start_IT+0x488>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d031      	beq.n	8004764 <HAL_DMA_Start_IT+0x430>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a2e      	ldr	r2, [pc, #184]	; (80047c0 <HAL_DMA_Start_IT+0x48c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d02c      	beq.n	8004764 <HAL_DMA_Start_IT+0x430>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a2d      	ldr	r2, [pc, #180]	; (80047c4 <HAL_DMA_Start_IT+0x490>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d027      	beq.n	8004764 <HAL_DMA_Start_IT+0x430>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a2b      	ldr	r2, [pc, #172]	; (80047c8 <HAL_DMA_Start_IT+0x494>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d022      	beq.n	8004764 <HAL_DMA_Start_IT+0x430>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a2a      	ldr	r2, [pc, #168]	; (80047cc <HAL_DMA_Start_IT+0x498>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d01d      	beq.n	8004764 <HAL_DMA_Start_IT+0x430>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a28      	ldr	r2, [pc, #160]	; (80047d0 <HAL_DMA_Start_IT+0x49c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d018      	beq.n	8004764 <HAL_DMA_Start_IT+0x430>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a27      	ldr	r2, [pc, #156]	; (80047d4 <HAL_DMA_Start_IT+0x4a0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <HAL_DMA_Start_IT+0x430>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a25      	ldr	r2, [pc, #148]	; (80047d8 <HAL_DMA_Start_IT+0x4a4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00e      	beq.n	8004764 <HAL_DMA_Start_IT+0x430>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a24      	ldr	r2, [pc, #144]	; (80047dc <HAL_DMA_Start_IT+0x4a8>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d009      	beq.n	8004764 <HAL_DMA_Start_IT+0x430>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a22      	ldr	r2, [pc, #136]	; (80047e0 <HAL_DMA_Start_IT+0x4ac>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_DMA_Start_IT+0x430>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a21      	ldr	r2, [pc, #132]	; (80047e4 <HAL_DMA_Start_IT+0x4b0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d108      	bne.n	8004776 <HAL_DMA_Start_IT+0x442>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	e012      	b.n	800479c <HAL_DMA_Start_IT+0x468>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0201 	orr.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	e009      	b.n	800479c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004796:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800479c:	7dfb      	ldrb	r3, [r7, #23]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40020010 	.word	0x40020010
 80047ac:	40020028 	.word	0x40020028
 80047b0:	40020040 	.word	0x40020040
 80047b4:	40020058 	.word	0x40020058
 80047b8:	40020070 	.word	0x40020070
 80047bc:	40020088 	.word	0x40020088
 80047c0:	400200a0 	.word	0x400200a0
 80047c4:	400200b8 	.word	0x400200b8
 80047c8:	40020410 	.word	0x40020410
 80047cc:	40020428 	.word	0x40020428
 80047d0:	40020440 	.word	0x40020440
 80047d4:	40020458 	.word	0x40020458
 80047d8:	40020470 	.word	0x40020470
 80047dc:	40020488 	.word	0x40020488
 80047e0:	400204a0 	.word	0x400204a0
 80047e4:	400204b8 	.word	0x400204b8
 80047e8:	58025408 	.word	0x58025408
 80047ec:	5802541c 	.word	0x5802541c
 80047f0:	58025430 	.word	0x58025430
 80047f4:	58025444 	.word	0x58025444
 80047f8:	58025458 	.word	0x58025458
 80047fc:	5802546c 	.word	0x5802546c
 8004800:	58025480 	.word	0x58025480
 8004804:	58025494 	.word	0x58025494

08004808 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e205      	b.n	8004c26 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d004      	beq.n	8004830 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2280      	movs	r2, #128	; 0x80
 800482a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e1fa      	b.n	8004c26 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a8c      	ldr	r2, [pc, #560]	; (8004a68 <HAL_DMA_Abort_IT+0x260>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d04a      	beq.n	80048d0 <HAL_DMA_Abort_IT+0xc8>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a8b      	ldr	r2, [pc, #556]	; (8004a6c <HAL_DMA_Abort_IT+0x264>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d045      	beq.n	80048d0 <HAL_DMA_Abort_IT+0xc8>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a89      	ldr	r2, [pc, #548]	; (8004a70 <HAL_DMA_Abort_IT+0x268>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d040      	beq.n	80048d0 <HAL_DMA_Abort_IT+0xc8>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a88      	ldr	r2, [pc, #544]	; (8004a74 <HAL_DMA_Abort_IT+0x26c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d03b      	beq.n	80048d0 <HAL_DMA_Abort_IT+0xc8>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a86      	ldr	r2, [pc, #536]	; (8004a78 <HAL_DMA_Abort_IT+0x270>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d036      	beq.n	80048d0 <HAL_DMA_Abort_IT+0xc8>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a85      	ldr	r2, [pc, #532]	; (8004a7c <HAL_DMA_Abort_IT+0x274>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d031      	beq.n	80048d0 <HAL_DMA_Abort_IT+0xc8>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a83      	ldr	r2, [pc, #524]	; (8004a80 <HAL_DMA_Abort_IT+0x278>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d02c      	beq.n	80048d0 <HAL_DMA_Abort_IT+0xc8>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a82      	ldr	r2, [pc, #520]	; (8004a84 <HAL_DMA_Abort_IT+0x27c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d027      	beq.n	80048d0 <HAL_DMA_Abort_IT+0xc8>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a80      	ldr	r2, [pc, #512]	; (8004a88 <HAL_DMA_Abort_IT+0x280>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d022      	beq.n	80048d0 <HAL_DMA_Abort_IT+0xc8>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a7f      	ldr	r2, [pc, #508]	; (8004a8c <HAL_DMA_Abort_IT+0x284>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d01d      	beq.n	80048d0 <HAL_DMA_Abort_IT+0xc8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a7d      	ldr	r2, [pc, #500]	; (8004a90 <HAL_DMA_Abort_IT+0x288>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d018      	beq.n	80048d0 <HAL_DMA_Abort_IT+0xc8>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a7c      	ldr	r2, [pc, #496]	; (8004a94 <HAL_DMA_Abort_IT+0x28c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d013      	beq.n	80048d0 <HAL_DMA_Abort_IT+0xc8>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a7a      	ldr	r2, [pc, #488]	; (8004a98 <HAL_DMA_Abort_IT+0x290>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00e      	beq.n	80048d0 <HAL_DMA_Abort_IT+0xc8>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a79      	ldr	r2, [pc, #484]	; (8004a9c <HAL_DMA_Abort_IT+0x294>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d009      	beq.n	80048d0 <HAL_DMA_Abort_IT+0xc8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a77      	ldr	r2, [pc, #476]	; (8004aa0 <HAL_DMA_Abort_IT+0x298>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d004      	beq.n	80048d0 <HAL_DMA_Abort_IT+0xc8>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a76      	ldr	r2, [pc, #472]	; (8004aa4 <HAL_DMA_Abort_IT+0x29c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d101      	bne.n	80048d4 <HAL_DMA_Abort_IT+0xcc>
 80048d0:	2301      	movs	r3, #1
 80048d2:	e000      	b.n	80048d6 <HAL_DMA_Abort_IT+0xce>
 80048d4:	2300      	movs	r3, #0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d065      	beq.n	80049a6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2204      	movs	r2, #4
 80048de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a60      	ldr	r2, [pc, #384]	; (8004a68 <HAL_DMA_Abort_IT+0x260>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d04a      	beq.n	8004982 <HAL_DMA_Abort_IT+0x17a>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a5e      	ldr	r2, [pc, #376]	; (8004a6c <HAL_DMA_Abort_IT+0x264>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d045      	beq.n	8004982 <HAL_DMA_Abort_IT+0x17a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a5d      	ldr	r2, [pc, #372]	; (8004a70 <HAL_DMA_Abort_IT+0x268>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d040      	beq.n	8004982 <HAL_DMA_Abort_IT+0x17a>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a5b      	ldr	r2, [pc, #364]	; (8004a74 <HAL_DMA_Abort_IT+0x26c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d03b      	beq.n	8004982 <HAL_DMA_Abort_IT+0x17a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a5a      	ldr	r2, [pc, #360]	; (8004a78 <HAL_DMA_Abort_IT+0x270>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d036      	beq.n	8004982 <HAL_DMA_Abort_IT+0x17a>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a58      	ldr	r2, [pc, #352]	; (8004a7c <HAL_DMA_Abort_IT+0x274>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d031      	beq.n	8004982 <HAL_DMA_Abort_IT+0x17a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a57      	ldr	r2, [pc, #348]	; (8004a80 <HAL_DMA_Abort_IT+0x278>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d02c      	beq.n	8004982 <HAL_DMA_Abort_IT+0x17a>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a55      	ldr	r2, [pc, #340]	; (8004a84 <HAL_DMA_Abort_IT+0x27c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d027      	beq.n	8004982 <HAL_DMA_Abort_IT+0x17a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a54      	ldr	r2, [pc, #336]	; (8004a88 <HAL_DMA_Abort_IT+0x280>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d022      	beq.n	8004982 <HAL_DMA_Abort_IT+0x17a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a52      	ldr	r2, [pc, #328]	; (8004a8c <HAL_DMA_Abort_IT+0x284>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d01d      	beq.n	8004982 <HAL_DMA_Abort_IT+0x17a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a51      	ldr	r2, [pc, #324]	; (8004a90 <HAL_DMA_Abort_IT+0x288>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d018      	beq.n	8004982 <HAL_DMA_Abort_IT+0x17a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a4f      	ldr	r2, [pc, #316]	; (8004a94 <HAL_DMA_Abort_IT+0x28c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d013      	beq.n	8004982 <HAL_DMA_Abort_IT+0x17a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a4e      	ldr	r2, [pc, #312]	; (8004a98 <HAL_DMA_Abort_IT+0x290>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00e      	beq.n	8004982 <HAL_DMA_Abort_IT+0x17a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a4c      	ldr	r2, [pc, #304]	; (8004a9c <HAL_DMA_Abort_IT+0x294>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d009      	beq.n	8004982 <HAL_DMA_Abort_IT+0x17a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a4b      	ldr	r2, [pc, #300]	; (8004aa0 <HAL_DMA_Abort_IT+0x298>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d004      	beq.n	8004982 <HAL_DMA_Abort_IT+0x17a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a49      	ldr	r2, [pc, #292]	; (8004aa4 <HAL_DMA_Abort_IT+0x29c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d108      	bne.n	8004994 <HAL_DMA_Abort_IT+0x18c>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0201 	bic.w	r2, r2, #1
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	e147      	b.n	8004c24 <HAL_DMA_Abort_IT+0x41c>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0201 	bic.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	e13e      	b.n	8004c24 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 020e 	bic.w	r2, r2, #14
 80049b4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a2b      	ldr	r2, [pc, #172]	; (8004a68 <HAL_DMA_Abort_IT+0x260>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d04a      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x24e>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a29      	ldr	r2, [pc, #164]	; (8004a6c <HAL_DMA_Abort_IT+0x264>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d045      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x24e>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a28      	ldr	r2, [pc, #160]	; (8004a70 <HAL_DMA_Abort_IT+0x268>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d040      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x24e>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a26      	ldr	r2, [pc, #152]	; (8004a74 <HAL_DMA_Abort_IT+0x26c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d03b      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x24e>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a25      	ldr	r2, [pc, #148]	; (8004a78 <HAL_DMA_Abort_IT+0x270>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d036      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x24e>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a23      	ldr	r2, [pc, #140]	; (8004a7c <HAL_DMA_Abort_IT+0x274>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d031      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x24e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a22      	ldr	r2, [pc, #136]	; (8004a80 <HAL_DMA_Abort_IT+0x278>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d02c      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x24e>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a20      	ldr	r2, [pc, #128]	; (8004a84 <HAL_DMA_Abort_IT+0x27c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d027      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x24e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a1f      	ldr	r2, [pc, #124]	; (8004a88 <HAL_DMA_Abort_IT+0x280>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d022      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x24e>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a1d      	ldr	r2, [pc, #116]	; (8004a8c <HAL_DMA_Abort_IT+0x284>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d01d      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x24e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a1c      	ldr	r2, [pc, #112]	; (8004a90 <HAL_DMA_Abort_IT+0x288>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d018      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x24e>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a1a      	ldr	r2, [pc, #104]	; (8004a94 <HAL_DMA_Abort_IT+0x28c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d013      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x24e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a19      	ldr	r2, [pc, #100]	; (8004a98 <HAL_DMA_Abort_IT+0x290>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00e      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x24e>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a17      	ldr	r2, [pc, #92]	; (8004a9c <HAL_DMA_Abort_IT+0x294>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d009      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x24e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a16      	ldr	r2, [pc, #88]	; (8004aa0 <HAL_DMA_Abort_IT+0x298>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d004      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x24e>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a14      	ldr	r2, [pc, #80]	; (8004aa4 <HAL_DMA_Abort_IT+0x29c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d128      	bne.n	8004aa8 <HAL_DMA_Abort_IT+0x2a0>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	e027      	b.n	8004ab8 <HAL_DMA_Abort_IT+0x2b0>
 8004a68:	40020010 	.word	0x40020010
 8004a6c:	40020028 	.word	0x40020028
 8004a70:	40020040 	.word	0x40020040
 8004a74:	40020058 	.word	0x40020058
 8004a78:	40020070 	.word	0x40020070
 8004a7c:	40020088 	.word	0x40020088
 8004a80:	400200a0 	.word	0x400200a0
 8004a84:	400200b8 	.word	0x400200b8
 8004a88:	40020410 	.word	0x40020410
 8004a8c:	40020428 	.word	0x40020428
 8004a90:	40020440 	.word	0x40020440
 8004a94:	40020458 	.word	0x40020458
 8004a98:	40020470 	.word	0x40020470
 8004a9c:	40020488 	.word	0x40020488
 8004aa0:	400204a0 	.word	0x400204a0
 8004aa4:	400204b8 	.word	0x400204b8
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0201 	bic.w	r2, r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a5c      	ldr	r2, [pc, #368]	; (8004c30 <HAL_DMA_Abort_IT+0x428>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d072      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a5b      	ldr	r2, [pc, #364]	; (8004c34 <HAL_DMA_Abort_IT+0x42c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d06d      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a59      	ldr	r2, [pc, #356]	; (8004c38 <HAL_DMA_Abort_IT+0x430>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d068      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a58      	ldr	r2, [pc, #352]	; (8004c3c <HAL_DMA_Abort_IT+0x434>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d063      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a56      	ldr	r2, [pc, #344]	; (8004c40 <HAL_DMA_Abort_IT+0x438>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d05e      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a55      	ldr	r2, [pc, #340]	; (8004c44 <HAL_DMA_Abort_IT+0x43c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d059      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a53      	ldr	r2, [pc, #332]	; (8004c48 <HAL_DMA_Abort_IT+0x440>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d054      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a52      	ldr	r2, [pc, #328]	; (8004c4c <HAL_DMA_Abort_IT+0x444>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d04f      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a50      	ldr	r2, [pc, #320]	; (8004c50 <HAL_DMA_Abort_IT+0x448>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d04a      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a4f      	ldr	r2, [pc, #316]	; (8004c54 <HAL_DMA_Abort_IT+0x44c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d045      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a4d      	ldr	r2, [pc, #308]	; (8004c58 <HAL_DMA_Abort_IT+0x450>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d040      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a4c      	ldr	r2, [pc, #304]	; (8004c5c <HAL_DMA_Abort_IT+0x454>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d03b      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a4a      	ldr	r2, [pc, #296]	; (8004c60 <HAL_DMA_Abort_IT+0x458>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d036      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a49      	ldr	r2, [pc, #292]	; (8004c64 <HAL_DMA_Abort_IT+0x45c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d031      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a47      	ldr	r2, [pc, #284]	; (8004c68 <HAL_DMA_Abort_IT+0x460>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d02c      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a46      	ldr	r2, [pc, #280]	; (8004c6c <HAL_DMA_Abort_IT+0x464>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d027      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a44      	ldr	r2, [pc, #272]	; (8004c70 <HAL_DMA_Abort_IT+0x468>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d022      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a43      	ldr	r2, [pc, #268]	; (8004c74 <HAL_DMA_Abort_IT+0x46c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d01d      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a41      	ldr	r2, [pc, #260]	; (8004c78 <HAL_DMA_Abort_IT+0x470>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d018      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a40      	ldr	r2, [pc, #256]	; (8004c7c <HAL_DMA_Abort_IT+0x474>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d013      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a3e      	ldr	r2, [pc, #248]	; (8004c80 <HAL_DMA_Abort_IT+0x478>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00e      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a3d      	ldr	r2, [pc, #244]	; (8004c84 <HAL_DMA_Abort_IT+0x47c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d009      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a3b      	ldr	r2, [pc, #236]	; (8004c88 <HAL_DMA_Abort_IT+0x480>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d004      	beq.n	8004ba8 <HAL_DMA_Abort_IT+0x3a0>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a3a      	ldr	r2, [pc, #232]	; (8004c8c <HAL_DMA_Abort_IT+0x484>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d101      	bne.n	8004bac <HAL_DMA_Abort_IT+0x3a4>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <HAL_DMA_Abort_IT+0x3a6>
 8004bac:	2300      	movs	r3, #0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d028      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bc0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bcc:	f003 031f 	and.w	r3, r3, #31
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	409a      	lsls	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004be0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00c      	beq.n	8004c04 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bf8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c02:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40020010 	.word	0x40020010
 8004c34:	40020028 	.word	0x40020028
 8004c38:	40020040 	.word	0x40020040
 8004c3c:	40020058 	.word	0x40020058
 8004c40:	40020070 	.word	0x40020070
 8004c44:	40020088 	.word	0x40020088
 8004c48:	400200a0 	.word	0x400200a0
 8004c4c:	400200b8 	.word	0x400200b8
 8004c50:	40020410 	.word	0x40020410
 8004c54:	40020428 	.word	0x40020428
 8004c58:	40020440 	.word	0x40020440
 8004c5c:	40020458 	.word	0x40020458
 8004c60:	40020470 	.word	0x40020470
 8004c64:	40020488 	.word	0x40020488
 8004c68:	400204a0 	.word	0x400204a0
 8004c6c:	400204b8 	.word	0x400204b8
 8004c70:	58025408 	.word	0x58025408
 8004c74:	5802541c 	.word	0x5802541c
 8004c78:	58025430 	.word	0x58025430
 8004c7c:	58025444 	.word	0x58025444
 8004c80:	58025458 	.word	0x58025458
 8004c84:	5802546c 	.word	0x5802546c
 8004c88:	58025480 	.word	0x58025480
 8004c8c:	58025494 	.word	0x58025494

08004c90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08a      	sub	sp, #40	; 0x28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c9c:	4b67      	ldr	r3, [pc, #412]	; (8004e3c <HAL_DMA_IRQHandler+0x1ac>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a67      	ldr	r2, [pc, #412]	; (8004e40 <HAL_DMA_IRQHandler+0x1b0>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	0a9b      	lsrs	r3, r3, #10
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a5f      	ldr	r2, [pc, #380]	; (8004e44 <HAL_DMA_IRQHandler+0x1b4>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d04a      	beq.n	8004d62 <HAL_DMA_IRQHandler+0xd2>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a5d      	ldr	r2, [pc, #372]	; (8004e48 <HAL_DMA_IRQHandler+0x1b8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d045      	beq.n	8004d62 <HAL_DMA_IRQHandler+0xd2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a5c      	ldr	r2, [pc, #368]	; (8004e4c <HAL_DMA_IRQHandler+0x1bc>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d040      	beq.n	8004d62 <HAL_DMA_IRQHandler+0xd2>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a5a      	ldr	r2, [pc, #360]	; (8004e50 <HAL_DMA_IRQHandler+0x1c0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d03b      	beq.n	8004d62 <HAL_DMA_IRQHandler+0xd2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a59      	ldr	r2, [pc, #356]	; (8004e54 <HAL_DMA_IRQHandler+0x1c4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d036      	beq.n	8004d62 <HAL_DMA_IRQHandler+0xd2>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a57      	ldr	r2, [pc, #348]	; (8004e58 <HAL_DMA_IRQHandler+0x1c8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d031      	beq.n	8004d62 <HAL_DMA_IRQHandler+0xd2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a56      	ldr	r2, [pc, #344]	; (8004e5c <HAL_DMA_IRQHandler+0x1cc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d02c      	beq.n	8004d62 <HAL_DMA_IRQHandler+0xd2>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a54      	ldr	r2, [pc, #336]	; (8004e60 <HAL_DMA_IRQHandler+0x1d0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d027      	beq.n	8004d62 <HAL_DMA_IRQHandler+0xd2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a53      	ldr	r2, [pc, #332]	; (8004e64 <HAL_DMA_IRQHandler+0x1d4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d022      	beq.n	8004d62 <HAL_DMA_IRQHandler+0xd2>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a51      	ldr	r2, [pc, #324]	; (8004e68 <HAL_DMA_IRQHandler+0x1d8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d01d      	beq.n	8004d62 <HAL_DMA_IRQHandler+0xd2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a50      	ldr	r2, [pc, #320]	; (8004e6c <HAL_DMA_IRQHandler+0x1dc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d018      	beq.n	8004d62 <HAL_DMA_IRQHandler+0xd2>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a4e      	ldr	r2, [pc, #312]	; (8004e70 <HAL_DMA_IRQHandler+0x1e0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d013      	beq.n	8004d62 <HAL_DMA_IRQHandler+0xd2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a4d      	ldr	r2, [pc, #308]	; (8004e74 <HAL_DMA_IRQHandler+0x1e4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00e      	beq.n	8004d62 <HAL_DMA_IRQHandler+0xd2>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a4b      	ldr	r2, [pc, #300]	; (8004e78 <HAL_DMA_IRQHandler+0x1e8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d009      	beq.n	8004d62 <HAL_DMA_IRQHandler+0xd2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a4a      	ldr	r2, [pc, #296]	; (8004e7c <HAL_DMA_IRQHandler+0x1ec>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d004      	beq.n	8004d62 <HAL_DMA_IRQHandler+0xd2>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a48      	ldr	r2, [pc, #288]	; (8004e80 <HAL_DMA_IRQHandler+0x1f0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d101      	bne.n	8004d66 <HAL_DMA_IRQHandler+0xd6>
 8004d62:	2301      	movs	r3, #1
 8004d64:	e000      	b.n	8004d68 <HAL_DMA_IRQHandler+0xd8>
 8004d66:	2300      	movs	r3, #0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 842b 	beq.w	80055c4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d72:	f003 031f 	and.w	r3, r3, #31
 8004d76:	2208      	movs	r2, #8
 8004d78:	409a      	lsls	r2, r3
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 80a2 	beq.w	8004ec8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a2e      	ldr	r2, [pc, #184]	; (8004e44 <HAL_DMA_IRQHandler+0x1b4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d04a      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x194>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a2d      	ldr	r2, [pc, #180]	; (8004e48 <HAL_DMA_IRQHandler+0x1b8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d045      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x194>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a2b      	ldr	r2, [pc, #172]	; (8004e4c <HAL_DMA_IRQHandler+0x1bc>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d040      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x194>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a2a      	ldr	r2, [pc, #168]	; (8004e50 <HAL_DMA_IRQHandler+0x1c0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d03b      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x194>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a28      	ldr	r2, [pc, #160]	; (8004e54 <HAL_DMA_IRQHandler+0x1c4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d036      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x194>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a27      	ldr	r2, [pc, #156]	; (8004e58 <HAL_DMA_IRQHandler+0x1c8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d031      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x194>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a25      	ldr	r2, [pc, #148]	; (8004e5c <HAL_DMA_IRQHandler+0x1cc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d02c      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x194>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a24      	ldr	r2, [pc, #144]	; (8004e60 <HAL_DMA_IRQHandler+0x1d0>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d027      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x194>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a22      	ldr	r2, [pc, #136]	; (8004e64 <HAL_DMA_IRQHandler+0x1d4>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d022      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x194>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a21      	ldr	r2, [pc, #132]	; (8004e68 <HAL_DMA_IRQHandler+0x1d8>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d01d      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x194>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a1f      	ldr	r2, [pc, #124]	; (8004e6c <HAL_DMA_IRQHandler+0x1dc>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d018      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x194>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <HAL_DMA_IRQHandler+0x1e0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d013      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x194>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1c      	ldr	r2, [pc, #112]	; (8004e74 <HAL_DMA_IRQHandler+0x1e4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00e      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x194>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1b      	ldr	r2, [pc, #108]	; (8004e78 <HAL_DMA_IRQHandler+0x1e8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d009      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x194>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a19      	ldr	r2, [pc, #100]	; (8004e7c <HAL_DMA_IRQHandler+0x1ec>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d004      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x194>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a18      	ldr	r2, [pc, #96]	; (8004e80 <HAL_DMA_IRQHandler+0x1f0>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d12f      	bne.n	8004e84 <HAL_DMA_IRQHandler+0x1f4>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	bf14      	ite	ne
 8004e32:	2301      	movne	r3, #1
 8004e34:	2300      	moveq	r3, #0
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	e02e      	b.n	8004e98 <HAL_DMA_IRQHandler+0x208>
 8004e3a:	bf00      	nop
 8004e3c:	24000040 	.word	0x24000040
 8004e40:	1b4e81b5 	.word	0x1b4e81b5
 8004e44:	40020010 	.word	0x40020010
 8004e48:	40020028 	.word	0x40020028
 8004e4c:	40020040 	.word	0x40020040
 8004e50:	40020058 	.word	0x40020058
 8004e54:	40020070 	.word	0x40020070
 8004e58:	40020088 	.word	0x40020088
 8004e5c:	400200a0 	.word	0x400200a0
 8004e60:	400200b8 	.word	0x400200b8
 8004e64:	40020410 	.word	0x40020410
 8004e68:	40020428 	.word	0x40020428
 8004e6c:	40020440 	.word	0x40020440
 8004e70:	40020458 	.word	0x40020458
 8004e74:	40020470 	.word	0x40020470
 8004e78:	40020488 	.word	0x40020488
 8004e7c:	400204a0 	.word	0x400204a0
 8004e80:	400204b8 	.word	0x400204b8
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bf14      	ite	ne
 8004e92:	2301      	movne	r3, #1
 8004e94:	2300      	moveq	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d015      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0204 	bic.w	r2, r2, #4
 8004eaa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb0:	f003 031f 	and.w	r3, r3, #31
 8004eb4:	2208      	movs	r2, #8
 8004eb6:	409a      	lsls	r2, r3
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec0:	f043 0201 	orr.w	r2, r3, #1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ecc:	f003 031f 	and.w	r3, r3, #31
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d06e      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a69      	ldr	r2, [pc, #420]	; (8005088 <HAL_DMA_IRQHandler+0x3f8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d04a      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x2ee>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a67      	ldr	r2, [pc, #412]	; (800508c <HAL_DMA_IRQHandler+0x3fc>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d045      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x2ee>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a66      	ldr	r2, [pc, #408]	; (8005090 <HAL_DMA_IRQHandler+0x400>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d040      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x2ee>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a64      	ldr	r2, [pc, #400]	; (8005094 <HAL_DMA_IRQHandler+0x404>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d03b      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x2ee>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a63      	ldr	r2, [pc, #396]	; (8005098 <HAL_DMA_IRQHandler+0x408>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d036      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x2ee>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a61      	ldr	r2, [pc, #388]	; (800509c <HAL_DMA_IRQHandler+0x40c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d031      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x2ee>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a60      	ldr	r2, [pc, #384]	; (80050a0 <HAL_DMA_IRQHandler+0x410>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d02c      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x2ee>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a5e      	ldr	r2, [pc, #376]	; (80050a4 <HAL_DMA_IRQHandler+0x414>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d027      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x2ee>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a5d      	ldr	r2, [pc, #372]	; (80050a8 <HAL_DMA_IRQHandler+0x418>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d022      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x2ee>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a5b      	ldr	r2, [pc, #364]	; (80050ac <HAL_DMA_IRQHandler+0x41c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d01d      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x2ee>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a5a      	ldr	r2, [pc, #360]	; (80050b0 <HAL_DMA_IRQHandler+0x420>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d018      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x2ee>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a58      	ldr	r2, [pc, #352]	; (80050b4 <HAL_DMA_IRQHandler+0x424>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d013      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x2ee>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a57      	ldr	r2, [pc, #348]	; (80050b8 <HAL_DMA_IRQHandler+0x428>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00e      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x2ee>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a55      	ldr	r2, [pc, #340]	; (80050bc <HAL_DMA_IRQHandler+0x42c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d009      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x2ee>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a54      	ldr	r2, [pc, #336]	; (80050c0 <HAL_DMA_IRQHandler+0x430>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d004      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x2ee>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a52      	ldr	r2, [pc, #328]	; (80050c4 <HAL_DMA_IRQHandler+0x434>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d10a      	bne.n	8004f94 <HAL_DMA_IRQHandler+0x304>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bf14      	ite	ne
 8004f8c:	2301      	movne	r3, #1
 8004f8e:	2300      	moveq	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	e003      	b.n	8004f9c <HAL_DMA_IRQHandler+0x30c>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00d      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa4:	f003 031f 	and.w	r3, r3, #31
 8004fa8:	2201      	movs	r2, #1
 8004faa:	409a      	lsls	r2, r3
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb4:	f043 0202 	orr.w	r2, r3, #2
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc0:	f003 031f 	and.w	r3, r3, #31
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	409a      	lsls	r2, r3
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 808f 	beq.w	80050f0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a2c      	ldr	r2, [pc, #176]	; (8005088 <HAL_DMA_IRQHandler+0x3f8>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d04a      	beq.n	8005072 <HAL_DMA_IRQHandler+0x3e2>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a2a      	ldr	r2, [pc, #168]	; (800508c <HAL_DMA_IRQHandler+0x3fc>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d045      	beq.n	8005072 <HAL_DMA_IRQHandler+0x3e2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a29      	ldr	r2, [pc, #164]	; (8005090 <HAL_DMA_IRQHandler+0x400>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d040      	beq.n	8005072 <HAL_DMA_IRQHandler+0x3e2>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a27      	ldr	r2, [pc, #156]	; (8005094 <HAL_DMA_IRQHandler+0x404>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d03b      	beq.n	8005072 <HAL_DMA_IRQHandler+0x3e2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a26      	ldr	r2, [pc, #152]	; (8005098 <HAL_DMA_IRQHandler+0x408>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d036      	beq.n	8005072 <HAL_DMA_IRQHandler+0x3e2>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a24      	ldr	r2, [pc, #144]	; (800509c <HAL_DMA_IRQHandler+0x40c>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d031      	beq.n	8005072 <HAL_DMA_IRQHandler+0x3e2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a23      	ldr	r2, [pc, #140]	; (80050a0 <HAL_DMA_IRQHandler+0x410>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d02c      	beq.n	8005072 <HAL_DMA_IRQHandler+0x3e2>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a21      	ldr	r2, [pc, #132]	; (80050a4 <HAL_DMA_IRQHandler+0x414>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d027      	beq.n	8005072 <HAL_DMA_IRQHandler+0x3e2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a20      	ldr	r2, [pc, #128]	; (80050a8 <HAL_DMA_IRQHandler+0x418>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d022      	beq.n	8005072 <HAL_DMA_IRQHandler+0x3e2>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1e      	ldr	r2, [pc, #120]	; (80050ac <HAL_DMA_IRQHandler+0x41c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d01d      	beq.n	8005072 <HAL_DMA_IRQHandler+0x3e2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1d      	ldr	r2, [pc, #116]	; (80050b0 <HAL_DMA_IRQHandler+0x420>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d018      	beq.n	8005072 <HAL_DMA_IRQHandler+0x3e2>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1b      	ldr	r2, [pc, #108]	; (80050b4 <HAL_DMA_IRQHandler+0x424>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d013      	beq.n	8005072 <HAL_DMA_IRQHandler+0x3e2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1a      	ldr	r2, [pc, #104]	; (80050b8 <HAL_DMA_IRQHandler+0x428>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00e      	beq.n	8005072 <HAL_DMA_IRQHandler+0x3e2>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a18      	ldr	r2, [pc, #96]	; (80050bc <HAL_DMA_IRQHandler+0x42c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d009      	beq.n	8005072 <HAL_DMA_IRQHandler+0x3e2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a17      	ldr	r2, [pc, #92]	; (80050c0 <HAL_DMA_IRQHandler+0x430>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d004      	beq.n	8005072 <HAL_DMA_IRQHandler+0x3e2>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a15      	ldr	r2, [pc, #84]	; (80050c4 <HAL_DMA_IRQHandler+0x434>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d12a      	bne.n	80050c8 <HAL_DMA_IRQHandler+0x438>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	bf14      	ite	ne
 8005080:	2301      	movne	r3, #1
 8005082:	2300      	moveq	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	e023      	b.n	80050d0 <HAL_DMA_IRQHandler+0x440>
 8005088:	40020010 	.word	0x40020010
 800508c:	40020028 	.word	0x40020028
 8005090:	40020040 	.word	0x40020040
 8005094:	40020058 	.word	0x40020058
 8005098:	40020070 	.word	0x40020070
 800509c:	40020088 	.word	0x40020088
 80050a0:	400200a0 	.word	0x400200a0
 80050a4:	400200b8 	.word	0x400200b8
 80050a8:	40020410 	.word	0x40020410
 80050ac:	40020428 	.word	0x40020428
 80050b0:	40020440 	.word	0x40020440
 80050b4:	40020458 	.word	0x40020458
 80050b8:	40020470 	.word	0x40020470
 80050bc:	40020488 	.word	0x40020488
 80050c0:	400204a0 	.word	0x400204a0
 80050c4:	400204b8 	.word	0x400204b8
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2300      	movs	r3, #0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00d      	beq.n	80050f0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d8:	f003 031f 	and.w	r3, r3, #31
 80050dc:	2204      	movs	r2, #4
 80050de:	409a      	lsls	r2, r3
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e8:	f043 0204 	orr.w	r2, r3, #4
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f4:	f003 031f 	and.w	r3, r3, #31
 80050f8:	2210      	movs	r2, #16
 80050fa:	409a      	lsls	r2, r3
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	4013      	ands	r3, r2
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 80a6 	beq.w	8005252 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a85      	ldr	r2, [pc, #532]	; (8005320 <HAL_DMA_IRQHandler+0x690>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d04a      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x516>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a83      	ldr	r2, [pc, #524]	; (8005324 <HAL_DMA_IRQHandler+0x694>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d045      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x516>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a82      	ldr	r2, [pc, #520]	; (8005328 <HAL_DMA_IRQHandler+0x698>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d040      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x516>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a80      	ldr	r2, [pc, #512]	; (800532c <HAL_DMA_IRQHandler+0x69c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d03b      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x516>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a7f      	ldr	r2, [pc, #508]	; (8005330 <HAL_DMA_IRQHandler+0x6a0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d036      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x516>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a7d      	ldr	r2, [pc, #500]	; (8005334 <HAL_DMA_IRQHandler+0x6a4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d031      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x516>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a7c      	ldr	r2, [pc, #496]	; (8005338 <HAL_DMA_IRQHandler+0x6a8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d02c      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x516>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a7a      	ldr	r2, [pc, #488]	; (800533c <HAL_DMA_IRQHandler+0x6ac>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d027      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x516>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a79      	ldr	r2, [pc, #484]	; (8005340 <HAL_DMA_IRQHandler+0x6b0>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d022      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x516>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a77      	ldr	r2, [pc, #476]	; (8005344 <HAL_DMA_IRQHandler+0x6b4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d01d      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x516>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a76      	ldr	r2, [pc, #472]	; (8005348 <HAL_DMA_IRQHandler+0x6b8>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d018      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x516>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a74      	ldr	r2, [pc, #464]	; (800534c <HAL_DMA_IRQHandler+0x6bc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d013      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x516>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a73      	ldr	r2, [pc, #460]	; (8005350 <HAL_DMA_IRQHandler+0x6c0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00e      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x516>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a71      	ldr	r2, [pc, #452]	; (8005354 <HAL_DMA_IRQHandler+0x6c4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d009      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x516>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a70      	ldr	r2, [pc, #448]	; (8005358 <HAL_DMA_IRQHandler+0x6c8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d004      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x516>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a6e      	ldr	r2, [pc, #440]	; (800535c <HAL_DMA_IRQHandler+0x6cc>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d10a      	bne.n	80051bc <HAL_DMA_IRQHandler+0x52c>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	bf14      	ite	ne
 80051b4:	2301      	movne	r3, #1
 80051b6:	2300      	moveq	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	e009      	b.n	80051d0 <HAL_DMA_IRQHandler+0x540>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	bf14      	ite	ne
 80051ca:	2301      	movne	r3, #1
 80051cc:	2300      	moveq	r3, #0
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d03e      	beq.n	8005252 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d8:	f003 031f 	and.w	r3, r3, #31
 80051dc:	2210      	movs	r2, #16
 80051de:	409a      	lsls	r2, r3
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d018      	beq.n	8005224 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d108      	bne.n	8005212 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	d024      	beq.n	8005252 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	4798      	blx	r3
 8005210:	e01f      	b.n	8005252 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005216:	2b00      	cmp	r3, #0
 8005218:	d01b      	beq.n	8005252 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	4798      	blx	r3
 8005222:	e016      	b.n	8005252 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522e:	2b00      	cmp	r3, #0
 8005230:	d107      	bne.n	8005242 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0208 	bic.w	r2, r2, #8
 8005240:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005256:	f003 031f 	and.w	r3, r3, #31
 800525a:	2220      	movs	r2, #32
 800525c:	409a      	lsls	r2, r3
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	4013      	ands	r3, r2
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 8110 	beq.w	8005488 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a2c      	ldr	r2, [pc, #176]	; (8005320 <HAL_DMA_IRQHandler+0x690>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d04a      	beq.n	8005308 <HAL_DMA_IRQHandler+0x678>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a2b      	ldr	r2, [pc, #172]	; (8005324 <HAL_DMA_IRQHandler+0x694>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d045      	beq.n	8005308 <HAL_DMA_IRQHandler+0x678>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a29      	ldr	r2, [pc, #164]	; (8005328 <HAL_DMA_IRQHandler+0x698>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d040      	beq.n	8005308 <HAL_DMA_IRQHandler+0x678>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a28      	ldr	r2, [pc, #160]	; (800532c <HAL_DMA_IRQHandler+0x69c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d03b      	beq.n	8005308 <HAL_DMA_IRQHandler+0x678>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a26      	ldr	r2, [pc, #152]	; (8005330 <HAL_DMA_IRQHandler+0x6a0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d036      	beq.n	8005308 <HAL_DMA_IRQHandler+0x678>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a25      	ldr	r2, [pc, #148]	; (8005334 <HAL_DMA_IRQHandler+0x6a4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d031      	beq.n	8005308 <HAL_DMA_IRQHandler+0x678>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a23      	ldr	r2, [pc, #140]	; (8005338 <HAL_DMA_IRQHandler+0x6a8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d02c      	beq.n	8005308 <HAL_DMA_IRQHandler+0x678>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a22      	ldr	r2, [pc, #136]	; (800533c <HAL_DMA_IRQHandler+0x6ac>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d027      	beq.n	8005308 <HAL_DMA_IRQHandler+0x678>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a20      	ldr	r2, [pc, #128]	; (8005340 <HAL_DMA_IRQHandler+0x6b0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d022      	beq.n	8005308 <HAL_DMA_IRQHandler+0x678>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1f      	ldr	r2, [pc, #124]	; (8005344 <HAL_DMA_IRQHandler+0x6b4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d01d      	beq.n	8005308 <HAL_DMA_IRQHandler+0x678>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1d      	ldr	r2, [pc, #116]	; (8005348 <HAL_DMA_IRQHandler+0x6b8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d018      	beq.n	8005308 <HAL_DMA_IRQHandler+0x678>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a1c      	ldr	r2, [pc, #112]	; (800534c <HAL_DMA_IRQHandler+0x6bc>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d013      	beq.n	8005308 <HAL_DMA_IRQHandler+0x678>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a1a      	ldr	r2, [pc, #104]	; (8005350 <HAL_DMA_IRQHandler+0x6c0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00e      	beq.n	8005308 <HAL_DMA_IRQHandler+0x678>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a19      	ldr	r2, [pc, #100]	; (8005354 <HAL_DMA_IRQHandler+0x6c4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d009      	beq.n	8005308 <HAL_DMA_IRQHandler+0x678>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a17      	ldr	r2, [pc, #92]	; (8005358 <HAL_DMA_IRQHandler+0x6c8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <HAL_DMA_IRQHandler+0x678>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a16      	ldr	r2, [pc, #88]	; (800535c <HAL_DMA_IRQHandler+0x6cc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d12b      	bne.n	8005360 <HAL_DMA_IRQHandler+0x6d0>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0310 	and.w	r3, r3, #16
 8005312:	2b00      	cmp	r3, #0
 8005314:	bf14      	ite	ne
 8005316:	2301      	movne	r3, #1
 8005318:	2300      	moveq	r3, #0
 800531a:	b2db      	uxtb	r3, r3
 800531c:	e02a      	b.n	8005374 <HAL_DMA_IRQHandler+0x6e4>
 800531e:	bf00      	nop
 8005320:	40020010 	.word	0x40020010
 8005324:	40020028 	.word	0x40020028
 8005328:	40020040 	.word	0x40020040
 800532c:	40020058 	.word	0x40020058
 8005330:	40020070 	.word	0x40020070
 8005334:	40020088 	.word	0x40020088
 8005338:	400200a0 	.word	0x400200a0
 800533c:	400200b8 	.word	0x400200b8
 8005340:	40020410 	.word	0x40020410
 8005344:	40020428 	.word	0x40020428
 8005348:	40020440 	.word	0x40020440
 800534c:	40020458 	.word	0x40020458
 8005350:	40020470 	.word	0x40020470
 8005354:	40020488 	.word	0x40020488
 8005358:	400204a0 	.word	0x400204a0
 800535c:	400204b8 	.word	0x400204b8
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	bf14      	ite	ne
 800536e:	2301      	movne	r3, #1
 8005370:	2300      	moveq	r3, #0
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8087 	beq.w	8005488 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537e:	f003 031f 	and.w	r3, r3, #31
 8005382:	2220      	movs	r2, #32
 8005384:	409a      	lsls	r2, r3
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b04      	cmp	r3, #4
 8005394:	d139      	bne.n	800540a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0216 	bic.w	r2, r2, #22
 80053a4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695a      	ldr	r2, [r3, #20]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053b4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d103      	bne.n	80053c6 <HAL_DMA_IRQHandler+0x736>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d007      	beq.n	80053d6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0208 	bic.w	r2, r2, #8
 80053d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053da:	f003 031f 	and.w	r3, r3, #31
 80053de:	223f      	movs	r2, #63	; 0x3f
 80053e0:	409a      	lsls	r2, r3
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 834a 	beq.w	8005a94 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	4798      	blx	r3
          }
          return;
 8005408:	e344      	b.n	8005a94 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d018      	beq.n	800544a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d108      	bne.n	8005438 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542a:	2b00      	cmp	r3, #0
 800542c:	d02c      	beq.n	8005488 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	4798      	blx	r3
 8005436:	e027      	b.n	8005488 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d023      	beq.n	8005488 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	4798      	blx	r3
 8005448:	e01e      	b.n	8005488 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10f      	bne.n	8005478 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0210 	bic.w	r2, r2, #16
 8005466:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8306 	beq.w	8005a9e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 8088 	beq.w	80055b0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2204      	movs	r2, #4
 80054a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a7a      	ldr	r2, [pc, #488]	; (8005698 <HAL_DMA_IRQHandler+0xa08>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d04a      	beq.n	8005548 <HAL_DMA_IRQHandler+0x8b8>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a79      	ldr	r2, [pc, #484]	; (800569c <HAL_DMA_IRQHandler+0xa0c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d045      	beq.n	8005548 <HAL_DMA_IRQHandler+0x8b8>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a77      	ldr	r2, [pc, #476]	; (80056a0 <HAL_DMA_IRQHandler+0xa10>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d040      	beq.n	8005548 <HAL_DMA_IRQHandler+0x8b8>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a76      	ldr	r2, [pc, #472]	; (80056a4 <HAL_DMA_IRQHandler+0xa14>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d03b      	beq.n	8005548 <HAL_DMA_IRQHandler+0x8b8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a74      	ldr	r2, [pc, #464]	; (80056a8 <HAL_DMA_IRQHandler+0xa18>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d036      	beq.n	8005548 <HAL_DMA_IRQHandler+0x8b8>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a73      	ldr	r2, [pc, #460]	; (80056ac <HAL_DMA_IRQHandler+0xa1c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d031      	beq.n	8005548 <HAL_DMA_IRQHandler+0x8b8>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a71      	ldr	r2, [pc, #452]	; (80056b0 <HAL_DMA_IRQHandler+0xa20>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d02c      	beq.n	8005548 <HAL_DMA_IRQHandler+0x8b8>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a70      	ldr	r2, [pc, #448]	; (80056b4 <HAL_DMA_IRQHandler+0xa24>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d027      	beq.n	8005548 <HAL_DMA_IRQHandler+0x8b8>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a6e      	ldr	r2, [pc, #440]	; (80056b8 <HAL_DMA_IRQHandler+0xa28>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d022      	beq.n	8005548 <HAL_DMA_IRQHandler+0x8b8>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a6d      	ldr	r2, [pc, #436]	; (80056bc <HAL_DMA_IRQHandler+0xa2c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d01d      	beq.n	8005548 <HAL_DMA_IRQHandler+0x8b8>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a6b      	ldr	r2, [pc, #428]	; (80056c0 <HAL_DMA_IRQHandler+0xa30>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d018      	beq.n	8005548 <HAL_DMA_IRQHandler+0x8b8>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a6a      	ldr	r2, [pc, #424]	; (80056c4 <HAL_DMA_IRQHandler+0xa34>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d013      	beq.n	8005548 <HAL_DMA_IRQHandler+0x8b8>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a68      	ldr	r2, [pc, #416]	; (80056c8 <HAL_DMA_IRQHandler+0xa38>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00e      	beq.n	8005548 <HAL_DMA_IRQHandler+0x8b8>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a67      	ldr	r2, [pc, #412]	; (80056cc <HAL_DMA_IRQHandler+0xa3c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d009      	beq.n	8005548 <HAL_DMA_IRQHandler+0x8b8>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a65      	ldr	r2, [pc, #404]	; (80056d0 <HAL_DMA_IRQHandler+0xa40>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d004      	beq.n	8005548 <HAL_DMA_IRQHandler+0x8b8>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a64      	ldr	r2, [pc, #400]	; (80056d4 <HAL_DMA_IRQHandler+0xa44>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d108      	bne.n	800555a <HAL_DMA_IRQHandler+0x8ca>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0201 	bic.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	e007      	b.n	800556a <HAL_DMA_IRQHandler+0x8da>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0201 	bic.w	r2, r2, #1
 8005568:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3301      	adds	r3, #1
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005572:	429a      	cmp	r2, r3
 8005574:	d307      	bcc.n	8005586 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1f2      	bne.n	800556a <HAL_DMA_IRQHandler+0x8da>
 8005584:	e000      	b.n	8005588 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005586:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d004      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2203      	movs	r2, #3
 80055a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80055a6:	e003      	b.n	80055b0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8272 	beq.w	8005a9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	4798      	blx	r3
 80055c2:	e26c      	b.n	8005a9e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a43      	ldr	r2, [pc, #268]	; (80056d8 <HAL_DMA_IRQHandler+0xa48>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d022      	beq.n	8005614 <HAL_DMA_IRQHandler+0x984>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a42      	ldr	r2, [pc, #264]	; (80056dc <HAL_DMA_IRQHandler+0xa4c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d01d      	beq.n	8005614 <HAL_DMA_IRQHandler+0x984>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a40      	ldr	r2, [pc, #256]	; (80056e0 <HAL_DMA_IRQHandler+0xa50>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d018      	beq.n	8005614 <HAL_DMA_IRQHandler+0x984>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a3f      	ldr	r2, [pc, #252]	; (80056e4 <HAL_DMA_IRQHandler+0xa54>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d013      	beq.n	8005614 <HAL_DMA_IRQHandler+0x984>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a3d      	ldr	r2, [pc, #244]	; (80056e8 <HAL_DMA_IRQHandler+0xa58>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00e      	beq.n	8005614 <HAL_DMA_IRQHandler+0x984>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a3c      	ldr	r2, [pc, #240]	; (80056ec <HAL_DMA_IRQHandler+0xa5c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d009      	beq.n	8005614 <HAL_DMA_IRQHandler+0x984>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a3a      	ldr	r2, [pc, #232]	; (80056f0 <HAL_DMA_IRQHandler+0xa60>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d004      	beq.n	8005614 <HAL_DMA_IRQHandler+0x984>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a39      	ldr	r2, [pc, #228]	; (80056f4 <HAL_DMA_IRQHandler+0xa64>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d101      	bne.n	8005618 <HAL_DMA_IRQHandler+0x988>
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <HAL_DMA_IRQHandler+0x98a>
 8005618:	2300      	movs	r3, #0
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 823f 	beq.w	8005a9e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800562c:	f003 031f 	and.w	r3, r3, #31
 8005630:	2204      	movs	r2, #4
 8005632:	409a      	lsls	r2, r3
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	4013      	ands	r3, r2
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80cd 	beq.w	80057d8 <HAL_DMA_IRQHandler+0xb48>
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 80c7 	beq.w	80057d8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800564e:	f003 031f 	and.w	r3, r3, #31
 8005652:	2204      	movs	r2, #4
 8005654:	409a      	lsls	r2, r3
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d049      	beq.n	80056f8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d109      	bne.n	8005682 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 8210 	beq.w	8005a98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005680:	e20a      	b.n	8005a98 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 8206 	beq.w	8005a98 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005694:	e200      	b.n	8005a98 <HAL_DMA_IRQHandler+0xe08>
 8005696:	bf00      	nop
 8005698:	40020010 	.word	0x40020010
 800569c:	40020028 	.word	0x40020028
 80056a0:	40020040 	.word	0x40020040
 80056a4:	40020058 	.word	0x40020058
 80056a8:	40020070 	.word	0x40020070
 80056ac:	40020088 	.word	0x40020088
 80056b0:	400200a0 	.word	0x400200a0
 80056b4:	400200b8 	.word	0x400200b8
 80056b8:	40020410 	.word	0x40020410
 80056bc:	40020428 	.word	0x40020428
 80056c0:	40020440 	.word	0x40020440
 80056c4:	40020458 	.word	0x40020458
 80056c8:	40020470 	.word	0x40020470
 80056cc:	40020488 	.word	0x40020488
 80056d0:	400204a0 	.word	0x400204a0
 80056d4:	400204b8 	.word	0x400204b8
 80056d8:	58025408 	.word	0x58025408
 80056dc:	5802541c 	.word	0x5802541c
 80056e0:	58025430 	.word	0x58025430
 80056e4:	58025444 	.word	0x58025444
 80056e8:	58025458 	.word	0x58025458
 80056ec:	5802546c 	.word	0x5802546c
 80056f0:	58025480 	.word	0x58025480
 80056f4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d160      	bne.n	80057c4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a8c      	ldr	r2, [pc, #560]	; (8005938 <HAL_DMA_IRQHandler+0xca8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d04a      	beq.n	80057a2 <HAL_DMA_IRQHandler+0xb12>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a8a      	ldr	r2, [pc, #552]	; (800593c <HAL_DMA_IRQHandler+0xcac>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d045      	beq.n	80057a2 <HAL_DMA_IRQHandler+0xb12>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a89      	ldr	r2, [pc, #548]	; (8005940 <HAL_DMA_IRQHandler+0xcb0>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d040      	beq.n	80057a2 <HAL_DMA_IRQHandler+0xb12>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a87      	ldr	r2, [pc, #540]	; (8005944 <HAL_DMA_IRQHandler+0xcb4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d03b      	beq.n	80057a2 <HAL_DMA_IRQHandler+0xb12>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a86      	ldr	r2, [pc, #536]	; (8005948 <HAL_DMA_IRQHandler+0xcb8>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d036      	beq.n	80057a2 <HAL_DMA_IRQHandler+0xb12>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a84      	ldr	r2, [pc, #528]	; (800594c <HAL_DMA_IRQHandler+0xcbc>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d031      	beq.n	80057a2 <HAL_DMA_IRQHandler+0xb12>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a83      	ldr	r2, [pc, #524]	; (8005950 <HAL_DMA_IRQHandler+0xcc0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d02c      	beq.n	80057a2 <HAL_DMA_IRQHandler+0xb12>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a81      	ldr	r2, [pc, #516]	; (8005954 <HAL_DMA_IRQHandler+0xcc4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d027      	beq.n	80057a2 <HAL_DMA_IRQHandler+0xb12>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a80      	ldr	r2, [pc, #512]	; (8005958 <HAL_DMA_IRQHandler+0xcc8>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d022      	beq.n	80057a2 <HAL_DMA_IRQHandler+0xb12>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a7e      	ldr	r2, [pc, #504]	; (800595c <HAL_DMA_IRQHandler+0xccc>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d01d      	beq.n	80057a2 <HAL_DMA_IRQHandler+0xb12>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a7d      	ldr	r2, [pc, #500]	; (8005960 <HAL_DMA_IRQHandler+0xcd0>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d018      	beq.n	80057a2 <HAL_DMA_IRQHandler+0xb12>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a7b      	ldr	r2, [pc, #492]	; (8005964 <HAL_DMA_IRQHandler+0xcd4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d013      	beq.n	80057a2 <HAL_DMA_IRQHandler+0xb12>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a7a      	ldr	r2, [pc, #488]	; (8005968 <HAL_DMA_IRQHandler+0xcd8>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00e      	beq.n	80057a2 <HAL_DMA_IRQHandler+0xb12>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a78      	ldr	r2, [pc, #480]	; (800596c <HAL_DMA_IRQHandler+0xcdc>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d009      	beq.n	80057a2 <HAL_DMA_IRQHandler+0xb12>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a77      	ldr	r2, [pc, #476]	; (8005970 <HAL_DMA_IRQHandler+0xce0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d004      	beq.n	80057a2 <HAL_DMA_IRQHandler+0xb12>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a75      	ldr	r2, [pc, #468]	; (8005974 <HAL_DMA_IRQHandler+0xce4>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d108      	bne.n	80057b4 <HAL_DMA_IRQHandler+0xb24>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0208 	bic.w	r2, r2, #8
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e007      	b.n	80057c4 <HAL_DMA_IRQHandler+0xb34>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0204 	bic.w	r2, r2, #4
 80057c2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 8165 	beq.w	8005a98 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057d6:	e15f      	b.n	8005a98 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	2202      	movs	r2, #2
 80057e2:	409a      	lsls	r2, r3
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	4013      	ands	r3, r2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 80c5 	beq.w	8005978 <HAL_DMA_IRQHandler+0xce8>
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 80bf 	beq.w	8005978 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057fe:	f003 031f 	and.w	r3, r3, #31
 8005802:	2202      	movs	r2, #2
 8005804:	409a      	lsls	r2, r3
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d018      	beq.n	8005846 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d109      	bne.n	8005832 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 813a 	beq.w	8005a9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005830:	e134      	b.n	8005a9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 8130 	beq.w	8005a9c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005844:	e12a      	b.n	8005a9c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f003 0320 	and.w	r3, r3, #32
 800584c:	2b00      	cmp	r3, #0
 800584e:	d168      	bne.n	8005922 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a38      	ldr	r2, [pc, #224]	; (8005938 <HAL_DMA_IRQHandler+0xca8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d04a      	beq.n	80058f0 <HAL_DMA_IRQHandler+0xc60>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a37      	ldr	r2, [pc, #220]	; (800593c <HAL_DMA_IRQHandler+0xcac>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d045      	beq.n	80058f0 <HAL_DMA_IRQHandler+0xc60>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a35      	ldr	r2, [pc, #212]	; (8005940 <HAL_DMA_IRQHandler+0xcb0>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d040      	beq.n	80058f0 <HAL_DMA_IRQHandler+0xc60>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a34      	ldr	r2, [pc, #208]	; (8005944 <HAL_DMA_IRQHandler+0xcb4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d03b      	beq.n	80058f0 <HAL_DMA_IRQHandler+0xc60>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a32      	ldr	r2, [pc, #200]	; (8005948 <HAL_DMA_IRQHandler+0xcb8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d036      	beq.n	80058f0 <HAL_DMA_IRQHandler+0xc60>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a31      	ldr	r2, [pc, #196]	; (800594c <HAL_DMA_IRQHandler+0xcbc>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d031      	beq.n	80058f0 <HAL_DMA_IRQHandler+0xc60>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a2f      	ldr	r2, [pc, #188]	; (8005950 <HAL_DMA_IRQHandler+0xcc0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d02c      	beq.n	80058f0 <HAL_DMA_IRQHandler+0xc60>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a2e      	ldr	r2, [pc, #184]	; (8005954 <HAL_DMA_IRQHandler+0xcc4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d027      	beq.n	80058f0 <HAL_DMA_IRQHandler+0xc60>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a2c      	ldr	r2, [pc, #176]	; (8005958 <HAL_DMA_IRQHandler+0xcc8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d022      	beq.n	80058f0 <HAL_DMA_IRQHandler+0xc60>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a2b      	ldr	r2, [pc, #172]	; (800595c <HAL_DMA_IRQHandler+0xccc>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d01d      	beq.n	80058f0 <HAL_DMA_IRQHandler+0xc60>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a29      	ldr	r2, [pc, #164]	; (8005960 <HAL_DMA_IRQHandler+0xcd0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d018      	beq.n	80058f0 <HAL_DMA_IRQHandler+0xc60>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a28      	ldr	r2, [pc, #160]	; (8005964 <HAL_DMA_IRQHandler+0xcd4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d013      	beq.n	80058f0 <HAL_DMA_IRQHandler+0xc60>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a26      	ldr	r2, [pc, #152]	; (8005968 <HAL_DMA_IRQHandler+0xcd8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00e      	beq.n	80058f0 <HAL_DMA_IRQHandler+0xc60>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a25      	ldr	r2, [pc, #148]	; (800596c <HAL_DMA_IRQHandler+0xcdc>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d009      	beq.n	80058f0 <HAL_DMA_IRQHandler+0xc60>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a23      	ldr	r2, [pc, #140]	; (8005970 <HAL_DMA_IRQHandler+0xce0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d004      	beq.n	80058f0 <HAL_DMA_IRQHandler+0xc60>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a22      	ldr	r2, [pc, #136]	; (8005974 <HAL_DMA_IRQHandler+0xce4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d108      	bne.n	8005902 <HAL_DMA_IRQHandler+0xc72>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0214 	bic.w	r2, r2, #20
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	e007      	b.n	8005912 <HAL_DMA_IRQHandler+0xc82>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 020a 	bic.w	r2, r2, #10
 8005910:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 80b8 	beq.w	8005a9c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005934:	e0b2      	b.n	8005a9c <HAL_DMA_IRQHandler+0xe0c>
 8005936:	bf00      	nop
 8005938:	40020010 	.word	0x40020010
 800593c:	40020028 	.word	0x40020028
 8005940:	40020040 	.word	0x40020040
 8005944:	40020058 	.word	0x40020058
 8005948:	40020070 	.word	0x40020070
 800594c:	40020088 	.word	0x40020088
 8005950:	400200a0 	.word	0x400200a0
 8005954:	400200b8 	.word	0x400200b8
 8005958:	40020410 	.word	0x40020410
 800595c:	40020428 	.word	0x40020428
 8005960:	40020440 	.word	0x40020440
 8005964:	40020458 	.word	0x40020458
 8005968:	40020470 	.word	0x40020470
 800596c:	40020488 	.word	0x40020488
 8005970:	400204a0 	.word	0x400204a0
 8005974:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800597c:	f003 031f 	and.w	r3, r3, #31
 8005980:	2208      	movs	r2, #8
 8005982:	409a      	lsls	r2, r3
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	4013      	ands	r3, r2
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 8088 	beq.w	8005a9e <HAL_DMA_IRQHandler+0xe0e>
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 8082 	beq.w	8005a9e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a41      	ldr	r2, [pc, #260]	; (8005aa4 <HAL_DMA_IRQHandler+0xe14>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d04a      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xdaa>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a3f      	ldr	r2, [pc, #252]	; (8005aa8 <HAL_DMA_IRQHandler+0xe18>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d045      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xdaa>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a3e      	ldr	r2, [pc, #248]	; (8005aac <HAL_DMA_IRQHandler+0xe1c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d040      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xdaa>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a3c      	ldr	r2, [pc, #240]	; (8005ab0 <HAL_DMA_IRQHandler+0xe20>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d03b      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xdaa>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a3b      	ldr	r2, [pc, #236]	; (8005ab4 <HAL_DMA_IRQHandler+0xe24>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d036      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xdaa>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a39      	ldr	r2, [pc, #228]	; (8005ab8 <HAL_DMA_IRQHandler+0xe28>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d031      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xdaa>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a38      	ldr	r2, [pc, #224]	; (8005abc <HAL_DMA_IRQHandler+0xe2c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d02c      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xdaa>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a36      	ldr	r2, [pc, #216]	; (8005ac0 <HAL_DMA_IRQHandler+0xe30>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d027      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xdaa>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a35      	ldr	r2, [pc, #212]	; (8005ac4 <HAL_DMA_IRQHandler+0xe34>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d022      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xdaa>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a33      	ldr	r2, [pc, #204]	; (8005ac8 <HAL_DMA_IRQHandler+0xe38>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d01d      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xdaa>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a32      	ldr	r2, [pc, #200]	; (8005acc <HAL_DMA_IRQHandler+0xe3c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d018      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xdaa>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a30      	ldr	r2, [pc, #192]	; (8005ad0 <HAL_DMA_IRQHandler+0xe40>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d013      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xdaa>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a2f      	ldr	r2, [pc, #188]	; (8005ad4 <HAL_DMA_IRQHandler+0xe44>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00e      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xdaa>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a2d      	ldr	r2, [pc, #180]	; (8005ad8 <HAL_DMA_IRQHandler+0xe48>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d009      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xdaa>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a2c      	ldr	r2, [pc, #176]	; (8005adc <HAL_DMA_IRQHandler+0xe4c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d004      	beq.n	8005a3a <HAL_DMA_IRQHandler+0xdaa>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a2a      	ldr	r2, [pc, #168]	; (8005ae0 <HAL_DMA_IRQHandler+0xe50>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d108      	bne.n	8005a4c <HAL_DMA_IRQHandler+0xdbc>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 021c 	bic.w	r2, r2, #28
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	e007      	b.n	8005a5c <HAL_DMA_IRQHandler+0xdcc>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 020e 	bic.w	r2, r2, #14
 8005a5a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a60:	f003 031f 	and.w	r3, r3, #31
 8005a64:	2201      	movs	r2, #1
 8005a66:	409a      	lsls	r2, r3
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	4798      	blx	r3
 8005a92:	e004      	b.n	8005a9e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005a94:	bf00      	nop
 8005a96:	e002      	b.n	8005a9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a98:	bf00      	nop
 8005a9a:	e000      	b.n	8005a9e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a9c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005a9e:	3728      	adds	r7, #40	; 0x28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40020010 	.word	0x40020010
 8005aa8:	40020028 	.word	0x40020028
 8005aac:	40020040 	.word	0x40020040
 8005ab0:	40020058 	.word	0x40020058
 8005ab4:	40020070 	.word	0x40020070
 8005ab8:	40020088 	.word	0x40020088
 8005abc:	400200a0 	.word	0x400200a0
 8005ac0:	400200b8 	.word	0x400200b8
 8005ac4:	40020410 	.word	0x40020410
 8005ac8:	40020428 	.word	0x40020428
 8005acc:	40020440 	.word	0x40020440
 8005ad0:	40020458 	.word	0x40020458
 8005ad4:	40020470 	.word	0x40020470
 8005ad8:	40020488 	.word	0x40020488
 8005adc:	400204a0 	.word	0x400204a0
 8005ae0:	400204b8 	.word	0x400204b8

08005ae4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a84      	ldr	r2, [pc, #528]	; (8005d14 <DMA_SetConfig+0x230>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d072      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a82      	ldr	r2, [pc, #520]	; (8005d18 <DMA_SetConfig+0x234>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d06d      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a81      	ldr	r2, [pc, #516]	; (8005d1c <DMA_SetConfig+0x238>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d068      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a7f      	ldr	r2, [pc, #508]	; (8005d20 <DMA_SetConfig+0x23c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d063      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a7e      	ldr	r2, [pc, #504]	; (8005d24 <DMA_SetConfig+0x240>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d05e      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a7c      	ldr	r2, [pc, #496]	; (8005d28 <DMA_SetConfig+0x244>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d059      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a7b      	ldr	r2, [pc, #492]	; (8005d2c <DMA_SetConfig+0x248>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d054      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a79      	ldr	r2, [pc, #484]	; (8005d30 <DMA_SetConfig+0x24c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d04f      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a78      	ldr	r2, [pc, #480]	; (8005d34 <DMA_SetConfig+0x250>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d04a      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a76      	ldr	r2, [pc, #472]	; (8005d38 <DMA_SetConfig+0x254>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d045      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a75      	ldr	r2, [pc, #468]	; (8005d3c <DMA_SetConfig+0x258>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d040      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a73      	ldr	r2, [pc, #460]	; (8005d40 <DMA_SetConfig+0x25c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d03b      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a72      	ldr	r2, [pc, #456]	; (8005d44 <DMA_SetConfig+0x260>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d036      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a70      	ldr	r2, [pc, #448]	; (8005d48 <DMA_SetConfig+0x264>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d031      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a6f      	ldr	r2, [pc, #444]	; (8005d4c <DMA_SetConfig+0x268>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d02c      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a6d      	ldr	r2, [pc, #436]	; (8005d50 <DMA_SetConfig+0x26c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d027      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a6c      	ldr	r2, [pc, #432]	; (8005d54 <DMA_SetConfig+0x270>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d022      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a6a      	ldr	r2, [pc, #424]	; (8005d58 <DMA_SetConfig+0x274>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d01d      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a69      	ldr	r2, [pc, #420]	; (8005d5c <DMA_SetConfig+0x278>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d018      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a67      	ldr	r2, [pc, #412]	; (8005d60 <DMA_SetConfig+0x27c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d013      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a66      	ldr	r2, [pc, #408]	; (8005d64 <DMA_SetConfig+0x280>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00e      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a64      	ldr	r2, [pc, #400]	; (8005d68 <DMA_SetConfig+0x284>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d009      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a63      	ldr	r2, [pc, #396]	; (8005d6c <DMA_SetConfig+0x288>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d004      	beq.n	8005bee <DMA_SetConfig+0x10a>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a61      	ldr	r2, [pc, #388]	; (8005d70 <DMA_SetConfig+0x28c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d101      	bne.n	8005bf2 <DMA_SetConfig+0x10e>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <DMA_SetConfig+0x110>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00d      	beq.n	8005c14 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c00:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d004      	beq.n	8005c14 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c12:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a3e      	ldr	r2, [pc, #248]	; (8005d14 <DMA_SetConfig+0x230>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d04a      	beq.n	8005cb4 <DMA_SetConfig+0x1d0>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a3d      	ldr	r2, [pc, #244]	; (8005d18 <DMA_SetConfig+0x234>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d045      	beq.n	8005cb4 <DMA_SetConfig+0x1d0>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a3b      	ldr	r2, [pc, #236]	; (8005d1c <DMA_SetConfig+0x238>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d040      	beq.n	8005cb4 <DMA_SetConfig+0x1d0>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a3a      	ldr	r2, [pc, #232]	; (8005d20 <DMA_SetConfig+0x23c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d03b      	beq.n	8005cb4 <DMA_SetConfig+0x1d0>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a38      	ldr	r2, [pc, #224]	; (8005d24 <DMA_SetConfig+0x240>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d036      	beq.n	8005cb4 <DMA_SetConfig+0x1d0>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a37      	ldr	r2, [pc, #220]	; (8005d28 <DMA_SetConfig+0x244>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d031      	beq.n	8005cb4 <DMA_SetConfig+0x1d0>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a35      	ldr	r2, [pc, #212]	; (8005d2c <DMA_SetConfig+0x248>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d02c      	beq.n	8005cb4 <DMA_SetConfig+0x1d0>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a34      	ldr	r2, [pc, #208]	; (8005d30 <DMA_SetConfig+0x24c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d027      	beq.n	8005cb4 <DMA_SetConfig+0x1d0>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a32      	ldr	r2, [pc, #200]	; (8005d34 <DMA_SetConfig+0x250>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d022      	beq.n	8005cb4 <DMA_SetConfig+0x1d0>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a31      	ldr	r2, [pc, #196]	; (8005d38 <DMA_SetConfig+0x254>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d01d      	beq.n	8005cb4 <DMA_SetConfig+0x1d0>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a2f      	ldr	r2, [pc, #188]	; (8005d3c <DMA_SetConfig+0x258>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d018      	beq.n	8005cb4 <DMA_SetConfig+0x1d0>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a2e      	ldr	r2, [pc, #184]	; (8005d40 <DMA_SetConfig+0x25c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d013      	beq.n	8005cb4 <DMA_SetConfig+0x1d0>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a2c      	ldr	r2, [pc, #176]	; (8005d44 <DMA_SetConfig+0x260>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d00e      	beq.n	8005cb4 <DMA_SetConfig+0x1d0>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a2b      	ldr	r2, [pc, #172]	; (8005d48 <DMA_SetConfig+0x264>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d009      	beq.n	8005cb4 <DMA_SetConfig+0x1d0>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a29      	ldr	r2, [pc, #164]	; (8005d4c <DMA_SetConfig+0x268>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d004      	beq.n	8005cb4 <DMA_SetConfig+0x1d0>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a28      	ldr	r2, [pc, #160]	; (8005d50 <DMA_SetConfig+0x26c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d101      	bne.n	8005cb8 <DMA_SetConfig+0x1d4>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e000      	b.n	8005cba <DMA_SetConfig+0x1d6>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d05a      	beq.n	8005d74 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc2:	f003 031f 	and.w	r3, r3, #31
 8005cc6:	223f      	movs	r2, #63	; 0x3f
 8005cc8:	409a      	lsls	r2, r3
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cdc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	2b40      	cmp	r3, #64	; 0x40
 8005cec:	d108      	bne.n	8005d00 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005cfe:	e087      	b.n	8005e10 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	60da      	str	r2, [r3, #12]
}
 8005d10:	e07e      	b.n	8005e10 <DMA_SetConfig+0x32c>
 8005d12:	bf00      	nop
 8005d14:	40020010 	.word	0x40020010
 8005d18:	40020028 	.word	0x40020028
 8005d1c:	40020040 	.word	0x40020040
 8005d20:	40020058 	.word	0x40020058
 8005d24:	40020070 	.word	0x40020070
 8005d28:	40020088 	.word	0x40020088
 8005d2c:	400200a0 	.word	0x400200a0
 8005d30:	400200b8 	.word	0x400200b8
 8005d34:	40020410 	.word	0x40020410
 8005d38:	40020428 	.word	0x40020428
 8005d3c:	40020440 	.word	0x40020440
 8005d40:	40020458 	.word	0x40020458
 8005d44:	40020470 	.word	0x40020470
 8005d48:	40020488 	.word	0x40020488
 8005d4c:	400204a0 	.word	0x400204a0
 8005d50:	400204b8 	.word	0x400204b8
 8005d54:	58025408 	.word	0x58025408
 8005d58:	5802541c 	.word	0x5802541c
 8005d5c:	58025430 	.word	0x58025430
 8005d60:	58025444 	.word	0x58025444
 8005d64:	58025458 	.word	0x58025458
 8005d68:	5802546c 	.word	0x5802546c
 8005d6c:	58025480 	.word	0x58025480
 8005d70:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a28      	ldr	r2, [pc, #160]	; (8005e1c <DMA_SetConfig+0x338>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d022      	beq.n	8005dc4 <DMA_SetConfig+0x2e0>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a27      	ldr	r2, [pc, #156]	; (8005e20 <DMA_SetConfig+0x33c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d01d      	beq.n	8005dc4 <DMA_SetConfig+0x2e0>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a25      	ldr	r2, [pc, #148]	; (8005e24 <DMA_SetConfig+0x340>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d018      	beq.n	8005dc4 <DMA_SetConfig+0x2e0>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a24      	ldr	r2, [pc, #144]	; (8005e28 <DMA_SetConfig+0x344>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d013      	beq.n	8005dc4 <DMA_SetConfig+0x2e0>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a22      	ldr	r2, [pc, #136]	; (8005e2c <DMA_SetConfig+0x348>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00e      	beq.n	8005dc4 <DMA_SetConfig+0x2e0>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a21      	ldr	r2, [pc, #132]	; (8005e30 <DMA_SetConfig+0x34c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d009      	beq.n	8005dc4 <DMA_SetConfig+0x2e0>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a1f      	ldr	r2, [pc, #124]	; (8005e34 <DMA_SetConfig+0x350>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d004      	beq.n	8005dc4 <DMA_SetConfig+0x2e0>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a1e      	ldr	r2, [pc, #120]	; (8005e38 <DMA_SetConfig+0x354>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d101      	bne.n	8005dc8 <DMA_SetConfig+0x2e4>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e000      	b.n	8005dca <DMA_SetConfig+0x2e6>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d020      	beq.n	8005e10 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd2:	f003 031f 	and.w	r3, r3, #31
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	409a      	lsls	r2, r3
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	2b40      	cmp	r3, #64	; 0x40
 8005dec:	d108      	bne.n	8005e00 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	60da      	str	r2, [r3, #12]
}
 8005dfe:	e007      	b.n	8005e10 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	60da      	str	r2, [r3, #12]
}
 8005e10:	bf00      	nop
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	58025408 	.word	0x58025408
 8005e20:	5802541c 	.word	0x5802541c
 8005e24:	58025430 	.word	0x58025430
 8005e28:	58025444 	.word	0x58025444
 8005e2c:	58025458 	.word	0x58025458
 8005e30:	5802546c 	.word	0x5802546c
 8005e34:	58025480 	.word	0x58025480
 8005e38:	58025494 	.word	0x58025494

08005e3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a42      	ldr	r2, [pc, #264]	; (8005f54 <DMA_CalcBaseAndBitshift+0x118>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d04a      	beq.n	8005ee4 <DMA_CalcBaseAndBitshift+0xa8>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a41      	ldr	r2, [pc, #260]	; (8005f58 <DMA_CalcBaseAndBitshift+0x11c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d045      	beq.n	8005ee4 <DMA_CalcBaseAndBitshift+0xa8>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a3f      	ldr	r2, [pc, #252]	; (8005f5c <DMA_CalcBaseAndBitshift+0x120>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d040      	beq.n	8005ee4 <DMA_CalcBaseAndBitshift+0xa8>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a3e      	ldr	r2, [pc, #248]	; (8005f60 <DMA_CalcBaseAndBitshift+0x124>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d03b      	beq.n	8005ee4 <DMA_CalcBaseAndBitshift+0xa8>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a3c      	ldr	r2, [pc, #240]	; (8005f64 <DMA_CalcBaseAndBitshift+0x128>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d036      	beq.n	8005ee4 <DMA_CalcBaseAndBitshift+0xa8>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a3b      	ldr	r2, [pc, #236]	; (8005f68 <DMA_CalcBaseAndBitshift+0x12c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d031      	beq.n	8005ee4 <DMA_CalcBaseAndBitshift+0xa8>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a39      	ldr	r2, [pc, #228]	; (8005f6c <DMA_CalcBaseAndBitshift+0x130>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d02c      	beq.n	8005ee4 <DMA_CalcBaseAndBitshift+0xa8>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a38      	ldr	r2, [pc, #224]	; (8005f70 <DMA_CalcBaseAndBitshift+0x134>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d027      	beq.n	8005ee4 <DMA_CalcBaseAndBitshift+0xa8>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a36      	ldr	r2, [pc, #216]	; (8005f74 <DMA_CalcBaseAndBitshift+0x138>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d022      	beq.n	8005ee4 <DMA_CalcBaseAndBitshift+0xa8>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a35      	ldr	r2, [pc, #212]	; (8005f78 <DMA_CalcBaseAndBitshift+0x13c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d01d      	beq.n	8005ee4 <DMA_CalcBaseAndBitshift+0xa8>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a33      	ldr	r2, [pc, #204]	; (8005f7c <DMA_CalcBaseAndBitshift+0x140>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d018      	beq.n	8005ee4 <DMA_CalcBaseAndBitshift+0xa8>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a32      	ldr	r2, [pc, #200]	; (8005f80 <DMA_CalcBaseAndBitshift+0x144>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d013      	beq.n	8005ee4 <DMA_CalcBaseAndBitshift+0xa8>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a30      	ldr	r2, [pc, #192]	; (8005f84 <DMA_CalcBaseAndBitshift+0x148>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00e      	beq.n	8005ee4 <DMA_CalcBaseAndBitshift+0xa8>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a2f      	ldr	r2, [pc, #188]	; (8005f88 <DMA_CalcBaseAndBitshift+0x14c>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d009      	beq.n	8005ee4 <DMA_CalcBaseAndBitshift+0xa8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a2d      	ldr	r2, [pc, #180]	; (8005f8c <DMA_CalcBaseAndBitshift+0x150>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d004      	beq.n	8005ee4 <DMA_CalcBaseAndBitshift+0xa8>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a2c      	ldr	r2, [pc, #176]	; (8005f90 <DMA_CalcBaseAndBitshift+0x154>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d101      	bne.n	8005ee8 <DMA_CalcBaseAndBitshift+0xac>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e000      	b.n	8005eea <DMA_CalcBaseAndBitshift+0xae>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d024      	beq.n	8005f38 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	3b10      	subs	r3, #16
 8005ef6:	4a27      	ldr	r2, [pc, #156]	; (8005f94 <DMA_CalcBaseAndBitshift+0x158>)
 8005ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8005efc:	091b      	lsrs	r3, r3, #4
 8005efe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	4a24      	ldr	r2, [pc, #144]	; (8005f98 <DMA_CalcBaseAndBitshift+0x15c>)
 8005f08:	5cd3      	ldrb	r3, [r2, r3]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b03      	cmp	r3, #3
 8005f14:	d908      	bls.n	8005f28 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	4b1f      	ldr	r3, [pc, #124]	; (8005f9c <DMA_CalcBaseAndBitshift+0x160>)
 8005f1e:	4013      	ands	r3, r2
 8005f20:	1d1a      	adds	r2, r3, #4
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	659a      	str	r2, [r3, #88]	; 0x58
 8005f26:	e00d      	b.n	8005f44 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	4b1b      	ldr	r3, [pc, #108]	; (8005f9c <DMA_CalcBaseAndBitshift+0x160>)
 8005f30:	4013      	ands	r3, r2
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6593      	str	r3, [r2, #88]	; 0x58
 8005f36:	e005      	b.n	8005f44 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	40020010 	.word	0x40020010
 8005f58:	40020028 	.word	0x40020028
 8005f5c:	40020040 	.word	0x40020040
 8005f60:	40020058 	.word	0x40020058
 8005f64:	40020070 	.word	0x40020070
 8005f68:	40020088 	.word	0x40020088
 8005f6c:	400200a0 	.word	0x400200a0
 8005f70:	400200b8 	.word	0x400200b8
 8005f74:	40020410 	.word	0x40020410
 8005f78:	40020428 	.word	0x40020428
 8005f7c:	40020440 	.word	0x40020440
 8005f80:	40020458 	.word	0x40020458
 8005f84:	40020470 	.word	0x40020470
 8005f88:	40020488 	.word	0x40020488
 8005f8c:	400204a0 	.word	0x400204a0
 8005f90:	400204b8 	.word	0x400204b8
 8005f94:	aaaaaaab 	.word	0xaaaaaaab
 8005f98:	0800e1f0 	.word	0x0800e1f0
 8005f9c:	fffffc00 	.word	0xfffffc00

08005fa0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d120      	bne.n	8005ff6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d858      	bhi.n	800606e <DMA_CheckFifoParam+0xce>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <DMA_CheckFifoParam+0x24>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	08005fd5 	.word	0x08005fd5
 8005fc8:	08005fe7 	.word	0x08005fe7
 8005fcc:	08005fd5 	.word	0x08005fd5
 8005fd0:	0800606f 	.word	0x0800606f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d048      	beq.n	8006072 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fe4:	e045      	b.n	8006072 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fee:	d142      	bne.n	8006076 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ff4:	e03f      	b.n	8006076 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ffe:	d123      	bne.n	8006048 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006004:	2b03      	cmp	r3, #3
 8006006:	d838      	bhi.n	800607a <DMA_CheckFifoParam+0xda>
 8006008:	a201      	add	r2, pc, #4	; (adr r2, 8006010 <DMA_CheckFifoParam+0x70>)
 800600a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600e:	bf00      	nop
 8006010:	08006021 	.word	0x08006021
 8006014:	08006027 	.word	0x08006027
 8006018:	08006021 	.word	0x08006021
 800601c:	08006039 	.word	0x08006039
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	73fb      	strb	r3, [r7, #15]
        break;
 8006024:	e030      	b.n	8006088 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d025      	beq.n	800607e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006036:	e022      	b.n	800607e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006040:	d11f      	bne.n	8006082 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006046:	e01c      	b.n	8006082 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604c:	2b02      	cmp	r3, #2
 800604e:	d902      	bls.n	8006056 <DMA_CheckFifoParam+0xb6>
 8006050:	2b03      	cmp	r3, #3
 8006052:	d003      	beq.n	800605c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006054:	e018      	b.n	8006088 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	73fb      	strb	r3, [r7, #15]
        break;
 800605a:	e015      	b.n	8006088 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00e      	beq.n	8006086 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	73fb      	strb	r3, [r7, #15]
    break;
 800606c:	e00b      	b.n	8006086 <DMA_CheckFifoParam+0xe6>
        break;
 800606e:	bf00      	nop
 8006070:	e00a      	b.n	8006088 <DMA_CheckFifoParam+0xe8>
        break;
 8006072:	bf00      	nop
 8006074:	e008      	b.n	8006088 <DMA_CheckFifoParam+0xe8>
        break;
 8006076:	bf00      	nop
 8006078:	e006      	b.n	8006088 <DMA_CheckFifoParam+0xe8>
        break;
 800607a:	bf00      	nop
 800607c:	e004      	b.n	8006088 <DMA_CheckFifoParam+0xe8>
        break;
 800607e:	bf00      	nop
 8006080:	e002      	b.n	8006088 <DMA_CheckFifoParam+0xe8>
        break;
 8006082:	bf00      	nop
 8006084:	e000      	b.n	8006088 <DMA_CheckFifoParam+0xe8>
    break;
 8006086:	bf00      	nop
    }
  }

  return status;
 8006088:	7bfb      	ldrb	r3, [r7, #15]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop

08006098 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a38      	ldr	r2, [pc, #224]	; (800618c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d022      	beq.n	80060f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a36      	ldr	r2, [pc, #216]	; (8006190 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d01d      	beq.n	80060f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a35      	ldr	r2, [pc, #212]	; (8006194 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d018      	beq.n	80060f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a33      	ldr	r2, [pc, #204]	; (8006198 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d013      	beq.n	80060f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a32      	ldr	r2, [pc, #200]	; (800619c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d00e      	beq.n	80060f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a30      	ldr	r2, [pc, #192]	; (80061a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d009      	beq.n	80060f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a2f      	ldr	r2, [pc, #188]	; (80061a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d004      	beq.n	80060f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a2d      	ldr	r2, [pc, #180]	; (80061a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d101      	bne.n	80060fa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80060fa:	2300      	movs	r3, #0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d01a      	beq.n	8006136 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	3b08      	subs	r3, #8
 8006108:	4a28      	ldr	r2, [pc, #160]	; (80061ac <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800610a:	fba2 2303 	umull	r2, r3, r2, r3
 800610e:	091b      	lsrs	r3, r3, #4
 8006110:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	4b26      	ldr	r3, [pc, #152]	; (80061b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006116:	4413      	add	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	461a      	mov	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a24      	ldr	r2, [pc, #144]	; (80061b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006124:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f003 031f 	and.w	r3, r3, #31
 800612c:	2201      	movs	r2, #1
 800612e:	409a      	lsls	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006134:	e024      	b.n	8006180 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	b2db      	uxtb	r3, r3
 800613c:	3b10      	subs	r3, #16
 800613e:	4a1e      	ldr	r2, [pc, #120]	; (80061b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006140:	fba2 2303 	umull	r2, r3, r2, r3
 8006144:	091b      	lsrs	r3, r3, #4
 8006146:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	4a1c      	ldr	r2, [pc, #112]	; (80061bc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d806      	bhi.n	800615e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	4a1b      	ldr	r2, [pc, #108]	; (80061c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d902      	bls.n	800615e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3308      	adds	r3, #8
 800615c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4b18      	ldr	r3, [pc, #96]	; (80061c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006162:	4413      	add	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	461a      	mov	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a16      	ldr	r2, [pc, #88]	; (80061c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006170:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f003 031f 	and.w	r3, r3, #31
 8006178:	2201      	movs	r2, #1
 800617a:	409a      	lsls	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006180:	bf00      	nop
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	58025408 	.word	0x58025408
 8006190:	5802541c 	.word	0x5802541c
 8006194:	58025430 	.word	0x58025430
 8006198:	58025444 	.word	0x58025444
 800619c:	58025458 	.word	0x58025458
 80061a0:	5802546c 	.word	0x5802546c
 80061a4:	58025480 	.word	0x58025480
 80061a8:	58025494 	.word	0x58025494
 80061ac:	cccccccd 	.word	0xcccccccd
 80061b0:	16009600 	.word	0x16009600
 80061b4:	58025880 	.word	0x58025880
 80061b8:	aaaaaaab 	.word	0xaaaaaaab
 80061bc:	400204b8 	.word	0x400204b8
 80061c0:	4002040f 	.word	0x4002040f
 80061c4:	10008200 	.word	0x10008200
 80061c8:	40020880 	.word	0x40020880

080061cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d04a      	beq.n	8006278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d847      	bhi.n	8006278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a25      	ldr	r2, [pc, #148]	; (8006284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d022      	beq.n	8006238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a24      	ldr	r2, [pc, #144]	; (8006288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d01d      	beq.n	8006238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a22      	ldr	r2, [pc, #136]	; (800628c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d018      	beq.n	8006238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a21      	ldr	r2, [pc, #132]	; (8006290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d013      	beq.n	8006238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1f      	ldr	r2, [pc, #124]	; (8006294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00e      	beq.n	8006238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1e      	ldr	r2, [pc, #120]	; (8006298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d009      	beq.n	8006238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a1c      	ldr	r2, [pc, #112]	; (800629c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d004      	beq.n	8006238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a1b      	ldr	r2, [pc, #108]	; (80062a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d101      	bne.n	800623c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006238:	2301      	movs	r3, #1
 800623a:	e000      	b.n	800623e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800623c:	2300      	movs	r3, #0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	4b17      	ldr	r3, [pc, #92]	; (80062a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	461a      	mov	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a15      	ldr	r2, [pc, #84]	; (80062a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006254:	671a      	str	r2, [r3, #112]	; 0x70
 8006256:	e009      	b.n	800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4b14      	ldr	r3, [pc, #80]	; (80062ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	461a      	mov	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a11      	ldr	r2, [pc, #68]	; (80062b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800626a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3b01      	subs	r3, #1
 8006270:	2201      	movs	r2, #1
 8006272:	409a      	lsls	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006278:	bf00      	nop
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	58025408 	.word	0x58025408
 8006288:	5802541c 	.word	0x5802541c
 800628c:	58025430 	.word	0x58025430
 8006290:	58025444 	.word	0x58025444
 8006294:	58025458 	.word	0x58025458
 8006298:	5802546c 	.word	0x5802546c
 800629c:	58025480 	.word	0x58025480
 80062a0:	58025494 	.word	0x58025494
 80062a4:	1600963f 	.word	0x1600963f
 80062a8:	58025940 	.word	0x58025940
 80062ac:	1000823f 	.word	0x1000823f
 80062b0:	40020940 	.word	0x40020940

080062b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b089      	sub	sp, #36	; 0x24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80062be:	2300      	movs	r3, #0
 80062c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80062c2:	4b89      	ldr	r3, [pc, #548]	; (80064e8 <HAL_GPIO_Init+0x234>)
 80062c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80062c6:	e194      	b.n	80065f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	2101      	movs	r1, #1
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	fa01 f303 	lsl.w	r3, r1, r3
 80062d4:	4013      	ands	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 8186 	beq.w	80065ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d00b      	beq.n	8006300 <HAL_GPIO_Init+0x4c>
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d007      	beq.n	8006300 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062f4:	2b11      	cmp	r3, #17
 80062f6:	d003      	beq.n	8006300 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2b12      	cmp	r3, #18
 80062fe:	d130      	bne.n	8006362 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	2203      	movs	r2, #3
 800630c:	fa02 f303 	lsl.w	r3, r2, r3
 8006310:	43db      	mvns	r3, r3
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	4013      	ands	r3, r2
 8006316:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	fa02 f303 	lsl.w	r3, r2, r3
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	4313      	orrs	r3, r2
 8006328:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006336:	2201      	movs	r2, #1
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	fa02 f303 	lsl.w	r3, r2, r3
 800633e:	43db      	mvns	r3, r3
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	4013      	ands	r3, r2
 8006344:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	091b      	lsrs	r3, r3, #4
 800634c:	f003 0201 	and.w	r2, r3, #1
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	fa02 f303 	lsl.w	r3, r2, r3
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	4313      	orrs	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	2203      	movs	r2, #3
 800636e:	fa02 f303 	lsl.w	r3, r2, r3
 8006372:	43db      	mvns	r3, r3
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	4013      	ands	r3, r2
 8006378:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	689a      	ldr	r2, [r3, #8]
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	fa02 f303 	lsl.w	r3, r2, r3
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	4313      	orrs	r3, r2
 800638a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b02      	cmp	r3, #2
 8006398:	d003      	beq.n	80063a2 <HAL_GPIO_Init+0xee>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b12      	cmp	r3, #18
 80063a0:	d123      	bne.n	80063ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	08da      	lsrs	r2, r3, #3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3208      	adds	r2, #8
 80063aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	220f      	movs	r2, #15
 80063ba:	fa02 f303 	lsl.w	r3, r2, r3
 80063be:	43db      	mvns	r3, r3
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	4013      	ands	r3, r2
 80063c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	691a      	ldr	r2, [r3, #16]
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	fa02 f303 	lsl.w	r3, r2, r3
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	4313      	orrs	r3, r2
 80063da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	08da      	lsrs	r2, r3, #3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3208      	adds	r2, #8
 80063e4:	69b9      	ldr	r1, [r7, #24]
 80063e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	2203      	movs	r2, #3
 80063f6:	fa02 f303 	lsl.w	r3, r2, r3
 80063fa:	43db      	mvns	r3, r3
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	4013      	ands	r3, r2
 8006400:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f003 0203 	and.w	r2, r3, #3
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	4313      	orrs	r3, r2
 8006416:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 80e0 	beq.w	80065ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800642c:	4b2f      	ldr	r3, [pc, #188]	; (80064ec <HAL_GPIO_Init+0x238>)
 800642e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006432:	4a2e      	ldr	r2, [pc, #184]	; (80064ec <HAL_GPIO_Init+0x238>)
 8006434:	f043 0302 	orr.w	r3, r3, #2
 8006438:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800643c:	4b2b      	ldr	r3, [pc, #172]	; (80064ec <HAL_GPIO_Init+0x238>)
 800643e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800644a:	4a29      	ldr	r2, [pc, #164]	; (80064f0 <HAL_GPIO_Init+0x23c>)
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	089b      	lsrs	r3, r3, #2
 8006450:	3302      	adds	r3, #2
 8006452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	220f      	movs	r2, #15
 8006462:	fa02 f303 	lsl.w	r3, r2, r3
 8006466:	43db      	mvns	r3, r3
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	4013      	ands	r3, r2
 800646c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a20      	ldr	r2, [pc, #128]	; (80064f4 <HAL_GPIO_Init+0x240>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d052      	beq.n	800651c <HAL_GPIO_Init+0x268>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a1f      	ldr	r2, [pc, #124]	; (80064f8 <HAL_GPIO_Init+0x244>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d031      	beq.n	80064e2 <HAL_GPIO_Init+0x22e>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a1e      	ldr	r2, [pc, #120]	; (80064fc <HAL_GPIO_Init+0x248>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d02b      	beq.n	80064de <HAL_GPIO_Init+0x22a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a1d      	ldr	r2, [pc, #116]	; (8006500 <HAL_GPIO_Init+0x24c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d025      	beq.n	80064da <HAL_GPIO_Init+0x226>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a1c      	ldr	r2, [pc, #112]	; (8006504 <HAL_GPIO_Init+0x250>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d01f      	beq.n	80064d6 <HAL_GPIO_Init+0x222>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a1b      	ldr	r2, [pc, #108]	; (8006508 <HAL_GPIO_Init+0x254>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d019      	beq.n	80064d2 <HAL_GPIO_Init+0x21e>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a1a      	ldr	r2, [pc, #104]	; (800650c <HAL_GPIO_Init+0x258>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d013      	beq.n	80064ce <HAL_GPIO_Init+0x21a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a19      	ldr	r2, [pc, #100]	; (8006510 <HAL_GPIO_Init+0x25c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00d      	beq.n	80064ca <HAL_GPIO_Init+0x216>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a18      	ldr	r2, [pc, #96]	; (8006514 <HAL_GPIO_Init+0x260>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d007      	beq.n	80064c6 <HAL_GPIO_Init+0x212>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a17      	ldr	r2, [pc, #92]	; (8006518 <HAL_GPIO_Init+0x264>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d101      	bne.n	80064c2 <HAL_GPIO_Init+0x20e>
 80064be:	2309      	movs	r3, #9
 80064c0:	e02d      	b.n	800651e <HAL_GPIO_Init+0x26a>
 80064c2:	230a      	movs	r3, #10
 80064c4:	e02b      	b.n	800651e <HAL_GPIO_Init+0x26a>
 80064c6:	2308      	movs	r3, #8
 80064c8:	e029      	b.n	800651e <HAL_GPIO_Init+0x26a>
 80064ca:	2307      	movs	r3, #7
 80064cc:	e027      	b.n	800651e <HAL_GPIO_Init+0x26a>
 80064ce:	2306      	movs	r3, #6
 80064d0:	e025      	b.n	800651e <HAL_GPIO_Init+0x26a>
 80064d2:	2305      	movs	r3, #5
 80064d4:	e023      	b.n	800651e <HAL_GPIO_Init+0x26a>
 80064d6:	2304      	movs	r3, #4
 80064d8:	e021      	b.n	800651e <HAL_GPIO_Init+0x26a>
 80064da:	2303      	movs	r3, #3
 80064dc:	e01f      	b.n	800651e <HAL_GPIO_Init+0x26a>
 80064de:	2302      	movs	r3, #2
 80064e0:	e01d      	b.n	800651e <HAL_GPIO_Init+0x26a>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e01b      	b.n	800651e <HAL_GPIO_Init+0x26a>
 80064e6:	bf00      	nop
 80064e8:	58000080 	.word	0x58000080
 80064ec:	58024400 	.word	0x58024400
 80064f0:	58000400 	.word	0x58000400
 80064f4:	58020000 	.word	0x58020000
 80064f8:	58020400 	.word	0x58020400
 80064fc:	58020800 	.word	0x58020800
 8006500:	58020c00 	.word	0x58020c00
 8006504:	58021000 	.word	0x58021000
 8006508:	58021400 	.word	0x58021400
 800650c:	58021800 	.word	0x58021800
 8006510:	58021c00 	.word	0x58021c00
 8006514:	58022000 	.word	0x58022000
 8006518:	58022400 	.word	0x58022400
 800651c:	2300      	movs	r3, #0
 800651e:	69fa      	ldr	r2, [r7, #28]
 8006520:	f002 0203 	and.w	r2, r2, #3
 8006524:	0092      	lsls	r2, r2, #2
 8006526:	4093      	lsls	r3, r2
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	4313      	orrs	r3, r2
 800652c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800652e:	4938      	ldr	r1, [pc, #224]	; (8006610 <HAL_GPIO_Init+0x35c>)
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	089b      	lsrs	r3, r3, #2
 8006534:	3302      	adds	r3, #2
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	43db      	mvns	r3, r3
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	4013      	ands	r3, r2
 800654a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d003      	beq.n	8006560 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	43db      	mvns	r3, r3
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	4013      	ands	r3, r2
 8006574:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	43db      	mvns	r3, r3
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	4013      	ands	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80065b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80065be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	43db      	mvns	r3, r3
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	4013      	ands	r3, r2
 80065ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80065e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	3301      	adds	r3, #1
 80065f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	fa22 f303 	lsr.w	r3, r2, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f47f ae63 	bne.w	80062c8 <HAL_GPIO_Init+0x14>
  }
}
 8006602:	bf00      	nop
 8006604:	3724      	adds	r7, #36	; 0x24
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	58000400 	.word	0x58000400

08006614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	807b      	strh	r3, [r7, #2]
 8006620:	4613      	mov	r3, r2
 8006622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006624:	787b      	ldrb	r3, [r7, #1]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800662a:	887a      	ldrh	r2, [r7, #2]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006630:	e003      	b.n	800663a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006632:	887b      	ldrh	r3, [r7, #2]
 8006634:	041a      	lsls	r2, r3, #16
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	619a      	str	r2, [r3, #24]
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	460b      	mov	r3, r1
 8006650:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695a      	ldr	r2, [r3, #20]
 8006656:	887b      	ldrh	r3, [r7, #2]
 8006658:	401a      	ands	r2, r3
 800665a:	887b      	ldrh	r3, [r7, #2]
 800665c:	429a      	cmp	r2, r3
 800665e:	d104      	bne.n	800666a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006660:	887b      	ldrh	r3, [r7, #2]
 8006662:	041a      	lsls	r2, r3, #16
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006668:	e002      	b.n	8006670 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800666a:	887a      	ldrh	r2, [r7, #2]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	619a      	str	r2, [r3, #24]
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006684:	4b19      	ldr	r3, [pc, #100]	; (80066ec <HAL_PWREx_ConfigSupply+0x70>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b04      	cmp	r3, #4
 800668e:	d00a      	beq.n	80066a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006690:	4b16      	ldr	r3, [pc, #88]	; (80066ec <HAL_PWREx_ConfigSupply+0x70>)
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f003 0307 	and.w	r3, r3, #7
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	429a      	cmp	r2, r3
 800669c:	d001      	beq.n	80066a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e01f      	b.n	80066e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	e01d      	b.n	80066e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80066a6:	4b11      	ldr	r3, [pc, #68]	; (80066ec <HAL_PWREx_ConfigSupply+0x70>)
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f023 0207 	bic.w	r2, r3, #7
 80066ae:	490f      	ldr	r1, [pc, #60]	; (80066ec <HAL_PWREx_ConfigSupply+0x70>)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80066b6:	f7fb feff 	bl	80024b8 <HAL_GetTick>
 80066ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80066bc:	e009      	b.n	80066d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80066be:	f7fb fefb 	bl	80024b8 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066cc:	d901      	bls.n	80066d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e007      	b.n	80066e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80066d2:	4b06      	ldr	r3, [pc, #24]	; (80066ec <HAL_PWREx_ConfigSupply+0x70>)
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066de:	d1ee      	bne.n	80066be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	58024800 	.word	0x58024800

080066f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b08c      	sub	sp, #48	; 0x30
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e3c4      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 8087 	beq.w	800681e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006710:	4ba2      	ldr	r3, [pc, #648]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006718:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800671a:	4ba0      	ldr	r3, [pc, #640]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 800671c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006722:	2b10      	cmp	r3, #16
 8006724:	d007      	beq.n	8006736 <HAL_RCC_OscConfig+0x46>
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	2b18      	cmp	r3, #24
 800672a:	d110      	bne.n	800674e <HAL_RCC_OscConfig+0x5e>
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d10b      	bne.n	800674e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006736:	4b99      	ldr	r3, [pc, #612]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d06c      	beq.n	800681c <HAL_RCC_OscConfig+0x12c>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d168      	bne.n	800681c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e39e      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006756:	d106      	bne.n	8006766 <HAL_RCC_OscConfig+0x76>
 8006758:	4b90      	ldr	r3, [pc, #576]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a8f      	ldr	r2, [pc, #572]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 800675e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	e02e      	b.n	80067c4 <HAL_RCC_OscConfig+0xd4>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10c      	bne.n	8006788 <HAL_RCC_OscConfig+0x98>
 800676e:	4b8b      	ldr	r3, [pc, #556]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a8a      	ldr	r2, [pc, #552]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 8006774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	4b88      	ldr	r3, [pc, #544]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a87      	ldr	r2, [pc, #540]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 8006780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	e01d      	b.n	80067c4 <HAL_RCC_OscConfig+0xd4>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006790:	d10c      	bne.n	80067ac <HAL_RCC_OscConfig+0xbc>
 8006792:	4b82      	ldr	r3, [pc, #520]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a81      	ldr	r2, [pc, #516]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 8006798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	4b7f      	ldr	r3, [pc, #508]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a7e      	ldr	r2, [pc, #504]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 80067a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	e00b      	b.n	80067c4 <HAL_RCC_OscConfig+0xd4>
 80067ac:	4b7b      	ldr	r3, [pc, #492]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a7a      	ldr	r2, [pc, #488]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 80067b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	4b78      	ldr	r3, [pc, #480]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a77      	ldr	r2, [pc, #476]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 80067be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d013      	beq.n	80067f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067cc:	f7fb fe74 	bl	80024b8 <HAL_GetTick>
 80067d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067d4:	f7fb fe70 	bl	80024b8 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b64      	cmp	r3, #100	; 0x64
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e352      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80067e6:	4b6d      	ldr	r3, [pc, #436]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0f0      	beq.n	80067d4 <HAL_RCC_OscConfig+0xe4>
 80067f2:	e014      	b.n	800681e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f4:	f7fb fe60 	bl	80024b8 <HAL_GetTick>
 80067f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067fa:	e008      	b.n	800680e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067fc:	f7fb fe5c 	bl	80024b8 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b64      	cmp	r3, #100	; 0x64
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e33e      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800680e:	4b63      	ldr	r3, [pc, #396]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1f0      	bne.n	80067fc <HAL_RCC_OscConfig+0x10c>
 800681a:	e000      	b.n	800681e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800681c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 8092 	beq.w	8006950 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800682c:	4b5b      	ldr	r3, [pc, #364]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006834:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006836:	4b59      	ldr	r3, [pc, #356]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d007      	beq.n	8006852 <HAL_RCC_OscConfig+0x162>
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	2b18      	cmp	r3, #24
 8006846:	d12d      	bne.n	80068a4 <HAL_RCC_OscConfig+0x1b4>
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	f003 0303 	and.w	r3, r3, #3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d128      	bne.n	80068a4 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006852:	4b52      	ldr	r3, [pc, #328]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d005      	beq.n	800686a <HAL_RCC_OscConfig+0x17a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e310      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800686a:	f7fb fe53 	bl	8002514 <HAL_GetREVID>
 800686e:	4602      	mov	r2, r0
 8006870:	f241 0303 	movw	r3, #4099	; 0x1003
 8006874:	429a      	cmp	r2, r3
 8006876:	d80a      	bhi.n	800688e <HAL_RCC_OscConfig+0x19e>
 8006878:	4b48      	ldr	r3, [pc, #288]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	031b      	lsls	r3, r3, #12
 8006886:	4945      	ldr	r1, [pc, #276]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 8006888:	4313      	orrs	r3, r2
 800688a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800688c:	e060      	b.n	8006950 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800688e:	4b43      	ldr	r3, [pc, #268]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	061b      	lsls	r3, r3, #24
 800689c:	493f      	ldr	r1, [pc, #252]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068a2:	e055      	b.n	8006950 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d038      	beq.n	800691e <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80068ac:	4b3b      	ldr	r3, [pc, #236]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f023 0219 	bic.w	r2, r3, #25
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	4938      	ldr	r1, [pc, #224]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068be:	f7fb fdfb 	bl	80024b8 <HAL_GetTick>
 80068c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068c4:	e008      	b.n	80068d8 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068c6:	f7fb fdf7 	bl	80024b8 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d901      	bls.n	80068d8 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e2d9      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068d8:	4b30      	ldr	r3, [pc, #192]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d0f0      	beq.n	80068c6 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068e4:	f7fb fe16 	bl	8002514 <HAL_GetREVID>
 80068e8:	4602      	mov	r2, r0
 80068ea:	f241 0303 	movw	r3, #4099	; 0x1003
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d80a      	bhi.n	8006908 <HAL_RCC_OscConfig+0x218>
 80068f2:	4b2a      	ldr	r3, [pc, #168]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	031b      	lsls	r3, r3, #12
 8006900:	4926      	ldr	r1, [pc, #152]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 8006902:	4313      	orrs	r3, r2
 8006904:	604b      	str	r3, [r1, #4]
 8006906:	e023      	b.n	8006950 <HAL_RCC_OscConfig+0x260>
 8006908:	4b24      	ldr	r3, [pc, #144]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	061b      	lsls	r3, r3, #24
 8006916:	4921      	ldr	r1, [pc, #132]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 8006918:	4313      	orrs	r3, r2
 800691a:	604b      	str	r3, [r1, #4]
 800691c:	e018      	b.n	8006950 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800691e:	4b1f      	ldr	r3, [pc, #124]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a1e      	ldr	r2, [pc, #120]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 8006924:	f023 0301 	bic.w	r3, r3, #1
 8006928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692a:	f7fb fdc5 	bl	80024b8 <HAL_GetTick>
 800692e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006930:	e008      	b.n	8006944 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006932:	f7fb fdc1 	bl	80024b8 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d901      	bls.n	8006944 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e2a3      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006944:	4b15      	ldr	r3, [pc, #84]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0304 	and.w	r3, r3, #4
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1f0      	bne.n	8006932 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0310 	and.w	r3, r3, #16
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 8091 	beq.w	8006a80 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800695e:	4b0f      	ldr	r3, [pc, #60]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006966:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006968:	4b0c      	ldr	r3, [pc, #48]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 800696a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	2b08      	cmp	r3, #8
 8006972:	d007      	beq.n	8006984 <HAL_RCC_OscConfig+0x294>
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	2b18      	cmp	r3, #24
 8006978:	d12f      	bne.n	80069da <HAL_RCC_OscConfig+0x2ea>
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f003 0303 	and.w	r3, r3, #3
 8006980:	2b01      	cmp	r3, #1
 8006982:	d12a      	bne.n	80069da <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006984:	4b05      	ldr	r3, [pc, #20]	; (800699c <HAL_RCC_OscConfig+0x2ac>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800698c:	2b00      	cmp	r3, #0
 800698e:	d007      	beq.n	80069a0 <HAL_RCC_OscConfig+0x2b0>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	2b80      	cmp	r3, #128	; 0x80
 8006996:	d003      	beq.n	80069a0 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e277      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
 800699c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80069a0:	f7fb fdb8 	bl	8002514 <HAL_GetREVID>
 80069a4:	4602      	mov	r2, r0
 80069a6:	f241 0303 	movw	r3, #4099	; 0x1003
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d80a      	bhi.n	80069c4 <HAL_RCC_OscConfig+0x2d4>
 80069ae:	4ba2      	ldr	r3, [pc, #648]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	069b      	lsls	r3, r3, #26
 80069bc:	499e      	ldr	r1, [pc, #632]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80069c2:	e05d      	b.n	8006a80 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80069c4:	4b9c      	ldr	r3, [pc, #624]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	061b      	lsls	r3, r3, #24
 80069d2:	4999      	ldr	r1, [pc, #612]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80069d8:	e052      	b.n	8006a80 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d035      	beq.n	8006a4e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80069e2:	4b95      	ldr	r3, [pc, #596]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a94      	ldr	r2, [pc, #592]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 80069e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ee:	f7fb fd63 	bl	80024b8 <HAL_GetTick>
 80069f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80069f4:	e008      	b.n	8006a08 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80069f6:	f7fb fd5f 	bl	80024b8 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d901      	bls.n	8006a08 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e241      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a08:	4b8b      	ldr	r3, [pc, #556]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d0f0      	beq.n	80069f6 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a14:	f7fb fd7e 	bl	8002514 <HAL_GetREVID>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	f241 0303 	movw	r3, #4099	; 0x1003
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d80a      	bhi.n	8006a38 <HAL_RCC_OscConfig+0x348>
 8006a22:	4b85      	ldr	r3, [pc, #532]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	069b      	lsls	r3, r3, #26
 8006a30:	4981      	ldr	r1, [pc, #516]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	604b      	str	r3, [r1, #4]
 8006a36:	e023      	b.n	8006a80 <HAL_RCC_OscConfig+0x390>
 8006a38:	4b7f      	ldr	r3, [pc, #508]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	061b      	lsls	r3, r3, #24
 8006a46:	497c      	ldr	r1, [pc, #496]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60cb      	str	r3, [r1, #12]
 8006a4c:	e018      	b.n	8006a80 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006a4e:	4b7a      	ldr	r3, [pc, #488]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a79      	ldr	r2, [pc, #484]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a5a:	f7fb fd2d 	bl	80024b8 <HAL_GetTick>
 8006a5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006a60:	e008      	b.n	8006a74 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006a62:	f7fb fd29 	bl	80024b8 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d901      	bls.n	8006a74 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e20b      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006a74:	4b70      	ldr	r3, [pc, #448]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1f0      	bne.n	8006a62 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0308 	and.w	r3, r3, #8
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d036      	beq.n	8006afa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d019      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a94:	4b68      	ldr	r3, [pc, #416]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a98:	4a67      	ldr	r2, [pc, #412]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006a9a:	f043 0301 	orr.w	r3, r3, #1
 8006a9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa0:	f7fb fd0a 	bl	80024b8 <HAL_GetTick>
 8006aa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006aa6:	e008      	b.n	8006aba <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006aa8:	f7fb fd06 	bl	80024b8 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e1e8      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006aba:	4b5f      	ldr	r3, [pc, #380]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d0f0      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x3b8>
 8006ac6:	e018      	b.n	8006afa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ac8:	4b5b      	ldr	r3, [pc, #364]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006acc:	4a5a      	ldr	r2, [pc, #360]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006ace:	f023 0301 	bic.w	r3, r3, #1
 8006ad2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad4:	f7fb fcf0 	bl	80024b8 <HAL_GetTick>
 8006ad8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ada:	e008      	b.n	8006aee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006adc:	f7fb fcec 	bl	80024b8 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e1ce      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006aee:	4b52      	ldr	r3, [pc, #328]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1f0      	bne.n	8006adc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0320 	and.w	r3, r3, #32
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d036      	beq.n	8006b74 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d019      	beq.n	8006b42 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b0e:	4b4a      	ldr	r3, [pc, #296]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a49      	ldr	r2, [pc, #292]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006b1a:	f7fb fccd 	bl	80024b8 <HAL_GetTick>
 8006b1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b20:	e008      	b.n	8006b34 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006b22:	f7fb fcc9 	bl	80024b8 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d901      	bls.n	8006b34 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e1ab      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b34:	4b40      	ldr	r3, [pc, #256]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0f0      	beq.n	8006b22 <HAL_RCC_OscConfig+0x432>
 8006b40:	e018      	b.n	8006b74 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b42:	4b3d      	ldr	r3, [pc, #244]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a3c      	ldr	r2, [pc, #240]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006b48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006b4e:	f7fb fcb3 	bl	80024b8 <HAL_GetTick>
 8006b52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006b54:	e008      	b.n	8006b68 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006b56:	f7fb fcaf 	bl	80024b8 <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d901      	bls.n	8006b68 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e191      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006b68:	4b33      	ldr	r3, [pc, #204]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1f0      	bne.n	8006b56 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 8086 	beq.w	8006c8e <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006b82:	4b2e      	ldr	r3, [pc, #184]	; (8006c3c <HAL_RCC_OscConfig+0x54c>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a2d      	ldr	r2, [pc, #180]	; (8006c3c <HAL_RCC_OscConfig+0x54c>)
 8006b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b8e:	f7fb fc93 	bl	80024b8 <HAL_GetTick>
 8006b92:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b94:	e008      	b.n	8006ba8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b96:	f7fb fc8f 	bl	80024b8 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	2b64      	cmp	r3, #100	; 0x64
 8006ba2:	d901      	bls.n	8006ba8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e171      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ba8:	4b24      	ldr	r3, [pc, #144]	; (8006c3c <HAL_RCC_OscConfig+0x54c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0f0      	beq.n	8006b96 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d106      	bne.n	8006bca <HAL_RCC_OscConfig+0x4da>
 8006bbc:	4b1e      	ldr	r3, [pc, #120]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc0:	4a1d      	ldr	r2, [pc, #116]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006bc2:	f043 0301 	orr.w	r3, r3, #1
 8006bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8006bc8:	e02d      	b.n	8006c26 <HAL_RCC_OscConfig+0x536>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10c      	bne.n	8006bec <HAL_RCC_OscConfig+0x4fc>
 8006bd2:	4b19      	ldr	r3, [pc, #100]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd6:	4a18      	ldr	r2, [pc, #96]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8006bde:	4b16      	ldr	r3, [pc, #88]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be2:	4a15      	ldr	r2, [pc, #84]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006be4:	f023 0304 	bic.w	r3, r3, #4
 8006be8:	6713      	str	r3, [r2, #112]	; 0x70
 8006bea:	e01c      	b.n	8006c26 <HAL_RCC_OscConfig+0x536>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	2b05      	cmp	r3, #5
 8006bf2:	d10c      	bne.n	8006c0e <HAL_RCC_OscConfig+0x51e>
 8006bf4:	4b10      	ldr	r3, [pc, #64]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf8:	4a0f      	ldr	r2, [pc, #60]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006bfa:	f043 0304 	orr.w	r3, r3, #4
 8006bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8006c00:	4b0d      	ldr	r3, [pc, #52]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c04:	4a0c      	ldr	r2, [pc, #48]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006c06:	f043 0301 	orr.w	r3, r3, #1
 8006c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c0c:	e00b      	b.n	8006c26 <HAL_RCC_OscConfig+0x536>
 8006c0e:	4b0a      	ldr	r3, [pc, #40]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c12:	4a09      	ldr	r2, [pc, #36]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006c14:	f023 0301 	bic.w	r3, r3, #1
 8006c18:	6713      	str	r3, [r2, #112]	; 0x70
 8006c1a:	4b07      	ldr	r3, [pc, #28]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1e:	4a06      	ldr	r2, [pc, #24]	; (8006c38 <HAL_RCC_OscConfig+0x548>)
 8006c20:	f023 0304 	bic.w	r3, r3, #4
 8006c24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d01a      	beq.n	8006c64 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c2e:	f7fb fc43 	bl	80024b8 <HAL_GetTick>
 8006c32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c34:	e00f      	b.n	8006c56 <HAL_RCC_OscConfig+0x566>
 8006c36:	bf00      	nop
 8006c38:	58024400 	.word	0x58024400
 8006c3c:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c40:	f7fb fc3a 	bl	80024b8 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e11a      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c56:	4b8f      	ldr	r3, [pc, #572]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0ee      	beq.n	8006c40 <HAL_RCC_OscConfig+0x550>
 8006c62:	e014      	b.n	8006c8e <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c64:	f7fb fc28 	bl	80024b8 <HAL_GetTick>
 8006c68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006c6a:	e00a      	b.n	8006c82 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c6c:	f7fb fc24 	bl	80024b8 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e104      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006c82:	4b84      	ldr	r3, [pc, #528]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1ee      	bne.n	8006c6c <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 80f9 	beq.w	8006e8a <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006c98:	4b7e      	ldr	r3, [pc, #504]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ca0:	2b18      	cmp	r3, #24
 8006ca2:	f000 80b4 	beq.w	8006e0e <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	f040 8095 	bne.w	8006dda <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cb0:	4b78      	ldr	r3, [pc, #480]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a77      	ldr	r2, [pc, #476]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cbc:	f7fb fbfc 	bl	80024b8 <HAL_GetTick>
 8006cc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006cc2:	e008      	b.n	8006cd6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cc4:	f7fb fbf8 	bl	80024b8 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e0da      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006cd6:	4b6f      	ldr	r3, [pc, #444]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1f0      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ce2:	4b6c      	ldr	r3, [pc, #432]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ce6:	4b6c      	ldr	r3, [pc, #432]	; (8006e98 <HAL_RCC_OscConfig+0x7a8>)
 8006ce8:	4013      	ands	r3, r2
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006cf2:	0112      	lsls	r2, r2, #4
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	4967      	ldr	r1, [pc, #412]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	628b      	str	r3, [r1, #40]	; 0x28
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d00:	3b01      	subs	r3, #1
 8006d02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	025b      	lsls	r3, r3, #9
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	431a      	orrs	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d16:	3b01      	subs	r3, #1
 8006d18:	041b      	lsls	r3, r3, #16
 8006d1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d24:	3b01      	subs	r3, #1
 8006d26:	061b      	lsls	r3, r3, #24
 8006d28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d2c:	4959      	ldr	r1, [pc, #356]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006d32:	4b58      	ldr	r3, [pc, #352]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d36:	4a57      	ldr	r2, [pc, #348]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006d38:	f023 0301 	bic.w	r3, r3, #1
 8006d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006d3e:	4b55      	ldr	r3, [pc, #340]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d42:	4b56      	ldr	r3, [pc, #344]	; (8006e9c <HAL_RCC_OscConfig+0x7ac>)
 8006d44:	4013      	ands	r3, r2
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006d4a:	00d2      	lsls	r2, r2, #3
 8006d4c:	4951      	ldr	r1, [pc, #324]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006d52:	4b50      	ldr	r3, [pc, #320]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d56:	f023 020c 	bic.w	r2, r3, #12
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	494d      	ldr	r1, [pc, #308]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006d64:	4b4b      	ldr	r3, [pc, #300]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d68:	f023 0202 	bic.w	r2, r3, #2
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d70:	4948      	ldr	r1, [pc, #288]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006d76:	4b47      	ldr	r3, [pc, #284]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7a:	4a46      	ldr	r2, [pc, #280]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d82:	4b44      	ldr	r3, [pc, #272]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d86:	4a43      	ldr	r2, [pc, #268]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006d8e:	4b41      	ldr	r3, [pc, #260]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d92:	4a40      	ldr	r2, [pc, #256]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006d9a:	4b3e      	ldr	r3, [pc, #248]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	4a3d      	ldr	r2, [pc, #244]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006da0:	f043 0301 	orr.w	r3, r3, #1
 8006da4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006da6:	4b3b      	ldr	r3, [pc, #236]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a3a      	ldr	r2, [pc, #232]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006dac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db2:	f7fb fb81 	bl	80024b8 <HAL_GetTick>
 8006db6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006db8:	e008      	b.n	8006dcc <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dba:	f7fb fb7d 	bl	80024b8 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e05f      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006dcc:	4b31      	ldr	r3, [pc, #196]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0f0      	beq.n	8006dba <HAL_RCC_OscConfig+0x6ca>
 8006dd8:	e057      	b.n	8006e8a <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dda:	4b2e      	ldr	r3, [pc, #184]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a2d      	ldr	r2, [pc, #180]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006de0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de6:	f7fb fb67 	bl	80024b8 <HAL_GetTick>
 8006dea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006dec:	e008      	b.n	8006e00 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dee:	f7fb fb63 	bl	80024b8 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d901      	bls.n	8006e00 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e045      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e00:	4b24      	ldr	r3, [pc, #144]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1f0      	bne.n	8006dee <HAL_RCC_OscConfig+0x6fe>
 8006e0c:	e03d      	b.n	8006e8a <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006e0e:	4b21      	ldr	r3, [pc, #132]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e12:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006e14:	4b1f      	ldr	r3, [pc, #124]	; (8006e94 <HAL_RCC_OscConfig+0x7a4>)
 8006e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e18:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d031      	beq.n	8006e86 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f003 0203 	and.w	r2, r3, #3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d12a      	bne.n	8006e86 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	091b      	lsrs	r3, r3, #4
 8006e34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d122      	bne.n	8006e86 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d11a      	bne.n	8006e86 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	0a5b      	lsrs	r3, r3, #9
 8006e54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d111      	bne.n	8006e86 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	0c1b      	lsrs	r3, r3, #16
 8006e66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d108      	bne.n	8006e86 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	0e1b      	lsrs	r3, r3, #24
 8006e78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e80:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d001      	beq.n	8006e8a <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e000      	b.n	8006e8c <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3730      	adds	r7, #48	; 0x30
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	58024400 	.word	0x58024400
 8006e98:	fffffc0c 	.word	0xfffffc0c
 8006e9c:	ffff0007 	.word	0xffff0007

08006ea0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e19c      	b.n	80071ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006eb4:	4b8a      	ldr	r3, [pc, #552]	; (80070e0 <HAL_RCC_ClockConfig+0x240>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 030f 	and.w	r3, r3, #15
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d910      	bls.n	8006ee4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ec2:	4b87      	ldr	r3, [pc, #540]	; (80070e0 <HAL_RCC_ClockConfig+0x240>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f023 020f 	bic.w	r2, r3, #15
 8006eca:	4985      	ldr	r1, [pc, #532]	; (80070e0 <HAL_RCC_ClockConfig+0x240>)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ed2:	4b83      	ldr	r3, [pc, #524]	; (80070e0 <HAL_RCC_ClockConfig+0x240>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d001      	beq.n	8006ee4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e184      	b.n	80071ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d010      	beq.n	8006f12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	691a      	ldr	r2, [r3, #16]
 8006ef4:	4b7b      	ldr	r3, [pc, #492]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d908      	bls.n	8006f12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f00:	4b78      	ldr	r3, [pc, #480]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	4975      	ldr	r1, [pc, #468]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0308 	and.w	r3, r3, #8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d010      	beq.n	8006f40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695a      	ldr	r2, [r3, #20]
 8006f22:	4b70      	ldr	r3, [pc, #448]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8006f24:	69db      	ldr	r3, [r3, #28]
 8006f26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d908      	bls.n	8006f40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f2e:	4b6d      	ldr	r3, [pc, #436]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	496a      	ldr	r1, [pc, #424]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d010      	beq.n	8006f6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	699a      	ldr	r2, [r3, #24]
 8006f50:	4b64      	ldr	r3, [pc, #400]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8006f52:	69db      	ldr	r3, [r3, #28]
 8006f54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d908      	bls.n	8006f6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f5c:	4b61      	ldr	r3, [pc, #388]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	495e      	ldr	r1, [pc, #376]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0320 	and.w	r3, r3, #32
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d010      	beq.n	8006f9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	69da      	ldr	r2, [r3, #28]
 8006f7e:	4b59      	ldr	r3, [pc, #356]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d908      	bls.n	8006f9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006f8a:	4b56      	ldr	r3, [pc, #344]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	4953      	ldr	r1, [pc, #332]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0302 	and.w	r3, r3, #2
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d010      	beq.n	8006fca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	4b4d      	ldr	r3, [pc, #308]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	f003 030f 	and.w	r3, r3, #15
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d908      	bls.n	8006fca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fb8:	4b4a      	ldr	r3, [pc, #296]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	f023 020f 	bic.w	r2, r3, #15
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	4947      	ldr	r1, [pc, #284]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d055      	beq.n	8007082 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006fd6:	4b43      	ldr	r3, [pc, #268]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	4940      	ldr	r1, [pc, #256]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d107      	bne.n	8007000 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ff0:	4b3c      	ldr	r3, [pc, #240]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d121      	bne.n	8007040 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e0f6      	b.n	80071ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	2b03      	cmp	r3, #3
 8007006:	d107      	bne.n	8007018 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007008:	4b36      	ldr	r3, [pc, #216]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d115      	bne.n	8007040 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e0ea      	b.n	80071ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d107      	bne.n	8007030 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007020:	4b30      	ldr	r3, [pc, #192]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007028:	2b00      	cmp	r3, #0
 800702a:	d109      	bne.n	8007040 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e0de      	b.n	80071ee <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007030:	4b2c      	ldr	r3, [pc, #176]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e0d6      	b.n	80071ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007040:	4b28      	ldr	r3, [pc, #160]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	f023 0207 	bic.w	r2, r3, #7
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	4925      	ldr	r1, [pc, #148]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 800704e:	4313      	orrs	r3, r2
 8007050:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007052:	f7fb fa31 	bl	80024b8 <HAL_GetTick>
 8007056:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007058:	e00a      	b.n	8007070 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800705a:	f7fb fa2d 	bl	80024b8 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	f241 3288 	movw	r2, #5000	; 0x1388
 8007068:	4293      	cmp	r3, r2
 800706a:	d901      	bls.n	8007070 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e0be      	b.n	80071ee <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007070:	4b1c      	ldr	r3, [pc, #112]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	00db      	lsls	r3, r3, #3
 800707e:	429a      	cmp	r2, r3
 8007080:	d1eb      	bne.n	800705a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d010      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	4b14      	ldr	r3, [pc, #80]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	f003 030f 	and.w	r3, r3, #15
 800709a:	429a      	cmp	r2, r3
 800709c:	d208      	bcs.n	80070b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800709e:	4b11      	ldr	r3, [pc, #68]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	f023 020f 	bic.w	r2, r3, #15
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	490e      	ldr	r1, [pc, #56]	; (80070e4 <HAL_RCC_ClockConfig+0x244>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070b0:	4b0b      	ldr	r3, [pc, #44]	; (80070e0 <HAL_RCC_ClockConfig+0x240>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 030f 	and.w	r3, r3, #15
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d214      	bcs.n	80070e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070be:	4b08      	ldr	r3, [pc, #32]	; (80070e0 <HAL_RCC_ClockConfig+0x240>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f023 020f 	bic.w	r2, r3, #15
 80070c6:	4906      	ldr	r1, [pc, #24]	; (80070e0 <HAL_RCC_ClockConfig+0x240>)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ce:	4b04      	ldr	r3, [pc, #16]	; (80070e0 <HAL_RCC_ClockConfig+0x240>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d005      	beq.n	80070e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e086      	b.n	80071ee <HAL_RCC_ClockConfig+0x34e>
 80070e0:	52002000 	.word	0x52002000
 80070e4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d010      	beq.n	8007116 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	691a      	ldr	r2, [r3, #16]
 80070f8:	4b3f      	ldr	r3, [pc, #252]	; (80071f8 <HAL_RCC_ClockConfig+0x358>)
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007100:	429a      	cmp	r2, r3
 8007102:	d208      	bcs.n	8007116 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007104:	4b3c      	ldr	r3, [pc, #240]	; (80071f8 <HAL_RCC_ClockConfig+0x358>)
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	4939      	ldr	r1, [pc, #228]	; (80071f8 <HAL_RCC_ClockConfig+0x358>)
 8007112:	4313      	orrs	r3, r2
 8007114:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0308 	and.w	r3, r3, #8
 800711e:	2b00      	cmp	r3, #0
 8007120:	d010      	beq.n	8007144 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	695a      	ldr	r2, [r3, #20]
 8007126:	4b34      	ldr	r3, [pc, #208]	; (80071f8 <HAL_RCC_ClockConfig+0x358>)
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800712e:	429a      	cmp	r2, r3
 8007130:	d208      	bcs.n	8007144 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007132:	4b31      	ldr	r3, [pc, #196]	; (80071f8 <HAL_RCC_ClockConfig+0x358>)
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	492e      	ldr	r1, [pc, #184]	; (80071f8 <HAL_RCC_ClockConfig+0x358>)
 8007140:	4313      	orrs	r3, r2
 8007142:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0310 	and.w	r3, r3, #16
 800714c:	2b00      	cmp	r3, #0
 800714e:	d010      	beq.n	8007172 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	699a      	ldr	r2, [r3, #24]
 8007154:	4b28      	ldr	r3, [pc, #160]	; (80071f8 <HAL_RCC_ClockConfig+0x358>)
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800715c:	429a      	cmp	r2, r3
 800715e:	d208      	bcs.n	8007172 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007160:	4b25      	ldr	r3, [pc, #148]	; (80071f8 <HAL_RCC_ClockConfig+0x358>)
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	4922      	ldr	r1, [pc, #136]	; (80071f8 <HAL_RCC_ClockConfig+0x358>)
 800716e:	4313      	orrs	r3, r2
 8007170:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	d010      	beq.n	80071a0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	69da      	ldr	r2, [r3, #28]
 8007182:	4b1d      	ldr	r3, [pc, #116]	; (80071f8 <HAL_RCC_ClockConfig+0x358>)
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800718a:	429a      	cmp	r2, r3
 800718c:	d208      	bcs.n	80071a0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800718e:	4b1a      	ldr	r3, [pc, #104]	; (80071f8 <HAL_RCC_ClockConfig+0x358>)
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	4917      	ldr	r1, [pc, #92]	; (80071f8 <HAL_RCC_ClockConfig+0x358>)
 800719c:	4313      	orrs	r3, r2
 800719e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80071a0:	f000 f834 	bl	800720c <HAL_RCC_GetSysClockFreq>
 80071a4:	4601      	mov	r1, r0
 80071a6:	4b14      	ldr	r3, [pc, #80]	; (80071f8 <HAL_RCC_ClockConfig+0x358>)
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	0a1b      	lsrs	r3, r3, #8
 80071ac:	f003 030f 	and.w	r3, r3, #15
 80071b0:	4a12      	ldr	r2, [pc, #72]	; (80071fc <HAL_RCC_ClockConfig+0x35c>)
 80071b2:	5cd3      	ldrb	r3, [r2, r3]
 80071b4:	f003 031f 	and.w	r3, r3, #31
 80071b8:	fa21 f303 	lsr.w	r3, r1, r3
 80071bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80071be:	4b0e      	ldr	r3, [pc, #56]	; (80071f8 <HAL_RCC_ClockConfig+0x358>)
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	f003 030f 	and.w	r3, r3, #15
 80071c6:	4a0d      	ldr	r2, [pc, #52]	; (80071fc <HAL_RCC_ClockConfig+0x35c>)
 80071c8:	5cd3      	ldrb	r3, [r2, r3]
 80071ca:	f003 031f 	and.w	r3, r3, #31
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	fa22 f303 	lsr.w	r3, r2, r3
 80071d4:	4a0a      	ldr	r2, [pc, #40]	; (8007200 <HAL_RCC_ClockConfig+0x360>)
 80071d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80071d8:	4a0a      	ldr	r2, [pc, #40]	; (8007204 <HAL_RCC_ClockConfig+0x364>)
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80071de:	4b0a      	ldr	r3, [pc, #40]	; (8007208 <HAL_RCC_ClockConfig+0x368>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fb f91e 	bl	8002424 <HAL_InitTick>
 80071e8:	4603      	mov	r3, r0
 80071ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	58024400 	.word	0x58024400
 80071fc:	0800e1e0 	.word	0x0800e1e0
 8007200:	24000044 	.word	0x24000044
 8007204:	24000040 	.word	0x24000040
 8007208:	24000048 	.word	0x24000048

0800720c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800720c:	b480      	push	{r7}
 800720e:	b089      	sub	sp, #36	; 0x24
 8007210:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007212:	4baf      	ldr	r3, [pc, #700]	; (80074d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800721a:	2b18      	cmp	r3, #24
 800721c:	f200 814e 	bhi.w	80074bc <HAL_RCC_GetSysClockFreq+0x2b0>
 8007220:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007226:	bf00      	nop
 8007228:	0800728d 	.word	0x0800728d
 800722c:	080074bd 	.word	0x080074bd
 8007230:	080074bd 	.word	0x080074bd
 8007234:	080074bd 	.word	0x080074bd
 8007238:	080074bd 	.word	0x080074bd
 800723c:	080074bd 	.word	0x080074bd
 8007240:	080074bd 	.word	0x080074bd
 8007244:	080074bd 	.word	0x080074bd
 8007248:	080072b3 	.word	0x080072b3
 800724c:	080074bd 	.word	0x080074bd
 8007250:	080074bd 	.word	0x080074bd
 8007254:	080074bd 	.word	0x080074bd
 8007258:	080074bd 	.word	0x080074bd
 800725c:	080074bd 	.word	0x080074bd
 8007260:	080074bd 	.word	0x080074bd
 8007264:	080074bd 	.word	0x080074bd
 8007268:	080072b9 	.word	0x080072b9
 800726c:	080074bd 	.word	0x080074bd
 8007270:	080074bd 	.word	0x080074bd
 8007274:	080074bd 	.word	0x080074bd
 8007278:	080074bd 	.word	0x080074bd
 800727c:	080074bd 	.word	0x080074bd
 8007280:	080074bd 	.word	0x080074bd
 8007284:	080074bd 	.word	0x080074bd
 8007288:	080072bf 	.word	0x080072bf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800728c:	4b90      	ldr	r3, [pc, #576]	; (80074d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0320 	and.w	r3, r3, #32
 8007294:	2b00      	cmp	r3, #0
 8007296:	d009      	beq.n	80072ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007298:	4b8d      	ldr	r3, [pc, #564]	; (80074d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	08db      	lsrs	r3, r3, #3
 800729e:	f003 0303 	and.w	r3, r3, #3
 80072a2:	4a8c      	ldr	r2, [pc, #560]	; (80074d4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80072a4:	fa22 f303 	lsr.w	r3, r2, r3
 80072a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80072aa:	e10a      	b.n	80074c2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80072ac:	4b89      	ldr	r3, [pc, #548]	; (80074d4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80072ae:	61bb      	str	r3, [r7, #24]
    break;
 80072b0:	e107      	b.n	80074c2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80072b2:	4b89      	ldr	r3, [pc, #548]	; (80074d8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80072b4:	61bb      	str	r3, [r7, #24]
    break;
 80072b6:	e104      	b.n	80074c2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80072b8:	4b88      	ldr	r3, [pc, #544]	; (80074dc <HAL_RCC_GetSysClockFreq+0x2d0>)
 80072ba:	61bb      	str	r3, [r7, #24]
    break;
 80072bc:	e101      	b.n	80074c2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072be:	4b84      	ldr	r3, [pc, #528]	; (80074d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80072c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c2:	f003 0303 	and.w	r3, r3, #3
 80072c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80072c8:	4b81      	ldr	r3, [pc, #516]	; (80074d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80072ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072cc:	091b      	lsrs	r3, r3, #4
 80072ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80072d4:	4b7e      	ldr	r3, [pc, #504]	; (80074d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80072d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80072de:	4b7c      	ldr	r3, [pc, #496]	; (80074d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80072e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e2:	08db      	lsrs	r3, r3, #3
 80072e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	fb02 f303 	mul.w	r3, r2, r3
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 80da 	beq.w	80074b6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d05a      	beq.n	80073be <HAL_RCC_GetSysClockFreq+0x1b2>
 8007308:	2b01      	cmp	r3, #1
 800730a:	d302      	bcc.n	8007312 <HAL_RCC_GetSysClockFreq+0x106>
 800730c:	2b02      	cmp	r3, #2
 800730e:	d078      	beq.n	8007402 <HAL_RCC_GetSysClockFreq+0x1f6>
 8007310:	e099      	b.n	8007446 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007312:	4b6f      	ldr	r3, [pc, #444]	; (80074d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0320 	and.w	r3, r3, #32
 800731a:	2b00      	cmp	r3, #0
 800731c:	d02d      	beq.n	800737a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800731e:	4b6c      	ldr	r3, [pc, #432]	; (80074d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	08db      	lsrs	r3, r3, #3
 8007324:	f003 0303 	and.w	r3, r3, #3
 8007328:	4a6a      	ldr	r2, [pc, #424]	; (80074d4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800732a:	fa22 f303 	lsr.w	r3, r2, r3
 800732e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	ee07 3a90 	vmov	s15, r3
 8007340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007344:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007348:	4b61      	ldr	r3, [pc, #388]	; (80074d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800734a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007350:	ee07 3a90 	vmov	s15, r3
 8007354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007358:	ed97 6a02 	vldr	s12, [r7, #8]
 800735c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80074e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007360:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007364:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007368:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800736c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007374:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007378:	e087      	b.n	800748a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	ee07 3a90 	vmov	s15, r3
 8007380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007384:	eddf 6a57 	vldr	s13, [pc, #348]	; 80074e4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8007388:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800738c:	4b50      	ldr	r3, [pc, #320]	; (80074d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800738e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007394:	ee07 3a90 	vmov	s15, r3
 8007398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800739c:	ed97 6a02 	vldr	s12, [r7, #8]
 80073a0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80074e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80073a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073bc:	e065      	b.n	800748a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	ee07 3a90 	vmov	s15, r3
 80073c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c8:	eddf 6a47 	vldr	s13, [pc, #284]	; 80074e8 <HAL_RCC_GetSysClockFreq+0x2dc>
 80073cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073d0:	4b3f      	ldr	r3, [pc, #252]	; (80074d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80073d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d8:	ee07 3a90 	vmov	s15, r3
 80073dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80073e4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80074e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80073e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007400:	e043      	b.n	800748a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	ee07 3a90 	vmov	s15, r3
 8007408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740c:	eddf 6a37 	vldr	s13, [pc, #220]	; 80074ec <HAL_RCC_GetSysClockFreq+0x2e0>
 8007410:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007414:	4b2e      	ldr	r3, [pc, #184]	; (80074d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741c:	ee07 3a90 	vmov	s15, r3
 8007420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007424:	ed97 6a02 	vldr	s12, [r7, #8]
 8007428:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80074e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 800742c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007430:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007434:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007438:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800743c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007440:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007444:	e021      	b.n	800748a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	ee07 3a90 	vmov	s15, r3
 800744c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007450:	eddf 6a25 	vldr	s13, [pc, #148]	; 80074e8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007458:	4b1d      	ldr	r3, [pc, #116]	; (80074d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800745a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007460:	ee07 3a90 	vmov	s15, r3
 8007464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007468:	ed97 6a02 	vldr	s12, [r7, #8]
 800746c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80074e0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007470:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007474:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007478:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800747c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007484:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007488:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800748a:	4b11      	ldr	r3, [pc, #68]	; (80074d0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748e:	0a5b      	lsrs	r3, r3, #9
 8007490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007494:	3301      	adds	r3, #1
 8007496:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80074a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80074a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ae:	ee17 3a90 	vmov	r3, s15
 80074b2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80074b4:	e005      	b.n	80074c2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	61bb      	str	r3, [r7, #24]
    break;
 80074ba:	e002      	b.n	80074c2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80074bc:	4b06      	ldr	r3, [pc, #24]	; (80074d8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80074be:	61bb      	str	r3, [r7, #24]
    break;
 80074c0:	bf00      	nop
  }

  return sysclockfreq;
 80074c2:	69bb      	ldr	r3, [r7, #24]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3724      	adds	r7, #36	; 0x24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	58024400 	.word	0x58024400
 80074d4:	03d09000 	.word	0x03d09000
 80074d8:	003d0900 	.word	0x003d0900
 80074dc:	017d7840 	.word	0x017d7840
 80074e0:	46000000 	.word	0x46000000
 80074e4:	4c742400 	.word	0x4c742400
 80074e8:	4a742400 	.word	0x4a742400
 80074ec:	4bbebc20 	.word	0x4bbebc20

080074f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80074f6:	f7ff fe89 	bl	800720c <HAL_RCC_GetSysClockFreq>
 80074fa:	4601      	mov	r1, r0
 80074fc:	4b10      	ldr	r3, [pc, #64]	; (8007540 <HAL_RCC_GetHCLKFreq+0x50>)
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	0a1b      	lsrs	r3, r3, #8
 8007502:	f003 030f 	and.w	r3, r3, #15
 8007506:	4a0f      	ldr	r2, [pc, #60]	; (8007544 <HAL_RCC_GetHCLKFreq+0x54>)
 8007508:	5cd3      	ldrb	r3, [r2, r3]
 800750a:	f003 031f 	and.w	r3, r3, #31
 800750e:	fa21 f303 	lsr.w	r3, r1, r3
 8007512:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007514:	4b0a      	ldr	r3, [pc, #40]	; (8007540 <HAL_RCC_GetHCLKFreq+0x50>)
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	f003 030f 	and.w	r3, r3, #15
 800751c:	4a09      	ldr	r2, [pc, #36]	; (8007544 <HAL_RCC_GetHCLKFreq+0x54>)
 800751e:	5cd3      	ldrb	r3, [r2, r3]
 8007520:	f003 031f 	and.w	r3, r3, #31
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	fa22 f303 	lsr.w	r3, r2, r3
 800752a:	4a07      	ldr	r2, [pc, #28]	; (8007548 <HAL_RCC_GetHCLKFreq+0x58>)
 800752c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800752e:	4a07      	ldr	r2, [pc, #28]	; (800754c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007534:	4b04      	ldr	r3, [pc, #16]	; (8007548 <HAL_RCC_GetHCLKFreq+0x58>)
 8007536:	681b      	ldr	r3, [r3, #0]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	58024400 	.word	0x58024400
 8007544:	0800e1e0 	.word	0x0800e1e0
 8007548:	24000044 	.word	0x24000044
 800754c:	24000040 	.word	0x24000040

08007550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007554:	f7ff ffcc 	bl	80074f0 <HAL_RCC_GetHCLKFreq>
 8007558:	4601      	mov	r1, r0
 800755a:	4b06      	ldr	r3, [pc, #24]	; (8007574 <HAL_RCC_GetPCLK1Freq+0x24>)
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	091b      	lsrs	r3, r3, #4
 8007560:	f003 0307 	and.w	r3, r3, #7
 8007564:	4a04      	ldr	r2, [pc, #16]	; (8007578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007566:	5cd3      	ldrb	r3, [r2, r3]
 8007568:	f003 031f 	and.w	r3, r3, #31
 800756c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007570:	4618      	mov	r0, r3
 8007572:	bd80      	pop	{r7, pc}
 8007574:	58024400 	.word	0x58024400
 8007578:	0800e1e0 	.word	0x0800e1e0

0800757c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007580:	f7ff ffb6 	bl	80074f0 <HAL_RCC_GetHCLKFreq>
 8007584:	4601      	mov	r1, r0
 8007586:	4b06      	ldr	r3, [pc, #24]	; (80075a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	0a1b      	lsrs	r3, r3, #8
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	4a04      	ldr	r2, [pc, #16]	; (80075a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007592:	5cd3      	ldrb	r3, [r2, r3]
 8007594:	f003 031f 	and.w	r3, r3, #31
 8007598:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800759c:	4618      	mov	r0, r3
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	58024400 	.word	0x58024400
 80075a4:	0800e1e0 	.word	0x0800e1e0

080075a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80075b0:	2300      	movs	r3, #0
 80075b2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80075b4:	2300      	movs	r3, #0
 80075b6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d03d      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075cc:	d013      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80075ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075d2:	d802      	bhi.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x32>
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d007      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80075d8:	e01f      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80075da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075de:	d013      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80075e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80075e4:	d01c      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80075e6:	e018      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075e8:	4baf      	ldr	r3, [pc, #700]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	4aae      	ldr	r2, [pc, #696]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80075ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80075f4:	e015      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3304      	adds	r3, #4
 80075fa:	2102      	movs	r1, #2
 80075fc:	4618      	mov	r0, r3
 80075fe:	f001 fd23 	bl	8009048 <RCCEx_PLL2_Config>
 8007602:	4603      	mov	r3, r0
 8007604:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007606:	e00c      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3324      	adds	r3, #36	; 0x24
 800760c:	2102      	movs	r1, #2
 800760e:	4618      	mov	r0, r3
 8007610:	f001 fdcc 	bl	80091ac <RCCEx_PLL3_Config>
 8007614:	4603      	mov	r3, r0
 8007616:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007618:	e003      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	75fb      	strb	r3, [r7, #23]
      break;
 800761e:	e000      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007620:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007622:	7dfb      	ldrb	r3, [r7, #23]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d109      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007628:	4b9f      	ldr	r3, [pc, #636]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800762a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800762c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007634:	499c      	ldr	r1, [pc, #624]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007636:	4313      	orrs	r3, r2
 8007638:	650b      	str	r3, [r1, #80]	; 0x50
 800763a:	e001      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763c:	7dfb      	ldrb	r3, [r7, #23]
 800763e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007648:	2b00      	cmp	r3, #0
 800764a:	d03d      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007650:	2b04      	cmp	r3, #4
 8007652:	d826      	bhi.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007654:	a201      	add	r2, pc, #4	; (adr r2, 800765c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8007656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765a:	bf00      	nop
 800765c:	08007671 	.word	0x08007671
 8007660:	0800767f 	.word	0x0800767f
 8007664:	08007691 	.word	0x08007691
 8007668:	080076a9 	.word	0x080076a9
 800766c:	080076a9 	.word	0x080076a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007670:	4b8d      	ldr	r3, [pc, #564]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007674:	4a8c      	ldr	r2, [pc, #560]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800767a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800767c:	e015      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	3304      	adds	r3, #4
 8007682:	2100      	movs	r1, #0
 8007684:	4618      	mov	r0, r3
 8007686:	f001 fcdf 	bl	8009048 <RCCEx_PLL2_Config>
 800768a:	4603      	mov	r3, r0
 800768c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800768e:	e00c      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3324      	adds	r3, #36	; 0x24
 8007694:	2100      	movs	r1, #0
 8007696:	4618      	mov	r0, r3
 8007698:	f001 fd88 	bl	80091ac <RCCEx_PLL3_Config>
 800769c:	4603      	mov	r3, r0
 800769e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076a0:	e003      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	75fb      	strb	r3, [r7, #23]
      break;
 80076a6:	e000      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80076a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d109      	bne.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076b0:	4b7d      	ldr	r3, [pc, #500]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80076b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b4:	f023 0207 	bic.w	r2, r3, #7
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076bc:	497a      	ldr	r1, [pc, #488]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	650b      	str	r3, [r1, #80]	; 0x50
 80076c2:	e001      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c4:	7dfb      	ldrb	r3, [r7, #23]
 80076c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d03e      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d8:	2b80      	cmp	r3, #128	; 0x80
 80076da:	d01c      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80076dc:	2b80      	cmp	r3, #128	; 0x80
 80076de:	d804      	bhi.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x142>
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d008      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80076e4:	2b40      	cmp	r3, #64	; 0x40
 80076e6:	d00d      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80076e8:	e01e      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80076ea:	2bc0      	cmp	r3, #192	; 0xc0
 80076ec:	d01f      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80076ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076f2:	d01e      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80076f4:	e018      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076f6:	4b6c      	ldr	r3, [pc, #432]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80076f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fa:	4a6b      	ldr	r2, [pc, #428]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80076fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007700:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007702:	e017      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3304      	adds	r3, #4
 8007708:	2100      	movs	r1, #0
 800770a:	4618      	mov	r0, r3
 800770c:	f001 fc9c 	bl	8009048 <RCCEx_PLL2_Config>
 8007710:	4603      	mov	r3, r0
 8007712:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007714:	e00e      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	3324      	adds	r3, #36	; 0x24
 800771a:	2100      	movs	r1, #0
 800771c:	4618      	mov	r0, r3
 800771e:	f001 fd45 	bl	80091ac <RCCEx_PLL3_Config>
 8007722:	4603      	mov	r3, r0
 8007724:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007726:	e005      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	75fb      	strb	r3, [r7, #23]
      break;
 800772c:	e002      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800772e:	bf00      	nop
 8007730:	e000      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007734:	7dfb      	ldrb	r3, [r7, #23]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d109      	bne.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800773a:	4b5b      	ldr	r3, [pc, #364]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800773c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007746:	4958      	ldr	r1, [pc, #352]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007748:	4313      	orrs	r3, r2
 800774a:	650b      	str	r3, [r1, #80]	; 0x50
 800774c:	e001      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800774e:	7dfb      	ldrb	r3, [r7, #23]
 8007750:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800775a:	2b00      	cmp	r3, #0
 800775c:	d044      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007764:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007768:	d01f      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x202>
 800776a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800776e:	d805      	bhi.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00a      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007774:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007778:	d00e      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800777a:	e01f      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x214>
 800777c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007780:	d01f      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007782:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007786:	d01e      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007788:	e018      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800778a:	4b47      	ldr	r3, [pc, #284]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778e:	4a46      	ldr	r2, [pc, #280]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007794:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007796:	e017      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3304      	adds	r3, #4
 800779c:	2100      	movs	r1, #0
 800779e:	4618      	mov	r0, r3
 80077a0:	f001 fc52 	bl	8009048 <RCCEx_PLL2_Config>
 80077a4:	4603      	mov	r3, r0
 80077a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80077a8:	e00e      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	3324      	adds	r3, #36	; 0x24
 80077ae:	2100      	movs	r1, #0
 80077b0:	4618      	mov	r0, r3
 80077b2:	f001 fcfb 	bl	80091ac <RCCEx_PLL3_Config>
 80077b6:	4603      	mov	r3, r0
 80077b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80077ba:	e005      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	75fb      	strb	r3, [r7, #23]
      break;
 80077c0:	e002      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80077c2:	bf00      	nop
 80077c4:	e000      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80077c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077c8:	7dfb      	ldrb	r3, [r7, #23]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10a      	bne.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80077ce:	4b36      	ldr	r3, [pc, #216]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80077d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80077dc:	4932      	ldr	r1, [pc, #200]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	658b      	str	r3, [r1, #88]	; 0x58
 80077e2:	e001      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e4:	7dfb      	ldrb	r3, [r7, #23]
 80077e6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d044      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80077fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077fe:	d01f      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007800:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007804:	d805      	bhi.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800780a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800780e:	d00e      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007810:	e01f      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8007812:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007816:	d01f      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007818:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800781c:	d01e      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800781e:	e018      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007820:	4b21      	ldr	r3, [pc, #132]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	4a20      	ldr	r2, [pc, #128]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800782a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800782c:	e017      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	3304      	adds	r3, #4
 8007832:	2100      	movs	r1, #0
 8007834:	4618      	mov	r0, r3
 8007836:	f001 fc07 	bl	8009048 <RCCEx_PLL2_Config>
 800783a:	4603      	mov	r3, r0
 800783c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800783e:	e00e      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3324      	adds	r3, #36	; 0x24
 8007844:	2100      	movs	r1, #0
 8007846:	4618      	mov	r0, r3
 8007848:	f001 fcb0 	bl	80091ac <RCCEx_PLL3_Config>
 800784c:	4603      	mov	r3, r0
 800784e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007850:	e005      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	75fb      	strb	r3, [r7, #23]
      break;
 8007856:	e002      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007858:	bf00      	nop
 800785a:	e000      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800785c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800785e:	7dfb      	ldrb	r3, [r7, #23]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10a      	bne.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007864:	4b10      	ldr	r3, [pc, #64]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007868:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007872:	490d      	ldr	r1, [pc, #52]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007874:	4313      	orrs	r3, r2
 8007876:	658b      	str	r3, [r1, #88]	; 0x58
 8007878:	e001      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800787a:	7dfb      	ldrb	r3, [r7, #23]
 800787c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d035      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800788e:	2b10      	cmp	r3, #16
 8007890:	d00c      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x304>
 8007892:	2b10      	cmp	r3, #16
 8007894:	d802      	bhi.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007896:	2b00      	cmp	r3, #0
 8007898:	d01b      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800789a:	e017      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x324>
 800789c:	2b20      	cmp	r3, #32
 800789e:	d00c      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x312>
 80078a0:	2b30      	cmp	r3, #48	; 0x30
 80078a2:	d018      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80078a4:	e012      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x324>
 80078a6:	bf00      	nop
 80078a8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ac:	4baf      	ldr	r3, [pc, #700]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b0:	4aae      	ldr	r2, [pc, #696]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80078b8:	e00e      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	3304      	adds	r3, #4
 80078be:	2102      	movs	r1, #2
 80078c0:	4618      	mov	r0, r3
 80078c2:	f001 fbc1 	bl	8009048 <RCCEx_PLL2_Config>
 80078c6:	4603      	mov	r3, r0
 80078c8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80078ca:	e005      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	75fb      	strb	r3, [r7, #23]
      break;
 80078d0:	e002      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80078d2:	bf00      	nop
 80078d4:	e000      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80078d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d109      	bne.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80078de:	4ba3      	ldr	r3, [pc, #652]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ea:	49a0      	ldr	r1, [pc, #640]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80078ec:	4313      	orrs	r3, r2
 80078ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80078f0:	e001      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
 80078f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d042      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800790a:	d01f      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800790c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007910:	d805      	bhi.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00a      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8007916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800791a:	d00e      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800791c:	e01f      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800791e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007922:	d01f      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007928:	d01e      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800792a:	e018      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800792c:	4b8f      	ldr	r3, [pc, #572]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	4a8e      	ldr	r2, [pc, #568]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007936:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007938:	e017      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3304      	adds	r3, #4
 800793e:	2100      	movs	r1, #0
 8007940:	4618      	mov	r0, r3
 8007942:	f001 fb81 	bl	8009048 <RCCEx_PLL2_Config>
 8007946:	4603      	mov	r3, r0
 8007948:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800794a:	e00e      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3324      	adds	r3, #36	; 0x24
 8007950:	2100      	movs	r1, #0
 8007952:	4618      	mov	r0, r3
 8007954:	f001 fc2a 	bl	80091ac <RCCEx_PLL3_Config>
 8007958:	4603      	mov	r3, r0
 800795a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800795c:	e005      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	75fb      	strb	r3, [r7, #23]
      break;
 8007962:	e002      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007964:	bf00      	nop
 8007966:	e000      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007968:	bf00      	nop
    }

    if(ret == HAL_OK)
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d109      	bne.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007970:	4b7e      	ldr	r3, [pc, #504]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007974:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800797c:	497b      	ldr	r1, [pc, #492]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800797e:	4313      	orrs	r3, r2
 8007980:	650b      	str	r3, [r1, #80]	; 0x50
 8007982:	e001      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d042      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007998:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800799c:	d01b      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800799e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079a2:	d805      	bhi.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d022      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x446>
 80079a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ac:	d00a      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80079ae:	e01b      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80079b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079b4:	d01d      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80079b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079ba:	d01c      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80079bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079c0:	d01b      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x452>
 80079c2:	e011      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3304      	adds	r3, #4
 80079c8:	2101      	movs	r1, #1
 80079ca:	4618      	mov	r0, r3
 80079cc:	f001 fb3c 	bl	8009048 <RCCEx_PLL2_Config>
 80079d0:	4603      	mov	r3, r0
 80079d2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80079d4:	e012      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	3324      	adds	r3, #36	; 0x24
 80079da:	2101      	movs	r1, #1
 80079dc:	4618      	mov	r0, r3
 80079de:	f001 fbe5 	bl	80091ac <RCCEx_PLL3_Config>
 80079e2:	4603      	mov	r3, r0
 80079e4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80079e6:	e009      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	75fb      	strb	r3, [r7, #23]
      break;
 80079ec:	e006      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80079ee:	bf00      	nop
 80079f0:	e004      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80079f2:	bf00      	nop
 80079f4:	e002      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80079f6:	bf00      	nop
 80079f8:	e000      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80079fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079fc:	7dfb      	ldrb	r3, [r7, #23]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d109      	bne.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007a02:	4b5a      	ldr	r3, [pc, #360]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a06:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a0e:	4957      	ldr	r1, [pc, #348]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007a10:	4313      	orrs	r3, r2
 8007a12:	650b      	str	r3, [r1, #80]	; 0x50
 8007a14:	e001      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
 8007a18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d044      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a30:	d01b      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a36:	d805      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d022      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007a3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a40:	d00a      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007a42:	e01b      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a48:	d01d      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007a4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a4e:	d01c      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007a50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a54:	d01b      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007a56:	e011      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	2101      	movs	r1, #1
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f001 faf2 	bl	8009048 <RCCEx_PLL2_Config>
 8007a64:	4603      	mov	r3, r0
 8007a66:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007a68:	e012      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	3324      	adds	r3, #36	; 0x24
 8007a6e:	2101      	movs	r1, #1
 8007a70:	4618      	mov	r0, r3
 8007a72:	f001 fb9b 	bl	80091ac <RCCEx_PLL3_Config>
 8007a76:	4603      	mov	r3, r0
 8007a78:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007a7a:	e009      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a80:	e006      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007a82:	bf00      	nop
 8007a84:	e004      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007a86:	bf00      	nop
 8007a88:	e002      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007a8a:	bf00      	nop
 8007a8c:	e000      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007a8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a90:	7dfb      	ldrb	r3, [r7, #23]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10a      	bne.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007a96:	4b35      	ldr	r3, [pc, #212]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a9a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007aa4:	4931      	ldr	r1, [pc, #196]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	658b      	str	r3, [r1, #88]	; 0x58
 8007aaa:	e001      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aac:	7dfb      	ldrb	r3, [r7, #23]
 8007aae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d02d      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ac4:	d005      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aca:	d009      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d013      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007ad0:	e00f      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ad2:	4b26      	ldr	r3, [pc, #152]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad6:	4a25      	ldr	r2, [pc, #148]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007adc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007ade:	e00c      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f001 faae 	bl	8009048 <RCCEx_PLL2_Config>
 8007aec:	4603      	mov	r3, r0
 8007aee:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007af0:	e003      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	75fb      	strb	r3, [r7, #23]
      break;
 8007af6:	e000      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d109      	bne.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b00:	4b1a      	ldr	r3, [pc, #104]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b0c:	4917      	ldr	r1, [pc, #92]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	650b      	str	r3, [r1, #80]	; 0x50
 8007b12:	e001      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b14:	7dfb      	ldrb	r3, [r7, #23]
 8007b16:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d035      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	d81b      	bhi.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007b2c:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8007b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b32:	bf00      	nop
 8007b34:	08007b71 	.word	0x08007b71
 8007b38:	08007b45 	.word	0x08007b45
 8007b3c:	08007b53 	.word	0x08007b53
 8007b40:	08007b71 	.word	0x08007b71
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b44:	4b09      	ldr	r3, [pc, #36]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	4a08      	ldr	r2, [pc, #32]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007b50:	e00f      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3304      	adds	r3, #4
 8007b56:	2102      	movs	r1, #2
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f001 fa75 	bl	8009048 <RCCEx_PLL2_Config>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007b62:	e006      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	75fb      	strb	r3, [r7, #23]
      break;
 8007b68:	e003      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007b6a:	bf00      	nop
 8007b6c:	58024400 	.word	0x58024400
      break;
 8007b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d109      	bne.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007b78:	4bba      	ldr	r3, [pc, #744]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b7c:	f023 0203 	bic.w	r2, r3, #3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b84:	49b7      	ldr	r1, [pc, #732]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007b8a:	e001      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 8086 	beq.w	8007caa <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b9e:	4bb2      	ldr	r3, [pc, #712]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4ab1      	ldr	r2, [pc, #708]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ba8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007baa:	f7fa fc85 	bl	80024b8 <HAL_GetTick>
 8007bae:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bb0:	e009      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bb2:	f7fa fc81 	bl	80024b8 <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2b64      	cmp	r3, #100	; 0x64
 8007bbe:	d902      	bls.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	75fb      	strb	r3, [r7, #23]
        break;
 8007bc4:	e005      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bc6:	4ba8      	ldr	r3, [pc, #672]	; (8007e68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d0ef      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d166      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007bd8:	4ba2      	ldr	r3, [pc, #648]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007bda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007be2:	4053      	eors	r3, r2
 8007be4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d013      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007bec:	4b9d      	ldr	r3, [pc, #628]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bf4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007bf6:	4b9b      	ldr	r3, [pc, #620]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfa:	4a9a      	ldr	r2, [pc, #616]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c00:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c02:	4b98      	ldr	r3, [pc, #608]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c06:	4a97      	ldr	r2, [pc, #604]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c0c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007c0e:	4a95      	ldr	r2, [pc, #596]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c1e:	d115      	bne.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c20:	f7fa fc4a 	bl	80024b8 <HAL_GetTick>
 8007c24:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c26:	e00b      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c28:	f7fa fc46 	bl	80024b8 <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d902      	bls.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	75fb      	strb	r3, [r7, #23]
            break;
 8007c3e:	e005      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c40:	4b88      	ldr	r3, [pc, #544]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c44:	f003 0302 	and.w	r3, r3, #2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d0ed      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007c4c:	7dfb      	ldrb	r3, [r7, #23]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d126      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c60:	d10d      	bne.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007c62:	4b80      	ldr	r3, [pc, #512]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c70:	0919      	lsrs	r1, r3, #4
 8007c72:	4b7e      	ldr	r3, [pc, #504]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007c74:	400b      	ands	r3, r1
 8007c76:	497b      	ldr	r1, [pc, #492]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	610b      	str	r3, [r1, #16]
 8007c7c:	e005      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007c7e:	4b79      	ldr	r3, [pc, #484]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	4a78      	ldr	r2, [pc, #480]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007c88:	6113      	str	r3, [r2, #16]
 8007c8a:	4b76      	ldr	r3, [pc, #472]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c98:	4972      	ldr	r1, [pc, #456]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	670b      	str	r3, [r1, #112]	; 0x70
 8007c9e:	e004      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	75bb      	strb	r3, [r7, #22]
 8007ca4:	e001      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d07d      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cba:	2b28      	cmp	r3, #40	; 0x28
 8007cbc:	d866      	bhi.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007cbe:	a201      	add	r2, pc, #4	; (adr r2, 8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc4:	08007d93 	.word	0x08007d93
 8007cc8:	08007d8d 	.word	0x08007d8d
 8007ccc:	08007d8d 	.word	0x08007d8d
 8007cd0:	08007d8d 	.word	0x08007d8d
 8007cd4:	08007d8d 	.word	0x08007d8d
 8007cd8:	08007d8d 	.word	0x08007d8d
 8007cdc:	08007d8d 	.word	0x08007d8d
 8007ce0:	08007d8d 	.word	0x08007d8d
 8007ce4:	08007d69 	.word	0x08007d69
 8007ce8:	08007d8d 	.word	0x08007d8d
 8007cec:	08007d8d 	.word	0x08007d8d
 8007cf0:	08007d8d 	.word	0x08007d8d
 8007cf4:	08007d8d 	.word	0x08007d8d
 8007cf8:	08007d8d 	.word	0x08007d8d
 8007cfc:	08007d8d 	.word	0x08007d8d
 8007d00:	08007d8d 	.word	0x08007d8d
 8007d04:	08007d7b 	.word	0x08007d7b
 8007d08:	08007d8d 	.word	0x08007d8d
 8007d0c:	08007d8d 	.word	0x08007d8d
 8007d10:	08007d8d 	.word	0x08007d8d
 8007d14:	08007d8d 	.word	0x08007d8d
 8007d18:	08007d8d 	.word	0x08007d8d
 8007d1c:	08007d8d 	.word	0x08007d8d
 8007d20:	08007d8d 	.word	0x08007d8d
 8007d24:	08007d93 	.word	0x08007d93
 8007d28:	08007d8d 	.word	0x08007d8d
 8007d2c:	08007d8d 	.word	0x08007d8d
 8007d30:	08007d8d 	.word	0x08007d8d
 8007d34:	08007d8d 	.word	0x08007d8d
 8007d38:	08007d8d 	.word	0x08007d8d
 8007d3c:	08007d8d 	.word	0x08007d8d
 8007d40:	08007d8d 	.word	0x08007d8d
 8007d44:	08007d93 	.word	0x08007d93
 8007d48:	08007d8d 	.word	0x08007d8d
 8007d4c:	08007d8d 	.word	0x08007d8d
 8007d50:	08007d8d 	.word	0x08007d8d
 8007d54:	08007d8d 	.word	0x08007d8d
 8007d58:	08007d8d 	.word	0x08007d8d
 8007d5c:	08007d8d 	.word	0x08007d8d
 8007d60:	08007d8d 	.word	0x08007d8d
 8007d64:	08007d93 	.word	0x08007d93
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f001 f96a 	bl	8009048 <RCCEx_PLL2_Config>
 8007d74:	4603      	mov	r3, r0
 8007d76:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007d78:	e00c      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3324      	adds	r3, #36	; 0x24
 8007d7e:	2101      	movs	r1, #1
 8007d80:	4618      	mov	r0, r3
 8007d82:	f001 fa13 	bl	80091ac <RCCEx_PLL3_Config>
 8007d86:	4603      	mov	r3, r0
 8007d88:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007d8a:	e003      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d90:	e000      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007d92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d94:	7dfb      	ldrb	r3, [r7, #23]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d109      	bne.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d9a:	4b32      	ldr	r3, [pc, #200]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007da6:	492f      	ldr	r1, [pc, #188]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007da8:	4313      	orrs	r3, r2
 8007daa:	654b      	str	r3, [r1, #84]	; 0x54
 8007dac:	e001      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dae:	7dfb      	ldrb	r3, [r7, #23]
 8007db0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d037      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dc2:	2b05      	cmp	r3, #5
 8007dc4:	d820      	bhi.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007dc6:	a201      	add	r2, pc, #4	; (adr r2, 8007dcc <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dcc:	08007e0f 	.word	0x08007e0f
 8007dd0:	08007de5 	.word	0x08007de5
 8007dd4:	08007df7 	.word	0x08007df7
 8007dd8:	08007e0f 	.word	0x08007e0f
 8007ddc:	08007e0f 	.word	0x08007e0f
 8007de0:	08007e0f 	.word	0x08007e0f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	3304      	adds	r3, #4
 8007de8:	2101      	movs	r1, #1
 8007dea:	4618      	mov	r0, r3
 8007dec:	f001 f92c 	bl	8009048 <RCCEx_PLL2_Config>
 8007df0:	4603      	mov	r3, r0
 8007df2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007df4:	e00c      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	3324      	adds	r3, #36	; 0x24
 8007dfa:	2101      	movs	r1, #1
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f001 f9d5 	bl	80091ac <RCCEx_PLL3_Config>
 8007e02:	4603      	mov	r3, r0
 8007e04:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007e06:	e003      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e0c:	e000      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e10:	7dfb      	ldrb	r3, [r7, #23]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d109      	bne.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007e16:	4b13      	ldr	r3, [pc, #76]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1a:	f023 0207 	bic.w	r2, r3, #7
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e22:	4910      	ldr	r1, [pc, #64]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007e24:	4313      	orrs	r3, r2
 8007e26:	654b      	str	r3, [r1, #84]	; 0x54
 8007e28:	e001      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 0304 	and.w	r3, r3, #4
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d040      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e40:	2b05      	cmp	r3, #5
 8007e42:	d827      	bhi.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007e44:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4a:	bf00      	nop
 8007e4c:	08007e9b 	.word	0x08007e9b
 8007e50:	08007e71 	.word	0x08007e71
 8007e54:	08007e83 	.word	0x08007e83
 8007e58:	08007e9b 	.word	0x08007e9b
 8007e5c:	08007e9b 	.word	0x08007e9b
 8007e60:	08007e9b 	.word	0x08007e9b
 8007e64:	58024400 	.word	0x58024400
 8007e68:	58024800 	.word	0x58024800
 8007e6c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3304      	adds	r3, #4
 8007e74:	2101      	movs	r1, #1
 8007e76:	4618      	mov	r0, r3
 8007e78:	f001 f8e6 	bl	8009048 <RCCEx_PLL2_Config>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007e80:	e00c      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	3324      	adds	r3, #36	; 0x24
 8007e86:	2101      	movs	r1, #1
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f001 f98f 	bl	80091ac <RCCEx_PLL3_Config>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007e92:	e003      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	75fb      	strb	r3, [r7, #23]
      break;
 8007e98:	e000      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10a      	bne.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ea2:	4bb2      	ldr	r3, [pc, #712]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea6:	f023 0207 	bic.w	r2, r3, #7
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb0:	49ae      	ldr	r1, [pc, #696]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	658b      	str	r3, [r1, #88]	; 0x58
 8007eb6:	e001      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb8:	7dfb      	ldrb	r3, [r7, #23]
 8007eba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0320 	and.w	r3, r3, #32
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d044      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ed2:	d01b      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ed8:	d805      	bhi.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d022      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ee2:	d00a      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007ee4:	e01b      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eea:	d01d      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ef0:	d01c      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007ef2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ef6:	d01b      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007ef8:	e011      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	3304      	adds	r3, #4
 8007efe:	2100      	movs	r1, #0
 8007f00:	4618      	mov	r0, r3
 8007f02:	f001 f8a1 	bl	8009048 <RCCEx_PLL2_Config>
 8007f06:	4603      	mov	r3, r0
 8007f08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007f0a:	e012      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3324      	adds	r3, #36	; 0x24
 8007f10:	2102      	movs	r1, #2
 8007f12:	4618      	mov	r0, r3
 8007f14:	f001 f94a 	bl	80091ac <RCCEx_PLL3_Config>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007f1c:	e009      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	75fb      	strb	r3, [r7, #23]
      break;
 8007f22:	e006      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007f24:	bf00      	nop
 8007f26:	e004      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007f28:	bf00      	nop
 8007f2a:	e002      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007f2c:	bf00      	nop
 8007f2e:	e000      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f32:	7dfb      	ldrb	r3, [r7, #23]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10a      	bne.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f38:	4b8c      	ldr	r3, [pc, #560]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f3c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f46:	4989      	ldr	r1, [pc, #548]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	654b      	str	r3, [r1, #84]	; 0x54
 8007f4c:	e001      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
 8007f50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d044      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f68:	d01b      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f6e:	d805      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d022      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f78:	d00a      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007f7a:	e01b      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f80:	d01d      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007f82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007f86:	d01c      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007f88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f8c:	d01b      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007f8e:	e011      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3304      	adds	r3, #4
 8007f94:	2100      	movs	r1, #0
 8007f96:	4618      	mov	r0, r3
 8007f98:	f001 f856 	bl	8009048 <RCCEx_PLL2_Config>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007fa0:	e012      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	3324      	adds	r3, #36	; 0x24
 8007fa6:	2102      	movs	r1, #2
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f001 f8ff 	bl	80091ac <RCCEx_PLL3_Config>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007fb2:	e009      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fb8:	e006      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007fba:	bf00      	nop
 8007fbc:	e004      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007fbe:	bf00      	nop
 8007fc0:	e002      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007fc2:	bf00      	nop
 8007fc4:	e000      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fc8:	7dfb      	ldrb	r3, [r7, #23]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10a      	bne.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007fce:	4b67      	ldr	r3, [pc, #412]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fdc:	4963      	ldr	r1, [pc, #396]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	658b      	str	r3, [r1, #88]	; 0x58
 8007fe2:	e001      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
 8007fe6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d044      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ffa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ffe:	d01b      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8008000:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008004:	d805      	bhi.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8008006:	2b00      	cmp	r3, #0
 8008008:	d022      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800800a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800800e:	d00a      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008010:	e01b      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8008012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008016:	d01d      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008018:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800801c:	d01c      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800801e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008022:	d01b      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8008024:	e011      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	3304      	adds	r3, #4
 800802a:	2100      	movs	r1, #0
 800802c:	4618      	mov	r0, r3
 800802e:	f001 f80b 	bl	8009048 <RCCEx_PLL2_Config>
 8008032:	4603      	mov	r3, r0
 8008034:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008036:	e012      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	3324      	adds	r3, #36	; 0x24
 800803c:	2102      	movs	r1, #2
 800803e:	4618      	mov	r0, r3
 8008040:	f001 f8b4 	bl	80091ac <RCCEx_PLL3_Config>
 8008044:	4603      	mov	r3, r0
 8008046:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008048:	e009      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	75fb      	strb	r3, [r7, #23]
      break;
 800804e:	e006      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008050:	bf00      	nop
 8008052:	e004      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008054:	bf00      	nop
 8008056:	e002      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008058:	bf00      	nop
 800805a:	e000      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800805c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800805e:	7dfb      	ldrb	r3, [r7, #23]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10a      	bne.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008064:	4b41      	ldr	r3, [pc, #260]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008068:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008072:	493e      	ldr	r1, [pc, #248]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008074:	4313      	orrs	r3, r2
 8008076:	658b      	str	r3, [r1, #88]	; 0x58
 8008078:	e001      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0308 	and.w	r3, r3, #8
 8008086:	2b00      	cmp	r3, #0
 8008088:	d01a      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008094:	d10a      	bne.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	3324      	adds	r3, #36	; 0x24
 800809a:	2102      	movs	r1, #2
 800809c:	4618      	mov	r0, r3
 800809e:	f001 f885 	bl	80091ac <RCCEx_PLL3_Config>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80080ac:	4b2f      	ldr	r3, [pc, #188]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80080ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080ba:	492c      	ldr	r1, [pc, #176]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0310 	and.w	r3, r3, #16
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d01a      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080d6:	d10a      	bne.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3324      	adds	r3, #36	; 0x24
 80080dc:	2102      	movs	r1, #2
 80080de:	4618      	mov	r0, r3
 80080e0:	f001 f864 	bl	80091ac <RCCEx_PLL3_Config>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80080ee:	4b1f      	ldr	r3, [pc, #124]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80080f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080fc:	491b      	ldr	r1, [pc, #108]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80080fe:	4313      	orrs	r3, r2
 8008100:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d032      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008118:	d00d      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800811a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800811e:	d016      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8008120:	2b00      	cmp	r3, #0
 8008122:	d111      	bne.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3304      	adds	r3, #4
 8008128:	2100      	movs	r1, #0
 800812a:	4618      	mov	r0, r3
 800812c:	f000 ff8c 	bl	8009048 <RCCEx_PLL2_Config>
 8008130:	4603      	mov	r3, r0
 8008132:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008134:	e00c      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	3324      	adds	r3, #36	; 0x24
 800813a:	2102      	movs	r1, #2
 800813c:	4618      	mov	r0, r3
 800813e:	f001 f835 	bl	80091ac <RCCEx_PLL3_Config>
 8008142:	4603      	mov	r3, r0
 8008144:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008146:	e003      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	75fb      	strb	r3, [r7, #23]
      break;
 800814c:	e000      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800814e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008150:	7dfb      	ldrb	r3, [r7, #23]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10c      	bne.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008156:	4b05      	ldr	r3, [pc, #20]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800815a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008164:	4901      	ldr	r1, [pc, #4]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008166:	4313      	orrs	r3, r2
 8008168:	658b      	str	r3, [r1, #88]	; 0x58
 800816a:	e003      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800816c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008170:	7dfb      	ldrb	r3, [r7, #23]
 8008172:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d02f      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008186:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800818a:	d00c      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800818c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008190:	d015      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8008192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008196:	d10f      	bne.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008198:	4b71      	ldr	r3, [pc, #452]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	4a70      	ldr	r2, [pc, #448]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800819e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80081a4:	e00c      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3324      	adds	r3, #36	; 0x24
 80081aa:	2101      	movs	r1, #1
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 fffd 	bl	80091ac <RCCEx_PLL3_Config>
 80081b2:	4603      	mov	r3, r0
 80081b4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80081b6:	e003      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	75fb      	strb	r3, [r7, #23]
      break;
 80081bc:	e000      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80081be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10a      	bne.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80081c6:	4b66      	ldr	r3, [pc, #408]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80081c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081d4:	4962      	ldr	r1, [pc, #392]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	654b      	str	r3, [r1, #84]	; 0x54
 80081da:	e001      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
 80081de:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d029      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d003      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80081f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081f8:	d007      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80081fa:	e00f      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081fc:	4b58      	ldr	r3, [pc, #352]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	4a57      	ldr	r2, [pc, #348]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008206:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008208:	e00b      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	3304      	adds	r3, #4
 800820e:	2102      	movs	r1, #2
 8008210:	4618      	mov	r0, r3
 8008212:	f000 ff19 	bl	8009048 <RCCEx_PLL2_Config>
 8008216:	4603      	mov	r3, r0
 8008218:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800821a:	e002      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	75fb      	strb	r3, [r7, #23]
      break;
 8008220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008222:	7dfb      	ldrb	r3, [r7, #23]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d109      	bne.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008228:	4b4d      	ldr	r3, [pc, #308]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800822a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800822c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008234:	494a      	ldr	r1, [pc, #296]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008236:	4313      	orrs	r3, r2
 8008238:	64cb      	str	r3, [r1, #76]	; 0x4c
 800823a:	e001      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800823c:	7dfb      	ldrb	r3, [r7, #23]
 800823e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00a      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3324      	adds	r3, #36	; 0x24
 8008250:	2102      	movs	r1, #2
 8008252:	4618      	mov	r0, r3
 8008254:	f000 ffaa 	bl	80091ac <RCCEx_PLL3_Config>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d02f      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008276:	d00c      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800827c:	d802      	bhi.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800827e:	2b00      	cmp	r3, #0
 8008280:	d011      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8008282:	e00d      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8008284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008288:	d00f      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800828a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800828e:	d00e      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8008290:	e006      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008292:	4b33      	ldr	r3, [pc, #204]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008296:	4a32      	ldr	r2, [pc, #200]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800829c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800829e:	e007      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	75fb      	strb	r3, [r7, #23]
      break;
 80082a4:	e004      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80082a6:	bf00      	nop
 80082a8:	e002      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80082aa:	bf00      	nop
 80082ac:	e000      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80082ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082b0:	7dfb      	ldrb	r3, [r7, #23]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d109      	bne.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80082b6:	4b2a      	ldr	r3, [pc, #168]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80082b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082c2:	4927      	ldr	r1, [pc, #156]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	654b      	str	r3, [r1, #84]	; 0x54
 80082c8:	e001      	b.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
 80082cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d008      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80082da:	4b21      	ldr	r3, [pc, #132]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80082dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e6:	491e      	ldr	r1, [pc, #120]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d008      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80082f8:	4b19      	ldr	r3, [pc, #100]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80082fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008304:	4916      	ldr	r1, [pc, #88]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008306:	4313      	orrs	r3, r2
 8008308:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00d      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008316:	4b12      	ldr	r3, [pc, #72]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	4a11      	ldr	r2, [pc, #68]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800831c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008320:	6113      	str	r3, [r2, #16]
 8008322:	4b0f      	ldr	r3, [pc, #60]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008324:	691a      	ldr	r2, [r3, #16]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800832c:	490c      	ldr	r1, [pc, #48]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800832e:	4313      	orrs	r3, r2
 8008330:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	da08      	bge.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800833a:	4b09      	ldr	r3, [pc, #36]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800833c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800833e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008346:	4906      	ldr	r1, [pc, #24]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8008348:	4313      	orrs	r3, r2
 800834a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800834c:	7dbb      	ldrb	r3, [r7, #22]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	e000      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	58024400 	.word	0x58024400

08008364 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b090      	sub	sp, #64	; 0x40
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008372:	d150      	bne.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008374:	4ba1      	ldr	r3, [pc, #644]	; (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008378:	f003 0307 	and.w	r3, r3, #7
 800837c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800837e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008380:	2b04      	cmp	r3, #4
 8008382:	d844      	bhi.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8008384:	a201      	add	r2, pc, #4	; (adr r2, 800838c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838a:	bf00      	nop
 800838c:	080083a1 	.word	0x080083a1
 8008390:	080083b1 	.word	0x080083b1
 8008394:	080083c1 	.word	0x080083c1
 8008398:	08008409 	.word	0x08008409
 800839c:	080083d1 	.word	0x080083d1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 fd03 	bl	8008db0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083ae:	e241      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083b0:	f107 0318 	add.w	r3, r7, #24
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 fa63 	bl	8008880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083be:	e239      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083c0:	f107 030c 	add.w	r3, r7, #12
 80083c4:	4618      	mov	r0, r3
 80083c6:	f000 fba7 	bl	8008b18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083ce:	e231      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80083d0:	4b8a      	ldr	r3, [pc, #552]	; (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80083d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083d8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80083da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d102      	bne.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80083e0:	4b87      	ldr	r3, [pc, #540]	; (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80083e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80083e4:	e226      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80083e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083ec:	d102      	bne.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80083ee:	4b85      	ldr	r3, [pc, #532]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80083f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083f2:	e21f      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80083f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083fa:	d102      	bne.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80083fc:	4b82      	ldr	r3, [pc, #520]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80083fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008400:	e218      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008402:	2300      	movs	r3, #0
 8008404:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008406:	e215      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008408:	4b80      	ldr	r3, [pc, #512]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800840a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800840c:	e212      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800840e:	2300      	movs	r3, #0
 8008410:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008412:	bf00      	nop
 8008414:	e20e      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800841c:	d14f      	bne.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800841e:	4b77      	ldr	r3, [pc, #476]	; (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008422:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008426:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842a:	2b80      	cmp	r3, #128	; 0x80
 800842c:	d01c      	beq.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800842e:	2b80      	cmp	r3, #128	; 0x80
 8008430:	d804      	bhi.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008432:	2b00      	cmp	r3, #0
 8008434:	d008      	beq.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8008436:	2b40      	cmp	r3, #64	; 0x40
 8008438:	d00e      	beq.n	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800843a:	e03c      	b.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800843c:	2bc0      	cmp	r3, #192	; 0xc0
 800843e:	d037      	beq.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008444:	d018      	beq.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8008446:	e036      	b.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800844c:	4618      	mov	r0, r3
 800844e:	f000 fcaf 	bl	8008db0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008454:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008456:	e1ed      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008458:	f107 0318 	add.w	r3, r7, #24
 800845c:	4618      	mov	r0, r3
 800845e:	f000 fa0f 	bl	8008880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008466:	e1e5      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008468:	f107 030c 	add.w	r3, r7, #12
 800846c:	4618      	mov	r0, r3
 800846e:	f000 fb53 	bl	8008b18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008476:	e1dd      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008478:	4b60      	ldr	r3, [pc, #384]	; (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800847a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800847c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008480:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008484:	2b00      	cmp	r3, #0
 8008486:	d102      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008488:	4b5d      	ldr	r3, [pc, #372]	; (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800848a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800848c:	e1d2      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800848e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008490:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008494:	d102      	bne.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8008496:	4b5b      	ldr	r3, [pc, #364]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008498:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800849a:	e1cb      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800849c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084a2:	d102      	bne.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80084a4:	4b58      	ldr	r3, [pc, #352]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80084a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084a8:	e1c4      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80084aa:	2300      	movs	r3, #0
 80084ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084ae:	e1c1      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80084b0:	4b56      	ldr	r3, [pc, #344]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80084b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084b4:	e1be      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084ba:	bf00      	nop
 80084bc:	e1ba      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084c4:	d153      	bne.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80084c6:	4b4d      	ldr	r3, [pc, #308]	; (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80084c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ca:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80084ce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084d6:	d01f      	beq.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80084d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084dc:	d805      	bhi.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00a      	beq.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80084e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084e6:	d00f      	beq.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80084e8:	e03d      	b.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80084ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80084ee:	d037      	beq.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80084f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084f4:	d018      	beq.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80084f6:	e036      	b.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fc57 	bl	8008db0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008504:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008506:	e195      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008508:	f107 0318 	add.w	r3, r7, #24
 800850c:	4618      	mov	r0, r3
 800850e:	f000 f9b7 	bl	8008880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008516:	e18d      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008518:	f107 030c 	add.w	r3, r7, #12
 800851c:	4618      	mov	r0, r3
 800851e:	f000 fafb 	bl	8008b18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008526:	e185      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008528:	4b34      	ldr	r3, [pc, #208]	; (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800852a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800852c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008530:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008534:	2b00      	cmp	r3, #0
 8008536:	d102      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008538:	4b31      	ldr	r3, [pc, #196]	; (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800853c:	e17a      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800853e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008540:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008544:	d102      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8008546:	4b2f      	ldr	r3, [pc, #188]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008548:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800854a:	e173      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800854c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008552:	d102      	bne.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8008554:	4b2c      	ldr	r3, [pc, #176]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008556:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008558:	e16c      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800855a:	2300      	movs	r3, #0
 800855c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800855e:	e169      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008560:	4b2a      	ldr	r3, [pc, #168]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008562:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008564:	e166      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800856a:	bf00      	nop
 800856c:	e162      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008574:	d15d      	bne.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008576:	4b21      	ldr	r3, [pc, #132]	; (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800857a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800857e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008586:	d01f      	beq.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800858c:	d805      	bhi.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00a      	beq.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008592:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008596:	d00f      	beq.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008598:	e047      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800859a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800859e:	d041      	beq.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80085a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085a4:	d018      	beq.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80085a6:	e040      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fbff 	bl	8008db0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085b6:	e13d      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085b8:	f107 0318 	add.w	r3, r7, #24
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 f95f 	bl	8008880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085c6:	e135      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085c8:	f107 030c 	add.w	r3, r7, #12
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 faa3 	bl	8008b18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085d6:	e12d      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80085d8:	4b08      	ldr	r3, [pc, #32]	; (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80085da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085e0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80085e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d102      	bne.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80085e8:	4b05      	ldr	r3, [pc, #20]	; (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80085ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80085ec:	e122      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80085ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085f4:	d10c      	bne.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80085f6:	4b03      	ldr	r3, [pc, #12]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80085f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085fa:	e11b      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80085fc:	58024400 	.word	0x58024400
 8008600:	03d09000 	.word	0x03d09000
 8008604:	003d0900 	.word	0x003d0900
 8008608:	017d7840 	.word	0x017d7840
 800860c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008616:	d102      	bne.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008618:	4b89      	ldr	r3, [pc, #548]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800861a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800861c:	e10a      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800861e:	2300      	movs	r3, #0
 8008620:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008622:	e107      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008624:	4b87      	ldr	r3, [pc, #540]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008626:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008628:	e104      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800862a:	2300      	movs	r3, #0
 800862c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800862e:	bf00      	nop
 8008630:	e100      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008638:	d153      	bne.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800863a:	4b83      	ldr	r3, [pc, #524]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800863c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800863e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008642:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800864a:	d01f      	beq.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800864c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008650:	d805      	bhi.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00a      	beq.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8008656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800865a:	d00f      	beq.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800865c:	e03d      	b.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800865e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008662:	d037      	beq.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8008664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008668:	d018      	beq.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800866a:	e036      	b.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800866c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008670:	4618      	mov	r0, r3
 8008672:	f000 fb9d 	bl	8008db0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800867a:	e0db      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800867c:	f107 0318 	add.w	r3, r7, #24
 8008680:	4618      	mov	r0, r3
 8008682:	f000 f8fd 	bl	8008880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800868a:	e0d3      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800868c:	f107 030c 	add.w	r3, r7, #12
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fa41 	bl	8008b18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800869a:	e0cb      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800869c:	4b6a      	ldr	r3, [pc, #424]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800869e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086a4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80086a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d102      	bne.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80086ac:	4b67      	ldr	r3, [pc, #412]	; (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80086ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80086b0:	e0c0      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80086b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086b8:	d102      	bne.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80086ba:	4b65      	ldr	r3, [pc, #404]	; (8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80086bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086be:	e0b9      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80086c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086c6:	d102      	bne.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80086c8:	4b5d      	ldr	r3, [pc, #372]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80086ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086cc:	e0b2      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80086ce:	2300      	movs	r3, #0
 80086d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086d2:	e0af      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80086d4:	4b5b      	ldr	r3, [pc, #364]	; (8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80086d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086d8:	e0ac      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80086da:	2300      	movs	r3, #0
 80086dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086de:	bf00      	nop
 80086e0:	e0a8      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80086e8:	d13d      	bne.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80086ea:	4b57      	ldr	r3, [pc, #348]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80086ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80086f2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80086f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086fa:	d00c      	beq.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80086fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008700:	d011      	beq.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008702:	2b00      	cmp	r3, #0
 8008704:	d12b      	bne.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008706:	f107 0318 	add.w	r3, r7, #24
 800870a:	4618      	mov	r0, r3
 800870c:	f000 f8b8 	bl	8008880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008714:	e08e      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008716:	f107 030c 	add.w	r3, r7, #12
 800871a:	4618      	mov	r0, r3
 800871c:	f000 f9fc 	bl	8008b18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008724:	e086      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008726:	4b48      	ldr	r3, [pc, #288]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800872a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800872e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008732:	2b00      	cmp	r3, #0
 8008734:	d102      	bne.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008736:	4b45      	ldr	r3, [pc, #276]	; (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008738:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800873a:	e07b      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800873c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008742:	d102      	bne.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8008744:	4b42      	ldr	r3, [pc, #264]	; (8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008746:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008748:	e074      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800874a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008750:	d102      	bne.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8008752:	4b3b      	ldr	r3, [pc, #236]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008754:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008756:	e06d      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008758:	2300      	movs	r3, #0
 800875a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800875c:	e06a      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800875e:	2300      	movs	r3, #0
 8008760:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008762:	bf00      	nop
 8008764:	e066      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800876c:	d11f      	bne.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800876e:	4b36      	ldr	r3, [pc, #216]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008776:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800877e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008782:	d008      	beq.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008784:	e00f      	b.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800878a:	4618      	mov	r0, r3
 800878c:	f000 fb10 	bl	8008db0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008794:	e04e      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008796:	f107 0318 	add.w	r3, r7, #24
 800879a:	4618      	mov	r0, r3
 800879c:	f000 f870 	bl	8008880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80087a0:	6a3b      	ldr	r3, [r7, #32]
 80087a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087a4:	e046      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80087a6:	2300      	movs	r3, #0
 80087a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087aa:	bf00      	nop
 80087ac:	e042      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087b4:	d13c      	bne.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80087b6:	4b24      	ldr	r3, [pc, #144]	; (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80087b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ba:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80087be:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80087c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087c6:	d01e      	beq.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 80087c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087cc:	d805      	bhi.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00d      	beq.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80087d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087d6:	d00e      	beq.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 80087d8:	e026      	b.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80087da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087de:	d01d      	beq.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80087e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087e4:	d01d      	beq.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80087e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087ea:	d014      	beq.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80087ec:	e01c      	b.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80087ee:	f000 f831 	bl	8008854 <HAL_RCCEx_GetD3PCLK1Freq>
 80087f2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80087f4:	e01e      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087f6:	f107 0318 	add.w	r3, r7, #24
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 f840 	bl	8008880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008804:	e016      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008806:	f107 030c 	add.w	r3, r7, #12
 800880a:	4618      	mov	r0, r3
 800880c:	f000 f984 	bl	8008b18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008814:	e00e      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8008816:	4b0d      	ldr	r3, [pc, #52]	; (800884c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008818:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800881a:	e00b      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800881c:	4b0c      	ldr	r3, [pc, #48]	; (8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800881e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008820:	e008      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8008822:	4b07      	ldr	r3, [pc, #28]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008824:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008826:	e005      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008828:	2300      	movs	r3, #0
 800882a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800882c:	bf00      	nop
 800882e:	e001      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8008830:	2300      	movs	r3, #0
 8008832:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008836:	4618      	mov	r0, r3
 8008838:	3740      	adds	r7, #64	; 0x40
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	017d7840 	.word	0x017d7840
 8008844:	00bb8000 	.word	0x00bb8000
 8008848:	58024400 	.word	0x58024400
 800884c:	03d09000 	.word	0x03d09000
 8008850:	003d0900 	.word	0x003d0900

08008854 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008858:	f7fe fe4a 	bl	80074f0 <HAL_RCC_GetHCLKFreq>
 800885c:	4601      	mov	r1, r0
 800885e:	4b06      	ldr	r3, [pc, #24]	; (8008878 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	091b      	lsrs	r3, r3, #4
 8008864:	f003 0307 	and.w	r3, r3, #7
 8008868:	4a04      	ldr	r2, [pc, #16]	; (800887c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800886a:	5cd3      	ldrb	r3, [r2, r3]
 800886c:	f003 031f 	and.w	r3, r3, #31
 8008870:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008874:	4618      	mov	r0, r3
 8008876:	bd80      	pop	{r7, pc}
 8008878:	58024400 	.word	0x58024400
 800887c:	0800e1e0 	.word	0x0800e1e0

08008880 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008880:	b480      	push	{r7}
 8008882:	b089      	sub	sp, #36	; 0x24
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008888:	4b9d      	ldr	r3, [pc, #628]	; (8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800888a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888c:	f003 0303 	and.w	r3, r3, #3
 8008890:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008892:	4b9b      	ldr	r3, [pc, #620]	; (8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008896:	0b1b      	lsrs	r3, r3, #12
 8008898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800889c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800889e:	4b98      	ldr	r3, [pc, #608]	; (8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80088a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a2:	091b      	lsrs	r3, r3, #4
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80088aa:	4b95      	ldr	r3, [pc, #596]	; (8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80088ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ae:	08db      	lsrs	r3, r3, #3
 80088b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	fb02 f303 	mul.w	r3, r2, r3
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 810a 	beq.w	8008ae2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d05a      	beq.n	800898a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d302      	bcc.n	80088de <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d078      	beq.n	80089ce <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80088dc:	e099      	b.n	8008a12 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088de:	4b88      	ldr	r3, [pc, #544]	; (8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0320 	and.w	r3, r3, #32
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d02d      	beq.n	8008946 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088ea:	4b85      	ldr	r3, [pc, #532]	; (8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	08db      	lsrs	r3, r3, #3
 80088f0:	f003 0303 	and.w	r3, r3, #3
 80088f4:	4a83      	ldr	r2, [pc, #524]	; (8008b04 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80088f6:	fa22 f303 	lsr.w	r3, r2, r3
 80088fa:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	ee07 3a90 	vmov	s15, r3
 8008902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	ee07 3a90 	vmov	s15, r3
 800890c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008910:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008914:	4b7a      	ldr	r3, [pc, #488]	; (8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800891c:	ee07 3a90 	vmov	s15, r3
 8008920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008924:	ed97 6a03 	vldr	s12, [r7, #12]
 8008928:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008b08 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800892c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008930:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008934:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008938:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800893c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008940:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008944:	e087      	b.n	8008a56 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	ee07 3a90 	vmov	s15, r3
 800894c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008950:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8008954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008958:	4b69      	ldr	r3, [pc, #420]	; (8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800895a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008960:	ee07 3a90 	vmov	s15, r3
 8008964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008968:	ed97 6a03 	vldr	s12, [r7, #12]
 800896c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008b08 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008970:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008978:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800897c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008984:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008988:	e065      	b.n	8008a56 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	ee07 3a90 	vmov	s15, r3
 8008990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008994:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800899c:	4b58      	ldr	r3, [pc, #352]	; (8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800899e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a4:	ee07 3a90 	vmov	s15, r3
 80089a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80089b0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008b08 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80089b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089cc:	e043      	b.n	8008a56 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	ee07 3a90 	vmov	s15, r3
 80089d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089d8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008b14 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80089dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089e0:	4b47      	ldr	r3, [pc, #284]	; (8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80089e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e8:	ee07 3a90 	vmov	s15, r3
 80089ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80089f4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008b08 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80089f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a10:	e021      	b.n	8008a56 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	ee07 3a90 	vmov	s15, r3
 8008a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a1c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008b10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a24:	4b36      	ldr	r3, [pc, #216]	; (8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a2c:	ee07 3a90 	vmov	s15, r3
 8008a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a34:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a38:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008b08 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a54:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008a56:	4b2a      	ldr	r3, [pc, #168]	; (8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5a:	0a5b      	lsrs	r3, r3, #9
 8008a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a60:	ee07 3a90 	vmov	s15, r3
 8008a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a70:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a7c:	ee17 2a90 	vmov	r2, s15
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008a84:	4b1e      	ldr	r3, [pc, #120]	; (8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a88:	0c1b      	lsrs	r3, r3, #16
 8008a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aaa:	ee17 2a90 	vmov	r2, s15
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008ab2:	4b13      	ldr	r3, [pc, #76]	; (8008b00 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab6:	0e1b      	lsrs	r3, r3, #24
 8008ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008abc:	ee07 3a90 	vmov	s15, r3
 8008ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ac8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008acc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ad8:	ee17 2a90 	vmov	r2, s15
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008ae0:	e008      	b.n	8008af4 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	609a      	str	r2, [r3, #8]
}
 8008af4:	bf00      	nop
 8008af6:	3724      	adds	r7, #36	; 0x24
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	58024400 	.word	0x58024400
 8008b04:	03d09000 	.word	0x03d09000
 8008b08:	46000000 	.word	0x46000000
 8008b0c:	4c742400 	.word	0x4c742400
 8008b10:	4a742400 	.word	0x4a742400
 8008b14:	4bbebc20 	.word	0x4bbebc20

08008b18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b089      	sub	sp, #36	; 0x24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b20:	4b9d      	ldr	r3, [pc, #628]	; (8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b24:	f003 0303 	and.w	r3, r3, #3
 8008b28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008b2a:	4b9b      	ldr	r3, [pc, #620]	; (8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2e:	0d1b      	lsrs	r3, r3, #20
 8008b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008b36:	4b98      	ldr	r3, [pc, #608]	; (8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3a:	0a1b      	lsrs	r3, r3, #8
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008b42:	4b95      	ldr	r3, [pc, #596]	; (8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b46:	08db      	lsrs	r3, r3, #3
 8008b48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	fb02 f303 	mul.w	r3, r2, r3
 8008b52:	ee07 3a90 	vmov	s15, r3
 8008b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f000 810a 	beq.w	8008d7a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d05a      	beq.n	8008c22 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d302      	bcc.n	8008b76 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d078      	beq.n	8008c66 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008b74:	e099      	b.n	8008caa <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b76:	4b88      	ldr	r3, [pc, #544]	; (8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0320 	and.w	r3, r3, #32
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d02d      	beq.n	8008bde <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b82:	4b85      	ldr	r3, [pc, #532]	; (8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	08db      	lsrs	r3, r3, #3
 8008b88:	f003 0303 	and.w	r3, r3, #3
 8008b8c:	4a83      	ldr	r2, [pc, #524]	; (8008d9c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8008b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b92:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	ee07 3a90 	vmov	s15, r3
 8008b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	ee07 3a90 	vmov	s15, r3
 8008ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bac:	4b7a      	ldr	r3, [pc, #488]	; (8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bb4:	ee07 3a90 	vmov	s15, r3
 8008bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bc0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008bc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bd8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008bdc:	e087      	b.n	8008cee <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	ee07 3a90 	vmov	s15, r3
 8008be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008da4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008bec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bf0:	4b69      	ldr	r3, [pc, #420]	; (8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf8:	ee07 3a90 	vmov	s15, r3
 8008bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c00:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c04:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008c08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c20:	e065      	b.n	8008cee <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	ee07 3a90 	vmov	s15, r3
 8008c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c2c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008da8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008c30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c34:	4b58      	ldr	r3, [pc, #352]	; (8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c3c:	ee07 3a90 	vmov	s15, r3
 8008c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c44:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c48:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008c4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c64:	e043      	b.n	8008cee <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	ee07 3a90 	vmov	s15, r3
 8008c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c70:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008dac <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008c74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c78:	4b47      	ldr	r3, [pc, #284]	; (8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c80:	ee07 3a90 	vmov	s15, r3
 8008c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c88:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c8c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008c90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ca4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ca8:	e021      	b.n	8008cee <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	ee07 3a90 	vmov	s15, r3
 8008cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cb4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008da8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008cb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cbc:	4b36      	ldr	r3, [pc, #216]	; (8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cc4:	ee07 3a90 	vmov	s15, r3
 8008cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ccc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cd0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008da0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008cd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cec:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008cee:	4b2a      	ldr	r3, [pc, #168]	; (8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf2:	0a5b      	lsrs	r3, r3, #9
 8008cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cf8:	ee07 3a90 	vmov	s15, r3
 8008cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d08:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d14:	ee17 2a90 	vmov	r2, s15
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008d1c:	4b1e      	ldr	r3, [pc, #120]	; (8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d20:	0c1b      	lsrs	r3, r3, #16
 8008d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d36:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d42:	ee17 2a90 	vmov	r2, s15
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008d4a:	4b13      	ldr	r3, [pc, #76]	; (8008d98 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4e:	0e1b      	lsrs	r3, r3, #24
 8008d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d54:	ee07 3a90 	vmov	s15, r3
 8008d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d64:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d70:	ee17 2a90 	vmov	r2, s15
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008d78:	e008      	b.n	8008d8c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	609a      	str	r2, [r3, #8]
}
 8008d8c:	bf00      	nop
 8008d8e:	3724      	adds	r7, #36	; 0x24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	58024400 	.word	0x58024400
 8008d9c:	03d09000 	.word	0x03d09000
 8008da0:	46000000 	.word	0x46000000
 8008da4:	4c742400 	.word	0x4c742400
 8008da8:	4a742400 	.word	0x4a742400
 8008dac:	4bbebc20 	.word	0x4bbebc20

08008db0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b089      	sub	sp, #36	; 0x24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008db8:	4b9d      	ldr	r3, [pc, #628]	; (8009030 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dbc:	f003 0303 	and.w	r3, r3, #3
 8008dc0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008dc2:	4b9b      	ldr	r3, [pc, #620]	; (8009030 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc6:	091b      	lsrs	r3, r3, #4
 8008dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dcc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008dce:	4b98      	ldr	r3, [pc, #608]	; (8009030 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008dd8:	4b95      	ldr	r3, [pc, #596]	; (8009030 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ddc:	08db      	lsrs	r3, r3, #3
 8008dde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008de2:	693a      	ldr	r2, [r7, #16]
 8008de4:	fb02 f303 	mul.w	r3, r2, r3
 8008de8:	ee07 3a90 	vmov	s15, r3
 8008dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 810a 	beq.w	8009010 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d05a      	beq.n	8008eb8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d302      	bcc.n	8008e0c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d078      	beq.n	8008efc <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008e0a:	e099      	b.n	8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e0c:	4b88      	ldr	r3, [pc, #544]	; (8009030 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0320 	and.w	r3, r3, #32
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d02d      	beq.n	8008e74 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e18:	4b85      	ldr	r3, [pc, #532]	; (8009030 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	08db      	lsrs	r3, r3, #3
 8008e1e:	f003 0303 	and.w	r3, r3, #3
 8008e22:	4a84      	ldr	r2, [pc, #528]	; (8009034 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008e24:	fa22 f303 	lsr.w	r3, r2, r3
 8008e28:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	ee07 3a90 	vmov	s15, r3
 8008e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e42:	4b7b      	ldr	r3, [pc, #492]	; (8009030 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e4a:	ee07 3a90 	vmov	s15, r3
 8008e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008e72:	e087      	b.n	8008f84 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	ee07 3a90 	vmov	s15, r3
 8008e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800903c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8008e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e86:	4b6a      	ldr	r3, [pc, #424]	; (8009030 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8e:	ee07 3a90 	vmov	s15, r3
 8008e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008eb6:	e065      	b.n	8008f84 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	ee07 3a90 	vmov	s15, r3
 8008ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ec2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009040 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eca:	4b59      	ldr	r3, [pc, #356]	; (8009030 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ed2:	ee07 3a90 	vmov	s15, r3
 8008ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ede:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008efa:	e043      	b.n	8008f84 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	ee07 3a90 	vmov	s15, r3
 8008f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009044 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f0e:	4b48      	ldr	r3, [pc, #288]	; (8009030 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f16:	ee07 3a90 	vmov	s15, r3
 8008f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f3e:	e021      	b.n	8008f84 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	ee07 3a90 	vmov	s15, r3
 8008f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009040 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f52:	4b37      	ldr	r3, [pc, #220]	; (8009030 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f5a:	ee07 3a90 	vmov	s15, r3
 8008f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009038 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f82:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008f84:	4b2a      	ldr	r3, [pc, #168]	; (8009030 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f88:	0a5b      	lsrs	r3, r3, #9
 8008f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f8e:	ee07 3a90 	vmov	s15, r3
 8008f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008faa:	ee17 2a90 	vmov	r2, s15
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008fb2:	4b1f      	ldr	r3, [pc, #124]	; (8009030 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb6:	0c1b      	lsrs	r3, r3, #16
 8008fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fbc:	ee07 3a90 	vmov	s15, r3
 8008fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fd8:	ee17 2a90 	vmov	r2, s15
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008fe0:	4b13      	ldr	r3, [pc, #76]	; (8009030 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe4:	0e1b      	lsrs	r3, r3, #24
 8008fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fea:	ee07 3a90 	vmov	s15, r3
 8008fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ff2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009006:	ee17 2a90 	vmov	r2, s15
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800900e:	e008      	b.n	8009022 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	609a      	str	r2, [r3, #8]
}
 8009022:	bf00      	nop
 8009024:	3724      	adds	r7, #36	; 0x24
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	58024400 	.word	0x58024400
 8009034:	03d09000 	.word	0x03d09000
 8009038:	46000000 	.word	0x46000000
 800903c:	4c742400 	.word	0x4c742400
 8009040:	4a742400 	.word	0x4a742400
 8009044:	4bbebc20 	.word	0x4bbebc20

08009048 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009056:	4b53      	ldr	r3, [pc, #332]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905a:	f003 0303 	and.w	r3, r3, #3
 800905e:	2b03      	cmp	r3, #3
 8009060:	d101      	bne.n	8009066 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e099      	b.n	800919a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009066:	4b4f      	ldr	r3, [pc, #316]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a4e      	ldr	r2, [pc, #312]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800906c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009070:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009072:	f7f9 fa21 	bl	80024b8 <HAL_GetTick>
 8009076:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009078:	e008      	b.n	800908c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800907a:	f7f9 fa1d 	bl	80024b8 <HAL_GetTick>
 800907e:	4602      	mov	r2, r0
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	2b02      	cmp	r3, #2
 8009086:	d901      	bls.n	800908c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009088:	2303      	movs	r3, #3
 800908a:	e086      	b.n	800919a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800908c:	4b45      	ldr	r3, [pc, #276]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1f0      	bne.n	800907a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009098:	4b42      	ldr	r3, [pc, #264]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800909a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	031b      	lsls	r3, r3, #12
 80090a6:	493f      	ldr	r1, [pc, #252]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 80090a8:	4313      	orrs	r3, r2
 80090aa:	628b      	str	r3, [r1, #40]	; 0x28
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	3b01      	subs	r3, #1
 80090bc:	025b      	lsls	r3, r3, #9
 80090be:	b29b      	uxth	r3, r3
 80090c0:	431a      	orrs	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	041b      	lsls	r3, r3, #16
 80090ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80090ce:	431a      	orrs	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	3b01      	subs	r3, #1
 80090d6:	061b      	lsls	r3, r3, #24
 80090d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80090dc:	4931      	ldr	r1, [pc, #196]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80090e2:	4b30      	ldr	r3, [pc, #192]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 80090e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	492d      	ldr	r1, [pc, #180]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 80090f0:	4313      	orrs	r3, r2
 80090f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80090f4:	4b2b      	ldr	r3, [pc, #172]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 80090f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f8:	f023 0220 	bic.w	r2, r3, #32
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	4928      	ldr	r1, [pc, #160]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009102:	4313      	orrs	r3, r2
 8009104:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009106:	4b27      	ldr	r3, [pc, #156]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910a:	4a26      	ldr	r2, [pc, #152]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800910c:	f023 0310 	bic.w	r3, r3, #16
 8009110:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009112:	4b24      	ldr	r3, [pc, #144]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009114:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009116:	4b24      	ldr	r3, [pc, #144]	; (80091a8 <RCCEx_PLL2_Config+0x160>)
 8009118:	4013      	ands	r3, r2
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	69d2      	ldr	r2, [r2, #28]
 800911e:	00d2      	lsls	r2, r2, #3
 8009120:	4920      	ldr	r1, [pc, #128]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009122:	4313      	orrs	r3, r2
 8009124:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009126:	4b1f      	ldr	r3, [pc, #124]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912a:	4a1e      	ldr	r2, [pc, #120]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800912c:	f043 0310 	orr.w	r3, r3, #16
 8009130:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d106      	bne.n	8009146 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009138:	4b1a      	ldr	r3, [pc, #104]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800913a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913c:	4a19      	ldr	r2, [pc, #100]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800913e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009142:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009144:	e00f      	b.n	8009166 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d106      	bne.n	800915a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800914c:	4b15      	ldr	r3, [pc, #84]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800914e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009150:	4a14      	ldr	r2, [pc, #80]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009156:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009158:	e005      	b.n	8009166 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800915a:	4b12      	ldr	r3, [pc, #72]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800915c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915e:	4a11      	ldr	r2, [pc, #68]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009160:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009164:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009166:	4b0f      	ldr	r3, [pc, #60]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a0e      	ldr	r2, [pc, #56]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800916c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009172:	f7f9 f9a1 	bl	80024b8 <HAL_GetTick>
 8009176:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009178:	e008      	b.n	800918c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800917a:	f7f9 f99d 	bl	80024b8 <HAL_GetTick>
 800917e:	4602      	mov	r2, r0
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	2b02      	cmp	r3, #2
 8009186:	d901      	bls.n	800918c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009188:	2303      	movs	r3, #3
 800918a:	e006      	b.n	800919a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800918c:	4b05      	ldr	r3, [pc, #20]	; (80091a4 <RCCEx_PLL2_Config+0x15c>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d0f0      	beq.n	800917a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009198:	7bfb      	ldrb	r3, [r7, #15]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	58024400 	.word	0x58024400
 80091a8:	ffff0007 	.word	0xffff0007

080091ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091ba:	4b53      	ldr	r3, [pc, #332]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80091bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091be:	f003 0303 	and.w	r3, r3, #3
 80091c2:	2b03      	cmp	r3, #3
 80091c4:	d101      	bne.n	80091ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e099      	b.n	80092fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80091ca:	4b4f      	ldr	r3, [pc, #316]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a4e      	ldr	r2, [pc, #312]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80091d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091d6:	f7f9 f96f 	bl	80024b8 <HAL_GetTick>
 80091da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80091dc:	e008      	b.n	80091f0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80091de:	f7f9 f96b 	bl	80024b8 <HAL_GetTick>
 80091e2:	4602      	mov	r2, r0
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d901      	bls.n	80091f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80091ec:	2303      	movs	r3, #3
 80091ee:	e086      	b.n	80092fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80091f0:	4b45      	ldr	r3, [pc, #276]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1f0      	bne.n	80091de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80091fc:	4b42      	ldr	r3, [pc, #264]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80091fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009200:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	051b      	lsls	r3, r3, #20
 800920a:	493f      	ldr	r1, [pc, #252]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 800920c:	4313      	orrs	r3, r2
 800920e:	628b      	str	r3, [r1, #40]	; 0x28
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	3b01      	subs	r3, #1
 8009216:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	3b01      	subs	r3, #1
 8009220:	025b      	lsls	r3, r3, #9
 8009222:	b29b      	uxth	r3, r3
 8009224:	431a      	orrs	r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	3b01      	subs	r3, #1
 800922c:	041b      	lsls	r3, r3, #16
 800922e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009232:	431a      	orrs	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	3b01      	subs	r3, #1
 800923a:	061b      	lsls	r3, r3, #24
 800923c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009240:	4931      	ldr	r1, [pc, #196]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 8009242:	4313      	orrs	r3, r2
 8009244:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009246:	4b30      	ldr	r3, [pc, #192]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 8009248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	695b      	ldr	r3, [r3, #20]
 8009252:	492d      	ldr	r1, [pc, #180]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 8009254:	4313      	orrs	r3, r2
 8009256:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009258:	4b2b      	ldr	r3, [pc, #172]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 800925a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	4928      	ldr	r1, [pc, #160]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 8009266:	4313      	orrs	r3, r2
 8009268:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800926a:	4b27      	ldr	r3, [pc, #156]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 800926c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926e:	4a26      	ldr	r2, [pc, #152]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 8009270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009274:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009276:	4b24      	ldr	r3, [pc, #144]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 8009278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800927a:	4b24      	ldr	r3, [pc, #144]	; (800930c <RCCEx_PLL3_Config+0x160>)
 800927c:	4013      	ands	r3, r2
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	69d2      	ldr	r2, [r2, #28]
 8009282:	00d2      	lsls	r2, r2, #3
 8009284:	4920      	ldr	r1, [pc, #128]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 8009286:	4313      	orrs	r3, r2
 8009288:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800928a:	4b1f      	ldr	r3, [pc, #124]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 800928c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928e:	4a1e      	ldr	r2, [pc, #120]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 8009290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009294:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d106      	bne.n	80092aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800929c:	4b1a      	ldr	r3, [pc, #104]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	4a19      	ldr	r2, [pc, #100]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80092a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092a8:	e00f      	b.n	80092ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d106      	bne.n	80092be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80092b0:	4b15      	ldr	r3, [pc, #84]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80092b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b4:	4a14      	ldr	r2, [pc, #80]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80092b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80092ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092bc:	e005      	b.n	80092ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80092be:	4b12      	ldr	r3, [pc, #72]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80092c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c2:	4a11      	ldr	r2, [pc, #68]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80092c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80092ca:	4b0f      	ldr	r3, [pc, #60]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a0e      	ldr	r2, [pc, #56]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80092d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092d6:	f7f9 f8ef 	bl	80024b8 <HAL_GetTick>
 80092da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80092dc:	e008      	b.n	80092f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80092de:	f7f9 f8eb 	bl	80024b8 <HAL_GetTick>
 80092e2:	4602      	mov	r2, r0
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d901      	bls.n	80092f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80092ec:	2303      	movs	r3, #3
 80092ee:	e006      	b.n	80092fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80092f0:	4b05      	ldr	r3, [pc, #20]	; (8009308 <RCCEx_PLL3_Config+0x15c>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d0f0      	beq.n	80092de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	58024400 	.word	0x58024400
 800930c:	ffff0007 	.word	0xffff0007

08009310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e01d      	b.n	800935e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009328:	b2db      	uxtb	r3, r3
 800932a:	2b00      	cmp	r3, #0
 800932c:	d106      	bne.n	800933c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7f8 fdac 	bl	8001e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2202      	movs	r2, #2
 8009340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	3304      	adds	r3, #4
 800934c:	4619      	mov	r1, r3
 800934e:	4610      	mov	r0, r2
 8009350:	f000 fa4c 	bl	80097ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
	...

08009368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68da      	ldr	r2, [r3, #12]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f042 0201 	orr.w	r2, r2, #1
 800937e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689a      	ldr	r2, [r3, #8]
 8009386:	4b0c      	ldr	r3, [pc, #48]	; (80093b8 <HAL_TIM_Base_Start_IT+0x50>)
 8009388:	4013      	ands	r3, r2
 800938a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2b06      	cmp	r3, #6
 8009390:	d00b      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x42>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009398:	d007      	beq.n	80093aa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f042 0201 	orr.w	r2, r2, #1
 80093a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3714      	adds	r7, #20
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	00010007 	.word	0x00010007

080093bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	f003 0302 	and.w	r3, r3, #2
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d122      	bne.n	8009418 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	f003 0302 	and.w	r3, r3, #2
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d11b      	bne.n	8009418 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f06f 0202 	mvn.w	r2, #2
 80093e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2201      	movs	r2, #1
 80093ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	f003 0303 	and.w	r3, r3, #3
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f9d6 	bl	80097b0 <HAL_TIM_IC_CaptureCallback>
 8009404:	e005      	b.n	8009412 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f9c8 	bl	800979c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f9d9 	bl	80097c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	f003 0304 	and.w	r3, r3, #4
 8009422:	2b04      	cmp	r3, #4
 8009424:	d122      	bne.n	800946c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	f003 0304 	and.w	r3, r3, #4
 8009430:	2b04      	cmp	r3, #4
 8009432:	d11b      	bne.n	800946c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f06f 0204 	mvn.w	r2, #4
 800943c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2202      	movs	r2, #2
 8009442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f9ac 	bl	80097b0 <HAL_TIM_IC_CaptureCallback>
 8009458:	e005      	b.n	8009466 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f99e 	bl	800979c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f9af 	bl	80097c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	f003 0308 	and.w	r3, r3, #8
 8009476:	2b08      	cmp	r3, #8
 8009478:	d122      	bne.n	80094c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	f003 0308 	and.w	r3, r3, #8
 8009484:	2b08      	cmp	r3, #8
 8009486:	d11b      	bne.n	80094c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f06f 0208 	mvn.w	r2, #8
 8009490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2204      	movs	r2, #4
 8009496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	69db      	ldr	r3, [r3, #28]
 800949e:	f003 0303 	and.w	r3, r3, #3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f982 	bl	80097b0 <HAL_TIM_IC_CaptureCallback>
 80094ac:	e005      	b.n	80094ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f974 	bl	800979c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f985 	bl	80097c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	f003 0310 	and.w	r3, r3, #16
 80094ca:	2b10      	cmp	r3, #16
 80094cc:	d122      	bne.n	8009514 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	f003 0310 	and.w	r3, r3, #16
 80094d8:	2b10      	cmp	r3, #16
 80094da:	d11b      	bne.n	8009514 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f06f 0210 	mvn.w	r2, #16
 80094e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2208      	movs	r2, #8
 80094ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f958 	bl	80097b0 <HAL_TIM_IC_CaptureCallback>
 8009500:	e005      	b.n	800950e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f94a 	bl	800979c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f95b 	bl	80097c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	2b01      	cmp	r3, #1
 8009520:	d10e      	bne.n	8009540 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	f003 0301 	and.w	r3, r3, #1
 800952c:	2b01      	cmp	r3, #1
 800952e:	d107      	bne.n	8009540 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f06f 0201 	mvn.w	r2, #1
 8009538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7f7 fcfc 	bl	8000f38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800954a:	2b80      	cmp	r3, #128	; 0x80
 800954c:	d10e      	bne.n	800956c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009558:	2b80      	cmp	r3, #128	; 0x80
 800955a:	d107      	bne.n	800956c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fb0a 	bl	8009b80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800957a:	d10e      	bne.n	800959a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009586:	2b80      	cmp	r3, #128	; 0x80
 8009588:	d107      	bne.n	800959a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fafd 	bl	8009b94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a4:	2b40      	cmp	r3, #64	; 0x40
 80095a6:	d10e      	bne.n	80095c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b2:	2b40      	cmp	r3, #64	; 0x40
 80095b4:	d107      	bne.n	80095c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f909 	bl	80097d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	f003 0320 	and.w	r3, r3, #32
 80095d0:	2b20      	cmp	r3, #32
 80095d2:	d10e      	bne.n	80095f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	f003 0320 	and.w	r3, r3, #32
 80095de:	2b20      	cmp	r3, #32
 80095e0:	d107      	bne.n	80095f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f06f 0220 	mvn.w	r2, #32
 80095ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 fabd 	bl	8009b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095f2:	bf00      	nop
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
	...

080095fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800960c:	2b01      	cmp	r3, #1
 800960e:	d101      	bne.n	8009614 <HAL_TIM_ConfigClockSource+0x18>
 8009610:	2302      	movs	r3, #2
 8009612:	e0b7      	b.n	8009784 <HAL_TIM_ConfigClockSource+0x188>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2202      	movs	r2, #2
 8009620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	4b57      	ldr	r3, [pc, #348]	; (800978c <HAL_TIM_ConfigClockSource+0x190>)
 8009630:	4013      	ands	r3, r2
 8009632:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800963a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b70      	cmp	r3, #112	; 0x70
 800964a:	d02e      	beq.n	80096aa <HAL_TIM_ConfigClockSource+0xae>
 800964c:	2b70      	cmp	r3, #112	; 0x70
 800964e:	d812      	bhi.n	8009676 <HAL_TIM_ConfigClockSource+0x7a>
 8009650:	2b30      	cmp	r3, #48	; 0x30
 8009652:	f000 8084 	beq.w	800975e <HAL_TIM_ConfigClockSource+0x162>
 8009656:	2b30      	cmp	r3, #48	; 0x30
 8009658:	d806      	bhi.n	8009668 <HAL_TIM_ConfigClockSource+0x6c>
 800965a:	2b10      	cmp	r3, #16
 800965c:	d07f      	beq.n	800975e <HAL_TIM_ConfigClockSource+0x162>
 800965e:	2b20      	cmp	r3, #32
 8009660:	d07d      	beq.n	800975e <HAL_TIM_ConfigClockSource+0x162>
 8009662:	2b00      	cmp	r3, #0
 8009664:	d07b      	beq.n	800975e <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009666:	e084      	b.n	8009772 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8009668:	2b50      	cmp	r3, #80	; 0x50
 800966a:	d048      	beq.n	80096fe <HAL_TIM_ConfigClockSource+0x102>
 800966c:	2b60      	cmp	r3, #96	; 0x60
 800966e:	d056      	beq.n	800971e <HAL_TIM_ConfigClockSource+0x122>
 8009670:	2b40      	cmp	r3, #64	; 0x40
 8009672:	d064      	beq.n	800973e <HAL_TIM_ConfigClockSource+0x142>
      break;
 8009674:	e07d      	b.n	8009772 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8009676:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800967a:	d070      	beq.n	800975e <HAL_TIM_ConfigClockSource+0x162>
 800967c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009680:	d809      	bhi.n	8009696 <HAL_TIM_ConfigClockSource+0x9a>
 8009682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009686:	d027      	beq.n	80096d8 <HAL_TIM_ConfigClockSource+0xdc>
 8009688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800968c:	d067      	beq.n	800975e <HAL_TIM_ConfigClockSource+0x162>
 800968e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009692:	d06d      	beq.n	8009770 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009694:	e06d      	b.n	8009772 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8009696:	4a3e      	ldr	r2, [pc, #248]	; (8009790 <HAL_TIM_ConfigClockSource+0x194>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d060      	beq.n	800975e <HAL_TIM_ConfigClockSource+0x162>
 800969c:	4a3d      	ldr	r2, [pc, #244]	; (8009794 <HAL_TIM_ConfigClockSource+0x198>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d05d      	beq.n	800975e <HAL_TIM_ConfigClockSource+0x162>
 80096a2:	4a3d      	ldr	r2, [pc, #244]	; (8009798 <HAL_TIM_ConfigClockSource+0x19c>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d05a      	beq.n	800975e <HAL_TIM_ConfigClockSource+0x162>
      break;
 80096a8:	e063      	b.n	8009772 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6818      	ldr	r0, [r3, #0]
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	6899      	ldr	r1, [r3, #8]
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	685a      	ldr	r2, [r3, #4]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	f000 f9af 	bl	8009a1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80096cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	609a      	str	r2, [r3, #8]
      break;
 80096d6:	e04c      	b.n	8009772 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6818      	ldr	r0, [r3, #0]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	6899      	ldr	r1, [r3, #8]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	685a      	ldr	r2, [r3, #4]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	f000 f998 	bl	8009a1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	689a      	ldr	r2, [r3, #8]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096fa:	609a      	str	r2, [r3, #8]
      break;
 80096fc:	e039      	b.n	8009772 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6818      	ldr	r0, [r3, #0]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	6859      	ldr	r1, [r3, #4]
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	461a      	mov	r2, r3
 800970c:	f000 f908 	bl	8009920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2150      	movs	r1, #80	; 0x50
 8009716:	4618      	mov	r0, r3
 8009718:	f000 f962 	bl	80099e0 <TIM_ITRx_SetConfig>
      break;
 800971c:	e029      	b.n	8009772 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6818      	ldr	r0, [r3, #0]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	6859      	ldr	r1, [r3, #4]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	461a      	mov	r2, r3
 800972c:	f000 f927 	bl	800997e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2160      	movs	r1, #96	; 0x60
 8009736:	4618      	mov	r0, r3
 8009738:	f000 f952 	bl	80099e0 <TIM_ITRx_SetConfig>
      break;
 800973c:	e019      	b.n	8009772 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6818      	ldr	r0, [r3, #0]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	6859      	ldr	r1, [r3, #4]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	461a      	mov	r2, r3
 800974c:	f000 f8e8 	bl	8009920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2140      	movs	r1, #64	; 0x40
 8009756:	4618      	mov	r0, r3
 8009758:	f000 f942 	bl	80099e0 <TIM_ITRx_SetConfig>
      break;
 800975c:	e009      	b.n	8009772 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4619      	mov	r1, r3
 8009768:	4610      	mov	r0, r2
 800976a:	f000 f939 	bl	80099e0 <TIM_ITRx_SetConfig>
      break;
 800976e:	e000      	b.n	8009772 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8009770:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	ffceff88 	.word	0xffceff88
 8009790:	00100030 	.word	0x00100030
 8009794:	00100040 	.word	0x00100040
 8009798:	00100020 	.word	0x00100020

0800979c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097b8:	bf00      	nop
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a40      	ldr	r2, [pc, #256]	; (8009900 <TIM_Base_SetConfig+0x114>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d013      	beq.n	800982c <TIM_Base_SetConfig+0x40>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800980a:	d00f      	beq.n	800982c <TIM_Base_SetConfig+0x40>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a3d      	ldr	r2, [pc, #244]	; (8009904 <TIM_Base_SetConfig+0x118>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d00b      	beq.n	800982c <TIM_Base_SetConfig+0x40>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a3c      	ldr	r2, [pc, #240]	; (8009908 <TIM_Base_SetConfig+0x11c>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d007      	beq.n	800982c <TIM_Base_SetConfig+0x40>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a3b      	ldr	r2, [pc, #236]	; (800990c <TIM_Base_SetConfig+0x120>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d003      	beq.n	800982c <TIM_Base_SetConfig+0x40>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a3a      	ldr	r2, [pc, #232]	; (8009910 <TIM_Base_SetConfig+0x124>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d108      	bne.n	800983e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	4313      	orrs	r3, r2
 800983c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a2f      	ldr	r2, [pc, #188]	; (8009900 <TIM_Base_SetConfig+0x114>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d01f      	beq.n	8009886 <TIM_Base_SetConfig+0x9a>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800984c:	d01b      	beq.n	8009886 <TIM_Base_SetConfig+0x9a>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a2c      	ldr	r2, [pc, #176]	; (8009904 <TIM_Base_SetConfig+0x118>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d017      	beq.n	8009886 <TIM_Base_SetConfig+0x9a>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a2b      	ldr	r2, [pc, #172]	; (8009908 <TIM_Base_SetConfig+0x11c>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d013      	beq.n	8009886 <TIM_Base_SetConfig+0x9a>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a2a      	ldr	r2, [pc, #168]	; (800990c <TIM_Base_SetConfig+0x120>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d00f      	beq.n	8009886 <TIM_Base_SetConfig+0x9a>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a29      	ldr	r2, [pc, #164]	; (8009910 <TIM_Base_SetConfig+0x124>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d00b      	beq.n	8009886 <TIM_Base_SetConfig+0x9a>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a28      	ldr	r2, [pc, #160]	; (8009914 <TIM_Base_SetConfig+0x128>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d007      	beq.n	8009886 <TIM_Base_SetConfig+0x9a>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a27      	ldr	r2, [pc, #156]	; (8009918 <TIM_Base_SetConfig+0x12c>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d003      	beq.n	8009886 <TIM_Base_SetConfig+0x9a>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4a26      	ldr	r2, [pc, #152]	; (800991c <TIM_Base_SetConfig+0x130>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d108      	bne.n	8009898 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800988c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	4313      	orrs	r3, r2
 8009896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	695b      	ldr	r3, [r3, #20]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	689a      	ldr	r2, [r3, #8]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a10      	ldr	r2, [pc, #64]	; (8009900 <TIM_Base_SetConfig+0x114>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d00f      	beq.n	80098e4 <TIM_Base_SetConfig+0xf8>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a12      	ldr	r2, [pc, #72]	; (8009910 <TIM_Base_SetConfig+0x124>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d00b      	beq.n	80098e4 <TIM_Base_SetConfig+0xf8>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a11      	ldr	r2, [pc, #68]	; (8009914 <TIM_Base_SetConfig+0x128>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d007      	beq.n	80098e4 <TIM_Base_SetConfig+0xf8>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a10      	ldr	r2, [pc, #64]	; (8009918 <TIM_Base_SetConfig+0x12c>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d003      	beq.n	80098e4 <TIM_Base_SetConfig+0xf8>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4a0f      	ldr	r2, [pc, #60]	; (800991c <TIM_Base_SetConfig+0x130>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d103      	bne.n	80098ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	691a      	ldr	r2, [r3, #16]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	615a      	str	r2, [r3, #20]
}
 80098f2:	bf00      	nop
 80098f4:	3714      	adds	r7, #20
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr
 80098fe:	bf00      	nop
 8009900:	40010000 	.word	0x40010000
 8009904:	40000400 	.word	0x40000400
 8009908:	40000800 	.word	0x40000800
 800990c:	40000c00 	.word	0x40000c00
 8009910:	40010400 	.word	0x40010400
 8009914:	40014000 	.word	0x40014000
 8009918:	40014400 	.word	0x40014400
 800991c:	40014800 	.word	0x40014800

08009920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009920:	b480      	push	{r7}
 8009922:	b087      	sub	sp, #28
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6a1b      	ldr	r3, [r3, #32]
 8009930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	f023 0201 	bic.w	r2, r3, #1
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800994a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	011b      	lsls	r3, r3, #4
 8009950:	693a      	ldr	r2, [r7, #16]
 8009952:	4313      	orrs	r3, r2
 8009954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	f023 030a 	bic.w	r3, r3, #10
 800995c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800995e:	697a      	ldr	r2, [r7, #20]
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	4313      	orrs	r3, r2
 8009964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	621a      	str	r2, [r3, #32]
}
 8009972:	bf00      	nop
 8009974:	371c      	adds	r7, #28
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800997e:	b480      	push	{r7}
 8009980:	b087      	sub	sp, #28
 8009982:	af00      	add	r7, sp, #0
 8009984:	60f8      	str	r0, [r7, #12]
 8009986:	60b9      	str	r1, [r7, #8]
 8009988:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6a1b      	ldr	r3, [r3, #32]
 800998e:	f023 0210 	bic.w	r2, r3, #16
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	699b      	ldr	r3, [r3, #24]
 800999a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6a1b      	ldr	r3, [r3, #32]
 80099a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	031b      	lsls	r3, r3, #12
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	011b      	lsls	r3, r3, #4
 80099c0:	693a      	ldr	r2, [r7, #16]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	697a      	ldr	r2, [r7, #20]
 80099ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	693a      	ldr	r2, [r7, #16]
 80099d0:	621a      	str	r2, [r3, #32]
}
 80099d2:	bf00      	nop
 80099d4:	371c      	adds	r7, #28
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
	...

080099e0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	4b09      	ldr	r3, [pc, #36]	; (8009a18 <TIM_ITRx_SetConfig+0x38>)
 80099f4:	4013      	ands	r3, r2
 80099f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	f043 0307 	orr.w	r3, r3, #7
 8009a02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	609a      	str	r2, [r3, #8]
}
 8009a0a:	bf00      	nop
 8009a0c:	3714      	adds	r7, #20
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	ffcfff8f 	.word	0xffcfff8f

08009a1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b087      	sub	sp, #28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
 8009a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	021a      	lsls	r2, r3, #8
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	431a      	orrs	r2, r3
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	697a      	ldr	r2, [r7, #20]
 8009a46:	4313      	orrs	r3, r2
 8009a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	697a      	ldr	r2, [r7, #20]
 8009a4e:	609a      	str	r2, [r3, #8]
}
 8009a50:	bf00      	nop
 8009a52:	371c      	adds	r7, #28
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d101      	bne.n	8009a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a70:	2302      	movs	r3, #2
 8009a72:	e068      	b.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2202      	movs	r2, #2
 8009a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a2e      	ldr	r2, [pc, #184]	; (8009b54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d004      	beq.n	8009aa8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a2d      	ldr	r2, [pc, #180]	; (8009b58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d108      	bne.n	8009aba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009aae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ac0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a1e      	ldr	r2, [pc, #120]	; (8009b54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d01d      	beq.n	8009b1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ae6:	d018      	beq.n	8009b1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a1b      	ldr	r2, [pc, #108]	; (8009b5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d013      	beq.n	8009b1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a1a      	ldr	r2, [pc, #104]	; (8009b60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d00e      	beq.n	8009b1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a18      	ldr	r2, [pc, #96]	; (8009b64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d009      	beq.n	8009b1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a13      	ldr	r2, [pc, #76]	; (8009b58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d004      	beq.n	8009b1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a14      	ldr	r2, [pc, #80]	; (8009b68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d10c      	bne.n	8009b34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68ba      	ldr	r2, [r7, #8]
 8009b32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3714      	adds	r7, #20
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	40010000 	.word	0x40010000
 8009b58:	40010400 	.word	0x40010400
 8009b5c:	40000400 	.word	0x40000400
 8009b60:	40000800 	.word	0x40000800
 8009b64:	40000c00 	.word	0x40000c00
 8009b68:	40001800 	.word	0x40001800

08009b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e042      	b.n	8009c40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d106      	bne.n	8009bd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f7f8 f9c7 	bl	8001f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2224      	movs	r2, #36	; 0x24
 8009bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f022 0201 	bic.w	r2, r2, #1
 8009be8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fb14 	bl	800a218 <UART_SetConfig>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d101      	bne.n	8009bfa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e022      	b.n	8009c40 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d002      	beq.n	8009c08 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f002 fc86 	bl	800c514 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	685a      	ldr	r2, [r3, #4]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689a      	ldr	r2, [r3, #8]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f042 0201 	orr.w	r2, r2, #1
 8009c36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f002 fd0d 	bl	800c658 <UART_CheckIdleState>
 8009c3e:	4603      	mov	r3, r0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3708      	adds	r7, #8
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	4613      	mov	r3, r2
 8009c54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c5c:	2b20      	cmp	r3, #32
 8009c5e:	d168      	bne.n	8009d32 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d002      	beq.n	8009c6c <HAL_UART_Transmit_IT+0x24>
 8009c66:	88fb      	ldrh	r3, [r7, #6]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e061      	b.n	8009d34 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d101      	bne.n	8009c7e <HAL_UART_Transmit_IT+0x36>
 8009c7a:	2302      	movs	r3, #2
 8009c7c:	e05a      	b.n	8009d34 <HAL_UART_Transmit_IT+0xec>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	88fa      	ldrh	r2, [r7, #6]
 8009c90:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	88fa      	ldrh	r2, [r7, #6]
 8009c98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2221      	movs	r2, #33	; 0x21
 8009cae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cba:	d11c      	bne.n	8009cf6 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cc4:	d107      	bne.n	8009cd6 <HAL_UART_Transmit_IT+0x8e>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	691b      	ldr	r3, [r3, #16]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d103      	bne.n	8009cd6 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	4a1b      	ldr	r2, [pc, #108]	; (8009d40 <HAL_UART_Transmit_IT+0xf8>)
 8009cd2:	671a      	str	r2, [r3, #112]	; 0x70
 8009cd4:	e002      	b.n	8009cdc <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	4a1a      	ldr	r2, [pc, #104]	; (8009d44 <HAL_UART_Transmit_IT+0xfc>)
 8009cda:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689a      	ldr	r2, [r3, #8]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009cf2:	609a      	str	r2, [r3, #8]
 8009cf4:	e01b      	b.n	8009d2e <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cfe:	d107      	bne.n	8009d10 <HAL_UART_Transmit_IT+0xc8>
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d103      	bne.n	8009d10 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4a0f      	ldr	r2, [pc, #60]	; (8009d48 <HAL_UART_Transmit_IT+0x100>)
 8009d0c:	671a      	str	r2, [r3, #112]	; 0x70
 8009d0e:	e002      	b.n	8009d16 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4a0e      	ldr	r2, [pc, #56]	; (8009d4c <HAL_UART_Transmit_IT+0x104>)
 8009d14:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d2c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	e000      	b.n	8009d34 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8009d32:	2302      	movs	r3, #2
  }
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3714      	adds	r7, #20
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr
 8009d40:	0800c9e9 	.word	0x0800c9e9
 8009d44:	0800c94f 	.word	0x0800c94f
 8009d48:	0800c8d1 	.word	0x0800c8d1
 8009d4c:	0800c85d 	.word	0x0800c85d

08009d50 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d64:	2b20      	cmp	r3, #32
 8009d66:	f040 80bc 	bne.w	8009ee2 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d002      	beq.n	8009d76 <HAL_UART_Receive_IT+0x26>
 8009d70:	88fb      	ldrh	r3, [r7, #6]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d101      	bne.n	8009d7a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e0b4      	b.n	8009ee4 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d101      	bne.n	8009d88 <HAL_UART_Receive_IT+0x38>
 8009d84:	2302      	movs	r3, #2
 8009d86:	e0ad      	b.n	8009ee4 <HAL_UART_Receive_IT+0x194>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	88fa      	ldrh	r2, [r7, #6]
 8009d9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	88fa      	ldrh	r2, [r7, #6]
 8009da2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009db4:	d10e      	bne.n	8009dd4 <HAL_UART_Receive_IT+0x84>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d105      	bne.n	8009dca <HAL_UART_Receive_IT+0x7a>
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009dc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009dc8:	e02d      	b.n	8009e26 <HAL_UART_Receive_IT+0xd6>
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	22ff      	movs	r2, #255	; 0xff
 8009dce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009dd2:	e028      	b.n	8009e26 <HAL_UART_Receive_IT+0xd6>
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10d      	bne.n	8009df8 <HAL_UART_Receive_IT+0xa8>
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d104      	bne.n	8009dee <HAL_UART_Receive_IT+0x9e>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	22ff      	movs	r2, #255	; 0xff
 8009de8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009dec:	e01b      	b.n	8009e26 <HAL_UART_Receive_IT+0xd6>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	227f      	movs	r2, #127	; 0x7f
 8009df2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009df6:	e016      	b.n	8009e26 <HAL_UART_Receive_IT+0xd6>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e00:	d10d      	bne.n	8009e1e <HAL_UART_Receive_IT+0xce>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d104      	bne.n	8009e14 <HAL_UART_Receive_IT+0xc4>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	227f      	movs	r2, #127	; 0x7f
 8009e0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e12:	e008      	b.n	8009e26 <HAL_UART_Receive_IT+0xd6>
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	223f      	movs	r2, #63	; 0x3f
 8009e18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009e1c:	e003      	b.n	8009e26 <HAL_UART_Receive_IT+0xd6>
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2222      	movs	r2, #34	; 0x22
 8009e32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	689a      	ldr	r2, [r3, #8]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f042 0201 	orr.w	r2, r2, #1
 8009e44:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e4e:	d12a      	bne.n	8009ea6 <HAL_UART_Receive_IT+0x156>
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009e56:	88fa      	ldrh	r2, [r7, #6]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d324      	bcc.n	8009ea6 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e64:	d107      	bne.n	8009e76 <HAL_UART_Receive_IT+0x126>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d103      	bne.n	8009e76 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	4a1f      	ldr	r2, [pc, #124]	; (8009ef0 <HAL_UART_Receive_IT+0x1a0>)
 8009e72:	66da      	str	r2, [r3, #108]	; 0x6c
 8009e74:	e002      	b.n	8009e7c <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	4a1e      	ldr	r2, [pc, #120]	; (8009ef4 <HAL_UART_Receive_IT+0x1a4>)
 8009e7a:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e92:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	689a      	ldr	r2, [r3, #8]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009ea2:	609a      	str	r2, [r3, #8]
 8009ea4:	e01b      	b.n	8009ede <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eae:	d107      	bne.n	8009ec0 <HAL_UART_Receive_IT+0x170>
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d103      	bne.n	8009ec0 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	4a0f      	ldr	r2, [pc, #60]	; (8009ef8 <HAL_UART_Receive_IT+0x1a8>)
 8009ebc:	66da      	str	r2, [r3, #108]	; 0x6c
 8009ebe:	e002      	b.n	8009ec6 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	4a0e      	ldr	r2, [pc, #56]	; (8009efc <HAL_UART_Receive_IT+0x1ac>)
 8009ec4:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009edc:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	e000      	b.n	8009ee4 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8009ee2:	2302      	movs	r3, #2
  }
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3714      	adds	r7, #20
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr
 8009ef0:	0800cd1d 	.word	0x0800cd1d
 8009ef4:	0800cc15 	.word	0x0800cc15
 8009ef8:	0800cb6b 	.word	0x0800cb6b
 8009efc:	0800cac1 	.word	0x0800cac1

08009f00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b088      	sub	sp, #32
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	69db      	ldr	r3, [r3, #28]
 8009f0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009f20:	69fa      	ldr	r2, [r7, #28]
 8009f22:	f640 030f 	movw	r3, #2063	; 0x80f
 8009f26:	4013      	ands	r3, r2
 8009f28:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d118      	bne.n	8009f62 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	f003 0320 	and.w	r3, r3, #32
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d013      	beq.n	8009f62 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	f003 0320 	and.w	r3, r3, #32
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d104      	bne.n	8009f4e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d009      	beq.n	8009f62 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f000 8145 	beq.w	800a1e2 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	4798      	blx	r3
      }
      return;
 8009f60:	e13f      	b.n	800a1e2 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f000 80e8 	beq.w	800a13a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009f6a:	697a      	ldr	r2, [r7, #20]
 8009f6c:	4ba1      	ldr	r3, [pc, #644]	; (800a1f4 <HAL_UART_IRQHandler+0x2f4>)
 8009f6e:	4013      	ands	r3, r2
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d105      	bne.n	8009f80 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009f74:	69ba      	ldr	r2, [r7, #24]
 8009f76:	4ba0      	ldr	r3, [pc, #640]	; (800a1f8 <HAL_UART_IRQHandler+0x2f8>)
 8009f78:	4013      	ands	r3, r2
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f000 80dd 	beq.w	800a13a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	f003 0301 	and.w	r3, r3, #1
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d010      	beq.n	8009fac <HAL_UART_IRQHandler+0xac>
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00b      	beq.n	8009fac <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fa2:	f043 0201 	orr.w	r2, r3, #1
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	f003 0302 	and.w	r3, r3, #2
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d010      	beq.n	8009fd8 <HAL_UART_IRQHandler+0xd8>
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	f003 0301 	and.w	r3, r3, #1
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00b      	beq.n	8009fd8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fce:	f043 0204 	orr.w	r2, r3, #4
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	f003 0304 	and.w	r3, r3, #4
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d010      	beq.n	800a004 <HAL_UART_IRQHandler+0x104>
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f003 0301 	and.w	r3, r3, #1
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00b      	beq.n	800a004 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2204      	movs	r2, #4
 8009ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ffa:	f043 0202 	orr.w	r2, r3, #2
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	f003 0308 	and.w	r3, r3, #8
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d015      	beq.n	800a03a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	f003 0320 	and.w	r3, r3, #32
 800a014:	2b00      	cmp	r3, #0
 800a016:	d104      	bne.n	800a022 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a018:	697a      	ldr	r2, [r7, #20]
 800a01a:	4b76      	ldr	r3, [pc, #472]	; (800a1f4 <HAL_UART_IRQHandler+0x2f4>)
 800a01c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d00b      	beq.n	800a03a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2208      	movs	r2, #8
 800a028:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a030:	f043 0208 	orr.w	r2, r3, #8
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a040:	2b00      	cmp	r3, #0
 800a042:	d011      	beq.n	800a068 <HAL_UART_IRQHandler+0x168>
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00c      	beq.n	800a068 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a05e:	f043 0220 	orr.w	r2, r3, #32
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f000 80b9 	beq.w	800a1e6 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	f003 0320 	and.w	r3, r3, #32
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d011      	beq.n	800a0a2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	f003 0320 	and.w	r3, r3, #32
 800a084:	2b00      	cmp	r3, #0
 800a086:	d104      	bne.n	800a092 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d007      	beq.n	800a0a2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b4:	2b40      	cmp	r3, #64	; 0x40
 800a0b6:	d004      	beq.n	800a0c2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d031      	beq.n	800a126 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f002 fb90 	bl	800c7e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d2:	2b40      	cmp	r3, #64	; 0x40
 800a0d4:	d123      	bne.n	800a11e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	689a      	ldr	r2, [r3, #8]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0e4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d013      	beq.n	800a116 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0f2:	4a42      	ldr	r2, [pc, #264]	; (800a1fc <HAL_UART_IRQHandler+0x2fc>)
 800a0f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fa fb84 	bl	8004808 <HAL_DMA_Abort_IT>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d017      	beq.n	800a136 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a10a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800a110:	4610      	mov	r0, r2
 800a112:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a114:	e00f      	b.n	800a136 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f872 	bl	800a200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a11c:	e00b      	b.n	800a136 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f86e 	bl	800a200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a124:	e007      	b.n	800a136 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f86a 	bl	800a200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800a134:	e057      	b.n	800a1e6 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a136:	bf00      	nop
    return;
 800a138:	e055      	b.n	800a1e6 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00d      	beq.n	800a160 <HAL_UART_IRQHandler+0x260>
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d008      	beq.n	800a160 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a156:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f002 fe63 	bl	800ce24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a15e:	e045      	b.n	800a1ec <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a166:	2b00      	cmp	r3, #0
 800a168:	d012      	beq.n	800a190 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a170:	2b00      	cmp	r3, #0
 800a172:	d104      	bne.n	800a17e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d008      	beq.n	800a190 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a182:	2b00      	cmp	r3, #0
 800a184:	d031      	beq.n	800a1ea <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	4798      	blx	r3
    }
    return;
 800a18e:	e02c      	b.n	800a1ea <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a196:	2b00      	cmp	r3, #0
 800a198:	d008      	beq.n	800a1ac <HAL_UART_IRQHandler+0x2ac>
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d003      	beq.n	800a1ac <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f002 fc71 	bl	800ca8c <UART_EndTransmit_IT>
    return;
 800a1aa:	e01f      	b.n	800a1ec <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d008      	beq.n	800a1c8 <HAL_UART_IRQHandler+0x2c8>
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d003      	beq.n	800a1c8 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f002 fe43 	bl	800ce4c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1c6:	e011      	b.n	800a1ec <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00c      	beq.n	800a1ec <HAL_UART_IRQHandler+0x2ec>
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	da09      	bge.n	800a1ec <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f002 fe2d 	bl	800ce38 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1de:	bf00      	nop
 800a1e0:	e004      	b.n	800a1ec <HAL_UART_IRQHandler+0x2ec>
      return;
 800a1e2:	bf00      	nop
 800a1e4:	e002      	b.n	800a1ec <HAL_UART_IRQHandler+0x2ec>
    return;
 800a1e6:	bf00      	nop
 800a1e8:	e000      	b.n	800a1ec <HAL_UART_IRQHandler+0x2ec>
    return;
 800a1ea:	bf00      	nop
  }
}
 800a1ec:	3720      	adds	r7, #32
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	10000001 	.word	0x10000001
 800a1f8:	04000120 	.word	0x04000120
 800a1fc:	0800c831 	.word	0x0800c831

0800a200 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a208:	bf00      	nop
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr
 800a214:	0000      	movs	r0, r0
	...

0800a218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a218:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a21c:	b090      	sub	sp, #64	; 0x40
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a222:	2300      	movs	r3, #0
 800a224:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800a22c:	2300      	movs	r3, #0
 800a22e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	689a      	ldr	r2, [r3, #8]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	431a      	orrs	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	431a      	orrs	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	69db      	ldr	r3, [r3, #28]
 800a244:	4313      	orrs	r3, r2
 800a246:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a24c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a24e:	4313      	orrs	r3, r2
 800a250:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	4bc1      	ldr	r3, [pc, #772]	; (800a560 <UART_SetConfig+0x348>)
 800a25a:	4013      	ands	r3, r2
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	6812      	ldr	r2, [r2, #0]
 800a260:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a262:	430b      	orrs	r3, r1
 800a264:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	68da      	ldr	r2, [r3, #12]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	430a      	orrs	r2, r1
 800a27a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4ab7      	ldr	r2, [pc, #732]	; (800a564 <UART_SetConfig+0x34c>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d004      	beq.n	800a296 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6a1b      	ldr	r3, [r3, #32]
 800a290:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a292:	4313      	orrs	r3, r2
 800a294:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	689a      	ldr	r2, [r3, #8]
 800a29c:	4bb2      	ldr	r3, [pc, #712]	; (800a568 <UART_SetConfig+0x350>)
 800a29e:	4013      	ands	r3, r2
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	6812      	ldr	r2, [r2, #0]
 800a2a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2a6:	430b      	orrs	r3, r1
 800a2a8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b0:	f023 010f 	bic.w	r1, r3, #15
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	430a      	orrs	r2, r1
 800a2be:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4aa9      	ldr	r2, [pc, #676]	; (800a56c <UART_SetConfig+0x354>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d177      	bne.n	800a3ba <UART_SetConfig+0x1a2>
 800a2ca:	4ba9      	ldr	r3, [pc, #676]	; (800a570 <UART_SetConfig+0x358>)
 800a2cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2d2:	2b28      	cmp	r3, #40	; 0x28
 800a2d4:	d86c      	bhi.n	800a3b0 <UART_SetConfig+0x198>
 800a2d6:	a201      	add	r2, pc, #4	; (adr r2, 800a2dc <UART_SetConfig+0xc4>)
 800a2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2dc:	0800a381 	.word	0x0800a381
 800a2e0:	0800a3b1 	.word	0x0800a3b1
 800a2e4:	0800a3b1 	.word	0x0800a3b1
 800a2e8:	0800a3b1 	.word	0x0800a3b1
 800a2ec:	0800a3b1 	.word	0x0800a3b1
 800a2f0:	0800a3b1 	.word	0x0800a3b1
 800a2f4:	0800a3b1 	.word	0x0800a3b1
 800a2f8:	0800a3b1 	.word	0x0800a3b1
 800a2fc:	0800a389 	.word	0x0800a389
 800a300:	0800a3b1 	.word	0x0800a3b1
 800a304:	0800a3b1 	.word	0x0800a3b1
 800a308:	0800a3b1 	.word	0x0800a3b1
 800a30c:	0800a3b1 	.word	0x0800a3b1
 800a310:	0800a3b1 	.word	0x0800a3b1
 800a314:	0800a3b1 	.word	0x0800a3b1
 800a318:	0800a3b1 	.word	0x0800a3b1
 800a31c:	0800a391 	.word	0x0800a391
 800a320:	0800a3b1 	.word	0x0800a3b1
 800a324:	0800a3b1 	.word	0x0800a3b1
 800a328:	0800a3b1 	.word	0x0800a3b1
 800a32c:	0800a3b1 	.word	0x0800a3b1
 800a330:	0800a3b1 	.word	0x0800a3b1
 800a334:	0800a3b1 	.word	0x0800a3b1
 800a338:	0800a3b1 	.word	0x0800a3b1
 800a33c:	0800a399 	.word	0x0800a399
 800a340:	0800a3b1 	.word	0x0800a3b1
 800a344:	0800a3b1 	.word	0x0800a3b1
 800a348:	0800a3b1 	.word	0x0800a3b1
 800a34c:	0800a3b1 	.word	0x0800a3b1
 800a350:	0800a3b1 	.word	0x0800a3b1
 800a354:	0800a3b1 	.word	0x0800a3b1
 800a358:	0800a3b1 	.word	0x0800a3b1
 800a35c:	0800a3a1 	.word	0x0800a3a1
 800a360:	0800a3b1 	.word	0x0800a3b1
 800a364:	0800a3b1 	.word	0x0800a3b1
 800a368:	0800a3b1 	.word	0x0800a3b1
 800a36c:	0800a3b1 	.word	0x0800a3b1
 800a370:	0800a3b1 	.word	0x0800a3b1
 800a374:	0800a3b1 	.word	0x0800a3b1
 800a378:	0800a3b1 	.word	0x0800a3b1
 800a37c:	0800a3a9 	.word	0x0800a3a9
 800a380:	2301      	movs	r3, #1
 800a382:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a386:	e233      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a388:	2304      	movs	r3, #4
 800a38a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a38e:	e22f      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a390:	2308      	movs	r3, #8
 800a392:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a396:	e22b      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a398:	2310      	movs	r3, #16
 800a39a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a39e:	e227      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a3a0:	2320      	movs	r3, #32
 800a3a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3a6:	e223      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a3a8:	2340      	movs	r3, #64	; 0x40
 800a3aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3ae:	e21f      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a3b0:	2380      	movs	r3, #128	; 0x80
 800a3b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3b6:	bf00      	nop
 800a3b8:	e21a      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a6d      	ldr	r2, [pc, #436]	; (800a574 <UART_SetConfig+0x35c>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d132      	bne.n	800a42a <UART_SetConfig+0x212>
 800a3c4:	4b6a      	ldr	r3, [pc, #424]	; (800a570 <UART_SetConfig+0x358>)
 800a3c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3c8:	f003 0307 	and.w	r3, r3, #7
 800a3cc:	2b05      	cmp	r3, #5
 800a3ce:	d827      	bhi.n	800a420 <UART_SetConfig+0x208>
 800a3d0:	a201      	add	r2, pc, #4	; (adr r2, 800a3d8 <UART_SetConfig+0x1c0>)
 800a3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d6:	bf00      	nop
 800a3d8:	0800a3f1 	.word	0x0800a3f1
 800a3dc:	0800a3f9 	.word	0x0800a3f9
 800a3e0:	0800a401 	.word	0x0800a401
 800a3e4:	0800a409 	.word	0x0800a409
 800a3e8:	0800a411 	.word	0x0800a411
 800a3ec:	0800a419 	.word	0x0800a419
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3f6:	e1fb      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a3f8:	2304      	movs	r3, #4
 800a3fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a3fe:	e1f7      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a400:	2308      	movs	r3, #8
 800a402:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a406:	e1f3      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a408:	2310      	movs	r3, #16
 800a40a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a40e:	e1ef      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a410:	2320      	movs	r3, #32
 800a412:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a416:	e1eb      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a418:	2340      	movs	r3, #64	; 0x40
 800a41a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a41e:	e1e7      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a420:	2380      	movs	r3, #128	; 0x80
 800a422:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a426:	bf00      	nop
 800a428:	e1e2      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a52      	ldr	r2, [pc, #328]	; (800a578 <UART_SetConfig+0x360>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d132      	bne.n	800a49a <UART_SetConfig+0x282>
 800a434:	4b4e      	ldr	r3, [pc, #312]	; (800a570 <UART_SetConfig+0x358>)
 800a436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a438:	f003 0307 	and.w	r3, r3, #7
 800a43c:	2b05      	cmp	r3, #5
 800a43e:	d827      	bhi.n	800a490 <UART_SetConfig+0x278>
 800a440:	a201      	add	r2, pc, #4	; (adr r2, 800a448 <UART_SetConfig+0x230>)
 800a442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a446:	bf00      	nop
 800a448:	0800a461 	.word	0x0800a461
 800a44c:	0800a469 	.word	0x0800a469
 800a450:	0800a471 	.word	0x0800a471
 800a454:	0800a479 	.word	0x0800a479
 800a458:	0800a481 	.word	0x0800a481
 800a45c:	0800a489 	.word	0x0800a489
 800a460:	2300      	movs	r3, #0
 800a462:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a466:	e1c3      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a468:	2304      	movs	r3, #4
 800a46a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a46e:	e1bf      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a470:	2308      	movs	r3, #8
 800a472:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a476:	e1bb      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a478:	2310      	movs	r3, #16
 800a47a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a47e:	e1b7      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a480:	2320      	movs	r3, #32
 800a482:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a486:	e1b3      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a488:	2340      	movs	r3, #64	; 0x40
 800a48a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a48e:	e1af      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a490:	2380      	movs	r3, #128	; 0x80
 800a492:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a496:	bf00      	nop
 800a498:	e1aa      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a37      	ldr	r2, [pc, #220]	; (800a57c <UART_SetConfig+0x364>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d132      	bne.n	800a50a <UART_SetConfig+0x2f2>
 800a4a4:	4b32      	ldr	r3, [pc, #200]	; (800a570 <UART_SetConfig+0x358>)
 800a4a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4a8:	f003 0307 	and.w	r3, r3, #7
 800a4ac:	2b05      	cmp	r3, #5
 800a4ae:	d827      	bhi.n	800a500 <UART_SetConfig+0x2e8>
 800a4b0:	a201      	add	r2, pc, #4	; (adr r2, 800a4b8 <UART_SetConfig+0x2a0>)
 800a4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b6:	bf00      	nop
 800a4b8:	0800a4d1 	.word	0x0800a4d1
 800a4bc:	0800a4d9 	.word	0x0800a4d9
 800a4c0:	0800a4e1 	.word	0x0800a4e1
 800a4c4:	0800a4e9 	.word	0x0800a4e9
 800a4c8:	0800a4f1 	.word	0x0800a4f1
 800a4cc:	0800a4f9 	.word	0x0800a4f9
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4d6:	e18b      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a4d8:	2304      	movs	r3, #4
 800a4da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4de:	e187      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a4e0:	2308      	movs	r3, #8
 800a4e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4e6:	e183      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a4e8:	2310      	movs	r3, #16
 800a4ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4ee:	e17f      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a4f0:	2320      	movs	r3, #32
 800a4f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4f6:	e17b      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a4f8:	2340      	movs	r3, #64	; 0x40
 800a4fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a4fe:	e177      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a500:	2380      	movs	r3, #128	; 0x80
 800a502:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a506:	bf00      	nop
 800a508:	e172      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a1c      	ldr	r2, [pc, #112]	; (800a580 <UART_SetConfig+0x368>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d144      	bne.n	800a59e <UART_SetConfig+0x386>
 800a514:	4b16      	ldr	r3, [pc, #88]	; (800a570 <UART_SetConfig+0x358>)
 800a516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a518:	f003 0307 	and.w	r3, r3, #7
 800a51c:	2b05      	cmp	r3, #5
 800a51e:	d839      	bhi.n	800a594 <UART_SetConfig+0x37c>
 800a520:	a201      	add	r2, pc, #4	; (adr r2, 800a528 <UART_SetConfig+0x310>)
 800a522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a526:	bf00      	nop
 800a528:	0800a541 	.word	0x0800a541
 800a52c:	0800a549 	.word	0x0800a549
 800a530:	0800a551 	.word	0x0800a551
 800a534:	0800a559 	.word	0x0800a559
 800a538:	0800a585 	.word	0x0800a585
 800a53c:	0800a58d 	.word	0x0800a58d
 800a540:	2300      	movs	r3, #0
 800a542:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a546:	e153      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a548:	2304      	movs	r3, #4
 800a54a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a54e:	e14f      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a550:	2308      	movs	r3, #8
 800a552:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a556:	e14b      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a558:	2310      	movs	r3, #16
 800a55a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a55e:	e147      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a560:	cfff69f3 	.word	0xcfff69f3
 800a564:	58000c00 	.word	0x58000c00
 800a568:	11fff4ff 	.word	0x11fff4ff
 800a56c:	40011000 	.word	0x40011000
 800a570:	58024400 	.word	0x58024400
 800a574:	40004400 	.word	0x40004400
 800a578:	40004800 	.word	0x40004800
 800a57c:	40004c00 	.word	0x40004c00
 800a580:	40005000 	.word	0x40005000
 800a584:	2320      	movs	r3, #32
 800a586:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a58a:	e131      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a58c:	2340      	movs	r3, #64	; 0x40
 800a58e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a592:	e12d      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a594:	2380      	movs	r3, #128	; 0x80
 800a596:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a59a:	bf00      	nop
 800a59c:	e128      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4ac3      	ldr	r2, [pc, #780]	; (800a8b0 <UART_SetConfig+0x698>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d178      	bne.n	800a69a <UART_SetConfig+0x482>
 800a5a8:	4bc2      	ldr	r3, [pc, #776]	; (800a8b4 <UART_SetConfig+0x69c>)
 800a5aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5b0:	2b28      	cmp	r3, #40	; 0x28
 800a5b2:	d86d      	bhi.n	800a690 <UART_SetConfig+0x478>
 800a5b4:	a201      	add	r2, pc, #4	; (adr r2, 800a5bc <UART_SetConfig+0x3a4>)
 800a5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ba:	bf00      	nop
 800a5bc:	0800a661 	.word	0x0800a661
 800a5c0:	0800a691 	.word	0x0800a691
 800a5c4:	0800a691 	.word	0x0800a691
 800a5c8:	0800a691 	.word	0x0800a691
 800a5cc:	0800a691 	.word	0x0800a691
 800a5d0:	0800a691 	.word	0x0800a691
 800a5d4:	0800a691 	.word	0x0800a691
 800a5d8:	0800a691 	.word	0x0800a691
 800a5dc:	0800a669 	.word	0x0800a669
 800a5e0:	0800a691 	.word	0x0800a691
 800a5e4:	0800a691 	.word	0x0800a691
 800a5e8:	0800a691 	.word	0x0800a691
 800a5ec:	0800a691 	.word	0x0800a691
 800a5f0:	0800a691 	.word	0x0800a691
 800a5f4:	0800a691 	.word	0x0800a691
 800a5f8:	0800a691 	.word	0x0800a691
 800a5fc:	0800a671 	.word	0x0800a671
 800a600:	0800a691 	.word	0x0800a691
 800a604:	0800a691 	.word	0x0800a691
 800a608:	0800a691 	.word	0x0800a691
 800a60c:	0800a691 	.word	0x0800a691
 800a610:	0800a691 	.word	0x0800a691
 800a614:	0800a691 	.word	0x0800a691
 800a618:	0800a691 	.word	0x0800a691
 800a61c:	0800a679 	.word	0x0800a679
 800a620:	0800a691 	.word	0x0800a691
 800a624:	0800a691 	.word	0x0800a691
 800a628:	0800a691 	.word	0x0800a691
 800a62c:	0800a691 	.word	0x0800a691
 800a630:	0800a691 	.word	0x0800a691
 800a634:	0800a691 	.word	0x0800a691
 800a638:	0800a691 	.word	0x0800a691
 800a63c:	0800a681 	.word	0x0800a681
 800a640:	0800a691 	.word	0x0800a691
 800a644:	0800a691 	.word	0x0800a691
 800a648:	0800a691 	.word	0x0800a691
 800a64c:	0800a691 	.word	0x0800a691
 800a650:	0800a691 	.word	0x0800a691
 800a654:	0800a691 	.word	0x0800a691
 800a658:	0800a691 	.word	0x0800a691
 800a65c:	0800a689 	.word	0x0800a689
 800a660:	2301      	movs	r3, #1
 800a662:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a666:	e0c3      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a668:	2304      	movs	r3, #4
 800a66a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a66e:	e0bf      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a670:	2308      	movs	r3, #8
 800a672:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a676:	e0bb      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a678:	2310      	movs	r3, #16
 800a67a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a67e:	e0b7      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a680:	2320      	movs	r3, #32
 800a682:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a686:	e0b3      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a688:	2340      	movs	r3, #64	; 0x40
 800a68a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a68e:	e0af      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a690:	2380      	movs	r3, #128	; 0x80
 800a692:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a696:	bf00      	nop
 800a698:	e0aa      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a86      	ldr	r2, [pc, #536]	; (800a8b8 <UART_SetConfig+0x6a0>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d132      	bne.n	800a70a <UART_SetConfig+0x4f2>
 800a6a4:	4b83      	ldr	r3, [pc, #524]	; (800a8b4 <UART_SetConfig+0x69c>)
 800a6a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6a8:	f003 0307 	and.w	r3, r3, #7
 800a6ac:	2b05      	cmp	r3, #5
 800a6ae:	d827      	bhi.n	800a700 <UART_SetConfig+0x4e8>
 800a6b0:	a201      	add	r2, pc, #4	; (adr r2, 800a6b8 <UART_SetConfig+0x4a0>)
 800a6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b6:	bf00      	nop
 800a6b8:	0800a6d1 	.word	0x0800a6d1
 800a6bc:	0800a6d9 	.word	0x0800a6d9
 800a6c0:	0800a6e1 	.word	0x0800a6e1
 800a6c4:	0800a6e9 	.word	0x0800a6e9
 800a6c8:	0800a6f1 	.word	0x0800a6f1
 800a6cc:	0800a6f9 	.word	0x0800a6f9
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a6d6:	e08b      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a6d8:	2304      	movs	r3, #4
 800a6da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a6de:	e087      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a6e0:	2308      	movs	r3, #8
 800a6e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a6e6:	e083      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a6e8:	2310      	movs	r3, #16
 800a6ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a6ee:	e07f      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a6f0:	2320      	movs	r3, #32
 800a6f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a6f6:	e07b      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a6f8:	2340      	movs	r3, #64	; 0x40
 800a6fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a6fe:	e077      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a700:	2380      	movs	r3, #128	; 0x80
 800a702:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a706:	bf00      	nop
 800a708:	e072      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a6b      	ldr	r2, [pc, #428]	; (800a8bc <UART_SetConfig+0x6a4>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d132      	bne.n	800a77a <UART_SetConfig+0x562>
 800a714:	4b67      	ldr	r3, [pc, #412]	; (800a8b4 <UART_SetConfig+0x69c>)
 800a716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a718:	f003 0307 	and.w	r3, r3, #7
 800a71c:	2b05      	cmp	r3, #5
 800a71e:	d827      	bhi.n	800a770 <UART_SetConfig+0x558>
 800a720:	a201      	add	r2, pc, #4	; (adr r2, 800a728 <UART_SetConfig+0x510>)
 800a722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a726:	bf00      	nop
 800a728:	0800a741 	.word	0x0800a741
 800a72c:	0800a749 	.word	0x0800a749
 800a730:	0800a751 	.word	0x0800a751
 800a734:	0800a759 	.word	0x0800a759
 800a738:	0800a761 	.word	0x0800a761
 800a73c:	0800a769 	.word	0x0800a769
 800a740:	2300      	movs	r3, #0
 800a742:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a746:	e053      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a748:	2304      	movs	r3, #4
 800a74a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a74e:	e04f      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a750:	2308      	movs	r3, #8
 800a752:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a756:	e04b      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a758:	2310      	movs	r3, #16
 800a75a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a75e:	e047      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a760:	2320      	movs	r3, #32
 800a762:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a766:	e043      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a768:	2340      	movs	r3, #64	; 0x40
 800a76a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a76e:	e03f      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a770:	2380      	movs	r3, #128	; 0x80
 800a772:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a776:	bf00      	nop
 800a778:	e03a      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a50      	ldr	r2, [pc, #320]	; (800a8c0 <UART_SetConfig+0x6a8>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d132      	bne.n	800a7ea <UART_SetConfig+0x5d2>
 800a784:	4b4b      	ldr	r3, [pc, #300]	; (800a8b4 <UART_SetConfig+0x69c>)
 800a786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a788:	f003 0307 	and.w	r3, r3, #7
 800a78c:	2b05      	cmp	r3, #5
 800a78e:	d827      	bhi.n	800a7e0 <UART_SetConfig+0x5c8>
 800a790:	a201      	add	r2, pc, #4	; (adr r2, 800a798 <UART_SetConfig+0x580>)
 800a792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a796:	bf00      	nop
 800a798:	0800a7b1 	.word	0x0800a7b1
 800a79c:	0800a7b9 	.word	0x0800a7b9
 800a7a0:	0800a7c1 	.word	0x0800a7c1
 800a7a4:	0800a7c9 	.word	0x0800a7c9
 800a7a8:	0800a7d1 	.word	0x0800a7d1
 800a7ac:	0800a7d9 	.word	0x0800a7d9
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a7b6:	e01b      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a7b8:	2304      	movs	r3, #4
 800a7ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a7be:	e017      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a7c0:	2308      	movs	r3, #8
 800a7c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a7c6:	e013      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a7c8:	2310      	movs	r3, #16
 800a7ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a7ce:	e00f      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a7d0:	2320      	movs	r3, #32
 800a7d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a7d6:	e00b      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a7d8:	2340      	movs	r3, #64	; 0x40
 800a7da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a7de:	e007      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a7e0:	2380      	movs	r3, #128	; 0x80
 800a7e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a7e6:	bf00      	nop
 800a7e8:	e002      	b.n	800a7f0 <UART_SetConfig+0x5d8>
 800a7ea:	2380      	movs	r3, #128	; 0x80
 800a7ec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a32      	ldr	r2, [pc, #200]	; (800a8c0 <UART_SetConfig+0x6a8>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	f040 86f7 	bne.w	800b5ea <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a7fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a800:	2b08      	cmp	r3, #8
 800a802:	f000 80c0 	beq.w	800a986 <UART_SetConfig+0x76e>
 800a806:	2b08      	cmp	r3, #8
 800a808:	dc04      	bgt.n	800a814 <UART_SetConfig+0x5fc>
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d00c      	beq.n	800a828 <UART_SetConfig+0x610>
 800a80e:	2b04      	cmp	r3, #4
 800a810:	d065      	beq.n	800a8de <UART_SetConfig+0x6c6>
 800a812:	e27a      	b.n	800ad0a <UART_SetConfig+0xaf2>
 800a814:	2b20      	cmp	r3, #32
 800a816:	f000 81b0 	beq.w	800ab7a <UART_SetConfig+0x962>
 800a81a:	2b40      	cmp	r3, #64	; 0x40
 800a81c:	f000 821e 	beq.w	800ac5c <UART_SetConfig+0xa44>
 800a820:	2b10      	cmp	r3, #16
 800a822:	f000 8104 	beq.w	800aa2e <UART_SetConfig+0x816>
 800a826:	e270      	b.n	800ad0a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a828:	f7fe f814 	bl	8008854 <HAL_RCCEx_GetD3PCLK1Freq>
 800a82c:	4602      	mov	r2, r0
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a832:	2b00      	cmp	r3, #0
 800a834:	d04e      	beq.n	800a8d4 <UART_SetConfig+0x6bc>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d048      	beq.n	800a8d0 <UART_SetConfig+0x6b8>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a842:	2b02      	cmp	r3, #2
 800a844:	d042      	beq.n	800a8cc <UART_SetConfig+0x6b4>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84a:	2b03      	cmp	r3, #3
 800a84c:	d03c      	beq.n	800a8c8 <UART_SetConfig+0x6b0>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a852:	2b04      	cmp	r3, #4
 800a854:	d036      	beq.n	800a8c4 <UART_SetConfig+0x6ac>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85a:	2b05      	cmp	r3, #5
 800a85c:	d026      	beq.n	800a8ac <UART_SetConfig+0x694>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a862:	2b06      	cmp	r3, #6
 800a864:	d020      	beq.n	800a8a8 <UART_SetConfig+0x690>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a86a:	2b07      	cmp	r3, #7
 800a86c:	d01a      	beq.n	800a8a4 <UART_SetConfig+0x68c>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a872:	2b08      	cmp	r3, #8
 800a874:	d014      	beq.n	800a8a0 <UART_SetConfig+0x688>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87a:	2b09      	cmp	r3, #9
 800a87c:	d00e      	beq.n	800a89c <UART_SetConfig+0x684>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a882:	2b0a      	cmp	r3, #10
 800a884:	d008      	beq.n	800a898 <UART_SetConfig+0x680>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88a:	2b0b      	cmp	r3, #11
 800a88c:	d102      	bne.n	800a894 <UART_SetConfig+0x67c>
 800a88e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a892:	e020      	b.n	800a8d6 <UART_SetConfig+0x6be>
 800a894:	2301      	movs	r3, #1
 800a896:	e01e      	b.n	800a8d6 <UART_SetConfig+0x6be>
 800a898:	2380      	movs	r3, #128	; 0x80
 800a89a:	e01c      	b.n	800a8d6 <UART_SetConfig+0x6be>
 800a89c:	2340      	movs	r3, #64	; 0x40
 800a89e:	e01a      	b.n	800a8d6 <UART_SetConfig+0x6be>
 800a8a0:	2320      	movs	r3, #32
 800a8a2:	e018      	b.n	800a8d6 <UART_SetConfig+0x6be>
 800a8a4:	2310      	movs	r3, #16
 800a8a6:	e016      	b.n	800a8d6 <UART_SetConfig+0x6be>
 800a8a8:	230c      	movs	r3, #12
 800a8aa:	e014      	b.n	800a8d6 <UART_SetConfig+0x6be>
 800a8ac:	230a      	movs	r3, #10
 800a8ae:	e012      	b.n	800a8d6 <UART_SetConfig+0x6be>
 800a8b0:	40011400 	.word	0x40011400
 800a8b4:	58024400 	.word	0x58024400
 800a8b8:	40007800 	.word	0x40007800
 800a8bc:	40007c00 	.word	0x40007c00
 800a8c0:	58000c00 	.word	0x58000c00
 800a8c4:	2308      	movs	r3, #8
 800a8c6:	e006      	b.n	800a8d6 <UART_SetConfig+0x6be>
 800a8c8:	2306      	movs	r3, #6
 800a8ca:	e004      	b.n	800a8d6 <UART_SetConfig+0x6be>
 800a8cc:	2304      	movs	r3, #4
 800a8ce:	e002      	b.n	800a8d6 <UART_SetConfig+0x6be>
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	e000      	b.n	800a8d6 <UART_SetConfig+0x6be>
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8dc:	e219      	b.n	800ad12 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8de:	f107 0318 	add.w	r3, r7, #24
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7fd ffcc 	bl	8008880 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a8e8:	69fa      	ldr	r2, [r7, #28]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d044      	beq.n	800a97c <UART_SetConfig+0x764>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d03e      	beq.n	800a978 <UART_SetConfig+0x760>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d038      	beq.n	800a974 <UART_SetConfig+0x75c>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a906:	2b03      	cmp	r3, #3
 800a908:	d032      	beq.n	800a970 <UART_SetConfig+0x758>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90e:	2b04      	cmp	r3, #4
 800a910:	d02c      	beq.n	800a96c <UART_SetConfig+0x754>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a916:	2b05      	cmp	r3, #5
 800a918:	d026      	beq.n	800a968 <UART_SetConfig+0x750>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91e:	2b06      	cmp	r3, #6
 800a920:	d020      	beq.n	800a964 <UART_SetConfig+0x74c>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a926:	2b07      	cmp	r3, #7
 800a928:	d01a      	beq.n	800a960 <UART_SetConfig+0x748>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92e:	2b08      	cmp	r3, #8
 800a930:	d014      	beq.n	800a95c <UART_SetConfig+0x744>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a936:	2b09      	cmp	r3, #9
 800a938:	d00e      	beq.n	800a958 <UART_SetConfig+0x740>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93e:	2b0a      	cmp	r3, #10
 800a940:	d008      	beq.n	800a954 <UART_SetConfig+0x73c>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a946:	2b0b      	cmp	r3, #11
 800a948:	d102      	bne.n	800a950 <UART_SetConfig+0x738>
 800a94a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a94e:	e016      	b.n	800a97e <UART_SetConfig+0x766>
 800a950:	2301      	movs	r3, #1
 800a952:	e014      	b.n	800a97e <UART_SetConfig+0x766>
 800a954:	2380      	movs	r3, #128	; 0x80
 800a956:	e012      	b.n	800a97e <UART_SetConfig+0x766>
 800a958:	2340      	movs	r3, #64	; 0x40
 800a95a:	e010      	b.n	800a97e <UART_SetConfig+0x766>
 800a95c:	2320      	movs	r3, #32
 800a95e:	e00e      	b.n	800a97e <UART_SetConfig+0x766>
 800a960:	2310      	movs	r3, #16
 800a962:	e00c      	b.n	800a97e <UART_SetConfig+0x766>
 800a964:	230c      	movs	r3, #12
 800a966:	e00a      	b.n	800a97e <UART_SetConfig+0x766>
 800a968:	230a      	movs	r3, #10
 800a96a:	e008      	b.n	800a97e <UART_SetConfig+0x766>
 800a96c:	2308      	movs	r3, #8
 800a96e:	e006      	b.n	800a97e <UART_SetConfig+0x766>
 800a970:	2306      	movs	r3, #6
 800a972:	e004      	b.n	800a97e <UART_SetConfig+0x766>
 800a974:	2304      	movs	r3, #4
 800a976:	e002      	b.n	800a97e <UART_SetConfig+0x766>
 800a978:	2302      	movs	r3, #2
 800a97a:	e000      	b.n	800a97e <UART_SetConfig+0x766>
 800a97c:	2301      	movs	r3, #1
 800a97e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a982:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a984:	e1c5      	b.n	800ad12 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a986:	f107 030c 	add.w	r3, r7, #12
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fe f8c4 	bl	8008b18 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a990:	693a      	ldr	r2, [r7, #16]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a996:	2b00      	cmp	r3, #0
 800a998:	d044      	beq.n	800aa24 <UART_SetConfig+0x80c>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d03e      	beq.n	800aa20 <UART_SetConfig+0x808>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d038      	beq.n	800aa1c <UART_SetConfig+0x804>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ae:	2b03      	cmp	r3, #3
 800a9b0:	d032      	beq.n	800aa18 <UART_SetConfig+0x800>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b6:	2b04      	cmp	r3, #4
 800a9b8:	d02c      	beq.n	800aa14 <UART_SetConfig+0x7fc>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9be:	2b05      	cmp	r3, #5
 800a9c0:	d026      	beq.n	800aa10 <UART_SetConfig+0x7f8>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c6:	2b06      	cmp	r3, #6
 800a9c8:	d020      	beq.n	800aa0c <UART_SetConfig+0x7f4>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ce:	2b07      	cmp	r3, #7
 800a9d0:	d01a      	beq.n	800aa08 <UART_SetConfig+0x7f0>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d6:	2b08      	cmp	r3, #8
 800a9d8:	d014      	beq.n	800aa04 <UART_SetConfig+0x7ec>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9de:	2b09      	cmp	r3, #9
 800a9e0:	d00e      	beq.n	800aa00 <UART_SetConfig+0x7e8>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e6:	2b0a      	cmp	r3, #10
 800a9e8:	d008      	beq.n	800a9fc <UART_SetConfig+0x7e4>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ee:	2b0b      	cmp	r3, #11
 800a9f0:	d102      	bne.n	800a9f8 <UART_SetConfig+0x7e0>
 800a9f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9f6:	e016      	b.n	800aa26 <UART_SetConfig+0x80e>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e014      	b.n	800aa26 <UART_SetConfig+0x80e>
 800a9fc:	2380      	movs	r3, #128	; 0x80
 800a9fe:	e012      	b.n	800aa26 <UART_SetConfig+0x80e>
 800aa00:	2340      	movs	r3, #64	; 0x40
 800aa02:	e010      	b.n	800aa26 <UART_SetConfig+0x80e>
 800aa04:	2320      	movs	r3, #32
 800aa06:	e00e      	b.n	800aa26 <UART_SetConfig+0x80e>
 800aa08:	2310      	movs	r3, #16
 800aa0a:	e00c      	b.n	800aa26 <UART_SetConfig+0x80e>
 800aa0c:	230c      	movs	r3, #12
 800aa0e:	e00a      	b.n	800aa26 <UART_SetConfig+0x80e>
 800aa10:	230a      	movs	r3, #10
 800aa12:	e008      	b.n	800aa26 <UART_SetConfig+0x80e>
 800aa14:	2308      	movs	r3, #8
 800aa16:	e006      	b.n	800aa26 <UART_SetConfig+0x80e>
 800aa18:	2306      	movs	r3, #6
 800aa1a:	e004      	b.n	800aa26 <UART_SetConfig+0x80e>
 800aa1c:	2304      	movs	r3, #4
 800aa1e:	e002      	b.n	800aa26 <UART_SetConfig+0x80e>
 800aa20:	2302      	movs	r3, #2
 800aa22:	e000      	b.n	800aa26 <UART_SetConfig+0x80e>
 800aa24:	2301      	movs	r3, #1
 800aa26:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa2c:	e171      	b.n	800ad12 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa2e:	4b7a      	ldr	r3, [pc, #488]	; (800ac18 <UART_SetConfig+0xa00>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f003 0320 	and.w	r3, r3, #32
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d054      	beq.n	800aae4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800aa3a:	4b77      	ldr	r3, [pc, #476]	; (800ac18 <UART_SetConfig+0xa00>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	08db      	lsrs	r3, r3, #3
 800aa40:	f003 0303 	and.w	r3, r3, #3
 800aa44:	4a75      	ldr	r2, [pc, #468]	; (800ac1c <UART_SetConfig+0xa04>)
 800aa46:	40da      	lsrs	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d044      	beq.n	800aada <UART_SetConfig+0x8c2>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d03e      	beq.n	800aad6 <UART_SetConfig+0x8be>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d038      	beq.n	800aad2 <UART_SetConfig+0x8ba>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa64:	2b03      	cmp	r3, #3
 800aa66:	d032      	beq.n	800aace <UART_SetConfig+0x8b6>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6c:	2b04      	cmp	r3, #4
 800aa6e:	d02c      	beq.n	800aaca <UART_SetConfig+0x8b2>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa74:	2b05      	cmp	r3, #5
 800aa76:	d026      	beq.n	800aac6 <UART_SetConfig+0x8ae>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7c:	2b06      	cmp	r3, #6
 800aa7e:	d020      	beq.n	800aac2 <UART_SetConfig+0x8aa>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa84:	2b07      	cmp	r3, #7
 800aa86:	d01a      	beq.n	800aabe <UART_SetConfig+0x8a6>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8c:	2b08      	cmp	r3, #8
 800aa8e:	d014      	beq.n	800aaba <UART_SetConfig+0x8a2>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa94:	2b09      	cmp	r3, #9
 800aa96:	d00e      	beq.n	800aab6 <UART_SetConfig+0x89e>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9c:	2b0a      	cmp	r3, #10
 800aa9e:	d008      	beq.n	800aab2 <UART_SetConfig+0x89a>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa4:	2b0b      	cmp	r3, #11
 800aaa6:	d102      	bne.n	800aaae <UART_SetConfig+0x896>
 800aaa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aaac:	e016      	b.n	800aadc <UART_SetConfig+0x8c4>
 800aaae:	2301      	movs	r3, #1
 800aab0:	e014      	b.n	800aadc <UART_SetConfig+0x8c4>
 800aab2:	2380      	movs	r3, #128	; 0x80
 800aab4:	e012      	b.n	800aadc <UART_SetConfig+0x8c4>
 800aab6:	2340      	movs	r3, #64	; 0x40
 800aab8:	e010      	b.n	800aadc <UART_SetConfig+0x8c4>
 800aaba:	2320      	movs	r3, #32
 800aabc:	e00e      	b.n	800aadc <UART_SetConfig+0x8c4>
 800aabe:	2310      	movs	r3, #16
 800aac0:	e00c      	b.n	800aadc <UART_SetConfig+0x8c4>
 800aac2:	230c      	movs	r3, #12
 800aac4:	e00a      	b.n	800aadc <UART_SetConfig+0x8c4>
 800aac6:	230a      	movs	r3, #10
 800aac8:	e008      	b.n	800aadc <UART_SetConfig+0x8c4>
 800aaca:	2308      	movs	r3, #8
 800aacc:	e006      	b.n	800aadc <UART_SetConfig+0x8c4>
 800aace:	2306      	movs	r3, #6
 800aad0:	e004      	b.n	800aadc <UART_SetConfig+0x8c4>
 800aad2:	2304      	movs	r3, #4
 800aad4:	e002      	b.n	800aadc <UART_SetConfig+0x8c4>
 800aad6:	2302      	movs	r3, #2
 800aad8:	e000      	b.n	800aadc <UART_SetConfig+0x8c4>
 800aada:	2301      	movs	r3, #1
 800aadc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aae0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800aae2:	e116      	b.n	800ad12 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d043      	beq.n	800ab74 <UART_SetConfig+0x95c>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d03d      	beq.n	800ab70 <UART_SetConfig+0x958>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	d037      	beq.n	800ab6c <UART_SetConfig+0x954>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	d031      	beq.n	800ab68 <UART_SetConfig+0x950>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab08:	2b04      	cmp	r3, #4
 800ab0a:	d02b      	beq.n	800ab64 <UART_SetConfig+0x94c>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab10:	2b05      	cmp	r3, #5
 800ab12:	d025      	beq.n	800ab60 <UART_SetConfig+0x948>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab18:	2b06      	cmp	r3, #6
 800ab1a:	d01f      	beq.n	800ab5c <UART_SetConfig+0x944>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab20:	2b07      	cmp	r3, #7
 800ab22:	d019      	beq.n	800ab58 <UART_SetConfig+0x940>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab28:	2b08      	cmp	r3, #8
 800ab2a:	d013      	beq.n	800ab54 <UART_SetConfig+0x93c>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab30:	2b09      	cmp	r3, #9
 800ab32:	d00d      	beq.n	800ab50 <UART_SetConfig+0x938>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab38:	2b0a      	cmp	r3, #10
 800ab3a:	d007      	beq.n	800ab4c <UART_SetConfig+0x934>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab40:	2b0b      	cmp	r3, #11
 800ab42:	d101      	bne.n	800ab48 <UART_SetConfig+0x930>
 800ab44:	4b36      	ldr	r3, [pc, #216]	; (800ac20 <UART_SetConfig+0xa08>)
 800ab46:	e016      	b.n	800ab76 <UART_SetConfig+0x95e>
 800ab48:	4b34      	ldr	r3, [pc, #208]	; (800ac1c <UART_SetConfig+0xa04>)
 800ab4a:	e014      	b.n	800ab76 <UART_SetConfig+0x95e>
 800ab4c:	4b35      	ldr	r3, [pc, #212]	; (800ac24 <UART_SetConfig+0xa0c>)
 800ab4e:	e012      	b.n	800ab76 <UART_SetConfig+0x95e>
 800ab50:	4b35      	ldr	r3, [pc, #212]	; (800ac28 <UART_SetConfig+0xa10>)
 800ab52:	e010      	b.n	800ab76 <UART_SetConfig+0x95e>
 800ab54:	4b35      	ldr	r3, [pc, #212]	; (800ac2c <UART_SetConfig+0xa14>)
 800ab56:	e00e      	b.n	800ab76 <UART_SetConfig+0x95e>
 800ab58:	4b35      	ldr	r3, [pc, #212]	; (800ac30 <UART_SetConfig+0xa18>)
 800ab5a:	e00c      	b.n	800ab76 <UART_SetConfig+0x95e>
 800ab5c:	4b35      	ldr	r3, [pc, #212]	; (800ac34 <UART_SetConfig+0xa1c>)
 800ab5e:	e00a      	b.n	800ab76 <UART_SetConfig+0x95e>
 800ab60:	4b35      	ldr	r3, [pc, #212]	; (800ac38 <UART_SetConfig+0xa20>)
 800ab62:	e008      	b.n	800ab76 <UART_SetConfig+0x95e>
 800ab64:	4b35      	ldr	r3, [pc, #212]	; (800ac3c <UART_SetConfig+0xa24>)
 800ab66:	e006      	b.n	800ab76 <UART_SetConfig+0x95e>
 800ab68:	4b35      	ldr	r3, [pc, #212]	; (800ac40 <UART_SetConfig+0xa28>)
 800ab6a:	e004      	b.n	800ab76 <UART_SetConfig+0x95e>
 800ab6c:	4b35      	ldr	r3, [pc, #212]	; (800ac44 <UART_SetConfig+0xa2c>)
 800ab6e:	e002      	b.n	800ab76 <UART_SetConfig+0x95e>
 800ab70:	4b35      	ldr	r3, [pc, #212]	; (800ac48 <UART_SetConfig+0xa30>)
 800ab72:	e000      	b.n	800ab76 <UART_SetConfig+0x95e>
 800ab74:	4b29      	ldr	r3, [pc, #164]	; (800ac1c <UART_SetConfig+0xa04>)
 800ab76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab78:	e0cb      	b.n	800ad12 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d046      	beq.n	800ac10 <UART_SetConfig+0x9f8>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d040      	beq.n	800ac0c <UART_SetConfig+0x9f4>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d03a      	beq.n	800ac08 <UART_SetConfig+0x9f0>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab96:	2b03      	cmp	r3, #3
 800ab98:	d034      	beq.n	800ac04 <UART_SetConfig+0x9ec>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9e:	2b04      	cmp	r3, #4
 800aba0:	d02e      	beq.n	800ac00 <UART_SetConfig+0x9e8>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba6:	2b05      	cmp	r3, #5
 800aba8:	d028      	beq.n	800abfc <UART_SetConfig+0x9e4>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abae:	2b06      	cmp	r3, #6
 800abb0:	d022      	beq.n	800abf8 <UART_SetConfig+0x9e0>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb6:	2b07      	cmp	r3, #7
 800abb8:	d01c      	beq.n	800abf4 <UART_SetConfig+0x9dc>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbe:	2b08      	cmp	r3, #8
 800abc0:	d016      	beq.n	800abf0 <UART_SetConfig+0x9d8>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc6:	2b09      	cmp	r3, #9
 800abc8:	d00f      	beq.n	800abea <UART_SetConfig+0x9d2>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abce:	2b0a      	cmp	r3, #10
 800abd0:	d008      	beq.n	800abe4 <UART_SetConfig+0x9cc>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd6:	2b0b      	cmp	r3, #11
 800abd8:	d102      	bne.n	800abe0 <UART_SetConfig+0x9c8>
 800abda:	f643 5309 	movw	r3, #15625	; 0x3d09
 800abde:	e018      	b.n	800ac12 <UART_SetConfig+0x9fa>
 800abe0:	4b13      	ldr	r3, [pc, #76]	; (800ac30 <UART_SetConfig+0xa18>)
 800abe2:	e016      	b.n	800ac12 <UART_SetConfig+0x9fa>
 800abe4:	f647 2312 	movw	r3, #31250	; 0x7a12
 800abe8:	e013      	b.n	800ac12 <UART_SetConfig+0x9fa>
 800abea:	f24f 4324 	movw	r3, #62500	; 0xf424
 800abee:	e010      	b.n	800ac12 <UART_SetConfig+0x9fa>
 800abf0:	4b16      	ldr	r3, [pc, #88]	; (800ac4c <UART_SetConfig+0xa34>)
 800abf2:	e00e      	b.n	800ac12 <UART_SetConfig+0x9fa>
 800abf4:	4b0a      	ldr	r3, [pc, #40]	; (800ac20 <UART_SetConfig+0xa08>)
 800abf6:	e00c      	b.n	800ac12 <UART_SetConfig+0x9fa>
 800abf8:	4b15      	ldr	r3, [pc, #84]	; (800ac50 <UART_SetConfig+0xa38>)
 800abfa:	e00a      	b.n	800ac12 <UART_SetConfig+0x9fa>
 800abfc:	4b15      	ldr	r3, [pc, #84]	; (800ac54 <UART_SetConfig+0xa3c>)
 800abfe:	e008      	b.n	800ac12 <UART_SetConfig+0x9fa>
 800ac00:	4b08      	ldr	r3, [pc, #32]	; (800ac24 <UART_SetConfig+0xa0c>)
 800ac02:	e006      	b.n	800ac12 <UART_SetConfig+0x9fa>
 800ac04:	4b14      	ldr	r3, [pc, #80]	; (800ac58 <UART_SetConfig+0xa40>)
 800ac06:	e004      	b.n	800ac12 <UART_SetConfig+0x9fa>
 800ac08:	4b07      	ldr	r3, [pc, #28]	; (800ac28 <UART_SetConfig+0xa10>)
 800ac0a:	e002      	b.n	800ac12 <UART_SetConfig+0x9fa>
 800ac0c:	4b07      	ldr	r3, [pc, #28]	; (800ac2c <UART_SetConfig+0xa14>)
 800ac0e:	e000      	b.n	800ac12 <UART_SetConfig+0x9fa>
 800ac10:	4b07      	ldr	r3, [pc, #28]	; (800ac30 <UART_SetConfig+0xa18>)
 800ac12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac14:	e07d      	b.n	800ad12 <UART_SetConfig+0xafa>
 800ac16:	bf00      	nop
 800ac18:	58024400 	.word	0x58024400
 800ac1c:	03d09000 	.word	0x03d09000
 800ac20:	0003d090 	.word	0x0003d090
 800ac24:	0007a120 	.word	0x0007a120
 800ac28:	000f4240 	.word	0x000f4240
 800ac2c:	001e8480 	.word	0x001e8480
 800ac30:	003d0900 	.word	0x003d0900
 800ac34:	00516155 	.word	0x00516155
 800ac38:	0061a800 	.word	0x0061a800
 800ac3c:	007a1200 	.word	0x007a1200
 800ac40:	00a2c2aa 	.word	0x00a2c2aa
 800ac44:	00f42400 	.word	0x00f42400
 800ac48:	01e84800 	.word	0x01e84800
 800ac4c:	0001e848 	.word	0x0001e848
 800ac50:	00051615 	.word	0x00051615
 800ac54:	00061a80 	.word	0x00061a80
 800ac58:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d04e      	beq.n	800ad02 <UART_SetConfig+0xaea>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d047      	beq.n	800acfc <UART_SetConfig+0xae4>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac70:	2b02      	cmp	r3, #2
 800ac72:	d040      	beq.n	800acf6 <UART_SetConfig+0xade>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac78:	2b03      	cmp	r3, #3
 800ac7a:	d039      	beq.n	800acf0 <UART_SetConfig+0xad8>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac80:	2b04      	cmp	r3, #4
 800ac82:	d032      	beq.n	800acea <UART_SetConfig+0xad2>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac88:	2b05      	cmp	r3, #5
 800ac8a:	d02b      	beq.n	800ace4 <UART_SetConfig+0xacc>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac90:	2b06      	cmp	r3, #6
 800ac92:	d024      	beq.n	800acde <UART_SetConfig+0xac6>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac98:	2b07      	cmp	r3, #7
 800ac9a:	d01d      	beq.n	800acd8 <UART_SetConfig+0xac0>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca0:	2b08      	cmp	r3, #8
 800aca2:	d016      	beq.n	800acd2 <UART_SetConfig+0xaba>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca8:	2b09      	cmp	r3, #9
 800acaa:	d00f      	beq.n	800accc <UART_SetConfig+0xab4>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb0:	2b0a      	cmp	r3, #10
 800acb2:	d008      	beq.n	800acc6 <UART_SetConfig+0xaae>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb8:	2b0b      	cmp	r3, #11
 800acba:	d101      	bne.n	800acc0 <UART_SetConfig+0xaa8>
 800acbc:	2380      	movs	r3, #128	; 0x80
 800acbe:	e022      	b.n	800ad06 <UART_SetConfig+0xaee>
 800acc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acc4:	e01f      	b.n	800ad06 <UART_SetConfig+0xaee>
 800acc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acca:	e01c      	b.n	800ad06 <UART_SetConfig+0xaee>
 800accc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acd0:	e019      	b.n	800ad06 <UART_SetConfig+0xaee>
 800acd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acd6:	e016      	b.n	800ad06 <UART_SetConfig+0xaee>
 800acd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800acdc:	e013      	b.n	800ad06 <UART_SetConfig+0xaee>
 800acde:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800ace2:	e010      	b.n	800ad06 <UART_SetConfig+0xaee>
 800ace4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800ace8:	e00d      	b.n	800ad06 <UART_SetConfig+0xaee>
 800acea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acee:	e00a      	b.n	800ad06 <UART_SetConfig+0xaee>
 800acf0:	f241 5355 	movw	r3, #5461	; 0x1555
 800acf4:	e007      	b.n	800ad06 <UART_SetConfig+0xaee>
 800acf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800acfa:	e004      	b.n	800ad06 <UART_SetConfig+0xaee>
 800acfc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ad00:	e001      	b.n	800ad06 <UART_SetConfig+0xaee>
 800ad02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad08:	e003      	b.n	800ad12 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800ad10:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800ad12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f001 83e8 	beq.w	800c4ea <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	685a      	ldr	r2, [r3, #4]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	005b      	lsls	r3, r3, #1
 800ad22:	4413      	add	r3, r2
 800ad24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d305      	bcc.n	800ad36 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d904      	bls.n	800ad40 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad3c:	f001 bbd5 	b.w	800c4ea <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800ad40:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ad44:	2b08      	cmp	r3, #8
 800ad46:	f000 8154 	beq.w	800aff2 <UART_SetConfig+0xdda>
 800ad4a:	2b08      	cmp	r3, #8
 800ad4c:	dc06      	bgt.n	800ad5c <UART_SetConfig+0xb44>
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d00f      	beq.n	800ad72 <UART_SetConfig+0xb5a>
 800ad52:	2b04      	cmp	r3, #4
 800ad54:	f000 80ac 	beq.w	800aeb0 <UART_SetConfig+0xc98>
 800ad58:	f000 bc30 	b.w	800b5bc <UART_SetConfig+0x13a4>
 800ad5c:	2b20      	cmp	r3, #32
 800ad5e:	f000 832d 	beq.w	800b3bc <UART_SetConfig+0x11a4>
 800ad62:	2b40      	cmp	r3, #64	; 0x40
 800ad64:	f000 83a5 	beq.w	800b4b2 <UART_SetConfig+0x129a>
 800ad68:	2b10      	cmp	r3, #16
 800ad6a:	f000 81e3 	beq.w	800b134 <UART_SetConfig+0xf1c>
 800ad6e:	f000 bc25 	b.w	800b5bc <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ad72:	f7fd fd6f 	bl	8008854 <HAL_RCCEx_GetD3PCLK1Freq>
 800ad76:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f04f 0100 	mov.w	r1, #0
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d067      	beq.n	800ae58 <UART_SetConfig+0xc40>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d05e      	beq.n	800ae4e <UART_SetConfig+0xc36>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	d055      	beq.n	800ae44 <UART_SetConfig+0xc2c>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9c:	2b03      	cmp	r3, #3
 800ad9e:	d04c      	beq.n	800ae3a <UART_SetConfig+0xc22>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada4:	2b04      	cmp	r3, #4
 800ada6:	d043      	beq.n	800ae30 <UART_SetConfig+0xc18>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adac:	2b05      	cmp	r3, #5
 800adae:	d03a      	beq.n	800ae26 <UART_SetConfig+0xc0e>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb4:	2b06      	cmp	r3, #6
 800adb6:	d031      	beq.n	800ae1c <UART_SetConfig+0xc04>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbc:	2b07      	cmp	r3, #7
 800adbe:	d028      	beq.n	800ae12 <UART_SetConfig+0xbfa>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc4:	2b08      	cmp	r3, #8
 800adc6:	d01f      	beq.n	800ae08 <UART_SetConfig+0xbf0>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adcc:	2b09      	cmp	r3, #9
 800adce:	d016      	beq.n	800adfe <UART_SetConfig+0xbe6>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add4:	2b0a      	cmp	r3, #10
 800add6:	d00d      	beq.n	800adf4 <UART_SetConfig+0xbdc>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800addc:	2b0b      	cmp	r3, #11
 800adde:	d104      	bne.n	800adea <UART_SetConfig+0xbd2>
 800ade0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ade4:	f04f 0400 	mov.w	r4, #0
 800ade8:	e03a      	b.n	800ae60 <UART_SetConfig+0xc48>
 800adea:	f04f 0301 	mov.w	r3, #1
 800adee:	f04f 0400 	mov.w	r4, #0
 800adf2:	e035      	b.n	800ae60 <UART_SetConfig+0xc48>
 800adf4:	f04f 0380 	mov.w	r3, #128	; 0x80
 800adf8:	f04f 0400 	mov.w	r4, #0
 800adfc:	e030      	b.n	800ae60 <UART_SetConfig+0xc48>
 800adfe:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ae02:	f04f 0400 	mov.w	r4, #0
 800ae06:	e02b      	b.n	800ae60 <UART_SetConfig+0xc48>
 800ae08:	f04f 0320 	mov.w	r3, #32
 800ae0c:	f04f 0400 	mov.w	r4, #0
 800ae10:	e026      	b.n	800ae60 <UART_SetConfig+0xc48>
 800ae12:	f04f 0310 	mov.w	r3, #16
 800ae16:	f04f 0400 	mov.w	r4, #0
 800ae1a:	e021      	b.n	800ae60 <UART_SetConfig+0xc48>
 800ae1c:	f04f 030c 	mov.w	r3, #12
 800ae20:	f04f 0400 	mov.w	r4, #0
 800ae24:	e01c      	b.n	800ae60 <UART_SetConfig+0xc48>
 800ae26:	f04f 030a 	mov.w	r3, #10
 800ae2a:	f04f 0400 	mov.w	r4, #0
 800ae2e:	e017      	b.n	800ae60 <UART_SetConfig+0xc48>
 800ae30:	f04f 0308 	mov.w	r3, #8
 800ae34:	f04f 0400 	mov.w	r4, #0
 800ae38:	e012      	b.n	800ae60 <UART_SetConfig+0xc48>
 800ae3a:	f04f 0306 	mov.w	r3, #6
 800ae3e:	f04f 0400 	mov.w	r4, #0
 800ae42:	e00d      	b.n	800ae60 <UART_SetConfig+0xc48>
 800ae44:	f04f 0304 	mov.w	r3, #4
 800ae48:	f04f 0400 	mov.w	r4, #0
 800ae4c:	e008      	b.n	800ae60 <UART_SetConfig+0xc48>
 800ae4e:	f04f 0302 	mov.w	r3, #2
 800ae52:	f04f 0400 	mov.w	r4, #0
 800ae56:	e003      	b.n	800ae60 <UART_SetConfig+0xc48>
 800ae58:	f04f 0301 	mov.w	r3, #1
 800ae5c:	f04f 0400 	mov.w	r4, #0
 800ae60:	461a      	mov	r2, r3
 800ae62:	4623      	mov	r3, r4
 800ae64:	f7f5 fa38 	bl	80002d8 <__aeabi_uldivmod>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	460c      	mov	r4, r1
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	4622      	mov	r2, r4
 800ae70:	f04f 0300 	mov.w	r3, #0
 800ae74:	f04f 0400 	mov.w	r4, #0
 800ae78:	0214      	lsls	r4, r2, #8
 800ae7a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ae7e:	020b      	lsls	r3, r1, #8
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	6852      	ldr	r2, [r2, #4]
 800ae84:	0852      	lsrs	r2, r2, #1
 800ae86:	4611      	mov	r1, r2
 800ae88:	f04f 0200 	mov.w	r2, #0
 800ae8c:	eb13 0b01 	adds.w	fp, r3, r1
 800ae90:	eb44 0c02 	adc.w	ip, r4, r2
 800ae94:	4658      	mov	r0, fp
 800ae96:	4661      	mov	r1, ip
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	f04f 0400 	mov.w	r4, #0
 800aea0:	461a      	mov	r2, r3
 800aea2:	4623      	mov	r3, r4
 800aea4:	f7f5 fa18 	bl	80002d8 <__aeabi_uldivmod>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aeae:	e389      	b.n	800b5c4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeb0:	f107 0318 	add.w	r3, r7, #24
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fd fce3 	bl	8008880 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	4618      	mov	r0, r3
 800aebe:	f04f 0100 	mov.w	r1, #0
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d067      	beq.n	800af9a <UART_SetConfig+0xd82>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d05e      	beq.n	800af90 <UART_SetConfig+0xd78>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d055      	beq.n	800af86 <UART_SetConfig+0xd6e>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aede:	2b03      	cmp	r3, #3
 800aee0:	d04c      	beq.n	800af7c <UART_SetConfig+0xd64>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee6:	2b04      	cmp	r3, #4
 800aee8:	d043      	beq.n	800af72 <UART_SetConfig+0xd5a>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeee:	2b05      	cmp	r3, #5
 800aef0:	d03a      	beq.n	800af68 <UART_SetConfig+0xd50>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef6:	2b06      	cmp	r3, #6
 800aef8:	d031      	beq.n	800af5e <UART_SetConfig+0xd46>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefe:	2b07      	cmp	r3, #7
 800af00:	d028      	beq.n	800af54 <UART_SetConfig+0xd3c>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af06:	2b08      	cmp	r3, #8
 800af08:	d01f      	beq.n	800af4a <UART_SetConfig+0xd32>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0e:	2b09      	cmp	r3, #9
 800af10:	d016      	beq.n	800af40 <UART_SetConfig+0xd28>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af16:	2b0a      	cmp	r3, #10
 800af18:	d00d      	beq.n	800af36 <UART_SetConfig+0xd1e>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1e:	2b0b      	cmp	r3, #11
 800af20:	d104      	bne.n	800af2c <UART_SetConfig+0xd14>
 800af22:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af26:	f04f 0400 	mov.w	r4, #0
 800af2a:	e03a      	b.n	800afa2 <UART_SetConfig+0xd8a>
 800af2c:	f04f 0301 	mov.w	r3, #1
 800af30:	f04f 0400 	mov.w	r4, #0
 800af34:	e035      	b.n	800afa2 <UART_SetConfig+0xd8a>
 800af36:	f04f 0380 	mov.w	r3, #128	; 0x80
 800af3a:	f04f 0400 	mov.w	r4, #0
 800af3e:	e030      	b.n	800afa2 <UART_SetConfig+0xd8a>
 800af40:	f04f 0340 	mov.w	r3, #64	; 0x40
 800af44:	f04f 0400 	mov.w	r4, #0
 800af48:	e02b      	b.n	800afa2 <UART_SetConfig+0xd8a>
 800af4a:	f04f 0320 	mov.w	r3, #32
 800af4e:	f04f 0400 	mov.w	r4, #0
 800af52:	e026      	b.n	800afa2 <UART_SetConfig+0xd8a>
 800af54:	f04f 0310 	mov.w	r3, #16
 800af58:	f04f 0400 	mov.w	r4, #0
 800af5c:	e021      	b.n	800afa2 <UART_SetConfig+0xd8a>
 800af5e:	f04f 030c 	mov.w	r3, #12
 800af62:	f04f 0400 	mov.w	r4, #0
 800af66:	e01c      	b.n	800afa2 <UART_SetConfig+0xd8a>
 800af68:	f04f 030a 	mov.w	r3, #10
 800af6c:	f04f 0400 	mov.w	r4, #0
 800af70:	e017      	b.n	800afa2 <UART_SetConfig+0xd8a>
 800af72:	f04f 0308 	mov.w	r3, #8
 800af76:	f04f 0400 	mov.w	r4, #0
 800af7a:	e012      	b.n	800afa2 <UART_SetConfig+0xd8a>
 800af7c:	f04f 0306 	mov.w	r3, #6
 800af80:	f04f 0400 	mov.w	r4, #0
 800af84:	e00d      	b.n	800afa2 <UART_SetConfig+0xd8a>
 800af86:	f04f 0304 	mov.w	r3, #4
 800af8a:	f04f 0400 	mov.w	r4, #0
 800af8e:	e008      	b.n	800afa2 <UART_SetConfig+0xd8a>
 800af90:	f04f 0302 	mov.w	r3, #2
 800af94:	f04f 0400 	mov.w	r4, #0
 800af98:	e003      	b.n	800afa2 <UART_SetConfig+0xd8a>
 800af9a:	f04f 0301 	mov.w	r3, #1
 800af9e:	f04f 0400 	mov.w	r4, #0
 800afa2:	461a      	mov	r2, r3
 800afa4:	4623      	mov	r3, r4
 800afa6:	f7f5 f997 	bl	80002d8 <__aeabi_uldivmod>
 800afaa:	4603      	mov	r3, r0
 800afac:	460c      	mov	r4, r1
 800afae:	4619      	mov	r1, r3
 800afb0:	4622      	mov	r2, r4
 800afb2:	f04f 0300 	mov.w	r3, #0
 800afb6:	f04f 0400 	mov.w	r4, #0
 800afba:	0214      	lsls	r4, r2, #8
 800afbc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800afc0:	020b      	lsls	r3, r1, #8
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	6852      	ldr	r2, [r2, #4]
 800afc6:	0852      	lsrs	r2, r2, #1
 800afc8:	4611      	mov	r1, r2
 800afca:	f04f 0200 	mov.w	r2, #0
 800afce:	eb13 0b01 	adds.w	fp, r3, r1
 800afd2:	eb44 0c02 	adc.w	ip, r4, r2
 800afd6:	4658      	mov	r0, fp
 800afd8:	4661      	mov	r1, ip
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	f04f 0400 	mov.w	r4, #0
 800afe2:	461a      	mov	r2, r3
 800afe4:	4623      	mov	r3, r4
 800afe6:	f7f5 f977 	bl	80002d8 <__aeabi_uldivmod>
 800afea:	4603      	mov	r3, r0
 800afec:	460c      	mov	r4, r1
 800afee:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aff0:	e2e8      	b.n	800b5c4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aff2:	f107 030c 	add.w	r3, r7, #12
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fd fd8e 	bl	8008b18 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	4618      	mov	r0, r3
 800b000:	f04f 0100 	mov.w	r1, #0
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d067      	beq.n	800b0dc <UART_SetConfig+0xec4>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b010:	2b01      	cmp	r3, #1
 800b012:	d05e      	beq.n	800b0d2 <UART_SetConfig+0xeba>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d055      	beq.n	800b0c8 <UART_SetConfig+0xeb0>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b020:	2b03      	cmp	r3, #3
 800b022:	d04c      	beq.n	800b0be <UART_SetConfig+0xea6>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b028:	2b04      	cmp	r3, #4
 800b02a:	d043      	beq.n	800b0b4 <UART_SetConfig+0xe9c>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b030:	2b05      	cmp	r3, #5
 800b032:	d03a      	beq.n	800b0aa <UART_SetConfig+0xe92>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b038:	2b06      	cmp	r3, #6
 800b03a:	d031      	beq.n	800b0a0 <UART_SetConfig+0xe88>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b040:	2b07      	cmp	r3, #7
 800b042:	d028      	beq.n	800b096 <UART_SetConfig+0xe7e>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b048:	2b08      	cmp	r3, #8
 800b04a:	d01f      	beq.n	800b08c <UART_SetConfig+0xe74>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b050:	2b09      	cmp	r3, #9
 800b052:	d016      	beq.n	800b082 <UART_SetConfig+0xe6a>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b058:	2b0a      	cmp	r3, #10
 800b05a:	d00d      	beq.n	800b078 <UART_SetConfig+0xe60>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b060:	2b0b      	cmp	r3, #11
 800b062:	d104      	bne.n	800b06e <UART_SetConfig+0xe56>
 800b064:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b068:	f04f 0400 	mov.w	r4, #0
 800b06c:	e03a      	b.n	800b0e4 <UART_SetConfig+0xecc>
 800b06e:	f04f 0301 	mov.w	r3, #1
 800b072:	f04f 0400 	mov.w	r4, #0
 800b076:	e035      	b.n	800b0e4 <UART_SetConfig+0xecc>
 800b078:	f04f 0380 	mov.w	r3, #128	; 0x80
 800b07c:	f04f 0400 	mov.w	r4, #0
 800b080:	e030      	b.n	800b0e4 <UART_SetConfig+0xecc>
 800b082:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b086:	f04f 0400 	mov.w	r4, #0
 800b08a:	e02b      	b.n	800b0e4 <UART_SetConfig+0xecc>
 800b08c:	f04f 0320 	mov.w	r3, #32
 800b090:	f04f 0400 	mov.w	r4, #0
 800b094:	e026      	b.n	800b0e4 <UART_SetConfig+0xecc>
 800b096:	f04f 0310 	mov.w	r3, #16
 800b09a:	f04f 0400 	mov.w	r4, #0
 800b09e:	e021      	b.n	800b0e4 <UART_SetConfig+0xecc>
 800b0a0:	f04f 030c 	mov.w	r3, #12
 800b0a4:	f04f 0400 	mov.w	r4, #0
 800b0a8:	e01c      	b.n	800b0e4 <UART_SetConfig+0xecc>
 800b0aa:	f04f 030a 	mov.w	r3, #10
 800b0ae:	f04f 0400 	mov.w	r4, #0
 800b0b2:	e017      	b.n	800b0e4 <UART_SetConfig+0xecc>
 800b0b4:	f04f 0308 	mov.w	r3, #8
 800b0b8:	f04f 0400 	mov.w	r4, #0
 800b0bc:	e012      	b.n	800b0e4 <UART_SetConfig+0xecc>
 800b0be:	f04f 0306 	mov.w	r3, #6
 800b0c2:	f04f 0400 	mov.w	r4, #0
 800b0c6:	e00d      	b.n	800b0e4 <UART_SetConfig+0xecc>
 800b0c8:	f04f 0304 	mov.w	r3, #4
 800b0cc:	f04f 0400 	mov.w	r4, #0
 800b0d0:	e008      	b.n	800b0e4 <UART_SetConfig+0xecc>
 800b0d2:	f04f 0302 	mov.w	r3, #2
 800b0d6:	f04f 0400 	mov.w	r4, #0
 800b0da:	e003      	b.n	800b0e4 <UART_SetConfig+0xecc>
 800b0dc:	f04f 0301 	mov.w	r3, #1
 800b0e0:	f04f 0400 	mov.w	r4, #0
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	4623      	mov	r3, r4
 800b0e8:	f7f5 f8f6 	bl	80002d8 <__aeabi_uldivmod>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	460c      	mov	r4, r1
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	4622      	mov	r2, r4
 800b0f4:	f04f 0300 	mov.w	r3, #0
 800b0f8:	f04f 0400 	mov.w	r4, #0
 800b0fc:	0214      	lsls	r4, r2, #8
 800b0fe:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b102:	020b      	lsls	r3, r1, #8
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	6852      	ldr	r2, [r2, #4]
 800b108:	0852      	lsrs	r2, r2, #1
 800b10a:	4611      	mov	r1, r2
 800b10c:	f04f 0200 	mov.w	r2, #0
 800b110:	eb13 0b01 	adds.w	fp, r3, r1
 800b114:	eb44 0c02 	adc.w	ip, r4, r2
 800b118:	4658      	mov	r0, fp
 800b11a:	4661      	mov	r1, ip
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	f04f 0400 	mov.w	r4, #0
 800b124:	461a      	mov	r2, r3
 800b126:	4623      	mov	r3, r4
 800b128:	f7f5 f8d6 	bl	80002d8 <__aeabi_uldivmod>
 800b12c:	4603      	mov	r3, r0
 800b12e:	460c      	mov	r4, r1
 800b130:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b132:	e247      	b.n	800b5c4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b134:	4b96      	ldr	r3, [pc, #600]	; (800b390 <UART_SetConfig+0x1178>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f003 0320 	and.w	r3, r3, #32
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f000 80a3 	beq.w	800b288 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b142:	4b93      	ldr	r3, [pc, #588]	; (800b390 <UART_SetConfig+0x1178>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	08db      	lsrs	r3, r3, #3
 800b148:	f003 0303 	and.w	r3, r3, #3
 800b14c:	4a91      	ldr	r2, [pc, #580]	; (800b394 <UART_SetConfig+0x117c>)
 800b14e:	fa22 f303 	lsr.w	r3, r2, r3
 800b152:	4618      	mov	r0, r3
 800b154:	f04f 0100 	mov.w	r1, #0
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d067      	beq.n	800b230 <UART_SetConfig+0x1018>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b164:	2b01      	cmp	r3, #1
 800b166:	d05e      	beq.n	800b226 <UART_SetConfig+0x100e>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d055      	beq.n	800b21c <UART_SetConfig+0x1004>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b174:	2b03      	cmp	r3, #3
 800b176:	d04c      	beq.n	800b212 <UART_SetConfig+0xffa>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17c:	2b04      	cmp	r3, #4
 800b17e:	d043      	beq.n	800b208 <UART_SetConfig+0xff0>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b184:	2b05      	cmp	r3, #5
 800b186:	d03a      	beq.n	800b1fe <UART_SetConfig+0xfe6>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18c:	2b06      	cmp	r3, #6
 800b18e:	d031      	beq.n	800b1f4 <UART_SetConfig+0xfdc>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b194:	2b07      	cmp	r3, #7
 800b196:	d028      	beq.n	800b1ea <UART_SetConfig+0xfd2>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19c:	2b08      	cmp	r3, #8
 800b19e:	d01f      	beq.n	800b1e0 <UART_SetConfig+0xfc8>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a4:	2b09      	cmp	r3, #9
 800b1a6:	d016      	beq.n	800b1d6 <UART_SetConfig+0xfbe>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ac:	2b0a      	cmp	r3, #10
 800b1ae:	d00d      	beq.n	800b1cc <UART_SetConfig+0xfb4>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b4:	2b0b      	cmp	r3, #11
 800b1b6:	d104      	bne.n	800b1c2 <UART_SetConfig+0xfaa>
 800b1b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1bc:	f04f 0400 	mov.w	r4, #0
 800b1c0:	e03a      	b.n	800b238 <UART_SetConfig+0x1020>
 800b1c2:	f04f 0301 	mov.w	r3, #1
 800b1c6:	f04f 0400 	mov.w	r4, #0
 800b1ca:	e035      	b.n	800b238 <UART_SetConfig+0x1020>
 800b1cc:	f04f 0380 	mov.w	r3, #128	; 0x80
 800b1d0:	f04f 0400 	mov.w	r4, #0
 800b1d4:	e030      	b.n	800b238 <UART_SetConfig+0x1020>
 800b1d6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b1da:	f04f 0400 	mov.w	r4, #0
 800b1de:	e02b      	b.n	800b238 <UART_SetConfig+0x1020>
 800b1e0:	f04f 0320 	mov.w	r3, #32
 800b1e4:	f04f 0400 	mov.w	r4, #0
 800b1e8:	e026      	b.n	800b238 <UART_SetConfig+0x1020>
 800b1ea:	f04f 0310 	mov.w	r3, #16
 800b1ee:	f04f 0400 	mov.w	r4, #0
 800b1f2:	e021      	b.n	800b238 <UART_SetConfig+0x1020>
 800b1f4:	f04f 030c 	mov.w	r3, #12
 800b1f8:	f04f 0400 	mov.w	r4, #0
 800b1fc:	e01c      	b.n	800b238 <UART_SetConfig+0x1020>
 800b1fe:	f04f 030a 	mov.w	r3, #10
 800b202:	f04f 0400 	mov.w	r4, #0
 800b206:	e017      	b.n	800b238 <UART_SetConfig+0x1020>
 800b208:	f04f 0308 	mov.w	r3, #8
 800b20c:	f04f 0400 	mov.w	r4, #0
 800b210:	e012      	b.n	800b238 <UART_SetConfig+0x1020>
 800b212:	f04f 0306 	mov.w	r3, #6
 800b216:	f04f 0400 	mov.w	r4, #0
 800b21a:	e00d      	b.n	800b238 <UART_SetConfig+0x1020>
 800b21c:	f04f 0304 	mov.w	r3, #4
 800b220:	f04f 0400 	mov.w	r4, #0
 800b224:	e008      	b.n	800b238 <UART_SetConfig+0x1020>
 800b226:	f04f 0302 	mov.w	r3, #2
 800b22a:	f04f 0400 	mov.w	r4, #0
 800b22e:	e003      	b.n	800b238 <UART_SetConfig+0x1020>
 800b230:	f04f 0301 	mov.w	r3, #1
 800b234:	f04f 0400 	mov.w	r4, #0
 800b238:	461a      	mov	r2, r3
 800b23a:	4623      	mov	r3, r4
 800b23c:	f7f5 f84c 	bl	80002d8 <__aeabi_uldivmod>
 800b240:	4603      	mov	r3, r0
 800b242:	460c      	mov	r4, r1
 800b244:	4619      	mov	r1, r3
 800b246:	4622      	mov	r2, r4
 800b248:	f04f 0300 	mov.w	r3, #0
 800b24c:	f04f 0400 	mov.w	r4, #0
 800b250:	0214      	lsls	r4, r2, #8
 800b252:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b256:	020b      	lsls	r3, r1, #8
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	6852      	ldr	r2, [r2, #4]
 800b25c:	0852      	lsrs	r2, r2, #1
 800b25e:	4611      	mov	r1, r2
 800b260:	f04f 0200 	mov.w	r2, #0
 800b264:	eb13 0b01 	adds.w	fp, r3, r1
 800b268:	eb44 0c02 	adc.w	ip, r4, r2
 800b26c:	4658      	mov	r0, fp
 800b26e:	4661      	mov	r1, ip
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	f04f 0400 	mov.w	r4, #0
 800b278:	461a      	mov	r2, r3
 800b27a:	4623      	mov	r3, r4
 800b27c:	f7f5 f82c 	bl	80002d8 <__aeabi_uldivmod>
 800b280:	4603      	mov	r3, r0
 800b282:	460c      	mov	r4, r1
 800b284:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800b286:	e19d      	b.n	800b5c4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d05b      	beq.n	800b348 <UART_SetConfig+0x1130>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b294:	2b01      	cmp	r3, #1
 800b296:	d053      	beq.n	800b340 <UART_SetConfig+0x1128>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29c:	2b02      	cmp	r3, #2
 800b29e:	d04b      	beq.n	800b338 <UART_SetConfig+0x1120>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a4:	2b03      	cmp	r3, #3
 800b2a6:	d043      	beq.n	800b330 <UART_SetConfig+0x1118>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ac:	2b04      	cmp	r3, #4
 800b2ae:	d03b      	beq.n	800b328 <UART_SetConfig+0x1110>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b4:	2b05      	cmp	r3, #5
 800b2b6:	d033      	beq.n	800b320 <UART_SetConfig+0x1108>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2bc:	2b06      	cmp	r3, #6
 800b2be:	d02b      	beq.n	800b318 <UART_SetConfig+0x1100>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c4:	2b07      	cmp	r3, #7
 800b2c6:	d023      	beq.n	800b310 <UART_SetConfig+0x10f8>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2cc:	2b08      	cmp	r3, #8
 800b2ce:	d01b      	beq.n	800b308 <UART_SetConfig+0x10f0>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d4:	2b09      	cmp	r3, #9
 800b2d6:	d013      	beq.n	800b300 <UART_SetConfig+0x10e8>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2dc:	2b0a      	cmp	r3, #10
 800b2de:	d00b      	beq.n	800b2f8 <UART_SetConfig+0x10e0>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e4:	2b0b      	cmp	r3, #11
 800b2e6:	d103      	bne.n	800b2f0 <UART_SetConfig+0x10d8>
 800b2e8:	4b2a      	ldr	r3, [pc, #168]	; (800b394 <UART_SetConfig+0x117c>)
 800b2ea:	f04f 0400 	mov.w	r4, #0
 800b2ee:	e02e      	b.n	800b34e <UART_SetConfig+0x1136>
 800b2f0:	4b29      	ldr	r3, [pc, #164]	; (800b398 <UART_SetConfig+0x1180>)
 800b2f2:	f04f 0403 	mov.w	r4, #3
 800b2f6:	e02a      	b.n	800b34e <UART_SetConfig+0x1136>
 800b2f8:	4b28      	ldr	r3, [pc, #160]	; (800b39c <UART_SetConfig+0x1184>)
 800b2fa:	f04f 0400 	mov.w	r4, #0
 800b2fe:	e026      	b.n	800b34e <UART_SetConfig+0x1136>
 800b300:	4b27      	ldr	r3, [pc, #156]	; (800b3a0 <UART_SetConfig+0x1188>)
 800b302:	f04f 0400 	mov.w	r4, #0
 800b306:	e022      	b.n	800b34e <UART_SetConfig+0x1136>
 800b308:	4b26      	ldr	r3, [pc, #152]	; (800b3a4 <UART_SetConfig+0x118c>)
 800b30a:	f04f 0400 	mov.w	r4, #0
 800b30e:	e01e      	b.n	800b34e <UART_SetConfig+0x1136>
 800b310:	4b25      	ldr	r3, [pc, #148]	; (800b3a8 <UART_SetConfig+0x1190>)
 800b312:	f04f 0400 	mov.w	r4, #0
 800b316:	e01a      	b.n	800b34e <UART_SetConfig+0x1136>
 800b318:	a419      	add	r4, pc, #100	; (adr r4, 800b380 <UART_SetConfig+0x1168>)
 800b31a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b31e:	e016      	b.n	800b34e <UART_SetConfig+0x1136>
 800b320:	4b22      	ldr	r3, [pc, #136]	; (800b3ac <UART_SetConfig+0x1194>)
 800b322:	f04f 0400 	mov.w	r4, #0
 800b326:	e012      	b.n	800b34e <UART_SetConfig+0x1136>
 800b328:	4b21      	ldr	r3, [pc, #132]	; (800b3b0 <UART_SetConfig+0x1198>)
 800b32a:	f04f 0400 	mov.w	r4, #0
 800b32e:	e00e      	b.n	800b34e <UART_SetConfig+0x1136>
 800b330:	a415      	add	r4, pc, #84	; (adr r4, 800b388 <UART_SetConfig+0x1170>)
 800b332:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b336:	e00a      	b.n	800b34e <UART_SetConfig+0x1136>
 800b338:	4b1e      	ldr	r3, [pc, #120]	; (800b3b4 <UART_SetConfig+0x119c>)
 800b33a:	f04f 0400 	mov.w	r4, #0
 800b33e:	e006      	b.n	800b34e <UART_SetConfig+0x1136>
 800b340:	4b1d      	ldr	r3, [pc, #116]	; (800b3b8 <UART_SetConfig+0x11a0>)
 800b342:	f04f 0401 	mov.w	r4, #1
 800b346:	e002      	b.n	800b34e <UART_SetConfig+0x1136>
 800b348:	4b13      	ldr	r3, [pc, #76]	; (800b398 <UART_SetConfig+0x1180>)
 800b34a:	f04f 0403 	mov.w	r4, #3
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	6852      	ldr	r2, [r2, #4]
 800b352:	0852      	lsrs	r2, r2, #1
 800b354:	4611      	mov	r1, r2
 800b356:	f04f 0200 	mov.w	r2, #0
 800b35a:	eb13 0b01 	adds.w	fp, r3, r1
 800b35e:	eb44 0c02 	adc.w	ip, r4, r2
 800b362:	4658      	mov	r0, fp
 800b364:	4661      	mov	r1, ip
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	f04f 0400 	mov.w	r4, #0
 800b36e:	461a      	mov	r2, r3
 800b370:	4623      	mov	r3, r4
 800b372:	f7f4 ffb1 	bl	80002d8 <__aeabi_uldivmod>
 800b376:	4603      	mov	r3, r0
 800b378:	460c      	mov	r4, r1
 800b37a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b37c:	e122      	b.n	800b5c4 <UART_SetConfig+0x13ac>
 800b37e:	bf00      	nop
 800b380:	51615500 	.word	0x51615500
 800b384:	00000000 	.word	0x00000000
 800b388:	a2c2aa00 	.word	0xa2c2aa00
 800b38c:	00000000 	.word	0x00000000
 800b390:	58024400 	.word	0x58024400
 800b394:	03d09000 	.word	0x03d09000
 800b398:	d0900000 	.word	0xd0900000
 800b39c:	07a12000 	.word	0x07a12000
 800b3a0:	0f424000 	.word	0x0f424000
 800b3a4:	1e848000 	.word	0x1e848000
 800b3a8:	3d090000 	.word	0x3d090000
 800b3ac:	61a80000 	.word	0x61a80000
 800b3b0:	7a120000 	.word	0x7a120000
 800b3b4:	f4240000 	.word	0xf4240000
 800b3b8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d05b      	beq.n	800b47c <UART_SetConfig+0x1264>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d053      	beq.n	800b474 <UART_SetConfig+0x125c>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d0:	2b02      	cmp	r3, #2
 800b3d2:	d04b      	beq.n	800b46c <UART_SetConfig+0x1254>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d8:	2b03      	cmp	r3, #3
 800b3da:	d043      	beq.n	800b464 <UART_SetConfig+0x124c>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e0:	2b04      	cmp	r3, #4
 800b3e2:	d03b      	beq.n	800b45c <UART_SetConfig+0x1244>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e8:	2b05      	cmp	r3, #5
 800b3ea:	d033      	beq.n	800b454 <UART_SetConfig+0x123c>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f0:	2b06      	cmp	r3, #6
 800b3f2:	d02b      	beq.n	800b44c <UART_SetConfig+0x1234>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f8:	2b07      	cmp	r3, #7
 800b3fa:	d023      	beq.n	800b444 <UART_SetConfig+0x122c>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b400:	2b08      	cmp	r3, #8
 800b402:	d01b      	beq.n	800b43c <UART_SetConfig+0x1224>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b408:	2b09      	cmp	r3, #9
 800b40a:	d013      	beq.n	800b434 <UART_SetConfig+0x121c>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b410:	2b0a      	cmp	r3, #10
 800b412:	d00b      	beq.n	800b42c <UART_SetConfig+0x1214>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b418:	2b0b      	cmp	r3, #11
 800b41a:	d103      	bne.n	800b424 <UART_SetConfig+0x120c>
 800b41c:	4bc0      	ldr	r3, [pc, #768]	; (800b720 <UART_SetConfig+0x1508>)
 800b41e:	f04f 0400 	mov.w	r4, #0
 800b422:	e02e      	b.n	800b482 <UART_SetConfig+0x126a>
 800b424:	4bbf      	ldr	r3, [pc, #764]	; (800b724 <UART_SetConfig+0x150c>)
 800b426:	f04f 0400 	mov.w	r4, #0
 800b42a:	e02a      	b.n	800b482 <UART_SetConfig+0x126a>
 800b42c:	4bbe      	ldr	r3, [pc, #760]	; (800b728 <UART_SetConfig+0x1510>)
 800b42e:	f04f 0400 	mov.w	r4, #0
 800b432:	e026      	b.n	800b482 <UART_SetConfig+0x126a>
 800b434:	4bbd      	ldr	r3, [pc, #756]	; (800b72c <UART_SetConfig+0x1514>)
 800b436:	f04f 0400 	mov.w	r4, #0
 800b43a:	e022      	b.n	800b482 <UART_SetConfig+0x126a>
 800b43c:	4bbc      	ldr	r3, [pc, #752]	; (800b730 <UART_SetConfig+0x1518>)
 800b43e:	f04f 0400 	mov.w	r4, #0
 800b442:	e01e      	b.n	800b482 <UART_SetConfig+0x126a>
 800b444:	4bbb      	ldr	r3, [pc, #748]	; (800b734 <UART_SetConfig+0x151c>)
 800b446:	f04f 0400 	mov.w	r4, #0
 800b44a:	e01a      	b.n	800b482 <UART_SetConfig+0x126a>
 800b44c:	a4b0      	add	r4, pc, #704	; (adr r4, 800b710 <UART_SetConfig+0x14f8>)
 800b44e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b452:	e016      	b.n	800b482 <UART_SetConfig+0x126a>
 800b454:	4bb8      	ldr	r3, [pc, #736]	; (800b738 <UART_SetConfig+0x1520>)
 800b456:	f04f 0400 	mov.w	r4, #0
 800b45a:	e012      	b.n	800b482 <UART_SetConfig+0x126a>
 800b45c:	4bb7      	ldr	r3, [pc, #732]	; (800b73c <UART_SetConfig+0x1524>)
 800b45e:	f04f 0400 	mov.w	r4, #0
 800b462:	e00e      	b.n	800b482 <UART_SetConfig+0x126a>
 800b464:	a4ac      	add	r4, pc, #688	; (adr r4, 800b718 <UART_SetConfig+0x1500>)
 800b466:	e9d4 3400 	ldrd	r3, r4, [r4]
 800b46a:	e00a      	b.n	800b482 <UART_SetConfig+0x126a>
 800b46c:	4bb4      	ldr	r3, [pc, #720]	; (800b740 <UART_SetConfig+0x1528>)
 800b46e:	f04f 0400 	mov.w	r4, #0
 800b472:	e006      	b.n	800b482 <UART_SetConfig+0x126a>
 800b474:	4bb3      	ldr	r3, [pc, #716]	; (800b744 <UART_SetConfig+0x152c>)
 800b476:	f04f 0400 	mov.w	r4, #0
 800b47a:	e002      	b.n	800b482 <UART_SetConfig+0x126a>
 800b47c:	4ba9      	ldr	r3, [pc, #676]	; (800b724 <UART_SetConfig+0x150c>)
 800b47e:	f04f 0400 	mov.w	r4, #0
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	6852      	ldr	r2, [r2, #4]
 800b486:	0852      	lsrs	r2, r2, #1
 800b488:	4611      	mov	r1, r2
 800b48a:	f04f 0200 	mov.w	r2, #0
 800b48e:	eb13 0b01 	adds.w	fp, r3, r1
 800b492:	eb44 0c02 	adc.w	ip, r4, r2
 800b496:	4658      	mov	r0, fp
 800b498:	4661      	mov	r1, ip
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	f04f 0400 	mov.w	r4, #0
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	4623      	mov	r3, r4
 800b4a6:	f7f4 ff17 	bl	80002d8 <__aeabi_uldivmod>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	460c      	mov	r4, r1
 800b4ae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b4b0:	e088      	b.n	800b5c4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d064      	beq.n	800b584 <UART_SetConfig+0x136c>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d05b      	beq.n	800b57a <UART_SetConfig+0x1362>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	d052      	beq.n	800b570 <UART_SetConfig+0x1358>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ce:	2b03      	cmp	r3, #3
 800b4d0:	d04a      	beq.n	800b568 <UART_SetConfig+0x1350>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d6:	2b04      	cmp	r3, #4
 800b4d8:	d041      	beq.n	800b55e <UART_SetConfig+0x1346>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4de:	2b05      	cmp	r3, #5
 800b4e0:	d039      	beq.n	800b556 <UART_SetConfig+0x133e>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e6:	2b06      	cmp	r3, #6
 800b4e8:	d031      	beq.n	800b54e <UART_SetConfig+0x1336>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ee:	2b07      	cmp	r3, #7
 800b4f0:	d028      	beq.n	800b544 <UART_SetConfig+0x132c>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f6:	2b08      	cmp	r3, #8
 800b4f8:	d01f      	beq.n	800b53a <UART_SetConfig+0x1322>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fe:	2b09      	cmp	r3, #9
 800b500:	d016      	beq.n	800b530 <UART_SetConfig+0x1318>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b506:	2b0a      	cmp	r3, #10
 800b508:	d00d      	beq.n	800b526 <UART_SetConfig+0x130e>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50e:	2b0b      	cmp	r3, #11
 800b510:	d104      	bne.n	800b51c <UART_SetConfig+0x1304>
 800b512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b516:	f04f 0400 	mov.w	r4, #0
 800b51a:	e037      	b.n	800b58c <UART_SetConfig+0x1374>
 800b51c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b520:	f04f 0400 	mov.w	r4, #0
 800b524:	e032      	b.n	800b58c <UART_SetConfig+0x1374>
 800b526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b52a:	f04f 0400 	mov.w	r4, #0
 800b52e:	e02d      	b.n	800b58c <UART_SetConfig+0x1374>
 800b530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b534:	f04f 0400 	mov.w	r4, #0
 800b538:	e028      	b.n	800b58c <UART_SetConfig+0x1374>
 800b53a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b53e:	f04f 0400 	mov.w	r4, #0
 800b542:	e023      	b.n	800b58c <UART_SetConfig+0x1374>
 800b544:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b548:	f04f 0400 	mov.w	r4, #0
 800b54c:	e01e      	b.n	800b58c <UART_SetConfig+0x1374>
 800b54e:	4b7e      	ldr	r3, [pc, #504]	; (800b748 <UART_SetConfig+0x1530>)
 800b550:	f04f 0400 	mov.w	r4, #0
 800b554:	e01a      	b.n	800b58c <UART_SetConfig+0x1374>
 800b556:	4b7d      	ldr	r3, [pc, #500]	; (800b74c <UART_SetConfig+0x1534>)
 800b558:	f04f 0400 	mov.w	r4, #0
 800b55c:	e016      	b.n	800b58c <UART_SetConfig+0x1374>
 800b55e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b562:	f04f 0400 	mov.w	r4, #0
 800b566:	e011      	b.n	800b58c <UART_SetConfig+0x1374>
 800b568:	4b79      	ldr	r3, [pc, #484]	; (800b750 <UART_SetConfig+0x1538>)
 800b56a:	f04f 0400 	mov.w	r4, #0
 800b56e:	e00d      	b.n	800b58c <UART_SetConfig+0x1374>
 800b570:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b574:	f04f 0400 	mov.w	r4, #0
 800b578:	e008      	b.n	800b58c <UART_SetConfig+0x1374>
 800b57a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b57e:	f04f 0400 	mov.w	r4, #0
 800b582:	e003      	b.n	800b58c <UART_SetConfig+0x1374>
 800b584:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b588:	f04f 0400 	mov.w	r4, #0
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	6852      	ldr	r2, [r2, #4]
 800b590:	0852      	lsrs	r2, r2, #1
 800b592:	4611      	mov	r1, r2
 800b594:	f04f 0200 	mov.w	r2, #0
 800b598:	eb13 0b01 	adds.w	fp, r3, r1
 800b59c:	eb44 0c02 	adc.w	ip, r4, r2
 800b5a0:	4658      	mov	r0, fp
 800b5a2:	4661      	mov	r1, ip
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	f04f 0400 	mov.w	r4, #0
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	4623      	mov	r3, r4
 800b5b0:	f7f4 fe92 	bl	80002d8 <__aeabi_uldivmod>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b5ba:	e003      	b.n	800b5c4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800b5c2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5ca:	d309      	bcc.n	800b5e0 <UART_SetConfig+0x13c8>
 800b5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5d2:	d205      	bcs.n	800b5e0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5da:	60da      	str	r2, [r3, #12]
 800b5dc:	f000 bf85 	b.w	800c4ea <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5e6:	f000 bf80 	b.w	800c4ea <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	69db      	ldr	r3, [r3, #28]
 800b5ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5f2:	f040 83da 	bne.w	800bdaa <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800b5f6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b5fa:	2b40      	cmp	r3, #64	; 0x40
 800b5fc:	f200 83b3 	bhi.w	800bd66 <UART_SetConfig+0x1b4e>
 800b600:	a201      	add	r2, pc, #4	; (adr r2, 800b608 <UART_SetConfig+0x13f0>)
 800b602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b606:	bf00      	nop
 800b608:	0800b755 	.word	0x0800b755
 800b60c:	0800b80d 	.word	0x0800b80d
 800b610:	0800bd67 	.word	0x0800bd67
 800b614:	0800bd67 	.word	0x0800bd67
 800b618:	0800b8c5 	.word	0x0800b8c5
 800b61c:	0800bd67 	.word	0x0800bd67
 800b620:	0800bd67 	.word	0x0800bd67
 800b624:	0800bd67 	.word	0x0800bd67
 800b628:	0800b981 	.word	0x0800b981
 800b62c:	0800bd67 	.word	0x0800bd67
 800b630:	0800bd67 	.word	0x0800bd67
 800b634:	0800bd67 	.word	0x0800bd67
 800b638:	0800bd67 	.word	0x0800bd67
 800b63c:	0800bd67 	.word	0x0800bd67
 800b640:	0800bd67 	.word	0x0800bd67
 800b644:	0800bd67 	.word	0x0800bd67
 800b648:	0800ba3d 	.word	0x0800ba3d
 800b64c:	0800bd67 	.word	0x0800bd67
 800b650:	0800bd67 	.word	0x0800bd67
 800b654:	0800bd67 	.word	0x0800bd67
 800b658:	0800bd67 	.word	0x0800bd67
 800b65c:	0800bd67 	.word	0x0800bd67
 800b660:	0800bd67 	.word	0x0800bd67
 800b664:	0800bd67 	.word	0x0800bd67
 800b668:	0800bd67 	.word	0x0800bd67
 800b66c:	0800bd67 	.word	0x0800bd67
 800b670:	0800bd67 	.word	0x0800bd67
 800b674:	0800bd67 	.word	0x0800bd67
 800b678:	0800bd67 	.word	0x0800bd67
 800b67c:	0800bd67 	.word	0x0800bd67
 800b680:	0800bd67 	.word	0x0800bd67
 800b684:	0800bd67 	.word	0x0800bd67
 800b688:	0800bbaf 	.word	0x0800bbaf
 800b68c:	0800bd67 	.word	0x0800bd67
 800b690:	0800bd67 	.word	0x0800bd67
 800b694:	0800bd67 	.word	0x0800bd67
 800b698:	0800bd67 	.word	0x0800bd67
 800b69c:	0800bd67 	.word	0x0800bd67
 800b6a0:	0800bd67 	.word	0x0800bd67
 800b6a4:	0800bd67 	.word	0x0800bd67
 800b6a8:	0800bd67 	.word	0x0800bd67
 800b6ac:	0800bd67 	.word	0x0800bd67
 800b6b0:	0800bd67 	.word	0x0800bd67
 800b6b4:	0800bd67 	.word	0x0800bd67
 800b6b8:	0800bd67 	.word	0x0800bd67
 800b6bc:	0800bd67 	.word	0x0800bd67
 800b6c0:	0800bd67 	.word	0x0800bd67
 800b6c4:	0800bd67 	.word	0x0800bd67
 800b6c8:	0800bd67 	.word	0x0800bd67
 800b6cc:	0800bd67 	.word	0x0800bd67
 800b6d0:	0800bd67 	.word	0x0800bd67
 800b6d4:	0800bd67 	.word	0x0800bd67
 800b6d8:	0800bd67 	.word	0x0800bd67
 800b6dc:	0800bd67 	.word	0x0800bd67
 800b6e0:	0800bd67 	.word	0x0800bd67
 800b6e4:	0800bd67 	.word	0x0800bd67
 800b6e8:	0800bd67 	.word	0x0800bd67
 800b6ec:	0800bd67 	.word	0x0800bd67
 800b6f0:	0800bd67 	.word	0x0800bd67
 800b6f4:	0800bd67 	.word	0x0800bd67
 800b6f8:	0800bd67 	.word	0x0800bd67
 800b6fc:	0800bd67 	.word	0x0800bd67
 800b700:	0800bd67 	.word	0x0800bd67
 800b704:	0800bd67 	.word	0x0800bd67
 800b708:	0800bca5 	.word	0x0800bca5
 800b70c:	f3af 8000 	nop.w
 800b710:	05161500 	.word	0x05161500
 800b714:	00000000 	.word	0x00000000
 800b718:	0a2c2a00 	.word	0x0a2c2a00
 800b71c:	00000000 	.word	0x00000000
 800b720:	003d0900 	.word	0x003d0900
 800b724:	3d090000 	.word	0x3d090000
 800b728:	007a1200 	.word	0x007a1200
 800b72c:	00f42400 	.word	0x00f42400
 800b730:	01e84800 	.word	0x01e84800
 800b734:	03d09000 	.word	0x03d09000
 800b738:	061a8000 	.word	0x061a8000
 800b73c:	07a12000 	.word	0x07a12000
 800b740:	0f424000 	.word	0x0f424000
 800b744:	1e848000 	.word	0x1e848000
 800b748:	000aaa00 	.word	0x000aaa00
 800b74c:	000ccc00 	.word	0x000ccc00
 800b750:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b754:	f7fb fefc 	bl	8007550 <HAL_RCC_GetPCLK1Freq>
 800b758:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d044      	beq.n	800b7ec <UART_SetConfig+0x15d4>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b766:	2b01      	cmp	r3, #1
 800b768:	d03e      	beq.n	800b7e8 <UART_SetConfig+0x15d0>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76e:	2b02      	cmp	r3, #2
 800b770:	d038      	beq.n	800b7e4 <UART_SetConfig+0x15cc>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b776:	2b03      	cmp	r3, #3
 800b778:	d032      	beq.n	800b7e0 <UART_SetConfig+0x15c8>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77e:	2b04      	cmp	r3, #4
 800b780:	d02c      	beq.n	800b7dc <UART_SetConfig+0x15c4>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b786:	2b05      	cmp	r3, #5
 800b788:	d026      	beq.n	800b7d8 <UART_SetConfig+0x15c0>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78e:	2b06      	cmp	r3, #6
 800b790:	d020      	beq.n	800b7d4 <UART_SetConfig+0x15bc>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b796:	2b07      	cmp	r3, #7
 800b798:	d01a      	beq.n	800b7d0 <UART_SetConfig+0x15b8>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79e:	2b08      	cmp	r3, #8
 800b7a0:	d014      	beq.n	800b7cc <UART_SetConfig+0x15b4>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a6:	2b09      	cmp	r3, #9
 800b7a8:	d00e      	beq.n	800b7c8 <UART_SetConfig+0x15b0>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ae:	2b0a      	cmp	r3, #10
 800b7b0:	d008      	beq.n	800b7c4 <UART_SetConfig+0x15ac>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b6:	2b0b      	cmp	r3, #11
 800b7b8:	d102      	bne.n	800b7c0 <UART_SetConfig+0x15a8>
 800b7ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7be:	e016      	b.n	800b7ee <UART_SetConfig+0x15d6>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e014      	b.n	800b7ee <UART_SetConfig+0x15d6>
 800b7c4:	2380      	movs	r3, #128	; 0x80
 800b7c6:	e012      	b.n	800b7ee <UART_SetConfig+0x15d6>
 800b7c8:	2340      	movs	r3, #64	; 0x40
 800b7ca:	e010      	b.n	800b7ee <UART_SetConfig+0x15d6>
 800b7cc:	2320      	movs	r3, #32
 800b7ce:	e00e      	b.n	800b7ee <UART_SetConfig+0x15d6>
 800b7d0:	2310      	movs	r3, #16
 800b7d2:	e00c      	b.n	800b7ee <UART_SetConfig+0x15d6>
 800b7d4:	230c      	movs	r3, #12
 800b7d6:	e00a      	b.n	800b7ee <UART_SetConfig+0x15d6>
 800b7d8:	230a      	movs	r3, #10
 800b7da:	e008      	b.n	800b7ee <UART_SetConfig+0x15d6>
 800b7dc:	2308      	movs	r3, #8
 800b7de:	e006      	b.n	800b7ee <UART_SetConfig+0x15d6>
 800b7e0:	2306      	movs	r3, #6
 800b7e2:	e004      	b.n	800b7ee <UART_SetConfig+0x15d6>
 800b7e4:	2304      	movs	r3, #4
 800b7e6:	e002      	b.n	800b7ee <UART_SetConfig+0x15d6>
 800b7e8:	2302      	movs	r3, #2
 800b7ea:	e000      	b.n	800b7ee <UART_SetConfig+0x15d6>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7f4:	005a      	lsls	r2, r3, #1
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	085b      	lsrs	r3, r3, #1
 800b7fc:	441a      	add	r2, r3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	fbb2 f3f3 	udiv	r3, r2, r3
 800b806:	b29b      	uxth	r3, r3
 800b808:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b80a:	e2b0      	b.n	800bd6e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b80c:	f7fb feb6 	bl	800757c <HAL_RCC_GetPCLK2Freq>
 800b810:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b816:	2b00      	cmp	r3, #0
 800b818:	d044      	beq.n	800b8a4 <UART_SetConfig+0x168c>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d03e      	beq.n	800b8a0 <UART_SetConfig+0x1688>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b826:	2b02      	cmp	r3, #2
 800b828:	d038      	beq.n	800b89c <UART_SetConfig+0x1684>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82e:	2b03      	cmp	r3, #3
 800b830:	d032      	beq.n	800b898 <UART_SetConfig+0x1680>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b836:	2b04      	cmp	r3, #4
 800b838:	d02c      	beq.n	800b894 <UART_SetConfig+0x167c>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83e:	2b05      	cmp	r3, #5
 800b840:	d026      	beq.n	800b890 <UART_SetConfig+0x1678>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b846:	2b06      	cmp	r3, #6
 800b848:	d020      	beq.n	800b88c <UART_SetConfig+0x1674>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84e:	2b07      	cmp	r3, #7
 800b850:	d01a      	beq.n	800b888 <UART_SetConfig+0x1670>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b856:	2b08      	cmp	r3, #8
 800b858:	d014      	beq.n	800b884 <UART_SetConfig+0x166c>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85e:	2b09      	cmp	r3, #9
 800b860:	d00e      	beq.n	800b880 <UART_SetConfig+0x1668>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b866:	2b0a      	cmp	r3, #10
 800b868:	d008      	beq.n	800b87c <UART_SetConfig+0x1664>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86e:	2b0b      	cmp	r3, #11
 800b870:	d102      	bne.n	800b878 <UART_SetConfig+0x1660>
 800b872:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b876:	e016      	b.n	800b8a6 <UART_SetConfig+0x168e>
 800b878:	2301      	movs	r3, #1
 800b87a:	e014      	b.n	800b8a6 <UART_SetConfig+0x168e>
 800b87c:	2380      	movs	r3, #128	; 0x80
 800b87e:	e012      	b.n	800b8a6 <UART_SetConfig+0x168e>
 800b880:	2340      	movs	r3, #64	; 0x40
 800b882:	e010      	b.n	800b8a6 <UART_SetConfig+0x168e>
 800b884:	2320      	movs	r3, #32
 800b886:	e00e      	b.n	800b8a6 <UART_SetConfig+0x168e>
 800b888:	2310      	movs	r3, #16
 800b88a:	e00c      	b.n	800b8a6 <UART_SetConfig+0x168e>
 800b88c:	230c      	movs	r3, #12
 800b88e:	e00a      	b.n	800b8a6 <UART_SetConfig+0x168e>
 800b890:	230a      	movs	r3, #10
 800b892:	e008      	b.n	800b8a6 <UART_SetConfig+0x168e>
 800b894:	2308      	movs	r3, #8
 800b896:	e006      	b.n	800b8a6 <UART_SetConfig+0x168e>
 800b898:	2306      	movs	r3, #6
 800b89a:	e004      	b.n	800b8a6 <UART_SetConfig+0x168e>
 800b89c:	2304      	movs	r3, #4
 800b89e:	e002      	b.n	800b8a6 <UART_SetConfig+0x168e>
 800b8a0:	2302      	movs	r3, #2
 800b8a2:	e000      	b.n	800b8a6 <UART_SetConfig+0x168e>
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ac:	005a      	lsls	r2, r3, #1
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	085b      	lsrs	r3, r3, #1
 800b8b4:	441a      	add	r2, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8c2:	e254      	b.n	800bd6e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8c4:	f107 0318 	add.w	r3, r7, #24
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fc ffd9 	bl	8008880 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8ce:	69fa      	ldr	r2, [r7, #28]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d044      	beq.n	800b962 <UART_SetConfig+0x174a>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d03e      	beq.n	800b95e <UART_SetConfig+0x1746>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e4:	2b02      	cmp	r3, #2
 800b8e6:	d038      	beq.n	800b95a <UART_SetConfig+0x1742>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ec:	2b03      	cmp	r3, #3
 800b8ee:	d032      	beq.n	800b956 <UART_SetConfig+0x173e>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f4:	2b04      	cmp	r3, #4
 800b8f6:	d02c      	beq.n	800b952 <UART_SetConfig+0x173a>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fc:	2b05      	cmp	r3, #5
 800b8fe:	d026      	beq.n	800b94e <UART_SetConfig+0x1736>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b904:	2b06      	cmp	r3, #6
 800b906:	d020      	beq.n	800b94a <UART_SetConfig+0x1732>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90c:	2b07      	cmp	r3, #7
 800b90e:	d01a      	beq.n	800b946 <UART_SetConfig+0x172e>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b914:	2b08      	cmp	r3, #8
 800b916:	d014      	beq.n	800b942 <UART_SetConfig+0x172a>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91c:	2b09      	cmp	r3, #9
 800b91e:	d00e      	beq.n	800b93e <UART_SetConfig+0x1726>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b924:	2b0a      	cmp	r3, #10
 800b926:	d008      	beq.n	800b93a <UART_SetConfig+0x1722>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92c:	2b0b      	cmp	r3, #11
 800b92e:	d102      	bne.n	800b936 <UART_SetConfig+0x171e>
 800b930:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b934:	e016      	b.n	800b964 <UART_SetConfig+0x174c>
 800b936:	2301      	movs	r3, #1
 800b938:	e014      	b.n	800b964 <UART_SetConfig+0x174c>
 800b93a:	2380      	movs	r3, #128	; 0x80
 800b93c:	e012      	b.n	800b964 <UART_SetConfig+0x174c>
 800b93e:	2340      	movs	r3, #64	; 0x40
 800b940:	e010      	b.n	800b964 <UART_SetConfig+0x174c>
 800b942:	2320      	movs	r3, #32
 800b944:	e00e      	b.n	800b964 <UART_SetConfig+0x174c>
 800b946:	2310      	movs	r3, #16
 800b948:	e00c      	b.n	800b964 <UART_SetConfig+0x174c>
 800b94a:	230c      	movs	r3, #12
 800b94c:	e00a      	b.n	800b964 <UART_SetConfig+0x174c>
 800b94e:	230a      	movs	r3, #10
 800b950:	e008      	b.n	800b964 <UART_SetConfig+0x174c>
 800b952:	2308      	movs	r3, #8
 800b954:	e006      	b.n	800b964 <UART_SetConfig+0x174c>
 800b956:	2306      	movs	r3, #6
 800b958:	e004      	b.n	800b964 <UART_SetConfig+0x174c>
 800b95a:	2304      	movs	r3, #4
 800b95c:	e002      	b.n	800b964 <UART_SetConfig+0x174c>
 800b95e:	2302      	movs	r3, #2
 800b960:	e000      	b.n	800b964 <UART_SetConfig+0x174c>
 800b962:	2301      	movs	r3, #1
 800b964:	fbb2 f3f3 	udiv	r3, r2, r3
 800b968:	005a      	lsls	r2, r3, #1
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	085b      	lsrs	r3, r3, #1
 800b970:	441a      	add	r2, r3
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	fbb2 f3f3 	udiv	r3, r2, r3
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b97e:	e1f6      	b.n	800bd6e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b980:	f107 030c 	add.w	r3, r7, #12
 800b984:	4618      	mov	r0, r3
 800b986:	f7fd f8c7 	bl	8008b18 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b98a:	693a      	ldr	r2, [r7, #16]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b990:	2b00      	cmp	r3, #0
 800b992:	d044      	beq.n	800ba1e <UART_SetConfig+0x1806>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d03e      	beq.n	800ba1a <UART_SetConfig+0x1802>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a0:	2b02      	cmp	r3, #2
 800b9a2:	d038      	beq.n	800ba16 <UART_SetConfig+0x17fe>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a8:	2b03      	cmp	r3, #3
 800b9aa:	d032      	beq.n	800ba12 <UART_SetConfig+0x17fa>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b0:	2b04      	cmp	r3, #4
 800b9b2:	d02c      	beq.n	800ba0e <UART_SetConfig+0x17f6>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b8:	2b05      	cmp	r3, #5
 800b9ba:	d026      	beq.n	800ba0a <UART_SetConfig+0x17f2>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c0:	2b06      	cmp	r3, #6
 800b9c2:	d020      	beq.n	800ba06 <UART_SetConfig+0x17ee>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c8:	2b07      	cmp	r3, #7
 800b9ca:	d01a      	beq.n	800ba02 <UART_SetConfig+0x17ea>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d0:	2b08      	cmp	r3, #8
 800b9d2:	d014      	beq.n	800b9fe <UART_SetConfig+0x17e6>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d8:	2b09      	cmp	r3, #9
 800b9da:	d00e      	beq.n	800b9fa <UART_SetConfig+0x17e2>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e0:	2b0a      	cmp	r3, #10
 800b9e2:	d008      	beq.n	800b9f6 <UART_SetConfig+0x17de>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e8:	2b0b      	cmp	r3, #11
 800b9ea:	d102      	bne.n	800b9f2 <UART_SetConfig+0x17da>
 800b9ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9f0:	e016      	b.n	800ba20 <UART_SetConfig+0x1808>
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e014      	b.n	800ba20 <UART_SetConfig+0x1808>
 800b9f6:	2380      	movs	r3, #128	; 0x80
 800b9f8:	e012      	b.n	800ba20 <UART_SetConfig+0x1808>
 800b9fa:	2340      	movs	r3, #64	; 0x40
 800b9fc:	e010      	b.n	800ba20 <UART_SetConfig+0x1808>
 800b9fe:	2320      	movs	r3, #32
 800ba00:	e00e      	b.n	800ba20 <UART_SetConfig+0x1808>
 800ba02:	2310      	movs	r3, #16
 800ba04:	e00c      	b.n	800ba20 <UART_SetConfig+0x1808>
 800ba06:	230c      	movs	r3, #12
 800ba08:	e00a      	b.n	800ba20 <UART_SetConfig+0x1808>
 800ba0a:	230a      	movs	r3, #10
 800ba0c:	e008      	b.n	800ba20 <UART_SetConfig+0x1808>
 800ba0e:	2308      	movs	r3, #8
 800ba10:	e006      	b.n	800ba20 <UART_SetConfig+0x1808>
 800ba12:	2306      	movs	r3, #6
 800ba14:	e004      	b.n	800ba20 <UART_SetConfig+0x1808>
 800ba16:	2304      	movs	r3, #4
 800ba18:	e002      	b.n	800ba20 <UART_SetConfig+0x1808>
 800ba1a:	2302      	movs	r3, #2
 800ba1c:	e000      	b.n	800ba20 <UART_SetConfig+0x1808>
 800ba1e:	2301      	movs	r3, #1
 800ba20:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba24:	005a      	lsls	r2, r3, #1
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	085b      	lsrs	r3, r3, #1
 800ba2c:	441a      	add	r2, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba3a:	e198      	b.n	800bd6e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba3c:	4b87      	ldr	r3, [pc, #540]	; (800bc5c <UART_SetConfig+0x1a44>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f003 0320 	and.w	r3, r3, #32
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d05e      	beq.n	800bb06 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba48:	4b84      	ldr	r3, [pc, #528]	; (800bc5c <UART_SetConfig+0x1a44>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	08db      	lsrs	r3, r3, #3
 800ba4e:	f003 0303 	and.w	r3, r3, #3
 800ba52:	4a83      	ldr	r2, [pc, #524]	; (800bc60 <UART_SetConfig+0x1a48>)
 800ba54:	40da      	lsrs	r2, r3
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d044      	beq.n	800bae8 <UART_SetConfig+0x18d0>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d03e      	beq.n	800bae4 <UART_SetConfig+0x18cc>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6a:	2b02      	cmp	r3, #2
 800ba6c:	d038      	beq.n	800bae0 <UART_SetConfig+0x18c8>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba72:	2b03      	cmp	r3, #3
 800ba74:	d032      	beq.n	800badc <UART_SetConfig+0x18c4>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7a:	2b04      	cmp	r3, #4
 800ba7c:	d02c      	beq.n	800bad8 <UART_SetConfig+0x18c0>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba82:	2b05      	cmp	r3, #5
 800ba84:	d026      	beq.n	800bad4 <UART_SetConfig+0x18bc>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8a:	2b06      	cmp	r3, #6
 800ba8c:	d020      	beq.n	800bad0 <UART_SetConfig+0x18b8>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba92:	2b07      	cmp	r3, #7
 800ba94:	d01a      	beq.n	800bacc <UART_SetConfig+0x18b4>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9a:	2b08      	cmp	r3, #8
 800ba9c:	d014      	beq.n	800bac8 <UART_SetConfig+0x18b0>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa2:	2b09      	cmp	r3, #9
 800baa4:	d00e      	beq.n	800bac4 <UART_SetConfig+0x18ac>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baaa:	2b0a      	cmp	r3, #10
 800baac:	d008      	beq.n	800bac0 <UART_SetConfig+0x18a8>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab2:	2b0b      	cmp	r3, #11
 800bab4:	d102      	bne.n	800babc <UART_SetConfig+0x18a4>
 800bab6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800baba:	e016      	b.n	800baea <UART_SetConfig+0x18d2>
 800babc:	2301      	movs	r3, #1
 800babe:	e014      	b.n	800baea <UART_SetConfig+0x18d2>
 800bac0:	2380      	movs	r3, #128	; 0x80
 800bac2:	e012      	b.n	800baea <UART_SetConfig+0x18d2>
 800bac4:	2340      	movs	r3, #64	; 0x40
 800bac6:	e010      	b.n	800baea <UART_SetConfig+0x18d2>
 800bac8:	2320      	movs	r3, #32
 800baca:	e00e      	b.n	800baea <UART_SetConfig+0x18d2>
 800bacc:	2310      	movs	r3, #16
 800bace:	e00c      	b.n	800baea <UART_SetConfig+0x18d2>
 800bad0:	230c      	movs	r3, #12
 800bad2:	e00a      	b.n	800baea <UART_SetConfig+0x18d2>
 800bad4:	230a      	movs	r3, #10
 800bad6:	e008      	b.n	800baea <UART_SetConfig+0x18d2>
 800bad8:	2308      	movs	r3, #8
 800bada:	e006      	b.n	800baea <UART_SetConfig+0x18d2>
 800badc:	2306      	movs	r3, #6
 800bade:	e004      	b.n	800baea <UART_SetConfig+0x18d2>
 800bae0:	2304      	movs	r3, #4
 800bae2:	e002      	b.n	800baea <UART_SetConfig+0x18d2>
 800bae4:	2302      	movs	r3, #2
 800bae6:	e000      	b.n	800baea <UART_SetConfig+0x18d2>
 800bae8:	2301      	movs	r3, #1
 800baea:	fbb2 f3f3 	udiv	r3, r2, r3
 800baee:	005a      	lsls	r2, r3, #1
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	085b      	lsrs	r3, r3, #1
 800baf6:	441a      	add	r2, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800bb04:	e133      	b.n	800bd6e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d043      	beq.n	800bb96 <UART_SetConfig+0x197e>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d03d      	beq.n	800bb92 <UART_SetConfig+0x197a>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	d037      	beq.n	800bb8e <UART_SetConfig+0x1976>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb22:	2b03      	cmp	r3, #3
 800bb24:	d031      	beq.n	800bb8a <UART_SetConfig+0x1972>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb2a:	2b04      	cmp	r3, #4
 800bb2c:	d02b      	beq.n	800bb86 <UART_SetConfig+0x196e>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb32:	2b05      	cmp	r3, #5
 800bb34:	d025      	beq.n	800bb82 <UART_SetConfig+0x196a>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3a:	2b06      	cmp	r3, #6
 800bb3c:	d01f      	beq.n	800bb7e <UART_SetConfig+0x1966>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb42:	2b07      	cmp	r3, #7
 800bb44:	d019      	beq.n	800bb7a <UART_SetConfig+0x1962>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4a:	2b08      	cmp	r3, #8
 800bb4c:	d013      	beq.n	800bb76 <UART_SetConfig+0x195e>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb52:	2b09      	cmp	r3, #9
 800bb54:	d00d      	beq.n	800bb72 <UART_SetConfig+0x195a>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5a:	2b0a      	cmp	r3, #10
 800bb5c:	d007      	beq.n	800bb6e <UART_SetConfig+0x1956>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb62:	2b0b      	cmp	r3, #11
 800bb64:	d101      	bne.n	800bb6a <UART_SetConfig+0x1952>
 800bb66:	4b3f      	ldr	r3, [pc, #252]	; (800bc64 <UART_SetConfig+0x1a4c>)
 800bb68:	e016      	b.n	800bb98 <UART_SetConfig+0x1980>
 800bb6a:	4b3f      	ldr	r3, [pc, #252]	; (800bc68 <UART_SetConfig+0x1a50>)
 800bb6c:	e014      	b.n	800bb98 <UART_SetConfig+0x1980>
 800bb6e:	4b3f      	ldr	r3, [pc, #252]	; (800bc6c <UART_SetConfig+0x1a54>)
 800bb70:	e012      	b.n	800bb98 <UART_SetConfig+0x1980>
 800bb72:	4b3f      	ldr	r3, [pc, #252]	; (800bc70 <UART_SetConfig+0x1a58>)
 800bb74:	e010      	b.n	800bb98 <UART_SetConfig+0x1980>
 800bb76:	4b3f      	ldr	r3, [pc, #252]	; (800bc74 <UART_SetConfig+0x1a5c>)
 800bb78:	e00e      	b.n	800bb98 <UART_SetConfig+0x1980>
 800bb7a:	4b3f      	ldr	r3, [pc, #252]	; (800bc78 <UART_SetConfig+0x1a60>)
 800bb7c:	e00c      	b.n	800bb98 <UART_SetConfig+0x1980>
 800bb7e:	4b3f      	ldr	r3, [pc, #252]	; (800bc7c <UART_SetConfig+0x1a64>)
 800bb80:	e00a      	b.n	800bb98 <UART_SetConfig+0x1980>
 800bb82:	4b3f      	ldr	r3, [pc, #252]	; (800bc80 <UART_SetConfig+0x1a68>)
 800bb84:	e008      	b.n	800bb98 <UART_SetConfig+0x1980>
 800bb86:	4b3f      	ldr	r3, [pc, #252]	; (800bc84 <UART_SetConfig+0x1a6c>)
 800bb88:	e006      	b.n	800bb98 <UART_SetConfig+0x1980>
 800bb8a:	4b3f      	ldr	r3, [pc, #252]	; (800bc88 <UART_SetConfig+0x1a70>)
 800bb8c:	e004      	b.n	800bb98 <UART_SetConfig+0x1980>
 800bb8e:	4b3f      	ldr	r3, [pc, #252]	; (800bc8c <UART_SetConfig+0x1a74>)
 800bb90:	e002      	b.n	800bb98 <UART_SetConfig+0x1980>
 800bb92:	4b33      	ldr	r3, [pc, #204]	; (800bc60 <UART_SetConfig+0x1a48>)
 800bb94:	e000      	b.n	800bb98 <UART_SetConfig+0x1980>
 800bb96:	4b34      	ldr	r3, [pc, #208]	; (800bc68 <UART_SetConfig+0x1a50>)
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	6852      	ldr	r2, [r2, #4]
 800bb9c:	0852      	lsrs	r2, r2, #1
 800bb9e:	441a      	add	r2, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bbac:	e0df      	b.n	800bd6e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d045      	beq.n	800bc42 <UART_SetConfig+0x1a2a>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d03f      	beq.n	800bc3e <UART_SetConfig+0x1a26>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc2:	2b02      	cmp	r3, #2
 800bbc4:	d039      	beq.n	800bc3a <UART_SetConfig+0x1a22>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbca:	2b03      	cmp	r3, #3
 800bbcc:	d033      	beq.n	800bc36 <UART_SetConfig+0x1a1e>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd2:	2b04      	cmp	r3, #4
 800bbd4:	d02d      	beq.n	800bc32 <UART_SetConfig+0x1a1a>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbda:	2b05      	cmp	r3, #5
 800bbdc:	d027      	beq.n	800bc2e <UART_SetConfig+0x1a16>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe2:	2b06      	cmp	r3, #6
 800bbe4:	d021      	beq.n	800bc2a <UART_SetConfig+0x1a12>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbea:	2b07      	cmp	r3, #7
 800bbec:	d01b      	beq.n	800bc26 <UART_SetConfig+0x1a0e>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf2:	2b08      	cmp	r3, #8
 800bbf4:	d015      	beq.n	800bc22 <UART_SetConfig+0x1a0a>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfa:	2b09      	cmp	r3, #9
 800bbfc:	d00f      	beq.n	800bc1e <UART_SetConfig+0x1a06>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc02:	2b0a      	cmp	r3, #10
 800bc04:	d008      	beq.n	800bc18 <UART_SetConfig+0x1a00>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0a:	2b0b      	cmp	r3, #11
 800bc0c:	d102      	bne.n	800bc14 <UART_SetConfig+0x19fc>
 800bc0e:	f647 2312 	movw	r3, #31250	; 0x7a12
 800bc12:	e017      	b.n	800bc44 <UART_SetConfig+0x1a2c>
 800bc14:	4b18      	ldr	r3, [pc, #96]	; (800bc78 <UART_SetConfig+0x1a60>)
 800bc16:	e015      	b.n	800bc44 <UART_SetConfig+0x1a2c>
 800bc18:	f24f 4324 	movw	r3, #62500	; 0xf424
 800bc1c:	e012      	b.n	800bc44 <UART_SetConfig+0x1a2c>
 800bc1e:	4b1c      	ldr	r3, [pc, #112]	; (800bc90 <UART_SetConfig+0x1a78>)
 800bc20:	e010      	b.n	800bc44 <UART_SetConfig+0x1a2c>
 800bc22:	4b1c      	ldr	r3, [pc, #112]	; (800bc94 <UART_SetConfig+0x1a7c>)
 800bc24:	e00e      	b.n	800bc44 <UART_SetConfig+0x1a2c>
 800bc26:	4b0f      	ldr	r3, [pc, #60]	; (800bc64 <UART_SetConfig+0x1a4c>)
 800bc28:	e00c      	b.n	800bc44 <UART_SetConfig+0x1a2c>
 800bc2a:	4b1b      	ldr	r3, [pc, #108]	; (800bc98 <UART_SetConfig+0x1a80>)
 800bc2c:	e00a      	b.n	800bc44 <UART_SetConfig+0x1a2c>
 800bc2e:	4b1b      	ldr	r3, [pc, #108]	; (800bc9c <UART_SetConfig+0x1a84>)
 800bc30:	e008      	b.n	800bc44 <UART_SetConfig+0x1a2c>
 800bc32:	4b0e      	ldr	r3, [pc, #56]	; (800bc6c <UART_SetConfig+0x1a54>)
 800bc34:	e006      	b.n	800bc44 <UART_SetConfig+0x1a2c>
 800bc36:	4b1a      	ldr	r3, [pc, #104]	; (800bca0 <UART_SetConfig+0x1a88>)
 800bc38:	e004      	b.n	800bc44 <UART_SetConfig+0x1a2c>
 800bc3a:	4b0d      	ldr	r3, [pc, #52]	; (800bc70 <UART_SetConfig+0x1a58>)
 800bc3c:	e002      	b.n	800bc44 <UART_SetConfig+0x1a2c>
 800bc3e:	4b0d      	ldr	r3, [pc, #52]	; (800bc74 <UART_SetConfig+0x1a5c>)
 800bc40:	e000      	b.n	800bc44 <UART_SetConfig+0x1a2c>
 800bc42:	4b0d      	ldr	r3, [pc, #52]	; (800bc78 <UART_SetConfig+0x1a60>)
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	6852      	ldr	r2, [r2, #4]
 800bc48:	0852      	lsrs	r2, r2, #1
 800bc4a:	441a      	add	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc58:	e089      	b.n	800bd6e <UART_SetConfig+0x1b56>
 800bc5a:	bf00      	nop
 800bc5c:	58024400 	.word	0x58024400
 800bc60:	03d09000 	.word	0x03d09000
 800bc64:	0007a120 	.word	0x0007a120
 800bc68:	07a12000 	.word	0x07a12000
 800bc6c:	000f4240 	.word	0x000f4240
 800bc70:	001e8480 	.word	0x001e8480
 800bc74:	003d0900 	.word	0x003d0900
 800bc78:	007a1200 	.word	0x007a1200
 800bc7c:	00a2c2aa 	.word	0x00a2c2aa
 800bc80:	00c35000 	.word	0x00c35000
 800bc84:	00f42400 	.word	0x00f42400
 800bc88:	01458554 	.word	0x01458554
 800bc8c:	01e84800 	.word	0x01e84800
 800bc90:	0001e848 	.word	0x0001e848
 800bc94:	0003d090 	.word	0x0003d090
 800bc98:	000a2c2a 	.word	0x000a2c2a
 800bc9c:	000c3500 	.word	0x000c3500
 800bca0:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d04f      	beq.n	800bd4c <UART_SetConfig+0x1b34>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d048      	beq.n	800bd46 <UART_SetConfig+0x1b2e>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb8:	2b02      	cmp	r3, #2
 800bcba:	d041      	beq.n	800bd40 <UART_SetConfig+0x1b28>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc0:	2b03      	cmp	r3, #3
 800bcc2:	d03a      	beq.n	800bd3a <UART_SetConfig+0x1b22>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc8:	2b04      	cmp	r3, #4
 800bcca:	d033      	beq.n	800bd34 <UART_SetConfig+0x1b1c>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd0:	2b05      	cmp	r3, #5
 800bcd2:	d02c      	beq.n	800bd2e <UART_SetConfig+0x1b16>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd8:	2b06      	cmp	r3, #6
 800bcda:	d025      	beq.n	800bd28 <UART_SetConfig+0x1b10>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce0:	2b07      	cmp	r3, #7
 800bce2:	d01e      	beq.n	800bd22 <UART_SetConfig+0x1b0a>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce8:	2b08      	cmp	r3, #8
 800bcea:	d017      	beq.n	800bd1c <UART_SetConfig+0x1b04>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf0:	2b09      	cmp	r3, #9
 800bcf2:	d010      	beq.n	800bd16 <UART_SetConfig+0x1afe>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf8:	2b0a      	cmp	r3, #10
 800bcfa:	d009      	beq.n	800bd10 <UART_SetConfig+0x1af8>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd00:	2b0b      	cmp	r3, #11
 800bd02:	d102      	bne.n	800bd0a <UART_SetConfig+0x1af2>
 800bd04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd08:	e022      	b.n	800bd50 <UART_SetConfig+0x1b38>
 800bd0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bd0e:	e01f      	b.n	800bd50 <UART_SetConfig+0x1b38>
 800bd10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd14:	e01c      	b.n	800bd50 <UART_SetConfig+0x1b38>
 800bd16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd1a:	e019      	b.n	800bd50 <UART_SetConfig+0x1b38>
 800bd1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bd20:	e016      	b.n	800bd50 <UART_SetConfig+0x1b38>
 800bd22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd26:	e013      	b.n	800bd50 <UART_SetConfig+0x1b38>
 800bd28:	f241 5354 	movw	r3, #5460	; 0x1554
 800bd2c:	e010      	b.n	800bd50 <UART_SetConfig+0x1b38>
 800bd2e:	f641 1398 	movw	r3, #6552	; 0x1998
 800bd32:	e00d      	b.n	800bd50 <UART_SetConfig+0x1b38>
 800bd34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd38:	e00a      	b.n	800bd50 <UART_SetConfig+0x1b38>
 800bd3a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800bd3e:	e007      	b.n	800bd50 <UART_SetConfig+0x1b38>
 800bd40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bd44:	e004      	b.n	800bd50 <UART_SetConfig+0x1b38>
 800bd46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd4a:	e001      	b.n	800bd50 <UART_SetConfig+0x1b38>
 800bd4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	6852      	ldr	r2, [r2, #4]
 800bd54:	0852      	lsrs	r2, r2, #1
 800bd56:	441a      	add	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd64:	e003      	b.n	800bd6e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800bd66:	2301      	movs	r3, #1
 800bd68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800bd6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd70:	2b0f      	cmp	r3, #15
 800bd72:	d916      	bls.n	800bda2 <UART_SetConfig+0x1b8a>
 800bd74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd7a:	d212      	bcs.n	800bda2 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	f023 030f 	bic.w	r3, r3, #15
 800bd84:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd88:	085b      	lsrs	r3, r3, #1
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	f003 0307 	and.w	r3, r3, #7
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bd94:	4313      	orrs	r3, r2
 800bd96:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bd9e:	60da      	str	r2, [r3, #12]
 800bda0:	e3a3      	b.n	800c4ea <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bda8:	e39f      	b.n	800c4ea <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800bdaa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bdae:	2b40      	cmp	r3, #64	; 0x40
 800bdb0:	f200 8388 	bhi.w	800c4c4 <UART_SetConfig+0x22ac>
 800bdb4:	a201      	add	r2, pc, #4	; (adr r2, 800bdbc <UART_SetConfig+0x1ba4>)
 800bdb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdba:	bf00      	nop
 800bdbc:	0800bec1 	.word	0x0800bec1
 800bdc0:	0800bf77 	.word	0x0800bf77
 800bdc4:	0800c4c5 	.word	0x0800c4c5
 800bdc8:	0800c4c5 	.word	0x0800c4c5
 800bdcc:	0800c02d 	.word	0x0800c02d
 800bdd0:	0800c4c5 	.word	0x0800c4c5
 800bdd4:	0800c4c5 	.word	0x0800c4c5
 800bdd8:	0800c4c5 	.word	0x0800c4c5
 800bddc:	0800c0e7 	.word	0x0800c0e7
 800bde0:	0800c4c5 	.word	0x0800c4c5
 800bde4:	0800c4c5 	.word	0x0800c4c5
 800bde8:	0800c4c5 	.word	0x0800c4c5
 800bdec:	0800c4c5 	.word	0x0800c4c5
 800bdf0:	0800c4c5 	.word	0x0800c4c5
 800bdf4:	0800c4c5 	.word	0x0800c4c5
 800bdf8:	0800c4c5 	.word	0x0800c4c5
 800bdfc:	0800c1a1 	.word	0x0800c1a1
 800be00:	0800c4c5 	.word	0x0800c4c5
 800be04:	0800c4c5 	.word	0x0800c4c5
 800be08:	0800c4c5 	.word	0x0800c4c5
 800be0c:	0800c4c5 	.word	0x0800c4c5
 800be10:	0800c4c5 	.word	0x0800c4c5
 800be14:	0800c4c5 	.word	0x0800c4c5
 800be18:	0800c4c5 	.word	0x0800c4c5
 800be1c:	0800c4c5 	.word	0x0800c4c5
 800be20:	0800c4c5 	.word	0x0800c4c5
 800be24:	0800c4c5 	.word	0x0800c4c5
 800be28:	0800c4c5 	.word	0x0800c4c5
 800be2c:	0800c4c5 	.word	0x0800c4c5
 800be30:	0800c4c5 	.word	0x0800c4c5
 800be34:	0800c4c5 	.word	0x0800c4c5
 800be38:	0800c4c5 	.word	0x0800c4c5
 800be3c:	0800c311 	.word	0x0800c311
 800be40:	0800c4c5 	.word	0x0800c4c5
 800be44:	0800c4c5 	.word	0x0800c4c5
 800be48:	0800c4c5 	.word	0x0800c4c5
 800be4c:	0800c4c5 	.word	0x0800c4c5
 800be50:	0800c4c5 	.word	0x0800c4c5
 800be54:	0800c4c5 	.word	0x0800c4c5
 800be58:	0800c4c5 	.word	0x0800c4c5
 800be5c:	0800c4c5 	.word	0x0800c4c5
 800be60:	0800c4c5 	.word	0x0800c4c5
 800be64:	0800c4c5 	.word	0x0800c4c5
 800be68:	0800c4c5 	.word	0x0800c4c5
 800be6c:	0800c4c5 	.word	0x0800c4c5
 800be70:	0800c4c5 	.word	0x0800c4c5
 800be74:	0800c4c5 	.word	0x0800c4c5
 800be78:	0800c4c5 	.word	0x0800c4c5
 800be7c:	0800c4c5 	.word	0x0800c4c5
 800be80:	0800c4c5 	.word	0x0800c4c5
 800be84:	0800c4c5 	.word	0x0800c4c5
 800be88:	0800c4c5 	.word	0x0800c4c5
 800be8c:	0800c4c5 	.word	0x0800c4c5
 800be90:	0800c4c5 	.word	0x0800c4c5
 800be94:	0800c4c5 	.word	0x0800c4c5
 800be98:	0800c4c5 	.word	0x0800c4c5
 800be9c:	0800c4c5 	.word	0x0800c4c5
 800bea0:	0800c4c5 	.word	0x0800c4c5
 800bea4:	0800c4c5 	.word	0x0800c4c5
 800bea8:	0800c4c5 	.word	0x0800c4c5
 800beac:	0800c4c5 	.word	0x0800c4c5
 800beb0:	0800c4c5 	.word	0x0800c4c5
 800beb4:	0800c4c5 	.word	0x0800c4c5
 800beb8:	0800c4c5 	.word	0x0800c4c5
 800bebc:	0800c405 	.word	0x0800c405
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bec0:	f7fb fb46 	bl	8007550 <HAL_RCC_GetPCLK1Freq>
 800bec4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beca:	2b00      	cmp	r3, #0
 800becc:	d044      	beq.n	800bf58 <UART_SetConfig+0x1d40>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d03e      	beq.n	800bf54 <UART_SetConfig+0x1d3c>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beda:	2b02      	cmp	r3, #2
 800bedc:	d038      	beq.n	800bf50 <UART_SetConfig+0x1d38>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee2:	2b03      	cmp	r3, #3
 800bee4:	d032      	beq.n	800bf4c <UART_SetConfig+0x1d34>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beea:	2b04      	cmp	r3, #4
 800beec:	d02c      	beq.n	800bf48 <UART_SetConfig+0x1d30>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef2:	2b05      	cmp	r3, #5
 800bef4:	d026      	beq.n	800bf44 <UART_SetConfig+0x1d2c>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befa:	2b06      	cmp	r3, #6
 800befc:	d020      	beq.n	800bf40 <UART_SetConfig+0x1d28>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf02:	2b07      	cmp	r3, #7
 800bf04:	d01a      	beq.n	800bf3c <UART_SetConfig+0x1d24>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0a:	2b08      	cmp	r3, #8
 800bf0c:	d014      	beq.n	800bf38 <UART_SetConfig+0x1d20>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf12:	2b09      	cmp	r3, #9
 800bf14:	d00e      	beq.n	800bf34 <UART_SetConfig+0x1d1c>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf1a:	2b0a      	cmp	r3, #10
 800bf1c:	d008      	beq.n	800bf30 <UART_SetConfig+0x1d18>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf22:	2b0b      	cmp	r3, #11
 800bf24:	d102      	bne.n	800bf2c <UART_SetConfig+0x1d14>
 800bf26:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf2a:	e016      	b.n	800bf5a <UART_SetConfig+0x1d42>
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e014      	b.n	800bf5a <UART_SetConfig+0x1d42>
 800bf30:	2380      	movs	r3, #128	; 0x80
 800bf32:	e012      	b.n	800bf5a <UART_SetConfig+0x1d42>
 800bf34:	2340      	movs	r3, #64	; 0x40
 800bf36:	e010      	b.n	800bf5a <UART_SetConfig+0x1d42>
 800bf38:	2320      	movs	r3, #32
 800bf3a:	e00e      	b.n	800bf5a <UART_SetConfig+0x1d42>
 800bf3c:	2310      	movs	r3, #16
 800bf3e:	e00c      	b.n	800bf5a <UART_SetConfig+0x1d42>
 800bf40:	230c      	movs	r3, #12
 800bf42:	e00a      	b.n	800bf5a <UART_SetConfig+0x1d42>
 800bf44:	230a      	movs	r3, #10
 800bf46:	e008      	b.n	800bf5a <UART_SetConfig+0x1d42>
 800bf48:	2308      	movs	r3, #8
 800bf4a:	e006      	b.n	800bf5a <UART_SetConfig+0x1d42>
 800bf4c:	2306      	movs	r3, #6
 800bf4e:	e004      	b.n	800bf5a <UART_SetConfig+0x1d42>
 800bf50:	2304      	movs	r3, #4
 800bf52:	e002      	b.n	800bf5a <UART_SetConfig+0x1d42>
 800bf54:	2302      	movs	r3, #2
 800bf56:	e000      	b.n	800bf5a <UART_SetConfig+0x1d42>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf5c:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	085b      	lsrs	r3, r3, #1
 800bf66:	441a      	add	r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bf74:	e2aa      	b.n	800c4cc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf76:	f7fb fb01 	bl	800757c <HAL_RCC_GetPCLK2Freq>
 800bf7a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d044      	beq.n	800c00e <UART_SetConfig+0x1df6>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d03e      	beq.n	800c00a <UART_SetConfig+0x1df2>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf90:	2b02      	cmp	r3, #2
 800bf92:	d038      	beq.n	800c006 <UART_SetConfig+0x1dee>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf98:	2b03      	cmp	r3, #3
 800bf9a:	d032      	beq.n	800c002 <UART_SetConfig+0x1dea>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa0:	2b04      	cmp	r3, #4
 800bfa2:	d02c      	beq.n	800bffe <UART_SetConfig+0x1de6>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa8:	2b05      	cmp	r3, #5
 800bfaa:	d026      	beq.n	800bffa <UART_SetConfig+0x1de2>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb0:	2b06      	cmp	r3, #6
 800bfb2:	d020      	beq.n	800bff6 <UART_SetConfig+0x1dde>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb8:	2b07      	cmp	r3, #7
 800bfba:	d01a      	beq.n	800bff2 <UART_SetConfig+0x1dda>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc0:	2b08      	cmp	r3, #8
 800bfc2:	d014      	beq.n	800bfee <UART_SetConfig+0x1dd6>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc8:	2b09      	cmp	r3, #9
 800bfca:	d00e      	beq.n	800bfea <UART_SetConfig+0x1dd2>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd0:	2b0a      	cmp	r3, #10
 800bfd2:	d008      	beq.n	800bfe6 <UART_SetConfig+0x1dce>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd8:	2b0b      	cmp	r3, #11
 800bfda:	d102      	bne.n	800bfe2 <UART_SetConfig+0x1dca>
 800bfdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfe0:	e016      	b.n	800c010 <UART_SetConfig+0x1df8>
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e014      	b.n	800c010 <UART_SetConfig+0x1df8>
 800bfe6:	2380      	movs	r3, #128	; 0x80
 800bfe8:	e012      	b.n	800c010 <UART_SetConfig+0x1df8>
 800bfea:	2340      	movs	r3, #64	; 0x40
 800bfec:	e010      	b.n	800c010 <UART_SetConfig+0x1df8>
 800bfee:	2320      	movs	r3, #32
 800bff0:	e00e      	b.n	800c010 <UART_SetConfig+0x1df8>
 800bff2:	2310      	movs	r3, #16
 800bff4:	e00c      	b.n	800c010 <UART_SetConfig+0x1df8>
 800bff6:	230c      	movs	r3, #12
 800bff8:	e00a      	b.n	800c010 <UART_SetConfig+0x1df8>
 800bffa:	230a      	movs	r3, #10
 800bffc:	e008      	b.n	800c010 <UART_SetConfig+0x1df8>
 800bffe:	2308      	movs	r3, #8
 800c000:	e006      	b.n	800c010 <UART_SetConfig+0x1df8>
 800c002:	2306      	movs	r3, #6
 800c004:	e004      	b.n	800c010 <UART_SetConfig+0x1df8>
 800c006:	2304      	movs	r3, #4
 800c008:	e002      	b.n	800c010 <UART_SetConfig+0x1df8>
 800c00a:	2302      	movs	r3, #2
 800c00c:	e000      	b.n	800c010 <UART_SetConfig+0x1df8>
 800c00e:	2301      	movs	r3, #1
 800c010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c012:	fbb2 f2f3 	udiv	r2, r2, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	085b      	lsrs	r3, r3, #1
 800c01c:	441a      	add	r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	fbb2 f3f3 	udiv	r3, r2, r3
 800c026:	b29b      	uxth	r3, r3
 800c028:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c02a:	e24f      	b.n	800c4cc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c02c:	f107 0318 	add.w	r3, r7, #24
 800c030:	4618      	mov	r0, r3
 800c032:	f7fc fc25 	bl	8008880 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c036:	69fa      	ldr	r2, [r7, #28]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d044      	beq.n	800c0ca <UART_SetConfig+0x1eb2>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c044:	2b01      	cmp	r3, #1
 800c046:	d03e      	beq.n	800c0c6 <UART_SetConfig+0x1eae>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d038      	beq.n	800c0c2 <UART_SetConfig+0x1eaa>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c054:	2b03      	cmp	r3, #3
 800c056:	d032      	beq.n	800c0be <UART_SetConfig+0x1ea6>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05c:	2b04      	cmp	r3, #4
 800c05e:	d02c      	beq.n	800c0ba <UART_SetConfig+0x1ea2>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c064:	2b05      	cmp	r3, #5
 800c066:	d026      	beq.n	800c0b6 <UART_SetConfig+0x1e9e>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06c:	2b06      	cmp	r3, #6
 800c06e:	d020      	beq.n	800c0b2 <UART_SetConfig+0x1e9a>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c074:	2b07      	cmp	r3, #7
 800c076:	d01a      	beq.n	800c0ae <UART_SetConfig+0x1e96>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07c:	2b08      	cmp	r3, #8
 800c07e:	d014      	beq.n	800c0aa <UART_SetConfig+0x1e92>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c084:	2b09      	cmp	r3, #9
 800c086:	d00e      	beq.n	800c0a6 <UART_SetConfig+0x1e8e>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08c:	2b0a      	cmp	r3, #10
 800c08e:	d008      	beq.n	800c0a2 <UART_SetConfig+0x1e8a>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c094:	2b0b      	cmp	r3, #11
 800c096:	d102      	bne.n	800c09e <UART_SetConfig+0x1e86>
 800c098:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c09c:	e016      	b.n	800c0cc <UART_SetConfig+0x1eb4>
 800c09e:	2301      	movs	r3, #1
 800c0a0:	e014      	b.n	800c0cc <UART_SetConfig+0x1eb4>
 800c0a2:	2380      	movs	r3, #128	; 0x80
 800c0a4:	e012      	b.n	800c0cc <UART_SetConfig+0x1eb4>
 800c0a6:	2340      	movs	r3, #64	; 0x40
 800c0a8:	e010      	b.n	800c0cc <UART_SetConfig+0x1eb4>
 800c0aa:	2320      	movs	r3, #32
 800c0ac:	e00e      	b.n	800c0cc <UART_SetConfig+0x1eb4>
 800c0ae:	2310      	movs	r3, #16
 800c0b0:	e00c      	b.n	800c0cc <UART_SetConfig+0x1eb4>
 800c0b2:	230c      	movs	r3, #12
 800c0b4:	e00a      	b.n	800c0cc <UART_SetConfig+0x1eb4>
 800c0b6:	230a      	movs	r3, #10
 800c0b8:	e008      	b.n	800c0cc <UART_SetConfig+0x1eb4>
 800c0ba:	2308      	movs	r3, #8
 800c0bc:	e006      	b.n	800c0cc <UART_SetConfig+0x1eb4>
 800c0be:	2306      	movs	r3, #6
 800c0c0:	e004      	b.n	800c0cc <UART_SetConfig+0x1eb4>
 800c0c2:	2304      	movs	r3, #4
 800c0c4:	e002      	b.n	800c0cc <UART_SetConfig+0x1eb4>
 800c0c6:	2302      	movs	r3, #2
 800c0c8:	e000      	b.n	800c0cc <UART_SetConfig+0x1eb4>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	fbb2 f2f3 	udiv	r2, r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	085b      	lsrs	r3, r3, #1
 800c0d6:	441a      	add	r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0e4:	e1f2      	b.n	800c4cc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0e6:	f107 030c 	add.w	r3, r7, #12
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7fc fd14 	bl	8008b18 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0f0:	693a      	ldr	r2, [r7, #16]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d044      	beq.n	800c184 <UART_SetConfig+0x1f6c>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d03e      	beq.n	800c180 <UART_SetConfig+0x1f68>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c106:	2b02      	cmp	r3, #2
 800c108:	d038      	beq.n	800c17c <UART_SetConfig+0x1f64>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10e:	2b03      	cmp	r3, #3
 800c110:	d032      	beq.n	800c178 <UART_SetConfig+0x1f60>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c116:	2b04      	cmp	r3, #4
 800c118:	d02c      	beq.n	800c174 <UART_SetConfig+0x1f5c>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11e:	2b05      	cmp	r3, #5
 800c120:	d026      	beq.n	800c170 <UART_SetConfig+0x1f58>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c126:	2b06      	cmp	r3, #6
 800c128:	d020      	beq.n	800c16c <UART_SetConfig+0x1f54>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12e:	2b07      	cmp	r3, #7
 800c130:	d01a      	beq.n	800c168 <UART_SetConfig+0x1f50>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c136:	2b08      	cmp	r3, #8
 800c138:	d014      	beq.n	800c164 <UART_SetConfig+0x1f4c>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13e:	2b09      	cmp	r3, #9
 800c140:	d00e      	beq.n	800c160 <UART_SetConfig+0x1f48>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c146:	2b0a      	cmp	r3, #10
 800c148:	d008      	beq.n	800c15c <UART_SetConfig+0x1f44>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c14e:	2b0b      	cmp	r3, #11
 800c150:	d102      	bne.n	800c158 <UART_SetConfig+0x1f40>
 800c152:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c156:	e016      	b.n	800c186 <UART_SetConfig+0x1f6e>
 800c158:	2301      	movs	r3, #1
 800c15a:	e014      	b.n	800c186 <UART_SetConfig+0x1f6e>
 800c15c:	2380      	movs	r3, #128	; 0x80
 800c15e:	e012      	b.n	800c186 <UART_SetConfig+0x1f6e>
 800c160:	2340      	movs	r3, #64	; 0x40
 800c162:	e010      	b.n	800c186 <UART_SetConfig+0x1f6e>
 800c164:	2320      	movs	r3, #32
 800c166:	e00e      	b.n	800c186 <UART_SetConfig+0x1f6e>
 800c168:	2310      	movs	r3, #16
 800c16a:	e00c      	b.n	800c186 <UART_SetConfig+0x1f6e>
 800c16c:	230c      	movs	r3, #12
 800c16e:	e00a      	b.n	800c186 <UART_SetConfig+0x1f6e>
 800c170:	230a      	movs	r3, #10
 800c172:	e008      	b.n	800c186 <UART_SetConfig+0x1f6e>
 800c174:	2308      	movs	r3, #8
 800c176:	e006      	b.n	800c186 <UART_SetConfig+0x1f6e>
 800c178:	2306      	movs	r3, #6
 800c17a:	e004      	b.n	800c186 <UART_SetConfig+0x1f6e>
 800c17c:	2304      	movs	r3, #4
 800c17e:	e002      	b.n	800c186 <UART_SetConfig+0x1f6e>
 800c180:	2302      	movs	r3, #2
 800c182:	e000      	b.n	800c186 <UART_SetConfig+0x1f6e>
 800c184:	2301      	movs	r3, #1
 800c186:	fbb2 f2f3 	udiv	r2, r2, r3
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	085b      	lsrs	r3, r3, #1
 800c190:	441a      	add	r2, r3
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	fbb2 f3f3 	udiv	r3, r2, r3
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c19e:	e195      	b.n	800c4cc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1a0:	4b87      	ldr	r3, [pc, #540]	; (800c3c0 <UART_SetConfig+0x21a8>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f003 0320 	and.w	r3, r3, #32
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d05d      	beq.n	800c268 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1ac:	4b84      	ldr	r3, [pc, #528]	; (800c3c0 <UART_SetConfig+0x21a8>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	08db      	lsrs	r3, r3, #3
 800c1b2:	f003 0303 	and.w	r3, r3, #3
 800c1b6:	4a83      	ldr	r2, [pc, #524]	; (800c3c4 <UART_SetConfig+0x21ac>)
 800c1b8:	40da      	lsrs	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d044      	beq.n	800c24c <UART_SetConfig+0x2034>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d03e      	beq.n	800c248 <UART_SetConfig+0x2030>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ce:	2b02      	cmp	r3, #2
 800c1d0:	d038      	beq.n	800c244 <UART_SetConfig+0x202c>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d6:	2b03      	cmp	r3, #3
 800c1d8:	d032      	beq.n	800c240 <UART_SetConfig+0x2028>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1de:	2b04      	cmp	r3, #4
 800c1e0:	d02c      	beq.n	800c23c <UART_SetConfig+0x2024>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e6:	2b05      	cmp	r3, #5
 800c1e8:	d026      	beq.n	800c238 <UART_SetConfig+0x2020>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ee:	2b06      	cmp	r3, #6
 800c1f0:	d020      	beq.n	800c234 <UART_SetConfig+0x201c>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f6:	2b07      	cmp	r3, #7
 800c1f8:	d01a      	beq.n	800c230 <UART_SetConfig+0x2018>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1fe:	2b08      	cmp	r3, #8
 800c200:	d014      	beq.n	800c22c <UART_SetConfig+0x2014>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c206:	2b09      	cmp	r3, #9
 800c208:	d00e      	beq.n	800c228 <UART_SetConfig+0x2010>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c20e:	2b0a      	cmp	r3, #10
 800c210:	d008      	beq.n	800c224 <UART_SetConfig+0x200c>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c216:	2b0b      	cmp	r3, #11
 800c218:	d102      	bne.n	800c220 <UART_SetConfig+0x2008>
 800c21a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c21e:	e016      	b.n	800c24e <UART_SetConfig+0x2036>
 800c220:	2301      	movs	r3, #1
 800c222:	e014      	b.n	800c24e <UART_SetConfig+0x2036>
 800c224:	2380      	movs	r3, #128	; 0x80
 800c226:	e012      	b.n	800c24e <UART_SetConfig+0x2036>
 800c228:	2340      	movs	r3, #64	; 0x40
 800c22a:	e010      	b.n	800c24e <UART_SetConfig+0x2036>
 800c22c:	2320      	movs	r3, #32
 800c22e:	e00e      	b.n	800c24e <UART_SetConfig+0x2036>
 800c230:	2310      	movs	r3, #16
 800c232:	e00c      	b.n	800c24e <UART_SetConfig+0x2036>
 800c234:	230c      	movs	r3, #12
 800c236:	e00a      	b.n	800c24e <UART_SetConfig+0x2036>
 800c238:	230a      	movs	r3, #10
 800c23a:	e008      	b.n	800c24e <UART_SetConfig+0x2036>
 800c23c:	2308      	movs	r3, #8
 800c23e:	e006      	b.n	800c24e <UART_SetConfig+0x2036>
 800c240:	2306      	movs	r3, #6
 800c242:	e004      	b.n	800c24e <UART_SetConfig+0x2036>
 800c244:	2304      	movs	r3, #4
 800c246:	e002      	b.n	800c24e <UART_SetConfig+0x2036>
 800c248:	2302      	movs	r3, #2
 800c24a:	e000      	b.n	800c24e <UART_SetConfig+0x2036>
 800c24c:	2301      	movs	r3, #1
 800c24e:	fbb2 f2f3 	udiv	r2, r2, r3
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	085b      	lsrs	r3, r3, #1
 800c258:	441a      	add	r2, r3
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c262:	b29b      	uxth	r3, r3
 800c264:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800c266:	e131      	b.n	800c4cc <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d043      	beq.n	800c2f8 <UART_SetConfig+0x20e0>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c274:	2b01      	cmp	r3, #1
 800c276:	d03d      	beq.n	800c2f4 <UART_SetConfig+0x20dc>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c27c:	2b02      	cmp	r3, #2
 800c27e:	d037      	beq.n	800c2f0 <UART_SetConfig+0x20d8>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c284:	2b03      	cmp	r3, #3
 800c286:	d031      	beq.n	800c2ec <UART_SetConfig+0x20d4>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c28c:	2b04      	cmp	r3, #4
 800c28e:	d02b      	beq.n	800c2e8 <UART_SetConfig+0x20d0>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c294:	2b05      	cmp	r3, #5
 800c296:	d025      	beq.n	800c2e4 <UART_SetConfig+0x20cc>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c29c:	2b06      	cmp	r3, #6
 800c29e:	d01f      	beq.n	800c2e0 <UART_SetConfig+0x20c8>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a4:	2b07      	cmp	r3, #7
 800c2a6:	d019      	beq.n	800c2dc <UART_SetConfig+0x20c4>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ac:	2b08      	cmp	r3, #8
 800c2ae:	d013      	beq.n	800c2d8 <UART_SetConfig+0x20c0>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b4:	2b09      	cmp	r3, #9
 800c2b6:	d00d      	beq.n	800c2d4 <UART_SetConfig+0x20bc>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2bc:	2b0a      	cmp	r3, #10
 800c2be:	d007      	beq.n	800c2d0 <UART_SetConfig+0x20b8>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c4:	2b0b      	cmp	r3, #11
 800c2c6:	d101      	bne.n	800c2cc <UART_SetConfig+0x20b4>
 800c2c8:	4b3f      	ldr	r3, [pc, #252]	; (800c3c8 <UART_SetConfig+0x21b0>)
 800c2ca:	e016      	b.n	800c2fa <UART_SetConfig+0x20e2>
 800c2cc:	4b3d      	ldr	r3, [pc, #244]	; (800c3c4 <UART_SetConfig+0x21ac>)
 800c2ce:	e014      	b.n	800c2fa <UART_SetConfig+0x20e2>
 800c2d0:	4b3e      	ldr	r3, [pc, #248]	; (800c3cc <UART_SetConfig+0x21b4>)
 800c2d2:	e012      	b.n	800c2fa <UART_SetConfig+0x20e2>
 800c2d4:	4b3e      	ldr	r3, [pc, #248]	; (800c3d0 <UART_SetConfig+0x21b8>)
 800c2d6:	e010      	b.n	800c2fa <UART_SetConfig+0x20e2>
 800c2d8:	4b3e      	ldr	r3, [pc, #248]	; (800c3d4 <UART_SetConfig+0x21bc>)
 800c2da:	e00e      	b.n	800c2fa <UART_SetConfig+0x20e2>
 800c2dc:	4b3e      	ldr	r3, [pc, #248]	; (800c3d8 <UART_SetConfig+0x21c0>)
 800c2de:	e00c      	b.n	800c2fa <UART_SetConfig+0x20e2>
 800c2e0:	4b3e      	ldr	r3, [pc, #248]	; (800c3dc <UART_SetConfig+0x21c4>)
 800c2e2:	e00a      	b.n	800c2fa <UART_SetConfig+0x20e2>
 800c2e4:	4b3e      	ldr	r3, [pc, #248]	; (800c3e0 <UART_SetConfig+0x21c8>)
 800c2e6:	e008      	b.n	800c2fa <UART_SetConfig+0x20e2>
 800c2e8:	4b3e      	ldr	r3, [pc, #248]	; (800c3e4 <UART_SetConfig+0x21cc>)
 800c2ea:	e006      	b.n	800c2fa <UART_SetConfig+0x20e2>
 800c2ec:	4b3e      	ldr	r3, [pc, #248]	; (800c3e8 <UART_SetConfig+0x21d0>)
 800c2ee:	e004      	b.n	800c2fa <UART_SetConfig+0x20e2>
 800c2f0:	4b3e      	ldr	r3, [pc, #248]	; (800c3ec <UART_SetConfig+0x21d4>)
 800c2f2:	e002      	b.n	800c2fa <UART_SetConfig+0x20e2>
 800c2f4:	4b3e      	ldr	r3, [pc, #248]	; (800c3f0 <UART_SetConfig+0x21d8>)
 800c2f6:	e000      	b.n	800c2fa <UART_SetConfig+0x20e2>
 800c2f8:	4b32      	ldr	r3, [pc, #200]	; (800c3c4 <UART_SetConfig+0x21ac>)
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	6852      	ldr	r2, [r2, #4]
 800c2fe:	0852      	lsrs	r2, r2, #1
 800c300:	441a      	add	r2, r3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	fbb2 f3f3 	udiv	r3, r2, r3
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c30e:	e0dd      	b.n	800c4cc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c314:	2b00      	cmp	r3, #0
 800c316:	d046      	beq.n	800c3a6 <UART_SetConfig+0x218e>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d040      	beq.n	800c3a2 <UART_SetConfig+0x218a>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c324:	2b02      	cmp	r3, #2
 800c326:	d03a      	beq.n	800c39e <UART_SetConfig+0x2186>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c32c:	2b03      	cmp	r3, #3
 800c32e:	d034      	beq.n	800c39a <UART_SetConfig+0x2182>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c334:	2b04      	cmp	r3, #4
 800c336:	d02e      	beq.n	800c396 <UART_SetConfig+0x217e>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c33c:	2b05      	cmp	r3, #5
 800c33e:	d028      	beq.n	800c392 <UART_SetConfig+0x217a>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c344:	2b06      	cmp	r3, #6
 800c346:	d022      	beq.n	800c38e <UART_SetConfig+0x2176>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c34c:	2b07      	cmp	r3, #7
 800c34e:	d01c      	beq.n	800c38a <UART_SetConfig+0x2172>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c354:	2b08      	cmp	r3, #8
 800c356:	d016      	beq.n	800c386 <UART_SetConfig+0x216e>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c35c:	2b09      	cmp	r3, #9
 800c35e:	d00f      	beq.n	800c380 <UART_SetConfig+0x2168>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c364:	2b0a      	cmp	r3, #10
 800c366:	d008      	beq.n	800c37a <UART_SetConfig+0x2162>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c36c:	2b0b      	cmp	r3, #11
 800c36e:	d102      	bne.n	800c376 <UART_SetConfig+0x215e>
 800c370:	f643 5309 	movw	r3, #15625	; 0x3d09
 800c374:	e018      	b.n	800c3a8 <UART_SetConfig+0x2190>
 800c376:	4b18      	ldr	r3, [pc, #96]	; (800c3d8 <UART_SetConfig+0x21c0>)
 800c378:	e016      	b.n	800c3a8 <UART_SetConfig+0x2190>
 800c37a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800c37e:	e013      	b.n	800c3a8 <UART_SetConfig+0x2190>
 800c380:	f24f 4324 	movw	r3, #62500	; 0xf424
 800c384:	e010      	b.n	800c3a8 <UART_SetConfig+0x2190>
 800c386:	4b1b      	ldr	r3, [pc, #108]	; (800c3f4 <UART_SetConfig+0x21dc>)
 800c388:	e00e      	b.n	800c3a8 <UART_SetConfig+0x2190>
 800c38a:	4b0f      	ldr	r3, [pc, #60]	; (800c3c8 <UART_SetConfig+0x21b0>)
 800c38c:	e00c      	b.n	800c3a8 <UART_SetConfig+0x2190>
 800c38e:	4b1a      	ldr	r3, [pc, #104]	; (800c3f8 <UART_SetConfig+0x21e0>)
 800c390:	e00a      	b.n	800c3a8 <UART_SetConfig+0x2190>
 800c392:	4b1a      	ldr	r3, [pc, #104]	; (800c3fc <UART_SetConfig+0x21e4>)
 800c394:	e008      	b.n	800c3a8 <UART_SetConfig+0x2190>
 800c396:	4b0d      	ldr	r3, [pc, #52]	; (800c3cc <UART_SetConfig+0x21b4>)
 800c398:	e006      	b.n	800c3a8 <UART_SetConfig+0x2190>
 800c39a:	4b19      	ldr	r3, [pc, #100]	; (800c400 <UART_SetConfig+0x21e8>)
 800c39c:	e004      	b.n	800c3a8 <UART_SetConfig+0x2190>
 800c39e:	4b0c      	ldr	r3, [pc, #48]	; (800c3d0 <UART_SetConfig+0x21b8>)
 800c3a0:	e002      	b.n	800c3a8 <UART_SetConfig+0x2190>
 800c3a2:	4b0c      	ldr	r3, [pc, #48]	; (800c3d4 <UART_SetConfig+0x21bc>)
 800c3a4:	e000      	b.n	800c3a8 <UART_SetConfig+0x2190>
 800c3a6:	4b0c      	ldr	r3, [pc, #48]	; (800c3d8 <UART_SetConfig+0x21c0>)
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	6852      	ldr	r2, [r2, #4]
 800c3ac:	0852      	lsrs	r2, r2, #1
 800c3ae:	441a      	add	r2, r3
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c3bc:	e086      	b.n	800c4cc <UART_SetConfig+0x22b4>
 800c3be:	bf00      	nop
 800c3c0:	58024400 	.word	0x58024400
 800c3c4:	03d09000 	.word	0x03d09000
 800c3c8:	0003d090 	.word	0x0003d090
 800c3cc:	0007a120 	.word	0x0007a120
 800c3d0:	000f4240 	.word	0x000f4240
 800c3d4:	001e8480 	.word	0x001e8480
 800c3d8:	003d0900 	.word	0x003d0900
 800c3dc:	00516155 	.word	0x00516155
 800c3e0:	0061a800 	.word	0x0061a800
 800c3e4:	007a1200 	.word	0x007a1200
 800c3e8:	00a2c2aa 	.word	0x00a2c2aa
 800c3ec:	00f42400 	.word	0x00f42400
 800c3f0:	01e84800 	.word	0x01e84800
 800c3f4:	0001e848 	.word	0x0001e848
 800c3f8:	00051615 	.word	0x00051615
 800c3fc:	00061a80 	.word	0x00061a80
 800c400:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d04e      	beq.n	800c4aa <UART_SetConfig+0x2292>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c410:	2b01      	cmp	r3, #1
 800c412:	d047      	beq.n	800c4a4 <UART_SetConfig+0x228c>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c418:	2b02      	cmp	r3, #2
 800c41a:	d040      	beq.n	800c49e <UART_SetConfig+0x2286>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c420:	2b03      	cmp	r3, #3
 800c422:	d039      	beq.n	800c498 <UART_SetConfig+0x2280>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c428:	2b04      	cmp	r3, #4
 800c42a:	d032      	beq.n	800c492 <UART_SetConfig+0x227a>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c430:	2b05      	cmp	r3, #5
 800c432:	d02b      	beq.n	800c48c <UART_SetConfig+0x2274>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c438:	2b06      	cmp	r3, #6
 800c43a:	d024      	beq.n	800c486 <UART_SetConfig+0x226e>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c440:	2b07      	cmp	r3, #7
 800c442:	d01d      	beq.n	800c480 <UART_SetConfig+0x2268>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c448:	2b08      	cmp	r3, #8
 800c44a:	d016      	beq.n	800c47a <UART_SetConfig+0x2262>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c450:	2b09      	cmp	r3, #9
 800c452:	d00f      	beq.n	800c474 <UART_SetConfig+0x225c>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c458:	2b0a      	cmp	r3, #10
 800c45a:	d008      	beq.n	800c46e <UART_SetConfig+0x2256>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c460:	2b0b      	cmp	r3, #11
 800c462:	d101      	bne.n	800c468 <UART_SetConfig+0x2250>
 800c464:	2380      	movs	r3, #128	; 0x80
 800c466:	e022      	b.n	800c4ae <UART_SetConfig+0x2296>
 800c468:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c46c:	e01f      	b.n	800c4ae <UART_SetConfig+0x2296>
 800c46e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c472:	e01c      	b.n	800c4ae <UART_SetConfig+0x2296>
 800c474:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c478:	e019      	b.n	800c4ae <UART_SetConfig+0x2296>
 800c47a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c47e:	e016      	b.n	800c4ae <UART_SetConfig+0x2296>
 800c480:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c484:	e013      	b.n	800c4ae <UART_SetConfig+0x2296>
 800c486:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800c48a:	e010      	b.n	800c4ae <UART_SetConfig+0x2296>
 800c48c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800c490:	e00d      	b.n	800c4ae <UART_SetConfig+0x2296>
 800c492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c496:	e00a      	b.n	800c4ae <UART_SetConfig+0x2296>
 800c498:	f241 5355 	movw	r3, #5461	; 0x1555
 800c49c:	e007      	b.n	800c4ae <UART_SetConfig+0x2296>
 800c49e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c4a2:	e004      	b.n	800c4ae <UART_SetConfig+0x2296>
 800c4a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c4a8:	e001      	b.n	800c4ae <UART_SetConfig+0x2296>
 800c4aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	6852      	ldr	r2, [r2, #4]
 800c4b2:	0852      	lsrs	r2, r2, #1
 800c4b4:	441a      	add	r2, r3
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c4c2:	e003      	b.n	800c4cc <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800c4ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ce:	2b0f      	cmp	r3, #15
 800c4d0:	d908      	bls.n	800c4e4 <UART_SetConfig+0x22cc>
 800c4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4d8:	d204      	bcs.n	800c4e4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4e0:	60da      	str	r2, [r3, #12]
 800c4e2:	e002      	b.n	800c4ea <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2200      	movs	r2, #0
 800c504:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800c506:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3740      	adds	r7, #64	; 0x40
 800c50e:	46bd      	mov	sp, r7
 800c510:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800c514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c520:	f003 0301 	and.w	r3, r3, #1
 800c524:	2b00      	cmp	r3, #0
 800c526:	d00a      	beq.n	800c53e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	430a      	orrs	r2, r1
 800c53c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c542:	f003 0302 	and.w	r3, r3, #2
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00a      	beq.n	800c560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	430a      	orrs	r2, r1
 800c55e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c564:	f003 0304 	and.w	r3, r3, #4
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00a      	beq.n	800c582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	430a      	orrs	r2, r1
 800c580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c586:	f003 0308 	and.w	r3, r3, #8
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d00a      	beq.n	800c5a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	430a      	orrs	r2, r1
 800c5a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5a8:	f003 0310 	and.w	r3, r3, #16
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d00a      	beq.n	800c5c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	689b      	ldr	r3, [r3, #8]
 800c5b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	430a      	orrs	r2, r1
 800c5c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ca:	f003 0320 	and.w	r3, r3, #32
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00a      	beq.n	800c5e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	689b      	ldr	r3, [r3, #8]
 800c5d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	430a      	orrs	r2, r1
 800c5e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d01a      	beq.n	800c62a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	430a      	orrs	r2, r1
 800c608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c60e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c612:	d10a      	bne.n	800c62a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	430a      	orrs	r2, r1
 800c628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c632:	2b00      	cmp	r3, #0
 800c634:	d00a      	beq.n	800c64c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	430a      	orrs	r2, r1
 800c64a:	605a      	str	r2, [r3, #4]
  }
}
 800c64c:	bf00      	nop
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af02      	add	r7, sp, #8
 800c65e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2200      	movs	r2, #0
 800c664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c668:	f7f5 ff26 	bl	80024b8 <HAL_GetTick>
 800c66c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f003 0308 	and.w	r3, r3, #8
 800c678:	2b08      	cmp	r3, #8
 800c67a:	d10e      	bne.n	800c69a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c67c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2200      	movs	r2, #0
 800c686:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 f82c 	bl	800c6e8 <UART_WaitOnFlagUntilTimeout>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d001      	beq.n	800c69a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c696:	2303      	movs	r3, #3
 800c698:	e022      	b.n	800c6e0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f003 0304 	and.w	r3, r3, #4
 800c6a4:	2b04      	cmp	r3, #4
 800c6a6:	d10e      	bne.n	800c6c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c6ac:	9300      	str	r3, [sp, #0]
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f816 	bl	800c6e8 <UART_WaitOnFlagUntilTimeout>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d001      	beq.n	800c6c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c6c2:	2303      	movs	r3, #3
 800c6c4:	e00c      	b.n	800c6e0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2220      	movs	r2, #32
 800c6ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2220      	movs	r2, #32
 800c6d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c6de:	2300      	movs	r3, #0
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3710      	adds	r7, #16
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	603b      	str	r3, [r7, #0]
 800c6f4:	4613      	mov	r3, r2
 800c6f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6f8:	e062      	b.n	800c7c0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c700:	d05e      	beq.n	800c7c0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c702:	f7f5 fed9 	bl	80024b8 <HAL_GetTick>
 800c706:	4602      	mov	r2, r0
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	1ad3      	subs	r3, r2, r3
 800c70c:	69ba      	ldr	r2, [r7, #24]
 800c70e:	429a      	cmp	r2, r3
 800c710:	d302      	bcc.n	800c718 <UART_WaitOnFlagUntilTimeout+0x30>
 800c712:	69bb      	ldr	r3, [r7, #24]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d11d      	bne.n	800c754 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	681a      	ldr	r2, [r3, #0]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c726:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	689a      	ldr	r2, [r3, #8]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f022 0201 	bic.w	r2, r2, #1
 800c736:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2220      	movs	r2, #32
 800c73c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2220      	movs	r2, #32
 800c744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2200      	movs	r2, #0
 800c74c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c750:	2303      	movs	r3, #3
 800c752:	e045      	b.n	800c7e0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f003 0304 	and.w	r3, r3, #4
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d02e      	beq.n	800c7c0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	69db      	ldr	r3, [r3, #28]
 800c768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c76c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c770:	d126      	bne.n	800c7c0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c77a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c78a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	689a      	ldr	r2, [r3, #8]
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f022 0201 	bic.w	r2, r2, #1
 800c79a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2220      	movs	r2, #32
 800c7a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2220      	movs	r2, #32
 800c7a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2220      	movs	r2, #32
 800c7b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800c7bc:	2303      	movs	r3, #3
 800c7be:	e00f      	b.n	800c7e0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	69da      	ldr	r2, [r3, #28]
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	4013      	ands	r3, r2
 800c7ca:	68ba      	ldr	r2, [r7, #8]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	bf0c      	ite	eq
 800c7d0:	2301      	moveq	r3, #1
 800c7d2:	2300      	movne	r3, #0
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	79fb      	ldrb	r3, [r7, #7]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d08d      	beq.n	800c6fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3710      	adds	r7, #16
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	681a      	ldr	r2, [r3, #0]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c7fe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	6899      	ldr	r1, [r3, #8]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	4b08      	ldr	r3, [pc, #32]	; (800c82c <UART_EndRxTransfer+0x44>)
 800c80c:	400b      	ands	r3, r1
 800c80e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2220      	movs	r2, #32
 800c814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800c81e:	bf00      	nop
 800c820:	370c      	adds	r7, #12
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	effffffe 	.word	0xeffffffe

0800c830 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c83c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2200      	movs	r2, #0
 800c842:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2200      	movs	r2, #0
 800c84a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c84e:	68f8      	ldr	r0, [r7, #12]
 800c850:	f7fd fcd6 	bl	800a200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c854:	bf00      	nop
 800c856:	3710      	adds	r7, #16
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c86a:	2b21      	cmp	r3, #33	; 0x21
 800c86c:	d12a      	bne.n	800c8c4 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c874:	b29b      	uxth	r3, r3
 800c876:	2b00      	cmp	r3, #0
 800c878:	d110      	bne.n	800c89c <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c888:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c898:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c89a:	e013      	b.n	800c8c4 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8a0:	781a      	ldrb	r2, [r3, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8ac:	1c5a      	adds	r2, r3, #1
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	b29a      	uxth	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c8c4:	bf00      	nop
 800c8c6:	370c      	adds	r7, #12
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b085      	sub	sp, #20
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8de:	2b21      	cmp	r3, #33	; 0x21
 800c8e0:	d12f      	bne.n	800c942 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d110      	bne.n	800c910 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c8fc:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c90c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c90e:	e018      	b.n	800c942 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c914:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	881b      	ldrh	r3, [r3, #0]
 800c91a:	461a      	mov	r2, r3
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c924:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c92a:	1c9a      	adds	r2, r3, #2
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c936:	b29b      	uxth	r3, r3
 800c938:	3b01      	subs	r3, #1
 800c93a:	b29a      	uxth	r2, r3
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c942:	bf00      	nop
 800c944:	3714      	adds	r7, #20
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr

0800c94e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c94e:	b480      	push	{r7}
 800c950:	b085      	sub	sp, #20
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c95c:	2b21      	cmp	r3, #33	; 0x21
 800c95e:	d13d      	bne.n	800c9dc <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c966:	81fb      	strh	r3, [r7, #14]
 800c968:	e035      	b.n	800c9d6 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c970:	b29b      	uxth	r3, r3
 800c972:	2b00      	cmp	r3, #0
 800c974:	d111      	bne.n	800c99a <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	689a      	ldr	r2, [r3, #8]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c984:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c994:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c996:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c998:	e020      	b.n	800c9dc <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	69db      	ldr	r3, [r3, #28]
 800c9a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d013      	beq.n	800c9d0 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9ac:	781a      	ldrb	r2, [r3, #0]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9b8:	1c5a      	adds	r2, r3, #1
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	3b01      	subs	r3, #1
 800c9c8:	b29a      	uxth	r2, r3
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c9d0:	89fb      	ldrh	r3, [r7, #14]
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	81fb      	strh	r3, [r7, #14]
 800c9d6:	89fb      	ldrh	r3, [r7, #14]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d1c6      	bne.n	800c96a <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800c9dc:	bf00      	nop
 800c9de:	3714      	adds	r7, #20
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9f6:	2b21      	cmp	r3, #33	; 0x21
 800c9f8:	d142      	bne.n	800ca80 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca00:	81fb      	strh	r3, [r7, #14]
 800ca02:	e03a      	b.n	800ca7a <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d111      	bne.n	800ca34 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	689a      	ldr	r2, [r3, #8]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800ca1e:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca2e:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800ca30:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800ca32:	e025      	b.n	800ca80 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	69db      	ldr	r3, [r3, #28]
 800ca3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d018      	beq.n	800ca74 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca46:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	881b      	ldrh	r3, [r3, #0]
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca56:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca5c:	1c9a      	adds	r2, r3, #2
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	b29a      	uxth	r2, r3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ca74:	89fb      	ldrh	r3, [r7, #14]
 800ca76:	3b01      	subs	r3, #1
 800ca78:	81fb      	strh	r3, [r7, #14]
 800ca7a:	89fb      	ldrh	r3, [r7, #14]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d1c1      	bne.n	800ca04 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800ca80:	bf00      	nop
 800ca82:	3714      	adds	r7, #20
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800caa2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2220      	movs	r2, #32
 800caa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2200      	movs	r2, #0
 800cab0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7f4 f9a6 	bl	8000e04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cab8:	bf00      	nop
 800caba:	3708      	adds	r7, #8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cace:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cad6:	2b22      	cmp	r3, #34	; 0x22
 800cad8:	d13b      	bne.n	800cb52 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cae2:	89bb      	ldrh	r3, [r7, #12]
 800cae4:	b2d9      	uxtb	r1, r3
 800cae6:	89fb      	ldrh	r3, [r7, #14]
 800cae8:	b2da      	uxtb	r2, r3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caee:	400a      	ands	r2, r1
 800caf0:	b2d2      	uxtb	r2, r2
 800caf2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caf8:	1c5a      	adds	r2, r3, #1
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	3b01      	subs	r3, #1
 800cb08:	b29a      	uxth	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d122      	bne.n	800cb62 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	681a      	ldr	r2, [r3, #0]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cb2a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	689a      	ldr	r2, [r3, #8]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f022 0201 	bic.w	r2, r2, #1
 800cb3a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2220      	movs	r2, #32
 800cb40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2200      	movs	r2, #0
 800cb48:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f7f4 f99c 	bl	8000e88 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cb50:	e007      	b.n	800cb62 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	699a      	ldr	r2, [r3, #24]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f042 0208 	orr.w	r2, r2, #8
 800cb60:	619a      	str	r2, [r3, #24]
}
 800cb62:	bf00      	nop
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b084      	sub	sp, #16
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb78:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb80:	2b22      	cmp	r3, #34	; 0x22
 800cb82:	d13b      	bne.n	800cbfc <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb8a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb90:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800cb92:	89ba      	ldrh	r2, [r7, #12]
 800cb94:	89fb      	ldrh	r3, [r7, #14]
 800cb96:	4013      	ands	r3, r2
 800cb98:	b29a      	uxth	r2, r3
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cba2:	1c9a      	adds	r2, r3, #2
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	3b01      	subs	r3, #1
 800cbb2:	b29a      	uxth	r2, r3
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d122      	bne.n	800cc0c <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cbd4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	689a      	ldr	r2, [r3, #8]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f022 0201 	bic.w	r2, r2, #1
 800cbe4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2220      	movs	r2, #32
 800cbea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f7f4 f947 	bl	8000e88 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cbfa:	e007      	b.n	800cc0c <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	699a      	ldr	r2, [r3, #24]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f042 0208 	orr.w	r2, r2, #8
 800cc0a:	619a      	str	r2, [r3, #24]
}
 800cc0c:	bf00      	nop
 800cc0e:	3710      	adds	r7, #16
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cc22:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc2a:	2b22      	cmp	r3, #34	; 0x22
 800cc2c:	d166      	bne.n	800ccfc <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cc34:	81fb      	strh	r3, [r7, #14]
 800cc36:	e03d      	b.n	800ccb4 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc3e:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cc40:	893b      	ldrh	r3, [r7, #8]
 800cc42:	b2d9      	uxtb	r1, r3
 800cc44:	89bb      	ldrh	r3, [r7, #12]
 800cc46:	b2da      	uxtb	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc4c:	400a      	ands	r2, r1
 800cc4e:	b2d2      	uxtb	r2, r2
 800cc50:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc56:	1c5a      	adds	r2, r3, #1
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc62:	b29b      	uxth	r3, r3
 800cc64:	3b01      	subs	r3, #1
 800cc66:	b29a      	uxth	r2, r3
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d119      	bne.n	800ccae <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	681a      	ldr	r2, [r3, #0]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cc88:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	6899      	ldr	r1, [r3, #8]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	4b1f      	ldr	r3, [pc, #124]	; (800cd14 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800cc96:	400b      	ands	r3, r1
 800cc98:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2220      	movs	r2, #32
 800cc9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2200      	movs	r2, #0
 800cca6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f7f4 f8ed 	bl	8000e88 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800ccae:	89fb      	ldrh	r3, [r7, #14]
 800ccb0:	3b01      	subs	r3, #1
 800ccb2:	81fb      	strh	r3, [r7, #14]
 800ccb4:	89fb      	ldrh	r3, [r7, #14]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d1be      	bne.n	800cc38 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ccc0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ccc2:	897b      	ldrh	r3, [r7, #10]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d021      	beq.n	800cd0c <UART_RxISR_8BIT_FIFOEN+0xf8>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ccce:	897a      	ldrh	r2, [r7, #10]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d21b      	bcs.n	800cd0c <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	689a      	ldr	r2, [r3, #8]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cce2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4a0c      	ldr	r2, [pc, #48]	; (800cd18 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800cce8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f042 0220 	orr.w	r2, r2, #32
 800ccf8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ccfa:	e007      	b.n	800cd0c <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	699a      	ldr	r2, [r3, #24]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f042 0208 	orr.w	r2, r2, #8
 800cd0a:	619a      	str	r2, [r3, #24]
}
 800cd0c:	bf00      	nop
 800cd0e:	3710      	adds	r7, #16
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	effffffe 	.word	0xeffffffe
 800cd18:	0800cac1 	.word	0x0800cac1

0800cd1c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b086      	sub	sp, #24
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cd2a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd32:	2b22      	cmp	r3, #34	; 0x22
 800cd34:	d166      	bne.n	800ce04 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cd3c:	82fb      	strh	r3, [r7, #22]
 800cd3e:	e03d      	b.n	800cdbc <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd46:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd4c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800cd4e:	8a3a      	ldrh	r2, [r7, #16]
 800cd50:	8abb      	ldrh	r3, [r7, #20]
 800cd52:	4013      	ands	r3, r2
 800cd54:	b29a      	uxth	r2, r3
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd5e:	1c9a      	adds	r2, r3, #2
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	3b01      	subs	r3, #1
 800cd6e:	b29a      	uxth	r2, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd7c:	b29b      	uxth	r3, r3
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d119      	bne.n	800cdb6 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd90:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	6899      	ldr	r1, [r3, #8]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681a      	ldr	r2, [r3, #0]
 800cd9c:	4b1f      	ldr	r3, [pc, #124]	; (800ce1c <UART_RxISR_16BIT_FIFOEN+0x100>)
 800cd9e:	400b      	ands	r3, r1
 800cda0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2220      	movs	r2, #32
 800cda6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2200      	movs	r2, #0
 800cdae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f7f4 f869 	bl	8000e88 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cdb6:	8afb      	ldrh	r3, [r7, #22]
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	82fb      	strh	r3, [r7, #22]
 800cdbc:	8afb      	ldrh	r3, [r7, #22]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1be      	bne.n	800cd40 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cdc8:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cdca:	8a7b      	ldrh	r3, [r7, #18]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d021      	beq.n	800ce14 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cdd6:	8a7a      	ldrh	r2, [r7, #18]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d21b      	bcs.n	800ce14 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	689a      	ldr	r2, [r3, #8]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cdea:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	4a0c      	ldr	r2, [pc, #48]	; (800ce20 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800cdf0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f042 0220 	orr.w	r2, r2, #32
 800ce00:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ce02:	e007      	b.n	800ce14 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	699a      	ldr	r2, [r3, #24]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f042 0208 	orr.w	r2, r2, #8
 800ce12:	619a      	str	r2, [r3, #24]
}
 800ce14:	bf00      	nop
 800ce16:	3718      	adds	r7, #24
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	effffffe 	.word	0xeffffffe
 800ce20:	0800cb6b 	.word	0x0800cb6b

0800ce24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b083      	sub	sp, #12
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ce2c:	bf00      	nop
 800ce2e:	370c      	adds	r7, #12
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr

0800ce38 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b083      	sub	sp, #12
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ce40:	bf00      	nop
 800ce42:	370c      	adds	r7, #12
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr

0800ce4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b083      	sub	sp, #12
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ce54:	bf00      	nop
 800ce56:	370c      	adds	r7, #12
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr

0800ce60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b085      	sub	sp, #20
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d101      	bne.n	800ce76 <HAL_UARTEx_DisableFifoMode+0x16>
 800ce72:	2302      	movs	r3, #2
 800ce74:	e027      	b.n	800cec6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2201      	movs	r2, #1
 800ce7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2224      	movs	r2, #36	; 0x24
 800ce82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f022 0201 	bic.w	r2, r2, #1
 800ce9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cea4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	68fa      	ldr	r2, [r7, #12]
 800ceb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2220      	movs	r2, #32
 800ceb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2200      	movs	r2, #0
 800cec0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cec4:	2300      	movs	r3, #0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3714      	adds	r7, #20
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr

0800ced2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b084      	sub	sp, #16
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
 800ceda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d101      	bne.n	800ceea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cee6:	2302      	movs	r3, #2
 800cee8:	e02d      	b.n	800cf46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2201      	movs	r2, #1
 800ceee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2224      	movs	r2, #36	; 0x24
 800cef6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f022 0201 	bic.w	r2, r2, #1
 800cf10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	689b      	ldr	r3, [r3, #8]
 800cf18:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	683a      	ldr	r2, [r7, #0]
 800cf22:	430a      	orrs	r2, r1
 800cf24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 f850 	bl	800cfcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	68fa      	ldr	r2, [r7, #12]
 800cf32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2220      	movs	r2, #32
 800cf38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cf44:	2300      	movs	r3, #0
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b084      	sub	sp, #16
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
 800cf56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d101      	bne.n	800cf66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cf62:	2302      	movs	r3, #2
 800cf64:	e02d      	b.n	800cfc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2224      	movs	r2, #36	; 0x24
 800cf72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f022 0201 	bic.w	r2, r2, #1
 800cf8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	683a      	ldr	r2, [r7, #0]
 800cf9e:	430a      	orrs	r2, r1
 800cfa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 f812 	bl	800cfcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2220      	movs	r2, #32
 800cfb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
	...

0800cfcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b089      	sub	sp, #36	; 0x24
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800cfd4:	4a2f      	ldr	r2, [pc, #188]	; (800d094 <UARTEx_SetNbDataToProcess+0xc8>)
 800cfd6:	f107 0314 	add.w	r3, r7, #20
 800cfda:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cfde:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800cfe2:	4a2d      	ldr	r2, [pc, #180]	; (800d098 <UARTEx_SetNbDataToProcess+0xcc>)
 800cfe4:	f107 030c 	add.w	r3, r7, #12
 800cfe8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cfec:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d108      	bne.n	800d00a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d008:	e03d      	b.n	800d086 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d00a:	2308      	movs	r3, #8
 800d00c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d00e:	2308      	movs	r3, #8
 800d010:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	0e5b      	lsrs	r3, r3, #25
 800d01a:	b2db      	uxtb	r3, r3
 800d01c:	f003 0307 	and.w	r3, r3, #7
 800d020:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	689b      	ldr	r3, [r3, #8]
 800d028:	0f5b      	lsrs	r3, r3, #29
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	f003 0307 	and.w	r3, r3, #7
 800d030:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800d032:	7fbb      	ldrb	r3, [r7, #30]
 800d034:	7f3a      	ldrb	r2, [r7, #28]
 800d036:	f107 0120 	add.w	r1, r7, #32
 800d03a:	440a      	add	r2, r1
 800d03c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d040:	fb02 f303 	mul.w	r3, r2, r3
 800d044:	7f3a      	ldrb	r2, [r7, #28]
 800d046:	f107 0120 	add.w	r1, r7, #32
 800d04a:	440a      	add	r2, r1
 800d04c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d050:	fb93 f3f2 	sdiv	r3, r3, r2
 800d054:	b29a      	uxth	r2, r3
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800d05c:	7ffb      	ldrb	r3, [r7, #31]
 800d05e:	7f7a      	ldrb	r2, [r7, #29]
 800d060:	f107 0120 	add.w	r1, r7, #32
 800d064:	440a      	add	r2, r1
 800d066:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d06a:	fb02 f303 	mul.w	r3, r2, r3
 800d06e:	7f7a      	ldrb	r2, [r7, #29]
 800d070:	f107 0120 	add.w	r1, r7, #32
 800d074:	440a      	add	r2, r1
 800d076:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d07a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d07e:	b29a      	uxth	r2, r3
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d086:	bf00      	nop
 800d088:	3724      	adds	r7, #36	; 0x24
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr
 800d092:	bf00      	nop
 800d094:	0800e1d0 	.word	0x0800e1d0
 800d098:	0800e1d8 	.word	0x0800e1d8

0800d09c <__errno>:
 800d09c:	4b01      	ldr	r3, [pc, #4]	; (800d0a4 <__errno+0x8>)
 800d09e:	6818      	ldr	r0, [r3, #0]
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	24000050 	.word	0x24000050

0800d0a8 <__libc_init_array>:
 800d0a8:	b570      	push	{r4, r5, r6, lr}
 800d0aa:	4e0d      	ldr	r6, [pc, #52]	; (800d0e0 <__libc_init_array+0x38>)
 800d0ac:	4c0d      	ldr	r4, [pc, #52]	; (800d0e4 <__libc_init_array+0x3c>)
 800d0ae:	1ba4      	subs	r4, r4, r6
 800d0b0:	10a4      	asrs	r4, r4, #2
 800d0b2:	2500      	movs	r5, #0
 800d0b4:	42a5      	cmp	r5, r4
 800d0b6:	d109      	bne.n	800d0cc <__libc_init_array+0x24>
 800d0b8:	4e0b      	ldr	r6, [pc, #44]	; (800d0e8 <__libc_init_array+0x40>)
 800d0ba:	4c0c      	ldr	r4, [pc, #48]	; (800d0ec <__libc_init_array+0x44>)
 800d0bc:	f001 f87a 	bl	800e1b4 <_init>
 800d0c0:	1ba4      	subs	r4, r4, r6
 800d0c2:	10a4      	asrs	r4, r4, #2
 800d0c4:	2500      	movs	r5, #0
 800d0c6:	42a5      	cmp	r5, r4
 800d0c8:	d105      	bne.n	800d0d6 <__libc_init_array+0x2e>
 800d0ca:	bd70      	pop	{r4, r5, r6, pc}
 800d0cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d0d0:	4798      	blx	r3
 800d0d2:	3501      	adds	r5, #1
 800d0d4:	e7ee      	b.n	800d0b4 <__libc_init_array+0xc>
 800d0d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d0da:	4798      	blx	r3
 800d0dc:	3501      	adds	r5, #1
 800d0de:	e7f2      	b.n	800d0c6 <__libc_init_array+0x1e>
 800d0e0:	0800e420 	.word	0x0800e420
 800d0e4:	0800e420 	.word	0x0800e420
 800d0e8:	0800e420 	.word	0x0800e420
 800d0ec:	0800e424 	.word	0x0800e424

0800d0f0 <memset>:
 800d0f0:	4402      	add	r2, r0
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d100      	bne.n	800d0fa <memset+0xa>
 800d0f8:	4770      	bx	lr
 800d0fa:	f803 1b01 	strb.w	r1, [r3], #1
 800d0fe:	e7f9      	b.n	800d0f4 <memset+0x4>

0800d100 <cos>:
 800d100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d102:	eeb0 7b40 	vmov.f64	d7, d0
 800d106:	ee17 3a90 	vmov	r3, s15
 800d10a:	4a19      	ldr	r2, [pc, #100]	; (800d170 <cos+0x70>)
 800d10c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d110:	4293      	cmp	r3, r2
 800d112:	dc04      	bgt.n	800d11e <cos+0x1e>
 800d114:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800d168 <cos+0x68>
 800d118:	f000 fade 	bl	800d6d8 <__kernel_cos>
 800d11c:	e004      	b.n	800d128 <cos+0x28>
 800d11e:	4a15      	ldr	r2, [pc, #84]	; (800d174 <cos+0x74>)
 800d120:	4293      	cmp	r3, r2
 800d122:	dd04      	ble.n	800d12e <cos+0x2e>
 800d124:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d128:	b005      	add	sp, #20
 800d12a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d12e:	4668      	mov	r0, sp
 800d130:	f000 f992 	bl	800d458 <__ieee754_rem_pio2>
 800d134:	f000 0003 	and.w	r0, r0, #3
 800d138:	2801      	cmp	r0, #1
 800d13a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d13e:	ed9d 0b00 	vldr	d0, [sp]
 800d142:	d007      	beq.n	800d154 <cos+0x54>
 800d144:	2802      	cmp	r0, #2
 800d146:	d00a      	beq.n	800d15e <cos+0x5e>
 800d148:	2800      	cmp	r0, #0
 800d14a:	d0e5      	beq.n	800d118 <cos+0x18>
 800d14c:	2001      	movs	r0, #1
 800d14e:	f000 fdcb 	bl	800dce8 <__kernel_sin>
 800d152:	e7e9      	b.n	800d128 <cos+0x28>
 800d154:	f000 fdc8 	bl	800dce8 <__kernel_sin>
 800d158:	eeb1 0b40 	vneg.f64	d0, d0
 800d15c:	e7e4      	b.n	800d128 <cos+0x28>
 800d15e:	f000 fabb 	bl	800d6d8 <__kernel_cos>
 800d162:	e7f9      	b.n	800d158 <cos+0x58>
 800d164:	f3af 8000 	nop.w
	...
 800d170:	3fe921fb 	.word	0x3fe921fb
 800d174:	7fefffff 	.word	0x7fefffff

0800d178 <sin>:
 800d178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d17a:	eeb0 7b40 	vmov.f64	d7, d0
 800d17e:	ee17 3a90 	vmov	r3, s15
 800d182:	4a19      	ldr	r2, [pc, #100]	; (800d1e8 <sin+0x70>)
 800d184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d188:	4293      	cmp	r3, r2
 800d18a:	dc05      	bgt.n	800d198 <sin+0x20>
 800d18c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800d1e0 <sin+0x68>
 800d190:	2000      	movs	r0, #0
 800d192:	f000 fda9 	bl	800dce8 <__kernel_sin>
 800d196:	e004      	b.n	800d1a2 <sin+0x2a>
 800d198:	4a14      	ldr	r2, [pc, #80]	; (800d1ec <sin+0x74>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	dd04      	ble.n	800d1a8 <sin+0x30>
 800d19e:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d1a2:	b005      	add	sp, #20
 800d1a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800d1a8:	4668      	mov	r0, sp
 800d1aa:	f000 f955 	bl	800d458 <__ieee754_rem_pio2>
 800d1ae:	f000 0003 	and.w	r0, r0, #3
 800d1b2:	2801      	cmp	r0, #1
 800d1b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d1b8:	ed9d 0b00 	vldr	d0, [sp]
 800d1bc:	d004      	beq.n	800d1c8 <sin+0x50>
 800d1be:	2802      	cmp	r0, #2
 800d1c0:	d005      	beq.n	800d1ce <sin+0x56>
 800d1c2:	b950      	cbnz	r0, 800d1da <sin+0x62>
 800d1c4:	2001      	movs	r0, #1
 800d1c6:	e7e4      	b.n	800d192 <sin+0x1a>
 800d1c8:	f000 fa86 	bl	800d6d8 <__kernel_cos>
 800d1cc:	e7e9      	b.n	800d1a2 <sin+0x2a>
 800d1ce:	2001      	movs	r0, #1
 800d1d0:	f000 fd8a 	bl	800dce8 <__kernel_sin>
 800d1d4:	eeb1 0b40 	vneg.f64	d0, d0
 800d1d8:	e7e3      	b.n	800d1a2 <sin+0x2a>
 800d1da:	f000 fa7d 	bl	800d6d8 <__kernel_cos>
 800d1de:	e7f9      	b.n	800d1d4 <sin+0x5c>
	...
 800d1e8:	3fe921fb 	.word	0x3fe921fb
 800d1ec:	7fefffff 	.word	0x7fefffff

0800d1f0 <atan2>:
 800d1f0:	f000 b84e 	b.w	800d290 <__ieee754_atan2>
 800d1f4:	0000      	movs	r0, r0
	...

0800d1f8 <sqrt>:
 800d1f8:	b500      	push	{lr}
 800d1fa:	ed2d 8b02 	vpush	{d8}
 800d1fe:	eeb0 8b40 	vmov.f64	d8, d0
 800d202:	b08b      	sub	sp, #44	; 0x2c
 800d204:	f000 fa64 	bl	800d6d0 <__ieee754_sqrt>
 800d208:	4b1f      	ldr	r3, [pc, #124]	; (800d288 <sqrt+0x90>)
 800d20a:	f993 3000 	ldrsb.w	r3, [r3]
 800d20e:	1c5a      	adds	r2, r3, #1
 800d210:	d024      	beq.n	800d25c <sqrt+0x64>
 800d212:	eeb4 8b48 	vcmp.f64	d8, d8
 800d216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d21a:	d61f      	bvs.n	800d25c <sqrt+0x64>
 800d21c:	ed9f 7b18 	vldr	d7, [pc, #96]	; 800d280 <sqrt+0x88>
 800d220:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d228:	d518      	bpl.n	800d25c <sqrt+0x64>
 800d22a:	2201      	movs	r2, #1
 800d22c:	9200      	str	r2, [sp, #0]
 800d22e:	4a17      	ldr	r2, [pc, #92]	; (800d28c <sqrt+0x94>)
 800d230:	9201      	str	r2, [sp, #4]
 800d232:	2200      	movs	r2, #0
 800d234:	9208      	str	r2, [sp, #32]
 800d236:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d23a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d23e:	b993      	cbnz	r3, 800d266 <sqrt+0x6e>
 800d240:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d244:	4668      	mov	r0, sp
 800d246:	f000 ff23 	bl	800e090 <matherr>
 800d24a:	b190      	cbz	r0, 800d272 <sqrt+0x7a>
 800d24c:	9b08      	ldr	r3, [sp, #32]
 800d24e:	b11b      	cbz	r3, 800d258 <sqrt+0x60>
 800d250:	f7ff ff24 	bl	800d09c <__errno>
 800d254:	9b08      	ldr	r3, [sp, #32]
 800d256:	6003      	str	r3, [r0, #0]
 800d258:	ed9d 0b06 	vldr	d0, [sp, #24]
 800d25c:	b00b      	add	sp, #44	; 0x2c
 800d25e:	ecbd 8b02 	vpop	{d8}
 800d262:	f85d fb04 	ldr.w	pc, [sp], #4
 800d266:	2b02      	cmp	r3, #2
 800d268:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800d26c:	ed8d 6b06 	vstr	d6, [sp, #24]
 800d270:	d1e8      	bne.n	800d244 <sqrt+0x4c>
 800d272:	f7ff ff13 	bl	800d09c <__errno>
 800d276:	2321      	movs	r3, #33	; 0x21
 800d278:	6003      	str	r3, [r0, #0]
 800d27a:	e7e7      	b.n	800d24c <sqrt+0x54>
 800d27c:	f3af 8000 	nop.w
	...
 800d288:	240000b4 	.word	0x240000b4
 800d28c:	0800e1f8 	.word	0x0800e1f8

0800d290 <__ieee754_atan2>:
 800d290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d292:	ee11 6a10 	vmov	r6, s2
 800d296:	ee11 0a90 	vmov	r0, s3
 800d29a:	4273      	negs	r3, r6
 800d29c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800d2a0:	4333      	orrs	r3, r6
 800d2a2:	4f6b      	ldr	r7, [pc, #428]	; (800d450 <__ieee754_atan2+0x1c0>)
 800d2a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d2a8:	42bb      	cmp	r3, r7
 800d2aa:	ed8d 0b00 	vstr	d0, [sp]
 800d2ae:	d80b      	bhi.n	800d2c8 <__ieee754_atan2+0x38>
 800d2b0:	e9dd c500 	ldrd	ip, r5, [sp]
 800d2b4:	f1cc 0100 	rsb	r1, ip, #0
 800d2b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d2bc:	ea41 010c 	orr.w	r1, r1, ip
 800d2c0:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 800d2c4:	42b9      	cmp	r1, r7
 800d2c6:	d906      	bls.n	800d2d6 <__ieee754_atan2+0x46>
 800d2c8:	ed9d 7b00 	vldr	d7, [sp]
 800d2cc:	ee37 7b01 	vadd.f64	d7, d7, d1
 800d2d0:	ed8d 7b00 	vstr	d7, [sp]
 800d2d4:	e063      	b.n	800d39e <__ieee754_atan2+0x10e>
 800d2d6:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 800d2da:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800d2de:	4331      	orrs	r1, r6
 800d2e0:	d104      	bne.n	800d2ec <__ieee754_atan2+0x5c>
 800d2e2:	b003      	add	sp, #12
 800d2e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d2e8:	f000 bd56 	b.w	800dd98 <atan>
 800d2ec:	1784      	asrs	r4, r0, #30
 800d2ee:	f004 0402 	and.w	r4, r4, #2
 800d2f2:	ea53 010c 	orrs.w	r1, r3, ip
 800d2f6:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 800d2fa:	d109      	bne.n	800d310 <__ieee754_atan2+0x80>
 800d2fc:	2c02      	cmp	r4, #2
 800d2fe:	d078      	beq.n	800d3f2 <__ieee754_atan2+0x162>
 800d300:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 800d3f8 <__ieee754_atan2+0x168>
 800d304:	ed9d 6b00 	vldr	d6, [sp]
 800d308:	2c03      	cmp	r4, #3
 800d30a:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800d30e:	e7df      	b.n	800d2d0 <__ieee754_atan2+0x40>
 800d310:	ea52 0106 	orrs.w	r1, r2, r6
 800d314:	d107      	bne.n	800d326 <__ieee754_atan2+0x96>
 800d316:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 800d400 <__ieee754_atan2+0x170>
 800d31a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800d408 <__ieee754_atan2+0x178>
 800d31e:	2d00      	cmp	r5, #0
 800d320:	fe26 7b07 	vselge.f64	d7, d6, d7
 800d324:	e7d4      	b.n	800d2d0 <__ieee754_atan2+0x40>
 800d326:	42ba      	cmp	r2, r7
 800d328:	d120      	bne.n	800d36c <__ieee754_atan2+0xdc>
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d111      	bne.n	800d352 <__ieee754_atan2+0xc2>
 800d32e:	2c02      	cmp	r4, #2
 800d330:	d009      	beq.n	800d346 <__ieee754_atan2+0xb6>
 800d332:	2c03      	cmp	r4, #3
 800d334:	d00a      	beq.n	800d34c <__ieee754_atan2+0xbc>
 800d336:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800d410 <__ieee754_atan2+0x180>
 800d33a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800d418 <__ieee754_atan2+0x188>
 800d33e:	2c01      	cmp	r4, #1
 800d340:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800d344:	e7c4      	b.n	800d2d0 <__ieee754_atan2+0x40>
 800d346:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800d420 <__ieee754_atan2+0x190>
 800d34a:	e7c1      	b.n	800d2d0 <__ieee754_atan2+0x40>
 800d34c:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800d428 <__ieee754_atan2+0x198>
 800d350:	e7be      	b.n	800d2d0 <__ieee754_atan2+0x40>
 800d352:	2c02      	cmp	r4, #2
 800d354:	d04d      	beq.n	800d3f2 <__ieee754_atan2+0x162>
 800d356:	2c03      	cmp	r4, #3
 800d358:	d005      	beq.n	800d366 <__ieee754_atan2+0xd6>
 800d35a:	2c01      	cmp	r4, #1
 800d35c:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800d430 <__ieee754_atan2+0x1a0>
 800d360:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800d438 <__ieee754_atan2+0x1a8>
 800d364:	e7ec      	b.n	800d340 <__ieee754_atan2+0xb0>
 800d366:	ed9f 7b24 	vldr	d7, [pc, #144]	; 800d3f8 <__ieee754_atan2+0x168>
 800d36a:	e7b1      	b.n	800d2d0 <__ieee754_atan2+0x40>
 800d36c:	42bb      	cmp	r3, r7
 800d36e:	d0d2      	beq.n	800d316 <__ieee754_atan2+0x86>
 800d370:	1a9b      	subs	r3, r3, r2
 800d372:	151b      	asrs	r3, r3, #20
 800d374:	2b3c      	cmp	r3, #60	; 0x3c
 800d376:	dc16      	bgt.n	800d3a6 <__ieee754_atan2+0x116>
 800d378:	2800      	cmp	r0, #0
 800d37a:	da01      	bge.n	800d380 <__ieee754_atan2+0xf0>
 800d37c:	333c      	adds	r3, #60	; 0x3c
 800d37e:	db17      	blt.n	800d3b0 <__ieee754_atan2+0x120>
 800d380:	ed9d 7b00 	vldr	d7, [sp]
 800d384:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800d388:	f000 fe00 	bl	800df8c <fabs>
 800d38c:	f000 fd04 	bl	800dd98 <atan>
 800d390:	ed8d 0b00 	vstr	d0, [sp]
 800d394:	2c01      	cmp	r4, #1
 800d396:	d00e      	beq.n	800d3b6 <__ieee754_atan2+0x126>
 800d398:	2c02      	cmp	r4, #2
 800d39a:	d014      	beq.n	800d3c6 <__ieee754_atan2+0x136>
 800d39c:	b9f4      	cbnz	r4, 800d3dc <__ieee754_atan2+0x14c>
 800d39e:	ed9d 0b00 	vldr	d0, [sp]
 800d3a2:	b003      	add	sp, #12
 800d3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3a6:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800d400 <__ieee754_atan2+0x170>
 800d3aa:	ed8d 7b00 	vstr	d7, [sp]
 800d3ae:	e7f1      	b.n	800d394 <__ieee754_atan2+0x104>
 800d3b0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800d438 <__ieee754_atan2+0x1a8>
 800d3b4:	e7f9      	b.n	800d3aa <__ieee754_atan2+0x11a>
 800d3b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3ba:	9901      	ldr	r1, [sp, #4]
 800d3bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3c0:	e9cd 2300 	strd	r2, r3, [sp]
 800d3c4:	e7eb      	b.n	800d39e <__ieee754_atan2+0x10e>
 800d3c6:	ed9d 6b00 	vldr	d6, [sp]
 800d3ca:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 800d440 <__ieee754_atan2+0x1b0>
 800d3ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d3d2:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 800d448 <__ieee754_atan2+0x1b8>
 800d3d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d3da:	e779      	b.n	800d2d0 <__ieee754_atan2+0x40>
 800d3dc:	ed9d 6b00 	vldr	d6, [sp]
 800d3e0:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800d440 <__ieee754_atan2+0x1b0>
 800d3e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d3e8:	ed9f 6b17 	vldr	d6, [pc, #92]	; 800d448 <__ieee754_atan2+0x1b8>
 800d3ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d3f0:	e76e      	b.n	800d2d0 <__ieee754_atan2+0x40>
 800d3f2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800d448 <__ieee754_atan2+0x1b8>
 800d3f6:	e76b      	b.n	800d2d0 <__ieee754_atan2+0x40>
 800d3f8:	54442d18 	.word	0x54442d18
 800d3fc:	c00921fb 	.word	0xc00921fb
 800d400:	54442d18 	.word	0x54442d18
 800d404:	3ff921fb 	.word	0x3ff921fb
 800d408:	54442d18 	.word	0x54442d18
 800d40c:	bff921fb 	.word	0xbff921fb
 800d410:	54442d18 	.word	0x54442d18
 800d414:	bfe921fb 	.word	0xbfe921fb
 800d418:	54442d18 	.word	0x54442d18
 800d41c:	3fe921fb 	.word	0x3fe921fb
 800d420:	7f3321d2 	.word	0x7f3321d2
 800d424:	4002d97c 	.word	0x4002d97c
 800d428:	7f3321d2 	.word	0x7f3321d2
 800d42c:	c002d97c 	.word	0xc002d97c
 800d430:	00000000 	.word	0x00000000
 800d434:	80000000 	.word	0x80000000
	...
 800d440:	33145c07 	.word	0x33145c07
 800d444:	3ca1a626 	.word	0x3ca1a626
 800d448:	54442d18 	.word	0x54442d18
 800d44c:	400921fb 	.word	0x400921fb
 800d450:	7ff00000 	.word	0x7ff00000
 800d454:	00000000 	.word	0x00000000

0800d458 <__ieee754_rem_pio2>:
 800d458:	b570      	push	{r4, r5, r6, lr}
 800d45a:	eeb0 7b40 	vmov.f64	d7, d0
 800d45e:	ee17 5a90 	vmov	r5, s15
 800d462:	4b95      	ldr	r3, [pc, #596]	; (800d6b8 <__ieee754_rem_pio2+0x260>)
 800d464:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d468:	429e      	cmp	r6, r3
 800d46a:	b088      	sub	sp, #32
 800d46c:	4604      	mov	r4, r0
 800d46e:	dc07      	bgt.n	800d480 <__ieee754_rem_pio2+0x28>
 800d470:	2200      	movs	r2, #0
 800d472:	2300      	movs	r3, #0
 800d474:	ed84 0b00 	vstr	d0, [r4]
 800d478:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d47c:	2000      	movs	r0, #0
 800d47e:	e01b      	b.n	800d4b8 <__ieee754_rem_pio2+0x60>
 800d480:	4b8e      	ldr	r3, [pc, #568]	; (800d6bc <__ieee754_rem_pio2+0x264>)
 800d482:	429e      	cmp	r6, r3
 800d484:	dc3b      	bgt.n	800d4fe <__ieee754_rem_pio2+0xa6>
 800d486:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800d48a:	2d00      	cmp	r5, #0
 800d48c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800d678 <__ieee754_rem_pio2+0x220>
 800d490:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800d494:	dd19      	ble.n	800d4ca <__ieee754_rem_pio2+0x72>
 800d496:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d49a:	429e      	cmp	r6, r3
 800d49c:	d00e      	beq.n	800d4bc <__ieee754_rem_pio2+0x64>
 800d49e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800d680 <__ieee754_rem_pio2+0x228>
 800d4a2:	ee37 5b46 	vsub.f64	d5, d7, d6
 800d4a6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d4aa:	ed84 5b00 	vstr	d5, [r4]
 800d4ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d4b2:	ed84 7b02 	vstr	d7, [r4, #8]
 800d4b6:	2001      	movs	r0, #1
 800d4b8:	b008      	add	sp, #32
 800d4ba:	bd70      	pop	{r4, r5, r6, pc}
 800d4bc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800d688 <__ieee754_rem_pio2+0x230>
 800d4c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d4c4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800d690 <__ieee754_rem_pio2+0x238>
 800d4c8:	e7eb      	b.n	800d4a2 <__ieee754_rem_pio2+0x4a>
 800d4ca:	429e      	cmp	r6, r3
 800d4cc:	ee30 7b06 	vadd.f64	d7, d0, d6
 800d4d0:	d00e      	beq.n	800d4f0 <__ieee754_rem_pio2+0x98>
 800d4d2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800d680 <__ieee754_rem_pio2+0x228>
 800d4d6:	ee37 5b06 	vadd.f64	d5, d7, d6
 800d4da:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d4de:	ed84 5b00 	vstr	d5, [r4]
 800d4e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d4ea:	ed84 7b02 	vstr	d7, [r4, #8]
 800d4ee:	e7e3      	b.n	800d4b8 <__ieee754_rem_pio2+0x60>
 800d4f0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800d688 <__ieee754_rem_pio2+0x230>
 800d4f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d4f8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800d690 <__ieee754_rem_pio2+0x238>
 800d4fc:	e7eb      	b.n	800d4d6 <__ieee754_rem_pio2+0x7e>
 800d4fe:	4b70      	ldr	r3, [pc, #448]	; (800d6c0 <__ieee754_rem_pio2+0x268>)
 800d500:	429e      	cmp	r6, r3
 800d502:	dc6c      	bgt.n	800d5de <__ieee754_rem_pio2+0x186>
 800d504:	f000 fd42 	bl	800df8c <fabs>
 800d508:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d50c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800d698 <__ieee754_rem_pio2+0x240>
 800d510:	eea0 7b06 	vfma.f64	d7, d0, d6
 800d514:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d518:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d51c:	ee17 0a90 	vmov	r0, s15
 800d520:	eeb1 5b44 	vneg.f64	d5, d4
 800d524:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800d678 <__ieee754_rem_pio2+0x220>
 800d528:	eea5 0b07 	vfma.f64	d0, d5, d7
 800d52c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800d680 <__ieee754_rem_pio2+0x228>
 800d530:	281f      	cmp	r0, #31
 800d532:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d536:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d53a:	dc08      	bgt.n	800d54e <__ieee754_rem_pio2+0xf6>
 800d53c:	1e42      	subs	r2, r0, #1
 800d53e:	4b61      	ldr	r3, [pc, #388]	; (800d6c4 <__ieee754_rem_pio2+0x26c>)
 800d540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d544:	42b3      	cmp	r3, r6
 800d546:	d002      	beq.n	800d54e <__ieee754_rem_pio2+0xf6>
 800d548:	ed84 6b00 	vstr	d6, [r4]
 800d54c:	e022      	b.n	800d594 <__ieee754_rem_pio2+0x13c>
 800d54e:	ee16 3a90 	vmov	r3, s13
 800d552:	1536      	asrs	r6, r6, #20
 800d554:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d558:	1af3      	subs	r3, r6, r3
 800d55a:	2b10      	cmp	r3, #16
 800d55c:	ddf4      	ble.n	800d548 <__ieee754_rem_pio2+0xf0>
 800d55e:	eeb0 6b40 	vmov.f64	d6, d0
 800d562:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800d688 <__ieee754_rem_pio2+0x230>
 800d566:	eea5 6b03 	vfma.f64	d6, d5, d3
 800d56a:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d56e:	eea5 7b03 	vfma.f64	d7, d5, d3
 800d572:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800d690 <__ieee754_rem_pio2+0x238>
 800d576:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800d57a:	ee36 3b47 	vsub.f64	d3, d6, d7
 800d57e:	ee13 3a90 	vmov	r3, s7
 800d582:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d586:	1af6      	subs	r6, r6, r3
 800d588:	2e31      	cmp	r6, #49	; 0x31
 800d58a:	dc17      	bgt.n	800d5bc <__ieee754_rem_pio2+0x164>
 800d58c:	eeb0 0b46 	vmov.f64	d0, d6
 800d590:	ed84 3b00 	vstr	d3, [r4]
 800d594:	ed94 6b00 	vldr	d6, [r4]
 800d598:	2d00      	cmp	r5, #0
 800d59a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d59e:	ee30 7b47 	vsub.f64	d7, d0, d7
 800d5a2:	ed84 7b02 	vstr	d7, [r4, #8]
 800d5a6:	da87      	bge.n	800d4b8 <__ieee754_rem_pio2+0x60>
 800d5a8:	eeb1 6b46 	vneg.f64	d6, d6
 800d5ac:	ed84 6b00 	vstr	d6, [r4]
 800d5b0:	eeb1 7b47 	vneg.f64	d7, d7
 800d5b4:	4240      	negs	r0, r0
 800d5b6:	ed84 7b02 	vstr	d7, [r4, #8]
 800d5ba:	e77d      	b.n	800d4b8 <__ieee754_rem_pio2+0x60>
 800d5bc:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800d6a0 <__ieee754_rem_pio2+0x248>
 800d5c0:	eeb0 0b46 	vmov.f64	d0, d6
 800d5c4:	eea5 0b03 	vfma.f64	d0, d5, d3
 800d5c8:	ee36 7b40 	vsub.f64	d7, d6, d0
 800d5cc:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800d6a8 <__ieee754_rem_pio2+0x250>
 800d5d0:	eea5 7b03 	vfma.f64	d7, d5, d3
 800d5d4:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800d5d8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d5dc:	e7b4      	b.n	800d548 <__ieee754_rem_pio2+0xf0>
 800d5de:	4b3a      	ldr	r3, [pc, #232]	; (800d6c8 <__ieee754_rem_pio2+0x270>)
 800d5e0:	429e      	cmp	r6, r3
 800d5e2:	dd06      	ble.n	800d5f2 <__ieee754_rem_pio2+0x19a>
 800d5e4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800d5e8:	ed80 7b02 	vstr	d7, [r0, #8]
 800d5ec:	ed80 7b00 	vstr	d7, [r0]
 800d5f0:	e744      	b.n	800d47c <__ieee754_rem_pio2+0x24>
 800d5f2:	1532      	asrs	r2, r6, #20
 800d5f4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800d5f8:	ee10 0a10 	vmov	r0, s0
 800d5fc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800d600:	ec41 0b17 	vmov	d7, r0, r1
 800d604:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d608:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800d6b0 <__ieee754_rem_pio2+0x258>
 800d60c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d610:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d614:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d618:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d61c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d620:	a908      	add	r1, sp, #32
 800d622:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d626:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d62a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d62e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d632:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d636:	2303      	movs	r3, #3
 800d638:	ed31 7b02 	vldmdb	r1!, {d7}
 800d63c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d644:	f103 30ff 	add.w	r0, r3, #4294967295
 800d648:	d013      	beq.n	800d672 <__ieee754_rem_pio2+0x21a>
 800d64a:	4920      	ldr	r1, [pc, #128]	; (800d6cc <__ieee754_rem_pio2+0x274>)
 800d64c:	9101      	str	r1, [sp, #4]
 800d64e:	2102      	movs	r1, #2
 800d650:	9100      	str	r1, [sp, #0]
 800d652:	a802      	add	r0, sp, #8
 800d654:	4621      	mov	r1, r4
 800d656:	f000 f8ab 	bl	800d7b0 <__kernel_rem_pio2>
 800d65a:	2d00      	cmp	r5, #0
 800d65c:	f6bf af2c 	bge.w	800d4b8 <__ieee754_rem_pio2+0x60>
 800d660:	ed94 7b00 	vldr	d7, [r4]
 800d664:	eeb1 7b47 	vneg.f64	d7, d7
 800d668:	ed84 7b00 	vstr	d7, [r4]
 800d66c:	ed94 7b02 	vldr	d7, [r4, #8]
 800d670:	e79e      	b.n	800d5b0 <__ieee754_rem_pio2+0x158>
 800d672:	4603      	mov	r3, r0
 800d674:	e7e0      	b.n	800d638 <__ieee754_rem_pio2+0x1e0>
 800d676:	bf00      	nop
 800d678:	54400000 	.word	0x54400000
 800d67c:	3ff921fb 	.word	0x3ff921fb
 800d680:	1a626331 	.word	0x1a626331
 800d684:	3dd0b461 	.word	0x3dd0b461
 800d688:	1a600000 	.word	0x1a600000
 800d68c:	3dd0b461 	.word	0x3dd0b461
 800d690:	2e037073 	.word	0x2e037073
 800d694:	3ba3198a 	.word	0x3ba3198a
 800d698:	6dc9c883 	.word	0x6dc9c883
 800d69c:	3fe45f30 	.word	0x3fe45f30
 800d6a0:	2e000000 	.word	0x2e000000
 800d6a4:	3ba3198a 	.word	0x3ba3198a
 800d6a8:	252049c1 	.word	0x252049c1
 800d6ac:	397b839a 	.word	0x397b839a
 800d6b0:	00000000 	.word	0x00000000
 800d6b4:	41700000 	.word	0x41700000
 800d6b8:	3fe921fb 	.word	0x3fe921fb
 800d6bc:	4002d97b 	.word	0x4002d97b
 800d6c0:	413921fb 	.word	0x413921fb
 800d6c4:	0800e200 	.word	0x0800e200
 800d6c8:	7fefffff 	.word	0x7fefffff
 800d6cc:	0800e280 	.word	0x0800e280

0800d6d0 <__ieee754_sqrt>:
 800d6d0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800d6d4:	4770      	bx	lr
	...

0800d6d8 <__kernel_cos>:
 800d6d8:	ee10 1a90 	vmov	r1, s1
 800d6dc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d6e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d6e4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800d6e8:	da05      	bge.n	800d6f6 <__kernel_cos+0x1e>
 800d6ea:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800d6ee:	ee16 3a90 	vmov	r3, s13
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d03d      	beq.n	800d772 <__kernel_cos+0x9a>
 800d6f6:	ee20 4b00 	vmul.f64	d4, d0, d0
 800d6fa:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d6fe:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800d778 <__kernel_cos+0xa0>
 800d702:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800d706:	ee24 6b06 	vmul.f64	d6, d4, d6
 800d70a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800d780 <__kernel_cos+0xa8>
 800d70e:	eea4 5b03 	vfma.f64	d5, d4, d3
 800d712:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800d788 <__kernel_cos+0xb0>
 800d716:	eea5 3b04 	vfma.f64	d3, d5, d4
 800d71a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800d790 <__kernel_cos+0xb8>
 800d71e:	eea3 5b04 	vfma.f64	d5, d3, d4
 800d722:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800d798 <__kernel_cos+0xc0>
 800d726:	4b20      	ldr	r3, [pc, #128]	; (800d7a8 <__kernel_cos+0xd0>)
 800d728:	eea5 3b04 	vfma.f64	d3, d5, d4
 800d72c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800d7a0 <__kernel_cos+0xc8>
 800d730:	4299      	cmp	r1, r3
 800d732:	eea3 5b04 	vfma.f64	d5, d3, d4
 800d736:	ee25 5b04 	vmul.f64	d5, d5, d4
 800d73a:	eea4 1b05 	vfma.f64	d1, d4, d5
 800d73e:	dc04      	bgt.n	800d74a <__kernel_cos+0x72>
 800d740:	ee36 6b41 	vsub.f64	d6, d6, d1
 800d744:	ee37 0b46 	vsub.f64	d0, d7, d6
 800d748:	4770      	bx	lr
 800d74a:	4b18      	ldr	r3, [pc, #96]	; (800d7ac <__kernel_cos+0xd4>)
 800d74c:	4299      	cmp	r1, r3
 800d74e:	dc0d      	bgt.n	800d76c <__kernel_cos+0x94>
 800d750:	2200      	movs	r2, #0
 800d752:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800d756:	ec43 2b15 	vmov	d5, r2, r3
 800d75a:	ee37 0b45 	vsub.f64	d0, d7, d5
 800d75e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d762:	ee36 6b41 	vsub.f64	d6, d6, d1
 800d766:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d76a:	4770      	bx	lr
 800d76c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800d770:	e7f3      	b.n	800d75a <__kernel_cos+0x82>
 800d772:	eeb0 0b47 	vmov.f64	d0, d7
 800d776:	4770      	bx	lr
 800d778:	be8838d4 	.word	0xbe8838d4
 800d77c:	bda8fae9 	.word	0xbda8fae9
 800d780:	bdb4b1c4 	.word	0xbdb4b1c4
 800d784:	3e21ee9e 	.word	0x3e21ee9e
 800d788:	809c52ad 	.word	0x809c52ad
 800d78c:	be927e4f 	.word	0xbe927e4f
 800d790:	19cb1590 	.word	0x19cb1590
 800d794:	3efa01a0 	.word	0x3efa01a0
 800d798:	16c15177 	.word	0x16c15177
 800d79c:	bf56c16c 	.word	0xbf56c16c
 800d7a0:	5555554c 	.word	0x5555554c
 800d7a4:	3fa55555 	.word	0x3fa55555
 800d7a8:	3fd33332 	.word	0x3fd33332
 800d7ac:	3fe90000 	.word	0x3fe90000

0800d7b0 <__kernel_rem_pio2>:
 800d7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b4:	ed2d 8b06 	vpush	{d8-d10}
 800d7b8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800d7bc:	469b      	mov	fp, r3
 800d7be:	460e      	mov	r6, r1
 800d7c0:	4bc7      	ldr	r3, [pc, #796]	; (800dae0 <__kernel_rem_pio2+0x330>)
 800d7c2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800d7c4:	9002      	str	r0, [sp, #8]
 800d7c6:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800d7ca:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800d7cc:	1ed1      	subs	r1, r2, #3
 800d7ce:	2318      	movs	r3, #24
 800d7d0:	f06f 0417 	mvn.w	r4, #23
 800d7d4:	fb91 f1f3 	sdiv	r1, r1, r3
 800d7d8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800d7dc:	f10b 3aff 	add.w	sl, fp, #4294967295
 800d7e0:	fb01 4404 	mla	r4, r1, r4, r4
 800d7e4:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800dac8 <__kernel_rem_pio2+0x318>
 800d7e8:	4414      	add	r4, r2
 800d7ea:	eba1 050a 	sub.w	r5, r1, sl
 800d7ee:	aa1a      	add	r2, sp, #104	; 0x68
 800d7f0:	eb09 070a 	add.w	r7, r9, sl
 800d7f4:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800d7f8:	4696      	mov	lr, r2
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	42bb      	cmp	r3, r7
 800d7fe:	dd0f      	ble.n	800d820 <__kernel_rem_pio2+0x70>
 800d800:	af6a      	add	r7, sp, #424	; 0x1a8
 800d802:	2200      	movs	r2, #0
 800d804:	454a      	cmp	r2, r9
 800d806:	dc28      	bgt.n	800d85a <__kernel_rem_pio2+0xaa>
 800d808:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800d80c:	eb0b 0302 	add.w	r3, fp, r2
 800d810:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800d814:	9d02      	ldr	r5, [sp, #8]
 800d816:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800dac8 <__kernel_rem_pio2+0x318>
 800d81a:	f04f 0c00 	mov.w	ip, #0
 800d81e:	e016      	b.n	800d84e <__kernel_rem_pio2+0x9e>
 800d820:	42dd      	cmn	r5, r3
 800d822:	d409      	bmi.n	800d838 <__kernel_rem_pio2+0x88>
 800d824:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800d828:	ee07 2a90 	vmov	s15, r2
 800d82c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d830:	ecae 7b02 	vstmia	lr!, {d7}
 800d834:	3301      	adds	r3, #1
 800d836:	e7e1      	b.n	800d7fc <__kernel_rem_pio2+0x4c>
 800d838:	eeb0 7b46 	vmov.f64	d7, d6
 800d83c:	e7f8      	b.n	800d830 <__kernel_rem_pio2+0x80>
 800d83e:	ecb5 5b02 	vldmia	r5!, {d5}
 800d842:	ed33 6b02 	vldmdb	r3!, {d6}
 800d846:	f10c 0c01 	add.w	ip, ip, #1
 800d84a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d84e:	45d4      	cmp	ip, sl
 800d850:	ddf5      	ble.n	800d83e <__kernel_rem_pio2+0x8e>
 800d852:	eca7 7b02 	vstmia	r7!, {d7}
 800d856:	3201      	adds	r2, #1
 800d858:	e7d4      	b.n	800d804 <__kernel_rem_pio2+0x54>
 800d85a:	ab06      	add	r3, sp, #24
 800d85c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d860:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800dad0 <__kernel_rem_pio2+0x320>
 800d864:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800dad8 <__kernel_rem_pio2+0x328>
 800d868:	9304      	str	r3, [sp, #16]
 800d86a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800d86e:	9303      	str	r3, [sp, #12]
 800d870:	464d      	mov	r5, r9
 800d872:	ab92      	add	r3, sp, #584	; 0x248
 800d874:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800d878:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d87c:	3f01      	subs	r7, #1
 800d87e:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800d882:	00ff      	lsls	r7, r7, #3
 800d884:	ab92      	add	r3, sp, #584	; 0x248
 800d886:	19da      	adds	r2, r3, r7
 800d888:	3a98      	subs	r2, #152	; 0x98
 800d88a:	2300      	movs	r3, #0
 800d88c:	1ae9      	subs	r1, r5, r3
 800d88e:	2900      	cmp	r1, #0
 800d890:	dc4e      	bgt.n	800d930 <__kernel_rem_pio2+0x180>
 800d892:	4620      	mov	r0, r4
 800d894:	f000 fc00 	bl	800e098 <scalbn>
 800d898:	eeb0 8b40 	vmov.f64	d8, d0
 800d89c:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800d8a0:	ee28 0b00 	vmul.f64	d0, d8, d0
 800d8a4:	f000 fb7c 	bl	800dfa0 <floor>
 800d8a8:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800d8ac:	eea0 8b47 	vfms.f64	d8, d0, d7
 800d8b0:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800d8b4:	2c00      	cmp	r4, #0
 800d8b6:	edcd 7a01 	vstr	s15, [sp, #4]
 800d8ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d8be:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d8c2:	dd4a      	ble.n	800d95a <__kernel_rem_pio2+0x1aa>
 800d8c4:	1e69      	subs	r1, r5, #1
 800d8c6:	ab06      	add	r3, sp, #24
 800d8c8:	f1c4 0018 	rsb	r0, r4, #24
 800d8cc:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800d8d0:	9a01      	ldr	r2, [sp, #4]
 800d8d2:	fa4c f300 	asr.w	r3, ip, r0
 800d8d6:	441a      	add	r2, r3
 800d8d8:	4083      	lsls	r3, r0
 800d8da:	9201      	str	r2, [sp, #4]
 800d8dc:	ebac 0203 	sub.w	r2, ip, r3
 800d8e0:	ab06      	add	r3, sp, #24
 800d8e2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800d8e6:	f1c4 0317 	rsb	r3, r4, #23
 800d8ea:	fa42 f803 	asr.w	r8, r2, r3
 800d8ee:	f1b8 0f00 	cmp.w	r8, #0
 800d8f2:	dd43      	ble.n	800d97c <__kernel_rem_pio2+0x1cc>
 800d8f4:	9b01      	ldr	r3, [sp, #4]
 800d8f6:	2000      	movs	r0, #0
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	9301      	str	r3, [sp, #4]
 800d8fc:	4601      	mov	r1, r0
 800d8fe:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800d902:	4285      	cmp	r5, r0
 800d904:	dc6e      	bgt.n	800d9e4 <__kernel_rem_pio2+0x234>
 800d906:	2c00      	cmp	r4, #0
 800d908:	dd04      	ble.n	800d914 <__kernel_rem_pio2+0x164>
 800d90a:	2c01      	cmp	r4, #1
 800d90c:	d07f      	beq.n	800da0e <__kernel_rem_pio2+0x25e>
 800d90e:	2c02      	cmp	r4, #2
 800d910:	f000 8087 	beq.w	800da22 <__kernel_rem_pio2+0x272>
 800d914:	f1b8 0f02 	cmp.w	r8, #2
 800d918:	d130      	bne.n	800d97c <__kernel_rem_pio2+0x1cc>
 800d91a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d91e:	ee30 8b48 	vsub.f64	d8, d0, d8
 800d922:	b359      	cbz	r1, 800d97c <__kernel_rem_pio2+0x1cc>
 800d924:	4620      	mov	r0, r4
 800d926:	f000 fbb7 	bl	800e098 <scalbn>
 800d92a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800d92e:	e025      	b.n	800d97c <__kernel_rem_pio2+0x1cc>
 800d930:	ee20 7b09 	vmul.f64	d7, d0, d9
 800d934:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d938:	a806      	add	r0, sp, #24
 800d93a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800d93e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800d942:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d946:	ee10 1a10 	vmov	r1, s0
 800d94a:	ed32 0b02 	vldmdb	r2!, {d0}
 800d94e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800d952:	ee37 0b00 	vadd.f64	d0, d7, d0
 800d956:	3301      	adds	r3, #1
 800d958:	e798      	b.n	800d88c <__kernel_rem_pio2+0xdc>
 800d95a:	d106      	bne.n	800d96a <__kernel_rem_pio2+0x1ba>
 800d95c:	1e6b      	subs	r3, r5, #1
 800d95e:	aa06      	add	r2, sp, #24
 800d960:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d964:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800d968:	e7c1      	b.n	800d8ee <__kernel_rem_pio2+0x13e>
 800d96a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d96e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d976:	da32      	bge.n	800d9de <__kernel_rem_pio2+0x22e>
 800d978:	f04f 0800 	mov.w	r8, #0
 800d97c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d984:	f040 80b0 	bne.w	800dae8 <__kernel_rem_pio2+0x338>
 800d988:	1e6b      	subs	r3, r5, #1
 800d98a:	4618      	mov	r0, r3
 800d98c:	2200      	movs	r2, #0
 800d98e:	4548      	cmp	r0, r9
 800d990:	da4e      	bge.n	800da30 <__kernel_rem_pio2+0x280>
 800d992:	2a00      	cmp	r2, #0
 800d994:	f000 8088 	beq.w	800daa8 <__kernel_rem_pio2+0x2f8>
 800d998:	aa06      	add	r2, sp, #24
 800d99a:	3c18      	subs	r4, #24
 800d99c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d9a0:	2900      	cmp	r1, #0
 800d9a2:	f000 808e 	beq.w	800dac2 <__kernel_rem_pio2+0x312>
 800d9a6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	9302      	str	r3, [sp, #8]
 800d9ae:	f000 fb73 	bl	800e098 <scalbn>
 800d9b2:	9b02      	ldr	r3, [sp, #8]
 800d9b4:	aa6a      	add	r2, sp, #424	; 0x1a8
 800d9b6:	00d9      	lsls	r1, r3, #3
 800d9b8:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800dad0 <__kernel_rem_pio2+0x320>
 800d9bc:	1850      	adds	r0, r2, r1
 800d9be:	f100 0508 	add.w	r5, r0, #8
 800d9c2:	461c      	mov	r4, r3
 800d9c4:	2c00      	cmp	r4, #0
 800d9c6:	f280 80bd 	bge.w	800db44 <__kernel_rem_pio2+0x394>
 800d9ca:	2500      	movs	r5, #0
 800d9cc:	1b5c      	subs	r4, r3, r5
 800d9ce:	2c00      	cmp	r4, #0
 800d9d0:	f2c0 80dd 	blt.w	800db8e <__kernel_rem_pio2+0x3de>
 800d9d4:	4f43      	ldr	r7, [pc, #268]	; (800dae4 <__kernel_rem_pio2+0x334>)
 800d9d6:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800dac8 <__kernel_rem_pio2+0x318>
 800d9da:	2400      	movs	r4, #0
 800d9dc:	e0cb      	b.n	800db76 <__kernel_rem_pio2+0x3c6>
 800d9de:	f04f 0802 	mov.w	r8, #2
 800d9e2:	e787      	b.n	800d8f4 <__kernel_rem_pio2+0x144>
 800d9e4:	ab06      	add	r3, sp, #24
 800d9e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d9ea:	b949      	cbnz	r1, 800da00 <__kernel_rem_pio2+0x250>
 800d9ec:	b12b      	cbz	r3, 800d9fa <__kernel_rem_pio2+0x24a>
 800d9ee:	aa06      	add	r2, sp, #24
 800d9f0:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d9f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	3001      	adds	r0, #1
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	e780      	b.n	800d902 <__kernel_rem_pio2+0x152>
 800da00:	aa06      	add	r2, sp, #24
 800da02:	ebac 0303 	sub.w	r3, ip, r3
 800da06:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800da0a:	460b      	mov	r3, r1
 800da0c:	e7f5      	b.n	800d9fa <__kernel_rem_pio2+0x24a>
 800da0e:	1e68      	subs	r0, r5, #1
 800da10:	ab06      	add	r3, sp, #24
 800da12:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800da16:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800da1a:	aa06      	add	r2, sp, #24
 800da1c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800da20:	e778      	b.n	800d914 <__kernel_rem_pio2+0x164>
 800da22:	1e68      	subs	r0, r5, #1
 800da24:	ab06      	add	r3, sp, #24
 800da26:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800da2a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800da2e:	e7f4      	b.n	800da1a <__kernel_rem_pio2+0x26a>
 800da30:	a906      	add	r1, sp, #24
 800da32:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800da36:	3801      	subs	r0, #1
 800da38:	430a      	orrs	r2, r1
 800da3a:	e7a8      	b.n	800d98e <__kernel_rem_pio2+0x1de>
 800da3c:	f10c 0c01 	add.w	ip, ip, #1
 800da40:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800da44:	2a00      	cmp	r2, #0
 800da46:	d0f9      	beq.n	800da3c <__kernel_rem_pio2+0x28c>
 800da48:	eb0b 0305 	add.w	r3, fp, r5
 800da4c:	aa1a      	add	r2, sp, #104	; 0x68
 800da4e:	00db      	lsls	r3, r3, #3
 800da50:	1898      	adds	r0, r3, r2
 800da52:	3008      	adds	r0, #8
 800da54:	1c69      	adds	r1, r5, #1
 800da56:	3708      	adds	r7, #8
 800da58:	2200      	movs	r2, #0
 800da5a:	4465      	add	r5, ip
 800da5c:	9005      	str	r0, [sp, #20]
 800da5e:	428d      	cmp	r5, r1
 800da60:	f6ff af07 	blt.w	800d872 <__kernel_rem_pio2+0xc2>
 800da64:	a81a      	add	r0, sp, #104	; 0x68
 800da66:	eb02 0c03 	add.w	ip, r2, r3
 800da6a:	4484      	add	ip, r0
 800da6c:	9803      	ldr	r0, [sp, #12]
 800da6e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800da72:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800da76:	9001      	str	r0, [sp, #4]
 800da78:	ee07 0a90 	vmov	s15, r0
 800da7c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800da80:	9805      	ldr	r0, [sp, #20]
 800da82:	ed8c 7b00 	vstr	d7, [ip]
 800da86:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800dac8 <__kernel_rem_pio2+0x318>
 800da8a:	eb00 0802 	add.w	r8, r0, r2
 800da8e:	f04f 0c00 	mov.w	ip, #0
 800da92:	45d4      	cmp	ip, sl
 800da94:	dd0c      	ble.n	800dab0 <__kernel_rem_pio2+0x300>
 800da96:	eb02 0c07 	add.w	ip, r2, r7
 800da9a:	a86a      	add	r0, sp, #424	; 0x1a8
 800da9c:	4484      	add	ip, r0
 800da9e:	ed8c 7b02 	vstr	d7, [ip, #8]
 800daa2:	3101      	adds	r1, #1
 800daa4:	3208      	adds	r2, #8
 800daa6:	e7da      	b.n	800da5e <__kernel_rem_pio2+0x2ae>
 800daa8:	9b04      	ldr	r3, [sp, #16]
 800daaa:	f04f 0c01 	mov.w	ip, #1
 800daae:	e7c7      	b.n	800da40 <__kernel_rem_pio2+0x290>
 800dab0:	ecbe 5b02 	vldmia	lr!, {d5}
 800dab4:	ed38 6b02 	vldmdb	r8!, {d6}
 800dab8:	f10c 0c01 	add.w	ip, ip, #1
 800dabc:	eea5 7b06 	vfma.f64	d7, d5, d6
 800dac0:	e7e7      	b.n	800da92 <__kernel_rem_pio2+0x2e2>
 800dac2:	3b01      	subs	r3, #1
 800dac4:	e768      	b.n	800d998 <__kernel_rem_pio2+0x1e8>
 800dac6:	bf00      	nop
	...
 800dad4:	3e700000 	.word	0x3e700000
 800dad8:	00000000 	.word	0x00000000
 800dadc:	41700000 	.word	0x41700000
 800dae0:	0800e3c8 	.word	0x0800e3c8
 800dae4:	0800e388 	.word	0x0800e388
 800dae8:	4260      	negs	r0, r4
 800daea:	eeb0 0b48 	vmov.f64	d0, d8
 800daee:	f000 fad3 	bl	800e098 <scalbn>
 800daf2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800dcd0 <__kernel_rem_pio2+0x520>
 800daf6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800dafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dafe:	db18      	blt.n	800db32 <__kernel_rem_pio2+0x382>
 800db00:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800dcd8 <__kernel_rem_pio2+0x528>
 800db04:	ee20 7b07 	vmul.f64	d7, d0, d7
 800db08:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800db0c:	aa06      	add	r2, sp, #24
 800db0e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800db12:	eea5 0b46 	vfms.f64	d0, d5, d6
 800db16:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800db1a:	a906      	add	r1, sp, #24
 800db1c:	ee10 3a10 	vmov	r3, s0
 800db20:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800db24:	1c6b      	adds	r3, r5, #1
 800db26:	ee17 2a10 	vmov	r2, s14
 800db2a:	3418      	adds	r4, #24
 800db2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800db30:	e739      	b.n	800d9a6 <__kernel_rem_pio2+0x1f6>
 800db32:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800db36:	aa06      	add	r2, sp, #24
 800db38:	ee10 3a10 	vmov	r3, s0
 800db3c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800db40:	462b      	mov	r3, r5
 800db42:	e730      	b.n	800d9a6 <__kernel_rem_pio2+0x1f6>
 800db44:	aa06      	add	r2, sp, #24
 800db46:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800db4a:	9202      	str	r2, [sp, #8]
 800db4c:	ee07 2a90 	vmov	s15, r2
 800db50:	3c01      	subs	r4, #1
 800db52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800db56:	ee27 7b00 	vmul.f64	d7, d7, d0
 800db5a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800db5e:	ed25 7b02 	vstmdb	r5!, {d7}
 800db62:	e72f      	b.n	800d9c4 <__kernel_rem_pio2+0x214>
 800db64:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800db68:	ecb7 5b02 	vldmia	r7!, {d5}
 800db6c:	ed9c 6b00 	vldr	d6, [ip]
 800db70:	3401      	adds	r4, #1
 800db72:	eea5 7b06 	vfma.f64	d7, d5, d6
 800db76:	454c      	cmp	r4, r9
 800db78:	dc01      	bgt.n	800db7e <__kernel_rem_pio2+0x3ce>
 800db7a:	42a5      	cmp	r5, r4
 800db7c:	daf2      	bge.n	800db64 <__kernel_rem_pio2+0x3b4>
 800db7e:	aa42      	add	r2, sp, #264	; 0x108
 800db80:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800db84:	ed84 7b00 	vstr	d7, [r4]
 800db88:	3501      	adds	r5, #1
 800db8a:	3808      	subs	r0, #8
 800db8c:	e71e      	b.n	800d9cc <__kernel_rem_pio2+0x21c>
 800db8e:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800db90:	2a03      	cmp	r2, #3
 800db92:	d84e      	bhi.n	800dc32 <__kernel_rem_pio2+0x482>
 800db94:	e8df f002 	tbb	[pc, r2]
 800db98:	021f1f3e 	.word	0x021f1f3e
 800db9c:	3108      	adds	r1, #8
 800db9e:	aa42      	add	r2, sp, #264	; 0x108
 800dba0:	4411      	add	r1, r2
 800dba2:	4608      	mov	r0, r1
 800dba4:	461c      	mov	r4, r3
 800dba6:	2c00      	cmp	r4, #0
 800dba8:	dc61      	bgt.n	800dc6e <__kernel_rem_pio2+0x4be>
 800dbaa:	4608      	mov	r0, r1
 800dbac:	461c      	mov	r4, r3
 800dbae:	2c01      	cmp	r4, #1
 800dbb0:	dc6d      	bgt.n	800dc8e <__kernel_rem_pio2+0x4de>
 800dbb2:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800dce0 <__kernel_rem_pio2+0x530>
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	dc79      	bgt.n	800dcae <__kernel_rem_pio2+0x4fe>
 800dbba:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800dbbe:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800dbc2:	f1b8 0f00 	cmp.w	r8, #0
 800dbc6:	d178      	bne.n	800dcba <__kernel_rem_pio2+0x50a>
 800dbc8:	ed86 5b00 	vstr	d5, [r6]
 800dbcc:	ed86 6b02 	vstr	d6, [r6, #8]
 800dbd0:	ed86 7b04 	vstr	d7, [r6, #16]
 800dbd4:	e02d      	b.n	800dc32 <__kernel_rem_pio2+0x482>
 800dbd6:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800dce0 <__kernel_rem_pio2+0x530>
 800dbda:	3108      	adds	r1, #8
 800dbdc:	aa42      	add	r2, sp, #264	; 0x108
 800dbde:	4411      	add	r1, r2
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	da34      	bge.n	800dc50 <__kernel_rem_pio2+0x4a0>
 800dbe6:	f1b8 0f00 	cmp.w	r8, #0
 800dbea:	d037      	beq.n	800dc5c <__kernel_rem_pio2+0x4ac>
 800dbec:	eeb1 7b46 	vneg.f64	d7, d6
 800dbf0:	ed86 7b00 	vstr	d7, [r6]
 800dbf4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800dbf8:	a844      	add	r0, sp, #272	; 0x110
 800dbfa:	2101      	movs	r1, #1
 800dbfc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dc00:	428b      	cmp	r3, r1
 800dc02:	da2e      	bge.n	800dc62 <__kernel_rem_pio2+0x4b2>
 800dc04:	f1b8 0f00 	cmp.w	r8, #0
 800dc08:	d001      	beq.n	800dc0e <__kernel_rem_pio2+0x45e>
 800dc0a:	eeb1 7b47 	vneg.f64	d7, d7
 800dc0e:	ed86 7b02 	vstr	d7, [r6, #8]
 800dc12:	e00e      	b.n	800dc32 <__kernel_rem_pio2+0x482>
 800dc14:	aa92      	add	r2, sp, #584	; 0x248
 800dc16:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800dce0 <__kernel_rem_pio2+0x530>
 800dc1a:	4411      	add	r1, r2
 800dc1c:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	da0f      	bge.n	800dc44 <__kernel_rem_pio2+0x494>
 800dc24:	f1b8 0f00 	cmp.w	r8, #0
 800dc28:	d001      	beq.n	800dc2e <__kernel_rem_pio2+0x47e>
 800dc2a:	eeb1 7b47 	vneg.f64	d7, d7
 800dc2e:	ed86 7b00 	vstr	d7, [r6]
 800dc32:	9b01      	ldr	r3, [sp, #4]
 800dc34:	f003 0007 	and.w	r0, r3, #7
 800dc38:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800dc3c:	ecbd 8b06 	vpop	{d8-d10}
 800dc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc44:	ed31 6b02 	vldmdb	r1!, {d6}
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dc4e:	e7e7      	b.n	800dc20 <__kernel_rem_pio2+0x470>
 800dc50:	ed31 7b02 	vldmdb	r1!, {d7}
 800dc54:	3801      	subs	r0, #1
 800dc56:	ee36 6b07 	vadd.f64	d6, d6, d7
 800dc5a:	e7c2      	b.n	800dbe2 <__kernel_rem_pio2+0x432>
 800dc5c:	eeb0 7b46 	vmov.f64	d7, d6
 800dc60:	e7c6      	b.n	800dbf0 <__kernel_rem_pio2+0x440>
 800dc62:	ecb0 6b02 	vldmia	r0!, {d6}
 800dc66:	3101      	adds	r1, #1
 800dc68:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dc6c:	e7c8      	b.n	800dc00 <__kernel_rem_pio2+0x450>
 800dc6e:	ed10 7b04 	vldr	d7, [r0, #-16]
 800dc72:	ed30 5b02 	vldmdb	r0!, {d5}
 800dc76:	3c01      	subs	r4, #1
 800dc78:	ee37 6b05 	vadd.f64	d6, d7, d5
 800dc7c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dc80:	ed00 6b02 	vstr	d6, [r0, #-8]
 800dc84:	ee37 7b05 	vadd.f64	d7, d7, d5
 800dc88:	ed80 7b00 	vstr	d7, [r0]
 800dc8c:	e78b      	b.n	800dba6 <__kernel_rem_pio2+0x3f6>
 800dc8e:	ed10 7b04 	vldr	d7, [r0, #-16]
 800dc92:	ed30 5b02 	vldmdb	r0!, {d5}
 800dc96:	3c01      	subs	r4, #1
 800dc98:	ee37 6b05 	vadd.f64	d6, d7, d5
 800dc9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dca0:	ed00 6b02 	vstr	d6, [r0, #-8]
 800dca4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800dca8:	ed80 7b00 	vstr	d7, [r0]
 800dcac:	e77f      	b.n	800dbae <__kernel_rem_pio2+0x3fe>
 800dcae:	ed31 6b02 	vldmdb	r1!, {d6}
 800dcb2:	3b01      	subs	r3, #1
 800dcb4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dcb8:	e77d      	b.n	800dbb6 <__kernel_rem_pio2+0x406>
 800dcba:	eeb1 5b45 	vneg.f64	d5, d5
 800dcbe:	eeb1 6b46 	vneg.f64	d6, d6
 800dcc2:	ed86 5b00 	vstr	d5, [r6]
 800dcc6:	eeb1 7b47 	vneg.f64	d7, d7
 800dcca:	ed86 6b02 	vstr	d6, [r6, #8]
 800dcce:	e77f      	b.n	800dbd0 <__kernel_rem_pio2+0x420>
 800dcd0:	00000000 	.word	0x00000000
 800dcd4:	41700000 	.word	0x41700000
 800dcd8:	00000000 	.word	0x00000000
 800dcdc:	3e700000 	.word	0x3e700000
	...

0800dce8 <__kernel_sin>:
 800dce8:	ee10 3a90 	vmov	r3, s1
 800dcec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dcf0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dcf4:	da04      	bge.n	800dd00 <__kernel_sin+0x18>
 800dcf6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800dcfa:	ee17 3a90 	vmov	r3, s15
 800dcfe:	b35b      	cbz	r3, 800dd58 <__kernel_sin+0x70>
 800dd00:	ee20 6b00 	vmul.f64	d6, d0, d0
 800dd04:	ee20 5b06 	vmul.f64	d5, d0, d6
 800dd08:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800dd60 <__kernel_sin+0x78>
 800dd0c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800dd68 <__kernel_sin+0x80>
 800dd10:	eea6 4b07 	vfma.f64	d4, d6, d7
 800dd14:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800dd70 <__kernel_sin+0x88>
 800dd18:	eea4 7b06 	vfma.f64	d7, d4, d6
 800dd1c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800dd78 <__kernel_sin+0x90>
 800dd20:	eea7 4b06 	vfma.f64	d4, d7, d6
 800dd24:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800dd80 <__kernel_sin+0x98>
 800dd28:	eea4 7b06 	vfma.f64	d7, d4, d6
 800dd2c:	b930      	cbnz	r0, 800dd3c <__kernel_sin+0x54>
 800dd2e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800dd88 <__kernel_sin+0xa0>
 800dd32:	eea6 4b07 	vfma.f64	d4, d6, d7
 800dd36:	eea4 0b05 	vfma.f64	d0, d4, d5
 800dd3a:	4770      	bx	lr
 800dd3c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800dd40:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800dd44:	eea1 7b04 	vfma.f64	d7, d1, d4
 800dd48:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800dd4c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800dd90 <__kernel_sin+0xa8>
 800dd50:	eea5 1b07 	vfma.f64	d1, d5, d7
 800dd54:	ee30 0b41 	vsub.f64	d0, d0, d1
 800dd58:	4770      	bx	lr
 800dd5a:	bf00      	nop
 800dd5c:	f3af 8000 	nop.w
 800dd60:	5acfd57c 	.word	0x5acfd57c
 800dd64:	3de5d93a 	.word	0x3de5d93a
 800dd68:	8a2b9ceb 	.word	0x8a2b9ceb
 800dd6c:	be5ae5e6 	.word	0xbe5ae5e6
 800dd70:	57b1fe7d 	.word	0x57b1fe7d
 800dd74:	3ec71de3 	.word	0x3ec71de3
 800dd78:	19c161d5 	.word	0x19c161d5
 800dd7c:	bf2a01a0 	.word	0xbf2a01a0
 800dd80:	1110f8a6 	.word	0x1110f8a6
 800dd84:	3f811111 	.word	0x3f811111
 800dd88:	55555549 	.word	0x55555549
 800dd8c:	bfc55555 	.word	0xbfc55555
 800dd90:	55555549 	.word	0x55555549
 800dd94:	3fc55555 	.word	0x3fc55555

0800dd98 <atan>:
 800dd98:	b538      	push	{r3, r4, r5, lr}
 800dd9a:	eeb0 7b40 	vmov.f64	d7, d0
 800dd9e:	ee17 5a90 	vmov	r5, s15
 800dda2:	4b73      	ldr	r3, [pc, #460]	; (800df70 <atan+0x1d8>)
 800dda4:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800dda8:	429c      	cmp	r4, r3
 800ddaa:	dd13      	ble.n	800ddd4 <atan+0x3c>
 800ddac:	4b71      	ldr	r3, [pc, #452]	; (800df74 <atan+0x1dc>)
 800ddae:	429c      	cmp	r4, r3
 800ddb0:	dc03      	bgt.n	800ddba <atan+0x22>
 800ddb2:	d107      	bne.n	800ddc4 <atan+0x2c>
 800ddb4:	ee10 3a10 	vmov	r3, s0
 800ddb8:	b123      	cbz	r3, 800ddc4 <atan+0x2c>
 800ddba:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ddbe:	eeb0 0b47 	vmov.f64	d0, d7
 800ddc2:	bd38      	pop	{r3, r4, r5, pc}
 800ddc4:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800df00 <atan+0x168>
 800ddc8:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800df08 <atan+0x170>
 800ddcc:	2d00      	cmp	r5, #0
 800ddce:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800ddd2:	e7f4      	b.n	800ddbe <atan+0x26>
 800ddd4:	4b68      	ldr	r3, [pc, #416]	; (800df78 <atan+0x1e0>)
 800ddd6:	429c      	cmp	r4, r3
 800ddd8:	dc11      	bgt.n	800ddfe <atan+0x66>
 800ddda:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ddde:	429c      	cmp	r4, r3
 800dde0:	dc0a      	bgt.n	800ddf8 <atan+0x60>
 800dde2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800dde6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800df10 <atan+0x178>
 800ddea:	ee30 6b06 	vadd.f64	d6, d0, d6
 800ddee:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ddf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddf6:	dce2      	bgt.n	800ddbe <atan+0x26>
 800ddf8:	f04f 33ff 	mov.w	r3, #4294967295
 800ddfc:	e013      	b.n	800de26 <atan+0x8e>
 800ddfe:	f000 f8c5 	bl	800df8c <fabs>
 800de02:	4b5e      	ldr	r3, [pc, #376]	; (800df7c <atan+0x1e4>)
 800de04:	429c      	cmp	r4, r3
 800de06:	dc4f      	bgt.n	800dea8 <atan+0x110>
 800de08:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800de0c:	429c      	cmp	r4, r3
 800de0e:	dc41      	bgt.n	800de94 <atan+0xfc>
 800de10:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800de14:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800de18:	2300      	movs	r3, #0
 800de1a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800de1e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800de22:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800de26:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800df18 <atan+0x180>
 800de2a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800de2e:	ee24 5b04 	vmul.f64	d5, d4, d4
 800de32:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800df20 <atan+0x188>
 800de36:	eea5 3b06 	vfma.f64	d3, d5, d6
 800de3a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800df28 <atan+0x190>
 800de3e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800de42:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800df30 <atan+0x198>
 800de46:	eea6 3b05 	vfma.f64	d3, d6, d5
 800de4a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800df38 <atan+0x1a0>
 800de4e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800de52:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800df40 <atan+0x1a8>
 800de56:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800df48 <atan+0x1b0>
 800de5a:	eea6 3b05 	vfma.f64	d3, d6, d5
 800de5e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800df50 <atan+0x1b8>
 800de62:	eea5 2b06 	vfma.f64	d2, d5, d6
 800de66:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800df58 <atan+0x1c0>
 800de6a:	eea2 6b05 	vfma.f64	d6, d2, d5
 800de6e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800df60 <atan+0x1c8>
 800de72:	eea6 2b05 	vfma.f64	d2, d6, d5
 800de76:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800df68 <atan+0x1d0>
 800de7a:	1c5a      	adds	r2, r3, #1
 800de7c:	eea2 6b05 	vfma.f64	d6, d2, d5
 800de80:	ee26 6b05 	vmul.f64	d6, d6, d5
 800de84:	eea3 6b04 	vfma.f64	d6, d3, d4
 800de88:	ee26 6b07 	vmul.f64	d6, d6, d7
 800de8c:	d121      	bne.n	800ded2 <atan+0x13a>
 800de8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800de92:	e794      	b.n	800ddbe <atan+0x26>
 800de94:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800de98:	2301      	movs	r3, #1
 800de9a:	ee30 6b47 	vsub.f64	d6, d0, d7
 800de9e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dea2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800dea6:	e7be      	b.n	800de26 <atan+0x8e>
 800dea8:	4b35      	ldr	r3, [pc, #212]	; (800df80 <atan+0x1e8>)
 800deaa:	429c      	cmp	r4, r3
 800deac:	dc0b      	bgt.n	800dec6 <atan+0x12e>
 800deae:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800deb2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800deb6:	ee30 5b47 	vsub.f64	d5, d0, d7
 800deba:	eea0 6b07 	vfma.f64	d6, d0, d7
 800debe:	2302      	movs	r3, #2
 800dec0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800dec4:	e7af      	b.n	800de26 <atan+0x8e>
 800dec6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800deca:	2303      	movs	r3, #3
 800decc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800ded0:	e7a9      	b.n	800de26 <atan+0x8e>
 800ded2:	4a2c      	ldr	r2, [pc, #176]	; (800df84 <atan+0x1ec>)
 800ded4:	492c      	ldr	r1, [pc, #176]	; (800df88 <atan+0x1f0>)
 800ded6:	00db      	lsls	r3, r3, #3
 800ded8:	441a      	add	r2, r3
 800deda:	440b      	add	r3, r1
 800dedc:	ed93 5b00 	vldr	d5, [r3]
 800dee0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dee4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dee8:	ed92 6b00 	vldr	d6, [r2]
 800deec:	2d00      	cmp	r5, #0
 800deee:	ee36 7b47 	vsub.f64	d7, d6, d7
 800def2:	bfb8      	it	lt
 800def4:	eeb1 7b47 	vneglt.f64	d7, d7
 800def8:	e761      	b.n	800ddbe <atan+0x26>
 800defa:	bf00      	nop
 800defc:	f3af 8000 	nop.w
 800df00:	54442d18 	.word	0x54442d18
 800df04:	bff921fb 	.word	0xbff921fb
 800df08:	54442d18 	.word	0x54442d18
 800df0c:	3ff921fb 	.word	0x3ff921fb
 800df10:	8800759c 	.word	0x8800759c
 800df14:	7e37e43c 	.word	0x7e37e43c
 800df18:	e322da11 	.word	0xe322da11
 800df1c:	3f90ad3a 	.word	0x3f90ad3a
 800df20:	24760deb 	.word	0x24760deb
 800df24:	3fa97b4b 	.word	0x3fa97b4b
 800df28:	a0d03d51 	.word	0xa0d03d51
 800df2c:	3fb10d66 	.word	0x3fb10d66
 800df30:	c54c206e 	.word	0xc54c206e
 800df34:	3fb745cd 	.word	0x3fb745cd
 800df38:	920083ff 	.word	0x920083ff
 800df3c:	3fc24924 	.word	0x3fc24924
 800df40:	5555550d 	.word	0x5555550d
 800df44:	3fd55555 	.word	0x3fd55555
 800df48:	52defd9a 	.word	0x52defd9a
 800df4c:	bfadde2d 	.word	0xbfadde2d
 800df50:	2c6a6c2f 	.word	0x2c6a6c2f
 800df54:	bfa2b444 	.word	0xbfa2b444
 800df58:	af749a6d 	.word	0xaf749a6d
 800df5c:	bfb3b0f2 	.word	0xbfb3b0f2
 800df60:	fe231671 	.word	0xfe231671
 800df64:	bfbc71c6 	.word	0xbfbc71c6
 800df68:	9998ebc4 	.word	0x9998ebc4
 800df6c:	bfc99999 	.word	0xbfc99999
 800df70:	440fffff 	.word	0x440fffff
 800df74:	7ff00000 	.word	0x7ff00000
 800df78:	3fdbffff 	.word	0x3fdbffff
 800df7c:	3ff2ffff 	.word	0x3ff2ffff
 800df80:	40037fff 	.word	0x40037fff
 800df84:	0800e3d8 	.word	0x0800e3d8
 800df88:	0800e3f8 	.word	0x0800e3f8

0800df8c <fabs>:
 800df8c:	ec51 0b10 	vmov	r0, r1, d0
 800df90:	ee10 2a10 	vmov	r2, s0
 800df94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df98:	ec43 2b10 	vmov	d0, r2, r3
 800df9c:	4770      	bx	lr
	...

0800dfa0 <floor>:
 800dfa0:	ee10 1a90 	vmov	r1, s1
 800dfa4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dfa8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800dfac:	2b13      	cmp	r3, #19
 800dfae:	b530      	push	{r4, r5, lr}
 800dfb0:	ee10 0a10 	vmov	r0, s0
 800dfb4:	ee10 5a10 	vmov	r5, s0
 800dfb8:	dc33      	bgt.n	800e022 <floor+0x82>
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	da17      	bge.n	800dfee <floor+0x4e>
 800dfbe:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800e080 <floor+0xe0>
 800dfc2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dfc6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dfca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfce:	dd09      	ble.n	800dfe4 <floor+0x44>
 800dfd0:	2900      	cmp	r1, #0
 800dfd2:	da50      	bge.n	800e076 <floor+0xd6>
 800dfd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dfd8:	4a2b      	ldr	r2, [pc, #172]	; (800e088 <floor+0xe8>)
 800dfda:	4303      	orrs	r3, r0
 800dfdc:	2000      	movs	r0, #0
 800dfde:	4283      	cmp	r3, r0
 800dfe0:	bf18      	it	ne
 800dfe2:	4611      	movne	r1, r2
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	ec43 2b10 	vmov	d0, r2, r3
 800dfec:	e020      	b.n	800e030 <floor+0x90>
 800dfee:	4a27      	ldr	r2, [pc, #156]	; (800e08c <floor+0xec>)
 800dff0:	411a      	asrs	r2, r3
 800dff2:	ea01 0402 	and.w	r4, r1, r2
 800dff6:	4304      	orrs	r4, r0
 800dff8:	d01a      	beq.n	800e030 <floor+0x90>
 800dffa:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800e080 <floor+0xe0>
 800dffe:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e002:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e00a:	ddeb      	ble.n	800dfe4 <floor+0x44>
 800e00c:	2900      	cmp	r1, #0
 800e00e:	bfbe      	ittt	lt
 800e010:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800e014:	fa40 f303 	asrlt.w	r3, r0, r3
 800e018:	18c9      	addlt	r1, r1, r3
 800e01a:	ea21 0102 	bic.w	r1, r1, r2
 800e01e:	2000      	movs	r0, #0
 800e020:	e7e0      	b.n	800dfe4 <floor+0x44>
 800e022:	2b33      	cmp	r3, #51	; 0x33
 800e024:	dd05      	ble.n	800e032 <floor+0x92>
 800e026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e02a:	d101      	bne.n	800e030 <floor+0x90>
 800e02c:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e030:	bd30      	pop	{r4, r5, pc}
 800e032:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800e036:	f04f 32ff 	mov.w	r2, #4294967295
 800e03a:	40e2      	lsrs	r2, r4
 800e03c:	4202      	tst	r2, r0
 800e03e:	d0f7      	beq.n	800e030 <floor+0x90>
 800e040:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800e080 <floor+0xe0>
 800e044:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e048:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e050:	ddc8      	ble.n	800dfe4 <floor+0x44>
 800e052:	2900      	cmp	r1, #0
 800e054:	da02      	bge.n	800e05c <floor+0xbc>
 800e056:	2b14      	cmp	r3, #20
 800e058:	d103      	bne.n	800e062 <floor+0xc2>
 800e05a:	3101      	adds	r1, #1
 800e05c:	ea20 0002 	bic.w	r0, r0, r2
 800e060:	e7c0      	b.n	800dfe4 <floor+0x44>
 800e062:	2401      	movs	r4, #1
 800e064:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e068:	fa04 f303 	lsl.w	r3, r4, r3
 800e06c:	4418      	add	r0, r3
 800e06e:	42a8      	cmp	r0, r5
 800e070:	bf38      	it	cc
 800e072:	1909      	addcc	r1, r1, r4
 800e074:	e7f2      	b.n	800e05c <floor+0xbc>
 800e076:	2000      	movs	r0, #0
 800e078:	4601      	mov	r1, r0
 800e07a:	e7b3      	b.n	800dfe4 <floor+0x44>
 800e07c:	f3af 8000 	nop.w
 800e080:	8800759c 	.word	0x8800759c
 800e084:	7e37e43c 	.word	0x7e37e43c
 800e088:	bff00000 	.word	0xbff00000
 800e08c:	000fffff 	.word	0x000fffff

0800e090 <matherr>:
 800e090:	2000      	movs	r0, #0
 800e092:	4770      	bx	lr
 800e094:	0000      	movs	r0, r0
	...

0800e098 <scalbn>:
 800e098:	b500      	push	{lr}
 800e09a:	ed2d 8b02 	vpush	{d8}
 800e09e:	b083      	sub	sp, #12
 800e0a0:	ed8d 0b00 	vstr	d0, [sp]
 800e0a4:	9b01      	ldr	r3, [sp, #4]
 800e0a6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e0aa:	b9a2      	cbnz	r2, 800e0d6 <scalbn+0x3e>
 800e0ac:	9a00      	ldr	r2, [sp, #0]
 800e0ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e0b2:	4313      	orrs	r3, r2
 800e0b4:	d03a      	beq.n	800e12c <scalbn+0x94>
 800e0b6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e170 <scalbn+0xd8>
 800e0ba:	4b35      	ldr	r3, [pc, #212]	; (800e190 <scalbn+0xf8>)
 800e0bc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e0c0:	4298      	cmp	r0, r3
 800e0c2:	ed8d 7b00 	vstr	d7, [sp]
 800e0c6:	da11      	bge.n	800e0ec <scalbn+0x54>
 800e0c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800e178 <scalbn+0xe0>
 800e0cc:	ed9d 6b00 	vldr	d6, [sp]
 800e0d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e0d4:	e007      	b.n	800e0e6 <scalbn+0x4e>
 800e0d6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e0da:	428a      	cmp	r2, r1
 800e0dc:	d10a      	bne.n	800e0f4 <scalbn+0x5c>
 800e0de:	ed9d 7b00 	vldr	d7, [sp]
 800e0e2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e0e6:	ed8d 7b00 	vstr	d7, [sp]
 800e0ea:	e01f      	b.n	800e12c <scalbn+0x94>
 800e0ec:	9b01      	ldr	r3, [sp, #4]
 800e0ee:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e0f2:	3a36      	subs	r2, #54	; 0x36
 800e0f4:	4402      	add	r2, r0
 800e0f6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e0fa:	428a      	cmp	r2, r1
 800e0fc:	dd0a      	ble.n	800e114 <scalbn+0x7c>
 800e0fe:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800e180 <scalbn+0xe8>
 800e102:	eeb0 0b48 	vmov.f64	d0, d8
 800e106:	ed9d 1b00 	vldr	d1, [sp]
 800e10a:	f000 f843 	bl	800e194 <copysign>
 800e10e:	ee20 7b08 	vmul.f64	d7, d0, d8
 800e112:	e7e8      	b.n	800e0e6 <scalbn+0x4e>
 800e114:	2a00      	cmp	r2, #0
 800e116:	dd10      	ble.n	800e13a <scalbn+0xa2>
 800e118:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e11c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e120:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e124:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e128:	e9cd 0100 	strd	r0, r1, [sp]
 800e12c:	ed9d 0b00 	vldr	d0, [sp]
 800e130:	b003      	add	sp, #12
 800e132:	ecbd 8b02 	vpop	{d8}
 800e136:	f85d fb04 	ldr.w	pc, [sp], #4
 800e13a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e13e:	da06      	bge.n	800e14e <scalbn+0xb6>
 800e140:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e144:	4298      	cmp	r0, r3
 800e146:	dcda      	bgt.n	800e0fe <scalbn+0x66>
 800e148:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800e178 <scalbn+0xe0>
 800e14c:	e7d9      	b.n	800e102 <scalbn+0x6a>
 800e14e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e152:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e156:	3236      	adds	r2, #54	; 0x36
 800e158:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e15c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e160:	ec41 0b17 	vmov	d7, r0, r1
 800e164:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800e188 <scalbn+0xf0>
 800e168:	e7b2      	b.n	800e0d0 <scalbn+0x38>
 800e16a:	bf00      	nop
 800e16c:	f3af 8000 	nop.w
 800e170:	00000000 	.word	0x00000000
 800e174:	43500000 	.word	0x43500000
 800e178:	c2f8f359 	.word	0xc2f8f359
 800e17c:	01a56e1f 	.word	0x01a56e1f
 800e180:	8800759c 	.word	0x8800759c
 800e184:	7e37e43c 	.word	0x7e37e43c
 800e188:	00000000 	.word	0x00000000
 800e18c:	3c900000 	.word	0x3c900000
 800e190:	ffff3cb0 	.word	0xffff3cb0

0800e194 <copysign>:
 800e194:	ec51 0b10 	vmov	r0, r1, d0
 800e198:	ee11 0a90 	vmov	r0, s3
 800e19c:	ee10 2a10 	vmov	r2, s0
 800e1a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e1a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e1a8:	ea41 0300 	orr.w	r3, r1, r0
 800e1ac:	ec43 2b10 	vmov	d0, r2, r3
 800e1b0:	4770      	bx	lr
	...

0800e1b4 <_init>:
 800e1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1b6:	bf00      	nop
 800e1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ba:	bc08      	pop	{r3}
 800e1bc:	469e      	mov	lr, r3
 800e1be:	4770      	bx	lr

0800e1c0 <_fini>:
 800e1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1c2:	bf00      	nop
 800e1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1c6:	bc08      	pop	{r3}
 800e1c8:	469e      	mov	lr, r3
 800e1ca:	4770      	bx	lr
