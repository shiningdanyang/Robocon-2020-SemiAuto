
brain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cad4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800cd6c  0800cd6c  0001cd6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd94  0800cd94  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd94  0800cd94  0001cd94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd9c  0800cd9c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd9c  0800cd9c  0001cd9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cda0  0800cda0  0001cda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800cda4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bb4  24000078  0800ce1c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000c2c  0800ce1c  00020c2c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eecf  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cfd  00000000  00000000  0003ef75  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014e0  00000000  00000000  00041c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013f0  00000000  00000000  00043158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038418  00000000  00000000  00044548  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011328  00000000  00000000  0007c960  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00173637  00000000  00000000  0008dc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002012bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059ac  00000000  00000000  0020133c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800cd54 	.word	0x0800cd54

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	0800cd54 	.word	0x0800cd54

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <delayUs_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
//gọi Init giữa /* USER CODE BEGIN 2 */ và /* USER CODE END 2 */
void delayUs_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <delayUs_Init+0x38>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10e      	bne.n	8000606 <delayUs_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <delayUs_Init+0x38>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <delayUs_Init+0x38>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delayUs_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <delayUs_Init+0x3c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <delayUs_Init+0x3c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
    }
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000edf0 	.word	0xe000edf0
 8000614:	e0001000 	.word	0xe0001000

08000618 <delayUs>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void delayUs(uint32_t us) // microseconds
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <delayUs+0x40>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <delayUs+0x44>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <delayUs+0x48>)
 800062c:	fba2 2303 	umull	r2, r3, r2, r3
 8000630:	0c9a      	lsrs	r2, r3, #18
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	fb02 f303 	mul.w	r3, r2, r3
 8000638:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 800063a:	bf00      	nop
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <delayUs+0x40>)
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	429a      	cmp	r2, r3
 8000648:	d8f8      	bhi.n	800063c <delayUs+0x24>
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e0001000 	.word	0xe0001000
 800065c:	24000068 	.word	0x24000068
 8000660:	431bde83 	.word	0x431bde83

08000664 <peripheralUART_Init>:
void zmanualDeinit(void);
void zmanualInit(void);
////////////////////////////////////////////////////////////////
#ifdef SPINAL_CORD_MODE_ONEWAY
void peripheralUART_Init()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	spinalCordTxPacket[0] = 0xAA;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <peripheralUART_Init+0x44>)
 800066a:	22aa      	movs	r2, #170	; 0xaa
 800066c:	701a      	strb	r2, [r3, #0]
	spinalCordTxPacket[1] = 0xAA;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <peripheralUART_Init+0x44>)
 8000670:	22aa      	movs	r2, #170	; 0xaa
 8000672:	705a      	strb	r2, [r3, #1]
	spinalCordTxPacket[2] = 0xAA;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <peripheralUART_Init+0x44>)
 8000676:	22aa      	movs	r2, #170	; 0xaa
 8000678:	709a      	strb	r2, [r3, #2]
	spinalCordTxPacket[3] = 0xAA;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <peripheralUART_Init+0x44>)
 800067c:	22aa      	movs	r2, #170	; 0xaa
 800067e:	70da      	strb	r2, [r3, #3]
	spinalCordTxPacket[motorDir] = 0x00;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <peripheralUART_Init+0x44>)
 8000682:	2200      	movs	r2, #0
 8000684:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	4908      	ldr	r1, [pc, #32]	; (80006ac <peripheralUART_Init+0x48>)
 800068a:	4809      	ldr	r0, [pc, #36]	; (80006b0 <peripheralUART_Init+0x4c>)
 800068c:	f009 f85e 	bl	800974c <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&PS2, PS2RxPacket, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <peripheralUART_Init+0x50>)
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <peripheralUART_Init+0x54>)
 8000696:	f009 f931 	bl	80098fc <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
 800069a:	2202      	movs	r2, #2
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <peripheralUART_Init+0x58>)
 800069e:	4808      	ldr	r0, [pc, #32]	; (80006c0 <peripheralUART_Init+0x5c>)
 80006a0:	f009 f92c 	bl	80098fc <HAL_UART_Receive_DMA>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2400000c 	.word	0x2400000c
 80006ac:	24000b40 	.word	0x24000b40
 80006b0:	24000a6c 	.word	0x24000a6c
 80006b4:	24000af8 	.word	0x24000af8
 80006b8:	2400025c 	.word	0x2400025c
 80006bc:	24000724 	.word	0x24000724
 80006c0:	24000950 	.word	0x24000950

080006c4 <HAL_UART_TxCpltCallback>:
	HAL_UART_Receive_DMA(&compass, compassRxPacket, 2);
}
#endif
//////////////////////////////////////////////////////////////////////////////////////////
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_UART_TxCpltCallback+0x64>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d103      	bne.n	80006e0 <HAL_UART_TxCpltCallback+0x1c>
	{
		compassTxCplt_Flag = 1;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <HAL_UART_TxCpltCallback+0x68>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualTxCplt_Flag = 1;
	}
}
 80006de:	e01c      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == PS2.Instance)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_UART_TxCpltCallback+0x6c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d103      	bne.n	80006f4 <HAL_UART_TxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <HAL_UART_TxCpltCallback+0x70>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
}
 80006f2:	e012      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == spinalCord.Instance)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_UART_TxCpltCallback+0x74>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d103      	bne.n	8000708 <HAL_UART_TxCpltCallback+0x44>
		spinalCordTxCplt_Flag = 1;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <HAL_UART_TxCpltCallback+0x78>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
}
 8000706:	e008      	b.n	800071a <HAL_UART_TxCpltCallback+0x56>
	else if(huart->Instance == zmanual.Instance)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_UART_TxCpltCallback+0x7c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d102      	bne.n	800071a <HAL_UART_TxCpltCallback+0x56>
		zmanualTxCplt_Flag = 1;
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <HAL_UART_TxCpltCallback+0x80>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	24000950 	.word	0x24000950
 800072c:	240002f2 	.word	0x240002f2
 8000730:	2400025c 	.word	0x2400025c
 8000734:	24000a30 	.word	0x24000a30
 8000738:	24000a6c 	.word	0x24000a6c
 800073c:	24000800 	.word	0x24000800
 8000740:	24000100 	.word	0x24000100
 8000744:	240001b8 	.word	0x240001b8

08000748 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == compass.Instance)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <HAL_UART_RxCpltCallback+0x7c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	d103      	bne.n	8000764 <HAL_UART_RxCpltCallback+0x1c>
	{
		compassRxCplt_Flag = 1;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <HAL_UART_RxCpltCallback+0x80>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == zmanual.Instance)
	{
		zmanualRxCplt_Flag = 1;
	}
}
 8000762:	e02b      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == PS2.Instance)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_UART_RxCpltCallback+0x84>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	d103      	bne.n	8000778 <HAL_UART_RxCpltCallback+0x30>
		PS2TxCplt_Flag = 1;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <HAL_UART_RxCpltCallback+0x88>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
}
 8000776:	e021      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == spinalCord.Instance)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d112      	bne.n	80007aa <HAL_UART_RxCpltCallback+0x62>
		if(spinalCordRxPacket[0]=='t')
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b74      	cmp	r3, #116	; 0x74
 800078a:	d105      	bne.n	8000798 <HAL_UART_RxCpltCallback+0x50>
			HAL_UART_Transmit(&spinalCord, spinalCordTxPacket, 9,100);
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	2209      	movs	r2, #9
 8000790:	4912      	ldr	r1, [pc, #72]	; (80007dc <HAL_UART_RxCpltCallback+0x94>)
 8000792:	4810      	ldr	r0, [pc, #64]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 8000794:	f008 fec0 	bl	8009518 <HAL_UART_Transmit>
		spinalCordRxCplt_Flag = 1;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_UART_RxCpltCallback+0x98>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 1);
 800079e:	2201      	movs	r2, #1
 80007a0:	490d      	ldr	r1, [pc, #52]	; (80007d8 <HAL_UART_RxCpltCallback+0x90>)
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <HAL_UART_RxCpltCallback+0x8c>)
 80007a4:	f008 ffd2 	bl	800974c <HAL_UART_Receive_IT>
}
 80007a8:	e008      	b.n	80007bc <HAL_UART_RxCpltCallback+0x74>
	else if(huart->Instance == zmanual.Instance)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_UART_RxCpltCallback+0x9c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d102      	bne.n	80007bc <HAL_UART_RxCpltCallback+0x74>
		zmanualRxCplt_Flag = 1;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_UART_RxCpltCallback+0xa0>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	24000950 	.word	0x24000950
 80007c8:	240000b9 	.word	0x240000b9
 80007cc:	2400025c 	.word	0x2400025c
 80007d0:	24000a30 	.word	0x24000a30
 80007d4:	24000a6c 	.word	0x24000a6c
 80007d8:	24000b40 	.word	0x24000b40
 80007dc:	2400000c 	.word	0x2400000c
 80007e0:	24000bd0 	.word	0x24000bd0
 80007e4:	24000100 	.word	0x24000100
 80007e8:	24000a38 	.word	0x24000a38

080007ec <compassReset>:
{
	HAL_UART_Init(&compass);
}

void compassReset(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	compassTxPacket[0] = 'a';
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <compassReset+0x24>)
 80007f2:	2261      	movs	r2, #97	; 0x61
 80007f4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	4905      	ldr	r1, [pc, #20]	; (8000810 <compassReset+0x24>)
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <compassReset+0x28>)
 80007fc:	f008 ff22 	bl	8009644 <HAL_UART_Transmit_IT>
	wait4CompassTx();
 8000800:	f000 f818 	bl	8000834 <wait4CompassTx>
	compassTxPacket[0] = 'z';
 8000804:	4b02      	ldr	r3, [pc, #8]	; (8000810 <compassReset+0x24>)
 8000806:	227a      	movs	r2, #122	; 0x7a
 8000808:	701a      	strb	r2, [r3, #0]
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	24000000 	.word	0x24000000
 8000814:	24000950 	.word	0x24000950

08000818 <compassRequest>:
void compassRequest(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&compass, compassTxPacket, 1);
 800081c:	2201      	movs	r2, #1
 800081e:	4903      	ldr	r1, [pc, #12]	; (800082c <compassRequest+0x14>)
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <compassRequest+0x18>)
 8000822:	f008 ff0f 	bl	8009644 <HAL_UART_Transmit_IT>
//	trackingWait4CompassTx = 0;
//	wait4CompassTx();
//	HAL_UART_Transmit(&compass, compassTxPacket, 1, 50);
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	24000000 	.word	0x24000000
 8000830:	24000950 	.word	0x24000950

08000834 <wait4CompassTx>:
	wait4CompassRx();
	compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
}

void wait4CompassTx(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
	while(compassTxCplt_Flag == 0)
 8000838:	bf00      	nop
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <wait4CompassTx+0x20>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d0fb      	beq.n	800083a <wait4CompassTx+0x6>
	{
	}
	compassTxCplt_Flag = 0;
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <wait4CompassTx+0x20>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	240002f2 	.word	0x240002f2

08000858 <spinalCordTrans>:
{
	HAL_UART_Init(&spinalCord);
}

void spinalCordTrans(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&spinalCord, (uint8_t*)spinalCordTxPacket, 9);
 800085c:	2209      	movs	r2, #9
 800085e:	4904      	ldr	r1, [pc, #16]	; (8000870 <spinalCordTrans+0x18>)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <spinalCordTrans+0x1c>)
 8000862:	f008 feef 	bl	8009644 <HAL_UART_Transmit_IT>
	wait4SpinalCordTx();
 8000866:	f000 f807 	bl	8000878 <wait4SpinalCordTx>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2400000c 	.word	0x2400000c
 8000874:	24000a6c 	.word	0x24000a6c

08000878 <wait4SpinalCordTx>:
	HAL_UART_Receive_IT(&spinalCord, spinalCordRxPacket, 2);
	wait4SpinalCordRx();
}

void wait4SpinalCordTx(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	while(spinalCordTxCplt_Flag == 0)
 800087c:	bf00      	nop
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <wait4SpinalCordTx+0x20>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0fb      	beq.n	800087e <wait4SpinalCordTx+0x6>
	{
	}
	spinalCordTxCplt_Flag = 0;
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <wait4SpinalCordTx+0x20>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	24000800 	.word	0x24000800

0800089c <peripheralADC_Init>:
uint16_t _PitchFilterWindow[10] = {0,0,0,0,0,0,0,0,0,0};
uint16_t _PitchFinalFilter;

#ifndef ADC_CONTINOUS_MODE
void peripheralADC_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3Value, 3);
 80008a0:	2203      	movs	r2, #3
 80008a2:	4903      	ldr	r1, [pc, #12]	; (80008b0 <peripheralADC_Init+0x14>)
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <peripheralADC_Init+0x18>)
 80008a6:	f002 f8a9 	bl	80029fc <HAL_ADC_Start_DMA>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	24000b68 	.word	0x24000b68
 80008b4:	24000848 	.word	0x24000848

080008b8 <controlMotor1>:
#ifdef SPINAL_CORD_MODE_ONEWAY



void controlMotor1(int _speed)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2bfa      	cmp	r3, #250	; 0xfa
 80008c4:	dd02      	ble.n	80008cc <controlMotor1+0x14>
		_speed = 250;
 80008c6:	23fa      	movs	r3, #250	; 0xfa
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	e010      	b.n	80008ee <controlMotor1+0x36>
	else if(_speed<-250)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 80008d2:	da03      	bge.n	80008dc <controlMotor1+0x24>
		_speed = -250;
 80008d4:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	e008      	b.n	80008ee <controlMotor1+0x36>
	else if((_speed<3)&&(_speed>-3))
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	dc05      	bgt.n	80008ee <controlMotor1+0x36>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f113 0f02 	cmn.w	r3, #2
 80008e8:	db01      	blt.n	80008ee <controlMotor1+0x36>
		_speed = 3;
 80008ea:	2303      	movs	r3, #3
 80008ec:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor1Speed] = abs(_speed);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	bfb8      	it	lt
 80008f4:	425b      	neglt	r3, r3
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <controlMotor1+0x74>)
 80008fa:	711a      	strb	r2, [r3, #4]
	if(_speed>=0)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	db07      	blt.n	8000912 <controlMotor1+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 0);
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <controlMotor1+0x74>)
 8000904:	7a1b      	ldrb	r3, [r3, #8]
 8000906:	f023 0301 	bic.w	r3, r3, #1
 800090a:	b2da      	uxtb	r2, r3
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <controlMotor1+0x74>)
 800090e:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor1Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 0);
//		spinalCordTxPacket[motor1Dir] = 1;
}
 8000910:	e006      	b.n	8000920 <controlMotor1+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 0);
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <controlMotor1+0x74>)
 8000914:	7a1b      	ldrb	r3, [r3, #8]
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b03      	ldr	r3, [pc, #12]	; (800092c <controlMotor1+0x74>)
 800091e:	721a      	strb	r2, [r3, #8]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	2400000c 	.word	0x2400000c

08000930 <controlMotor2>:
void controlMotor2(int _speed)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2bfa      	cmp	r3, #250	; 0xfa
 800093c:	dd02      	ble.n	8000944 <controlMotor2+0x14>
		_speed = 250;
 800093e:	23fa      	movs	r3, #250	; 0xfa
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	e010      	b.n	8000966 <controlMotor2+0x36>
	else if(_speed<-250)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 800094a:	da03      	bge.n	8000954 <controlMotor2+0x24>
		_speed = -250;
 800094c:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	e008      	b.n	8000966 <controlMotor2+0x36>
	else if((_speed<3)&&(_speed>-3))
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b02      	cmp	r3, #2
 8000958:	dc05      	bgt.n	8000966 <controlMotor2+0x36>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f113 0f02 	cmn.w	r3, #2
 8000960:	db01      	blt.n	8000966 <controlMotor2+0x36>
		_speed = 3;
 8000962:	2303      	movs	r3, #3
 8000964:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor2Speed] = abs(_speed);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	bfb8      	it	lt
 800096c:	425b      	neglt	r3, r3
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <controlMotor2+0x74>)
 8000972:	715a      	strb	r2, [r3, #5]
	if(_speed>=0)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	db07      	blt.n	800098a <controlMotor2+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 1);
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <controlMotor2+0x74>)
 800097c:	7a1b      	ldrb	r3, [r3, #8]
 800097e:	f023 0302 	bic.w	r3, r3, #2
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <controlMotor2+0x74>)
 8000986:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor2Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 1);
//		spinalCordTxPacket[motor2Dir] = 1;
}
 8000988:	e006      	b.n	8000998 <controlMotor2+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 1);
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <controlMotor2+0x74>)
 800098c:	7a1b      	ldrb	r3, [r3, #8]
 800098e:	f043 0302 	orr.w	r3, r3, #2
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <controlMotor2+0x74>)
 8000996:	721a      	strb	r2, [r3, #8]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	2400000c 	.word	0x2400000c

080009a8 <controlMotor3>:
void controlMotor3(int _speed)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2bfa      	cmp	r3, #250	; 0xfa
 80009b4:	dd02      	ble.n	80009bc <controlMotor3+0x14>
		_speed = 250;
 80009b6:	23fa      	movs	r3, #250	; 0xfa
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	e010      	b.n	80009de <controlMotor3+0x36>
	else if(_speed<-250)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 80009c2:	da03      	bge.n	80009cc <controlMotor3+0x24>
		_speed = -250;
 80009c4:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	e008      	b.n	80009de <controlMotor3+0x36>
	else if((_speed<3)&&(_speed>-3))
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	dc05      	bgt.n	80009de <controlMotor3+0x36>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f113 0f02 	cmn.w	r3, #2
 80009d8:	db01      	blt.n	80009de <controlMotor3+0x36>
		_speed = 3;
 80009da:	2303      	movs	r3, #3
 80009dc:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor3Speed] = abs(_speed);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	bfb8      	it	lt
 80009e4:	425b      	neglt	r3, r3
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <controlMotor3+0x74>)
 80009ea:	719a      	strb	r2, [r3, #6]
	if(_speed>=0)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	db07      	blt.n	8000a02 <controlMotor3+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 2);
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <controlMotor3+0x74>)
 80009f4:	7a1b      	ldrb	r3, [r3, #8]
 80009f6:	f023 0304 	bic.w	r3, r3, #4
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <controlMotor3+0x74>)
 80009fe:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor3Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 2);
//		spinalCordTxPacket[motor3Dir] = 1;
}
 8000a00:	e006      	b.n	8000a10 <controlMotor3+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 2);
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <controlMotor3+0x74>)
 8000a04:	7a1b      	ldrb	r3, [r3, #8]
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <controlMotor3+0x74>)
 8000a0e:	721a      	strb	r2, [r3, #8]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	2400000c 	.word	0x2400000c

08000a20 <controlMotor4>:
void controlMotor4(int _speed)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	if(_speed>250)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2bfa      	cmp	r3, #250	; 0xfa
 8000a2c:	dd02      	ble.n	8000a34 <controlMotor4+0x14>
		_speed = 250;
 8000a2e:	23fa      	movs	r3, #250	; 0xfa
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	e010      	b.n	8000a56 <controlMotor4+0x36>
	else if(_speed<-250)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 8000a3a:	da03      	bge.n	8000a44 <controlMotor4+0x24>
		_speed = -250;
 8000a3c:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	e008      	b.n	8000a56 <controlMotor4+0x36>
	else if((_speed<3)&&(_speed>-3))
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	dc05      	bgt.n	8000a56 <controlMotor4+0x36>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f113 0f02 	cmn.w	r3, #2
 8000a50:	db01      	blt.n	8000a56 <controlMotor4+0x36>
		_speed = 3;
 8000a52:	2303      	movs	r3, #3
 8000a54:	607b      	str	r3, [r7, #4]

	spinalCordTxPacket[motor4Speed] = abs(_speed);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	bfb8      	it	lt
 8000a5c:	425b      	neglt	r3, r3
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <controlMotor4+0x74>)
 8000a62:	71da      	strb	r2, [r3, #7]
	if(_speed>=0)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	db07      	blt.n	8000a7a <controlMotor4+0x5a>
		spinalCordTxPacket[motorDir] &= ~(1UL << 3);
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <controlMotor4+0x74>)
 8000a6c:	7a1b      	ldrb	r3, [r3, #8]
 8000a6e:	f023 0308 	bic.w	r3, r3, #8
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <controlMotor4+0x74>)
 8000a76:	721a      	strb	r2, [r3, #8]
//		spinalCordTxPacket[motor4Dir] = 0;
	else
		spinalCordTxPacket[motorDir] |= (1UL << 3);
//		spinalCordTxPacket[motor4Dir] = 1;
}
 8000a78:	e006      	b.n	8000a88 <controlMotor4+0x68>
		spinalCordTxPacket[motorDir] |= (1UL << 3);
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <controlMotor4+0x74>)
 8000a7c:	7a1b      	ldrb	r3, [r3, #8]
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <controlMotor4+0x74>)
 8000a86:	721a      	strb	r2, [r3, #8]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	2400000c 	.word	0x2400000c

08000a98 <brake>:
			controlMotor4(-30);
		}
}

void brake(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	controlMotor1(BRAKE_SPEED);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f7ff ff0b 	bl	80008b8 <controlMotor1>
	controlMotor2(-BRAKE_SPEED);
 8000aa2:	f06f 0002 	mvn.w	r0, #2
 8000aa6:	f7ff ff43 	bl	8000930 <controlMotor2>
	controlMotor3(BRAKE_SPEED);
 8000aaa:	2003      	movs	r0, #3
 8000aac:	f7ff ff7c 	bl	80009a8 <controlMotor3>
	controlMotor4(-BRAKE_SPEED);
 8000ab0:	f06f 0002 	mvn.w	r0, #2
 8000ab4:	f7ff ffb4 	bl	8000a20 <controlMotor4>
	spinalCordTrans();
 8000ab8:	f7ff fece 	bl	8000858 <spinalCordTrans>
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <positionControl_Init>:
int legElapsedPulses;
int rigtArmElapsedPulses;
int leftArmElapsedPulses;

void positionControl_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&leg);
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <positionControl_Init+0x18>)
 8000ac6:	f008 fa25 	bl	8008f14 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(legEn_GPIO_Port, legEn_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	4803      	ldr	r0, [pc, #12]	; (8000adc <positionControl_Init+0x1c>)
 8000ad0:	f005 fb76 	bl	80061c0 <HAL_GPIO_WritePin>
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	24000b70 	.word	0x24000b70
 8000adc:	58021000 	.word	0x58021000

08000ae0 <HAL_TIM_PeriodElapsedCallback>:
	legEn = 1;
	legStatus = _legStatus;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == leg.Instance)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b3b      	ldr	r3, [pc, #236]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d16e      	bne.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0xf2>
	{
		if(legEn == 1)
 8000af4:	4b3a      	ldr	r3, [pc, #232]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d16a      	bne.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0xf2>
		{
			if(legStatus == LEG_STATUS_RUNUP)
 8000afc:	4b39      	ldr	r3, [pc, #228]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d11e      	bne.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x62>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//cấu hình legDir để lùi
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b0a:	4837      	ldr	r0, [pc, #220]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b0c:	f005 fb58 	bl	80061c0 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b14:	4834      	ldr	r0, [pc, #208]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b16:	f005 fb6c 	bl	80061f2 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000b1a:	4b34      	ldr	r3, [pc, #208]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	4a32      	ldr	r2, [pc, #200]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b22:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000b24:	4b32      	ldr	r3, [pc, #200]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	4a31      	ldr	r2, [pc, #196]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b2c:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP)
 8000b2e:	4b30      	ldr	r3, [pc, #192]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2bc7      	cmp	r3, #199	; 0xc7
 8000b34:	dd05      	ble.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x62>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000b36:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000b3c:	4b2c      	ldr	r3, [pc, #176]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == LEG_STATUS_RUNUP2)
 8000b42:	4b28      	ldr	r3, [pc, #160]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d11f      	bne.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0xaa>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legForward);	//cấu hình chân legDir để tiến
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b50:	4825      	ldr	r0, [pc, #148]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b52:	f005 fb35 	bl	80061c0 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000b56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5a:	4823      	ldr	r0, [pc, #140]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b5c:	f005 fb49 	bl	80061f2 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3301      	adds	r3, #1
 8000b66:	4a21      	ldr	r2, [pc, #132]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b68:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b72:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_RUNUP2)
 8000b74:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8000b7c:	db05      	blt.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0xaa>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
				}
			}
			if(legStatus == legEnd)
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d11f      	bne.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0xf2>
			{
				HAL_GPIO_WritePin(legDir_GPIO_Port, legDir_Pin, legBackward);	//quay ngược từ vị trí sút đến vị trí 0 (ngược chiều sút)
 8000b92:	2201      	movs	r2, #1
 8000b94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b98:	4813      	ldr	r0, [pc, #76]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b9a:	f005 fb11 	bl	80061c0 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(legPul_GPIO_Port, legPul_Pin);				//tạo xung chân legPul
 8000b9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba2:	4811      	ldr	r0, [pc, #68]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ba4:	f005 fb25 	bl	80061f2 <HAL_GPIO_TogglePin>
				trackingLeg++;
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3301      	adds	r3, #1
 8000bae:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000bb0:	6013      	str	r3, [r2, #0]
				legElapsedPulses++;												//đếm số xung
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000bba:	6013      	str	r3, [r2, #0]
				if (legElapsedPulses >= LEG_PUL_END)
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000bc4:	db05      	blt.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0xf2>
				{
					legEn = 0;													//kết thúc quá trình điều khiển
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
					legElapsedPulses = 0;										//kết thúc quá trình điều khiển
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000b70 	.word	0x24000b70
 8000be0:	240009e8 	.word	0x240009e8
 8000be4:	24000b08 	.word	0x24000b08
 8000be8:	58020c00 	.word	0x58020c00
 8000bec:	240009e0 	.word	0x240009e0
 8000bf0:	24000a34 	.word	0x24000a34

08000bf4 <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	e01f      	b.n	8000c44 <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 8000c04:	79fa      	ldrb	r2, [r7, #7]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d005      	beq.n	8000c20 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 8000c14:	2201      	movs	r2, #1
 8000c16:	2104      	movs	r1, #4
 8000c18:	480e      	ldr	r0, [pc, #56]	; (8000c54 <SendByteSPI+0x60>)
 8000c1a:	f005 fad1 	bl	80061c0 <HAL_GPIO_WritePin>
 8000c1e:	e004      	b.n	8000c2a <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  	// SID=0
 8000c20:	2200      	movs	r2, #0
 8000c22:	2104      	movs	r1, #4
 8000c24:	480b      	ldr	r0, [pc, #44]	; (8000c54 <SendByteSPI+0x60>)
 8000c26:	f005 facb 	bl	80061c0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	480a      	ldr	r0, [pc, #40]	; (8000c58 <SendByteSPI+0x64>)
 8000c30:	f005 fac6 	bl	80061c0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8000c34:	2201      	movs	r2, #1
 8000c36:	2101      	movs	r1, #1
 8000c38:	4807      	ldr	r0, [pc, #28]	; (8000c58 <SendByteSPI+0x64>)
 8000c3a:	f005 fac1 	bl	80061c0 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	3301      	adds	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2b07      	cmp	r3, #7
 8000c48:	dddc      	ble.n	8000c04 <SendByteSPI+0x10>

	}
}
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	58021800 	.word	0x58021800
 8000c58:	58020400 	.word	0x58020400

08000c5c <ST7920_SendCmd>:

void ST7920_SendCmd (uint8_t cmd)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8000c66:	2201      	movs	r2, #1
 8000c68:	2101      	movs	r1, #1
 8000c6a:	480f      	ldr	r0, [pc, #60]	; (8000ca8 <ST7920_SendCmd+0x4c>)
 8000c6c:	f005 faa8 	bl	80061c0 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  		// send the SYNC + RS(0)
 8000c70:	20f8      	movs	r0, #248	; 0xf8
 8000c72:	f7ff ffbf 	bl	8000bf4 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  		// send the higher nibble first
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f023 030f 	bic.w	r3, r3, #15
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ffb8 	bl	8000bf4 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  	// send the lower nibble
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ffb2 	bl	8000bf4 <SendByteSPI>
	delayUs(50);
 8000c90:	2032      	movs	r0, #50	; 0x32
 8000c92:	f7ff fcc1 	bl	8000618 <delayUs>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8000c96:	2200      	movs	r2, #0
 8000c98:	2101      	movs	r1, #1
 8000c9a:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <ST7920_SendCmd+0x4c>)
 8000c9c:	f005 fa90 	bl	80061c0 <HAL_GPIO_WritePin>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	58021800 	.word	0x58021800

08000cac <ST7920_Init>:
	}
}


void ST7920_Init (void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2108      	movs	r1, #8
 8000cb4:	481c      	ldr	r0, [pc, #112]	; (8000d28 <ST7920_Init+0x7c>)
 8000cb6:	f005 fa83 	bl	80061c0 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8000cba:	200a      	movs	r0, #10
 8000cbc:	f001 fade 	bl	800227c <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2108      	movs	r1, #8
 8000cc4:	4818      	ldr	r0, [pc, #96]	; (8000d28 <ST7920_Init+0x7c>)
 8000cc6:	f005 fa7b 	bl	80061c0 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 8000cca:	2032      	movs	r0, #50	; 0x32
 8000ccc:	f001 fad6 	bl	800227c <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 8000cd0:	2030      	movs	r0, #48	; 0x30
 8000cd2:	f7ff ffc3 	bl	8000c5c <ST7920_SendCmd>
	delayUs(110);  //  >100us delay
 8000cd6:	206e      	movs	r0, #110	; 0x6e
 8000cd8:	f7ff fc9e 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x30);  // 8bit mode
 8000cdc:	2030      	movs	r0, #48	; 0x30
 8000cde:	f7ff ffbd 	bl	8000c5c <ST7920_SendCmd>
	delayUs(40);  // >37us delay
 8000ce2:	2028      	movs	r0, #40	; 0x28
 8000ce4:	f7ff fc98 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 8000ce8:	2008      	movs	r0, #8
 8000cea:	f7ff ffb7 	bl	8000c5c <ST7920_SendCmd>
	delayUs(110);  // >100us delay
 8000cee:	206e      	movs	r0, #110	; 0x6e
 8000cf0:	f7ff fc92 	bl	8000618 <delayUs>

	ST7920_SendCmd(0x01);  // clear screen
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f7ff ffb1 	bl	8000c5c <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 8000cfa:	200c      	movs	r0, #12
 8000cfc:	f001 fabe 	bl	800227c <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8000d00:	2006      	movs	r0, #6
 8000d02:	f7ff ffab 	bl	8000c5c <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000d06:	2001      	movs	r0, #1
 8000d08:	f001 fab8 	bl	800227c <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 8000d0c:	200c      	movs	r0, #12
 8000d0e:	f7ff ffa5 	bl	8000c5c <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8000d12:	2001      	movs	r0, #1
 8000d14:	f001 fab2 	bl	800227c <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 8000d18:	2002      	movs	r0, #2
 8000d1a:	f7ff ff9f 	bl	8000c5c <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f001 faac 	bl	800227c <HAL_Delay>

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	58021800 	.word	0x58021800

08000d2c <readFLASH>:
	}
	HAL_FLASH_Lock();
}

void readFLASH()
{
 8000d2c:	b490      	push	{r4, r7}
 8000d2e:	af00      	add	r7, sp, #0
	Address = FLASH_USER_START_ADDR;
 8000d30:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <readFLASH+0xc0>)
 8000d32:	4a2f      	ldr	r2, [pc, #188]	; (8000df0 <readFLASH+0xc4>)
 8000d34:	601a      	str	r2, [r3, #0]
	MemoryProgramStatus = 0x0;
 8000d36:	4b2f      	ldr	r3, [pc, #188]	; (8000df4 <readFLASH+0xc8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]

	DT50Left = *(uint64_t*) FLASH_USER_START_ADDR;
 8000d3c:	4b2c      	ldr	r3, [pc, #176]	; (8000df0 <readFLASH+0xc4>)
 8000d3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d42:	4a2d      	ldr	r2, [pc, #180]	; (8000df8 <readFLASH+0xcc>)
 8000d44:	e9c2 3400 	strd	r3, r4, [r2]
	DT50Left_2000 = (DT50Left>>0)&0xFFFF;
 8000d48:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <readFLASH+0xcc>)
 8000d4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <readFLASH+0xd0>)
 8000d52:	801a      	strh	r2, [r3, #0]
	DT50Left_1000 = (DT50Left>>16)&0xFFFF;
 8000d54:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <readFLASH+0xcc>)
 8000d56:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000d5a:	f04f 0300 	mov.w	r3, #0
 8000d5e:	f04f 0400 	mov.w	r4, #0
 8000d62:	0c0b      	lsrs	r3, r1, #16
 8000d64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d68:	0c14      	lsrs	r4, r2, #16
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <readFLASH+0xd4>)
 8000d6e:	801a      	strh	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d70:	f3bf 8f4f 	dsb	sy
	__DSB();
	DT50Pitc = *(uint64_t*) (FLASH_USER_START_ADDR+8);
 8000d74:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <readFLASH+0xd8>)
 8000d76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d7a:	4a23      	ldr	r2, [pc, #140]	; (8000e08 <readFLASH+0xdc>)
 8000d7c:	e9c2 3400 	strd	r3, r4, [r2]
	DT50Pitc_2000 = (DT50Pitc>>0)&0xFFFF;
 8000d80:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <readFLASH+0xdc>)
 8000d82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <readFLASH+0xe0>)
 8000d8a:	801a      	strh	r2, [r3, #0]
	DT50Pitc_1000 = (DT50Pitc>>16)&0xFFFF;
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <readFLASH+0xdc>)
 8000d8e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000d92:	f04f 0300 	mov.w	r3, #0
 8000d96:	f04f 0400 	mov.w	r4, #0
 8000d9a:	0c0b      	lsrs	r3, r1, #16
 8000d9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da0:	0c14      	lsrs	r4, r2, #16
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <readFLASH+0xe4>)
 8000da6:	801a      	strh	r2, [r3, #0]
 8000da8:	f3bf 8f4f 	dsb	sy
	__DSB();
	DT50Rigt = *(uint64_t*) (FLASH_USER_START_ADDR+16);
 8000dac:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <readFLASH+0xe8>)
 8000dae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000db2:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <readFLASH+0xec>)
 8000db4:	e9c2 3400 	strd	r3, r4, [r2]
	DT50Rigt_2000 = (DT50Rigt>>0)&0xFFFF;
 8000db8:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <readFLASH+0xec>)
 8000dba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <readFLASH+0xf0>)
 8000dc2:	801a      	strh	r2, [r3, #0]
	DT50Rigt_1000 = (DT50Rigt>>16)&0xFFFF;
 8000dc4:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <readFLASH+0xec>)
 8000dc6:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000dca:	f04f 0300 	mov.w	r3, #0
 8000dce:	f04f 0400 	mov.w	r4, #0
 8000dd2:	0c0b      	lsrs	r3, r1, #16
 8000dd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd8:	0c14      	lsrs	r4, r2, #16
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <readFLASH+0xf4>)
 8000dde:	801a      	strh	r2, [r3, #0]
 8000de0:	f3bf 8f4f 	dsb	sy
//		MemoryProgramStatus++;
//	  }
//	  Address +=8;
//		}
//	}
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc90      	pop	{r4, r7}
 8000dea:	4770      	bx	lr
 8000dec:	24000098 	.word	0x24000098
 8000df0:	081c0000 	.word	0x081c0000
 8000df4:	2400009c 	.word	0x2400009c
 8000df8:	240000a0 	.word	0x240000a0
 8000dfc:	24000a68 	.word	0x24000a68
 8000e00:	240009ee 	.word	0x240009ee
 8000e04:	081c0008 	.word	0x081c0008
 8000e08:	240000a8 	.word	0x240000a8
 8000e0c:	24000738 	.word	0x24000738
 8000e10:	24000b4e 	.word	0x24000b4e
 8000e14:	081c0010 	.word	0x081c0010
 8000e18:	240000b0 	.word	0x240000b0
 8000e1c:	24000718 	.word	0x24000718
 8000e20:	24000750 	.word	0x24000750

08000e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e28:	f001 f996 	bl	8002158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2c:	f000 f838 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e30:	f000 fb18 	bl	8001464 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e34:	f000 fad6 	bl	80013e4 <MX_DMA_Init>
  MX_ADC3_Init();
 8000e38:	f000 f8e8 	bl	800100c <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8000e3c:	f000 f9ee 	bl	800121c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000e40:	f000 fa38 	bl	80012b4 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000e44:	f000 f966 	bl	8001114 <MX_TIM7_Init>
  MX_UART7_Init();
 8000e48:	f000 f99c 	bl	8001184 <MX_UART7_Init>
  MX_USART6_UART_Init();
 8000e4c:	f000 fa7e 	bl	800134c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  delayUs_Init();
 8000e50:	f7ff fbc2 	bl	80005d8 <delayUs_Init>
  peripheralUART_Init();
 8000e54:	f7ff fc06 	bl	8000664 <peripheralUART_Init>
  peripheralADC_Init();
 8000e58:	f7ff fd20 	bl	800089c <peripheralADC_Init>
  positionControl_Init();
 8000e5c:	f7ff fe30 	bl	8000ac0 <positionControl_Init>
  ST7920_Init();
 8000e60:	f7ff ff24 	bl	8000cac <ST7920_Init>

  tracking = 1000;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <main+0x74>)
 8000e66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e6a:	601a      	str	r2, [r3, #0]
  brake();
 8000e6c:	f7ff fe14 	bl	8000a98 <brake>
  compassReset();
 8000e70:	f7ff fcbc 	bl	80007ec <compassReset>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2101      	movs	r1, #1
 8000e78:	4808      	ldr	r0, [pc, #32]	; (8000e9c <main+0x78>)
 8000e7a:	f005 f9a1 	bl	80061c0 <HAL_GPIO_WritePin>
  HAL_Delay(INIT_TIME);
 8000e7e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000e82:	f001 f9fb 	bl	800227c <HAL_Delay>


//  writeFLASH();
  readFLASH();
 8000e86:	f7ff ff51 	bl	8000d2c <readFLASH>
//	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
//	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
//	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
//	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_11);
//	  HAL_Delay(2000);
	  tracking++;
 8000e8a:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <main+0x74>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a01      	ldr	r2, [pc, #4]	; (8000e98 <main+0x74>)
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	e7f9      	b.n	8000e8a <main+0x66>
 8000e96:	bf00      	nop
 8000e98:	24000a00 	.word	0x24000a00
 8000e9c:	58020400 	.word	0x58020400

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0cc      	sub	sp, #304	; 0x130
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000eaa:	224c      	movs	r2, #76	; 0x4c
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f00b ff48 	bl	800cd44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000eb8:	2220      	movs	r2, #32
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f00b ff41 	bl	800cd44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	23bc      	movs	r3, #188	; 0xbc
 8000eca:	461a      	mov	r2, r3
 8000ecc:	2100      	movs	r1, #0
 8000ece:	f00b ff39 	bl	800cd44 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	f005 f9a8 	bl	8006228 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	4b49      	ldr	r3, [pc, #292]	; (8001004 <SystemClock_Config+0x164>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	4a48      	ldr	r2, [pc, #288]	; (8001004 <SystemClock_Config+0x164>)
 8000ee4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ee8:	6193      	str	r3, [r2, #24]
 8000eea:	4b46      	ldr	r3, [pc, #280]	; (8001004 <SystemClock_Config+0x164>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	4b44      	ldr	r3, [pc, #272]	; (8001008 <SystemClock_Config+0x168>)
 8000ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efa:	4a43      	ldr	r2, [pc, #268]	; (8001008 <SystemClock_Config+0x168>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f02:	4b41      	ldr	r3, [pc, #260]	; (8001008 <SystemClock_Config+0x168>)
 8000f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f06:	f003 0201 	and.w	r2, r3, #1
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f12:	bf00      	nop
 8000f14:	4b3b      	ldr	r3, [pc, #236]	; (8001004 <SystemClock_Config+0x164>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f20:	d1f8      	bne.n	8000f14 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f22:	2302      	movs	r3, #2
 8000f24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f2e:	2340      	movs	r3, #64	; 0x40
 8000f30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f34:	2302      	movs	r3, #2
 8000f36:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f40:	2304      	movs	r3, #4
 8000f42:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000f46:	233c      	movs	r3, #60	; 0x3c
 8000f48:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f52:	2302      	movs	r3, #2
 8000f54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f5e:	230c      	movs	r3, #12
 8000f60:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f70:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f74:	4618      	mov	r0, r3
 8000f76:	f005 f991 	bl	800629c <HAL_RCC_OscConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000f80:	f000 fb9c 	bl	80016bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f84:	233f      	movs	r3, #63	; 0x3f
 8000f86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f96:	2308      	movs	r3, #8
 8000f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f9c:	2340      	movs	r3, #64	; 0x40
 8000f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fa2:	2340      	movs	r3, #64	; 0x40
 8000fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fb0:	2340      	movs	r3, #64	; 0x40
 8000fb2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fb6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000fba:	2104      	movs	r1, #4
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f005 fd45 	bl	8006a4c <HAL_RCC_ClockConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000fc8:	f000 fb78 	bl	80016bc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 8000fcc:	f107 0308 	add.w	r3, r7, #8
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	2200      	movs	r2, #0
 8000fda:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000fdc:	f107 0308 	add.w	r3, r7, #8
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f006 f8b3 	bl	8007154 <HAL_RCCEx_PeriphCLKConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8000ff4:	f000 fb62 	bl	80016bc <Error_Handler>
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	58024800 	.word	0x58024800
 8001008:	58000400 	.word	0x58000400

0800100c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]
 8001022:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8001024:	4b36      	ldr	r3, [pc, #216]	; (8001100 <MX_ADC3_Init+0xf4>)
 8001026:	4a37      	ldr	r2, [pc, #220]	; (8001104 <MX_ADC3_Init+0xf8>)
 8001028:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800102a:	4b35      	ldr	r3, [pc, #212]	; (8001100 <MX_ADC3_Init+0xf4>)
 800102c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001030:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001032:	4b33      	ldr	r3, [pc, #204]	; (8001100 <MX_ADC3_Init+0xf4>)
 8001034:	2208      	movs	r2, #8
 8001036:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001038:	4b31      	ldr	r3, [pc, #196]	; (8001100 <MX_ADC3_Init+0xf4>)
 800103a:	2201      	movs	r2, #1
 800103c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103e:	4b30      	ldr	r3, [pc, #192]	; (8001100 <MX_ADC3_Init+0xf4>)
 8001040:	2204      	movs	r2, #4
 8001042:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001044:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <MX_ADC3_Init+0xf4>)
 8001046:	2200      	movs	r2, #0
 8001048:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800104a:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <MX_ADC3_Init+0xf4>)
 800104c:	2201      	movs	r2, #1
 800104e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 8001050:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <MX_ADC3_Init+0xf4>)
 8001052:	2203      	movs	r2, #3
 8001054:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <MX_ADC3_Init+0xf4>)
 8001058:	2200      	movs	r2, #0
 800105a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <MX_ADC3_Init+0xf4>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001062:	4b27      	ldr	r3, [pc, #156]	; (8001100 <MX_ADC3_Init+0xf4>)
 8001064:	2200      	movs	r2, #0
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001068:	4b25      	ldr	r3, [pc, #148]	; (8001100 <MX_ADC3_Init+0xf4>)
 800106a:	2203      	movs	r2, #3
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800106e:	4b24      	ldr	r3, [pc, #144]	; (8001100 <MX_ADC3_Init+0xf4>)
 8001070:	2200      	movs	r2, #0
 8001072:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <MX_ADC3_Init+0xf4>)
 8001076:	2200      	movs	r2, #0
 8001078:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800107a:	4b21      	ldr	r3, [pc, #132]	; (8001100 <MX_ADC3_Init+0xf4>)
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001082:	481f      	ldr	r0, [pc, #124]	; (8001100 <MX_ADC3_Init+0xf4>)
 8001084:	f001 fb1a 	bl	80026bc <HAL_ADC_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800108e:	f000 fb15 	bl	80016bc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <MX_ADC3_Init+0xfc>)
 8001094:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001096:	2306      	movs	r3, #6
 8001098:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 800109a:	2306      	movs	r3, #6
 800109c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800109e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010a2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010a4:	2304      	movs	r3, #4
 80010a6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	4619      	mov	r1, r3
 80010b0:	4813      	ldr	r0, [pc, #76]	; (8001100 <MX_ADC3_Init+0xf4>)
 80010b2:	f001 fd85 	bl	8002bc0 <HAL_ADC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80010bc:	f000 fafe 	bl	80016bc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_ADC3_Init+0x100>)
 80010c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010c4:	230c      	movs	r3, #12
 80010c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <MX_ADC3_Init+0xf4>)
 80010ce:	f001 fd77 	bl	8002bc0 <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80010d8:	f000 faf0 	bl	80016bc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_ADC3_Init+0x104>)
 80010de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010e0:	2312      	movs	r3, #18
 80010e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_ADC3_Init+0xf4>)
 80010ea:	f001 fd69 	bl	8002bc0 <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 80010f4:	f000 fae2 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	24000848 	.word	0x24000848
 8001104:	58026000 	.word	0x58026000
 8001108:	04300002 	.word	0x04300002
 800110c:	2a000400 	.word	0x2a000400
 8001110:	2e300800 	.word	0x2e300800

08001114 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_TIM7_Init+0x68>)
 8001126:	4a16      	ldr	r2, [pc, #88]	; (8001180 <MX_TIM7_Init+0x6c>)
 8001128:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2399;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_TIM7_Init+0x68>)
 800112c:	f640 125f 	movw	r2, #2399	; 0x95f
 8001130:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_TIM7_Init+0x68>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <MX_TIM7_Init+0x68>)
 800113a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800113e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_TIM7_Init+0x68>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001146:	480d      	ldr	r0, [pc, #52]	; (800117c <MX_TIM7_Init+0x68>)
 8001148:	f007 feb8 	bl	8008ebc <HAL_TIM_Base_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001152:	f000 fab3 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4619      	mov	r1, r3
 8001162:	4806      	ldr	r0, [pc, #24]	; (800117c <MX_TIM7_Init+0x68>)
 8001164:	f008 f8e2 	bl	800932c <HAL_TIMEx_MasterConfigSynchronization>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800116e:	f000 faa5 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	24000b70 	.word	0x24000b70
 8001180:	40001400 	.word	0x40001400

08001184 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <MX_UART7_Init+0x90>)
 800118a:	4a23      	ldr	r2, [pc, #140]	; (8001218 <MX_UART7_Init+0x94>)
 800118c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <MX_UART7_Init+0x90>)
 8001190:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001194:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <MX_UART7_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <MX_UART7_Init+0x90>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <MX_UART7_Init+0x90>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_UART7_Init+0x90>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b19      	ldr	r3, [pc, #100]	; (8001214 <MX_UART7_Init+0x90>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <MX_UART7_Init+0x90>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <MX_UART7_Init+0x90>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_UART7_Init+0x90>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <MX_UART7_Init+0x90>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80011cc:	4811      	ldr	r0, [pc, #68]	; (8001214 <MX_UART7_Init+0x90>)
 80011ce:	f008 f953 	bl	8009478 <HAL_UART_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80011d8:	f000 fa70 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011dc:	2100      	movs	r1, #0
 80011de:	480d      	ldr	r0, [pc, #52]	; (8001214 <MX_UART7_Init+0x90>)
 80011e0:	f00b fca7 	bl	800cb32 <HAL_UARTEx_SetTxFifoThreshold>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80011ea:	f000 fa67 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ee:	2100      	movs	r1, #0
 80011f0:	4808      	ldr	r0, [pc, #32]	; (8001214 <MX_UART7_Init+0x90>)
 80011f2:	f00b fcdc 	bl	800cbae <HAL_UARTEx_SetRxFifoThreshold>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80011fc:	f000 fa5e 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <MX_UART7_Init+0x90>)
 8001202:	f00b fc5d 	bl	800cac0 <HAL_UARTEx_DisableFifoMode>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 800120c:	f000 fa56 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	24000100 	.word	0x24000100
 8001218:	40007800 	.word	0x40007800

0800121c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <MX_USART1_UART_Init+0x90>)
 8001222:	4a23      	ldr	r2, [pc, #140]	; (80012b0 <MX_USART1_UART_Init+0x94>)
 8001224:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <MX_USART1_UART_Init+0x90>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800122c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_USART1_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <MX_USART1_UART_Init+0x90>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_USART1_UART_Init+0x90>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_USART1_UART_Init+0x90>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_USART1_UART_Init+0x90>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_USART1_UART_Init+0x90>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <MX_USART1_UART_Init+0x90>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_USART1_UART_Init+0x90>)
 800125a:	2200      	movs	r2, #0
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <MX_USART1_UART_Init+0x90>)
 8001260:	2200      	movs	r2, #0
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001264:	4811      	ldr	r0, [pc, #68]	; (80012ac <MX_USART1_UART_Init+0x90>)
 8001266:	f008 f907 	bl	8009478 <HAL_UART_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001270:	f000 fa24 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001274:	2100      	movs	r1, #0
 8001276:	480d      	ldr	r0, [pc, #52]	; (80012ac <MX_USART1_UART_Init+0x90>)
 8001278:	f00b fc5b 	bl	800cb32 <HAL_UARTEx_SetTxFifoThreshold>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001282:	f000 fa1b 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001286:	2100      	movs	r1, #0
 8001288:	4808      	ldr	r0, [pc, #32]	; (80012ac <MX_USART1_UART_Init+0x90>)
 800128a:	f00b fc90 	bl	800cbae <HAL_UARTEx_SetRxFifoThreshold>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001294:	f000 fa12 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001298:	4804      	ldr	r0, [pc, #16]	; (80012ac <MX_USART1_UART_Init+0x90>)
 800129a:	f00b fc11 	bl	800cac0 <HAL_UARTEx_DisableFifoMode>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012a4:	f000 fa0a 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	24000950 	.word	0x24000950
 80012b0:	40011000 	.word	0x40011000

080012b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <MX_USART3_UART_Init+0x90>)
 80012ba:	4a23      	ldr	r2, [pc, #140]	; (8001348 <MX_USART3_UART_Init+0x94>)
 80012bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 80012be:	4b21      	ldr	r3, [pc, #132]	; (8001344 <MX_USART3_UART_Init+0x90>)
 80012c0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80012c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MX_USART3_UART_Init+0x90>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <MX_USART3_UART_Init+0x90>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_USART3_UART_Init+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_USART3_UART_Init+0x90>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <MX_USART3_UART_Init+0x90>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MX_USART3_UART_Init+0x90>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <MX_USART3_UART_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <MX_USART3_UART_Init+0x90>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <MX_USART3_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012fc:	4811      	ldr	r0, [pc, #68]	; (8001344 <MX_USART3_UART_Init+0x90>)
 80012fe:	f008 f8bb 	bl	8009478 <HAL_UART_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001308:	f000 f9d8 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800130c:	2100      	movs	r1, #0
 800130e:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_USART3_UART_Init+0x90>)
 8001310:	f00b fc0f 	bl	800cb32 <HAL_UARTEx_SetTxFifoThreshold>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800131a:	f000 f9cf 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800131e:	2100      	movs	r1, #0
 8001320:	4808      	ldr	r0, [pc, #32]	; (8001344 <MX_USART3_UART_Init+0x90>)
 8001322:	f00b fc44 	bl	800cbae <HAL_UARTEx_SetRxFifoThreshold>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800132c:	f000 f9c6 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <MX_USART3_UART_Init+0x90>)
 8001332:	f00b fbc5 	bl	800cac0 <HAL_UARTEx_DisableFifoMode>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800133c:	f000 f9be 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2400025c 	.word	0x2400025c
 8001348:	40004800 	.word	0x40004800

0800134c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <MX_USART6_UART_Init+0x90>)
 8001352:	4a23      	ldr	r2, [pc, #140]	; (80013e0 <MX_USART6_UART_Init+0x94>)
 8001354:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <MX_USART6_UART_Init+0x90>)
 8001358:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800135c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <MX_USART6_UART_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <MX_USART6_UART_Init+0x90>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <MX_USART6_UART_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <MX_USART6_UART_Init+0x90>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b19      	ldr	r3, [pc, #100]	; (80013dc <MX_USART6_UART_Init+0x90>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_USART6_UART_Init+0x90>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_USART6_UART_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_USART6_UART_Init+0x90>)
 800138a:	2200      	movs	r2, #0
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <MX_USART6_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001394:	4811      	ldr	r0, [pc, #68]	; (80013dc <MX_USART6_UART_Init+0x90>)
 8001396:	f008 f86f 	bl	8009478 <HAL_UART_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80013a0:	f000 f98c 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a4:	2100      	movs	r1, #0
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <MX_USART6_UART_Init+0x90>)
 80013a8:	f00b fbc3 	bl	800cb32 <HAL_UARTEx_SetTxFifoThreshold>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80013b2:	f000 f983 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b6:	2100      	movs	r1, #0
 80013b8:	4808      	ldr	r0, [pc, #32]	; (80013dc <MX_USART6_UART_Init+0x90>)
 80013ba:	f00b fbf8 	bl	800cbae <HAL_UARTEx_SetRxFifoThreshold>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80013c4:	f000 f97a 	bl	80016bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_USART6_UART_Init+0x90>)
 80013ca:	f00b fb79 	bl	800cac0 <HAL_UARTEx_DisableFifoMode>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80013d4:	f000 f972 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	24000a6c 	.word	0x24000a6c
 80013e0:	40011400 	.word	0x40011400

080013e4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ea:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <MX_DMA_Init+0x7c>)
 80013ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013f0:	4a1b      	ldr	r2, [pc, #108]	; (8001460 <MX_DMA_Init+0x7c>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <MX_DMA_Init+0x7c>)
 80013fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <MX_DMA_Init+0x7c>)
 800140a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800140e:	4a14      	ldr	r2, [pc, #80]	; (8001460 <MX_DMA_Init+0x7c>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_DMA_Init+0x7c>)
 800141a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	200d      	movs	r0, #13
 800142c:	f002 f9c7 	bl	80037be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001430:	200d      	movs	r0, #13
 8001432:	f002 f9de 	bl	80037f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	200e      	movs	r0, #14
 800143c:	f002 f9bf 	bl	80037be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001440:	200e      	movs	r0, #14
 8001442:	f002 f9d6 	bl	80037f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	203a      	movs	r0, #58	; 0x3a
 800144c:	f002 f9b7 	bl	80037be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001450:	203a      	movs	r0, #58	; 0x3a
 8001452:	f002 f9ce 	bl	80037f2 <HAL_NVIC_EnableIRQ>

}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	58024400 	.word	0x58024400

08001464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800147a:	4b89      	ldr	r3, [pc, #548]	; (80016a0 <MX_GPIO_Init+0x23c>)
 800147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001480:	4a87      	ldr	r2, [pc, #540]	; (80016a0 <MX_GPIO_Init+0x23c>)
 8001482:	f043 0320 	orr.w	r3, r3, #32
 8001486:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148a:	4b85      	ldr	r3, [pc, #532]	; (80016a0 <MX_GPIO_Init+0x23c>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001490:	f003 0320 	and.w	r3, r3, #32
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001498:	4b81      	ldr	r3, [pc, #516]	; (80016a0 <MX_GPIO_Init+0x23c>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149e:	4a80      	ldr	r2, [pc, #512]	; (80016a0 <MX_GPIO_Init+0x23c>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a8:	4b7d      	ldr	r3, [pc, #500]	; (80016a0 <MX_GPIO_Init+0x23c>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	4b7a      	ldr	r3, [pc, #488]	; (80016a0 <MX_GPIO_Init+0x23c>)
 80014b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014bc:	4a78      	ldr	r2, [pc, #480]	; (80016a0 <MX_GPIO_Init+0x23c>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c6:	4b76      	ldr	r3, [pc, #472]	; (80016a0 <MX_GPIO_Init+0x23c>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	4b72      	ldr	r3, [pc, #456]	; (80016a0 <MX_GPIO_Init+0x23c>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014da:	4a71      	ldr	r2, [pc, #452]	; (80016a0 <MX_GPIO_Init+0x23c>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e4:	4b6e      	ldr	r3, [pc, #440]	; (80016a0 <MX_GPIO_Init+0x23c>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014f2:	4b6b      	ldr	r3, [pc, #428]	; (80016a0 <MX_GPIO_Init+0x23c>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f8:	4a69      	ldr	r2, [pc, #420]	; (80016a0 <MX_GPIO_Init+0x23c>)
 80014fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001502:	4b67      	ldr	r3, [pc, #412]	; (80016a0 <MX_GPIO_Init+0x23c>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001510:	4b63      	ldr	r3, [pc, #396]	; (80016a0 <MX_GPIO_Init+0x23c>)
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001516:	4a62      	ldr	r2, [pc, #392]	; (80016a0 <MX_GPIO_Init+0x23c>)
 8001518:	f043 0310 	orr.w	r3, r3, #16
 800151c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001520:	4b5f      	ldr	r3, [pc, #380]	; (80016a0 <MX_GPIO_Init+0x23c>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152e:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <MX_GPIO_Init+0x23c>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001534:	4a5a      	ldr	r2, [pc, #360]	; (80016a0 <MX_GPIO_Init+0x23c>)
 8001536:	f043 0308 	orr.w	r3, r3, #8
 800153a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153e:	4b58      	ldr	r3, [pc, #352]	; (80016a0 <MX_GPIO_Init+0x23c>)
 8001540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f240 7104 	movw	r1, #1796	; 0x704
 8001552:	4854      	ldr	r0, [pc, #336]	; (80016a4 <MX_GPIO_Init+0x240>)
 8001554:	f004 fe34 	bl	80061c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	2110      	movs	r1, #16
 800155c:	4852      	ldr	r0, [pc, #328]	; (80016a8 <MX_GPIO_Init+0x244>)
 800155e:	f004 fe2f 	bl	80061c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 8001562:	2200      	movs	r2, #0
 8001564:	f242 0167 	movw	r1, #8295	; 0x2067
 8001568:	4850      	ldr	r0, [pc, #320]	; (80016ac <MX_GPIO_Init+0x248>)
 800156a:	f004 fe29 	bl	80061c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|leftArmDir_Pin 
 800156e:	2200      	movs	r2, #0
 8001570:	f643 610d 	movw	r1, #15885	; 0x3e0d
 8001574:	484e      	ldr	r0, [pc, #312]	; (80016b0 <MX_GPIO_Init+0x24c>)
 8001576:	f004 fe23 	bl	80061c0 <HAL_GPIO_WritePin>
                          |rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin|rigtArmDir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, legEn_Pin|leftArmPul_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	2182      	movs	r1, #130	; 0x82
 800157e:	484d      	ldr	r0, [pc, #308]	; (80016b4 <MX_GPIO_Init+0x250>)
 8001580:	f004 fe1e 	bl	80061c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|legDir_Pin|legPul_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	f44f 4145 	mov.w	r1, #50432	; 0xc500
 800158a:	484b      	ldr	r0, [pc, #300]	; (80016b8 <MX_GPIO_Init+0x254>)
 800158c:	f004 fe18 	bl	80061c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001590:	f240 7304 	movw	r3, #1796	; 0x704
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	4619      	mov	r1, r3
 80015a8:	483e      	ldr	r0, [pc, #248]	; (80016a4 <MX_GPIO_Init+0x240>)
 80015aa:	f004 fc59 	bl	8005e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015ae:	2310      	movs	r3, #16
 80015b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4619      	mov	r1, r3
 80015c4:	4838      	ldr	r0, [pc, #224]	; (80016a8 <MX_GPIO_Init+0x244>)
 80015c6:	f004 fc4b 	bl	8005e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB13 
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 80015ca:	f242 0367 	movw	r3, #8295	; 0x2067
 80015ce:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	4619      	mov	r1, r3
 80015e2:	4832      	ldr	r0, [pc, #200]	; (80016ac <MX_GPIO_Init+0x248>)
 80015e4:	f004 fc3c 	bl	8005e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80015e8:	230d      	movs	r3, #13
 80015ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4619      	mov	r1, r3
 80015fe:	482c      	ldr	r0, [pc, #176]	; (80016b0 <MX_GPIO_Init+0x24c>)
 8001600:	f004 fc2e 	bl	8005e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : legEn_Pin */
  GPIO_InitStruct.Pin = legEn_Pin;
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001608:	2301      	movs	r3, #1
 800160a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legEn_GPIO_Port, &GPIO_InitStruct);
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	4619      	mov	r1, r3
 800161a:	4826      	ldr	r0, [pc, #152]	; (80016b4 <MX_GPIO_Init+0x250>)
 800161c:	f004 fc20 	bl	8005e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD10 legDir_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|legDir_Pin;
 8001620:	f44f 438a 	mov.w	r3, #17664	; 0x4500
 8001624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	2301      	movs	r3, #1
 8001628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	481f      	ldr	r0, [pc, #124]	; (80016b8 <MX_GPIO_Init+0x254>)
 800163a:	f004 fc11 	bl	8005e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : legPul_Pin */
  GPIO_InitStruct.Pin = legPul_Pin;
 800163e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(legPul_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	4619      	mov	r1, r3
 8001656:	4818      	ldr	r0, [pc, #96]	; (80016b8 <MX_GPIO_Init+0x254>)
 8001658:	f004 fc02 	bl	8005e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : leftArmDir_Pin rigtArmEn_Pin rigtArmPul_Pin leftArmEn_Pin 
                           rigtArmDir_Pin */
  GPIO_InitStruct.Pin = leftArmDir_Pin|rigtArmEn_Pin|rigtArmPul_Pin|leftArmEn_Pin 
 800165c:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 8001660:	61fb      	str	r3, [r7, #28]
                          |rigtArmDir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	4619      	mov	r1, r3
 8001674:	480e      	ldr	r0, [pc, #56]	; (80016b0 <MX_GPIO_Init+0x24c>)
 8001676:	f004 fbf3 	bl	8005e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : leftArmPul_Pin */
  GPIO_InitStruct.Pin = leftArmPul_Pin;
 800167a:	2302      	movs	r3, #2
 800167c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(leftArmPul_GPIO_Port, &GPIO_InitStruct);
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	4619      	mov	r1, r3
 8001690:	4808      	ldr	r0, [pc, #32]	; (80016b4 <MX_GPIO_Init+0x250>)
 8001692:	f004 fbe5 	bl	8005e60 <HAL_GPIO_Init>

}
 8001696:	bf00      	nop
 8001698:	3730      	adds	r7, #48	; 0x30
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	58024400 	.word	0x58024400
 80016a4:	58020000 	.word	0x58020000
 80016a8:	58020800 	.word	0x58020800
 80016ac:	58020400 	.word	0x58020400
 80016b0:	58021800 	.word	0x58021800
 80016b4:	58021000 	.word	0x58021000
 80016b8:	58020c00 	.word	0x58020c00

080016bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_MspInit+0x30>)
 80016d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016d8:	4a08      	ldr	r2, [pc, #32]	; (80016fc <HAL_MspInit+0x30>)
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_MspInit+0x30>)
 80016e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	58024400 	.word	0x58024400

08001700 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a33      	ldr	r2, [pc, #204]	; (80017ec <HAL_ADC_MspInit+0xec>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d15f      	bne.n	80017e2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001722:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <HAL_ADC_MspInit+0xf0>)
 8001724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001728:	4a31      	ldr	r2, [pc, #196]	; (80017f0 <HAL_ADC_MspInit+0xf0>)
 800172a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800172e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001732:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <HAL_ADC_MspInit+0xf0>)
 8001734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <HAL_ADC_MspInit+0xf0>)
 8001742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001746:	4a2a      	ldr	r2, [pc, #168]	; (80017f0 <HAL_ADC_MspInit+0xf0>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <HAL_ADC_MspInit+0xf0>)
 8001752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PC0     ------> ADC3_INP10
    PC1     ------> ADC3_INP11
    PC3_C     ------> ADC3_INP1 
    */
    GPIO_InitStruct.Pin = RollRigt_Pin|RollLeft_Pin;
 800175e:	2303      	movs	r3, #3
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001762:	2303      	movs	r3, #3
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4619      	mov	r1, r3
 8001770:	4820      	ldr	r0, [pc, #128]	; (80017f4 <HAL_ADC_MspInit+0xf4>)
 8001772:	f004 fb75 	bl	8005e60 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001776:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800177a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800177e:	f000 fdab 	bl	80022d8 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream2;
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_ADC_MspInit+0xf8>)
 8001784:	4a1d      	ldr	r2, [pc, #116]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 8001786:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_ADC_MspInit+0xf8>)
 800178a:	2273      	movs	r2, #115	; 0x73
 800178c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <HAL_ADC_MspInit+0xf8>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_ADC_MspInit+0xf8>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_ADC_MspInit+0xf8>)
 800179c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_ADC_MspInit+0xf8>)
 80017a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017a8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <HAL_ADC_MspInit+0xf8>)
 80017ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_ADC_MspInit+0xf8>)
 80017b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_ADC_MspInit+0xf8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_ADC_MspInit+0xf8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80017c6:	480c      	ldr	r0, [pc, #48]	; (80017f8 <HAL_ADC_MspInit+0xf8>)
 80017c8:	f002 f82e 	bl	8003828 <HAL_DMA_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 80017d2:	f7ff ff73 	bl	80016bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <HAL_ADC_MspInit+0xf8>)
 80017da:	64da      	str	r2, [r3, #76]	; 0x4c
 80017dc:	4a06      	ldr	r2, [pc, #24]	; (80017f8 <HAL_ADC_MspInit+0xf8>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	; 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	58026000 	.word	0x58026000
 80017f0:	58024400 	.word	0x58024400
 80017f4:	58020800 	.word	0x58020800
 80017f8:	24000754 	.word	0x24000754
 80017fc:	40020040 	.word	0x40020040

08001800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_TIM_Base_MspInit+0x48>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d116      	bne.n	8001840 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_TIM_Base_MspInit+0x4c>)
 8001814:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001818:	4a0c      	ldr	r2, [pc, #48]	; (800184c <HAL_TIM_Base_MspInit+0x4c>)
 800181a:	f043 0320 	orr.w	r3, r3, #32
 800181e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_TIM_Base_MspInit+0x4c>)
 8001824:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001828:	f003 0320 	and.w	r3, r3, #32
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2100      	movs	r1, #0
 8001834:	2037      	movs	r0, #55	; 0x37
 8001836:	f001 ffc2 	bl	80037be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800183a:	2037      	movs	r0, #55	; 0x37
 800183c:	f001 ffd9 	bl	80037f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40001400 	.word	0x40001400
 800184c:	58024400 	.word	0x58024400

08001850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b090      	sub	sp, #64	; 0x40
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4aa3      	ldr	r2, [pc, #652]	; (8001afc <HAL_UART_MspInit+0x2ac>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d136      	bne.n	80018e0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001872:	4ba3      	ldr	r3, [pc, #652]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 8001874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001878:	4aa1      	ldr	r2, [pc, #644]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 800187a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800187e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001882:	4b9f      	ldr	r3, [pc, #636]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 8001884:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001888:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
 800188e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001890:	4b9b      	ldr	r3, [pc, #620]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 8001892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001896:	4a9a      	ldr	r2, [pc, #616]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 8001898:	f043 0320 	orr.w	r3, r3, #32
 800189c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a0:	4b97      	ldr	r3, [pc, #604]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 80018a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a6:	f003 0320 	and.w	r3, r3, #32
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = manualRobot_RX_Pin|manualRobot_TX_Pin;
 80018ae:	23c0      	movs	r3, #192	; 0xc0
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80018be:	2307      	movs	r3, #7
 80018c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c6:	4619      	mov	r1, r3
 80018c8:	488e      	ldr	r0, [pc, #568]	; (8001b04 <HAL_UART_MspInit+0x2b4>)
 80018ca:	f004 fac9 	bl	8005e60 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 4, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2104      	movs	r1, #4
 80018d2:	2052      	movs	r0, #82	; 0x52
 80018d4:	f001 ff73 	bl	80037be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80018d8:	2052      	movs	r0, #82	; 0x52
 80018da:	f001 ff8a 	bl	80037f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80018de:	e108      	b.n	8001af2 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a88      	ldr	r2, [pc, #544]	; (8001b08 <HAL_UART_MspInit+0x2b8>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d165      	bne.n	80019b6 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ea:	4b85      	ldr	r3, [pc, #532]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 80018ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018f0:	4a83      	ldr	r2, [pc, #524]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 80018f2:	f043 0310 	orr.w	r3, r3, #16
 80018f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018fa:	4b81      	ldr	r3, [pc, #516]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 80018fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	623b      	str	r3, [r7, #32]
 8001906:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001908:	4b7d      	ldr	r3, [pc, #500]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 800190a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190e:	4a7c      	ldr	r2, [pc, #496]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001918:	4b79      	ldr	r3, [pc, #484]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 800191a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	61fb      	str	r3, [r7, #28]
 8001924:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = compass_TX_Pin|compass_RX_Pin;
 8001926:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001938:	2304      	movs	r3, #4
 800193a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001940:	4619      	mov	r1, r3
 8001942:	4872      	ldr	r0, [pc, #456]	; (8001b0c <HAL_UART_MspInit+0x2bc>)
 8001944:	f004 fa8c 	bl	8005e60 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8001948:	4b71      	ldr	r3, [pc, #452]	; (8001b10 <HAL_UART_MspInit+0x2c0>)
 800194a:	4a72      	ldr	r2, [pc, #456]	; (8001b14 <HAL_UART_MspInit+0x2c4>)
 800194c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800194e:	4b70      	ldr	r3, [pc, #448]	; (8001b10 <HAL_UART_MspInit+0x2c0>)
 8001950:	2229      	movs	r2, #41	; 0x29
 8001952:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001954:	4b6e      	ldr	r3, [pc, #440]	; (8001b10 <HAL_UART_MspInit+0x2c0>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800195a:	4b6d      	ldr	r3, [pc, #436]	; (8001b10 <HAL_UART_MspInit+0x2c0>)
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001960:	4b6b      	ldr	r3, [pc, #428]	; (8001b10 <HAL_UART_MspInit+0x2c0>)
 8001962:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001966:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001968:	4b69      	ldr	r3, [pc, #420]	; (8001b10 <HAL_UART_MspInit+0x2c0>)
 800196a:	2200      	movs	r2, #0
 800196c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800196e:	4b68      	ldr	r3, [pc, #416]	; (8001b10 <HAL_UART_MspInit+0x2c0>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001974:	4b66      	ldr	r3, [pc, #408]	; (8001b10 <HAL_UART_MspInit+0x2c0>)
 8001976:	f44f 7280 	mov.w	r2, #256	; 0x100
 800197a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800197c:	4b64      	ldr	r3, [pc, #400]	; (8001b10 <HAL_UART_MspInit+0x2c0>)
 800197e:	2200      	movs	r2, #0
 8001980:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001982:	4b63      	ldr	r3, [pc, #396]	; (8001b10 <HAL_UART_MspInit+0x2c0>)
 8001984:	2200      	movs	r2, #0
 8001986:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001988:	4861      	ldr	r0, [pc, #388]	; (8001b10 <HAL_UART_MspInit+0x2c0>)
 800198a:	f001 ff4d 	bl	8003828 <HAL_DMA_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_UART_MspInit+0x148>
      Error_Handler();
 8001994:	f7ff fe92 	bl	80016bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a5d      	ldr	r2, [pc, #372]	; (8001b10 <HAL_UART_MspInit+0x2c0>)
 800199c:	679a      	str	r2, [r3, #120]	; 0x78
 800199e:	4a5c      	ldr	r2, [pc, #368]	; (8001b10 <HAL_UART_MspInit+0x2c0>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2101      	movs	r1, #1
 80019a8:	2025      	movs	r0, #37	; 0x25
 80019aa:	f001 ff08 	bl	80037be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019ae:	2025      	movs	r0, #37	; 0x25
 80019b0:	f001 ff1f 	bl	80037f2 <HAL_NVIC_EnableIRQ>
}
 80019b4:	e09d      	b.n	8001af2 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART3)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a57      	ldr	r2, [pc, #348]	; (8001b18 <HAL_UART_MspInit+0x2c8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d15d      	bne.n	8001a7c <HAL_UART_MspInit+0x22c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019c0:	4b4f      	ldr	r3, [pc, #316]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 80019c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019c6:	4a4e      	ldr	r2, [pc, #312]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 80019c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019d0:	4b4b      	ldr	r3, [pc, #300]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 80019d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019da:	61bb      	str	r3, [r7, #24]
 80019dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019de:	4b48      	ldr	r3, [pc, #288]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 80019e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e4:	4a46      	ldr	r2, [pc, #280]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 80019e6:	f043 0302 	orr.w	r3, r3, #2
 80019ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ee:	4b44      	ldr	r3, [pc, #272]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 80019f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PS2_TX_Pin|PS2_RX_Pin;
 80019fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a0e:	2307      	movs	r3, #7
 8001a10:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a16:	4619      	mov	r1, r3
 8001a18:	483c      	ldr	r0, [pc, #240]	; (8001b0c <HAL_UART_MspInit+0x2bc>)
 8001a1a:	f004 fa21 	bl	8005e60 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream2;
 8001a1e:	4b3f      	ldr	r3, [pc, #252]	; (8001b1c <HAL_UART_MspInit+0x2cc>)
 8001a20:	4a3f      	ldr	r2, [pc, #252]	; (8001b20 <HAL_UART_MspInit+0x2d0>)
 8001a22:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001a24:	4b3d      	ldr	r3, [pc, #244]	; (8001b1c <HAL_UART_MspInit+0x2cc>)
 8001a26:	222d      	movs	r2, #45	; 0x2d
 8001a28:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a2a:	4b3c      	ldr	r3, [pc, #240]	; (8001b1c <HAL_UART_MspInit+0x2cc>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a30:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <HAL_UART_MspInit+0x2cc>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a36:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <HAL_UART_MspInit+0x2cc>)
 8001a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a3c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a3e:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <HAL_UART_MspInit+0x2cc>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a44:	4b35      	ldr	r3, [pc, #212]	; (8001b1c <HAL_UART_MspInit+0x2cc>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001a4a:	4b34      	ldr	r3, [pc, #208]	; (8001b1c <HAL_UART_MspInit+0x2cc>)
 8001a4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a50:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a52:	4b32      	ldr	r3, [pc, #200]	; (8001b1c <HAL_UART_MspInit+0x2cc>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a58:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <HAL_UART_MspInit+0x2cc>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001a5e:	482f      	ldr	r0, [pc, #188]	; (8001b1c <HAL_UART_MspInit+0x2cc>)
 8001a60:	f001 fee2 	bl	8003828 <HAL_DMA_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_UART_MspInit+0x21e>
      Error_Handler();
 8001a6a:	f7ff fe27 	bl	80016bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a2a      	ldr	r2, [pc, #168]	; (8001b1c <HAL_UART_MspInit+0x2cc>)
 8001a72:	679a      	str	r2, [r3, #120]	; 0x78
 8001a74:	4a29      	ldr	r2, [pc, #164]	; (8001b1c <HAL_UART_MspInit+0x2cc>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a7a:	e03a      	b.n	8001af2 <HAL_UART_MspInit+0x2a2>
  else if(huart->Instance==USART6)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a28      	ldr	r2, [pc, #160]	; (8001b24 <HAL_UART_MspInit+0x2d4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d135      	bne.n	8001af2 <HAL_UART_MspInit+0x2a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a86:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 8001a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a8c:	4a1c      	ldr	r2, [pc, #112]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 8001a8e:	f043 0320 	orr.w	r3, r3, #32
 8001a92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 8001a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa4:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 8001aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aaa:	4a15      	ldr	r2, [pc, #84]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_UART_MspInit+0x2b0>)
 8001ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = mainBoard_TX_Pin|mainBoard_RX_Pin;
 8001ac2:	23c0      	movs	r3, #192	; 0xc0
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001ad2:	2307      	movs	r3, #7
 8001ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ada:	4619      	mov	r1, r3
 8001adc:	4812      	ldr	r0, [pc, #72]	; (8001b28 <HAL_UART_MspInit+0x2d8>)
 8001ade:	f004 f9bf 	bl	8005e60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	2047      	movs	r0, #71	; 0x47
 8001ae8:	f001 fe69 	bl	80037be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001aec:	2047      	movs	r0, #71	; 0x47
 8001aee:	f001 fe80 	bl	80037f2 <HAL_NVIC_EnableIRQ>
}
 8001af2:	bf00      	nop
 8001af4:	3740      	adds	r7, #64	; 0x40
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40007800 	.word	0x40007800
 8001b00:	58024400 	.word	0x58024400
 8001b04:	58021400 	.word	0x58021400
 8001b08:	40011000 	.word	0x40011000
 8001b0c:	58020400 	.word	0x58020400
 8001b10:	240008b0 	.word	0x240008b0
 8001b14:	40020058 	.word	0x40020058
 8001b18:	40004800 	.word	0x40004800
 8001b1c:	240001d8 	.word	0x240001d8
 8001b20:	40020440 	.word	0x40020440
 8001b24:	40011400 	.word	0x40011400
 8001b28:	58020800 	.word	0x58020800

08001b2c <kalmanFilter_Pitch>:
double P_Rigt = 2;         //covariance estimation (err_estimate)
double R_Rigt = 2;         //covariance of the observation noise (err_measure)
double Q_Rigt = 0.0009;    //process variance

double kalmanFilter_Pitch(double mea)
{
 8001b2c:	b490      	push	{r4, r7}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	ed87 0b00 	vstr	d0, [r7]
  kalmanGain_Pitch = P_Pitch /(P_Pitch + R_Pitch);
 8001b36:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <kalmanFilter_Pitch+0xb4>)
 8001b38:	ed93 5b00 	vldr	d5, [r3]
 8001b3c:	4b28      	ldr	r3, [pc, #160]	; (8001be0 <kalmanFilter_Pitch+0xb4>)
 8001b3e:	ed93 6b00 	vldr	d6, [r3]
 8001b42:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <kalmanFilter_Pitch+0xb8>)
 8001b44:	ed93 7b00 	vldr	d7, [r3]
 8001b48:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001b4c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b50:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <kalmanFilter_Pitch+0xbc>)
 8001b52:	ed83 7b00 	vstr	d7, [r3]
  x_Pitch[k] = x_Pitch[k-1] + kalmanGain_Pitch *(mea - x_Pitch[k-1]);
 8001b56:	4b25      	ldr	r3, [pc, #148]	; (8001bec <kalmanFilter_Pitch+0xc0>)
 8001b58:	ed93 6b00 	vldr	d6, [r3]
 8001b5c:	4b23      	ldr	r3, [pc, #140]	; (8001bec <kalmanFilter_Pitch+0xc0>)
 8001b5e:	ed93 7b00 	vldr	d7, [r3]
 8001b62:	ed97 5b00 	vldr	d5, [r7]
 8001b66:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <kalmanFilter_Pitch+0xbc>)
 8001b6c:	ed93 7b00 	vldr	d7, [r3]
 8001b70:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b74:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b78:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <kalmanFilter_Pitch+0xc0>)
 8001b7a:	ed83 7b02 	vstr	d7, [r3, #8]
  P_Pitch =  (1.0 - kalmanGain_Pitch) *P_Pitch + fabs(x_Pitch[k-1]-x_Pitch[k]) *Q_Pitch;
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <kalmanFilter_Pitch+0xbc>)
 8001b80:	ed93 7b00 	vldr	d7, [r3]
 8001b84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b88:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <kalmanFilter_Pitch+0xb4>)
 8001b8e:	ed93 7b00 	vldr	d7, [r3]
 8001b92:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <kalmanFilter_Pitch+0xc0>)
 8001b98:	ed93 5b00 	vldr	d5, [r3]
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <kalmanFilter_Pitch+0xc0>)
 8001b9e:	ed93 7b02 	vldr	d7, [r3, #8]
 8001ba2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001ba6:	eeb0 5bc7 	vabs.f64	d5, d7
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <kalmanFilter_Pitch+0xc4>)
 8001bac:	ed93 7b00 	vldr	d7, [r3]
 8001bb0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001bb4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <kalmanFilter_Pitch+0xb4>)
 8001bba:	ed83 7b00 	vstr	d7, [r3]
  x_Pitch[k-1] = x_Pitch[k];
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <kalmanFilter_Pitch+0xc0>)
 8001bc0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001bc4:	4a09      	ldr	r2, [pc, #36]	; (8001bec <kalmanFilter_Pitch+0xc0>)
 8001bc6:	e9c2 3400 	strd	r3, r4, [r2]
  return x_Pitch[k];
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <kalmanFilter_Pitch+0xc0>)
 8001bcc:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001bd0:	ec44 3b17 	vmov	d7, r3, r4
}
 8001bd4:	eeb0 0b47 	vmov.f64	d0, d7
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc90      	pop	{r4, r7}
 8001bde:	4770      	bx	lr
 8001be0:	24000020 	.word	0x24000020
 8001be4:	24000028 	.word	0x24000028
 8001be8:	24000bb8 	.word	0x24000bb8
 8001bec:	24000be8 	.word	0x24000be8
 8001bf0:	24000030 	.word	0x24000030

08001bf4 <kalmanFilter_Left>:

double kalmanFilter_Left(double mea)
{
 8001bf4:	b490      	push	{r4, r7}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	ed87 0b00 	vstr	d0, [r7]
  kalmanGain_Left = P_Left /(P_Left + R_Left);
 8001bfe:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <kalmanFilter_Left+0xb4>)
 8001c00:	ed93 5b00 	vldr	d5, [r3]
 8001c04:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <kalmanFilter_Left+0xb4>)
 8001c06:	ed93 6b00 	vldr	d6, [r3]
 8001c0a:	4b28      	ldr	r3, [pc, #160]	; (8001cac <kalmanFilter_Left+0xb8>)
 8001c0c:	ed93 7b00 	vldr	d7, [r3]
 8001c10:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001c14:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c18:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <kalmanFilter_Left+0xbc>)
 8001c1a:	ed83 7b00 	vstr	d7, [r3]
  x_Left[k] = x_Left[k-1] + kalmanGain_Left *(mea - x_Left[k-1]);
 8001c1e:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <kalmanFilter_Left+0xc0>)
 8001c20:	ed93 6b00 	vldr	d6, [r3]
 8001c24:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <kalmanFilter_Left+0xc0>)
 8001c26:	ed93 7b00 	vldr	d7, [r3]
 8001c2a:	ed97 5b00 	vldr	d5, [r7]
 8001c2e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001c32:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <kalmanFilter_Left+0xbc>)
 8001c34:	ed93 7b00 	vldr	d7, [r3]
 8001c38:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c3c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c40:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <kalmanFilter_Left+0xc0>)
 8001c42:	ed83 7b02 	vstr	d7, [r3, #8]
  P_Left =  (1.0 - kalmanGain_Left) *P_Left + fabs(x_Left[k-1]-x_Left[k]) *Q_Left;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <kalmanFilter_Left+0xbc>)
 8001c48:	ed93 7b00 	vldr	d7, [r3]
 8001c4c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c50:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001c54:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <kalmanFilter_Left+0xb4>)
 8001c56:	ed93 7b00 	vldr	d7, [r3]
 8001c5a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <kalmanFilter_Left+0xc0>)
 8001c60:	ed93 5b00 	vldr	d5, [r3]
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <kalmanFilter_Left+0xc0>)
 8001c66:	ed93 7b02 	vldr	d7, [r3, #8]
 8001c6a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001c6e:	eeb0 5bc7 	vabs.f64	d5, d7
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <kalmanFilter_Left+0xc4>)
 8001c74:	ed93 7b00 	vldr	d7, [r3]
 8001c78:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c7c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <kalmanFilter_Left+0xb4>)
 8001c82:	ed83 7b00 	vstr	d7, [r3]
  x_Left[k-1] = x_Left[k];
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <kalmanFilter_Left+0xc0>)
 8001c88:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001c8c:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <kalmanFilter_Left+0xc0>)
 8001c8e:	e9c2 3400 	strd	r3, r4, [r2]
  return x_Left[k];
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <kalmanFilter_Left+0xc0>)
 8001c94:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001c98:	ec44 3b17 	vmov	d7, r3, r4
}
 8001c9c:	eeb0 0b47 	vmov.f64	d0, d7
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc90      	pop	{r4, r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	24000038 	.word	0x24000038
 8001cac:	24000040 	.word	0x24000040
 8001cb0:	24000c00 	.word	0x24000c00
 8001cb4:	24000c08 	.word	0x24000c08
 8001cb8:	24000048 	.word	0x24000048

08001cbc <kalmanFilter_Rigt>:

double kalmanFilter_Rigt(double mea)
{
 8001cbc:	b490      	push	{r4, r7}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	ed87 0b00 	vstr	d0, [r7]
  kalmanGain_Rigt = P_Rigt /(P_Rigt + R_Rigt);
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <kalmanFilter_Rigt+0xb4>)
 8001cc8:	ed93 5b00 	vldr	d5, [r3]
 8001ccc:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <kalmanFilter_Rigt+0xb4>)
 8001cce:	ed93 6b00 	vldr	d6, [r3]
 8001cd2:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <kalmanFilter_Rigt+0xb8>)
 8001cd4:	ed93 7b00 	vldr	d7, [r3]
 8001cd8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001cdc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <kalmanFilter_Rigt+0xbc>)
 8001ce2:	ed83 7b00 	vstr	d7, [r3]
  x_Rigt[k] = x_Rigt[k-1] + kalmanGain_Rigt *(mea - x_Rigt[k-1]);
 8001ce6:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <kalmanFilter_Rigt+0xc0>)
 8001ce8:	ed93 6b00 	vldr	d6, [r3]
 8001cec:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <kalmanFilter_Rigt+0xc0>)
 8001cee:	ed93 7b00 	vldr	d7, [r3]
 8001cf2:	ed97 5b00 	vldr	d5, [r7]
 8001cf6:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <kalmanFilter_Rigt+0xbc>)
 8001cfc:	ed93 7b00 	vldr	d7, [r3]
 8001d00:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001d04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d08:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <kalmanFilter_Rigt+0xc0>)
 8001d0a:	ed83 7b02 	vstr	d7, [r3, #8]
  P_Rigt =  (1.0 - kalmanGain_Rigt) *P_Rigt + fabs(x_Rigt[k-1]-x_Rigt[k]) *Q_Rigt;
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <kalmanFilter_Rigt+0xbc>)
 8001d10:	ed93 7b00 	vldr	d7, [r3]
 8001d14:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d18:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <kalmanFilter_Rigt+0xb4>)
 8001d1e:	ed93 7b00 	vldr	d7, [r3]
 8001d22:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <kalmanFilter_Rigt+0xc0>)
 8001d28:	ed93 5b00 	vldr	d5, [r3]
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <kalmanFilter_Rigt+0xc0>)
 8001d2e:	ed93 7b02 	vldr	d7, [r3, #8]
 8001d32:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001d36:	eeb0 5bc7 	vabs.f64	d5, d7
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <kalmanFilter_Rigt+0xc4>)
 8001d3c:	ed93 7b00 	vldr	d7, [r3]
 8001d40:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001d44:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <kalmanFilter_Rigt+0xb4>)
 8001d4a:	ed83 7b00 	vstr	d7, [r3]
  x_Rigt[k-1] = x_Rigt[k];
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <kalmanFilter_Rigt+0xc0>)
 8001d50:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001d54:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <kalmanFilter_Rigt+0xc0>)
 8001d56:	e9c2 3400 	strd	r3, r4, [r2]
  return x_Rigt[k];
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <kalmanFilter_Rigt+0xc0>)
 8001d5c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001d60:	ec44 3b17 	vmov	d7, r3, r4
}
 8001d64:	eeb0 0b47 	vmov.f64	d0, d7
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc90      	pop	{r4, r7}
 8001d6e:	4770      	bx	lr
 8001d70:	24000050 	.word	0x24000050
 8001d74:	24000058 	.word	0x24000058
 8001d78:	24000bf8 	.word	0x24000bf8
 8001d7c:	24000c18 	.word	0x24000c18
 8001d80:	24000060 	.word	0x24000060

08001d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d96:	e7fe      	b.n	8001d96 <HardFault_Handler+0x4>

08001d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <MemManage_Handler+0x4>

08001d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da2:	e7fe      	b.n	8001da2 <BusFault_Handler+0x4>

08001da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <UsageFault_Handler+0x4>

08001daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  compassGetDataPeriod++;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <SysTick_Handler+0x2c>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <SysTick_Handler+0x2c>)
 8001de2:	701a      	strb	r2, [r3, #0]
  if(compassGetDataPeriod > 5)
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <SysTick_Handler+0x2c>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	d904      	bls.n	8001df6 <SysTick_Handler+0x22>
  {
	  compassGetDataPeriod = 0;
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <SysTick_Handler+0x2c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
	  compassRequest();
 8001df2:	f7fe fd11 	bl	8000818 <compassRequest>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df6:	f000 fa21 	bl	800223c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	24000938 	.word	0x24000938
 8001e04:	00000000 	.word	0x00000000

08001e08 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

	rigtRawDistance = aRigt_Linear*adc3Value[0] + bRigt_Linear;
 8001e0c:	4b32      	ldr	r3, [pc, #200]	; (8001ed8 <DMA1_Stream2_IRQHandler+0xd0>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	ee07 3a90 	vmov	s15, r3
 8001e14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e18:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001eb8 <DMA1_Stream2_IRQHandler+0xb0>
 8001e1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e20:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001ec0 <DMA1_Stream2_IRQHandler+0xb8>
 8001e24:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e28:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <DMA1_Stream2_IRQHandler+0xd4>)
 8001e2a:	ed83 7b00 	vstr	d7, [r3]
	pitchRawDistance = aPitch_Linear*adc3Value[1] + bPitch_Linear;
 8001e2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <DMA1_Stream2_IRQHandler+0xd0>)
 8001e30:	885b      	ldrh	r3, [r3, #2]
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e3a:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <DMA1_Stream2_IRQHandler+0xd8>)
 8001e3c:	ed83 7b00 	vstr	d7, [r3]
	leftRawDistance = aLeft_Linear*adc3Value[2] + bLeft_Linear;
 8001e40:	4b25      	ldr	r3, [pc, #148]	; (8001ed8 <DMA1_Stream2_IRQHandler+0xd0>)
 8001e42:	889b      	ldrh	r3, [r3, #4]
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e4c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001ec8 <DMA1_Stream2_IRQHandler+0xc0>
 8001e50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e54:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001ed0 <DMA1_Stream2_IRQHandler+0xc8>
 8001e58:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <DMA1_Stream2_IRQHandler+0xdc>)
 8001e5e:	ed83 7b00 	vstr	d7, [r3]
	rigtDistance = kalmanFilter_Rigt(rigtRawDistance);
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <DMA1_Stream2_IRQHandler+0xd4>)
 8001e64:	ed93 7b00 	vldr	d7, [r3]
 8001e68:	eeb0 0b47 	vmov.f64	d0, d7
 8001e6c:	f7ff ff26 	bl	8001cbc <kalmanFilter_Rigt>
 8001e70:	eeb0 7b40 	vmov.f64	d7, d0
 8001e74:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <DMA1_Stream2_IRQHandler+0xe0>)
 8001e76:	ed83 7b00 	vstr	d7, [r3]
	pitchDistance = kalmanFilter_Pitch(pitchRawDistance);
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <DMA1_Stream2_IRQHandler+0xd8>)
 8001e7c:	ed93 7b00 	vldr	d7, [r3]
 8001e80:	eeb0 0b47 	vmov.f64	d0, d7
 8001e84:	f7ff fe52 	bl	8001b2c <kalmanFilter_Pitch>
 8001e88:	eeb0 7b40 	vmov.f64	d7, d0
 8001e8c:	4b17      	ldr	r3, [pc, #92]	; (8001eec <DMA1_Stream2_IRQHandler+0xe4>)
 8001e8e:	ed83 7b00 	vstr	d7, [r3]
	leftDistance = kalmanFilter_Left(leftRawDistance);
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <DMA1_Stream2_IRQHandler+0xdc>)
 8001e94:	ed93 7b00 	vldr	d7, [r3]
 8001e98:	eeb0 0b47 	vmov.f64	d0, d7
 8001e9c:	f7ff feaa 	bl	8001bf4 <kalmanFilter_Left>
 8001ea0:	eeb0 7b40 	vmov.f64	d7, d0
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <DMA1_Stream2_IRQHandler+0xe8>)
 8001ea6:	ed83 7b00 	vstr	d7, [r3]

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001eaa:	4812      	ldr	r0, [pc, #72]	; (8001ef4 <DMA1_Stream2_IRQHandler+0xec>)
 8001eac:	f002 fcc6 	bl	800483c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	f9f54139 	.word	0xf9f54139
 8001ebc:	3fe6f0aa 	.word	0x3fe6f0aa
 8001ec0:	f1aba967 	.word	0xf1aba967
 8001ec4:	4061a548 	.word	0x4061a548
 8001ec8:	51b66062 	.word	0x51b66062
 8001ecc:	3fe6d9df 	.word	0x3fe6d9df
 8001ed0:	d9de2d47 	.word	0xd9de2d47
 8001ed4:	406227a8 	.word	0x406227a8
 8001ed8:	24000b68 	.word	0x24000b68
 8001edc:	240001d0 	.word	0x240001d0
 8001ee0:	24000bd8 	.word	0x24000bd8
 8001ee4:	240000e8 	.word	0x240000e8
 8001ee8:	24000830 	.word	0x24000830
 8001eec:	24000b50 	.word	0x24000b50
 8001ef0:	240009f0 	.word	0x240009f0
 8001ef4:	24000754 	.word	0x24000754

08001ef8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	  compassData = (compassRxPacket[0]<<8)|compassRxPacket[1];
 8001efc:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <DMA1_Stream3_IRQHandler+0x24>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	b21a      	sxth	r2, r3
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <DMA1_Stream3_IRQHandler+0x24>)
 8001f06:	785b      	ldrb	r3, [r3, #1]
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	b21a      	sxth	r2, r3
 8001f0e:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <DMA1_Stream3_IRQHandler+0x28>)
 8001f10:	801a      	strh	r2, [r3, #0]
  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f12:	4804      	ldr	r0, [pc, #16]	; (8001f24 <DMA1_Stream3_IRQHandler+0x2c>)
 8001f14:	f002 fc92 	bl	800483c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	24000724 	.word	0x24000724
 8001f20:	240007f0 	.word	0x240007f0
 8001f24:	240008b0 	.word	0x240008b0

08001f28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <USART1_IRQHandler+0x10>)
 8001f2e:	f007 fd6d 	bl	8009a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	24000950 	.word	0x24000950

08001f3c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <TIM7_IRQHandler+0x10>)
 8001f42:	f007 f811 	bl	8008f68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	24000b70 	.word	0x24000b70

08001f50 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	if(PS2CheckbyteCount == 4 )
 8001f54:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <DMA2_Stream2_IRQHandler+0xa8>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d135      	bne.n	8001fc8 <DMA2_Stream2_IRQHandler+0x78>
	{
	  PS2Data[PS2DataIndex++] = PS2RxPacket[0];
 8001f5c:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <DMA2_Stream2_IRQHandler+0xac>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	b2d1      	uxtb	r1, r2
 8001f64:	4a25      	ldr	r2, [pc, #148]	; (8001ffc <DMA2_Stream2_IRQHandler+0xac>)
 8001f66:	7011      	strb	r1, [r2, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b25      	ldr	r3, [pc, #148]	; (8002000 <DMA2_Stream2_IRQHandler+0xb0>)
 8001f6c:	7819      	ldrb	r1, [r3, #0]
 8001f6e:	4b25      	ldr	r3, [pc, #148]	; (8002004 <DMA2_Stream2_IRQHandler+0xb4>)
 8001f70:	5499      	strb	r1, [r3, r2]
		if(PS2DataIndex > 5)
 8001f72:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <DMA2_Stream2_IRQHandler+0xac>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b05      	cmp	r3, #5
 8001f78:	d926      	bls.n	8001fc8 <DMA2_Stream2_IRQHandler+0x78>
		{
			PS2DataIndex = 0;
 8001f7a:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <DMA2_Stream2_IRQHandler+0xac>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
			PS2CheckbyteCount = 0;
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <DMA2_Stream2_IRQHandler+0xa8>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
			PS2Button = (PS2Data[0]<<8) | PS2Data[1];
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <DMA2_Stream2_IRQHandler+0xb4>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	b21a      	sxth	r2, r3
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <DMA2_Stream2_IRQHandler+0xb4>)
 8001f90:	785b      	ldrb	r3, [r3, #1]
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	4313      	orrs	r3, r2
 8001f96:	b21a      	sxth	r2, r3
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <DMA2_Stream2_IRQHandler+0xb8>)
 8001f9a:	801a      	strh	r2, [r3, #0]
			PS2JoyRigt = (PS2Data[2]<<8) | PS2Data[3];
 8001f9c:	4b19      	ldr	r3, [pc, #100]	; (8002004 <DMA2_Stream2_IRQHandler+0xb4>)
 8001f9e:	789b      	ldrb	r3, [r3, #2]
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	b21a      	sxth	r2, r3
 8001fa4:	4b17      	ldr	r3, [pc, #92]	; (8002004 <DMA2_Stream2_IRQHandler+0xb4>)
 8001fa6:	78db      	ldrb	r3, [r3, #3]
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	4313      	orrs	r3, r2
 8001fac:	b21a      	sxth	r2, r3
 8001fae:	4b17      	ldr	r3, [pc, #92]	; (800200c <DMA2_Stream2_IRQHandler+0xbc>)
 8001fb0:	801a      	strh	r2, [r3, #0]
			PS2JoyLeft = (PS2Data[4]<<8) | PS2Data[5];
 8001fb2:	4b14      	ldr	r3, [pc, #80]	; (8002004 <DMA2_Stream2_IRQHandler+0xb4>)
 8001fb4:	791b      	ldrb	r3, [r3, #4]
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	b21a      	sxth	r2, r3
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <DMA2_Stream2_IRQHandler+0xb4>)
 8001fbc:	795b      	ldrb	r3, [r3, #5]
 8001fbe:	b21b      	sxth	r3, r3
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	b21a      	sxth	r2, r3
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <DMA2_Stream2_IRQHandler+0xc0>)
 8001fc6:	801a      	strh	r2, [r3, #0]
		}
	}
	if(PS2RxPacket[0] == 0xAA)
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <DMA2_Stream2_IRQHandler+0xb0>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2baa      	cmp	r3, #170	; 0xaa
 8001fce:	d106      	bne.n	8001fde <DMA2_Stream2_IRQHandler+0x8e>
		PS2CheckbyteCount++;
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <DMA2_Stream2_IRQHandler+0xa8>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <DMA2_Stream2_IRQHandler+0xa8>)
 8001fda:	701a      	strb	r2, [r3, #0]
 8001fdc:	e006      	b.n	8001fec <DMA2_Stream2_IRQHandler+0x9c>
	else
		if(PS2CheckbyteCount != 4)
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <DMA2_Stream2_IRQHandler+0xa8>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d002      	beq.n	8001fec <DMA2_Stream2_IRQHandler+0x9c>
			PS2CheckbyteCount = 0;
 8001fe6:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <DMA2_Stream2_IRQHandler+0xa8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001fec:	4809      	ldr	r0, [pc, #36]	; (8002014 <DMA2_Stream2_IRQHandler+0xc4>)
 8001fee:	f002 fc25 	bl	800483c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	24000094 	.word	0x24000094
 8001ffc:	24000840 	.word	0x24000840
 8002000:	24000af8 	.word	0x24000af8
 8002004:	2400071c 	.word	0x2400071c
 8002008:	240009ec 	.word	0x240009ec
 800200c:	240009f8 	.word	0x240009f8
 8002010:	24000b20 	.word	0x24000b20
 8002014:	240001d8 	.word	0x240001d8

08002018 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <USART6_IRQHandler+0x10>)
 800201e:	f007 fcf5 	bl	8009a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	24000a6c 	.word	0x24000a6c

0800202c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <UART7_IRQHandler+0x10>)
 8002032:	f007 fceb 	bl	8009a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	24000100 	.word	0x24000100

08002040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002044:	4b29      	ldr	r3, [pc, #164]	; (80020ec <SystemInit+0xac>)
 8002046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204a:	4a28      	ldr	r2, [pc, #160]	; (80020ec <SystemInit+0xac>)
 800204c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002054:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <SystemInit+0xb0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a25      	ldr	r2, [pc, #148]	; (80020f0 <SystemInit+0xb0>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002060:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <SystemInit+0xb0>)
 8002062:	2200      	movs	r2, #0
 8002064:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002066:	4b22      	ldr	r3, [pc, #136]	; (80020f0 <SystemInit+0xb0>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4921      	ldr	r1, [pc, #132]	; (80020f0 <SystemInit+0xb0>)
 800206c:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <SystemInit+0xb4>)
 800206e:	4013      	ands	r3, r2
 8002070:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002072:	4b1f      	ldr	r3, [pc, #124]	; (80020f0 <SystemInit+0xb0>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <SystemInit+0xb0>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800207e:	4b1c      	ldr	r3, [pc, #112]	; (80020f0 <SystemInit+0xb0>)
 8002080:	2200      	movs	r2, #0
 8002082:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002084:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <SystemInit+0xb0>)
 8002086:	2200      	movs	r2, #0
 8002088:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800208a:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <SystemInit+0xb0>)
 800208c:	2200      	movs	r2, #0
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8002090:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <SystemInit+0xb0>)
 8002092:	2200      	movs	r2, #0
 8002094:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002096:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <SystemInit+0xb0>)
 8002098:	2200      	movs	r2, #0
 800209a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800209c:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <SystemInit+0xb0>)
 800209e:	2200      	movs	r2, #0
 80020a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80020a2:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <SystemInit+0xb0>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <SystemInit+0xb0>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <SystemInit+0xb0>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020b4:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <SystemInit+0xb0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0d      	ldr	r2, [pc, #52]	; (80020f0 <SystemInit+0xb0>)
 80020ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <SystemInit+0xb0>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <SystemInit+0xb8>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <SystemInit+0xbc>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020d2:	d202      	bcs.n	80020da <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <SystemInit+0xc0>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020da:	4b04      	ldr	r3, [pc, #16]	; (80020ec <SystemInit+0xac>)
 80020dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020e0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00
 80020f0:	58024400 	.word	0x58024400
 80020f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80020f8:	5c001000 	.word	0x5c001000
 80020fc:	ffff0000 	.word	0xffff0000
 8002100:	51008108 	.word	0x51008108

08002104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800213c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002108:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800210a:	e003      	b.n	8002114 <LoopCopyDataInit>

0800210c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800210e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002110:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002112:	3104      	adds	r1, #4

08002114 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002114:	480b      	ldr	r0, [pc, #44]	; (8002144 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002118:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800211a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800211c:	d3f6      	bcc.n	800210c <CopyDataInit>
  ldr  r2, =_sbss
 800211e:	4a0b      	ldr	r2, [pc, #44]	; (800214c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002120:	e002      	b.n	8002128 <LoopFillZerobss>

08002122 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002122:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002124:	f842 3b04 	str.w	r3, [r2], #4

08002128 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800212a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800212c:	d3f9      	bcc.n	8002122 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800212e:	f7ff ff87 	bl	8002040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002132:	f00a fde3 	bl	800ccfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002136:	f7fe fe75 	bl	8000e24 <main>
  bx  lr    
 800213a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800213c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002140:	0800cda4 	.word	0x0800cda4
  ldr  r0, =_sdata
 8002144:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002148:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 800214c:	24000078 	.word	0x24000078
  ldr  r3, = _ebss
 8002150:	24000c2c 	.word	0x24000c2c

08002154 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002154:	e7fe      	b.n	8002154 <ADC3_IRQHandler>
	...

08002158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800215e:	2003      	movs	r0, #3
 8002160:	f001 fb22 	bl	80037a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002164:	f004 fe28 	bl	8006db8 <HAL_RCC_GetSysClockFreq>
 8002168:	4601      	mov	r1, r0
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_Init+0x68>)
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <HAL_Init+0x6c>)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	fa21 f303 	lsr.w	r3, r1, r3
 8002180:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002182:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <HAL_Init+0x68>)
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <HAL_Init+0x6c>)
 800218c:	5cd3      	ldrb	r3, [r2, r3]
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	4a0b      	ldr	r2, [pc, #44]	; (80021c8 <HAL_Init+0x70>)
 800219a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800219c:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <HAL_Init+0x74>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021a2:	2000      	movs	r0, #0
 80021a4:	f000 f814 	bl	80021d0 <HAL_InitTick>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e002      	b.n	80021b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021b2:	f7ff fa8b 	bl	80016cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	58024400 	.word	0x58024400
 80021c4:	0800cd7c 	.word	0x0800cd7c
 80021c8:	2400006c 	.word	0x2400006c
 80021cc:	24000068 	.word	0x24000068

080021d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80021d8:	4b15      	ldr	r3, [pc, #84]	; (8002230 <HAL_InitTick+0x60>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e021      	b.n	8002228 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <HAL_InitTick+0x64>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_InitTick+0x60>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4619      	mov	r1, r3
 80021ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fa:	4618      	mov	r0, r3
 80021fc:	f001 fb07 	bl	800380e <HAL_SYSTICK_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e00e      	b.n	8002228 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b0f      	cmp	r3, #15
 800220e:	d80a      	bhi.n	8002226 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002210:	2200      	movs	r2, #0
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f001 fad1 	bl	80037be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800221c:	4a06      	ldr	r2, [pc, #24]	; (8002238 <HAL_InitTick+0x68>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	e000      	b.n	8002228 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	24000074 	.word	0x24000074
 8002234:	24000068 	.word	0x24000068
 8002238:	24000070 	.word	0x24000070

0800223c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_IncTick+0x20>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_IncTick+0x24>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4413      	add	r3, r2
 800224c:	4a04      	ldr	r2, [pc, #16]	; (8002260 <HAL_IncTick+0x24>)
 800224e:	6013      	str	r3, [r2, #0]
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	24000074 	.word	0x24000074
 8002260:	24000c28 	.word	0x24000c28

08002264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return uwTick;
 8002268:	4b03      	ldr	r3, [pc, #12]	; (8002278 <HAL_GetTick+0x14>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	24000c28 	.word	0x24000c28

0800227c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002284:	f7ff ffee 	bl	8002264 <HAL_GetTick>
 8002288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d005      	beq.n	80022a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_Delay+0x40>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4413      	add	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022a2:	bf00      	nop
 80022a4:	f7ff ffde 	bl	8002264 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d8f7      	bhi.n	80022a4 <HAL_Delay+0x28>
  {
  }
}
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	24000074 	.word	0x24000074

080022c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80022c4:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <HAL_GetREVID+0x14>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	0c1b      	lsrs	r3, r3, #16
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	5c001000 	.word	0x5c001000

080022d8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80022e2:	4b07      	ldr	r3, [pc, #28]	; (8002300 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	401a      	ands	r2, r3
 80022ec:	4904      	ldr	r1, [pc, #16]	; (8002300 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	58000400 	.word	0x58000400

08002304 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	609a      	str	r2, [r3, #8]
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	609a      	str	r2, [r3, #8]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800236c:	b490      	push	{r4, r7}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	3360      	adds	r3, #96	; 0x60
 800237e:	461a      	mov	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	430b      	orrs	r3, r1
 8002398:	4313      	orrs	r3, r2
 800239a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc90      	pop	{r4, r7}
 80023a4:	4770      	bx	lr

080023a6 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f003 031f 	and.w	r3, r3, #31
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	431a      	orrs	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	611a      	str	r2, [r3, #16]
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80023d8:	b490      	push	{r4, r7}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3360      	adds	r3, #96	; 0x60
 80023e8:	461a      	mov	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80023f2:	6823      	ldr	r3, [r4, #0]
 80023f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	6023      	str	r3, [r4, #0]
}
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bc90      	pop	{r4, r7}
 8002406:	4770      	bx	lr

08002408 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800242e:	b490      	push	{r4, r7}
 8002430:	b084      	sub	sp, #16
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	3330      	adds	r3, #48	; 0x30
 800243e:	461a      	mov	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	0a1b      	lsrs	r3, r3, #8
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	4413      	add	r3, r2
 800244c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800244e:	6822      	ldr	r2, [r4, #0]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	211f      	movs	r1, #31
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	401a      	ands	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	0e9b      	lsrs	r3, r3, #26
 8002464:	f003 011f 	and.w	r1, r3, #31
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	4313      	orrs	r3, r2
 8002474:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bc90      	pop	{r4, r7}
 800247e:	4770      	bx	lr

08002480 <LL_ADC_REG_SetDataTransferMode>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f023 0203 	bic.w	r2, r3, #3
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	60da      	str	r2, [r3, #12]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024a6:	b490      	push	{r4, r7}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	3314      	adds	r3, #20
 80024b6:	461a      	mov	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	0e5b      	lsrs	r3, r3, #25
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	4413      	add	r3, r2
 80024c4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80024c6:	6822      	ldr	r2, [r4, #0]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	0d1b      	lsrs	r3, r3, #20
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	2107      	movs	r1, #7
 80024d2:	fa01 f303 	lsl.w	r3, r1, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	401a      	ands	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	0d1b      	lsrs	r3, r3, #20
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	4313      	orrs	r3, r2
 80024ea:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc90      	pop	{r4, r7}
 80024f4:	4770      	bx	lr
	...

080024f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002510:	43db      	mvns	r3, r3
 8002512:	401a      	ands	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f003 0318 	and.w	r3, r3, #24
 800251a:	4908      	ldr	r1, [pc, #32]	; (800253c <LL_ADC_SetChannelSingleDiff+0x44>)
 800251c:	40d9      	lsrs	r1, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	400b      	ands	r3, r1
 8002522:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002526:	431a      	orrs	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800252e:	bf00      	nop
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	000fffff 	.word	0x000fffff

08002540 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 031f 	and.w	r3, r3, #31
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <LL_ADC_DisableDeepPowerDown+0x20>)
 800256a:	4013      	ands	r3, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6093      	str	r3, [r2, #8]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	5fffffc0 	.word	0x5fffffc0

08002580 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002594:	d101      	bne.n	800259a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <LL_ADC_EnableInternalRegulator+0x24>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	6fffffc0 	.word	0x6fffffc0

080025d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025e4:	d101      	bne.n	80025ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <LL_ADC_Enable+0x24>)
 8002606:	4013      	ands	r3, r2
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	7fffffc0 	.word	0x7fffffc0

08002620 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <LL_ADC_IsEnabled+0x18>
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <LL_ADC_IsEnabled+0x1a>
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <LL_ADC_REG_StartConversion+0x24>)
 8002656:	4013      	ands	r3, r2
 8002658:	f043 0204 	orr.w	r2, r3, #4
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	7fffffc0 	.word	0x7fffffc0

08002670 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b04      	cmp	r3, #4
 8002682:	d101      	bne.n	8002688 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d101      	bne.n	80026ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b089      	sub	sp, #36	; 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e18e      	b.n	80029f4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d109      	bne.n	80026f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff f80b 	bl	8001700 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ff3f 	bl	8002580 <LL_ADC_IsDeepPowerDownEnabled>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d004      	beq.n	8002712 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff25 	bl	800255c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff ff5a 	bl	80025d0 <LL_ADC_IsInternalRegulatorEnabled>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d113      	bne.n	800274a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff ff3e 	bl	80025a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800272c:	4b9a      	ldr	r3, [pc, #616]	; (8002998 <HAL_ADC_Init+0x2dc>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	099b      	lsrs	r3, r3, #6
 8002732:	4a9a      	ldr	r2, [pc, #616]	; (800299c <HAL_ADC_Init+0x2e0>)
 8002734:	fba2 2303 	umull	r2, r3, r2, r3
 8002738:	099b      	lsrs	r3, r3, #6
 800273a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800273c:	e002      	b.n	8002744 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	3b01      	subs	r3, #1
 8002742:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f9      	bne.n	800273e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff ff3e 	bl	80025d0 <LL_ADC_IsInternalRegulatorEnabled>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10d      	bne.n	8002776 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275e:	f043 0210 	orr.w	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276a:	f043 0201 	orr.w	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff78 	bl	8002670 <LL_ADC_REG_IsConversionOngoing>
 8002780:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 8129 	bne.w	80029e2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2b00      	cmp	r3, #0
 8002794:	f040 8125 	bne.w	80029e2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027a0:	f043 0202 	orr.w	r2, r3, #2
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff37 	bl	8002620 <LL_ADC_IsEnabled>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d136      	bne.n	8002826 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a78      	ldr	r2, [pc, #480]	; (80029a0 <HAL_ADC_Init+0x2e4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d004      	beq.n	80027cc <HAL_ADC_Init+0x110>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a77      	ldr	r2, [pc, #476]	; (80029a4 <HAL_ADC_Init+0x2e8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d10e      	bne.n	80027ea <HAL_ADC_Init+0x12e>
 80027cc:	4874      	ldr	r0, [pc, #464]	; (80029a0 <HAL_ADC_Init+0x2e4>)
 80027ce:	f7ff ff27 	bl	8002620 <LL_ADC_IsEnabled>
 80027d2:	4604      	mov	r4, r0
 80027d4:	4873      	ldr	r0, [pc, #460]	; (80029a4 <HAL_ADC_Init+0x2e8>)
 80027d6:	f7ff ff23 	bl	8002620 <LL_ADC_IsEnabled>
 80027da:	4603      	mov	r3, r0
 80027dc:	4323      	orrs	r3, r4
 80027de:	2b00      	cmp	r3, #0
 80027e0:	bf0c      	ite	eq
 80027e2:	2301      	moveq	r3, #1
 80027e4:	2300      	movne	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	e008      	b.n	80027fc <HAL_ADC_Init+0x140>
 80027ea:	486f      	ldr	r0, [pc, #444]	; (80029a8 <HAL_ADC_Init+0x2ec>)
 80027ec:	f7ff ff18 	bl	8002620 <LL_ADC_IsEnabled>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	bf0c      	ite	eq
 80027f6:	2301      	moveq	r3, #1
 80027f8:	2300      	movne	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d012      	beq.n	8002826 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a66      	ldr	r2, [pc, #408]	; (80029a0 <HAL_ADC_Init+0x2e4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d004      	beq.n	8002814 <HAL_ADC_Init+0x158>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a65      	ldr	r2, [pc, #404]	; (80029a4 <HAL_ADC_Init+0x2e8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d101      	bne.n	8002818 <HAL_ADC_Init+0x15c>
 8002814:	4a65      	ldr	r2, [pc, #404]	; (80029ac <HAL_ADC_Init+0x2f0>)
 8002816:	e000      	b.n	800281a <HAL_ADC_Init+0x15e>
 8002818:	4a65      	ldr	r2, [pc, #404]	; (80029b0 <HAL_ADC_Init+0x2f4>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4619      	mov	r1, r3
 8002820:	4610      	mov	r0, r2
 8002822:	f7ff fd6f 	bl	8002304 <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002826:	f7ff fd4b 	bl	80022c0 <HAL_GetREVID>
 800282a:	4602      	mov	r2, r0
 800282c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002830:	429a      	cmp	r2, r3
 8002832:	d914      	bls.n	800285e <HAL_ADC_Init+0x1a2>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b10      	cmp	r3, #16
 800283a:	d110      	bne.n	800285e <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7d5b      	ldrb	r3, [r3, #21]
 8002840:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002846:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800284c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	7f1b      	ldrb	r3, [r3, #28]
 8002852:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002854:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002856:	f043 030c 	orr.w	r3, r3, #12
 800285a:	61bb      	str	r3, [r7, #24]
 800285c:	e00d      	b.n	800287a <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	7d5b      	ldrb	r3, [r3, #21]
 8002862:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002868:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800286e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	7f1b      	ldrb	r3, [r3, #28]
 8002874:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	7f1b      	ldrb	r3, [r3, #28]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d106      	bne.n	8002890 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	3b01      	subs	r3, #1
 8002888:	045b      	lsls	r3, r3, #17
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	2b00      	cmp	r3, #0
 8002896:	d009      	beq.n	80028ac <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	4b40      	ldr	r3, [pc, #256]	; (80029b4 <HAL_ADC_Init+0x2f8>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	69b9      	ldr	r1, [r7, #24]
 80028bc:	430b      	orrs	r3, r1
 80028be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fed3 	bl	8002670 <LL_ADC_REG_IsConversionOngoing>
 80028ca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fee0 	bl	8002696 <LL_ADC_INJ_IsConversionOngoing>
 80028d6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d14a      	bne.n	8002974 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d147      	bne.n	8002974 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	7d1b      	ldrb	r3, [r3, #20]
 80028e8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	4b2f      	ldr	r3, [pc, #188]	; (80029b8 <HAL_ADC_Init+0x2fc>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	69b9      	ldr	r1, [r7, #24]
 8002902:	430b      	orrs	r3, r1
 8002904:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800290c:	2b01      	cmp	r3, #1
 800290e:	d11b      	bne.n	8002948 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	4b27      	ldr	r3, [pc, #156]	; (80029bc <HAL_ADC_Init+0x300>)
 800291e:	4013      	ands	r3, r2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002924:	3a01      	subs	r2, #1
 8002926:	0411      	lsls	r1, r2, #16
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800292c:	4311      	orrs	r1, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002932:	4311      	orrs	r1, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002938:	430a      	orrs	r2, r1
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0201 	orr.w	r2, r2, #1
 8002944:	611a      	str	r2, [r3, #16]
 8002946:	e007      	b.n	8002958 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fd52 	bl	8003418 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d121      	bne.n	80029c0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f023 010f 	bic.w	r1, r3, #15
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	1e5a      	subs	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	631a      	str	r2, [r3, #48]	; 0x30
 8002994:	e01c      	b.n	80029d0 <HAL_ADC_Init+0x314>
 8002996:	bf00      	nop
 8002998:	24000068 	.word	0x24000068
 800299c:	053e2d63 	.word	0x053e2d63
 80029a0:	40022000 	.word	0x40022000
 80029a4:	40022100 	.word	0x40022100
 80029a8:	58026000 	.word	0x58026000
 80029ac:	40022300 	.word	0x40022300
 80029b0:	58026300 	.word	0x58026300
 80029b4:	fff0c003 	.word	0xfff0c003
 80029b8:	ffffbffc 	.word	0xffffbffc
 80029bc:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 020f 	bic.w	r2, r2, #15
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d4:	f023 0303 	bic.w	r3, r3, #3
 80029d8:	f043 0201 	orr.w	r2, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	655a      	str	r2, [r3, #84]	; 0x54
 80029e0:	e007      	b.n	80029f2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e6:	f043 0210 	orr.w	r2, r3, #16
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3724      	adds	r7, #36	; 0x24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd90      	pop	{r4, r7, pc}

080029fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a55      	ldr	r2, [pc, #340]	; (8002b64 <HAL_ADC_Start_DMA+0x168>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d004      	beq.n	8002a1c <HAL_ADC_Start_DMA+0x20>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a54      	ldr	r2, [pc, #336]	; (8002b68 <HAL_ADC_Start_DMA+0x16c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d101      	bne.n	8002a20 <HAL_ADC_Start_DMA+0x24>
 8002a1c:	4b53      	ldr	r3, [pc, #332]	; (8002b6c <HAL_ADC_Start_DMA+0x170>)
 8002a1e:	e000      	b.n	8002a22 <HAL_ADC_Start_DMA+0x26>
 8002a20:	4b53      	ldr	r3, [pc, #332]	; (8002b70 <HAL_ADC_Start_DMA+0x174>)
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fd8c 	bl	8002540 <LL_ADC_GetMultimode>
 8002a28:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fe1e 	bl	8002670 <LL_ADC_REG_IsConversionOngoing>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f040 808c 	bne.w	8002b54 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_ADC_Start_DMA+0x4e>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e087      	b.n	8002b5a <HAL_ADC_Start_DMA+0x15e>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d002      	beq.n	8002a64 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2b09      	cmp	r3, #9
 8002a62:	d170      	bne.n	8002b46 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fbbf 	bl	80031e8 <ADC_Enable>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002a6e:	7dfb      	ldrb	r3, [r7, #23]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d163      	bne.n	8002b3c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a78:	4b3e      	ldr	r3, [pc, #248]	; (8002b74 <HAL_ADC_Start_DMA+0x178>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a37      	ldr	r2, [pc, #220]	; (8002b68 <HAL_ADC_Start_DMA+0x16c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d002      	beq.n	8002a94 <HAL_ADC_Start_DMA+0x98>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	e000      	b.n	8002a96 <HAL_ADC_Start_DMA+0x9a>
 8002a94:	4b33      	ldr	r3, [pc, #204]	; (8002b64 <HAL_ADC_Start_DMA+0x168>)
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	6812      	ldr	r2, [r2, #0]
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d002      	beq.n	8002aa4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d105      	bne.n	8002ab0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d006      	beq.n	8002aca <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac0:	f023 0206 	bic.w	r2, r3, #6
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ac8:	e002      	b.n	8002ad0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad4:	4a28      	ldr	r2, [pc, #160]	; (8002b78 <HAL_ADC_Start_DMA+0x17c>)
 8002ad6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002adc:	4a27      	ldr	r2, [pc, #156]	; (8002b7c <HAL_ADC_Start_DMA+0x180>)
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae4:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <HAL_ADC_Start_DMA+0x184>)
 8002ae6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	221c      	movs	r2, #28
 8002aee:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0210 	orr.w	r2, r2, #16
 8002b06:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	4619      	mov	r1, r3
 8002b12:	4610      	mov	r0, r2
 8002b14:	f7ff fcb4 	bl	8002480 <LL_ADC_REG_SetDataTransferMode>

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3340      	adds	r3, #64	; 0x40
 8002b22:	4619      	mov	r1, r3
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f001 f9da 	bl	8003ee0 <HAL_DMA_Start_IT>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fd87 	bl	8002648 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002b3a:	e00d      	b.n	8002b58 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002b44:	e008      	b.n	8002b58 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002b52:	e001      	b.n	8002b58 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
 8002b56:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40022000 	.word	0x40022000
 8002b68:	40022100 	.word	0x40022100
 8002b6c:	40022300 	.word	0x40022300
 8002b70:	58026300 	.word	0x58026300
 8002b74:	fffff0fe 	.word	0xfffff0fe
 8002b78:	080032f1 	.word	0x080032f1
 8002b7c:	080033c9 	.word	0x080033c9
 8002b80:	080033e5 	.word	0x080033e5

08002b84 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b099      	sub	sp, #100	; 0x64
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4a99      	ldr	r2, [pc, #612]	; (8002e40 <HAL_ADC_ConfigChannel+0x280>)
 8002bda:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x2a>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e2e6      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x5f8>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fd3a 	bl	8002670 <LL_ADC_REG_IsConversionOngoing>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f040 82cb 	bne.w	800319a <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d108      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x62>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	0e9b      	lsrs	r3, r3, #26
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	e00f      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x82>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	69d1      	ldr	r1, [r2, #28]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f7ff fbe6 	bl	800242e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fd02 	bl	8002670 <LL_ADC_REG_IsConversionOngoing>
 8002c6c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fd0f 	bl	8002696 <LL_ADC_INJ_IsConversionOngoing>
 8002c78:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f040 80b3 	bne.w	8002de8 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f040 80af 	bne.w	8002de8 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	6819      	ldr	r1, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	461a      	mov	r2, r3
 8002c98:	f7ff fc05 	bl	80024a6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c9c:	4b69      	ldr	r3, [pc, #420]	; (8002e44 <HAL_ADC_ConfigChannel+0x284>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002ca4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ca8:	d10b      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x102>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	089b      	lsrs	r3, r3, #2
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	e01d      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x13e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10b      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x128>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	089b      	lsrs	r3, r3, #2
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	e00a      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x13e>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	695a      	ldr	r2, [r3, #20]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d027      	beq.n	8002d58 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6919      	ldr	r1, [r3, #16]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d16:	f7ff fb29 	bl	800236c <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	6919      	ldr	r1, [r3, #16]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	7e5b      	ldrb	r3, [r3, #25]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d102      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x170>
 8002d2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002d2e:	e000      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x172>
 8002d30:	2300      	movs	r3, #0
 8002d32:	461a      	mov	r2, r3
 8002d34:	f7ff fb50 	bl	80023d8 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6919      	ldr	r1, [r3, #16]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	7e1b      	ldrb	r3, [r3, #24]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d102      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x18e>
 8002d48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d4c:	e000      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x190>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	461a      	mov	r2, r3
 8002d52:	f7ff fb28 	bl	80023a6 <LL_ADC_SetDataRightShift>
 8002d56:	e047      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	069b      	lsls	r3, r3, #26
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d107      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d7a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	069b      	lsls	r3, r3, #26
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d107      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d9e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002da6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	069b      	lsls	r3, r3, #26
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d107      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dc2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	069b      	lsls	r3, r3, #26
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d107      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002de6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fc17 	bl	8002620 <LL_ADC_IsEnabled>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f040 81d9 	bne.w	80031ac <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6819      	ldr	r1, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	461a      	mov	r2, r3
 8002e08:	f7ff fb76 	bl	80024f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4a0b      	ldr	r2, [pc, #44]	; (8002e40 <HAL_ADC_ConfigChannel+0x280>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	f040 8101 	bne.w	800301a <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10f      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x288>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	0e9b      	lsrs	r3, r3, #26
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	2b09      	cmp	r3, #9
 8002e36:	bf94      	ite	ls
 8002e38:	2301      	movls	r3, #1
 8002e3a:	2300      	movhi	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e016      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x2ae>
 8002e40:	47ff0000 	.word	0x47ff0000
 8002e44:	5c001000 	.word	0x5c001000
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e58:	fab3 f383 	clz	r3, r3
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	2b09      	cmp	r3, #9
 8002e66:	bf94      	ite	ls
 8002e68:	2301      	movls	r3, #1
 8002e6a:	2300      	movhi	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d064      	beq.n	8002f3c <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d107      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x2ce>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	0e9b      	lsrs	r3, r3, #26
 8002e84:	3301      	adds	r3, #1
 8002e86:	069b      	lsls	r3, r3, #26
 8002e88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e8c:	e00e      	b.n	8002eac <HAL_ADC_ConfigChannel+0x2ec>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	069b      	lsls	r3, r3, #26
 8002ea8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d109      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x30c>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	0e9b      	lsrs	r3, r3, #26
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eca:	e010      	b.n	8002eee <HAL_ADC_ConfigChannel+0x32e>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002edc:	fab3 f383 	clz	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	2101      	movs	r1, #1
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	ea42 0103 	orr.w	r1, r2, r3
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10a      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x354>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	0e9b      	lsrs	r3, r3, #26
 8002f04:	3301      	adds	r3, #1
 8002f06:	f003 021f 	and.w	r2, r3, #31
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	4413      	add	r3, r2
 8002f10:	051b      	lsls	r3, r3, #20
 8002f12:	e011      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x378>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	fab3 f383 	clz	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	e069      	b.n	8003010 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d107      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x398>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	0e9b      	lsrs	r3, r3, #26
 8002f4e:	3301      	adds	r3, #1
 8002f50:	069b      	lsls	r3, r3, #26
 8002f52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f56:	e00e      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x3b6>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	61fb      	str	r3, [r7, #28]
  return result;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	069b      	lsls	r3, r3, #26
 8002f72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x3d6>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	0e9b      	lsrs	r3, r3, #26
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	2101      	movs	r1, #1
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	e010      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x3f8>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	617b      	str	r3, [r7, #20]
  return result;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb8:	ea42 0103 	orr.w	r1, r2, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10d      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x424>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	0e9b      	lsrs	r3, r3, #26
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f003 021f 	and.w	r2, r3, #31
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4413      	add	r3, r2
 8002fda:	3b1e      	subs	r3, #30
 8002fdc:	051b      	lsls	r3, r3, #20
 8002fde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	e014      	b.n	800300e <HAL_ADC_ConfigChannel+0x44e>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	60fb      	str	r3, [r7, #12]
  return result;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	fab3 f383 	clz	r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f003 021f 	and.w	r2, r3, #31
 8003000:	4613      	mov	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4413      	add	r3, r2
 8003006:	3b1e      	subs	r3, #30
 8003008:	051b      	lsls	r3, r3, #20
 800300a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800300e:	430b      	orrs	r3, r1
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	6892      	ldr	r2, [r2, #8]
 8003014:	4619      	mov	r1, r3
 8003016:	f7ff fa46 	bl	80024a6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f280 80c4 	bge.w	80031ac <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a65      	ldr	r2, [pc, #404]	; (80031c0 <HAL_ADC_ConfigChannel+0x600>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d004      	beq.n	8003038 <HAL_ADC_ConfigChannel+0x478>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a64      	ldr	r2, [pc, #400]	; (80031c4 <HAL_ADC_ConfigChannel+0x604>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d101      	bne.n	800303c <HAL_ADC_ConfigChannel+0x47c>
 8003038:	4b63      	ldr	r3, [pc, #396]	; (80031c8 <HAL_ADC_ConfigChannel+0x608>)
 800303a:	e000      	b.n	800303e <HAL_ADC_ConfigChannel+0x47e>
 800303c:	4b63      	ldr	r3, [pc, #396]	; (80031cc <HAL_ADC_ConfigChannel+0x60c>)
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff f986 	bl	8002350 <LL_ADC_GetCommonPathInternalCh>
 8003044:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a5d      	ldr	r2, [pc, #372]	; (80031c0 <HAL_ADC_ConfigChannel+0x600>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d004      	beq.n	800305a <HAL_ADC_ConfigChannel+0x49a>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a5b      	ldr	r2, [pc, #364]	; (80031c4 <HAL_ADC_ConfigChannel+0x604>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d10e      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x4b8>
 800305a:	4859      	ldr	r0, [pc, #356]	; (80031c0 <HAL_ADC_ConfigChannel+0x600>)
 800305c:	f7ff fae0 	bl	8002620 <LL_ADC_IsEnabled>
 8003060:	4604      	mov	r4, r0
 8003062:	4858      	ldr	r0, [pc, #352]	; (80031c4 <HAL_ADC_ConfigChannel+0x604>)
 8003064:	f7ff fadc 	bl	8002620 <LL_ADC_IsEnabled>
 8003068:	4603      	mov	r3, r0
 800306a:	4323      	orrs	r3, r4
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e008      	b.n	800308a <HAL_ADC_ConfigChannel+0x4ca>
 8003078:	4855      	ldr	r0, [pc, #340]	; (80031d0 <HAL_ADC_ConfigChannel+0x610>)
 800307a:	f7ff fad1 	bl	8002620 <LL_ADC_IsEnabled>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d07b      	beq.n	8003186 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a50      	ldr	r2, [pc, #320]	; (80031d4 <HAL_ADC_ConfigChannel+0x614>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d12e      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x536>
 8003098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d129      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a4a      	ldr	r2, [pc, #296]	; (80031d0 <HAL_ADC_ConfigChannel+0x610>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d17f      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a43      	ldr	r2, [pc, #268]	; (80031c0 <HAL_ADC_ConfigChannel+0x600>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d004      	beq.n	80030c0 <HAL_ADC_ConfigChannel+0x500>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a42      	ldr	r2, [pc, #264]	; (80031c4 <HAL_ADC_ConfigChannel+0x604>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d101      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x504>
 80030c0:	4a41      	ldr	r2, [pc, #260]	; (80031c8 <HAL_ADC_ConfigChannel+0x608>)
 80030c2:	e000      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x506>
 80030c4:	4a41      	ldr	r2, [pc, #260]	; (80031cc <HAL_ADC_ConfigChannel+0x60c>)
 80030c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030cc:	4619      	mov	r1, r3
 80030ce:	4610      	mov	r0, r2
 80030d0:	f7ff f92b 	bl	800232a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80030d4:	4b40      	ldr	r3, [pc, #256]	; (80031d8 <HAL_ADC_ConfigChannel+0x618>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	099b      	lsrs	r3, r3, #6
 80030da:	4a40      	ldr	r2, [pc, #256]	; (80031dc <HAL_ADC_ConfigChannel+0x61c>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80030e6:	e002      	b.n	80030ee <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f9      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030f4:	e05a      	b.n	80031ac <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a39      	ldr	r2, [pc, #228]	; (80031e0 <HAL_ADC_ConfigChannel+0x620>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d11e      	bne.n	800313e <HAL_ADC_ConfigChannel+0x57e>
 8003100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003102:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d119      	bne.n	800313e <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a30      	ldr	r2, [pc, #192]	; (80031d0 <HAL_ADC_ConfigChannel+0x610>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d14b      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a29      	ldr	r2, [pc, #164]	; (80031c0 <HAL_ADC_ConfigChannel+0x600>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d004      	beq.n	8003128 <HAL_ADC_ConfigChannel+0x568>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a28      	ldr	r2, [pc, #160]	; (80031c4 <HAL_ADC_ConfigChannel+0x604>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d101      	bne.n	800312c <HAL_ADC_ConfigChannel+0x56c>
 8003128:	4a27      	ldr	r2, [pc, #156]	; (80031c8 <HAL_ADC_ConfigChannel+0x608>)
 800312a:	e000      	b.n	800312e <HAL_ADC_ConfigChannel+0x56e>
 800312c:	4a27      	ldr	r2, [pc, #156]	; (80031cc <HAL_ADC_ConfigChannel+0x60c>)
 800312e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003130:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003134:	4619      	mov	r1, r3
 8003136:	4610      	mov	r0, r2
 8003138:	f7ff f8f7 	bl	800232a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800313c:	e036      	b.n	80031ac <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a28      	ldr	r2, [pc, #160]	; (80031e4 <HAL_ADC_ConfigChannel+0x624>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d131      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x5ec>
 8003148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800314a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d12c      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1e      	ldr	r2, [pc, #120]	; (80031d0 <HAL_ADC_ConfigChannel+0x610>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d127      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a17      	ldr	r2, [pc, #92]	; (80031c0 <HAL_ADC_ConfigChannel+0x600>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d004      	beq.n	8003170 <HAL_ADC_ConfigChannel+0x5b0>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a16      	ldr	r2, [pc, #88]	; (80031c4 <HAL_ADC_ConfigChannel+0x604>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d101      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x5b4>
 8003170:	4a15      	ldr	r2, [pc, #84]	; (80031c8 <HAL_ADC_ConfigChannel+0x608>)
 8003172:	e000      	b.n	8003176 <HAL_ADC_ConfigChannel+0x5b6>
 8003174:	4a15      	ldr	r2, [pc, #84]	; (80031cc <HAL_ADC_ConfigChannel+0x60c>)
 8003176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003178:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f7ff f8d3 	bl	800232a <LL_ADC_SetCommonPathInternalCh>
 8003184:	e012      	b.n	80031ac <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318a:	f043 0220 	orr.w	r2, r3, #32
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003198:	e008      	b.n	80031ac <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319e:	f043 0220 	orr.w	r2, r3, #32
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3764      	adds	r7, #100	; 0x64
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd90      	pop	{r4, r7, pc}
 80031c0:	40022000 	.word	0x40022000
 80031c4:	40022100 	.word	0x40022100
 80031c8:	40022300 	.word	0x40022300
 80031cc:	58026300 	.word	0x58026300
 80031d0:	58026000 	.word	0x58026000
 80031d4:	cb840000 	.word	0xcb840000
 80031d8:	24000068 	.word	0x24000068
 80031dc:	053e2d63 	.word	0x053e2d63
 80031e0:	c7520000 	.word	0xc7520000
 80031e4:	cfb80000 	.word	0xcfb80000

080031e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fa13 	bl	8002620 <LL_ADC_IsEnabled>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d167      	bne.n	80032d0 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	4b35      	ldr	r3, [pc, #212]	; (80032dc <ADC_Enable+0xf4>)
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00d      	beq.n	800322a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003212:	f043 0210 	orr.w	r2, r3, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	f043 0201 	orr.w	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e053      	b.n	80032d2 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff f9e2 	bl	80025f8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003234:	f7ff f816 	bl	8002264 <HAL_GetTick>
 8003238:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a28      	ldr	r2, [pc, #160]	; (80032e0 <ADC_Enable+0xf8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <ADC_Enable+0x66>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a26      	ldr	r2, [pc, #152]	; (80032e4 <ADC_Enable+0xfc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <ADC_Enable+0x6a>
 800324e:	4b26      	ldr	r3, [pc, #152]	; (80032e8 <ADC_Enable+0x100>)
 8003250:	e000      	b.n	8003254 <ADC_Enable+0x6c>
 8003252:	4b26      	ldr	r3, [pc, #152]	; (80032ec <ADC_Enable+0x104>)
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff f973 	bl	8002540 <LL_ADC_GetMultimode>
 800325a:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a20      	ldr	r2, [pc, #128]	; (80032e4 <ADC_Enable+0xfc>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d002      	beq.n	800326c <ADC_Enable+0x84>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	e000      	b.n	800326e <ADC_Enable+0x86>
 800326c:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <ADC_Enable+0xf8>)
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6812      	ldr	r2, [r2, #0]
 8003272:	4293      	cmp	r3, r2
 8003274:	d025      	beq.n	80032c2 <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d129      	bne.n	80032d0 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800327c:	e021      	b.n	80032c2 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff f9cc 	bl	8002620 <LL_ADC_IsEnabled>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d104      	bne.n	8003298 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff f9b0 	bl	80025f8 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003298:	f7fe ffe4 	bl	8002264 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d90d      	bls.n	80032c2 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032aa:	f043 0210 	orr.w	r2, r3, #16
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b6:	f043 0201 	orr.w	r2, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e007      	b.n	80032d2 <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d1d6      	bne.n	800327e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	8000003f 	.word	0x8000003f
 80032e0:	40022000 	.word	0x40022000
 80032e4:	40022100 	.word	0x40022100
 80032e8:	40022300 	.word	0x40022300
 80032ec:	58026300 	.word	0x58026300

080032f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003306:	2b00      	cmp	r3, #0
 8003308:	d14b      	bne.n	80033a2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d021      	beq.n	8003368 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff f86d 	bl	8002408 <LL_ADC_REG_IsTriggerSourceSWStart>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d032      	beq.n	800339a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d12b      	bne.n	800339a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d11f      	bne.n	800339a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335e:	f043 0201 	orr.w	r2, r3, #1
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	655a      	str	r2, [r3, #84]	; 0x54
 8003366:	e018      	b.n	800339a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d111      	bne.n	800339a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d105      	bne.n	800339a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003392:	f043 0201 	orr.w	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f7ff fbf2 	bl	8002b84 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033a0:	e00e      	b.n	80033c0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f7ff fbfc 	bl	8002bac <HAL_ADC_ErrorCallback>
}
 80033b4:	e004      	b.n	80033c0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f7ff fbde 	bl	8002b98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003402:	f043 0204 	orr.w	r2, r3, #4
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f7ff fbce 	bl	8002bac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a70      	ldr	r2, [pc, #448]	; (80035e8 <ADC_ConfigureBoostMode+0x1d0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d004      	beq.n	8003434 <ADC_ConfigureBoostMode+0x1c>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a6f      	ldr	r2, [pc, #444]	; (80035ec <ADC_ConfigureBoostMode+0x1d4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d109      	bne.n	8003448 <ADC_ConfigureBoostMode+0x30>
 8003434:	4b6e      	ldr	r3, [pc, #440]	; (80035f0 <ADC_ConfigureBoostMode+0x1d8>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf14      	ite	ne
 8003440:	2301      	movne	r3, #1
 8003442:	2300      	moveq	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	e008      	b.n	800345a <ADC_ConfigureBoostMode+0x42>
 8003448:	4b6a      	ldr	r3, [pc, #424]	; (80035f4 <ADC_ConfigureBoostMode+0x1dc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003450:	2b00      	cmp	r3, #0
 8003452:	bf14      	ite	ne
 8003454:	2301      	movne	r3, #1
 8003456:	2300      	moveq	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01a      	beq.n	8003494 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800345e:	f003 fe1d 	bl	800709c <HAL_RCC_GetHCLKFreq>
 8003462:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800346c:	d006      	beq.n	800347c <ADC_ConfigureBoostMode+0x64>
 800346e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003472:	d00b      	beq.n	800348c <ADC_ConfigureBoostMode+0x74>
 8003474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003478:	d000      	beq.n	800347c <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800347a:	e05d      	b.n	8003538 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	fbb2 f3f3 	udiv	r3, r2, r3
 8003488:	60fb      	str	r3, [r7, #12]
        break;
 800348a:	e055      	b.n	8003538 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	089b      	lsrs	r3, r3, #2
 8003490:	60fb      	str	r3, [r7, #12]
        break;
 8003492:	e051      	b.n	8003538 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003494:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003498:	f004 fd3a 	bl	8007f10 <HAL_RCCEx_GetPeriphCLKFreq>
 800349c:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80034a6:	d02a      	beq.n	80034fe <ADC_ConfigureBoostMode+0xe6>
 80034a8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80034ac:	d813      	bhi.n	80034d6 <ADC_ConfigureBoostMode+0xbe>
 80034ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034b2:	d024      	beq.n	80034fe <ADC_ConfigureBoostMode+0xe6>
 80034b4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034b8:	d806      	bhi.n	80034c8 <ADC_ConfigureBoostMode+0xb0>
 80034ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034be:	d01e      	beq.n	80034fe <ADC_ConfigureBoostMode+0xe6>
 80034c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034c4:	d01b      	beq.n	80034fe <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80034c6:	e037      	b.n	8003538 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80034c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034cc:	d017      	beq.n	80034fe <ADC_ConfigureBoostMode+0xe6>
 80034ce:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80034d2:	d014      	beq.n	80034fe <ADC_ConfigureBoostMode+0xe6>
        break;
 80034d4:	e030      	b.n	8003538 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80034d6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80034da:	d021      	beq.n	8003520 <ADC_ConfigureBoostMode+0x108>
 80034dc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80034e0:	d806      	bhi.n	80034f0 <ADC_ConfigureBoostMode+0xd8>
 80034e2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80034e6:	d013      	beq.n	8003510 <ADC_ConfigureBoostMode+0xf8>
 80034e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ec:	d014      	beq.n	8003518 <ADC_ConfigureBoostMode+0x100>
        break;
 80034ee:	e023      	b.n	8003538 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80034f0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80034f4:	d018      	beq.n	8003528 <ADC_ConfigureBoostMode+0x110>
 80034f6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80034fa:	d019      	beq.n	8003530 <ADC_ConfigureBoostMode+0x118>
        break;
 80034fc:	e01c      	b.n	8003538 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	0c9b      	lsrs	r3, r3, #18
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	fbb2 f3f3 	udiv	r3, r2, r3
 800350c:	60fb      	str	r3, [r7, #12]
        break;
 800350e:	e013      	b.n	8003538 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	091b      	lsrs	r3, r3, #4
 8003514:	60fb      	str	r3, [r7, #12]
      break;
 8003516:	e00f      	b.n	8003538 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	60fb      	str	r3, [r7, #12]
        break;
 800351e:	e00b      	b.n	8003538 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	099b      	lsrs	r3, r3, #6
 8003524:	60fb      	str	r3, [r7, #12]
        break;
 8003526:	e007      	b.n	8003538 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	09db      	lsrs	r3, r3, #7
 800352c:	60fb      	str	r3, [r7, #12]
        break;
 800352e:	e003      	b.n	8003538 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	0a1b      	lsrs	r3, r3, #8
 8003534:	60fb      	str	r3, [r7, #12]
        break;
 8003536:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003538:	f7fe fec2 	bl	80022c0 <HAL_GetREVID>
 800353c:	4602      	mov	r2, r0
 800353e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003542:	429a      	cmp	r2, r3
 8003544:	d815      	bhi.n	8003572 <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4a2b      	ldr	r2, [pc, #172]	; (80035f8 <ADC_ConfigureBoostMode+0x1e0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d908      	bls.n	8003560 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800355c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800355e:	e03e      	b.n	80035de <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800356e:	609a      	str	r2, [r3, #8]
}
 8003570:	e035      	b.n	80035de <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	085b      	lsrs	r3, r3, #1
 8003576:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4a20      	ldr	r2, [pc, #128]	; (80035fc <ADC_ConfigureBoostMode+0x1e4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d808      	bhi.n	8003592 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800358e:	609a      	str	r2, [r3, #8]
}
 8003590:	e025      	b.n	80035de <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4a1a      	ldr	r2, [pc, #104]	; (8003600 <ADC_ConfigureBoostMode+0x1e8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d80a      	bhi.n	80035b0 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ac:	609a      	str	r2, [r3, #8]
}
 80035ae:	e016      	b.n	80035de <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4a14      	ldr	r2, [pc, #80]	; (8003604 <ADC_ConfigureBoostMode+0x1ec>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d80a      	bhi.n	80035ce <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ca:	609a      	str	r2, [r3, #8]
}
 80035cc:	e007      	b.n	80035de <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80035dc:	609a      	str	r2, [r3, #8]
}
 80035de:	bf00      	nop
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40022000 	.word	0x40022000
 80035ec:	40022100 	.word	0x40022100
 80035f0:	40022300 	.word	0x40022300
 80035f4:	58026300 	.word	0x58026300
 80035f8:	01312d00 	.word	0x01312d00
 80035fc:	005f5e10 	.word	0x005f5e10
 8003600:	00bebc20 	.word	0x00bebc20
 8003604:	017d7840 	.word	0x017d7840

08003608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <__NVIC_SetPriorityGrouping+0x40>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003624:	4013      	ands	r3, r2
 8003626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <__NVIC_SetPriorityGrouping+0x44>)
 8003632:	4313      	orrs	r3, r2
 8003634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003636:	4a04      	ldr	r2, [pc, #16]	; (8003648 <__NVIC_SetPriorityGrouping+0x40>)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	60d3      	str	r3, [r2, #12]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000ed00 	.word	0xe000ed00
 800364c:	05fa0000 	.word	0x05fa0000

08003650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <__NVIC_GetPriorityGrouping+0x18>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	0a1b      	lsrs	r3, r3, #8
 800365a:	f003 0307 	and.w	r3, r3, #7
}
 800365e:	4618      	mov	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800367a:	2b00      	cmp	r3, #0
 800367c:	db0b      	blt.n	8003696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	f003 021f 	and.w	r2, r3, #31
 8003684:	4907      	ldr	r1, [pc, #28]	; (80036a4 <__NVIC_EnableIRQ+0x38>)
 8003686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	2001      	movs	r0, #1
 800368e:	fa00 f202 	lsl.w	r2, r0, r2
 8003692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	e000e100 	.word	0xe000e100

080036a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	6039      	str	r1, [r7, #0]
 80036b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	db0a      	blt.n	80036d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	490c      	ldr	r1, [pc, #48]	; (80036f4 <__NVIC_SetPriority+0x4c>)
 80036c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036c6:	0112      	lsls	r2, r2, #4
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	440b      	add	r3, r1
 80036cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036d0:	e00a      	b.n	80036e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	4908      	ldr	r1, [pc, #32]	; (80036f8 <__NVIC_SetPriority+0x50>)
 80036d8:	88fb      	ldrh	r3, [r7, #6]
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	3b04      	subs	r3, #4
 80036e0:	0112      	lsls	r2, r2, #4
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	440b      	add	r3, r1
 80036e6:	761a      	strb	r2, [r3, #24]
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000e100 	.word	0xe000e100
 80036f8:	e000ed00 	.word	0xe000ed00

080036fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b089      	sub	sp, #36	; 0x24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f1c3 0307 	rsb	r3, r3, #7
 8003716:	2b04      	cmp	r3, #4
 8003718:	bf28      	it	cs
 800371a:	2304      	movcs	r3, #4
 800371c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	3304      	adds	r3, #4
 8003722:	2b06      	cmp	r3, #6
 8003724:	d902      	bls.n	800372c <NVIC_EncodePriority+0x30>
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	3b03      	subs	r3, #3
 800372a:	e000      	b.n	800372e <NVIC_EncodePriority+0x32>
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003730:	f04f 32ff 	mov.w	r2, #4294967295
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43da      	mvns	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	401a      	ands	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003744:	f04f 31ff 	mov.w	r1, #4294967295
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	43d9      	mvns	r1, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003754:	4313      	orrs	r3, r2
         );
}
 8003756:	4618      	mov	r0, r3
 8003758:	3724      	adds	r7, #36	; 0x24
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3b01      	subs	r3, #1
 8003770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003774:	d301      	bcc.n	800377a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003776:	2301      	movs	r3, #1
 8003778:	e00f      	b.n	800379a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800377a:	4a0a      	ldr	r2, [pc, #40]	; (80037a4 <SysTick_Config+0x40>)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3b01      	subs	r3, #1
 8003780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003782:	210f      	movs	r1, #15
 8003784:	f04f 30ff 	mov.w	r0, #4294967295
 8003788:	f7ff ff8e 	bl	80036a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <SysTick_Config+0x40>)
 800378e:	2200      	movs	r2, #0
 8003790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003792:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <SysTick_Config+0x40>)
 8003794:	2207      	movs	r2, #7
 8003796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	e000e010 	.word	0xe000e010

080037a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff ff29 	bl	8003608 <__NVIC_SetPriorityGrouping>
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b086      	sub	sp, #24
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	4603      	mov	r3, r0
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037cc:	f7ff ff40 	bl	8003650 <__NVIC_GetPriorityGrouping>
 80037d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	6978      	ldr	r0, [r7, #20]
 80037d8:	f7ff ff90 	bl	80036fc <NVIC_EncodePriority>
 80037dc:	4602      	mov	r2, r0
 80037de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff ff5f 	bl	80036a8 <__NVIC_SetPriority>
}
 80037ea:	bf00      	nop
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	4603      	mov	r3, r0
 80037fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff ff33 	bl	800366c <__NVIC_EnableIRQ>
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff ffa4 	bl	8003764 <SysTick_Config>
 800381c:	4603      	mov	r3, r0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003830:	f7fe fd18 	bl	8002264 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e316      	b.n	8003e6e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a66      	ldr	r2, [pc, #408]	; (80039e0 <HAL_DMA_Init+0x1b8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d04a      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a65      	ldr	r2, [pc, #404]	; (80039e4 <HAL_DMA_Init+0x1bc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d045      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a63      	ldr	r2, [pc, #396]	; (80039e8 <HAL_DMA_Init+0x1c0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d040      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a62      	ldr	r2, [pc, #392]	; (80039ec <HAL_DMA_Init+0x1c4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d03b      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a60      	ldr	r2, [pc, #384]	; (80039f0 <HAL_DMA_Init+0x1c8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d036      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a5f      	ldr	r2, [pc, #380]	; (80039f4 <HAL_DMA_Init+0x1cc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d031      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a5d      	ldr	r2, [pc, #372]	; (80039f8 <HAL_DMA_Init+0x1d0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d02c      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a5c      	ldr	r2, [pc, #368]	; (80039fc <HAL_DMA_Init+0x1d4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d027      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a5a      	ldr	r2, [pc, #360]	; (8003a00 <HAL_DMA_Init+0x1d8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d022      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a59      	ldr	r2, [pc, #356]	; (8003a04 <HAL_DMA_Init+0x1dc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d01d      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a57      	ldr	r2, [pc, #348]	; (8003a08 <HAL_DMA_Init+0x1e0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d018      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a56      	ldr	r2, [pc, #344]	; (8003a0c <HAL_DMA_Init+0x1e4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d013      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a54      	ldr	r2, [pc, #336]	; (8003a10 <HAL_DMA_Init+0x1e8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00e      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a53      	ldr	r2, [pc, #332]	; (8003a14 <HAL_DMA_Init+0x1ec>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d009      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a51      	ldr	r2, [pc, #324]	; (8003a18 <HAL_DMA_Init+0x1f0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d004      	beq.n	80038e0 <HAL_DMA_Init+0xb8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a50      	ldr	r2, [pc, #320]	; (8003a1c <HAL_DMA_Init+0x1f4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d101      	bne.n	80038e4 <HAL_DMA_Init+0xbc>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <HAL_DMA_Init+0xbe>
 80038e4:	2300      	movs	r3, #0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 813b 	beq.w	8003b62 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a37      	ldr	r2, [pc, #220]	; (80039e0 <HAL_DMA_Init+0x1b8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d04a      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a36      	ldr	r2, [pc, #216]	; (80039e4 <HAL_DMA_Init+0x1bc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d045      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a34      	ldr	r2, [pc, #208]	; (80039e8 <HAL_DMA_Init+0x1c0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d040      	beq.n	800399c <HAL_DMA_Init+0x174>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a33      	ldr	r2, [pc, #204]	; (80039ec <HAL_DMA_Init+0x1c4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d03b      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a31      	ldr	r2, [pc, #196]	; (80039f0 <HAL_DMA_Init+0x1c8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d036      	beq.n	800399c <HAL_DMA_Init+0x174>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a30      	ldr	r2, [pc, #192]	; (80039f4 <HAL_DMA_Init+0x1cc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d031      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a2e      	ldr	r2, [pc, #184]	; (80039f8 <HAL_DMA_Init+0x1d0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d02c      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a2d      	ldr	r2, [pc, #180]	; (80039fc <HAL_DMA_Init+0x1d4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d027      	beq.n	800399c <HAL_DMA_Init+0x174>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a2b      	ldr	r2, [pc, #172]	; (8003a00 <HAL_DMA_Init+0x1d8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d022      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <HAL_DMA_Init+0x1dc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d01d      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a28      	ldr	r2, [pc, #160]	; (8003a08 <HAL_DMA_Init+0x1e0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d018      	beq.n	800399c <HAL_DMA_Init+0x174>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a27      	ldr	r2, [pc, #156]	; (8003a0c <HAL_DMA_Init+0x1e4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d013      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a25      	ldr	r2, [pc, #148]	; (8003a10 <HAL_DMA_Init+0x1e8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00e      	beq.n	800399c <HAL_DMA_Init+0x174>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a24      	ldr	r2, [pc, #144]	; (8003a14 <HAL_DMA_Init+0x1ec>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d009      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a22      	ldr	r2, [pc, #136]	; (8003a18 <HAL_DMA_Init+0x1f0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d004      	beq.n	800399c <HAL_DMA_Init+0x174>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a21      	ldr	r2, [pc, #132]	; (8003a1c <HAL_DMA_Init+0x1f4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d108      	bne.n	80039ae <HAL_DMA_Init+0x186>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	e007      	b.n	80039be <HAL_DMA_Init+0x196>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039be:	e02f      	b.n	8003a20 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039c0:	f7fe fc50 	bl	8002264 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b05      	cmp	r3, #5
 80039cc:	d928      	bls.n	8003a20 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2203      	movs	r2, #3
 80039d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e246      	b.n	8003e6e <HAL_DMA_Init+0x646>
 80039e0:	40020010 	.word	0x40020010
 80039e4:	40020028 	.word	0x40020028
 80039e8:	40020040 	.word	0x40020040
 80039ec:	40020058 	.word	0x40020058
 80039f0:	40020070 	.word	0x40020070
 80039f4:	40020088 	.word	0x40020088
 80039f8:	400200a0 	.word	0x400200a0
 80039fc:	400200b8 	.word	0x400200b8
 8003a00:	40020410 	.word	0x40020410
 8003a04:	40020428 	.word	0x40020428
 8003a08:	40020440 	.word	0x40020440
 8003a0c:	40020458 	.word	0x40020458
 8003a10:	40020470 	.word	0x40020470
 8003a14:	40020488 	.word	0x40020488
 8003a18:	400204a0 	.word	0x400204a0
 8003a1c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1c8      	bne.n	80039c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	4b83      	ldr	r3, [pc, #524]	; (8003c48 <HAL_DMA_Init+0x420>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003a46:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a52:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d107      	bne.n	8003a84 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003a84:	4b71      	ldr	r3, [pc, #452]	; (8003c4c <HAL_DMA_Init+0x424>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4b71      	ldr	r3, [pc, #452]	; (8003c50 <HAL_DMA_Init+0x428>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a90:	d328      	bcc.n	8003ae4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b28      	cmp	r3, #40	; 0x28
 8003a98:	d903      	bls.n	8003aa2 <HAL_DMA_Init+0x27a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b2e      	cmp	r3, #46	; 0x2e
 8003aa0:	d917      	bls.n	8003ad2 <HAL_DMA_Init+0x2aa>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b3e      	cmp	r3, #62	; 0x3e
 8003aa8:	d903      	bls.n	8003ab2 <HAL_DMA_Init+0x28a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b42      	cmp	r3, #66	; 0x42
 8003ab0:	d90f      	bls.n	8003ad2 <HAL_DMA_Init+0x2aa>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b46      	cmp	r3, #70	; 0x46
 8003ab8:	d903      	bls.n	8003ac2 <HAL_DMA_Init+0x29a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b48      	cmp	r3, #72	; 0x48
 8003ac0:	d907      	bls.n	8003ad2 <HAL_DMA_Init+0x2aa>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b4e      	cmp	r3, #78	; 0x4e
 8003ac8:	d905      	bls.n	8003ad6 <HAL_DMA_Init+0x2ae>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b52      	cmp	r3, #82	; 0x52
 8003ad0:	d801      	bhi.n	8003ad6 <HAL_DMA_Init+0x2ae>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <HAL_DMA_Init+0x2b0>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ae2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f023 0307 	bic.w	r3, r3, #7
 8003afa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d117      	bne.n	8003b3e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00e      	beq.n	8003b3e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f002 f813 	bl	8005b4c <DMA_CheckFifoParam>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2240      	movs	r2, #64	; 0x40
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e197      	b.n	8003e6e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f001 ff4e 	bl	80059e8 <DMA_CalcBaseAndBitshift>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	223f      	movs	r2, #63	; 0x3f
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	e0cd      	b.n	8003cfe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a3b      	ldr	r2, [pc, #236]	; (8003c54 <HAL_DMA_Init+0x42c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d022      	beq.n	8003bb2 <HAL_DMA_Init+0x38a>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a39      	ldr	r2, [pc, #228]	; (8003c58 <HAL_DMA_Init+0x430>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d01d      	beq.n	8003bb2 <HAL_DMA_Init+0x38a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a38      	ldr	r2, [pc, #224]	; (8003c5c <HAL_DMA_Init+0x434>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d018      	beq.n	8003bb2 <HAL_DMA_Init+0x38a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a36      	ldr	r2, [pc, #216]	; (8003c60 <HAL_DMA_Init+0x438>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d013      	beq.n	8003bb2 <HAL_DMA_Init+0x38a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a35      	ldr	r2, [pc, #212]	; (8003c64 <HAL_DMA_Init+0x43c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00e      	beq.n	8003bb2 <HAL_DMA_Init+0x38a>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a33      	ldr	r2, [pc, #204]	; (8003c68 <HAL_DMA_Init+0x440>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d009      	beq.n	8003bb2 <HAL_DMA_Init+0x38a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a32      	ldr	r2, [pc, #200]	; (8003c6c <HAL_DMA_Init+0x444>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d004      	beq.n	8003bb2 <HAL_DMA_Init+0x38a>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a30      	ldr	r2, [pc, #192]	; (8003c70 <HAL_DMA_Init+0x448>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d101      	bne.n	8003bb6 <HAL_DMA_Init+0x38e>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <HAL_DMA_Init+0x390>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 8097 	beq.w	8003cec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a24      	ldr	r2, [pc, #144]	; (8003c54 <HAL_DMA_Init+0x42c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d021      	beq.n	8003c0c <HAL_DMA_Init+0x3e4>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <HAL_DMA_Init+0x430>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d01c      	beq.n	8003c0c <HAL_DMA_Init+0x3e4>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a21      	ldr	r2, [pc, #132]	; (8003c5c <HAL_DMA_Init+0x434>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d017      	beq.n	8003c0c <HAL_DMA_Init+0x3e4>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1f      	ldr	r2, [pc, #124]	; (8003c60 <HAL_DMA_Init+0x438>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d012      	beq.n	8003c0c <HAL_DMA_Init+0x3e4>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1e      	ldr	r2, [pc, #120]	; (8003c64 <HAL_DMA_Init+0x43c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00d      	beq.n	8003c0c <HAL_DMA_Init+0x3e4>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a1c      	ldr	r2, [pc, #112]	; (8003c68 <HAL_DMA_Init+0x440>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d008      	beq.n	8003c0c <HAL_DMA_Init+0x3e4>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a1b      	ldr	r2, [pc, #108]	; (8003c6c <HAL_DMA_Init+0x444>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d003      	beq.n	8003c0c <HAL_DMA_Init+0x3e4>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <HAL_DMA_Init+0x448>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <HAL_DMA_Init+0x44c>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b40      	cmp	r3, #64	; 0x40
 8003c34:	d020      	beq.n	8003c78 <HAL_DMA_Init+0x450>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b80      	cmp	r3, #128	; 0x80
 8003c3c:	d102      	bne.n	8003c44 <HAL_DMA_Init+0x41c>
 8003c3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c42:	e01a      	b.n	8003c7a <HAL_DMA_Init+0x452>
 8003c44:	2300      	movs	r3, #0
 8003c46:	e018      	b.n	8003c7a <HAL_DMA_Init+0x452>
 8003c48:	fe10803f 	.word	0xfe10803f
 8003c4c:	5c001000 	.word	0x5c001000
 8003c50:	ffff0000 	.word	0xffff0000
 8003c54:	58025408 	.word	0x58025408
 8003c58:	5802541c 	.word	0x5802541c
 8003c5c:	58025430 	.word	0x58025430
 8003c60:	58025444 	.word	0x58025444
 8003c64:	58025458 	.word	0x58025458
 8003c68:	5802546c 	.word	0x5802546c
 8003c6c:	58025480 	.word	0x58025480
 8003c70:	58025494 	.word	0x58025494
 8003c74:	fffe000f 	.word	0xfffe000f
 8003c78:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	68d2      	ldr	r2, [r2, #12]
 8003c7e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003c88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003c90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ca0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ca8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4b6e      	ldr	r3, [pc, #440]	; (8003e78 <HAL_DMA_Init+0x650>)
 8003cc0:	4413      	add	r3, r2
 8003cc2:	4a6e      	ldr	r2, [pc, #440]	; (8003e7c <HAL_DMA_Init+0x654>)
 8003cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	009a      	lsls	r2, r3, #2
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f001 fe89 	bl	80059e8 <DMA_CalcBaseAndBitshift>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	605a      	str	r2, [r3, #4]
 8003cea:	e008      	b.n	8003cfe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2240      	movs	r2, #64	; 0x40
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e0b7      	b.n	8003e6e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a5f      	ldr	r2, [pc, #380]	; (8003e80 <HAL_DMA_Init+0x658>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d072      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a5d      	ldr	r2, [pc, #372]	; (8003e84 <HAL_DMA_Init+0x65c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d06d      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a5c      	ldr	r2, [pc, #368]	; (8003e88 <HAL_DMA_Init+0x660>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d068      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a5a      	ldr	r2, [pc, #360]	; (8003e8c <HAL_DMA_Init+0x664>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d063      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a59      	ldr	r2, [pc, #356]	; (8003e90 <HAL_DMA_Init+0x668>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d05e      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a57      	ldr	r2, [pc, #348]	; (8003e94 <HAL_DMA_Init+0x66c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d059      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a56      	ldr	r2, [pc, #344]	; (8003e98 <HAL_DMA_Init+0x670>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d054      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a54      	ldr	r2, [pc, #336]	; (8003e9c <HAL_DMA_Init+0x674>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d04f      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a53      	ldr	r2, [pc, #332]	; (8003ea0 <HAL_DMA_Init+0x678>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d04a      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a51      	ldr	r2, [pc, #324]	; (8003ea4 <HAL_DMA_Init+0x67c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d045      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a50      	ldr	r2, [pc, #320]	; (8003ea8 <HAL_DMA_Init+0x680>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d040      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a4e      	ldr	r2, [pc, #312]	; (8003eac <HAL_DMA_Init+0x684>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d03b      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a4d      	ldr	r2, [pc, #308]	; (8003eb0 <HAL_DMA_Init+0x688>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d036      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a4b      	ldr	r2, [pc, #300]	; (8003eb4 <HAL_DMA_Init+0x68c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d031      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a4a      	ldr	r2, [pc, #296]	; (8003eb8 <HAL_DMA_Init+0x690>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d02c      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a48      	ldr	r2, [pc, #288]	; (8003ebc <HAL_DMA_Init+0x694>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d027      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a47      	ldr	r2, [pc, #284]	; (8003ec0 <HAL_DMA_Init+0x698>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d022      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a45      	ldr	r2, [pc, #276]	; (8003ec4 <HAL_DMA_Init+0x69c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01d      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a44      	ldr	r2, [pc, #272]	; (8003ec8 <HAL_DMA_Init+0x6a0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d018      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a42      	ldr	r2, [pc, #264]	; (8003ecc <HAL_DMA_Init+0x6a4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a41      	ldr	r2, [pc, #260]	; (8003ed0 <HAL_DMA_Init+0x6a8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00e      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a3f      	ldr	r2, [pc, #252]	; (8003ed4 <HAL_DMA_Init+0x6ac>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d009      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a3e      	ldr	r2, [pc, #248]	; (8003ed8 <HAL_DMA_Init+0x6b0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d004      	beq.n	8003dee <HAL_DMA_Init+0x5c6>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a3c      	ldr	r2, [pc, #240]	; (8003edc <HAL_DMA_Init+0x6b4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d101      	bne.n	8003df2 <HAL_DMA_Init+0x5ca>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <HAL_DMA_Init+0x5cc>
 8003df2:	2300      	movs	r3, #0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d032      	beq.n	8003e5e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f001 ff23 	bl	8005c44 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b80      	cmp	r3, #128	; 0x80
 8003e04:	d102      	bne.n	8003e0c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e20:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d010      	beq.n	8003e4c <HAL_DMA_Init+0x624>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d80c      	bhi.n	8003e4c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f001 ffa0 	bl	8005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	e008      	b.n	8003e5e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	a7fdabf8 	.word	0xa7fdabf8
 8003e7c:	cccccccd 	.word	0xcccccccd
 8003e80:	40020010 	.word	0x40020010
 8003e84:	40020028 	.word	0x40020028
 8003e88:	40020040 	.word	0x40020040
 8003e8c:	40020058 	.word	0x40020058
 8003e90:	40020070 	.word	0x40020070
 8003e94:	40020088 	.word	0x40020088
 8003e98:	400200a0 	.word	0x400200a0
 8003e9c:	400200b8 	.word	0x400200b8
 8003ea0:	40020410 	.word	0x40020410
 8003ea4:	40020428 	.word	0x40020428
 8003ea8:	40020440 	.word	0x40020440
 8003eac:	40020458 	.word	0x40020458
 8003eb0:	40020470 	.word	0x40020470
 8003eb4:	40020488 	.word	0x40020488
 8003eb8:	400204a0 	.word	0x400204a0
 8003ebc:	400204b8 	.word	0x400204b8
 8003ec0:	58025408 	.word	0x58025408
 8003ec4:	5802541c 	.word	0x5802541c
 8003ec8:	58025430 	.word	0x58025430
 8003ecc:	58025444 	.word	0x58025444
 8003ed0:	58025458 	.word	0x58025458
 8003ed4:	5802546c 	.word	0x5802546c
 8003ed8:	58025480 	.word	0x58025480
 8003edc:	58025494 	.word	0x58025494

08003ee0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e226      	b.n	800434a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_DMA_Start_IT+0x2a>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e21f      	b.n	800434a <HAL_DMA_Start_IT+0x46a>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	f040 820a 	bne.w	8004334 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a68      	ldr	r2, [pc, #416]	; (80040d4 <HAL_DMA_Start_IT+0x1f4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d04a      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a66      	ldr	r2, [pc, #408]	; (80040d8 <HAL_DMA_Start_IT+0x1f8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d045      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a65      	ldr	r2, [pc, #404]	; (80040dc <HAL_DMA_Start_IT+0x1fc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d040      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a63      	ldr	r2, [pc, #396]	; (80040e0 <HAL_DMA_Start_IT+0x200>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d03b      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a62      	ldr	r2, [pc, #392]	; (80040e4 <HAL_DMA_Start_IT+0x204>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d036      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a60      	ldr	r2, [pc, #384]	; (80040e8 <HAL_DMA_Start_IT+0x208>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d031      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a5f      	ldr	r2, [pc, #380]	; (80040ec <HAL_DMA_Start_IT+0x20c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d02c      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a5d      	ldr	r2, [pc, #372]	; (80040f0 <HAL_DMA_Start_IT+0x210>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d027      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a5c      	ldr	r2, [pc, #368]	; (80040f4 <HAL_DMA_Start_IT+0x214>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d022      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a5a      	ldr	r2, [pc, #360]	; (80040f8 <HAL_DMA_Start_IT+0x218>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01d      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a59      	ldr	r2, [pc, #356]	; (80040fc <HAL_DMA_Start_IT+0x21c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d018      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a57      	ldr	r2, [pc, #348]	; (8004100 <HAL_DMA_Start_IT+0x220>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d013      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a56      	ldr	r2, [pc, #344]	; (8004104 <HAL_DMA_Start_IT+0x224>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00e      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a54      	ldr	r2, [pc, #336]	; (8004108 <HAL_DMA_Start_IT+0x228>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d009      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a53      	ldr	r2, [pc, #332]	; (800410c <HAL_DMA_Start_IT+0x22c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d004      	beq.n	8003fce <HAL_DMA_Start_IT+0xee>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a51      	ldr	r2, [pc, #324]	; (8004110 <HAL_DMA_Start_IT+0x230>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d108      	bne.n	8003fe0 <HAL_DMA_Start_IT+0x100>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0201 	bic.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	e007      	b.n	8003ff0 <HAL_DMA_Start_IT+0x110>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0201 	bic.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f001 fb4a 	bl	8005690 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a34      	ldr	r2, [pc, #208]	; (80040d4 <HAL_DMA_Start_IT+0x1f4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d04a      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a33      	ldr	r2, [pc, #204]	; (80040d8 <HAL_DMA_Start_IT+0x1f8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d045      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a31      	ldr	r2, [pc, #196]	; (80040dc <HAL_DMA_Start_IT+0x1fc>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d040      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a30      	ldr	r2, [pc, #192]	; (80040e0 <HAL_DMA_Start_IT+0x200>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d03b      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a2e      	ldr	r2, [pc, #184]	; (80040e4 <HAL_DMA_Start_IT+0x204>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d036      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a2d      	ldr	r2, [pc, #180]	; (80040e8 <HAL_DMA_Start_IT+0x208>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d031      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a2b      	ldr	r2, [pc, #172]	; (80040ec <HAL_DMA_Start_IT+0x20c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d02c      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a2a      	ldr	r2, [pc, #168]	; (80040f0 <HAL_DMA_Start_IT+0x210>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d027      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a28      	ldr	r2, [pc, #160]	; (80040f4 <HAL_DMA_Start_IT+0x214>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d022      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a27      	ldr	r2, [pc, #156]	; (80040f8 <HAL_DMA_Start_IT+0x218>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d01d      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a25      	ldr	r2, [pc, #148]	; (80040fc <HAL_DMA_Start_IT+0x21c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d018      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a24      	ldr	r2, [pc, #144]	; (8004100 <HAL_DMA_Start_IT+0x220>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d013      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a22      	ldr	r2, [pc, #136]	; (8004104 <HAL_DMA_Start_IT+0x224>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00e      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a21      	ldr	r2, [pc, #132]	; (8004108 <HAL_DMA_Start_IT+0x228>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d009      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1f      	ldr	r2, [pc, #124]	; (800410c <HAL_DMA_Start_IT+0x22c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d004      	beq.n	800409c <HAL_DMA_Start_IT+0x1bc>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1e      	ldr	r2, [pc, #120]	; (8004110 <HAL_DMA_Start_IT+0x230>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d101      	bne.n	80040a0 <HAL_DMA_Start_IT+0x1c0>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <HAL_DMA_Start_IT+0x1c2>
 80040a0:	2300      	movs	r3, #0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d036      	beq.n	8004114 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f023 021e 	bic.w	r2, r3, #30
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0216 	orr.w	r2, r2, #22
 80040b8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d03e      	beq.n	8004140 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f042 0208 	orr.w	r2, r2, #8
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	e035      	b.n	8004140 <HAL_DMA_Start_IT+0x260>
 80040d4:	40020010 	.word	0x40020010
 80040d8:	40020028 	.word	0x40020028
 80040dc:	40020040 	.word	0x40020040
 80040e0:	40020058 	.word	0x40020058
 80040e4:	40020070 	.word	0x40020070
 80040e8:	40020088 	.word	0x40020088
 80040ec:	400200a0 	.word	0x400200a0
 80040f0:	400200b8 	.word	0x400200b8
 80040f4:	40020410 	.word	0x40020410
 80040f8:	40020428 	.word	0x40020428
 80040fc:	40020440 	.word	0x40020440
 8004100:	40020458 	.word	0x40020458
 8004104:	40020470 	.word	0x40020470
 8004108:	40020488 	.word	0x40020488
 800410c:	400204a0 	.word	0x400204a0
 8004110:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 020e 	bic.w	r2, r3, #14
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 020a 	orr.w	r2, r2, #10
 8004126:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0204 	orr.w	r2, r2, #4
 800413e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a83      	ldr	r2, [pc, #524]	; (8004354 <HAL_DMA_Start_IT+0x474>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d072      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a82      	ldr	r2, [pc, #520]	; (8004358 <HAL_DMA_Start_IT+0x478>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d06d      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a80      	ldr	r2, [pc, #512]	; (800435c <HAL_DMA_Start_IT+0x47c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d068      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a7f      	ldr	r2, [pc, #508]	; (8004360 <HAL_DMA_Start_IT+0x480>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d063      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a7d      	ldr	r2, [pc, #500]	; (8004364 <HAL_DMA_Start_IT+0x484>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d05e      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a7c      	ldr	r2, [pc, #496]	; (8004368 <HAL_DMA_Start_IT+0x488>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d059      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a7a      	ldr	r2, [pc, #488]	; (800436c <HAL_DMA_Start_IT+0x48c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d054      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a79      	ldr	r2, [pc, #484]	; (8004370 <HAL_DMA_Start_IT+0x490>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d04f      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a77      	ldr	r2, [pc, #476]	; (8004374 <HAL_DMA_Start_IT+0x494>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d04a      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a76      	ldr	r2, [pc, #472]	; (8004378 <HAL_DMA_Start_IT+0x498>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d045      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a74      	ldr	r2, [pc, #464]	; (800437c <HAL_DMA_Start_IT+0x49c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d040      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a73      	ldr	r2, [pc, #460]	; (8004380 <HAL_DMA_Start_IT+0x4a0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d03b      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a71      	ldr	r2, [pc, #452]	; (8004384 <HAL_DMA_Start_IT+0x4a4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d036      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a70      	ldr	r2, [pc, #448]	; (8004388 <HAL_DMA_Start_IT+0x4a8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d031      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a6e      	ldr	r2, [pc, #440]	; (800438c <HAL_DMA_Start_IT+0x4ac>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d02c      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a6d      	ldr	r2, [pc, #436]	; (8004390 <HAL_DMA_Start_IT+0x4b0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d027      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a6b      	ldr	r2, [pc, #428]	; (8004394 <HAL_DMA_Start_IT+0x4b4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d022      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a6a      	ldr	r2, [pc, #424]	; (8004398 <HAL_DMA_Start_IT+0x4b8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d01d      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a68      	ldr	r2, [pc, #416]	; (800439c <HAL_DMA_Start_IT+0x4bc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d018      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a67      	ldr	r2, [pc, #412]	; (80043a0 <HAL_DMA_Start_IT+0x4c0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d013      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a65      	ldr	r2, [pc, #404]	; (80043a4 <HAL_DMA_Start_IT+0x4c4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00e      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a64      	ldr	r2, [pc, #400]	; (80043a8 <HAL_DMA_Start_IT+0x4c8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d009      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a62      	ldr	r2, [pc, #392]	; (80043ac <HAL_DMA_Start_IT+0x4cc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d004      	beq.n	8004230 <HAL_DMA_Start_IT+0x350>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a61      	ldr	r2, [pc, #388]	; (80043b0 <HAL_DMA_Start_IT+0x4d0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d101      	bne.n	8004234 <HAL_DMA_Start_IT+0x354>
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <HAL_DMA_Start_IT+0x356>
 8004234:	2300      	movs	r3, #0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d01a      	beq.n	8004270 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d007      	beq.n	8004258 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004256:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800425c:	2b00      	cmp	r3, #0
 800425e:	d007      	beq.n	8004270 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800426a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800426e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a37      	ldr	r2, [pc, #220]	; (8004354 <HAL_DMA_Start_IT+0x474>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d04a      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a36      	ldr	r2, [pc, #216]	; (8004358 <HAL_DMA_Start_IT+0x478>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d045      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a34      	ldr	r2, [pc, #208]	; (800435c <HAL_DMA_Start_IT+0x47c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d040      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a33      	ldr	r2, [pc, #204]	; (8004360 <HAL_DMA_Start_IT+0x480>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d03b      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a31      	ldr	r2, [pc, #196]	; (8004364 <HAL_DMA_Start_IT+0x484>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d036      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a30      	ldr	r2, [pc, #192]	; (8004368 <HAL_DMA_Start_IT+0x488>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d031      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a2e      	ldr	r2, [pc, #184]	; (800436c <HAL_DMA_Start_IT+0x48c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d02c      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a2d      	ldr	r2, [pc, #180]	; (8004370 <HAL_DMA_Start_IT+0x490>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d027      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a2b      	ldr	r2, [pc, #172]	; (8004374 <HAL_DMA_Start_IT+0x494>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d022      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a2a      	ldr	r2, [pc, #168]	; (8004378 <HAL_DMA_Start_IT+0x498>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d01d      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a28      	ldr	r2, [pc, #160]	; (800437c <HAL_DMA_Start_IT+0x49c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d018      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a27      	ldr	r2, [pc, #156]	; (8004380 <HAL_DMA_Start_IT+0x4a0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a25      	ldr	r2, [pc, #148]	; (8004384 <HAL_DMA_Start_IT+0x4a4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00e      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a24      	ldr	r2, [pc, #144]	; (8004388 <HAL_DMA_Start_IT+0x4a8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d009      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a22      	ldr	r2, [pc, #136]	; (800438c <HAL_DMA_Start_IT+0x4ac>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <HAL_DMA_Start_IT+0x430>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a21      	ldr	r2, [pc, #132]	; (8004390 <HAL_DMA_Start_IT+0x4b0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d108      	bne.n	8004322 <HAL_DMA_Start_IT+0x442>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	e012      	b.n	8004348 <HAL_DMA_Start_IT+0x468>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 0201 	orr.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e009      	b.n	8004348 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004342:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40020010 	.word	0x40020010
 8004358:	40020028 	.word	0x40020028
 800435c:	40020040 	.word	0x40020040
 8004360:	40020058 	.word	0x40020058
 8004364:	40020070 	.word	0x40020070
 8004368:	40020088 	.word	0x40020088
 800436c:	400200a0 	.word	0x400200a0
 8004370:	400200b8 	.word	0x400200b8
 8004374:	40020410 	.word	0x40020410
 8004378:	40020428 	.word	0x40020428
 800437c:	40020440 	.word	0x40020440
 8004380:	40020458 	.word	0x40020458
 8004384:	40020470 	.word	0x40020470
 8004388:	40020488 	.word	0x40020488
 800438c:	400204a0 	.word	0x400204a0
 8004390:	400204b8 	.word	0x400204b8
 8004394:	58025408 	.word	0x58025408
 8004398:	5802541c 	.word	0x5802541c
 800439c:	58025430 	.word	0x58025430
 80043a0:	58025444 	.word	0x58025444
 80043a4:	58025458 	.word	0x58025458
 80043a8:	5802546c 	.word	0x5802546c
 80043ac:	58025480 	.word	0x58025480
 80043b0:	58025494 	.word	0x58025494

080043b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e205      	b.n	80047d2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d004      	beq.n	80043dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2280      	movs	r2, #128	; 0x80
 80043d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e1fa      	b.n	80047d2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a8c      	ldr	r2, [pc, #560]	; (8004614 <HAL_DMA_Abort_IT+0x260>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d04a      	beq.n	800447c <HAL_DMA_Abort_IT+0xc8>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a8b      	ldr	r2, [pc, #556]	; (8004618 <HAL_DMA_Abort_IT+0x264>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d045      	beq.n	800447c <HAL_DMA_Abort_IT+0xc8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a89      	ldr	r2, [pc, #548]	; (800461c <HAL_DMA_Abort_IT+0x268>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d040      	beq.n	800447c <HAL_DMA_Abort_IT+0xc8>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a88      	ldr	r2, [pc, #544]	; (8004620 <HAL_DMA_Abort_IT+0x26c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d03b      	beq.n	800447c <HAL_DMA_Abort_IT+0xc8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a86      	ldr	r2, [pc, #536]	; (8004624 <HAL_DMA_Abort_IT+0x270>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d036      	beq.n	800447c <HAL_DMA_Abort_IT+0xc8>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a85      	ldr	r2, [pc, #532]	; (8004628 <HAL_DMA_Abort_IT+0x274>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d031      	beq.n	800447c <HAL_DMA_Abort_IT+0xc8>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a83      	ldr	r2, [pc, #524]	; (800462c <HAL_DMA_Abort_IT+0x278>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d02c      	beq.n	800447c <HAL_DMA_Abort_IT+0xc8>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a82      	ldr	r2, [pc, #520]	; (8004630 <HAL_DMA_Abort_IT+0x27c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d027      	beq.n	800447c <HAL_DMA_Abort_IT+0xc8>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a80      	ldr	r2, [pc, #512]	; (8004634 <HAL_DMA_Abort_IT+0x280>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d022      	beq.n	800447c <HAL_DMA_Abort_IT+0xc8>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a7f      	ldr	r2, [pc, #508]	; (8004638 <HAL_DMA_Abort_IT+0x284>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d01d      	beq.n	800447c <HAL_DMA_Abort_IT+0xc8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a7d      	ldr	r2, [pc, #500]	; (800463c <HAL_DMA_Abort_IT+0x288>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d018      	beq.n	800447c <HAL_DMA_Abort_IT+0xc8>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a7c      	ldr	r2, [pc, #496]	; (8004640 <HAL_DMA_Abort_IT+0x28c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d013      	beq.n	800447c <HAL_DMA_Abort_IT+0xc8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a7a      	ldr	r2, [pc, #488]	; (8004644 <HAL_DMA_Abort_IT+0x290>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00e      	beq.n	800447c <HAL_DMA_Abort_IT+0xc8>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a79      	ldr	r2, [pc, #484]	; (8004648 <HAL_DMA_Abort_IT+0x294>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d009      	beq.n	800447c <HAL_DMA_Abort_IT+0xc8>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a77      	ldr	r2, [pc, #476]	; (800464c <HAL_DMA_Abort_IT+0x298>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <HAL_DMA_Abort_IT+0xc8>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a76      	ldr	r2, [pc, #472]	; (8004650 <HAL_DMA_Abort_IT+0x29c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d101      	bne.n	8004480 <HAL_DMA_Abort_IT+0xcc>
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <HAL_DMA_Abort_IT+0xce>
 8004480:	2300      	movs	r3, #0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d065      	beq.n	8004552 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2204      	movs	r2, #4
 800448a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a60      	ldr	r2, [pc, #384]	; (8004614 <HAL_DMA_Abort_IT+0x260>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d04a      	beq.n	800452e <HAL_DMA_Abort_IT+0x17a>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a5e      	ldr	r2, [pc, #376]	; (8004618 <HAL_DMA_Abort_IT+0x264>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d045      	beq.n	800452e <HAL_DMA_Abort_IT+0x17a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a5d      	ldr	r2, [pc, #372]	; (800461c <HAL_DMA_Abort_IT+0x268>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d040      	beq.n	800452e <HAL_DMA_Abort_IT+0x17a>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a5b      	ldr	r2, [pc, #364]	; (8004620 <HAL_DMA_Abort_IT+0x26c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d03b      	beq.n	800452e <HAL_DMA_Abort_IT+0x17a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a5a      	ldr	r2, [pc, #360]	; (8004624 <HAL_DMA_Abort_IT+0x270>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d036      	beq.n	800452e <HAL_DMA_Abort_IT+0x17a>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a58      	ldr	r2, [pc, #352]	; (8004628 <HAL_DMA_Abort_IT+0x274>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d031      	beq.n	800452e <HAL_DMA_Abort_IT+0x17a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a57      	ldr	r2, [pc, #348]	; (800462c <HAL_DMA_Abort_IT+0x278>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d02c      	beq.n	800452e <HAL_DMA_Abort_IT+0x17a>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a55      	ldr	r2, [pc, #340]	; (8004630 <HAL_DMA_Abort_IT+0x27c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d027      	beq.n	800452e <HAL_DMA_Abort_IT+0x17a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a54      	ldr	r2, [pc, #336]	; (8004634 <HAL_DMA_Abort_IT+0x280>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d022      	beq.n	800452e <HAL_DMA_Abort_IT+0x17a>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a52      	ldr	r2, [pc, #328]	; (8004638 <HAL_DMA_Abort_IT+0x284>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01d      	beq.n	800452e <HAL_DMA_Abort_IT+0x17a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a51      	ldr	r2, [pc, #324]	; (800463c <HAL_DMA_Abort_IT+0x288>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d018      	beq.n	800452e <HAL_DMA_Abort_IT+0x17a>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a4f      	ldr	r2, [pc, #316]	; (8004640 <HAL_DMA_Abort_IT+0x28c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d013      	beq.n	800452e <HAL_DMA_Abort_IT+0x17a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a4e      	ldr	r2, [pc, #312]	; (8004644 <HAL_DMA_Abort_IT+0x290>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00e      	beq.n	800452e <HAL_DMA_Abort_IT+0x17a>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a4c      	ldr	r2, [pc, #304]	; (8004648 <HAL_DMA_Abort_IT+0x294>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d009      	beq.n	800452e <HAL_DMA_Abort_IT+0x17a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a4b      	ldr	r2, [pc, #300]	; (800464c <HAL_DMA_Abort_IT+0x298>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_DMA_Abort_IT+0x17a>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a49      	ldr	r2, [pc, #292]	; (8004650 <HAL_DMA_Abort_IT+0x29c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d108      	bne.n	8004540 <HAL_DMA_Abort_IT+0x18c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0201 	bic.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	e147      	b.n	80047d0 <HAL_DMA_Abort_IT+0x41c>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0201 	bic.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	e13e      	b.n	80047d0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 020e 	bic.w	r2, r2, #14
 8004560:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a2b      	ldr	r2, [pc, #172]	; (8004614 <HAL_DMA_Abort_IT+0x260>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d04a      	beq.n	8004602 <HAL_DMA_Abort_IT+0x24e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a29      	ldr	r2, [pc, #164]	; (8004618 <HAL_DMA_Abort_IT+0x264>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d045      	beq.n	8004602 <HAL_DMA_Abort_IT+0x24e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a28      	ldr	r2, [pc, #160]	; (800461c <HAL_DMA_Abort_IT+0x268>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d040      	beq.n	8004602 <HAL_DMA_Abort_IT+0x24e>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a26      	ldr	r2, [pc, #152]	; (8004620 <HAL_DMA_Abort_IT+0x26c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d03b      	beq.n	8004602 <HAL_DMA_Abort_IT+0x24e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a25      	ldr	r2, [pc, #148]	; (8004624 <HAL_DMA_Abort_IT+0x270>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d036      	beq.n	8004602 <HAL_DMA_Abort_IT+0x24e>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a23      	ldr	r2, [pc, #140]	; (8004628 <HAL_DMA_Abort_IT+0x274>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d031      	beq.n	8004602 <HAL_DMA_Abort_IT+0x24e>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a22      	ldr	r2, [pc, #136]	; (800462c <HAL_DMA_Abort_IT+0x278>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d02c      	beq.n	8004602 <HAL_DMA_Abort_IT+0x24e>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a20      	ldr	r2, [pc, #128]	; (8004630 <HAL_DMA_Abort_IT+0x27c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d027      	beq.n	8004602 <HAL_DMA_Abort_IT+0x24e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a1f      	ldr	r2, [pc, #124]	; (8004634 <HAL_DMA_Abort_IT+0x280>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d022      	beq.n	8004602 <HAL_DMA_Abort_IT+0x24e>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a1d      	ldr	r2, [pc, #116]	; (8004638 <HAL_DMA_Abort_IT+0x284>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d01d      	beq.n	8004602 <HAL_DMA_Abort_IT+0x24e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1c      	ldr	r2, [pc, #112]	; (800463c <HAL_DMA_Abort_IT+0x288>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d018      	beq.n	8004602 <HAL_DMA_Abort_IT+0x24e>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1a      	ldr	r2, [pc, #104]	; (8004640 <HAL_DMA_Abort_IT+0x28c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d013      	beq.n	8004602 <HAL_DMA_Abort_IT+0x24e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a19      	ldr	r2, [pc, #100]	; (8004644 <HAL_DMA_Abort_IT+0x290>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00e      	beq.n	8004602 <HAL_DMA_Abort_IT+0x24e>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a17      	ldr	r2, [pc, #92]	; (8004648 <HAL_DMA_Abort_IT+0x294>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d009      	beq.n	8004602 <HAL_DMA_Abort_IT+0x24e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a16      	ldr	r2, [pc, #88]	; (800464c <HAL_DMA_Abort_IT+0x298>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_DMA_Abort_IT+0x24e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a14      	ldr	r2, [pc, #80]	; (8004650 <HAL_DMA_Abort_IT+0x29c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d128      	bne.n	8004654 <HAL_DMA_Abort_IT+0x2a0>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	e027      	b.n	8004664 <HAL_DMA_Abort_IT+0x2b0>
 8004614:	40020010 	.word	0x40020010
 8004618:	40020028 	.word	0x40020028
 800461c:	40020040 	.word	0x40020040
 8004620:	40020058 	.word	0x40020058
 8004624:	40020070 	.word	0x40020070
 8004628:	40020088 	.word	0x40020088
 800462c:	400200a0 	.word	0x400200a0
 8004630:	400200b8 	.word	0x400200b8
 8004634:	40020410 	.word	0x40020410
 8004638:	40020428 	.word	0x40020428
 800463c:	40020440 	.word	0x40020440
 8004640:	40020458 	.word	0x40020458
 8004644:	40020470 	.word	0x40020470
 8004648:	40020488 	.word	0x40020488
 800464c:	400204a0 	.word	0x400204a0
 8004650:	400204b8 	.word	0x400204b8
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0201 	bic.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a5c      	ldr	r2, [pc, #368]	; (80047dc <HAL_DMA_Abort_IT+0x428>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d072      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a5b      	ldr	r2, [pc, #364]	; (80047e0 <HAL_DMA_Abort_IT+0x42c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d06d      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a59      	ldr	r2, [pc, #356]	; (80047e4 <HAL_DMA_Abort_IT+0x430>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d068      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a58      	ldr	r2, [pc, #352]	; (80047e8 <HAL_DMA_Abort_IT+0x434>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d063      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a56      	ldr	r2, [pc, #344]	; (80047ec <HAL_DMA_Abort_IT+0x438>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d05e      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a55      	ldr	r2, [pc, #340]	; (80047f0 <HAL_DMA_Abort_IT+0x43c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d059      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a53      	ldr	r2, [pc, #332]	; (80047f4 <HAL_DMA_Abort_IT+0x440>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d054      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a52      	ldr	r2, [pc, #328]	; (80047f8 <HAL_DMA_Abort_IT+0x444>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d04f      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a50      	ldr	r2, [pc, #320]	; (80047fc <HAL_DMA_Abort_IT+0x448>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d04a      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a4f      	ldr	r2, [pc, #316]	; (8004800 <HAL_DMA_Abort_IT+0x44c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d045      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a4d      	ldr	r2, [pc, #308]	; (8004804 <HAL_DMA_Abort_IT+0x450>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d040      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a4c      	ldr	r2, [pc, #304]	; (8004808 <HAL_DMA_Abort_IT+0x454>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d03b      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a4a      	ldr	r2, [pc, #296]	; (800480c <HAL_DMA_Abort_IT+0x458>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d036      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a49      	ldr	r2, [pc, #292]	; (8004810 <HAL_DMA_Abort_IT+0x45c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d031      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a47      	ldr	r2, [pc, #284]	; (8004814 <HAL_DMA_Abort_IT+0x460>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d02c      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a46      	ldr	r2, [pc, #280]	; (8004818 <HAL_DMA_Abort_IT+0x464>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d027      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a44      	ldr	r2, [pc, #272]	; (800481c <HAL_DMA_Abort_IT+0x468>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d022      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a43      	ldr	r2, [pc, #268]	; (8004820 <HAL_DMA_Abort_IT+0x46c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d01d      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a41      	ldr	r2, [pc, #260]	; (8004824 <HAL_DMA_Abort_IT+0x470>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d018      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a40      	ldr	r2, [pc, #256]	; (8004828 <HAL_DMA_Abort_IT+0x474>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d013      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a3e      	ldr	r2, [pc, #248]	; (800482c <HAL_DMA_Abort_IT+0x478>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00e      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a3d      	ldr	r2, [pc, #244]	; (8004830 <HAL_DMA_Abort_IT+0x47c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d009      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a3b      	ldr	r2, [pc, #236]	; (8004834 <HAL_DMA_Abort_IT+0x480>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <HAL_DMA_Abort_IT+0x3a0>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a3a      	ldr	r2, [pc, #232]	; (8004838 <HAL_DMA_Abort_IT+0x484>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d101      	bne.n	8004758 <HAL_DMA_Abort_IT+0x3a4>
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <HAL_DMA_Abort_IT+0x3a6>
 8004758:	2300      	movs	r3, #0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d028      	beq.n	80047b0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800476c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004772:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004778:	f003 031f 	and.w	r3, r3, #31
 800477c:	2201      	movs	r2, #1
 800477e:	409a      	lsls	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800478c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00c      	beq.n	80047b0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40020010 	.word	0x40020010
 80047e0:	40020028 	.word	0x40020028
 80047e4:	40020040 	.word	0x40020040
 80047e8:	40020058 	.word	0x40020058
 80047ec:	40020070 	.word	0x40020070
 80047f0:	40020088 	.word	0x40020088
 80047f4:	400200a0 	.word	0x400200a0
 80047f8:	400200b8 	.word	0x400200b8
 80047fc:	40020410 	.word	0x40020410
 8004800:	40020428 	.word	0x40020428
 8004804:	40020440 	.word	0x40020440
 8004808:	40020458 	.word	0x40020458
 800480c:	40020470 	.word	0x40020470
 8004810:	40020488 	.word	0x40020488
 8004814:	400204a0 	.word	0x400204a0
 8004818:	400204b8 	.word	0x400204b8
 800481c:	58025408 	.word	0x58025408
 8004820:	5802541c 	.word	0x5802541c
 8004824:	58025430 	.word	0x58025430
 8004828:	58025444 	.word	0x58025444
 800482c:	58025458 	.word	0x58025458
 8004830:	5802546c 	.word	0x5802546c
 8004834:	58025480 	.word	0x58025480
 8004838:	58025494 	.word	0x58025494

0800483c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08a      	sub	sp, #40	; 0x28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004848:	4b67      	ldr	r3, [pc, #412]	; (80049e8 <HAL_DMA_IRQHandler+0x1ac>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a67      	ldr	r2, [pc, #412]	; (80049ec <HAL_DMA_IRQHandler+0x1b0>)
 800484e:	fba2 2303 	umull	r2, r3, r2, r3
 8004852:	0a9b      	lsrs	r3, r3, #10
 8004854:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004860:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a5f      	ldr	r2, [pc, #380]	; (80049f0 <HAL_DMA_IRQHandler+0x1b4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d04a      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a5d      	ldr	r2, [pc, #372]	; (80049f4 <HAL_DMA_IRQHandler+0x1b8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d045      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a5c      	ldr	r2, [pc, #368]	; (80049f8 <HAL_DMA_IRQHandler+0x1bc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d040      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a5a      	ldr	r2, [pc, #360]	; (80049fc <HAL_DMA_IRQHandler+0x1c0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d03b      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a59      	ldr	r2, [pc, #356]	; (8004a00 <HAL_DMA_IRQHandler+0x1c4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d036      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a57      	ldr	r2, [pc, #348]	; (8004a04 <HAL_DMA_IRQHandler+0x1c8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d031      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a56      	ldr	r2, [pc, #344]	; (8004a08 <HAL_DMA_IRQHandler+0x1cc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d02c      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a54      	ldr	r2, [pc, #336]	; (8004a0c <HAL_DMA_IRQHandler+0x1d0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d027      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a53      	ldr	r2, [pc, #332]	; (8004a10 <HAL_DMA_IRQHandler+0x1d4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d022      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a51      	ldr	r2, [pc, #324]	; (8004a14 <HAL_DMA_IRQHandler+0x1d8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d01d      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a50      	ldr	r2, [pc, #320]	; (8004a18 <HAL_DMA_IRQHandler+0x1dc>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d018      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a4e      	ldr	r2, [pc, #312]	; (8004a1c <HAL_DMA_IRQHandler+0x1e0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d013      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a4d      	ldr	r2, [pc, #308]	; (8004a20 <HAL_DMA_IRQHandler+0x1e4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00e      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a4b      	ldr	r2, [pc, #300]	; (8004a24 <HAL_DMA_IRQHandler+0x1e8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d009      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a4a      	ldr	r2, [pc, #296]	; (8004a28 <HAL_DMA_IRQHandler+0x1ec>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d004      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a48      	ldr	r2, [pc, #288]	; (8004a2c <HAL_DMA_IRQHandler+0x1f0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d101      	bne.n	8004912 <HAL_DMA_IRQHandler+0xd6>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <HAL_DMA_IRQHandler+0xd8>
 8004912:	2300      	movs	r3, #0
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 842b 	beq.w	8005170 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	2208      	movs	r2, #8
 8004924:	409a      	lsls	r2, r3
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 80a2 	beq.w	8004a74 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a2e      	ldr	r2, [pc, #184]	; (80049f0 <HAL_DMA_IRQHandler+0x1b4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d04a      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a2d      	ldr	r2, [pc, #180]	; (80049f4 <HAL_DMA_IRQHandler+0x1b8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d045      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a2b      	ldr	r2, [pc, #172]	; (80049f8 <HAL_DMA_IRQHandler+0x1bc>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d040      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a2a      	ldr	r2, [pc, #168]	; (80049fc <HAL_DMA_IRQHandler+0x1c0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d03b      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a28      	ldr	r2, [pc, #160]	; (8004a00 <HAL_DMA_IRQHandler+0x1c4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d036      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a27      	ldr	r2, [pc, #156]	; (8004a04 <HAL_DMA_IRQHandler+0x1c8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d031      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a25      	ldr	r2, [pc, #148]	; (8004a08 <HAL_DMA_IRQHandler+0x1cc>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d02c      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a24      	ldr	r2, [pc, #144]	; (8004a0c <HAL_DMA_IRQHandler+0x1d0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d027      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a22      	ldr	r2, [pc, #136]	; (8004a10 <HAL_DMA_IRQHandler+0x1d4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d022      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a21      	ldr	r2, [pc, #132]	; (8004a14 <HAL_DMA_IRQHandler+0x1d8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d01d      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1f      	ldr	r2, [pc, #124]	; (8004a18 <HAL_DMA_IRQHandler+0x1dc>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d018      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1e      	ldr	r2, [pc, #120]	; (8004a1c <HAL_DMA_IRQHandler+0x1e0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d013      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1c      	ldr	r2, [pc, #112]	; (8004a20 <HAL_DMA_IRQHandler+0x1e4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00e      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1b      	ldr	r2, [pc, #108]	; (8004a24 <HAL_DMA_IRQHandler+0x1e8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d009      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a19      	ldr	r2, [pc, #100]	; (8004a28 <HAL_DMA_IRQHandler+0x1ec>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d004      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a18      	ldr	r2, [pc, #96]	; (8004a2c <HAL_DMA_IRQHandler+0x1f0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d12f      	bne.n	8004a30 <HAL_DMA_IRQHandler+0x1f4>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b00      	cmp	r3, #0
 80049dc:	bf14      	ite	ne
 80049de:	2301      	movne	r3, #1
 80049e0:	2300      	moveq	r3, #0
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	e02e      	b.n	8004a44 <HAL_DMA_IRQHandler+0x208>
 80049e6:	bf00      	nop
 80049e8:	24000068 	.word	0x24000068
 80049ec:	1b4e81b5 	.word	0x1b4e81b5
 80049f0:	40020010 	.word	0x40020010
 80049f4:	40020028 	.word	0x40020028
 80049f8:	40020040 	.word	0x40020040
 80049fc:	40020058 	.word	0x40020058
 8004a00:	40020070 	.word	0x40020070
 8004a04:	40020088 	.word	0x40020088
 8004a08:	400200a0 	.word	0x400200a0
 8004a0c:	400200b8 	.word	0x400200b8
 8004a10:	40020410 	.word	0x40020410
 8004a14:	40020428 	.word	0x40020428
 8004a18:	40020440 	.word	0x40020440
 8004a1c:	40020458 	.word	0x40020458
 8004a20:	40020470 	.word	0x40020470
 8004a24:	40020488 	.word	0x40020488
 8004a28:	400204a0 	.word	0x400204a0
 8004a2c:	400204b8 	.word	0x400204b8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	bf14      	ite	ne
 8004a3e:	2301      	movne	r3, #1
 8004a40:	2300      	moveq	r3, #0
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d015      	beq.n	8004a74 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0204 	bic.w	r2, r2, #4
 8004a56:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a5c:	f003 031f 	and.w	r3, r3, #31
 8004a60:	2208      	movs	r2, #8
 8004a62:	409a      	lsls	r2, r3
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6c:	f043 0201 	orr.w	r2, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a78:	f003 031f 	and.w	r3, r3, #31
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d06e      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a69      	ldr	r2, [pc, #420]	; (8004c34 <HAL_DMA_IRQHandler+0x3f8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d04a      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a67      	ldr	r2, [pc, #412]	; (8004c38 <HAL_DMA_IRQHandler+0x3fc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d045      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a66      	ldr	r2, [pc, #408]	; (8004c3c <HAL_DMA_IRQHandler+0x400>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d040      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a64      	ldr	r2, [pc, #400]	; (8004c40 <HAL_DMA_IRQHandler+0x404>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d03b      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a63      	ldr	r2, [pc, #396]	; (8004c44 <HAL_DMA_IRQHandler+0x408>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d036      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a61      	ldr	r2, [pc, #388]	; (8004c48 <HAL_DMA_IRQHandler+0x40c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d031      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a60      	ldr	r2, [pc, #384]	; (8004c4c <HAL_DMA_IRQHandler+0x410>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d02c      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a5e      	ldr	r2, [pc, #376]	; (8004c50 <HAL_DMA_IRQHandler+0x414>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d027      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a5d      	ldr	r2, [pc, #372]	; (8004c54 <HAL_DMA_IRQHandler+0x418>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d022      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a5b      	ldr	r2, [pc, #364]	; (8004c58 <HAL_DMA_IRQHandler+0x41c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d01d      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a5a      	ldr	r2, [pc, #360]	; (8004c5c <HAL_DMA_IRQHandler+0x420>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d018      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a58      	ldr	r2, [pc, #352]	; (8004c60 <HAL_DMA_IRQHandler+0x424>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a57      	ldr	r2, [pc, #348]	; (8004c64 <HAL_DMA_IRQHandler+0x428>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00e      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a55      	ldr	r2, [pc, #340]	; (8004c68 <HAL_DMA_IRQHandler+0x42c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d009      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a54      	ldr	r2, [pc, #336]	; (8004c6c <HAL_DMA_IRQHandler+0x430>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d004      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a52      	ldr	r2, [pc, #328]	; (8004c70 <HAL_DMA_IRQHandler+0x434>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d10a      	bne.n	8004b40 <HAL_DMA_IRQHandler+0x304>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	bf14      	ite	ne
 8004b38:	2301      	movne	r3, #1
 8004b3a:	2300      	moveq	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	e003      	b.n	8004b48 <HAL_DMA_IRQHandler+0x30c>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00d      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	2201      	movs	r2, #1
 8004b56:	409a      	lsls	r2, r3
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b60:	f043 0202 	orr.w	r2, r3, #2
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	2204      	movs	r2, #4
 8004b72:	409a      	lsls	r2, r3
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 808f 	beq.w	8004c9c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a2c      	ldr	r2, [pc, #176]	; (8004c34 <HAL_DMA_IRQHandler+0x3f8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d04a      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a2a      	ldr	r2, [pc, #168]	; (8004c38 <HAL_DMA_IRQHandler+0x3fc>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d045      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a29      	ldr	r2, [pc, #164]	; (8004c3c <HAL_DMA_IRQHandler+0x400>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d040      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a27      	ldr	r2, [pc, #156]	; (8004c40 <HAL_DMA_IRQHandler+0x404>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d03b      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a26      	ldr	r2, [pc, #152]	; (8004c44 <HAL_DMA_IRQHandler+0x408>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d036      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a24      	ldr	r2, [pc, #144]	; (8004c48 <HAL_DMA_IRQHandler+0x40c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d031      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a23      	ldr	r2, [pc, #140]	; (8004c4c <HAL_DMA_IRQHandler+0x410>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d02c      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a21      	ldr	r2, [pc, #132]	; (8004c50 <HAL_DMA_IRQHandler+0x414>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d027      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a20      	ldr	r2, [pc, #128]	; (8004c54 <HAL_DMA_IRQHandler+0x418>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d022      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a1e      	ldr	r2, [pc, #120]	; (8004c58 <HAL_DMA_IRQHandler+0x41c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01d      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1d      	ldr	r2, [pc, #116]	; (8004c5c <HAL_DMA_IRQHandler+0x420>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d018      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a1b      	ldr	r2, [pc, #108]	; (8004c60 <HAL_DMA_IRQHandler+0x424>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d013      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1a      	ldr	r2, [pc, #104]	; (8004c64 <HAL_DMA_IRQHandler+0x428>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00e      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a18      	ldr	r2, [pc, #96]	; (8004c68 <HAL_DMA_IRQHandler+0x42c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d009      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a17      	ldr	r2, [pc, #92]	; (8004c6c <HAL_DMA_IRQHandler+0x430>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d004      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a15      	ldr	r2, [pc, #84]	; (8004c70 <HAL_DMA_IRQHandler+0x434>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d12a      	bne.n	8004c74 <HAL_DMA_IRQHandler+0x438>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf14      	ite	ne
 8004c2c:	2301      	movne	r3, #1
 8004c2e:	2300      	moveq	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	e023      	b.n	8004c7c <HAL_DMA_IRQHandler+0x440>
 8004c34:	40020010 	.word	0x40020010
 8004c38:	40020028 	.word	0x40020028
 8004c3c:	40020040 	.word	0x40020040
 8004c40:	40020058 	.word	0x40020058
 8004c44:	40020070 	.word	0x40020070
 8004c48:	40020088 	.word	0x40020088
 8004c4c:	400200a0 	.word	0x400200a0
 8004c50:	400200b8 	.word	0x400200b8
 8004c54:	40020410 	.word	0x40020410
 8004c58:	40020428 	.word	0x40020428
 8004c5c:	40020440 	.word	0x40020440
 8004c60:	40020458 	.word	0x40020458
 8004c64:	40020470 	.word	0x40020470
 8004c68:	40020488 	.word	0x40020488
 8004c6c:	400204a0 	.word	0x400204a0
 8004c70:	400204b8 	.word	0x400204b8
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00d      	beq.n	8004c9c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c84:	f003 031f 	and.w	r3, r3, #31
 8004c88:	2204      	movs	r2, #4
 8004c8a:	409a      	lsls	r2, r3
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c94:	f043 0204 	orr.w	r2, r3, #4
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80a6 	beq.w	8004dfe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a85      	ldr	r2, [pc, #532]	; (8004ecc <HAL_DMA_IRQHandler+0x690>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d04a      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a83      	ldr	r2, [pc, #524]	; (8004ed0 <HAL_DMA_IRQHandler+0x694>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d045      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a82      	ldr	r2, [pc, #520]	; (8004ed4 <HAL_DMA_IRQHandler+0x698>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d040      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a80      	ldr	r2, [pc, #512]	; (8004ed8 <HAL_DMA_IRQHandler+0x69c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d03b      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a7f      	ldr	r2, [pc, #508]	; (8004edc <HAL_DMA_IRQHandler+0x6a0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d036      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a7d      	ldr	r2, [pc, #500]	; (8004ee0 <HAL_DMA_IRQHandler+0x6a4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d031      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a7c      	ldr	r2, [pc, #496]	; (8004ee4 <HAL_DMA_IRQHandler+0x6a8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d02c      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a7a      	ldr	r2, [pc, #488]	; (8004ee8 <HAL_DMA_IRQHandler+0x6ac>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d027      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a79      	ldr	r2, [pc, #484]	; (8004eec <HAL_DMA_IRQHandler+0x6b0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d022      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a77      	ldr	r2, [pc, #476]	; (8004ef0 <HAL_DMA_IRQHandler+0x6b4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01d      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a76      	ldr	r2, [pc, #472]	; (8004ef4 <HAL_DMA_IRQHandler+0x6b8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d018      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a74      	ldr	r2, [pc, #464]	; (8004ef8 <HAL_DMA_IRQHandler+0x6bc>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d013      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a73      	ldr	r2, [pc, #460]	; (8004efc <HAL_DMA_IRQHandler+0x6c0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00e      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a71      	ldr	r2, [pc, #452]	; (8004f00 <HAL_DMA_IRQHandler+0x6c4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d009      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a70      	ldr	r2, [pc, #448]	; (8004f04 <HAL_DMA_IRQHandler+0x6c8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d004      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a6e      	ldr	r2, [pc, #440]	; (8004f08 <HAL_DMA_IRQHandler+0x6cc>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d10a      	bne.n	8004d68 <HAL_DMA_IRQHandler+0x52c>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	bf14      	ite	ne
 8004d60:	2301      	movne	r3, #1
 8004d62:	2300      	moveq	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	e009      	b.n	8004d7c <HAL_DMA_IRQHandler+0x540>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	bf14      	ite	ne
 8004d76:	2301      	movne	r3, #1
 8004d78:	2300      	moveq	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d03e      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d84:	f003 031f 	and.w	r3, r3, #31
 8004d88:	2210      	movs	r2, #16
 8004d8a:	409a      	lsls	r2, r3
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d018      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d108      	bne.n	8004dbe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d024      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	4798      	blx	r3
 8004dbc:	e01f      	b.n	8004dfe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d01b      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	4798      	blx	r3
 8004dce:	e016      	b.n	8004dfe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d107      	bne.n	8004dee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0208 	bic.w	r2, r2, #8
 8004dec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	2220      	movs	r2, #32
 8004e08:	409a      	lsls	r2, r3
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 8110 	beq.w	8005034 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a2c      	ldr	r2, [pc, #176]	; (8004ecc <HAL_DMA_IRQHandler+0x690>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d04a      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a2b      	ldr	r2, [pc, #172]	; (8004ed0 <HAL_DMA_IRQHandler+0x694>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d045      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a29      	ldr	r2, [pc, #164]	; (8004ed4 <HAL_DMA_IRQHandler+0x698>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d040      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a28      	ldr	r2, [pc, #160]	; (8004ed8 <HAL_DMA_IRQHandler+0x69c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d03b      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a26      	ldr	r2, [pc, #152]	; (8004edc <HAL_DMA_IRQHandler+0x6a0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d036      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a25      	ldr	r2, [pc, #148]	; (8004ee0 <HAL_DMA_IRQHandler+0x6a4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d031      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a23      	ldr	r2, [pc, #140]	; (8004ee4 <HAL_DMA_IRQHandler+0x6a8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d02c      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a22      	ldr	r2, [pc, #136]	; (8004ee8 <HAL_DMA_IRQHandler+0x6ac>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d027      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a20      	ldr	r2, [pc, #128]	; (8004eec <HAL_DMA_IRQHandler+0x6b0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d022      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1f      	ldr	r2, [pc, #124]	; (8004ef0 <HAL_DMA_IRQHandler+0x6b4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d01d      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <HAL_DMA_IRQHandler+0x6b8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d018      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1c      	ldr	r2, [pc, #112]	; (8004ef8 <HAL_DMA_IRQHandler+0x6bc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d013      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1a      	ldr	r2, [pc, #104]	; (8004efc <HAL_DMA_IRQHandler+0x6c0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a19      	ldr	r2, [pc, #100]	; (8004f00 <HAL_DMA_IRQHandler+0x6c4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a17      	ldr	r2, [pc, #92]	; (8004f04 <HAL_DMA_IRQHandler+0x6c8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a16      	ldr	r2, [pc, #88]	; (8004f08 <HAL_DMA_IRQHandler+0x6cc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d12b      	bne.n	8004f0c <HAL_DMA_IRQHandler+0x6d0>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	bf14      	ite	ne
 8004ec2:	2301      	movne	r3, #1
 8004ec4:	2300      	moveq	r3, #0
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	e02a      	b.n	8004f20 <HAL_DMA_IRQHandler+0x6e4>
 8004eca:	bf00      	nop
 8004ecc:	40020010 	.word	0x40020010
 8004ed0:	40020028 	.word	0x40020028
 8004ed4:	40020040 	.word	0x40020040
 8004ed8:	40020058 	.word	0x40020058
 8004edc:	40020070 	.word	0x40020070
 8004ee0:	40020088 	.word	0x40020088
 8004ee4:	400200a0 	.word	0x400200a0
 8004ee8:	400200b8 	.word	0x400200b8
 8004eec:	40020410 	.word	0x40020410
 8004ef0:	40020428 	.word	0x40020428
 8004ef4:	40020440 	.word	0x40020440
 8004ef8:	40020458 	.word	0x40020458
 8004efc:	40020470 	.word	0x40020470
 8004f00:	40020488 	.word	0x40020488
 8004f04:	400204a0 	.word	0x400204a0
 8004f08:	400204b8 	.word	0x400204b8
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	bf14      	ite	ne
 8004f1a:	2301      	movne	r3, #1
 8004f1c:	2300      	moveq	r3, #0
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8087 	beq.w	8005034 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	2220      	movs	r2, #32
 8004f30:	409a      	lsls	r2, r3
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d139      	bne.n	8004fb6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0216 	bic.w	r2, r2, #22
 8004f50:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695a      	ldr	r2, [r3, #20]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f60:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d103      	bne.n	8004f72 <HAL_DMA_IRQHandler+0x736>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0208 	bic.w	r2, r2, #8
 8004f80:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f86:	f003 031f 	and.w	r3, r3, #31
 8004f8a:	223f      	movs	r2, #63	; 0x3f
 8004f8c:	409a      	lsls	r2, r3
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 834a 	beq.w	8005640 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	4798      	blx	r3
          }
          return;
 8004fb4:	e344      	b.n	8005640 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d018      	beq.n	8004ff6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d108      	bne.n	8004fe4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d02c      	beq.n	8005034 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	4798      	blx	r3
 8004fe2:	e027      	b.n	8005034 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d023      	beq.n	8005034 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	4798      	blx	r3
 8004ff4:	e01e      	b.n	8005034 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10f      	bne.n	8005024 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0210 	bic.w	r2, r2, #16
 8005012:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8306 	beq.w	800564a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 8088 	beq.w	800515c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2204      	movs	r2, #4
 8005050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a7a      	ldr	r2, [pc, #488]	; (8005244 <HAL_DMA_IRQHandler+0xa08>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d04a      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a79      	ldr	r2, [pc, #484]	; (8005248 <HAL_DMA_IRQHandler+0xa0c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d045      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a77      	ldr	r2, [pc, #476]	; (800524c <HAL_DMA_IRQHandler+0xa10>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d040      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a76      	ldr	r2, [pc, #472]	; (8005250 <HAL_DMA_IRQHandler+0xa14>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d03b      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a74      	ldr	r2, [pc, #464]	; (8005254 <HAL_DMA_IRQHandler+0xa18>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d036      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a73      	ldr	r2, [pc, #460]	; (8005258 <HAL_DMA_IRQHandler+0xa1c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d031      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a71      	ldr	r2, [pc, #452]	; (800525c <HAL_DMA_IRQHandler+0xa20>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d02c      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a70      	ldr	r2, [pc, #448]	; (8005260 <HAL_DMA_IRQHandler+0xa24>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d027      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a6e      	ldr	r2, [pc, #440]	; (8005264 <HAL_DMA_IRQHandler+0xa28>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d022      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a6d      	ldr	r2, [pc, #436]	; (8005268 <HAL_DMA_IRQHandler+0xa2c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d01d      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a6b      	ldr	r2, [pc, #428]	; (800526c <HAL_DMA_IRQHandler+0xa30>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d018      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a6a      	ldr	r2, [pc, #424]	; (8005270 <HAL_DMA_IRQHandler+0xa34>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d013      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a68      	ldr	r2, [pc, #416]	; (8005274 <HAL_DMA_IRQHandler+0xa38>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d00e      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a67      	ldr	r2, [pc, #412]	; (8005278 <HAL_DMA_IRQHandler+0xa3c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d009      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a65      	ldr	r2, [pc, #404]	; (800527c <HAL_DMA_IRQHandler+0xa40>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d004      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a64      	ldr	r2, [pc, #400]	; (8005280 <HAL_DMA_IRQHandler+0xa44>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d108      	bne.n	8005106 <HAL_DMA_IRQHandler+0x8ca>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0201 	bic.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	e007      	b.n	8005116 <HAL_DMA_IRQHandler+0x8da>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0201 	bic.w	r2, r2, #1
 8005114:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3301      	adds	r3, #1
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511e:	429a      	cmp	r2, r3
 8005120:	d307      	bcc.n	8005132 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1f2      	bne.n	8005116 <HAL_DMA_IRQHandler+0x8da>
 8005130:	e000      	b.n	8005134 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005132:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d004      	beq.n	8005154 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2203      	movs	r2, #3
 800514e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005152:	e003      	b.n	800515c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 8272 	beq.w	800564a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	4798      	blx	r3
 800516e:	e26c      	b.n	800564a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a43      	ldr	r2, [pc, #268]	; (8005284 <HAL_DMA_IRQHandler+0xa48>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d022      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x984>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a42      	ldr	r2, [pc, #264]	; (8005288 <HAL_DMA_IRQHandler+0xa4c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d01d      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x984>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a40      	ldr	r2, [pc, #256]	; (800528c <HAL_DMA_IRQHandler+0xa50>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d018      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x984>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a3f      	ldr	r2, [pc, #252]	; (8005290 <HAL_DMA_IRQHandler+0xa54>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d013      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x984>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a3d      	ldr	r2, [pc, #244]	; (8005294 <HAL_DMA_IRQHandler+0xa58>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00e      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x984>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a3c      	ldr	r2, [pc, #240]	; (8005298 <HAL_DMA_IRQHandler+0xa5c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d009      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x984>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a3a      	ldr	r2, [pc, #232]	; (800529c <HAL_DMA_IRQHandler+0xa60>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x984>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a39      	ldr	r2, [pc, #228]	; (80052a0 <HAL_DMA_IRQHandler+0xa64>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d101      	bne.n	80051c4 <HAL_DMA_IRQHandler+0x988>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <HAL_DMA_IRQHandler+0x98a>
 80051c4:	2300      	movs	r3, #0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 823f 	beq.w	800564a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d8:	f003 031f 	and.w	r3, r3, #31
 80051dc:	2204      	movs	r2, #4
 80051de:	409a      	lsls	r2, r3
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	4013      	ands	r3, r2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 80cd 	beq.w	8005384 <HAL_DMA_IRQHandler+0xb48>
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80c7 	beq.w	8005384 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	2204      	movs	r2, #4
 8005200:	409a      	lsls	r2, r3
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d049      	beq.n	80052a4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d109      	bne.n	800522e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 8210 	beq.w	8005644 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800522c:	e20a      	b.n	8005644 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 8206 	beq.w	8005644 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005240:	e200      	b.n	8005644 <HAL_DMA_IRQHandler+0xe08>
 8005242:	bf00      	nop
 8005244:	40020010 	.word	0x40020010
 8005248:	40020028 	.word	0x40020028
 800524c:	40020040 	.word	0x40020040
 8005250:	40020058 	.word	0x40020058
 8005254:	40020070 	.word	0x40020070
 8005258:	40020088 	.word	0x40020088
 800525c:	400200a0 	.word	0x400200a0
 8005260:	400200b8 	.word	0x400200b8
 8005264:	40020410 	.word	0x40020410
 8005268:	40020428 	.word	0x40020428
 800526c:	40020440 	.word	0x40020440
 8005270:	40020458 	.word	0x40020458
 8005274:	40020470 	.word	0x40020470
 8005278:	40020488 	.word	0x40020488
 800527c:	400204a0 	.word	0x400204a0
 8005280:	400204b8 	.word	0x400204b8
 8005284:	58025408 	.word	0x58025408
 8005288:	5802541c 	.word	0x5802541c
 800528c:	58025430 	.word	0x58025430
 8005290:	58025444 	.word	0x58025444
 8005294:	58025458 	.word	0x58025458
 8005298:	5802546c 	.word	0x5802546c
 800529c:	58025480 	.word	0x58025480
 80052a0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f003 0320 	and.w	r3, r3, #32
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d160      	bne.n	8005370 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a8c      	ldr	r2, [pc, #560]	; (80054e4 <HAL_DMA_IRQHandler+0xca8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d04a      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a8a      	ldr	r2, [pc, #552]	; (80054e8 <HAL_DMA_IRQHandler+0xcac>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d045      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a89      	ldr	r2, [pc, #548]	; (80054ec <HAL_DMA_IRQHandler+0xcb0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d040      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a87      	ldr	r2, [pc, #540]	; (80054f0 <HAL_DMA_IRQHandler+0xcb4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d03b      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a86      	ldr	r2, [pc, #536]	; (80054f4 <HAL_DMA_IRQHandler+0xcb8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d036      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a84      	ldr	r2, [pc, #528]	; (80054f8 <HAL_DMA_IRQHandler+0xcbc>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d031      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a83      	ldr	r2, [pc, #524]	; (80054fc <HAL_DMA_IRQHandler+0xcc0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d02c      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a81      	ldr	r2, [pc, #516]	; (8005500 <HAL_DMA_IRQHandler+0xcc4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d027      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a80      	ldr	r2, [pc, #512]	; (8005504 <HAL_DMA_IRQHandler+0xcc8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d022      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a7e      	ldr	r2, [pc, #504]	; (8005508 <HAL_DMA_IRQHandler+0xccc>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d01d      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a7d      	ldr	r2, [pc, #500]	; (800550c <HAL_DMA_IRQHandler+0xcd0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d018      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a7b      	ldr	r2, [pc, #492]	; (8005510 <HAL_DMA_IRQHandler+0xcd4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d013      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a7a      	ldr	r2, [pc, #488]	; (8005514 <HAL_DMA_IRQHandler+0xcd8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00e      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a78      	ldr	r2, [pc, #480]	; (8005518 <HAL_DMA_IRQHandler+0xcdc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d009      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a77      	ldr	r2, [pc, #476]	; (800551c <HAL_DMA_IRQHandler+0xce0>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d004      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a75      	ldr	r2, [pc, #468]	; (8005520 <HAL_DMA_IRQHandler+0xce4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d108      	bne.n	8005360 <HAL_DMA_IRQHandler+0xb24>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0208 	bic.w	r2, r2, #8
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	e007      	b.n	8005370 <HAL_DMA_IRQHandler+0xb34>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0204 	bic.w	r2, r2, #4
 800536e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8165 	beq.w	8005644 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005382:	e15f      	b.n	8005644 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005388:	f003 031f 	and.w	r3, r3, #31
 800538c:	2202      	movs	r2, #2
 800538e:	409a      	lsls	r2, r3
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	4013      	ands	r3, r2
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 80c5 	beq.w	8005524 <HAL_DMA_IRQHandler+0xce8>
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 80bf 	beq.w	8005524 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053aa:	f003 031f 	and.w	r3, r3, #31
 80053ae:	2202      	movs	r2, #2
 80053b0:	409a      	lsls	r2, r3
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d018      	beq.n	80053f2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d109      	bne.n	80053de <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 813a 	beq.w	8005648 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053dc:	e134      	b.n	8005648 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 8130 	beq.w	8005648 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053f0:	e12a      	b.n	8005648 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f003 0320 	and.w	r3, r3, #32
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d168      	bne.n	80054ce <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a38      	ldr	r2, [pc, #224]	; (80054e4 <HAL_DMA_IRQHandler+0xca8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d04a      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a37      	ldr	r2, [pc, #220]	; (80054e8 <HAL_DMA_IRQHandler+0xcac>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d045      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a35      	ldr	r2, [pc, #212]	; (80054ec <HAL_DMA_IRQHandler+0xcb0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d040      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a34      	ldr	r2, [pc, #208]	; (80054f0 <HAL_DMA_IRQHandler+0xcb4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d03b      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a32      	ldr	r2, [pc, #200]	; (80054f4 <HAL_DMA_IRQHandler+0xcb8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d036      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a31      	ldr	r2, [pc, #196]	; (80054f8 <HAL_DMA_IRQHandler+0xcbc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d031      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a2f      	ldr	r2, [pc, #188]	; (80054fc <HAL_DMA_IRQHandler+0xcc0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d02c      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a2e      	ldr	r2, [pc, #184]	; (8005500 <HAL_DMA_IRQHandler+0xcc4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d027      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a2c      	ldr	r2, [pc, #176]	; (8005504 <HAL_DMA_IRQHandler+0xcc8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d022      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a2b      	ldr	r2, [pc, #172]	; (8005508 <HAL_DMA_IRQHandler+0xccc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d01d      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a29      	ldr	r2, [pc, #164]	; (800550c <HAL_DMA_IRQHandler+0xcd0>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d018      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a28      	ldr	r2, [pc, #160]	; (8005510 <HAL_DMA_IRQHandler+0xcd4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d013      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a26      	ldr	r2, [pc, #152]	; (8005514 <HAL_DMA_IRQHandler+0xcd8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00e      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a25      	ldr	r2, [pc, #148]	; (8005518 <HAL_DMA_IRQHandler+0xcdc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d009      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a23      	ldr	r2, [pc, #140]	; (800551c <HAL_DMA_IRQHandler+0xce0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d004      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a22      	ldr	r2, [pc, #136]	; (8005520 <HAL_DMA_IRQHandler+0xce4>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d108      	bne.n	80054ae <HAL_DMA_IRQHandler+0xc72>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0214 	bic.w	r2, r2, #20
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	e007      	b.n	80054be <HAL_DMA_IRQHandler+0xc82>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 020a 	bic.w	r2, r2, #10
 80054bc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 80b8 	beq.w	8005648 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054e0:	e0b2      	b.n	8005648 <HAL_DMA_IRQHandler+0xe0c>
 80054e2:	bf00      	nop
 80054e4:	40020010 	.word	0x40020010
 80054e8:	40020028 	.word	0x40020028
 80054ec:	40020040 	.word	0x40020040
 80054f0:	40020058 	.word	0x40020058
 80054f4:	40020070 	.word	0x40020070
 80054f8:	40020088 	.word	0x40020088
 80054fc:	400200a0 	.word	0x400200a0
 8005500:	400200b8 	.word	0x400200b8
 8005504:	40020410 	.word	0x40020410
 8005508:	40020428 	.word	0x40020428
 800550c:	40020440 	.word	0x40020440
 8005510:	40020458 	.word	0x40020458
 8005514:	40020470 	.word	0x40020470
 8005518:	40020488 	.word	0x40020488
 800551c:	400204a0 	.word	0x400204a0
 8005520:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005528:	f003 031f 	and.w	r3, r3, #31
 800552c:	2208      	movs	r2, #8
 800552e:	409a      	lsls	r2, r3
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 8088 	beq.w	800564a <HAL_DMA_IRQHandler+0xe0e>
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 8082 	beq.w	800564a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a41      	ldr	r2, [pc, #260]	; (8005650 <HAL_DMA_IRQHandler+0xe14>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d04a      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a3f      	ldr	r2, [pc, #252]	; (8005654 <HAL_DMA_IRQHandler+0xe18>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d045      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a3e      	ldr	r2, [pc, #248]	; (8005658 <HAL_DMA_IRQHandler+0xe1c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d040      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a3c      	ldr	r2, [pc, #240]	; (800565c <HAL_DMA_IRQHandler+0xe20>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d03b      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a3b      	ldr	r2, [pc, #236]	; (8005660 <HAL_DMA_IRQHandler+0xe24>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d036      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a39      	ldr	r2, [pc, #228]	; (8005664 <HAL_DMA_IRQHandler+0xe28>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d031      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a38      	ldr	r2, [pc, #224]	; (8005668 <HAL_DMA_IRQHandler+0xe2c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d02c      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a36      	ldr	r2, [pc, #216]	; (800566c <HAL_DMA_IRQHandler+0xe30>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d027      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a35      	ldr	r2, [pc, #212]	; (8005670 <HAL_DMA_IRQHandler+0xe34>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d022      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a33      	ldr	r2, [pc, #204]	; (8005674 <HAL_DMA_IRQHandler+0xe38>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d01d      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a32      	ldr	r2, [pc, #200]	; (8005678 <HAL_DMA_IRQHandler+0xe3c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d018      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a30      	ldr	r2, [pc, #192]	; (800567c <HAL_DMA_IRQHandler+0xe40>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a2f      	ldr	r2, [pc, #188]	; (8005680 <HAL_DMA_IRQHandler+0xe44>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00e      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a2d      	ldr	r2, [pc, #180]	; (8005684 <HAL_DMA_IRQHandler+0xe48>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d009      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a2c      	ldr	r2, [pc, #176]	; (8005688 <HAL_DMA_IRQHandler+0xe4c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d004      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a2a      	ldr	r2, [pc, #168]	; (800568c <HAL_DMA_IRQHandler+0xe50>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d108      	bne.n	80055f8 <HAL_DMA_IRQHandler+0xdbc>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 021c 	bic.w	r2, r2, #28
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	e007      	b.n	8005608 <HAL_DMA_IRQHandler+0xdcc>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 020e 	bic.w	r2, r2, #14
 8005606:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800560c:	f003 031f 	and.w	r3, r3, #31
 8005610:	2201      	movs	r2, #1
 8005612:	409a      	lsls	r2, r3
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005632:	2b00      	cmp	r3, #0
 8005634:	d009      	beq.n	800564a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	4798      	blx	r3
 800563e:	e004      	b.n	800564a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005640:	bf00      	nop
 8005642:	e002      	b.n	800564a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005644:	bf00      	nop
 8005646:	e000      	b.n	800564a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005648:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800564a:	3728      	adds	r7, #40	; 0x28
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40020010 	.word	0x40020010
 8005654:	40020028 	.word	0x40020028
 8005658:	40020040 	.word	0x40020040
 800565c:	40020058 	.word	0x40020058
 8005660:	40020070 	.word	0x40020070
 8005664:	40020088 	.word	0x40020088
 8005668:	400200a0 	.word	0x400200a0
 800566c:	400200b8 	.word	0x400200b8
 8005670:	40020410 	.word	0x40020410
 8005674:	40020428 	.word	0x40020428
 8005678:	40020440 	.word	0x40020440
 800567c:	40020458 	.word	0x40020458
 8005680:	40020470 	.word	0x40020470
 8005684:	40020488 	.word	0x40020488
 8005688:	400204a0 	.word	0x400204a0
 800568c:	400204b8 	.word	0x400204b8

08005690 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a84      	ldr	r2, [pc, #528]	; (80058c0 <DMA_SetConfig+0x230>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d072      	beq.n	800579a <DMA_SetConfig+0x10a>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a82      	ldr	r2, [pc, #520]	; (80058c4 <DMA_SetConfig+0x234>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d06d      	beq.n	800579a <DMA_SetConfig+0x10a>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a81      	ldr	r2, [pc, #516]	; (80058c8 <DMA_SetConfig+0x238>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d068      	beq.n	800579a <DMA_SetConfig+0x10a>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a7f      	ldr	r2, [pc, #508]	; (80058cc <DMA_SetConfig+0x23c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d063      	beq.n	800579a <DMA_SetConfig+0x10a>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a7e      	ldr	r2, [pc, #504]	; (80058d0 <DMA_SetConfig+0x240>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d05e      	beq.n	800579a <DMA_SetConfig+0x10a>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a7c      	ldr	r2, [pc, #496]	; (80058d4 <DMA_SetConfig+0x244>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d059      	beq.n	800579a <DMA_SetConfig+0x10a>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a7b      	ldr	r2, [pc, #492]	; (80058d8 <DMA_SetConfig+0x248>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d054      	beq.n	800579a <DMA_SetConfig+0x10a>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a79      	ldr	r2, [pc, #484]	; (80058dc <DMA_SetConfig+0x24c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d04f      	beq.n	800579a <DMA_SetConfig+0x10a>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a78      	ldr	r2, [pc, #480]	; (80058e0 <DMA_SetConfig+0x250>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d04a      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a76      	ldr	r2, [pc, #472]	; (80058e4 <DMA_SetConfig+0x254>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d045      	beq.n	800579a <DMA_SetConfig+0x10a>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a75      	ldr	r2, [pc, #468]	; (80058e8 <DMA_SetConfig+0x258>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d040      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a73      	ldr	r2, [pc, #460]	; (80058ec <DMA_SetConfig+0x25c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d03b      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a72      	ldr	r2, [pc, #456]	; (80058f0 <DMA_SetConfig+0x260>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d036      	beq.n	800579a <DMA_SetConfig+0x10a>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a70      	ldr	r2, [pc, #448]	; (80058f4 <DMA_SetConfig+0x264>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d031      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a6f      	ldr	r2, [pc, #444]	; (80058f8 <DMA_SetConfig+0x268>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d02c      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a6d      	ldr	r2, [pc, #436]	; (80058fc <DMA_SetConfig+0x26c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d027      	beq.n	800579a <DMA_SetConfig+0x10a>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a6c      	ldr	r2, [pc, #432]	; (8005900 <DMA_SetConfig+0x270>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d022      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a6a      	ldr	r2, [pc, #424]	; (8005904 <DMA_SetConfig+0x274>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d01d      	beq.n	800579a <DMA_SetConfig+0x10a>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a69      	ldr	r2, [pc, #420]	; (8005908 <DMA_SetConfig+0x278>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d018      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a67      	ldr	r2, [pc, #412]	; (800590c <DMA_SetConfig+0x27c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d013      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a66      	ldr	r2, [pc, #408]	; (8005910 <DMA_SetConfig+0x280>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00e      	beq.n	800579a <DMA_SetConfig+0x10a>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a64      	ldr	r2, [pc, #400]	; (8005914 <DMA_SetConfig+0x284>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d009      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a63      	ldr	r2, [pc, #396]	; (8005918 <DMA_SetConfig+0x288>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d004      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a61      	ldr	r2, [pc, #388]	; (800591c <DMA_SetConfig+0x28c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d101      	bne.n	800579e <DMA_SetConfig+0x10e>
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <DMA_SetConfig+0x110>
 800579e:	2300      	movs	r3, #0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00d      	beq.n	80057c0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80057ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d004      	beq.n	80057c0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057be:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a3e      	ldr	r2, [pc, #248]	; (80058c0 <DMA_SetConfig+0x230>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d04a      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a3d      	ldr	r2, [pc, #244]	; (80058c4 <DMA_SetConfig+0x234>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d045      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a3b      	ldr	r2, [pc, #236]	; (80058c8 <DMA_SetConfig+0x238>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d040      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a3a      	ldr	r2, [pc, #232]	; (80058cc <DMA_SetConfig+0x23c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d03b      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a38      	ldr	r2, [pc, #224]	; (80058d0 <DMA_SetConfig+0x240>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d036      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a37      	ldr	r2, [pc, #220]	; (80058d4 <DMA_SetConfig+0x244>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d031      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a35      	ldr	r2, [pc, #212]	; (80058d8 <DMA_SetConfig+0x248>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d02c      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a34      	ldr	r2, [pc, #208]	; (80058dc <DMA_SetConfig+0x24c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d027      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a32      	ldr	r2, [pc, #200]	; (80058e0 <DMA_SetConfig+0x250>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d022      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a31      	ldr	r2, [pc, #196]	; (80058e4 <DMA_SetConfig+0x254>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d01d      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a2f      	ldr	r2, [pc, #188]	; (80058e8 <DMA_SetConfig+0x258>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d018      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a2e      	ldr	r2, [pc, #184]	; (80058ec <DMA_SetConfig+0x25c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d013      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a2c      	ldr	r2, [pc, #176]	; (80058f0 <DMA_SetConfig+0x260>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00e      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a2b      	ldr	r2, [pc, #172]	; (80058f4 <DMA_SetConfig+0x264>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d009      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a29      	ldr	r2, [pc, #164]	; (80058f8 <DMA_SetConfig+0x268>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d004      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a28      	ldr	r2, [pc, #160]	; (80058fc <DMA_SetConfig+0x26c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d101      	bne.n	8005864 <DMA_SetConfig+0x1d4>
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <DMA_SetConfig+0x1d6>
 8005864:	2300      	movs	r3, #0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d05a      	beq.n	8005920 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	223f      	movs	r2, #63	; 0x3f
 8005874:	409a      	lsls	r2, r3
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005888:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b40      	cmp	r3, #64	; 0x40
 8005898:	d108      	bne.n	80058ac <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80058aa:	e087      	b.n	80059bc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	60da      	str	r2, [r3, #12]
}
 80058bc:	e07e      	b.n	80059bc <DMA_SetConfig+0x32c>
 80058be:	bf00      	nop
 80058c0:	40020010 	.word	0x40020010
 80058c4:	40020028 	.word	0x40020028
 80058c8:	40020040 	.word	0x40020040
 80058cc:	40020058 	.word	0x40020058
 80058d0:	40020070 	.word	0x40020070
 80058d4:	40020088 	.word	0x40020088
 80058d8:	400200a0 	.word	0x400200a0
 80058dc:	400200b8 	.word	0x400200b8
 80058e0:	40020410 	.word	0x40020410
 80058e4:	40020428 	.word	0x40020428
 80058e8:	40020440 	.word	0x40020440
 80058ec:	40020458 	.word	0x40020458
 80058f0:	40020470 	.word	0x40020470
 80058f4:	40020488 	.word	0x40020488
 80058f8:	400204a0 	.word	0x400204a0
 80058fc:	400204b8 	.word	0x400204b8
 8005900:	58025408 	.word	0x58025408
 8005904:	5802541c 	.word	0x5802541c
 8005908:	58025430 	.word	0x58025430
 800590c:	58025444 	.word	0x58025444
 8005910:	58025458 	.word	0x58025458
 8005914:	5802546c 	.word	0x5802546c
 8005918:	58025480 	.word	0x58025480
 800591c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a28      	ldr	r2, [pc, #160]	; (80059c8 <DMA_SetConfig+0x338>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d022      	beq.n	8005970 <DMA_SetConfig+0x2e0>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a27      	ldr	r2, [pc, #156]	; (80059cc <DMA_SetConfig+0x33c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d01d      	beq.n	8005970 <DMA_SetConfig+0x2e0>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a25      	ldr	r2, [pc, #148]	; (80059d0 <DMA_SetConfig+0x340>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d018      	beq.n	8005970 <DMA_SetConfig+0x2e0>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a24      	ldr	r2, [pc, #144]	; (80059d4 <DMA_SetConfig+0x344>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d013      	beq.n	8005970 <DMA_SetConfig+0x2e0>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a22      	ldr	r2, [pc, #136]	; (80059d8 <DMA_SetConfig+0x348>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00e      	beq.n	8005970 <DMA_SetConfig+0x2e0>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a21      	ldr	r2, [pc, #132]	; (80059dc <DMA_SetConfig+0x34c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d009      	beq.n	8005970 <DMA_SetConfig+0x2e0>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a1f      	ldr	r2, [pc, #124]	; (80059e0 <DMA_SetConfig+0x350>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d004      	beq.n	8005970 <DMA_SetConfig+0x2e0>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a1e      	ldr	r2, [pc, #120]	; (80059e4 <DMA_SetConfig+0x354>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d101      	bne.n	8005974 <DMA_SetConfig+0x2e4>
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <DMA_SetConfig+0x2e6>
 8005974:	2300      	movs	r3, #0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d020      	beq.n	80059bc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800597e:	f003 031f 	and.w	r3, r3, #31
 8005982:	2201      	movs	r2, #1
 8005984:	409a      	lsls	r2, r3
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2b40      	cmp	r3, #64	; 0x40
 8005998:	d108      	bne.n	80059ac <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	60da      	str	r2, [r3, #12]
}
 80059aa:	e007      	b.n	80059bc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	60da      	str	r2, [r3, #12]
}
 80059bc:	bf00      	nop
 80059be:	371c      	adds	r7, #28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	58025408 	.word	0x58025408
 80059cc:	5802541c 	.word	0x5802541c
 80059d0:	58025430 	.word	0x58025430
 80059d4:	58025444 	.word	0x58025444
 80059d8:	58025458 	.word	0x58025458
 80059dc:	5802546c 	.word	0x5802546c
 80059e0:	58025480 	.word	0x58025480
 80059e4:	58025494 	.word	0x58025494

080059e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a42      	ldr	r2, [pc, #264]	; (8005b00 <DMA_CalcBaseAndBitshift+0x118>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d04a      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a41      	ldr	r2, [pc, #260]	; (8005b04 <DMA_CalcBaseAndBitshift+0x11c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d045      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a3f      	ldr	r2, [pc, #252]	; (8005b08 <DMA_CalcBaseAndBitshift+0x120>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d040      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a3e      	ldr	r2, [pc, #248]	; (8005b0c <DMA_CalcBaseAndBitshift+0x124>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d03b      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a3c      	ldr	r2, [pc, #240]	; (8005b10 <DMA_CalcBaseAndBitshift+0x128>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d036      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a3b      	ldr	r2, [pc, #236]	; (8005b14 <DMA_CalcBaseAndBitshift+0x12c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d031      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a39      	ldr	r2, [pc, #228]	; (8005b18 <DMA_CalcBaseAndBitshift+0x130>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d02c      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a38      	ldr	r2, [pc, #224]	; (8005b1c <DMA_CalcBaseAndBitshift+0x134>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d027      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a36      	ldr	r2, [pc, #216]	; (8005b20 <DMA_CalcBaseAndBitshift+0x138>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d022      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a35      	ldr	r2, [pc, #212]	; (8005b24 <DMA_CalcBaseAndBitshift+0x13c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d01d      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a33      	ldr	r2, [pc, #204]	; (8005b28 <DMA_CalcBaseAndBitshift+0x140>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d018      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a32      	ldr	r2, [pc, #200]	; (8005b2c <DMA_CalcBaseAndBitshift+0x144>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d013      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a30      	ldr	r2, [pc, #192]	; (8005b30 <DMA_CalcBaseAndBitshift+0x148>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00e      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a2f      	ldr	r2, [pc, #188]	; (8005b34 <DMA_CalcBaseAndBitshift+0x14c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d009      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a2d      	ldr	r2, [pc, #180]	; (8005b38 <DMA_CalcBaseAndBitshift+0x150>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d004      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a2c      	ldr	r2, [pc, #176]	; (8005b3c <DMA_CalcBaseAndBitshift+0x154>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d101      	bne.n	8005a94 <DMA_CalcBaseAndBitshift+0xac>
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <DMA_CalcBaseAndBitshift+0xae>
 8005a94:	2300      	movs	r3, #0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d024      	beq.n	8005ae4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	3b10      	subs	r3, #16
 8005aa2:	4a27      	ldr	r2, [pc, #156]	; (8005b40 <DMA_CalcBaseAndBitshift+0x158>)
 8005aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa8:	091b      	lsrs	r3, r3, #4
 8005aaa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f003 0307 	and.w	r3, r3, #7
 8005ab2:	4a24      	ldr	r2, [pc, #144]	; (8005b44 <DMA_CalcBaseAndBitshift+0x15c>)
 8005ab4:	5cd3      	ldrb	r3, [r2, r3]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d908      	bls.n	8005ad4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	4b1f      	ldr	r3, [pc, #124]	; (8005b48 <DMA_CalcBaseAndBitshift+0x160>)
 8005aca:	4013      	ands	r3, r2
 8005acc:	1d1a      	adds	r2, r3, #4
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	659a      	str	r2, [r3, #88]	; 0x58
 8005ad2:	e00d      	b.n	8005af0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	4b1b      	ldr	r3, [pc, #108]	; (8005b48 <DMA_CalcBaseAndBitshift+0x160>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ae2:	e005      	b.n	8005af0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	40020010 	.word	0x40020010
 8005b04:	40020028 	.word	0x40020028
 8005b08:	40020040 	.word	0x40020040
 8005b0c:	40020058 	.word	0x40020058
 8005b10:	40020070 	.word	0x40020070
 8005b14:	40020088 	.word	0x40020088
 8005b18:	400200a0 	.word	0x400200a0
 8005b1c:	400200b8 	.word	0x400200b8
 8005b20:	40020410 	.word	0x40020410
 8005b24:	40020428 	.word	0x40020428
 8005b28:	40020440 	.word	0x40020440
 8005b2c:	40020458 	.word	0x40020458
 8005b30:	40020470 	.word	0x40020470
 8005b34:	40020488 	.word	0x40020488
 8005b38:	400204a0 	.word	0x400204a0
 8005b3c:	400204b8 	.word	0x400204b8
 8005b40:	aaaaaaab 	.word	0xaaaaaaab
 8005b44:	0800cd8c 	.word	0x0800cd8c
 8005b48:	fffffc00 	.word	0xfffffc00

08005b4c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d120      	bne.n	8005ba2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d858      	bhi.n	8005c1a <DMA_CheckFifoParam+0xce>
 8005b68:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <DMA_CheckFifoParam+0x24>)
 8005b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6e:	bf00      	nop
 8005b70:	08005b81 	.word	0x08005b81
 8005b74:	08005b93 	.word	0x08005b93
 8005b78:	08005b81 	.word	0x08005b81
 8005b7c:	08005c1b 	.word	0x08005c1b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d048      	beq.n	8005c1e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b90:	e045      	b.n	8005c1e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b9a:	d142      	bne.n	8005c22 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ba0:	e03f      	b.n	8005c22 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005baa:	d123      	bne.n	8005bf4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d838      	bhi.n	8005c26 <DMA_CheckFifoParam+0xda>
 8005bb4:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <DMA_CheckFifoParam+0x70>)
 8005bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bba:	bf00      	nop
 8005bbc:	08005bcd 	.word	0x08005bcd
 8005bc0:	08005bd3 	.word	0x08005bd3
 8005bc4:	08005bcd 	.word	0x08005bcd
 8005bc8:	08005be5 	.word	0x08005be5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	73fb      	strb	r3, [r7, #15]
        break;
 8005bd0:	e030      	b.n	8005c34 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d025      	beq.n	8005c2a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005be2:	e022      	b.n	8005c2a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bec:	d11f      	bne.n	8005c2e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bf2:	e01c      	b.n	8005c2e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d902      	bls.n	8005c02 <DMA_CheckFifoParam+0xb6>
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d003      	beq.n	8005c08 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005c00:	e018      	b.n	8005c34 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	73fb      	strb	r3, [r7, #15]
        break;
 8005c06:	e015      	b.n	8005c34 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00e      	beq.n	8005c32 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	73fb      	strb	r3, [r7, #15]
    break;
 8005c18:	e00b      	b.n	8005c32 <DMA_CheckFifoParam+0xe6>
        break;
 8005c1a:	bf00      	nop
 8005c1c:	e00a      	b.n	8005c34 <DMA_CheckFifoParam+0xe8>
        break;
 8005c1e:	bf00      	nop
 8005c20:	e008      	b.n	8005c34 <DMA_CheckFifoParam+0xe8>
        break;
 8005c22:	bf00      	nop
 8005c24:	e006      	b.n	8005c34 <DMA_CheckFifoParam+0xe8>
        break;
 8005c26:	bf00      	nop
 8005c28:	e004      	b.n	8005c34 <DMA_CheckFifoParam+0xe8>
        break;
 8005c2a:	bf00      	nop
 8005c2c:	e002      	b.n	8005c34 <DMA_CheckFifoParam+0xe8>
        break;
 8005c2e:	bf00      	nop
 8005c30:	e000      	b.n	8005c34 <DMA_CheckFifoParam+0xe8>
    break;
 8005c32:	bf00      	nop
    }
  }

  return status;
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop

08005c44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a38      	ldr	r2, [pc, #224]	; (8005d38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d022      	beq.n	8005ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a36      	ldr	r2, [pc, #216]	; (8005d3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d01d      	beq.n	8005ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a35      	ldr	r2, [pc, #212]	; (8005d40 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d018      	beq.n	8005ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a33      	ldr	r2, [pc, #204]	; (8005d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d013      	beq.n	8005ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a32      	ldr	r2, [pc, #200]	; (8005d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00e      	beq.n	8005ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a30      	ldr	r2, [pc, #192]	; (8005d4c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d009      	beq.n	8005ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a2f      	ldr	r2, [pc, #188]	; (8005d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d004      	beq.n	8005ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a2d      	ldr	r2, [pc, #180]	; (8005d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d101      	bne.n	8005ca6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d01a      	beq.n	8005ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	3b08      	subs	r3, #8
 8005cb4:	4a28      	ldr	r2, [pc, #160]	; (8005d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cba:	091b      	lsrs	r3, r3, #4
 8005cbc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4b26      	ldr	r3, [pc, #152]	; (8005d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a24      	ldr	r2, [pc, #144]	; (8005d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005cd0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f003 031f 	and.w	r3, r3, #31
 8005cd8:	2201      	movs	r2, #1
 8005cda:	409a      	lsls	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ce0:	e024      	b.n	8005d2c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	3b10      	subs	r3, #16
 8005cea:	4a1e      	ldr	r2, [pc, #120]	; (8005d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005cec:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf0:	091b      	lsrs	r3, r3, #4
 8005cf2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	4a1c      	ldr	r2, [pc, #112]	; (8005d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d806      	bhi.n	8005d0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4a1b      	ldr	r2, [pc, #108]	; (8005d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d902      	bls.n	8005d0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3308      	adds	r3, #8
 8005d08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4b18      	ldr	r3, [pc, #96]	; (8005d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	461a      	mov	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a16      	ldr	r2, [pc, #88]	; (8005d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005d1c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f003 031f 	and.w	r3, r3, #31
 8005d24:	2201      	movs	r2, #1
 8005d26:	409a      	lsls	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d2c:	bf00      	nop
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	58025408 	.word	0x58025408
 8005d3c:	5802541c 	.word	0x5802541c
 8005d40:	58025430 	.word	0x58025430
 8005d44:	58025444 	.word	0x58025444
 8005d48:	58025458 	.word	0x58025458
 8005d4c:	5802546c 	.word	0x5802546c
 8005d50:	58025480 	.word	0x58025480
 8005d54:	58025494 	.word	0x58025494
 8005d58:	cccccccd 	.word	0xcccccccd
 8005d5c:	16009600 	.word	0x16009600
 8005d60:	58025880 	.word	0x58025880
 8005d64:	aaaaaaab 	.word	0xaaaaaaab
 8005d68:	400204b8 	.word	0x400204b8
 8005d6c:	4002040f 	.word	0x4002040f
 8005d70:	10008200 	.word	0x10008200
 8005d74:	40020880 	.word	0x40020880

08005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d04a      	beq.n	8005e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d847      	bhi.n	8005e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a25      	ldr	r2, [pc, #148]	; (8005e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d022      	beq.n	8005de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a24      	ldr	r2, [pc, #144]	; (8005e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d01d      	beq.n	8005de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a22      	ldr	r2, [pc, #136]	; (8005e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d018      	beq.n	8005de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a21      	ldr	r2, [pc, #132]	; (8005e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d013      	beq.n	8005de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a1f      	ldr	r2, [pc, #124]	; (8005e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00e      	beq.n	8005de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a1e      	ldr	r2, [pc, #120]	; (8005e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d009      	beq.n	8005de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1c      	ldr	r2, [pc, #112]	; (8005e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d004      	beq.n	8005de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1b      	ldr	r2, [pc, #108]	; (8005e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d101      	bne.n	8005de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005de8:	2300      	movs	r3, #0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4b17      	ldr	r3, [pc, #92]	; (8005e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	461a      	mov	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a15      	ldr	r2, [pc, #84]	; (8005e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005e00:	671a      	str	r2, [r3, #112]	; 0x70
 8005e02:	e009      	b.n	8005e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4b14      	ldr	r3, [pc, #80]	; (8005e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005e08:	4413      	add	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a11      	ldr	r2, [pc, #68]	; (8005e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005e16:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	409a      	lsls	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005e24:	bf00      	nop
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	58025408 	.word	0x58025408
 8005e34:	5802541c 	.word	0x5802541c
 8005e38:	58025430 	.word	0x58025430
 8005e3c:	58025444 	.word	0x58025444
 8005e40:	58025458 	.word	0x58025458
 8005e44:	5802546c 	.word	0x5802546c
 8005e48:	58025480 	.word	0x58025480
 8005e4c:	58025494 	.word	0x58025494
 8005e50:	1600963f 	.word	0x1600963f
 8005e54:	58025940 	.word	0x58025940
 8005e58:	1000823f 	.word	0x1000823f
 8005e5c:	40020940 	.word	0x40020940

08005e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b089      	sub	sp, #36	; 0x24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e6e:	4b89      	ldr	r3, [pc, #548]	; (8006094 <HAL_GPIO_Init+0x234>)
 8005e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e72:	e194      	b.n	800619e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	2101      	movs	r1, #1
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e80:	4013      	ands	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 8186 	beq.w	8006198 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d00b      	beq.n	8005eac <HAL_GPIO_Init+0x4c>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d007      	beq.n	8005eac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ea0:	2b11      	cmp	r3, #17
 8005ea2:	d003      	beq.n	8005eac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b12      	cmp	r3, #18
 8005eaa:	d130      	bne.n	8005f0e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	2203      	movs	r2, #3
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	43db      	mvns	r3, r3
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	091b      	lsrs	r3, r3, #4
 8005ef8:	f003 0201 	and.w	r2, r3, #1
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	2203      	movs	r2, #3
 8005f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1e:	43db      	mvns	r3, r3
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	4013      	ands	r3, r2
 8005f24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d003      	beq.n	8005f4e <HAL_GPIO_Init+0xee>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	2b12      	cmp	r3, #18
 8005f4c:	d123      	bne.n	8005f96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	08da      	lsrs	r2, r3, #3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	3208      	adds	r2, #8
 8005f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	220f      	movs	r2, #15
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	43db      	mvns	r3, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	691a      	ldr	r2, [r3, #16]
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	08da      	lsrs	r2, r3, #3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3208      	adds	r2, #8
 8005f90:	69b9      	ldr	r1, [r7, #24]
 8005f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	2203      	movs	r2, #3
 8005fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa6:	43db      	mvns	r3, r3
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	4013      	ands	r3, r2
 8005fac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f003 0203 	and.w	r2, r3, #3
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 80e0 	beq.w	8006198 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fd8:	4b2f      	ldr	r3, [pc, #188]	; (8006098 <HAL_GPIO_Init+0x238>)
 8005fda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fde:	4a2e      	ldr	r2, [pc, #184]	; (8006098 <HAL_GPIO_Init+0x238>)
 8005fe0:	f043 0302 	orr.w	r3, r3, #2
 8005fe4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005fe8:	4b2b      	ldr	r3, [pc, #172]	; (8006098 <HAL_GPIO_Init+0x238>)
 8005fea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ff6:	4a29      	ldr	r2, [pc, #164]	; (800609c <HAL_GPIO_Init+0x23c>)
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	089b      	lsrs	r3, r3, #2
 8005ffc:	3302      	adds	r3, #2
 8005ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f003 0303 	and.w	r3, r3, #3
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	220f      	movs	r2, #15
 800600e:	fa02 f303 	lsl.w	r3, r2, r3
 8006012:	43db      	mvns	r3, r3
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	4013      	ands	r3, r2
 8006018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a20      	ldr	r2, [pc, #128]	; (80060a0 <HAL_GPIO_Init+0x240>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d052      	beq.n	80060c8 <HAL_GPIO_Init+0x268>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a1f      	ldr	r2, [pc, #124]	; (80060a4 <HAL_GPIO_Init+0x244>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d031      	beq.n	800608e <HAL_GPIO_Init+0x22e>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a1e      	ldr	r2, [pc, #120]	; (80060a8 <HAL_GPIO_Init+0x248>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d02b      	beq.n	800608a <HAL_GPIO_Init+0x22a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a1d      	ldr	r2, [pc, #116]	; (80060ac <HAL_GPIO_Init+0x24c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d025      	beq.n	8006086 <HAL_GPIO_Init+0x226>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a1c      	ldr	r2, [pc, #112]	; (80060b0 <HAL_GPIO_Init+0x250>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d01f      	beq.n	8006082 <HAL_GPIO_Init+0x222>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a1b      	ldr	r2, [pc, #108]	; (80060b4 <HAL_GPIO_Init+0x254>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d019      	beq.n	800607e <HAL_GPIO_Init+0x21e>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a1a      	ldr	r2, [pc, #104]	; (80060b8 <HAL_GPIO_Init+0x258>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d013      	beq.n	800607a <HAL_GPIO_Init+0x21a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a19      	ldr	r2, [pc, #100]	; (80060bc <HAL_GPIO_Init+0x25c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00d      	beq.n	8006076 <HAL_GPIO_Init+0x216>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a18      	ldr	r2, [pc, #96]	; (80060c0 <HAL_GPIO_Init+0x260>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d007      	beq.n	8006072 <HAL_GPIO_Init+0x212>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a17      	ldr	r2, [pc, #92]	; (80060c4 <HAL_GPIO_Init+0x264>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d101      	bne.n	800606e <HAL_GPIO_Init+0x20e>
 800606a:	2309      	movs	r3, #9
 800606c:	e02d      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 800606e:	230a      	movs	r3, #10
 8006070:	e02b      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 8006072:	2308      	movs	r3, #8
 8006074:	e029      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 8006076:	2307      	movs	r3, #7
 8006078:	e027      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 800607a:	2306      	movs	r3, #6
 800607c:	e025      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 800607e:	2305      	movs	r3, #5
 8006080:	e023      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 8006082:	2304      	movs	r3, #4
 8006084:	e021      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 8006086:	2303      	movs	r3, #3
 8006088:	e01f      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 800608a:	2302      	movs	r3, #2
 800608c:	e01d      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 800608e:	2301      	movs	r3, #1
 8006090:	e01b      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 8006092:	bf00      	nop
 8006094:	58000080 	.word	0x58000080
 8006098:	58024400 	.word	0x58024400
 800609c:	58000400 	.word	0x58000400
 80060a0:	58020000 	.word	0x58020000
 80060a4:	58020400 	.word	0x58020400
 80060a8:	58020800 	.word	0x58020800
 80060ac:	58020c00 	.word	0x58020c00
 80060b0:	58021000 	.word	0x58021000
 80060b4:	58021400 	.word	0x58021400
 80060b8:	58021800 	.word	0x58021800
 80060bc:	58021c00 	.word	0x58021c00
 80060c0:	58022000 	.word	0x58022000
 80060c4:	58022400 	.word	0x58022400
 80060c8:	2300      	movs	r3, #0
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	f002 0203 	and.w	r2, r2, #3
 80060d0:	0092      	lsls	r2, r2, #2
 80060d2:	4093      	lsls	r3, r2
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060da:	4938      	ldr	r1, [pc, #224]	; (80061bc <HAL_GPIO_Init+0x35c>)
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	089b      	lsrs	r3, r3, #2
 80060e0:	3302      	adds	r3, #2
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	43db      	mvns	r3, r3
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	4013      	ands	r3, r2
 80060f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	43db      	mvns	r3, r3
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	4013      	ands	r3, r2
 8006120:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800613c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	43db      	mvns	r3, r3
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	4013      	ands	r3, r2
 800614c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	4313      	orrs	r3, r2
 8006160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800616a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	43db      	mvns	r3, r3
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	4013      	ands	r3, r2
 800617a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	4313      	orrs	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006190:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	3301      	adds	r3, #1
 800619c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	fa22 f303 	lsr.w	r3, r2, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f47f ae63 	bne.w	8005e74 <HAL_GPIO_Init+0x14>
  }
}
 80061ae:	bf00      	nop
 80061b0:	3724      	adds	r7, #36	; 0x24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	58000400 	.word	0x58000400

080061c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	807b      	strh	r3, [r7, #2]
 80061cc:	4613      	mov	r3, r2
 80061ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061d0:	787b      	ldrb	r3, [r7, #1]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061d6:	887a      	ldrh	r2, [r7, #2]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80061dc:	e003      	b.n	80061e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80061de:	887b      	ldrh	r3, [r7, #2]
 80061e0:	041a      	lsls	r2, r3, #16
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	619a      	str	r2, [r3, #24]
}
 80061e6:	bf00      	nop
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	460b      	mov	r3, r1
 80061fc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	695a      	ldr	r2, [r3, #20]
 8006202:	887b      	ldrh	r3, [r7, #2]
 8006204:	401a      	ands	r2, r3
 8006206:	887b      	ldrh	r3, [r7, #2]
 8006208:	429a      	cmp	r2, r3
 800620a:	d104      	bne.n	8006216 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800620c:	887b      	ldrh	r3, [r7, #2]
 800620e:	041a      	lsls	r2, r3, #16
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006214:	e002      	b.n	800621c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006216:	887a      	ldrh	r2, [r7, #2]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	619a      	str	r2, [r3, #24]
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006230:	4b19      	ldr	r3, [pc, #100]	; (8006298 <HAL_PWREx_ConfigSupply+0x70>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b04      	cmp	r3, #4
 800623a:	d00a      	beq.n	8006252 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800623c:	4b16      	ldr	r3, [pc, #88]	; (8006298 <HAL_PWREx_ConfigSupply+0x70>)
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	429a      	cmp	r2, r3
 8006248:	d001      	beq.n	800624e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e01f      	b.n	800628e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	e01d      	b.n	800628e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006252:	4b11      	ldr	r3, [pc, #68]	; (8006298 <HAL_PWREx_ConfigSupply+0x70>)
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f023 0207 	bic.w	r2, r3, #7
 800625a:	490f      	ldr	r1, [pc, #60]	; (8006298 <HAL_PWREx_ConfigSupply+0x70>)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4313      	orrs	r3, r2
 8006260:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006262:	f7fb ffff 	bl	8002264 <HAL_GetTick>
 8006266:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006268:	e009      	b.n	800627e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800626a:	f7fb fffb 	bl	8002264 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006278:	d901      	bls.n	800627e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e007      	b.n	800628e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800627e:	4b06      	ldr	r3, [pc, #24]	; (8006298 <HAL_PWREx_ConfigSupply+0x70>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800628a:	d1ee      	bne.n	800626a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	58024800 	.word	0x58024800

0800629c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b08c      	sub	sp, #48	; 0x30
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e3c4      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 8087 	beq.w	80063ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062bc:	4ba2      	ldr	r3, [pc, #648]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062c6:	4ba0      	ldr	r3, [pc, #640]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80062c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80062cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ce:	2b10      	cmp	r3, #16
 80062d0:	d007      	beq.n	80062e2 <HAL_RCC_OscConfig+0x46>
 80062d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d4:	2b18      	cmp	r3, #24
 80062d6:	d110      	bne.n	80062fa <HAL_RCC_OscConfig+0x5e>
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d10b      	bne.n	80062fa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e2:	4b99      	ldr	r3, [pc, #612]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d06c      	beq.n	80063c8 <HAL_RCC_OscConfig+0x12c>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d168      	bne.n	80063c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e39e      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006302:	d106      	bne.n	8006312 <HAL_RCC_OscConfig+0x76>
 8006304:	4b90      	ldr	r3, [pc, #576]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a8f      	ldr	r2, [pc, #572]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 800630a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	e02e      	b.n	8006370 <HAL_RCC_OscConfig+0xd4>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10c      	bne.n	8006334 <HAL_RCC_OscConfig+0x98>
 800631a:	4b8b      	ldr	r3, [pc, #556]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a8a      	ldr	r2, [pc, #552]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006324:	6013      	str	r3, [r2, #0]
 8006326:	4b88      	ldr	r3, [pc, #544]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a87      	ldr	r2, [pc, #540]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 800632c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	e01d      	b.n	8006370 <HAL_RCC_OscConfig+0xd4>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800633c:	d10c      	bne.n	8006358 <HAL_RCC_OscConfig+0xbc>
 800633e:	4b82      	ldr	r3, [pc, #520]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a81      	ldr	r2, [pc, #516]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	4b7f      	ldr	r3, [pc, #508]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a7e      	ldr	r2, [pc, #504]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	e00b      	b.n	8006370 <HAL_RCC_OscConfig+0xd4>
 8006358:	4b7b      	ldr	r3, [pc, #492]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a7a      	ldr	r2, [pc, #488]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 800635e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	4b78      	ldr	r3, [pc, #480]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a77      	ldr	r2, [pc, #476]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 800636a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800636e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d013      	beq.n	80063a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006378:	f7fb ff74 	bl	8002264 <HAL_GetTick>
 800637c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006380:	f7fb ff70 	bl	8002264 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b64      	cmp	r3, #100	; 0x64
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e352      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006392:	4b6d      	ldr	r3, [pc, #436]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0f0      	beq.n	8006380 <HAL_RCC_OscConfig+0xe4>
 800639e:	e014      	b.n	80063ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a0:	f7fb ff60 	bl	8002264 <HAL_GetTick>
 80063a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063a8:	f7fb ff5c 	bl	8002264 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b64      	cmp	r3, #100	; 0x64
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e33e      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063ba:	4b63      	ldr	r3, [pc, #396]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1f0      	bne.n	80063a8 <HAL_RCC_OscConfig+0x10c>
 80063c6:	e000      	b.n	80063ca <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 8092 	beq.w	80064fc <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063d8:	4b5b      	ldr	r3, [pc, #364]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063e2:	4b59      	ldr	r3, [pc, #356]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80063e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d007      	beq.n	80063fe <HAL_RCC_OscConfig+0x162>
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	2b18      	cmp	r3, #24
 80063f2:	d12d      	bne.n	8006450 <HAL_RCC_OscConfig+0x1b4>
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d128      	bne.n	8006450 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063fe:	4b52      	ldr	r3, [pc, #328]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0304 	and.w	r3, r3, #4
 8006406:	2b00      	cmp	r3, #0
 8006408:	d005      	beq.n	8006416 <HAL_RCC_OscConfig+0x17a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e310      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006416:	f7fb ff53 	bl	80022c0 <HAL_GetREVID>
 800641a:	4602      	mov	r2, r0
 800641c:	f241 0303 	movw	r3, #4099	; 0x1003
 8006420:	429a      	cmp	r2, r3
 8006422:	d80a      	bhi.n	800643a <HAL_RCC_OscConfig+0x19e>
 8006424:	4b48      	ldr	r3, [pc, #288]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	031b      	lsls	r3, r3, #12
 8006432:	4945      	ldr	r1, [pc, #276]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006434:	4313      	orrs	r3, r2
 8006436:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006438:	e060      	b.n	80064fc <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800643a:	4b43      	ldr	r3, [pc, #268]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	061b      	lsls	r3, r3, #24
 8006448:	493f      	ldr	r1, [pc, #252]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 800644a:	4313      	orrs	r3, r2
 800644c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800644e:	e055      	b.n	80064fc <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d038      	beq.n	80064ca <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006458:	4b3b      	ldr	r3, [pc, #236]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f023 0219 	bic.w	r2, r3, #25
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	4938      	ldr	r1, [pc, #224]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006466:	4313      	orrs	r3, r2
 8006468:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646a:	f7fb fefb 	bl	8002264 <HAL_GetTick>
 800646e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006470:	e008      	b.n	8006484 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006472:	f7fb fef7 	bl	8002264 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e2d9      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006484:	4b30      	ldr	r3, [pc, #192]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0f0      	beq.n	8006472 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006490:	f7fb ff16 	bl	80022c0 <HAL_GetREVID>
 8006494:	4602      	mov	r2, r0
 8006496:	f241 0303 	movw	r3, #4099	; 0x1003
 800649a:	429a      	cmp	r2, r3
 800649c:	d80a      	bhi.n	80064b4 <HAL_RCC_OscConfig+0x218>
 800649e:	4b2a      	ldr	r3, [pc, #168]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	031b      	lsls	r3, r3, #12
 80064ac:	4926      	ldr	r1, [pc, #152]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	604b      	str	r3, [r1, #4]
 80064b2:	e023      	b.n	80064fc <HAL_RCC_OscConfig+0x260>
 80064b4:	4b24      	ldr	r3, [pc, #144]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	061b      	lsls	r3, r3, #24
 80064c2:	4921      	ldr	r1, [pc, #132]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	604b      	str	r3, [r1, #4]
 80064c8:	e018      	b.n	80064fc <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064ca:	4b1f      	ldr	r3, [pc, #124]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1e      	ldr	r2, [pc, #120]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80064d0:	f023 0301 	bic.w	r3, r3, #1
 80064d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d6:	f7fb fec5 	bl	8002264 <HAL_GetTick>
 80064da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064dc:	e008      	b.n	80064f0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064de:	f7fb fec1 	bl	8002264 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d901      	bls.n	80064f0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e2a3      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064f0:	4b15      	ldr	r3, [pc, #84]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1f0      	bne.n	80064de <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0310 	and.w	r3, r3, #16
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 8091 	beq.w	800662c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800650a:	4b0f      	ldr	r3, [pc, #60]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006512:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006514:	4b0c      	ldr	r3, [pc, #48]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006518:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b08      	cmp	r3, #8
 800651e:	d007      	beq.n	8006530 <HAL_RCC_OscConfig+0x294>
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	2b18      	cmp	r3, #24
 8006524:	d12f      	bne.n	8006586 <HAL_RCC_OscConfig+0x2ea>
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f003 0303 	and.w	r3, r3, #3
 800652c:	2b01      	cmp	r3, #1
 800652e:	d12a      	bne.n	8006586 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006530:	4b05      	ldr	r3, [pc, #20]	; (8006548 <HAL_RCC_OscConfig+0x2ac>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006538:	2b00      	cmp	r3, #0
 800653a:	d007      	beq.n	800654c <HAL_RCC_OscConfig+0x2b0>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	2b80      	cmp	r3, #128	; 0x80
 8006542:	d003      	beq.n	800654c <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e277      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
 8006548:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800654c:	f7fb feb8 	bl	80022c0 <HAL_GetREVID>
 8006550:	4602      	mov	r2, r0
 8006552:	f241 0303 	movw	r3, #4099	; 0x1003
 8006556:	429a      	cmp	r2, r3
 8006558:	d80a      	bhi.n	8006570 <HAL_RCC_OscConfig+0x2d4>
 800655a:	4ba2      	ldr	r3, [pc, #648]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	069b      	lsls	r3, r3, #26
 8006568:	499e      	ldr	r1, [pc, #632]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 800656a:	4313      	orrs	r3, r2
 800656c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800656e:	e05d      	b.n	800662c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006570:	4b9c      	ldr	r3, [pc, #624]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	061b      	lsls	r3, r3, #24
 800657e:	4999      	ldr	r1, [pc, #612]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 8006580:	4313      	orrs	r3, r2
 8006582:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006584:	e052      	b.n	800662c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d035      	beq.n	80065fa <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800658e:	4b95      	ldr	r3, [pc, #596]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a94      	ldr	r2, [pc, #592]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 8006594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800659a:	f7fb fe63 	bl	8002264 <HAL_GetTick>
 800659e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065a0:	e008      	b.n	80065b4 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80065a2:	f7fb fe5f 	bl	8002264 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d901      	bls.n	80065b4 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e241      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065b4:	4b8b      	ldr	r3, [pc, #556]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d0f0      	beq.n	80065a2 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065c0:	f7fb fe7e 	bl	80022c0 <HAL_GetREVID>
 80065c4:	4602      	mov	r2, r0
 80065c6:	f241 0303 	movw	r3, #4099	; 0x1003
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d80a      	bhi.n	80065e4 <HAL_RCC_OscConfig+0x348>
 80065ce:	4b85      	ldr	r3, [pc, #532]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	069b      	lsls	r3, r3, #26
 80065dc:	4981      	ldr	r1, [pc, #516]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	604b      	str	r3, [r1, #4]
 80065e2:	e023      	b.n	800662c <HAL_RCC_OscConfig+0x390>
 80065e4:	4b7f      	ldr	r3, [pc, #508]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	061b      	lsls	r3, r3, #24
 80065f2:	497c      	ldr	r1, [pc, #496]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	60cb      	str	r3, [r1, #12]
 80065f8:	e018      	b.n	800662c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80065fa:	4b7a      	ldr	r3, [pc, #488]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a79      	ldr	r2, [pc, #484]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 8006600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006606:	f7fb fe2d 	bl	8002264 <HAL_GetTick>
 800660a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800660c:	e008      	b.n	8006620 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800660e:	f7fb fe29 	bl	8002264 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d901      	bls.n	8006620 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e20b      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006620:	4b70      	ldr	r3, [pc, #448]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1f0      	bne.n	800660e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0308 	and.w	r3, r3, #8
 8006634:	2b00      	cmp	r3, #0
 8006636:	d036      	beq.n	80066a6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d019      	beq.n	8006674 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006640:	4b68      	ldr	r3, [pc, #416]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 8006642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006644:	4a67      	ldr	r2, [pc, #412]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 8006646:	f043 0301 	orr.w	r3, r3, #1
 800664a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800664c:	f7fb fe0a 	bl	8002264 <HAL_GetTick>
 8006650:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006654:	f7fb fe06 	bl	8002264 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b02      	cmp	r3, #2
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e1e8      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006666:	4b5f      	ldr	r3, [pc, #380]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 8006668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0f0      	beq.n	8006654 <HAL_RCC_OscConfig+0x3b8>
 8006672:	e018      	b.n	80066a6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006674:	4b5b      	ldr	r3, [pc, #364]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 8006676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006678:	4a5a      	ldr	r2, [pc, #360]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 800667a:	f023 0301 	bic.w	r3, r3, #1
 800667e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006680:	f7fb fdf0 	bl	8002264 <HAL_GetTick>
 8006684:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006686:	e008      	b.n	800669a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006688:	f7fb fdec 	bl	8002264 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b02      	cmp	r3, #2
 8006694:	d901      	bls.n	800669a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e1ce      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800669a:	4b52      	ldr	r3, [pc, #328]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 800669c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1f0      	bne.n	8006688 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d036      	beq.n	8006720 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d019      	beq.n	80066ee <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066ba:	4b4a      	ldr	r3, [pc, #296]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a49      	ldr	r2, [pc, #292]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 80066c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80066c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80066c6:	f7fb fdcd 	bl	8002264 <HAL_GetTick>
 80066ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066cc:	e008      	b.n	80066e0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80066ce:	f7fb fdc9 	bl	8002264 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d901      	bls.n	80066e0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e1ab      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066e0:	4b40      	ldr	r3, [pc, #256]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d0f0      	beq.n	80066ce <HAL_RCC_OscConfig+0x432>
 80066ec:	e018      	b.n	8006720 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066ee:	4b3d      	ldr	r3, [pc, #244]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a3c      	ldr	r2, [pc, #240]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 80066f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80066fa:	f7fb fdb3 	bl	8002264 <HAL_GetTick>
 80066fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006702:	f7fb fdaf 	bl	8002264 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e191      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006714:	4b33      	ldr	r3, [pc, #204]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1f0      	bne.n	8006702 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 8086 	beq.w	800683a <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800672e:	4b2e      	ldr	r3, [pc, #184]	; (80067e8 <HAL_RCC_OscConfig+0x54c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a2d      	ldr	r2, [pc, #180]	; (80067e8 <HAL_RCC_OscConfig+0x54c>)
 8006734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006738:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800673a:	f7fb fd93 	bl	8002264 <HAL_GetTick>
 800673e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006740:	e008      	b.n	8006754 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006742:	f7fb fd8f 	bl	8002264 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b64      	cmp	r3, #100	; 0x64
 800674e:	d901      	bls.n	8006754 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e171      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006754:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <HAL_RCC_OscConfig+0x54c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800675c:	2b00      	cmp	r3, #0
 800675e:	d0f0      	beq.n	8006742 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d106      	bne.n	8006776 <HAL_RCC_OscConfig+0x4da>
 8006768:	4b1e      	ldr	r3, [pc, #120]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 800676a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676c:	4a1d      	ldr	r2, [pc, #116]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 800676e:	f043 0301 	orr.w	r3, r3, #1
 8006772:	6713      	str	r3, [r2, #112]	; 0x70
 8006774:	e02d      	b.n	80067d2 <HAL_RCC_OscConfig+0x536>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10c      	bne.n	8006798 <HAL_RCC_OscConfig+0x4fc>
 800677e:	4b19      	ldr	r3, [pc, #100]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 8006780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006782:	4a18      	ldr	r2, [pc, #96]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 8006784:	f023 0301 	bic.w	r3, r3, #1
 8006788:	6713      	str	r3, [r2, #112]	; 0x70
 800678a:	4b16      	ldr	r3, [pc, #88]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 800678c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678e:	4a15      	ldr	r2, [pc, #84]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 8006790:	f023 0304 	bic.w	r3, r3, #4
 8006794:	6713      	str	r3, [r2, #112]	; 0x70
 8006796:	e01c      	b.n	80067d2 <HAL_RCC_OscConfig+0x536>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	2b05      	cmp	r3, #5
 800679e:	d10c      	bne.n	80067ba <HAL_RCC_OscConfig+0x51e>
 80067a0:	4b10      	ldr	r3, [pc, #64]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 80067a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a4:	4a0f      	ldr	r2, [pc, #60]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 80067a6:	f043 0304 	orr.w	r3, r3, #4
 80067aa:	6713      	str	r3, [r2, #112]	; 0x70
 80067ac:	4b0d      	ldr	r3, [pc, #52]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 80067ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b0:	4a0c      	ldr	r2, [pc, #48]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 80067b2:	f043 0301 	orr.w	r3, r3, #1
 80067b6:	6713      	str	r3, [r2, #112]	; 0x70
 80067b8:	e00b      	b.n	80067d2 <HAL_RCC_OscConfig+0x536>
 80067ba:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 80067bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067be:	4a09      	ldr	r2, [pc, #36]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 80067c0:	f023 0301 	bic.w	r3, r3, #1
 80067c4:	6713      	str	r3, [r2, #112]	; 0x70
 80067c6:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 80067c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ca:	4a06      	ldr	r2, [pc, #24]	; (80067e4 <HAL_RCC_OscConfig+0x548>)
 80067cc:	f023 0304 	bic.w	r3, r3, #4
 80067d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d01a      	beq.n	8006810 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067da:	f7fb fd43 	bl	8002264 <HAL_GetTick>
 80067de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067e0:	e00f      	b.n	8006802 <HAL_RCC_OscConfig+0x566>
 80067e2:	bf00      	nop
 80067e4:	58024400 	.word	0x58024400
 80067e8:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067ec:	f7fb fd3a 	bl	8002264 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e11a      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006802:	4b8f      	ldr	r3, [pc, #572]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 8006804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0ee      	beq.n	80067ec <HAL_RCC_OscConfig+0x550>
 800680e:	e014      	b.n	800683a <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006810:	f7fb fd28 	bl	8002264 <HAL_GetTick>
 8006814:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006816:	e00a      	b.n	800682e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006818:	f7fb fd24 	bl	8002264 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	f241 3288 	movw	r2, #5000	; 0x1388
 8006826:	4293      	cmp	r3, r2
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e104      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800682e:	4b84      	ldr	r3, [pc, #528]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 8006830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1ee      	bne.n	8006818 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 80f9 	beq.w	8006a36 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006844:	4b7e      	ldr	r3, [pc, #504]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800684c:	2b18      	cmp	r3, #24
 800684e:	f000 80b4 	beq.w	80069ba <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	2b02      	cmp	r3, #2
 8006858:	f040 8095 	bne.w	8006986 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800685c:	4b78      	ldr	r3, [pc, #480]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a77      	ldr	r2, [pc, #476]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 8006862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006868:	f7fb fcfc 	bl	8002264 <HAL_GetTick>
 800686c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800686e:	e008      	b.n	8006882 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006870:	f7fb fcf8 	bl	8002264 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d901      	bls.n	8006882 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e0da      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006882:	4b6f      	ldr	r3, [pc, #444]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1f0      	bne.n	8006870 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800688e:	4b6c      	ldr	r3, [pc, #432]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 8006890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006892:	4b6c      	ldr	r3, [pc, #432]	; (8006a44 <HAL_RCC_OscConfig+0x7a8>)
 8006894:	4013      	ands	r3, r2
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800689e:	0112      	lsls	r2, r2, #4
 80068a0:	430a      	orrs	r2, r1
 80068a2:	4967      	ldr	r1, [pc, #412]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	628b      	str	r3, [r1, #40]	; 0x28
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ac:	3b01      	subs	r3, #1
 80068ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b6:	3b01      	subs	r3, #1
 80068b8:	025b      	lsls	r3, r3, #9
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	431a      	orrs	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	3b01      	subs	r3, #1
 80068c4:	041b      	lsls	r3, r3, #16
 80068c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80068ca:	431a      	orrs	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d0:	3b01      	subs	r3, #1
 80068d2:	061b      	lsls	r3, r3, #24
 80068d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80068d8:	4959      	ldr	r1, [pc, #356]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80068de:	4b58      	ldr	r3, [pc, #352]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 80068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e2:	4a57      	ldr	r2, [pc, #348]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 80068e4:	f023 0301 	bic.w	r3, r3, #1
 80068e8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80068ea:	4b55      	ldr	r3, [pc, #340]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 80068ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ee:	4b56      	ldr	r3, [pc, #344]	; (8006a48 <HAL_RCC_OscConfig+0x7ac>)
 80068f0:	4013      	ands	r3, r2
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80068f6:	00d2      	lsls	r2, r2, #3
 80068f8:	4951      	ldr	r1, [pc, #324]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80068fe:	4b50      	ldr	r3, [pc, #320]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 8006900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006902:	f023 020c 	bic.w	r2, r3, #12
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	494d      	ldr	r1, [pc, #308]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 800690c:	4313      	orrs	r3, r2
 800690e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006910:	4b4b      	ldr	r3, [pc, #300]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	f023 0202 	bic.w	r2, r3, #2
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691c:	4948      	ldr	r1, [pc, #288]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 800691e:	4313      	orrs	r3, r2
 8006920:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006922:	4b47      	ldr	r3, [pc, #284]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	4a46      	ldr	r2, [pc, #280]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 8006928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800692c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800692e:	4b44      	ldr	r3, [pc, #272]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 8006930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006932:	4a43      	ldr	r2, [pc, #268]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 8006934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006938:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800693a:	4b41      	ldr	r3, [pc, #260]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 800693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693e:	4a40      	ldr	r2, [pc, #256]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 8006940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006944:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006946:	4b3e      	ldr	r3, [pc, #248]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 8006948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694a:	4a3d      	ldr	r2, [pc, #244]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 800694c:	f043 0301 	orr.w	r3, r3, #1
 8006950:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006952:	4b3b      	ldr	r3, [pc, #236]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a3a      	ldr	r2, [pc, #232]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 8006958:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800695c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695e:	f7fb fc81 	bl	8002264 <HAL_GetTick>
 8006962:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006964:	e008      	b.n	8006978 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006966:	f7fb fc7d 	bl	8002264 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e05f      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006978:	4b31      	ldr	r3, [pc, #196]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0f0      	beq.n	8006966 <HAL_RCC_OscConfig+0x6ca>
 8006984:	e057      	b.n	8006a36 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006986:	4b2e      	ldr	r3, [pc, #184]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a2d      	ldr	r2, [pc, #180]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 800698c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006992:	f7fb fc67 	bl	8002264 <HAL_GetTick>
 8006996:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800699a:	f7fb fc63 	bl	8002264 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e045      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069ac:	4b24      	ldr	r3, [pc, #144]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1f0      	bne.n	800699a <HAL_RCC_OscConfig+0x6fe>
 80069b8:	e03d      	b.n	8006a36 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80069ba:	4b21      	ldr	r3, [pc, #132]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 80069bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069be:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80069c0:	4b1f      	ldr	r3, [pc, #124]	; (8006a40 <HAL_RCC_OscConfig+0x7a4>)
 80069c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d031      	beq.n	8006a32 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f003 0203 	and.w	r2, r3, #3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069d8:	429a      	cmp	r2, r3
 80069da:	d12a      	bne.n	8006a32 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	091b      	lsrs	r3, r3, #4
 80069e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d122      	bne.n	8006a32 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d11a      	bne.n	8006a32 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	0a5b      	lsrs	r3, r3, #9
 8006a00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a08:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d111      	bne.n	8006a32 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	0c1b      	lsrs	r3, r3, #16
 8006a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d108      	bne.n	8006a32 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	0e1b      	lsrs	r3, r3, #24
 8006a24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d001      	beq.n	8006a36 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e000      	b.n	8006a38 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3730      	adds	r7, #48	; 0x30
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	58024400 	.word	0x58024400
 8006a44:	fffffc0c 	.word	0xfffffc0c
 8006a48:	ffff0007 	.word	0xffff0007

08006a4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e19c      	b.n	8006d9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a60:	4b8a      	ldr	r3, [pc, #552]	; (8006c8c <HAL_RCC_ClockConfig+0x240>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d910      	bls.n	8006a90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a6e:	4b87      	ldr	r3, [pc, #540]	; (8006c8c <HAL_RCC_ClockConfig+0x240>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f023 020f 	bic.w	r2, r3, #15
 8006a76:	4985      	ldr	r1, [pc, #532]	; (8006c8c <HAL_RCC_ClockConfig+0x240>)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a7e:	4b83      	ldr	r3, [pc, #524]	; (8006c8c <HAL_RCC_ClockConfig+0x240>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 030f 	and.w	r3, r3, #15
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d001      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e184      	b.n	8006d9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d010      	beq.n	8006abe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691a      	ldr	r2, [r3, #16]
 8006aa0:	4b7b      	ldr	r3, [pc, #492]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d908      	bls.n	8006abe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006aac:	4b78      	ldr	r3, [pc, #480]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	4975      	ldr	r1, [pc, #468]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d010      	beq.n	8006aec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	695a      	ldr	r2, [r3, #20]
 8006ace:	4b70      	ldr	r3, [pc, #448]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d908      	bls.n	8006aec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ada:	4b6d      	ldr	r3, [pc, #436]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	496a      	ldr	r1, [pc, #424]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0310 	and.w	r3, r3, #16
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d010      	beq.n	8006b1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699a      	ldr	r2, [r3, #24]
 8006afc:	4b64      	ldr	r3, [pc, #400]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d908      	bls.n	8006b1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b08:	4b61      	ldr	r3, [pc, #388]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	495e      	ldr	r1, [pc, #376]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d010      	beq.n	8006b48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	69da      	ldr	r2, [r3, #28]
 8006b2a:	4b59      	ldr	r3, [pc, #356]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d908      	bls.n	8006b48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006b36:	4b56      	ldr	r3, [pc, #344]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	4953      	ldr	r1, [pc, #332]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d010      	beq.n	8006b76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68da      	ldr	r2, [r3, #12]
 8006b58:	4b4d      	ldr	r3, [pc, #308]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d908      	bls.n	8006b76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b64:	4b4a      	ldr	r3, [pc, #296]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	f023 020f 	bic.w	r2, r3, #15
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	4947      	ldr	r1, [pc, #284]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d055      	beq.n	8006c2e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006b82:	4b43      	ldr	r3, [pc, #268]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	4940      	ldr	r1, [pc, #256]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d107      	bne.n	8006bac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b9c:	4b3c      	ldr	r3, [pc, #240]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d121      	bne.n	8006bec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e0f6      	b.n	8006d9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b03      	cmp	r3, #3
 8006bb2:	d107      	bne.n	8006bc4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bb4:	4b36      	ldr	r3, [pc, #216]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d115      	bne.n	8006bec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e0ea      	b.n	8006d9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d107      	bne.n	8006bdc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bcc:	4b30      	ldr	r3, [pc, #192]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d109      	bne.n	8006bec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e0de      	b.n	8006d9a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bdc:	4b2c      	ldr	r3, [pc, #176]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e0d6      	b.n	8006d9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bec:	4b28      	ldr	r3, [pc, #160]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	f023 0207 	bic.w	r2, r3, #7
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	4925      	ldr	r1, [pc, #148]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bfe:	f7fb fb31 	bl	8002264 <HAL_GetTick>
 8006c02:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c04:	e00a      	b.n	8006c1c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c06:	f7fb fb2d 	bl	8002264 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d901      	bls.n	8006c1c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e0be      	b.n	8006d9a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c1c:	4b1c      	ldr	r3, [pc, #112]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	00db      	lsls	r3, r3, #3
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d1eb      	bne.n	8006c06 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d010      	beq.n	8006c5c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68da      	ldr	r2, [r3, #12]
 8006c3e:	4b14      	ldr	r3, [pc, #80]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	f003 030f 	and.w	r3, r3, #15
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d208      	bcs.n	8006c5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c4a:	4b11      	ldr	r3, [pc, #68]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	f023 020f 	bic.w	r2, r3, #15
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	490e      	ldr	r1, [pc, #56]	; (8006c90 <HAL_RCC_ClockConfig+0x244>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c5c:	4b0b      	ldr	r3, [pc, #44]	; (8006c8c <HAL_RCC_ClockConfig+0x240>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 030f 	and.w	r3, r3, #15
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d214      	bcs.n	8006c94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c6a:	4b08      	ldr	r3, [pc, #32]	; (8006c8c <HAL_RCC_ClockConfig+0x240>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f023 020f 	bic.w	r2, r3, #15
 8006c72:	4906      	ldr	r1, [pc, #24]	; (8006c8c <HAL_RCC_ClockConfig+0x240>)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c7a:	4b04      	ldr	r3, [pc, #16]	; (8006c8c <HAL_RCC_ClockConfig+0x240>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 030f 	and.w	r3, r3, #15
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d005      	beq.n	8006c94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e086      	b.n	8006d9a <HAL_RCC_ClockConfig+0x34e>
 8006c8c:	52002000 	.word	0x52002000
 8006c90:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0304 	and.w	r3, r3, #4
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d010      	beq.n	8006cc2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691a      	ldr	r2, [r3, #16]
 8006ca4:	4b3f      	ldr	r3, [pc, #252]	; (8006da4 <HAL_RCC_ClockConfig+0x358>)
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d208      	bcs.n	8006cc2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006cb0:	4b3c      	ldr	r3, [pc, #240]	; (8006da4 <HAL_RCC_ClockConfig+0x358>)
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	4939      	ldr	r1, [pc, #228]	; (8006da4 <HAL_RCC_ClockConfig+0x358>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0308 	and.w	r3, r3, #8
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d010      	beq.n	8006cf0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	695a      	ldr	r2, [r3, #20]
 8006cd2:	4b34      	ldr	r3, [pc, #208]	; (8006da4 <HAL_RCC_ClockConfig+0x358>)
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d208      	bcs.n	8006cf0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006cde:	4b31      	ldr	r3, [pc, #196]	; (8006da4 <HAL_RCC_ClockConfig+0x358>)
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	492e      	ldr	r1, [pc, #184]	; (8006da4 <HAL_RCC_ClockConfig+0x358>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0310 	and.w	r3, r3, #16
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d010      	beq.n	8006d1e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	699a      	ldr	r2, [r3, #24]
 8006d00:	4b28      	ldr	r3, [pc, #160]	; (8006da4 <HAL_RCC_ClockConfig+0x358>)
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d208      	bcs.n	8006d1e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d0c:	4b25      	ldr	r3, [pc, #148]	; (8006da4 <HAL_RCC_ClockConfig+0x358>)
 8006d0e:	69db      	ldr	r3, [r3, #28]
 8006d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	4922      	ldr	r1, [pc, #136]	; (8006da4 <HAL_RCC_ClockConfig+0x358>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0320 	and.w	r3, r3, #32
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d010      	beq.n	8006d4c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	69da      	ldr	r2, [r3, #28]
 8006d2e:	4b1d      	ldr	r3, [pc, #116]	; (8006da4 <HAL_RCC_ClockConfig+0x358>)
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d208      	bcs.n	8006d4c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006d3a:	4b1a      	ldr	r3, [pc, #104]	; (8006da4 <HAL_RCC_ClockConfig+0x358>)
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	4917      	ldr	r1, [pc, #92]	; (8006da4 <HAL_RCC_ClockConfig+0x358>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d4c:	f000 f834 	bl	8006db8 <HAL_RCC_GetSysClockFreq>
 8006d50:	4601      	mov	r1, r0
 8006d52:	4b14      	ldr	r3, [pc, #80]	; (8006da4 <HAL_RCC_ClockConfig+0x358>)
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	0a1b      	lsrs	r3, r3, #8
 8006d58:	f003 030f 	and.w	r3, r3, #15
 8006d5c:	4a12      	ldr	r2, [pc, #72]	; (8006da8 <HAL_RCC_ClockConfig+0x35c>)
 8006d5e:	5cd3      	ldrb	r3, [r2, r3]
 8006d60:	f003 031f 	and.w	r3, r3, #31
 8006d64:	fa21 f303 	lsr.w	r3, r1, r3
 8006d68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d6a:	4b0e      	ldr	r3, [pc, #56]	; (8006da4 <HAL_RCC_ClockConfig+0x358>)
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	f003 030f 	and.w	r3, r3, #15
 8006d72:	4a0d      	ldr	r2, [pc, #52]	; (8006da8 <HAL_RCC_ClockConfig+0x35c>)
 8006d74:	5cd3      	ldrb	r3, [r2, r3]
 8006d76:	f003 031f 	and.w	r3, r3, #31
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d80:	4a0a      	ldr	r2, [pc, #40]	; (8006dac <HAL_RCC_ClockConfig+0x360>)
 8006d82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d84:	4a0a      	ldr	r2, [pc, #40]	; (8006db0 <HAL_RCC_ClockConfig+0x364>)
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006d8a:	4b0a      	ldr	r3, [pc, #40]	; (8006db4 <HAL_RCC_ClockConfig+0x368>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fb fa1e 	bl	80021d0 <HAL_InitTick>
 8006d94:	4603      	mov	r3, r0
 8006d96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	58024400 	.word	0x58024400
 8006da8:	0800cd7c 	.word	0x0800cd7c
 8006dac:	2400006c 	.word	0x2400006c
 8006db0:	24000068 	.word	0x24000068
 8006db4:	24000070 	.word	0x24000070

08006db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b089      	sub	sp, #36	; 0x24
 8006dbc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dbe:	4baf      	ldr	r3, [pc, #700]	; (800707c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dc6:	2b18      	cmp	r3, #24
 8006dc8:	f200 814e 	bhi.w	8007068 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006dcc:	a201      	add	r2, pc, #4	; (adr r2, 8006dd4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd2:	bf00      	nop
 8006dd4:	08006e39 	.word	0x08006e39
 8006dd8:	08007069 	.word	0x08007069
 8006ddc:	08007069 	.word	0x08007069
 8006de0:	08007069 	.word	0x08007069
 8006de4:	08007069 	.word	0x08007069
 8006de8:	08007069 	.word	0x08007069
 8006dec:	08007069 	.word	0x08007069
 8006df0:	08007069 	.word	0x08007069
 8006df4:	08006e5f 	.word	0x08006e5f
 8006df8:	08007069 	.word	0x08007069
 8006dfc:	08007069 	.word	0x08007069
 8006e00:	08007069 	.word	0x08007069
 8006e04:	08007069 	.word	0x08007069
 8006e08:	08007069 	.word	0x08007069
 8006e0c:	08007069 	.word	0x08007069
 8006e10:	08007069 	.word	0x08007069
 8006e14:	08006e65 	.word	0x08006e65
 8006e18:	08007069 	.word	0x08007069
 8006e1c:	08007069 	.word	0x08007069
 8006e20:	08007069 	.word	0x08007069
 8006e24:	08007069 	.word	0x08007069
 8006e28:	08007069 	.word	0x08007069
 8006e2c:	08007069 	.word	0x08007069
 8006e30:	08007069 	.word	0x08007069
 8006e34:	08006e6b 	.word	0x08006e6b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e38:	4b90      	ldr	r3, [pc, #576]	; (800707c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0320 	and.w	r3, r3, #32
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d009      	beq.n	8006e58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e44:	4b8d      	ldr	r3, [pc, #564]	; (800707c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	08db      	lsrs	r3, r3, #3
 8006e4a:	f003 0303 	and.w	r3, r3, #3
 8006e4e:	4a8c      	ldr	r2, [pc, #560]	; (8007080 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006e50:	fa22 f303 	lsr.w	r3, r2, r3
 8006e54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006e56:	e10a      	b.n	800706e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006e58:	4b89      	ldr	r3, [pc, #548]	; (8007080 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006e5a:	61bb      	str	r3, [r7, #24]
    break;
 8006e5c:	e107      	b.n	800706e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006e5e:	4b89      	ldr	r3, [pc, #548]	; (8007084 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006e60:	61bb      	str	r3, [r7, #24]
    break;
 8006e62:	e104      	b.n	800706e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006e64:	4b88      	ldr	r3, [pc, #544]	; (8007088 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006e66:	61bb      	str	r3, [r7, #24]
    break;
 8006e68:	e101      	b.n	800706e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e6a:	4b84      	ldr	r3, [pc, #528]	; (800707c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6e:	f003 0303 	and.w	r3, r3, #3
 8006e72:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006e74:	4b81      	ldr	r3, [pc, #516]	; (800707c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e78:	091b      	lsrs	r3, r3, #4
 8006e7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e7e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006e80:	4b7e      	ldr	r3, [pc, #504]	; (800707c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006e8a:	4b7c      	ldr	r3, [pc, #496]	; (800707c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8e:	08db      	lsrs	r3, r3, #3
 8006e90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	fb02 f303 	mul.w	r3, r2, r3
 8006e9a:	ee07 3a90 	vmov	s15, r3
 8006e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 80da 	beq.w	8007062 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d05a      	beq.n	8006f6a <HAL_RCC_GetSysClockFreq+0x1b2>
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d302      	bcc.n	8006ebe <HAL_RCC_GetSysClockFreq+0x106>
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d078      	beq.n	8006fae <HAL_RCC_GetSysClockFreq+0x1f6>
 8006ebc:	e099      	b.n	8006ff2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ebe:	4b6f      	ldr	r3, [pc, #444]	; (800707c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0320 	and.w	r3, r3, #32
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d02d      	beq.n	8006f26 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006eca:	4b6c      	ldr	r3, [pc, #432]	; (800707c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	08db      	lsrs	r3, r3, #3
 8006ed0:	f003 0303 	and.w	r3, r3, #3
 8006ed4:	4a6a      	ldr	r2, [pc, #424]	; (8007080 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8006eda:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	ee07 3a90 	vmov	s15, r3
 8006eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ef4:	4b61      	ldr	r3, [pc, #388]	; (800707c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efc:	ee07 3a90 	vmov	s15, r3
 8006f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f04:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f08:	eddf 5a60 	vldr	s11, [pc, #384]	; 800708c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f20:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006f24:	e087      	b.n	8007036 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	ee07 3a90 	vmov	s15, r3
 8006f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f30:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007090 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f38:	4b50      	ldr	r3, [pc, #320]	; (800707c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f40:	ee07 3a90 	vmov	s15, r3
 8006f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f48:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f4c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800708c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006f50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f68:	e065      	b.n	8007036 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	ee07 3a90 	vmov	s15, r3
 8006f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f74:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007094 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006f78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f7c:	4b3f      	ldr	r3, [pc, #252]	; (800707c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f84:	ee07 3a90 	vmov	s15, r3
 8006f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f90:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800708c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006f94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fac:	e043      	b.n	8007036 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	ee07 3a90 	vmov	s15, r3
 8006fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007098 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006fbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc0:	4b2e      	ldr	r3, [pc, #184]	; (800707c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc8:	ee07 3a90 	vmov	s15, r3
 8006fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fd4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800708c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006fd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ff0:	e021      	b.n	8007036 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	ee07 3a90 	vmov	s15, r3
 8006ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007094 <HAL_RCC_GetSysClockFreq+0x2dc>
 8007000:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007004:	4b1d      	ldr	r3, [pc, #116]	; (800707c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700c:	ee07 3a90 	vmov	s15, r3
 8007010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007014:	ed97 6a02 	vldr	s12, [r7, #8]
 8007018:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800708c <HAL_RCC_GetSysClockFreq+0x2d4>
 800701c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007020:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007024:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007028:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800702c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007030:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007034:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007036:	4b11      	ldr	r3, [pc, #68]	; (800707c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703a:	0a5b      	lsrs	r3, r3, #9
 800703c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007040:	3301      	adds	r3, #1
 8007042:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800704e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800705a:	ee17 3a90 	vmov	r3, s15
 800705e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007060:	e005      	b.n	800706e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	61bb      	str	r3, [r7, #24]
    break;
 8007066:	e002      	b.n	800706e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007068:	4b06      	ldr	r3, [pc, #24]	; (8007084 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800706a:	61bb      	str	r3, [r7, #24]
    break;
 800706c:	bf00      	nop
  }

  return sysclockfreq;
 800706e:	69bb      	ldr	r3, [r7, #24]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3724      	adds	r7, #36	; 0x24
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	58024400 	.word	0x58024400
 8007080:	03d09000 	.word	0x03d09000
 8007084:	003d0900 	.word	0x003d0900
 8007088:	017d7840 	.word	0x017d7840
 800708c:	46000000 	.word	0x46000000
 8007090:	4c742400 	.word	0x4c742400
 8007094:	4a742400 	.word	0x4a742400
 8007098:	4bbebc20 	.word	0x4bbebc20

0800709c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80070a2:	f7ff fe89 	bl	8006db8 <HAL_RCC_GetSysClockFreq>
 80070a6:	4601      	mov	r1, r0
 80070a8:	4b10      	ldr	r3, [pc, #64]	; (80070ec <HAL_RCC_GetHCLKFreq+0x50>)
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	0a1b      	lsrs	r3, r3, #8
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	4a0f      	ldr	r2, [pc, #60]	; (80070f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80070b4:	5cd3      	ldrb	r3, [r2, r3]
 80070b6:	f003 031f 	and.w	r3, r3, #31
 80070ba:	fa21 f303 	lsr.w	r3, r1, r3
 80070be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070c0:	4b0a      	ldr	r3, [pc, #40]	; (80070ec <HAL_RCC_GetHCLKFreq+0x50>)
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	f003 030f 	and.w	r3, r3, #15
 80070c8:	4a09      	ldr	r2, [pc, #36]	; (80070f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80070ca:	5cd3      	ldrb	r3, [r2, r3]
 80070cc:	f003 031f 	and.w	r3, r3, #31
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	fa22 f303 	lsr.w	r3, r2, r3
 80070d6:	4a07      	ldr	r2, [pc, #28]	; (80070f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80070d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070da:	4a07      	ldr	r2, [pc, #28]	; (80070f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80070e0:	4b04      	ldr	r3, [pc, #16]	; (80070f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80070e2:	681b      	ldr	r3, [r3, #0]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	58024400 	.word	0x58024400
 80070f0:	0800cd7c 	.word	0x0800cd7c
 80070f4:	2400006c 	.word	0x2400006c
 80070f8:	24000068 	.word	0x24000068

080070fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007100:	f7ff ffcc 	bl	800709c <HAL_RCC_GetHCLKFreq>
 8007104:	4601      	mov	r1, r0
 8007106:	4b06      	ldr	r3, [pc, #24]	; (8007120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	091b      	lsrs	r3, r3, #4
 800710c:	f003 0307 	and.w	r3, r3, #7
 8007110:	4a04      	ldr	r2, [pc, #16]	; (8007124 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007112:	5cd3      	ldrb	r3, [r2, r3]
 8007114:	f003 031f 	and.w	r3, r3, #31
 8007118:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800711c:	4618      	mov	r0, r3
 800711e:	bd80      	pop	{r7, pc}
 8007120:	58024400 	.word	0x58024400
 8007124:	0800cd7c 	.word	0x0800cd7c

08007128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800712c:	f7ff ffb6 	bl	800709c <HAL_RCC_GetHCLKFreq>
 8007130:	4601      	mov	r1, r0
 8007132:	4b06      	ldr	r3, [pc, #24]	; (800714c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	0a1b      	lsrs	r3, r3, #8
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	4a04      	ldr	r2, [pc, #16]	; (8007150 <HAL_RCC_GetPCLK2Freq+0x28>)
 800713e:	5cd3      	ldrb	r3, [r2, r3]
 8007140:	f003 031f 	and.w	r3, r3, #31
 8007144:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007148:	4618      	mov	r0, r3
 800714a:	bd80      	pop	{r7, pc}
 800714c:	58024400 	.word	0x58024400
 8007150:	0800cd7c 	.word	0x0800cd7c

08007154 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800715c:	2300      	movs	r3, #0
 800715e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007160:	2300      	movs	r3, #0
 8007162:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d03d      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007178:	d013      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800717a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800717e:	d802      	bhi.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007180:	2b00      	cmp	r3, #0
 8007182:	d007      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007184:	e01f      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007186:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800718a:	d013      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800718c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007190:	d01c      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007192:	e018      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007194:	4baf      	ldr	r3, [pc, #700]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	4aae      	ldr	r2, [pc, #696]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800719a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800719e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071a0:	e015      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	3304      	adds	r3, #4
 80071a6:	2102      	movs	r1, #2
 80071a8:	4618      	mov	r0, r3
 80071aa:	f001 fd23 	bl	8008bf4 <RCCEx_PLL2_Config>
 80071ae:	4603      	mov	r3, r0
 80071b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071b2:	e00c      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3324      	adds	r3, #36	; 0x24
 80071b8:	2102      	movs	r1, #2
 80071ba:	4618      	mov	r0, r3
 80071bc:	f001 fdcc 	bl	8008d58 <RCCEx_PLL3_Config>
 80071c0:	4603      	mov	r3, r0
 80071c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071c4:	e003      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	75fb      	strb	r3, [r7, #23]
      break;
 80071ca:	e000      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80071cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d109      	bne.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80071d4:	4b9f      	ldr	r3, [pc, #636]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071e0:	499c      	ldr	r1, [pc, #624]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	650b      	str	r3, [r1, #80]	; 0x50
 80071e6:	e001      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
 80071ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d03d      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d826      	bhi.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8007200:	a201      	add	r2, pc, #4	; (adr r2, 8007208 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8007202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007206:	bf00      	nop
 8007208:	0800721d 	.word	0x0800721d
 800720c:	0800722b 	.word	0x0800722b
 8007210:	0800723d 	.word	0x0800723d
 8007214:	08007255 	.word	0x08007255
 8007218:	08007255 	.word	0x08007255
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800721c:	4b8d      	ldr	r3, [pc, #564]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	4a8c      	ldr	r2, [pc, #560]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007226:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007228:	e015      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3304      	adds	r3, #4
 800722e:	2100      	movs	r1, #0
 8007230:	4618      	mov	r0, r3
 8007232:	f001 fcdf 	bl	8008bf4 <RCCEx_PLL2_Config>
 8007236:	4603      	mov	r3, r0
 8007238:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800723a:	e00c      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3324      	adds	r3, #36	; 0x24
 8007240:	2100      	movs	r1, #0
 8007242:	4618      	mov	r0, r3
 8007244:	f001 fd88 	bl	8008d58 <RCCEx_PLL3_Config>
 8007248:	4603      	mov	r3, r0
 800724a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800724c:	e003      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	75fb      	strb	r3, [r7, #23]
      break;
 8007252:	e000      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007256:	7dfb      	ldrb	r3, [r7, #23]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d109      	bne.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800725c:	4b7d      	ldr	r3, [pc, #500]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800725e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007260:	f023 0207 	bic.w	r2, r3, #7
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007268:	497a      	ldr	r1, [pc, #488]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800726a:	4313      	orrs	r3, r2
 800726c:	650b      	str	r3, [r1, #80]	; 0x50
 800726e:	e001      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800727c:	2b00      	cmp	r3, #0
 800727e:	d03e      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007284:	2b80      	cmp	r3, #128	; 0x80
 8007286:	d01c      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007288:	2b80      	cmp	r3, #128	; 0x80
 800728a:	d804      	bhi.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800728c:	2b00      	cmp	r3, #0
 800728e:	d008      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007290:	2b40      	cmp	r3, #64	; 0x40
 8007292:	d00d      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007294:	e01e      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007296:	2bc0      	cmp	r3, #192	; 0xc0
 8007298:	d01f      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x186>
 800729a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800729e:	d01e      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80072a0:	e018      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072a2:	4b6c      	ldr	r3, [pc, #432]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a6:	4a6b      	ldr	r2, [pc, #428]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072ae:	e017      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3304      	adds	r3, #4
 80072b4:	2100      	movs	r1, #0
 80072b6:	4618      	mov	r0, r3
 80072b8:	f001 fc9c 	bl	8008bf4 <RCCEx_PLL2_Config>
 80072bc:	4603      	mov	r3, r0
 80072be:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072c0:	e00e      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3324      	adds	r3, #36	; 0x24
 80072c6:	2100      	movs	r1, #0
 80072c8:	4618      	mov	r0, r3
 80072ca:	f001 fd45 	bl	8008d58 <RCCEx_PLL3_Config>
 80072ce:	4603      	mov	r3, r0
 80072d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072d2:	e005      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	75fb      	strb	r3, [r7, #23]
      break;
 80072d8:	e002      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80072da:	bf00      	nop
 80072dc:	e000      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80072de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d109      	bne.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80072e6:	4b5b      	ldr	r3, [pc, #364]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f2:	4958      	ldr	r1, [pc, #352]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	650b      	str	r3, [r1, #80]	; 0x50
 80072f8:	e001      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
 80072fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007306:	2b00      	cmp	r3, #0
 8007308:	d044      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007310:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007314:	d01f      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800731a:	d805      	bhi.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00a      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007320:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007324:	d00e      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007326:	e01f      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007328:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800732c:	d01f      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800732e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007332:	d01e      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007334:	e018      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007336:	4b47      	ldr	r3, [pc, #284]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733a:	4a46      	ldr	r2, [pc, #280]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800733c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007340:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007342:	e017      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3304      	adds	r3, #4
 8007348:	2100      	movs	r1, #0
 800734a:	4618      	mov	r0, r3
 800734c:	f001 fc52 	bl	8008bf4 <RCCEx_PLL2_Config>
 8007350:	4603      	mov	r3, r0
 8007352:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007354:	e00e      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3324      	adds	r3, #36	; 0x24
 800735a:	2100      	movs	r1, #0
 800735c:	4618      	mov	r0, r3
 800735e:	f001 fcfb 	bl	8008d58 <RCCEx_PLL3_Config>
 8007362:	4603      	mov	r3, r0
 8007364:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007366:	e005      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	75fb      	strb	r3, [r7, #23]
      break;
 800736c:	e002      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800736e:	bf00      	nop
 8007370:	e000      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007374:	7dfb      	ldrb	r3, [r7, #23]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10a      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800737a:	4b36      	ldr	r3, [pc, #216]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800737c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007388:	4932      	ldr	r1, [pc, #200]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800738a:	4313      	orrs	r3, r2
 800738c:	658b      	str	r3, [r1, #88]	; 0x58
 800738e:	e001      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007390:	7dfb      	ldrb	r3, [r7, #23]
 8007392:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800739c:	2b00      	cmp	r3, #0
 800739e:	d044      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80073a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073aa:	d01f      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 80073ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073b0:	d805      	bhi.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00a      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x278>
 80073b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80073ba:	d00e      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x286>
 80073bc:	e01f      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80073be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80073c2:	d01f      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80073c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073c8:	d01e      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80073ca:	e018      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073cc:	4b21      	ldr	r3, [pc, #132]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d0:	4a20      	ldr	r2, [pc, #128]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073d8:	e017      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3304      	adds	r3, #4
 80073de:	2100      	movs	r1, #0
 80073e0:	4618      	mov	r0, r3
 80073e2:	f001 fc07 	bl	8008bf4 <RCCEx_PLL2_Config>
 80073e6:	4603      	mov	r3, r0
 80073e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80073ea:	e00e      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	3324      	adds	r3, #36	; 0x24
 80073f0:	2100      	movs	r1, #0
 80073f2:	4618      	mov	r0, r3
 80073f4:	f001 fcb0 	bl	8008d58 <RCCEx_PLL3_Config>
 80073f8:	4603      	mov	r3, r0
 80073fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073fc:	e005      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	75fb      	strb	r3, [r7, #23]
      break;
 8007402:	e002      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007404:	bf00      	nop
 8007406:	e000      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800740a:	7dfb      	ldrb	r3, [r7, #23]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10a      	bne.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007410:	4b10      	ldr	r3, [pc, #64]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007414:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800741e:	490d      	ldr	r1, [pc, #52]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007420:	4313      	orrs	r3, r2
 8007422:	658b      	str	r3, [r1, #88]	; 0x58
 8007424:	e001      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d035      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800743a:	2b10      	cmp	r3, #16
 800743c:	d00c      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800743e:	2b10      	cmp	r3, #16
 8007440:	d802      	bhi.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007442:	2b00      	cmp	r3, #0
 8007444:	d01b      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007446:	e017      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007448:	2b20      	cmp	r3, #32
 800744a:	d00c      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800744c:	2b30      	cmp	r3, #48	; 0x30
 800744e:	d018      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007450:	e012      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007452:	bf00      	nop
 8007454:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007458:	4baf      	ldr	r3, [pc, #700]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	4aae      	ldr	r2, [pc, #696]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800745e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007462:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007464:	e00e      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	3304      	adds	r3, #4
 800746a:	2102      	movs	r1, #2
 800746c:	4618      	mov	r0, r3
 800746e:	f001 fbc1 	bl	8008bf4 <RCCEx_PLL2_Config>
 8007472:	4603      	mov	r3, r0
 8007474:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007476:	e005      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	75fb      	strb	r3, [r7, #23]
      break;
 800747c:	e002      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800747e:	bf00      	nop
 8007480:	e000      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007482:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007484:	7dfb      	ldrb	r3, [r7, #23]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d109      	bne.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800748a:	4ba3      	ldr	r3, [pc, #652]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800748c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800748e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007496:	49a0      	ldr	r1, [pc, #640]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007498:	4313      	orrs	r3, r2
 800749a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800749c:	e001      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800749e:	7dfb      	ldrb	r3, [r7, #23]
 80074a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d042      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074b6:	d01f      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80074b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074bc:	d805      	bhi.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80074c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074c6:	d00e      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80074c8:	e01f      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80074ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074ce:	d01f      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80074d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074d4:	d01e      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80074d6:	e018      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074d8:	4b8f      	ldr	r3, [pc, #572]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	4a8e      	ldr	r2, [pc, #568]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074e4:	e017      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3304      	adds	r3, #4
 80074ea:	2100      	movs	r1, #0
 80074ec:	4618      	mov	r0, r3
 80074ee:	f001 fb81 	bl	8008bf4 <RCCEx_PLL2_Config>
 80074f2:	4603      	mov	r3, r0
 80074f4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074f6:	e00e      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3324      	adds	r3, #36	; 0x24
 80074fc:	2100      	movs	r1, #0
 80074fe:	4618      	mov	r0, r3
 8007500:	f001 fc2a 	bl	8008d58 <RCCEx_PLL3_Config>
 8007504:	4603      	mov	r3, r0
 8007506:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007508:	e005      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	75fb      	strb	r3, [r7, #23]
      break;
 800750e:	e002      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007510:	bf00      	nop
 8007512:	e000      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007514:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007516:	7dfb      	ldrb	r3, [r7, #23]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d109      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800751c:	4b7e      	ldr	r3, [pc, #504]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800751e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007520:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007528:	497b      	ldr	r1, [pc, #492]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800752a:	4313      	orrs	r3, r2
 800752c:	650b      	str	r3, [r1, #80]	; 0x50
 800752e:	e001      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007530:	7dfb      	ldrb	r3, [r7, #23]
 8007532:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d042      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007548:	d01b      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800754a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800754e:	d805      	bhi.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007550:	2b00      	cmp	r3, #0
 8007552:	d022      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007558:	d00a      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800755a:	e01b      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800755c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007560:	d01d      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8007562:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007566:	d01c      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007568:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800756c:	d01b      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800756e:	e011      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3304      	adds	r3, #4
 8007574:	2101      	movs	r1, #1
 8007576:	4618      	mov	r0, r3
 8007578:	f001 fb3c 	bl	8008bf4 <RCCEx_PLL2_Config>
 800757c:	4603      	mov	r3, r0
 800757e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007580:	e012      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	3324      	adds	r3, #36	; 0x24
 8007586:	2101      	movs	r1, #1
 8007588:	4618      	mov	r0, r3
 800758a:	f001 fbe5 	bl	8008d58 <RCCEx_PLL3_Config>
 800758e:	4603      	mov	r3, r0
 8007590:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007592:	e009      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	75fb      	strb	r3, [r7, #23]
      break;
 8007598:	e006      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800759a:	bf00      	nop
 800759c:	e004      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800759e:	bf00      	nop
 80075a0:	e002      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80075a2:	bf00      	nop
 80075a4:	e000      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80075a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075a8:	7dfb      	ldrb	r3, [r7, #23]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d109      	bne.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80075ae:	4b5a      	ldr	r3, [pc, #360]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80075b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ba:	4957      	ldr	r1, [pc, #348]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	650b      	str	r3, [r1, #80]	; 0x50
 80075c0:	e001      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
 80075c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d044      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80075d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075dc:	d01b      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80075de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075e2:	d805      	bhi.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d022      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80075e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075ec:	d00a      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80075ee:	e01b      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80075f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f4:	d01d      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80075f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075fa:	d01c      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80075fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007600:	d01b      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007602:	e011      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3304      	adds	r3, #4
 8007608:	2101      	movs	r1, #1
 800760a:	4618      	mov	r0, r3
 800760c:	f001 faf2 	bl	8008bf4 <RCCEx_PLL2_Config>
 8007610:	4603      	mov	r3, r0
 8007612:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007614:	e012      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3324      	adds	r3, #36	; 0x24
 800761a:	2101      	movs	r1, #1
 800761c:	4618      	mov	r0, r3
 800761e:	f001 fb9b 	bl	8008d58 <RCCEx_PLL3_Config>
 8007622:	4603      	mov	r3, r0
 8007624:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007626:	e009      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	75fb      	strb	r3, [r7, #23]
      break;
 800762c:	e006      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800762e:	bf00      	nop
 8007630:	e004      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007632:	bf00      	nop
 8007634:	e002      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007636:	bf00      	nop
 8007638:	e000      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800763a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800763c:	7dfb      	ldrb	r3, [r7, #23]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10a      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007642:	4b35      	ldr	r3, [pc, #212]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007646:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007650:	4931      	ldr	r1, [pc, #196]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007652:	4313      	orrs	r3, r2
 8007654:	658b      	str	r3, [r1, #88]	; 0x58
 8007656:	e001      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007658:	7dfb      	ldrb	r3, [r7, #23]
 800765a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d02d      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800766c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007670:	d005      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007676:	d009      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007678:	2b00      	cmp	r3, #0
 800767a:	d013      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800767c:	e00f      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800767e:	4b26      	ldr	r3, [pc, #152]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007682:	4a25      	ldr	r2, [pc, #148]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007688:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800768a:	e00c      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3304      	adds	r3, #4
 8007690:	2101      	movs	r1, #1
 8007692:	4618      	mov	r0, r3
 8007694:	f001 faae 	bl	8008bf4 <RCCEx_PLL2_Config>
 8007698:	4603      	mov	r3, r0
 800769a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800769c:	e003      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	75fb      	strb	r3, [r7, #23]
      break;
 80076a2:	e000      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80076a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076a6:	7dfb      	ldrb	r3, [r7, #23]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d109      	bne.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80076ac:	4b1a      	ldr	r3, [pc, #104]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b8:	4917      	ldr	r1, [pc, #92]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	650b      	str	r3, [r1, #80]	; 0x50
 80076be:	e001      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c0:	7dfb      	ldrb	r3, [r7, #23]
 80076c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d035      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d81b      	bhi.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80076d8:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80076da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076de:	bf00      	nop
 80076e0:	0800771d 	.word	0x0800771d
 80076e4:	080076f1 	.word	0x080076f1
 80076e8:	080076ff 	.word	0x080076ff
 80076ec:	0800771d 	.word	0x0800771d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076f0:	4b09      	ldr	r3, [pc, #36]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	4a08      	ldr	r2, [pc, #32]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80076fc:	e00f      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	3304      	adds	r3, #4
 8007702:	2102      	movs	r1, #2
 8007704:	4618      	mov	r0, r3
 8007706:	f001 fa75 	bl	8008bf4 <RCCEx_PLL2_Config>
 800770a:	4603      	mov	r3, r0
 800770c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800770e:	e006      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	75fb      	strb	r3, [r7, #23]
      break;
 8007714:	e003      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007716:	bf00      	nop
 8007718:	58024400 	.word	0x58024400
      break;
 800771c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d109      	bne.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007724:	4bba      	ldr	r3, [pc, #744]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007728:	f023 0203 	bic.w	r2, r3, #3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007730:	49b7      	ldr	r1, [pc, #732]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007732:	4313      	orrs	r3, r2
 8007734:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007736:	e001      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007738:	7dfb      	ldrb	r3, [r7, #23]
 800773a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 8086 	beq.w	8007856 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800774a:	4bb2      	ldr	r3, [pc, #712]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4ab1      	ldr	r2, [pc, #708]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007754:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007756:	f7fa fd85 	bl	8002264 <HAL_GetTick>
 800775a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800775c:	e009      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800775e:	f7fa fd81 	bl	8002264 <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	2b64      	cmp	r3, #100	; 0x64
 800776a:	d902      	bls.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	75fb      	strb	r3, [r7, #23]
        break;
 8007770:	e005      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007772:	4ba8      	ldr	r3, [pc, #672]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800777a:	2b00      	cmp	r3, #0
 800777c:	d0ef      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800777e:	7dfb      	ldrb	r3, [r7, #23]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d166      	bne.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007784:	4ba2      	ldr	r3, [pc, #648]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007786:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800778e:	4053      	eors	r3, r2
 8007790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007794:	2b00      	cmp	r3, #0
 8007796:	d013      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007798:	4b9d      	ldr	r3, [pc, #628]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800779a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800779c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077a0:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80077a2:	4b9b      	ldr	r3, [pc, #620]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a6:	4a9a      	ldr	r2, [pc, #616]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077ac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80077ae:	4b98      	ldr	r3, [pc, #608]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b2:	4a97      	ldr	r2, [pc, #604]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077b8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80077ba:	4a95      	ldr	r2, [pc, #596]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ca:	d115      	bne.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077cc:	f7fa fd4a 	bl	8002264 <HAL_GetTick>
 80077d0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077d2:	e00b      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077d4:	f7fa fd46 	bl	8002264 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d902      	bls.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	75fb      	strb	r3, [r7, #23]
            break;
 80077ea:	e005      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077ec:	4b88      	ldr	r3, [pc, #544]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d0ed      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80077f8:	7dfb      	ldrb	r3, [r7, #23]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d126      	bne.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800780c:	d10d      	bne.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800780e:	4b80      	ldr	r3, [pc, #512]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800781c:	0919      	lsrs	r1, r3, #4
 800781e:	4b7e      	ldr	r3, [pc, #504]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007820:	400b      	ands	r3, r1
 8007822:	497b      	ldr	r1, [pc, #492]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007824:	4313      	orrs	r3, r2
 8007826:	610b      	str	r3, [r1, #16]
 8007828:	e005      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800782a:	4b79      	ldr	r3, [pc, #484]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	4a78      	ldr	r2, [pc, #480]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007830:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007834:	6113      	str	r3, [r2, #16]
 8007836:	4b76      	ldr	r3, [pc, #472]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007838:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007844:	4972      	ldr	r1, [pc, #456]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007846:	4313      	orrs	r3, r2
 8007848:	670b      	str	r3, [r1, #112]	; 0x70
 800784a:	e004      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800784c:	7dfb      	ldrb	r3, [r7, #23]
 800784e:	75bb      	strb	r3, [r7, #22]
 8007850:	e001      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007852:	7dfb      	ldrb	r3, [r7, #23]
 8007854:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d07d      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007866:	2b28      	cmp	r3, #40	; 0x28
 8007868:	d866      	bhi.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800786a:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	0800793f 	.word	0x0800793f
 8007874:	08007939 	.word	0x08007939
 8007878:	08007939 	.word	0x08007939
 800787c:	08007939 	.word	0x08007939
 8007880:	08007939 	.word	0x08007939
 8007884:	08007939 	.word	0x08007939
 8007888:	08007939 	.word	0x08007939
 800788c:	08007939 	.word	0x08007939
 8007890:	08007915 	.word	0x08007915
 8007894:	08007939 	.word	0x08007939
 8007898:	08007939 	.word	0x08007939
 800789c:	08007939 	.word	0x08007939
 80078a0:	08007939 	.word	0x08007939
 80078a4:	08007939 	.word	0x08007939
 80078a8:	08007939 	.word	0x08007939
 80078ac:	08007939 	.word	0x08007939
 80078b0:	08007927 	.word	0x08007927
 80078b4:	08007939 	.word	0x08007939
 80078b8:	08007939 	.word	0x08007939
 80078bc:	08007939 	.word	0x08007939
 80078c0:	08007939 	.word	0x08007939
 80078c4:	08007939 	.word	0x08007939
 80078c8:	08007939 	.word	0x08007939
 80078cc:	08007939 	.word	0x08007939
 80078d0:	0800793f 	.word	0x0800793f
 80078d4:	08007939 	.word	0x08007939
 80078d8:	08007939 	.word	0x08007939
 80078dc:	08007939 	.word	0x08007939
 80078e0:	08007939 	.word	0x08007939
 80078e4:	08007939 	.word	0x08007939
 80078e8:	08007939 	.word	0x08007939
 80078ec:	08007939 	.word	0x08007939
 80078f0:	0800793f 	.word	0x0800793f
 80078f4:	08007939 	.word	0x08007939
 80078f8:	08007939 	.word	0x08007939
 80078fc:	08007939 	.word	0x08007939
 8007900:	08007939 	.word	0x08007939
 8007904:	08007939 	.word	0x08007939
 8007908:	08007939 	.word	0x08007939
 800790c:	08007939 	.word	0x08007939
 8007910:	0800793f 	.word	0x0800793f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	3304      	adds	r3, #4
 8007918:	2101      	movs	r1, #1
 800791a:	4618      	mov	r0, r3
 800791c:	f001 f96a 	bl	8008bf4 <RCCEx_PLL2_Config>
 8007920:	4603      	mov	r3, r0
 8007922:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007924:	e00c      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	3324      	adds	r3, #36	; 0x24
 800792a:	2101      	movs	r1, #1
 800792c:	4618      	mov	r0, r3
 800792e:	f001 fa13 	bl	8008d58 <RCCEx_PLL3_Config>
 8007932:	4603      	mov	r3, r0
 8007934:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007936:	e003      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	75fb      	strb	r3, [r7, #23]
      break;
 800793c:	e000      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800793e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007940:	7dfb      	ldrb	r3, [r7, #23]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d109      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007946:	4b32      	ldr	r3, [pc, #200]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007952:	492f      	ldr	r1, [pc, #188]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007954:	4313      	orrs	r3, r2
 8007956:	654b      	str	r3, [r1, #84]	; 0x54
 8007958:	e001      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800795a:	7dfb      	ldrb	r3, [r7, #23]
 800795c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	2b00      	cmp	r3, #0
 8007968:	d037      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800796e:	2b05      	cmp	r3, #5
 8007970:	d820      	bhi.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007972:	a201      	add	r2, pc, #4	; (adr r2, 8007978 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007978:	080079bb 	.word	0x080079bb
 800797c:	08007991 	.word	0x08007991
 8007980:	080079a3 	.word	0x080079a3
 8007984:	080079bb 	.word	0x080079bb
 8007988:	080079bb 	.word	0x080079bb
 800798c:	080079bb 	.word	0x080079bb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3304      	adds	r3, #4
 8007994:	2101      	movs	r1, #1
 8007996:	4618      	mov	r0, r3
 8007998:	f001 f92c 	bl	8008bf4 <RCCEx_PLL2_Config>
 800799c:	4603      	mov	r3, r0
 800799e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80079a0:	e00c      	b.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	3324      	adds	r3, #36	; 0x24
 80079a6:	2101      	movs	r1, #1
 80079a8:	4618      	mov	r0, r3
 80079aa:	f001 f9d5 	bl	8008d58 <RCCEx_PLL3_Config>
 80079ae:	4603      	mov	r3, r0
 80079b0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80079b2:	e003      	b.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	75fb      	strb	r3, [r7, #23]
      break;
 80079b8:	e000      	b.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80079ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079bc:	7dfb      	ldrb	r3, [r7, #23]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d109      	bne.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80079c2:	4b13      	ldr	r3, [pc, #76]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c6:	f023 0207 	bic.w	r2, r3, #7
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ce:	4910      	ldr	r1, [pc, #64]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079d0:	4313      	orrs	r3, r2
 80079d2:	654b      	str	r3, [r1, #84]	; 0x54
 80079d4:	e001      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d6:	7dfb      	ldrb	r3, [r7, #23]
 80079d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0304 	and.w	r3, r3, #4
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d040      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ec:	2b05      	cmp	r3, #5
 80079ee:	d827      	bhi.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80079f0:	a201      	add	r2, pc, #4	; (adr r2, 80079f8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80079f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f6:	bf00      	nop
 80079f8:	08007a47 	.word	0x08007a47
 80079fc:	08007a1d 	.word	0x08007a1d
 8007a00:	08007a2f 	.word	0x08007a2f
 8007a04:	08007a47 	.word	0x08007a47
 8007a08:	08007a47 	.word	0x08007a47
 8007a0c:	08007a47 	.word	0x08007a47
 8007a10:	58024400 	.word	0x58024400
 8007a14:	58024800 	.word	0x58024800
 8007a18:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3304      	adds	r3, #4
 8007a20:	2101      	movs	r1, #1
 8007a22:	4618      	mov	r0, r3
 8007a24:	f001 f8e6 	bl	8008bf4 <RCCEx_PLL2_Config>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a2c:	e00c      	b.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	3324      	adds	r3, #36	; 0x24
 8007a32:	2101      	movs	r1, #1
 8007a34:	4618      	mov	r0, r3
 8007a36:	f001 f98f 	bl	8008d58 <RCCEx_PLL3_Config>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a3e:	e003      	b.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	75fb      	strb	r3, [r7, #23]
      break;
 8007a44:	e000      	b.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007a46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a48:	7dfb      	ldrb	r3, [r7, #23]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10a      	bne.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a4e:	4bb2      	ldr	r3, [pc, #712]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a52:	f023 0207 	bic.w	r2, r3, #7
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a5c:	49ae      	ldr	r1, [pc, #696]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	658b      	str	r3, [r1, #88]	; 0x58
 8007a62:	e001      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a64:	7dfb      	ldrb	r3, [r7, #23]
 8007a66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0320 	and.w	r3, r3, #32
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d044      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a7e:	d01b      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a84:	d805      	bhi.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d022      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007a8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a8e:	d00a      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007a90:	e01b      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a96:	d01d      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a9c:	d01c      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007a9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007aa2:	d01b      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007aa4:	e011      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	2100      	movs	r1, #0
 8007aac:	4618      	mov	r0, r3
 8007aae:	f001 f8a1 	bl	8008bf4 <RCCEx_PLL2_Config>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007ab6:	e012      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3324      	adds	r3, #36	; 0x24
 8007abc:	2102      	movs	r1, #2
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f001 f94a 	bl	8008d58 <RCCEx_PLL3_Config>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007ac8:	e009      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	75fb      	strb	r3, [r7, #23]
      break;
 8007ace:	e006      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007ad0:	bf00      	nop
 8007ad2:	e004      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007ad4:	bf00      	nop
 8007ad6:	e002      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007ad8:	bf00      	nop
 8007ada:	e000      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007adc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ade:	7dfb      	ldrb	r3, [r7, #23]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10a      	bne.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ae4:	4b8c      	ldr	r3, [pc, #560]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007af2:	4989      	ldr	r1, [pc, #548]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007af4:	4313      	orrs	r3, r2
 8007af6:	654b      	str	r3, [r1, #84]	; 0x54
 8007af8:	e001      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
 8007afc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d044      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b14:	d01b      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b1a:	d805      	bhi.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d022      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b24:	d00a      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007b26:	e01b      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b2c:	d01d      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007b2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b32:	d01c      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007b34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b38:	d01b      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007b3a:	e011      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	2100      	movs	r1, #0
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 f856 	bl	8008bf4 <RCCEx_PLL2_Config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007b4c:	e012      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	3324      	adds	r3, #36	; 0x24
 8007b52:	2102      	movs	r1, #2
 8007b54:	4618      	mov	r0, r3
 8007b56:	f001 f8ff 	bl	8008d58 <RCCEx_PLL3_Config>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007b5e:	e009      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	75fb      	strb	r3, [r7, #23]
      break;
 8007b64:	e006      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007b66:	bf00      	nop
 8007b68:	e004      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007b6a:	bf00      	nop
 8007b6c:	e002      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007b6e:	bf00      	nop
 8007b70:	e000      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10a      	bne.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b7a:	4b67      	ldr	r3, [pc, #412]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b7e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b88:	4963      	ldr	r1, [pc, #396]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	658b      	str	r3, [r1, #88]	; 0x58
 8007b8e:	e001      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
 8007b92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d044      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ba6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007baa:	d01b      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007bac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bb0:	d805      	bhi.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d022      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bba:	d00a      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007bbc:	e01b      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bc2:	d01d      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007bc4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007bc8:	d01c      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007bca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007bce:	d01b      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007bd0:	e011      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f001 f80b 	bl	8008bf4 <RCCEx_PLL2_Config>
 8007bde:	4603      	mov	r3, r0
 8007be0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007be2:	e012      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3324      	adds	r3, #36	; 0x24
 8007be8:	2102      	movs	r1, #2
 8007bea:	4618      	mov	r0, r3
 8007bec:	f001 f8b4 	bl	8008d58 <RCCEx_PLL3_Config>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007bf4:	e009      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bfa:	e006      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007bfc:	bf00      	nop
 8007bfe:	e004      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007c00:	bf00      	nop
 8007c02:	e002      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007c04:	bf00      	nop
 8007c06:	e000      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10a      	bne.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007c10:	4b41      	ldr	r3, [pc, #260]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c14:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c1e:	493e      	ldr	r1, [pc, #248]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c20:	4313      	orrs	r3, r2
 8007c22:	658b      	str	r3, [r1, #88]	; 0x58
 8007c24:	e001      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
 8007c28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0308 	and.w	r3, r3, #8
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d01a      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c40:	d10a      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	3324      	adds	r3, #36	; 0x24
 8007c46:	2102      	movs	r1, #2
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f001 f885 	bl	8008d58 <RCCEx_PLL3_Config>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c58:	4b2f      	ldr	r3, [pc, #188]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c66:	492c      	ldr	r1, [pc, #176]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0310 	and.w	r3, r3, #16
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d01a      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c82:	d10a      	bne.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3324      	adds	r3, #36	; 0x24
 8007c88:	2102      	movs	r1, #2
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f001 f864 	bl	8008d58 <RCCEx_PLL3_Config>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c9a:	4b1f      	ldr	r3, [pc, #124]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ca8:	491b      	ldr	r1, [pc, #108]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d032      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cc4:	d00d      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cca:	d016      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d111      	bne.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 ff8c 	bl	8008bf4 <RCCEx_PLL2_Config>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007ce0:	e00c      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	3324      	adds	r3, #36	; 0x24
 8007ce6:	2102      	movs	r1, #2
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f001 f835 	bl	8008d58 <RCCEx_PLL3_Config>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007cf2:	e003      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8007cf8:	e000      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cfc:	7dfb      	ldrb	r3, [r7, #23]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10c      	bne.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d02:	4b05      	ldr	r3, [pc, #20]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d10:	4901      	ldr	r1, [pc, #4]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	658b      	str	r3, [r1, #88]	; 0x58
 8007d16:	e003      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007d18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d1c:	7dfb      	ldrb	r3, [r7, #23]
 8007d1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d02f      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d36:	d00c      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007d38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d3c:	d015      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d42:	d10f      	bne.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d44:	4b71      	ldr	r3, [pc, #452]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	4a70      	ldr	r2, [pc, #448]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007d50:	e00c      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3324      	adds	r3, #36	; 0x24
 8007d56:	2101      	movs	r1, #1
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f000 fffd 	bl	8008d58 <RCCEx_PLL3_Config>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007d62:	e003      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	75fb      	strb	r3, [r7, #23]
      break;
 8007d68:	e000      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d6c:	7dfb      	ldrb	r3, [r7, #23]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10a      	bne.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d72:	4b66      	ldr	r3, [pc, #408]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d80:	4962      	ldr	r1, [pc, #392]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	654b      	str	r3, [r1, #84]	; 0x54
 8007d86:	e001      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d88:	7dfb      	ldrb	r3, [r7, #23]
 8007d8a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d029      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007da4:	d007      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007da6:	e00f      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007da8:	4b58      	ldr	r3, [pc, #352]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	4a57      	ldr	r2, [pc, #348]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007db2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007db4:	e00b      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	3304      	adds	r3, #4
 8007dba:	2102      	movs	r1, #2
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 ff19 	bl	8008bf4 <RCCEx_PLL2_Config>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007dc6:	e002      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	75fb      	strb	r3, [r7, #23]
      break;
 8007dcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dce:	7dfb      	ldrb	r3, [r7, #23]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d109      	bne.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007dd4:	4b4d      	ldr	r3, [pc, #308]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007de0:	494a      	ldr	r1, [pc, #296]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007de6:	e001      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
 8007dea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00a      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3324      	adds	r3, #36	; 0x24
 8007dfc:	2102      	movs	r1, #2
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 ffaa 	bl	8008d58 <RCCEx_PLL3_Config>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d02f      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e22:	d00c      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e28:	d802      	bhi.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d011      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007e2e:	e00d      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e34:	d00f      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007e36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e3a:	d00e      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007e3c:	e006      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e3e:	4b33      	ldr	r3, [pc, #204]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e42:	4a32      	ldr	r2, [pc, #200]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007e4a:	e007      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e50:	e004      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007e52:	bf00      	nop
 8007e54:	e002      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007e56:	bf00      	nop
 8007e58:	e000      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007e5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d109      	bne.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e62:	4b2a      	ldr	r3, [pc, #168]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e6e:	4927      	ldr	r1, [pc, #156]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	654b      	str	r3, [r1, #84]	; 0x54
 8007e74:	e001      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
 8007e78:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d008      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e86:	4b21      	ldr	r3, [pc, #132]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e92:	491e      	ldr	r1, [pc, #120]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d008      	beq.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ea4:	4b19      	ldr	r3, [pc, #100]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ea8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eb0:	4916      	ldr	r1, [pc, #88]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00d      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ec2:	4b12      	ldr	r3, [pc, #72]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	4a11      	ldr	r2, [pc, #68]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ec8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ecc:	6113      	str	r3, [r2, #16]
 8007ece:	4b0f      	ldr	r3, [pc, #60]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ed0:	691a      	ldr	r2, [r3, #16]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007ed8:	490c      	ldr	r1, [pc, #48]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007eda:	4313      	orrs	r3, r2
 8007edc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	da08      	bge.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007ee6:	4b09      	ldr	r3, [pc, #36]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef2:	4906      	ldr	r1, [pc, #24]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007ef8:	7dbb      	ldrb	r3, [r7, #22]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	e000      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	58024400 	.word	0x58024400

08007f10 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b090      	sub	sp, #64	; 0x40
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f1e:	d150      	bne.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007f20:	4ba1      	ldr	r3, [pc, #644]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f24:	f003 0307 	and.w	r3, r3, #7
 8007f28:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	d844      	bhi.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007f30:	a201      	add	r2, pc, #4	; (adr r2, 8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f36:	bf00      	nop
 8007f38:	08007f4d 	.word	0x08007f4d
 8007f3c:	08007f5d 	.word	0x08007f5d
 8007f40:	08007f6d 	.word	0x08007f6d
 8007f44:	08007fb5 	.word	0x08007fb5
 8007f48:	08007f7d 	.word	0x08007f7d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 fd03 	bl	800895c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f5a:	e241      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f5c:	f107 0318 	add.w	r3, r7, #24
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fa63 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f6a:	e239      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f6c:	f107 030c 	add.w	r3, r7, #12
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 fba7 	bl	80086c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f7a:	e231      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007f7c:	4b8a      	ldr	r3, [pc, #552]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f84:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d102      	bne.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007f8c:	4b87      	ldr	r3, [pc, #540]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007f90:	e226      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f98:	d102      	bne.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007f9a:	4b85      	ldr	r3, [pc, #532]	; (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f9e:	e21f      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fa6:	d102      	bne.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007fa8:	4b82      	ldr	r3, [pc, #520]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007faa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fac:	e218      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fb2:	e215      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007fb4:	4b80      	ldr	r3, [pc, #512]	; (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fb8:	e212      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fbe:	bf00      	nop
 8007fc0:	e20e      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fc8:	d14f      	bne.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007fca:	4b77      	ldr	r3, [pc, #476]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fce:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007fd2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd6:	2b80      	cmp	r3, #128	; 0x80
 8007fd8:	d01c      	beq.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007fda:	2b80      	cmp	r3, #128	; 0x80
 8007fdc:	d804      	bhi.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d008      	beq.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007fe2:	2b40      	cmp	r3, #64	; 0x40
 8007fe4:	d00e      	beq.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007fe6:	e03c      	b.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007fe8:	2bc0      	cmp	r3, #192	; 0xc0
 8007fea:	d037      	beq.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ff0:	d018      	beq.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007ff2:	e036      	b.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 fcaf 	bl	800895c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008000:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008002:	e1ed      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008004:	f107 0318 	add.w	r3, r7, #24
 8008008:	4618      	mov	r0, r3
 800800a:	f000 fa0f 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008012:	e1e5      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008014:	f107 030c 	add.w	r3, r7, #12
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fb53 	bl	80086c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008022:	e1dd      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008024:	4b60      	ldr	r3, [pc, #384]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008028:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800802c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800802e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008030:	2b00      	cmp	r3, #0
 8008032:	d102      	bne.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008034:	4b5d      	ldr	r3, [pc, #372]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008036:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008038:	e1d2      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800803a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008040:	d102      	bne.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8008042:	4b5b      	ldr	r3, [pc, #364]	; (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008044:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008046:	e1cb      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800804e:	d102      	bne.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8008050:	4b58      	ldr	r3, [pc, #352]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008052:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008054:	e1c4      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008056:	2300      	movs	r3, #0
 8008058:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800805a:	e1c1      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800805c:	4b56      	ldr	r3, [pc, #344]	; (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800805e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008060:	e1be      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008062:	2300      	movs	r3, #0
 8008064:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008066:	bf00      	nop
 8008068:	e1ba      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008070:	d153      	bne.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008072:	4b4d      	ldr	r3, [pc, #308]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008076:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800807a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800807c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008082:	d01f      	beq.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008084:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008088:	d805      	bhi.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00a      	beq.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800808e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008092:	d00f      	beq.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008094:	e03d      	b.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8008096:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800809a:	d037      	beq.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800809c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080a0:	d018      	beq.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80080a2:	e036      	b.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 fc57 	bl	800895c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080b2:	e195      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080b4:	f107 0318 	add.w	r3, r7, #24
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 f9b7 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080c2:	e18d      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080c4:	f107 030c 	add.w	r3, r7, #12
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 fafb 	bl	80086c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080d2:	e185      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80080d4:	4b34      	ldr	r3, [pc, #208]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80080d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080dc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80080de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d102      	bne.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80080e4:	4b31      	ldr	r3, [pc, #196]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80080e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80080e8:	e17a      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80080ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080f0:	d102      	bne.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80080f2:	4b2f      	ldr	r3, [pc, #188]	; (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80080f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080f6:	e173      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80080f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080fe:	d102      	bne.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8008100:	4b2c      	ldr	r3, [pc, #176]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008102:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008104:	e16c      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008106:	2300      	movs	r3, #0
 8008108:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800810a:	e169      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800810c:	4b2a      	ldr	r3, [pc, #168]	; (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800810e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008110:	e166      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008116:	bf00      	nop
 8008118:	e162      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008120:	d15d      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008122:	4b21      	ldr	r3, [pc, #132]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008126:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800812a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008132:	d01f      	beq.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008134:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008138:	d805      	bhi.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800813e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008142:	d00f      	beq.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008144:	e047      	b.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008146:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800814a:	d041      	beq.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800814c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008150:	d018      	beq.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008152:	e040      	b.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008158:	4618      	mov	r0, r3
 800815a:	f000 fbff 	bl	800895c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800815e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008160:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008162:	e13d      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008164:	f107 0318 	add.w	r3, r7, #24
 8008168:	4618      	mov	r0, r3
 800816a:	f000 f95f 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008172:	e135      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008174:	f107 030c 	add.w	r3, r7, #12
 8008178:	4618      	mov	r0, r3
 800817a:	f000 faa3 	bl	80086c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008182:	e12d      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008184:	4b08      	ldr	r3, [pc, #32]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008188:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800818c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800818e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008190:	2b00      	cmp	r3, #0
 8008192:	d102      	bne.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008194:	4b05      	ldr	r3, [pc, #20]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008196:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008198:	e122      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800819a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800819c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081a0:	d10c      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80081a2:	4b03      	ldr	r3, [pc, #12]	; (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80081a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081a6:	e11b      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80081a8:	58024400 	.word	0x58024400
 80081ac:	03d09000 	.word	0x03d09000
 80081b0:	003d0900 	.word	0x003d0900
 80081b4:	017d7840 	.word	0x017d7840
 80081b8:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80081bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081c2:	d102      	bne.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80081c4:	4b89      	ldr	r3, [pc, #548]	; (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80081c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081c8:	e10a      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081ce:	e107      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80081d0:	4b87      	ldr	r3, [pc, #540]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80081d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081d4:	e104      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80081d6:	2300      	movs	r3, #0
 80081d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081da:	bf00      	nop
 80081dc:	e100      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081e4:	d153      	bne.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80081e6:	4b83      	ldr	r3, [pc, #524]	; (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80081e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ea:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80081ee:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80081f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081f6:	d01f      	beq.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80081f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081fc:	d805      	bhi.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00a      	beq.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8008202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008206:	d00f      	beq.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008208:	e03d      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800820a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800820e:	d037      	beq.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8008210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008214:	d018      	beq.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008216:	e036      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800821c:	4618      	mov	r0, r3
 800821e:	f000 fb9d 	bl	800895c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008224:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008226:	e0db      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008228:	f107 0318 	add.w	r3, r7, #24
 800822c:	4618      	mov	r0, r3
 800822e:	f000 f8fd 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008236:	e0d3      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008238:	f107 030c 	add.w	r3, r7, #12
 800823c:	4618      	mov	r0, r3
 800823e:	f000 fa41 	bl	80086c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008246:	e0cb      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008248:	4b6a      	ldr	r3, [pc, #424]	; (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800824a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800824c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008250:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008254:	2b00      	cmp	r3, #0
 8008256:	d102      	bne.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008258:	4b67      	ldr	r3, [pc, #412]	; (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800825a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800825c:	e0c0      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800825e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008260:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008264:	d102      	bne.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8008266:	4b65      	ldr	r3, [pc, #404]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008268:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800826a:	e0b9      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800826c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800826e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008272:	d102      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8008274:	4b5d      	ldr	r3, [pc, #372]	; (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008276:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008278:	e0b2      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800827a:	2300      	movs	r3, #0
 800827c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800827e:	e0af      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008280:	4b5b      	ldr	r3, [pc, #364]	; (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008282:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008284:	e0ac      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008286:	2300      	movs	r3, #0
 8008288:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800828a:	bf00      	nop
 800828c:	e0a8      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008294:	d13d      	bne.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008296:	4b57      	ldr	r3, [pc, #348]	; (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800829a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800829e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80082a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082a6:	d00c      	beq.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80082a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082ac:	d011      	beq.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d12b      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082b2:	f107 0318 	add.w	r3, r7, #24
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 f8b8 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082c0:	e08e      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082c2:	f107 030c 	add.w	r3, r7, #12
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 f9fc 	bl	80086c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082d0:	e086      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80082d2:	4b48      	ldr	r3, [pc, #288]	; (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80082d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082da:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80082dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d102      	bne.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80082e2:	4b45      	ldr	r3, [pc, #276]	; (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80082e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80082e6:	e07b      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80082e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082ee:	d102      	bne.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80082f0:	4b42      	ldr	r3, [pc, #264]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80082f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082f4:	e074      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80082f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082fc:	d102      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80082fe:	4b3b      	ldr	r3, [pc, #236]	; (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008300:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008302:	e06d      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008304:	2300      	movs	r3, #0
 8008306:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008308:	e06a      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800830a:	2300      	movs	r3, #0
 800830c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800830e:	bf00      	nop
 8008310:	e066      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008318:	d11f      	bne.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800831a:	4b36      	ldr	r3, [pc, #216]	; (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800831c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800831e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008322:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800832a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800832e:	d008      	beq.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008330:	e00f      	b.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008336:	4618      	mov	r0, r3
 8008338:	f000 fb10 	bl	800895c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008340:	e04e      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008342:	f107 0318 	add.w	r3, r7, #24
 8008346:	4618      	mov	r0, r3
 8008348:	f000 f870 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800834c:	6a3b      	ldr	r3, [r7, #32]
 800834e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008350:	e046      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008352:	2300      	movs	r3, #0
 8008354:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008356:	bf00      	nop
 8008358:	e042      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008360:	d13c      	bne.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008362:	4b24      	ldr	r3, [pc, #144]	; (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008366:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800836a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008372:	d01e      	beq.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8008374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008378:	d805      	bhi.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00d      	beq.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800837e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008382:	d00e      	beq.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008384:	e026      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8008386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800838a:	d01d      	beq.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800838c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008390:	d01d      	beq.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008392:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008396:	d014      	beq.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008398:	e01c      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800839a:	f000 f831 	bl	8008400 <HAL_RCCEx_GetD3PCLK1Freq>
 800839e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80083a0:	e01e      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083a2:	f107 0318 	add.w	r3, r7, #24
 80083a6:	4618      	mov	r0, r3
 80083a8:	f000 f840 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083b0:	e016      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083b2:	f107 030c 	add.w	r3, r7, #12
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 f984 	bl	80086c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083c0:	e00e      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80083c2:	4b0d      	ldr	r3, [pc, #52]	; (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80083c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083c6:	e00b      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80083c8:	4b0c      	ldr	r3, [pc, #48]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80083ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083cc:	e008      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80083ce:	4b07      	ldr	r3, [pc, #28]	; (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80083d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083d2:	e005      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083d8:	bf00      	nop
 80083da:	e001      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80083dc:	2300      	movs	r3, #0
 80083de:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80083e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3740      	adds	r7, #64	; 0x40
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	017d7840 	.word	0x017d7840
 80083f0:	00bb8000 	.word	0x00bb8000
 80083f4:	58024400 	.word	0x58024400
 80083f8:	03d09000 	.word	0x03d09000
 80083fc:	003d0900 	.word	0x003d0900

08008400 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008404:	f7fe fe4a 	bl	800709c <HAL_RCC_GetHCLKFreq>
 8008408:	4601      	mov	r1, r0
 800840a:	4b06      	ldr	r3, [pc, #24]	; (8008424 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	091b      	lsrs	r3, r3, #4
 8008410:	f003 0307 	and.w	r3, r3, #7
 8008414:	4a04      	ldr	r2, [pc, #16]	; (8008428 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008416:	5cd3      	ldrb	r3, [r2, r3]
 8008418:	f003 031f 	and.w	r3, r3, #31
 800841c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008420:	4618      	mov	r0, r3
 8008422:	bd80      	pop	{r7, pc}
 8008424:	58024400 	.word	0x58024400
 8008428:	0800cd7c 	.word	0x0800cd7c

0800842c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800842c:	b480      	push	{r7}
 800842e:	b089      	sub	sp, #36	; 0x24
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008434:	4b9d      	ldr	r3, [pc, #628]	; (80086ac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008438:	f003 0303 	and.w	r3, r3, #3
 800843c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800843e:	4b9b      	ldr	r3, [pc, #620]	; (80086ac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008442:	0b1b      	lsrs	r3, r3, #12
 8008444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008448:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800844a:	4b98      	ldr	r3, [pc, #608]	; (80086ac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800844c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844e:	091b      	lsrs	r3, r3, #4
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008456:	4b95      	ldr	r3, [pc, #596]	; (80086ac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845a:	08db      	lsrs	r3, r3, #3
 800845c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	fb02 f303 	mul.w	r3, r2, r3
 8008466:	ee07 3a90 	vmov	s15, r3
 800846a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 810a 	beq.w	800868e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d05a      	beq.n	8008536 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008480:	2b01      	cmp	r3, #1
 8008482:	d302      	bcc.n	800848a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008484:	2b02      	cmp	r3, #2
 8008486:	d078      	beq.n	800857a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008488:	e099      	b.n	80085be <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800848a:	4b88      	ldr	r3, [pc, #544]	; (80086ac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0320 	and.w	r3, r3, #32
 8008492:	2b00      	cmp	r3, #0
 8008494:	d02d      	beq.n	80084f2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008496:	4b85      	ldr	r3, [pc, #532]	; (80086ac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	08db      	lsrs	r3, r3, #3
 800849c:	f003 0303 	and.w	r3, r3, #3
 80084a0:	4a83      	ldr	r2, [pc, #524]	; (80086b0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80084a2:	fa22 f303 	lsr.w	r3, r2, r3
 80084a6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	ee07 3a90 	vmov	s15, r3
 80084ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	ee07 3a90 	vmov	s15, r3
 80084b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084c0:	4b7a      	ldr	r3, [pc, #488]	; (80086ac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80084c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c8:	ee07 3a90 	vmov	s15, r3
 80084cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80084d4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80084d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ec:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80084f0:	e087      	b.n	8008602 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	ee07 3a90 	vmov	s15, r3
 80084f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084fc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80086b8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8008500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008504:	4b69      	ldr	r3, [pc, #420]	; (80086ac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800850c:	ee07 3a90 	vmov	s15, r3
 8008510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008514:	ed97 6a03 	vldr	s12, [r7, #12]
 8008518:	eddf 5a66 	vldr	s11, [pc, #408]	; 80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800851c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008520:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008524:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800852c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008530:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008534:	e065      	b.n	8008602 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	ee07 3a90 	vmov	s15, r3
 800853c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008540:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008548:	4b58      	ldr	r3, [pc, #352]	; (80086ac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800854a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008550:	ee07 3a90 	vmov	s15, r3
 8008554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008558:	ed97 6a03 	vldr	s12, [r7, #12]
 800855c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008560:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008564:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008568:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800856c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008574:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008578:	e043      	b.n	8008602 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	ee07 3a90 	vmov	s15, r3
 8008580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008584:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80086c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008588:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800858c:	4b47      	ldr	r3, [pc, #284]	; (80086ac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800858e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008594:	ee07 3a90 	vmov	s15, r3
 8008598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800859c:	ed97 6a03 	vldr	s12, [r7, #12]
 80085a0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80085a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085bc:	e021      	b.n	8008602 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	ee07 3a90 	vmov	s15, r3
 80085c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80085cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085d0:	4b36      	ldr	r3, [pc, #216]	; (80086ac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80085d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d8:	ee07 3a90 	vmov	s15, r3
 80085dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80085e4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80085e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008600:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008602:	4b2a      	ldr	r3, [pc, #168]	; (80086ac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008606:	0a5b      	lsrs	r3, r3, #9
 8008608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800860c:	ee07 3a90 	vmov	s15, r3
 8008610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008614:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008618:	ee37 7a87 	vadd.f32	s14, s15, s14
 800861c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008624:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008628:	ee17 2a90 	vmov	r2, s15
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008630:	4b1e      	ldr	r3, [pc, #120]	; (80086ac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008634:	0c1b      	lsrs	r3, r3, #16
 8008636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800863a:	ee07 3a90 	vmov	s15, r3
 800863e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008642:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008646:	ee37 7a87 	vadd.f32	s14, s15, s14
 800864a:	edd7 6a07 	vldr	s13, [r7, #28]
 800864e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008656:	ee17 2a90 	vmov	r2, s15
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800865e:	4b13      	ldr	r3, [pc, #76]	; (80086ac <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008662:	0e1b      	lsrs	r3, r3, #24
 8008664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008668:	ee07 3a90 	vmov	s15, r3
 800866c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008670:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008674:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008678:	edd7 6a07 	vldr	s13, [r7, #28]
 800867c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008684:	ee17 2a90 	vmov	r2, s15
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800868c:	e008      	b.n	80086a0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	609a      	str	r2, [r3, #8]
}
 80086a0:	bf00      	nop
 80086a2:	3724      	adds	r7, #36	; 0x24
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	58024400 	.word	0x58024400
 80086b0:	03d09000 	.word	0x03d09000
 80086b4:	46000000 	.word	0x46000000
 80086b8:	4c742400 	.word	0x4c742400
 80086bc:	4a742400 	.word	0x4a742400
 80086c0:	4bbebc20 	.word	0x4bbebc20

080086c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b089      	sub	sp, #36	; 0x24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086cc:	4b9d      	ldr	r3, [pc, #628]	; (8008944 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d0:	f003 0303 	and.w	r3, r3, #3
 80086d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80086d6:	4b9b      	ldr	r3, [pc, #620]	; (8008944 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086da:	0d1b      	lsrs	r3, r3, #20
 80086dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80086e2:	4b98      	ldr	r3, [pc, #608]	; (8008944 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e6:	0a1b      	lsrs	r3, r3, #8
 80086e8:	f003 0301 	and.w	r3, r3, #1
 80086ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80086ee:	4b95      	ldr	r3, [pc, #596]	; (8008944 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f2:	08db      	lsrs	r3, r3, #3
 80086f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	fb02 f303 	mul.w	r3, r2, r3
 80086fe:	ee07 3a90 	vmov	s15, r3
 8008702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008706:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 810a 	beq.w	8008926 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d05a      	beq.n	80087ce <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008718:	2b01      	cmp	r3, #1
 800871a:	d302      	bcc.n	8008722 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800871c:	2b02      	cmp	r3, #2
 800871e:	d078      	beq.n	8008812 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008720:	e099      	b.n	8008856 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008722:	4b88      	ldr	r3, [pc, #544]	; (8008944 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0320 	and.w	r3, r3, #32
 800872a:	2b00      	cmp	r3, #0
 800872c:	d02d      	beq.n	800878a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800872e:	4b85      	ldr	r3, [pc, #532]	; (8008944 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	08db      	lsrs	r3, r3, #3
 8008734:	f003 0303 	and.w	r3, r3, #3
 8008738:	4a83      	ldr	r2, [pc, #524]	; (8008948 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800873a:	fa22 f303 	lsr.w	r3, r2, r3
 800873e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	ee07 3a90 	vmov	s15, r3
 8008746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	ee07 3a90 	vmov	s15, r3
 8008750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008754:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008758:	4b7a      	ldr	r3, [pc, #488]	; (8008944 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800875a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008760:	ee07 3a90 	vmov	s15, r3
 8008764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008768:	ed97 6a03 	vldr	s12, [r7, #12]
 800876c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800894c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008770:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008774:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008778:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800877c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008784:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008788:	e087      	b.n	800889a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	ee07 3a90 	vmov	s15, r3
 8008790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008794:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879c:	4b69      	ldr	r3, [pc, #420]	; (8008944 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800879e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a4:	ee07 3a90 	vmov	s15, r3
 80087a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80087b0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800894c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80087b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087cc:	e065      	b.n	800889a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	ee07 3a90 	vmov	s15, r3
 80087d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80087dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087e0:	4b58      	ldr	r3, [pc, #352]	; (8008944 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e8:	ee07 3a90 	vmov	s15, r3
 80087ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80087f4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800894c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80087f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008800:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008804:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800880c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008810:	e043      	b.n	800889a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	ee07 3a90 	vmov	s15, r3
 8008818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008958 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008824:	4b47      	ldr	r3, [pc, #284]	; (8008944 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882c:	ee07 3a90 	vmov	s15, r3
 8008830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008834:	ed97 6a03 	vldr	s12, [r7, #12]
 8008838:	eddf 5a44 	vldr	s11, [pc, #272]	; 800894c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800883c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008840:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008844:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008850:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008854:	e021      	b.n	800889a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	ee07 3a90 	vmov	s15, r3
 800885c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008860:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008868:	4b36      	ldr	r3, [pc, #216]	; (8008944 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800886a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008870:	ee07 3a90 	vmov	s15, r3
 8008874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008878:	ed97 6a03 	vldr	s12, [r7, #12]
 800887c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800894c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008880:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008888:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800888c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008894:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008898:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800889a:	4b2a      	ldr	r3, [pc, #168]	; (8008944 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800889c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889e:	0a5b      	lsrs	r3, r3, #9
 80088a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088a4:	ee07 3a90 	vmov	s15, r3
 80088a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80088b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088c0:	ee17 2a90 	vmov	r2, s15
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80088c8:	4b1e      	ldr	r3, [pc, #120]	; (8008944 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088cc:	0c1b      	lsrs	r3, r3, #16
 80088ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d2:	ee07 3a90 	vmov	s15, r3
 80088d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80088e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088ee:	ee17 2a90 	vmov	r2, s15
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80088f6:	4b13      	ldr	r3, [pc, #76]	; (8008944 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fa:	0e1b      	lsrs	r3, r3, #24
 80088fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008900:	ee07 3a90 	vmov	s15, r3
 8008904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008908:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800890c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008910:	edd7 6a07 	vldr	s13, [r7, #28]
 8008914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800891c:	ee17 2a90 	vmov	r2, s15
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008924:	e008      	b.n	8008938 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	609a      	str	r2, [r3, #8]
}
 8008938:	bf00      	nop
 800893a:	3724      	adds	r7, #36	; 0x24
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	58024400 	.word	0x58024400
 8008948:	03d09000 	.word	0x03d09000
 800894c:	46000000 	.word	0x46000000
 8008950:	4c742400 	.word	0x4c742400
 8008954:	4a742400 	.word	0x4a742400
 8008958:	4bbebc20 	.word	0x4bbebc20

0800895c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800895c:	b480      	push	{r7}
 800895e:	b089      	sub	sp, #36	; 0x24
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008964:	4b9d      	ldr	r3, [pc, #628]	; (8008bdc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008968:	f003 0303 	and.w	r3, r3, #3
 800896c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800896e:	4b9b      	ldr	r3, [pc, #620]	; (8008bdc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008972:	091b      	lsrs	r3, r3, #4
 8008974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008978:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800897a:	4b98      	ldr	r3, [pc, #608]	; (8008bdc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800897c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008984:	4b95      	ldr	r3, [pc, #596]	; (8008bdc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008988:	08db      	lsrs	r3, r3, #3
 800898a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800898e:	693a      	ldr	r2, [r7, #16]
 8008990:	fb02 f303 	mul.w	r3, r2, r3
 8008994:	ee07 3a90 	vmov	s15, r3
 8008998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 810a 	beq.w	8008bbc <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d05a      	beq.n	8008a64 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d302      	bcc.n	80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d078      	beq.n	8008aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80089b6:	e099      	b.n	8008aec <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089b8:	4b88      	ldr	r3, [pc, #544]	; (8008bdc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0320 	and.w	r3, r3, #32
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d02d      	beq.n	8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089c4:	4b85      	ldr	r3, [pc, #532]	; (8008bdc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	08db      	lsrs	r3, r3, #3
 80089ca:	f003 0303 	and.w	r3, r3, #3
 80089ce:	4a84      	ldr	r2, [pc, #528]	; (8008be0 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80089d0:	fa22 f303 	lsr.w	r3, r2, r3
 80089d4:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	ee07 3a90 	vmov	s15, r3
 80089dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	ee07 3a90 	vmov	s15, r3
 80089e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ee:	4b7b      	ldr	r3, [pc, #492]	; (8008bdc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80089f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f6:	ee07 3a90 	vmov	s15, r3
 80089fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a02:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008be4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a1a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008a1e:	e087      	b.n	8008b30 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	ee07 3a90 	vmov	s15, r3
 8008a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008be8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8008a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a32:	4b6a      	ldr	r3, [pc, #424]	; (8008bdc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a3a:	ee07 3a90 	vmov	s15, r3
 8008a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a46:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008be4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a62:	e065      	b.n	8008b30 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	ee07 3a90 	vmov	s15, r3
 8008a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008bec <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a76:	4b59      	ldr	r3, [pc, #356]	; (8008bdc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7e:	ee07 3a90 	vmov	s15, r3
 8008a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008be4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008aa6:	e043      	b.n	8008b30 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aba:	4b48      	ldr	r3, [pc, #288]	; (8008bdc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ace:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008be4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ae6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008aea:	e021      	b.n	8008b30 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	ee07 3a90 	vmov	s15, r3
 8008af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008bec <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008afe:	4b37      	ldr	r3, [pc, #220]	; (8008bdc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b06:	ee07 3a90 	vmov	s15, r3
 8008b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b12:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008be4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b2e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008b30:	4b2a      	ldr	r3, [pc, #168]	; (8008bdc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b34:	0a5b      	lsrs	r3, r3, #9
 8008b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b3a:	ee07 3a90 	vmov	s15, r3
 8008b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b56:	ee17 2a90 	vmov	r2, s15
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008b5e:	4b1f      	ldr	r3, [pc, #124]	; (8008bdc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b62:	0c1b      	lsrs	r3, r3, #16
 8008b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b68:	ee07 3a90 	vmov	s15, r3
 8008b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b78:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b84:	ee17 2a90 	vmov	r2, s15
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008b8c:	4b13      	ldr	r3, [pc, #76]	; (8008bdc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b90:	0e1b      	lsrs	r3, r3, #24
 8008b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b96:	ee07 3a90 	vmov	s15, r3
 8008b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ba2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ba6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008baa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bb2:	ee17 2a90 	vmov	r2, s15
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008bba:	e008      	b.n	8008bce <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	609a      	str	r2, [r3, #8]
}
 8008bce:	bf00      	nop
 8008bd0:	3724      	adds	r7, #36	; 0x24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	58024400 	.word	0x58024400
 8008be0:	03d09000 	.word	0x03d09000
 8008be4:	46000000 	.word	0x46000000
 8008be8:	4c742400 	.word	0x4c742400
 8008bec:	4a742400 	.word	0x4a742400
 8008bf0:	4bbebc20 	.word	0x4bbebc20

08008bf4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c02:	4b53      	ldr	r3, [pc, #332]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c06:	f003 0303 	and.w	r3, r3, #3
 8008c0a:	2b03      	cmp	r3, #3
 8008c0c:	d101      	bne.n	8008c12 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e099      	b.n	8008d46 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008c12:	4b4f      	ldr	r3, [pc, #316]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a4e      	ldr	r2, [pc, #312]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008c18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c1e:	f7f9 fb21 	bl	8002264 <HAL_GetTick>
 8008c22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c24:	e008      	b.n	8008c38 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008c26:	f7f9 fb1d 	bl	8002264 <HAL_GetTick>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d901      	bls.n	8008c38 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e086      	b.n	8008d46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c38:	4b45      	ldr	r3, [pc, #276]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1f0      	bne.n	8008c26 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008c44:	4b42      	ldr	r3, [pc, #264]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c48:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	031b      	lsls	r3, r3, #12
 8008c52:	493f      	ldr	r1, [pc, #252]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008c54:	4313      	orrs	r3, r2
 8008c56:	628b      	str	r3, [r1, #40]	; 0x28
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	3b01      	subs	r3, #1
 8008c68:	025b      	lsls	r3, r3, #9
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	431a      	orrs	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	041b      	lsls	r3, r3, #16
 8008c76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c7a:	431a      	orrs	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	3b01      	subs	r3, #1
 8008c82:	061b      	lsls	r3, r3, #24
 8008c84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c88:	4931      	ldr	r1, [pc, #196]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008c8e:	4b30      	ldr	r3, [pc, #192]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	492d      	ldr	r1, [pc, #180]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008ca0:	4b2b      	ldr	r3, [pc, #172]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca4:	f023 0220 	bic.w	r2, r3, #32
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	4928      	ldr	r1, [pc, #160]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008cb2:	4b27      	ldr	r3, [pc, #156]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb6:	4a26      	ldr	r2, [pc, #152]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008cb8:	f023 0310 	bic.w	r3, r3, #16
 8008cbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008cbe:	4b24      	ldr	r3, [pc, #144]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008cc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cc2:	4b24      	ldr	r3, [pc, #144]	; (8008d54 <RCCEx_PLL2_Config+0x160>)
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	69d2      	ldr	r2, [r2, #28]
 8008cca:	00d2      	lsls	r2, r2, #3
 8008ccc:	4920      	ldr	r1, [pc, #128]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008cd2:	4b1f      	ldr	r3, [pc, #124]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd6:	4a1e      	ldr	r2, [pc, #120]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008cd8:	f043 0310 	orr.w	r3, r3, #16
 8008cdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d106      	bne.n	8008cf2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ce4:	4b1a      	ldr	r3, [pc, #104]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce8:	4a19      	ldr	r2, [pc, #100]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008cea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008cf0:	e00f      	b.n	8008d12 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d106      	bne.n	8008d06 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008cf8:	4b15      	ldr	r3, [pc, #84]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	4a14      	ldr	r2, [pc, #80]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d04:	e005      	b.n	8008d12 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008d06:	4b12      	ldr	r3, [pc, #72]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	4a11      	ldr	r2, [pc, #68]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008d0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008d12:	4b0f      	ldr	r3, [pc, #60]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a0e      	ldr	r2, [pc, #56]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008d18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d1e:	f7f9 faa1 	bl	8002264 <HAL_GetTick>
 8008d22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d24:	e008      	b.n	8008d38 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008d26:	f7f9 fa9d 	bl	8002264 <HAL_GetTick>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d901      	bls.n	8008d38 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e006      	b.n	8008d46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d38:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <RCCEx_PLL2_Config+0x15c>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d0f0      	beq.n	8008d26 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	58024400 	.word	0x58024400
 8008d54:	ffff0007 	.word	0xffff0007

08008d58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d66:	4b53      	ldr	r3, [pc, #332]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6a:	f003 0303 	and.w	r3, r3, #3
 8008d6e:	2b03      	cmp	r3, #3
 8008d70:	d101      	bne.n	8008d76 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e099      	b.n	8008eaa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008d76:	4b4f      	ldr	r3, [pc, #316]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a4e      	ldr	r2, [pc, #312]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d82:	f7f9 fa6f 	bl	8002264 <HAL_GetTick>
 8008d86:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d88:	e008      	b.n	8008d9c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d8a:	f7f9 fa6b 	bl	8002264 <HAL_GetTick>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d901      	bls.n	8008d9c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	e086      	b.n	8008eaa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d9c:	4b45      	ldr	r3, [pc, #276]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1f0      	bne.n	8008d8a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008da8:	4b42      	ldr	r3, [pc, #264]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	051b      	lsls	r3, r3, #20
 8008db6:	493f      	ldr	r1, [pc, #252]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008db8:	4313      	orrs	r3, r2
 8008dba:	628b      	str	r3, [r1, #40]	; 0x28
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	025b      	lsls	r3, r3, #9
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	431a      	orrs	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	041b      	lsls	r3, r3, #16
 8008dda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008dde:	431a      	orrs	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	061b      	lsls	r3, r3, #24
 8008de8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008dec:	4931      	ldr	r1, [pc, #196]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008dee:	4313      	orrs	r3, r2
 8008df0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008df2:	4b30      	ldr	r3, [pc, #192]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	492d      	ldr	r1, [pc, #180]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008e00:	4313      	orrs	r3, r2
 8008e02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008e04:	4b2b      	ldr	r3, [pc, #172]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	4928      	ldr	r1, [pc, #160]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008e12:	4313      	orrs	r3, r2
 8008e14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008e16:	4b27      	ldr	r3, [pc, #156]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1a:	4a26      	ldr	r2, [pc, #152]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008e22:	4b24      	ldr	r3, [pc, #144]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e26:	4b24      	ldr	r3, [pc, #144]	; (8008eb8 <RCCEx_PLL3_Config+0x160>)
 8008e28:	4013      	ands	r3, r2
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	69d2      	ldr	r2, [r2, #28]
 8008e2e:	00d2      	lsls	r2, r2, #3
 8008e30:	4920      	ldr	r1, [pc, #128]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008e32:	4313      	orrs	r3, r2
 8008e34:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008e36:	4b1f      	ldr	r3, [pc, #124]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3a:	4a1e      	ldr	r2, [pc, #120]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d106      	bne.n	8008e56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008e48:	4b1a      	ldr	r3, [pc, #104]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4c:	4a19      	ldr	r2, [pc, #100]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008e4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008e52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e54:	e00f      	b.n	8008e76 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d106      	bne.n	8008e6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008e5c:	4b15      	ldr	r3, [pc, #84]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e60:	4a14      	ldr	r2, [pc, #80]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008e62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e68:	e005      	b.n	8008e76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008e6a:	4b12      	ldr	r3, [pc, #72]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6e:	4a11      	ldr	r2, [pc, #68]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008e70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008e76:	4b0f      	ldr	r3, [pc, #60]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a0e      	ldr	r2, [pc, #56]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e82:	f7f9 f9ef 	bl	8002264 <HAL_GetTick>
 8008e86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e88:	e008      	b.n	8008e9c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008e8a:	f7f9 f9eb 	bl	8002264 <HAL_GetTick>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d901      	bls.n	8008e9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e006      	b.n	8008eaa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e9c:	4b05      	ldr	r3, [pc, #20]	; (8008eb4 <RCCEx_PLL3_Config+0x15c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0f0      	beq.n	8008e8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	58024400 	.word	0x58024400
 8008eb8:	ffff0007 	.word	0xffff0007

08008ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d101      	bne.n	8008ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e01d      	b.n	8008f0a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d106      	bne.n	8008ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7f8 fc8c 	bl	8001800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2202      	movs	r2, #2
 8008eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	4619      	mov	r1, r3
 8008efa:	4610      	mov	r0, r2
 8008efc:	f000 f97c 	bl	80091f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
	...

08008f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68da      	ldr	r2, [r3, #12]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f042 0201 	orr.w	r2, r2, #1
 8008f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	689a      	ldr	r2, [r3, #8]
 8008f32:	4b0c      	ldr	r3, [pc, #48]	; (8008f64 <HAL_TIM_Base_Start_IT+0x50>)
 8008f34:	4013      	ands	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2b06      	cmp	r3, #6
 8008f3c:	d00b      	beq.n	8008f56 <HAL_TIM_Base_Start_IT+0x42>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f44:	d007      	beq.n	8008f56 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f042 0201 	orr.w	r2, r2, #1
 8008f54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	00010007 	.word	0x00010007

08008f68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	f003 0302 	and.w	r3, r3, #2
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d122      	bne.n	8008fc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	f003 0302 	and.w	r3, r3, #2
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d11b      	bne.n	8008fc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f06f 0202 	mvn.w	r2, #2
 8008f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	f003 0303 	and.w	r3, r3, #3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f905 	bl	80091ba <HAL_TIM_IC_CaptureCallback>
 8008fb0:	e005      	b.n	8008fbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f8f7 	bl	80091a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f908 	bl	80091ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	f003 0304 	and.w	r3, r3, #4
 8008fce:	2b04      	cmp	r3, #4
 8008fd0:	d122      	bne.n	8009018 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f003 0304 	and.w	r3, r3, #4
 8008fdc:	2b04      	cmp	r3, #4
 8008fde:	d11b      	bne.n	8009018 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f06f 0204 	mvn.w	r2, #4
 8008fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2202      	movs	r2, #2
 8008fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d003      	beq.n	8009006 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f8db 	bl	80091ba <HAL_TIM_IC_CaptureCallback>
 8009004:	e005      	b.n	8009012 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f8cd 	bl	80091a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 f8de 	bl	80091ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	f003 0308 	and.w	r3, r3, #8
 8009022:	2b08      	cmp	r3, #8
 8009024:	d122      	bne.n	800906c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	f003 0308 	and.w	r3, r3, #8
 8009030:	2b08      	cmp	r3, #8
 8009032:	d11b      	bne.n	800906c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f06f 0208 	mvn.w	r2, #8
 800903c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2204      	movs	r2, #4
 8009042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	f003 0303 	and.w	r3, r3, #3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d003      	beq.n	800905a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f8b1 	bl	80091ba <HAL_TIM_IC_CaptureCallback>
 8009058:	e005      	b.n	8009066 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f8a3 	bl	80091a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f8b4 	bl	80091ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	f003 0310 	and.w	r3, r3, #16
 8009076:	2b10      	cmp	r3, #16
 8009078:	d122      	bne.n	80090c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	f003 0310 	and.w	r3, r3, #16
 8009084:	2b10      	cmp	r3, #16
 8009086:	d11b      	bne.n	80090c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f06f 0210 	mvn.w	r2, #16
 8009090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2208      	movs	r2, #8
 8009096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d003      	beq.n	80090ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f887 	bl	80091ba <HAL_TIM_IC_CaptureCallback>
 80090ac:	e005      	b.n	80090ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f879 	bl	80091a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 f88a 	bl	80091ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	f003 0301 	and.w	r3, r3, #1
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d10e      	bne.n	80090ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	f003 0301 	and.w	r3, r3, #1
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d107      	bne.n	80090ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f06f 0201 	mvn.w	r2, #1
 80090e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7f7 fcfa 	bl	8000ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090f6:	2b80      	cmp	r3, #128	; 0x80
 80090f8:	d10e      	bne.n	8009118 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009104:	2b80      	cmp	r3, #128	; 0x80
 8009106:	d107      	bne.n	8009118 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f99c 	bl	8009450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009126:	d10e      	bne.n	8009146 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009132:	2b80      	cmp	r3, #128	; 0x80
 8009134:	d107      	bne.n	8009146 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800913e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f98f 	bl	8009464 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009150:	2b40      	cmp	r3, #64	; 0x40
 8009152:	d10e      	bne.n	8009172 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915e:	2b40      	cmp	r3, #64	; 0x40
 8009160:	d107      	bne.n	8009172 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800916a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 f838 	bl	80091e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	f003 0320 	and.w	r3, r3, #32
 800917c:	2b20      	cmp	r3, #32
 800917e:	d10e      	bne.n	800919e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	f003 0320 	and.w	r3, r3, #32
 800918a:	2b20      	cmp	r3, #32
 800918c:	d107      	bne.n	800919e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f06f 0220 	mvn.w	r2, #32
 8009196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 f94f 	bl	800943c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800919e:	bf00      	nop
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b083      	sub	sp, #12
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091ae:	bf00      	nop
 80091b0:	370c      	adds	r7, #12
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091ba:	b480      	push	{r7}
 80091bc:	b083      	sub	sp, #12
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091c2:	bf00      	nop
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr

080091ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091ce:	b480      	push	{r7}
 80091d0:	b083      	sub	sp, #12
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091d6:	bf00      	nop
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b083      	sub	sp, #12
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091ea:	bf00      	nop
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
	...

080091f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a40      	ldr	r2, [pc, #256]	; (800930c <TIM_Base_SetConfig+0x114>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d013      	beq.n	8009238 <TIM_Base_SetConfig+0x40>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009216:	d00f      	beq.n	8009238 <TIM_Base_SetConfig+0x40>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a3d      	ldr	r2, [pc, #244]	; (8009310 <TIM_Base_SetConfig+0x118>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d00b      	beq.n	8009238 <TIM_Base_SetConfig+0x40>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a3c      	ldr	r2, [pc, #240]	; (8009314 <TIM_Base_SetConfig+0x11c>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d007      	beq.n	8009238 <TIM_Base_SetConfig+0x40>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a3b      	ldr	r2, [pc, #236]	; (8009318 <TIM_Base_SetConfig+0x120>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d003      	beq.n	8009238 <TIM_Base_SetConfig+0x40>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a3a      	ldr	r2, [pc, #232]	; (800931c <TIM_Base_SetConfig+0x124>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d108      	bne.n	800924a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800923e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	4313      	orrs	r3, r2
 8009248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a2f      	ldr	r2, [pc, #188]	; (800930c <TIM_Base_SetConfig+0x114>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d01f      	beq.n	8009292 <TIM_Base_SetConfig+0x9a>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009258:	d01b      	beq.n	8009292 <TIM_Base_SetConfig+0x9a>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a2c      	ldr	r2, [pc, #176]	; (8009310 <TIM_Base_SetConfig+0x118>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d017      	beq.n	8009292 <TIM_Base_SetConfig+0x9a>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a2b      	ldr	r2, [pc, #172]	; (8009314 <TIM_Base_SetConfig+0x11c>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d013      	beq.n	8009292 <TIM_Base_SetConfig+0x9a>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a2a      	ldr	r2, [pc, #168]	; (8009318 <TIM_Base_SetConfig+0x120>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d00f      	beq.n	8009292 <TIM_Base_SetConfig+0x9a>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a29      	ldr	r2, [pc, #164]	; (800931c <TIM_Base_SetConfig+0x124>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d00b      	beq.n	8009292 <TIM_Base_SetConfig+0x9a>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a28      	ldr	r2, [pc, #160]	; (8009320 <TIM_Base_SetConfig+0x128>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d007      	beq.n	8009292 <TIM_Base_SetConfig+0x9a>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a27      	ldr	r2, [pc, #156]	; (8009324 <TIM_Base_SetConfig+0x12c>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d003      	beq.n	8009292 <TIM_Base_SetConfig+0x9a>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a26      	ldr	r2, [pc, #152]	; (8009328 <TIM_Base_SetConfig+0x130>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d108      	bne.n	80092a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	695b      	ldr	r3, [r3, #20]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	689a      	ldr	r2, [r3, #8]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a10      	ldr	r2, [pc, #64]	; (800930c <TIM_Base_SetConfig+0x114>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d00f      	beq.n	80092f0 <TIM_Base_SetConfig+0xf8>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a12      	ldr	r2, [pc, #72]	; (800931c <TIM_Base_SetConfig+0x124>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d00b      	beq.n	80092f0 <TIM_Base_SetConfig+0xf8>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a11      	ldr	r2, [pc, #68]	; (8009320 <TIM_Base_SetConfig+0x128>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d007      	beq.n	80092f0 <TIM_Base_SetConfig+0xf8>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a10      	ldr	r2, [pc, #64]	; (8009324 <TIM_Base_SetConfig+0x12c>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d003      	beq.n	80092f0 <TIM_Base_SetConfig+0xf8>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4a0f      	ldr	r2, [pc, #60]	; (8009328 <TIM_Base_SetConfig+0x130>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d103      	bne.n	80092f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	691a      	ldr	r2, [r3, #16]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	615a      	str	r2, [r3, #20]
}
 80092fe:	bf00      	nop
 8009300:	3714      	adds	r7, #20
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	40010000 	.word	0x40010000
 8009310:	40000400 	.word	0x40000400
 8009314:	40000800 	.word	0x40000800
 8009318:	40000c00 	.word	0x40000c00
 800931c:	40010400 	.word	0x40010400
 8009320:	40014000 	.word	0x40014000
 8009324:	40014400 	.word	0x40014400
 8009328:	40014800 	.word	0x40014800

0800932c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800933c:	2b01      	cmp	r3, #1
 800933e:	d101      	bne.n	8009344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009340:	2302      	movs	r3, #2
 8009342:	e068      	b.n	8009416 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2202      	movs	r2, #2
 8009350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a2e      	ldr	r2, [pc, #184]	; (8009424 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d004      	beq.n	8009378 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a2d      	ldr	r2, [pc, #180]	; (8009428 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d108      	bne.n	800938a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800937e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	4313      	orrs	r3, r2
 8009388:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009390:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	4313      	orrs	r3, r2
 800939a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a1e      	ldr	r2, [pc, #120]	; (8009424 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d01d      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093b6:	d018      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a1b      	ldr	r2, [pc, #108]	; (800942c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d013      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a1a      	ldr	r2, [pc, #104]	; (8009430 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d00e      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a18      	ldr	r2, [pc, #96]	; (8009434 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d009      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a13      	ldr	r2, [pc, #76]	; (8009428 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d004      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a14      	ldr	r2, [pc, #80]	; (8009438 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d10c      	bne.n	8009404 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3714      	adds	r7, #20
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	40010000 	.word	0x40010000
 8009428:	40010400 	.word	0x40010400
 800942c:	40000400 	.word	0x40000400
 8009430:	40000800 	.word	0x40000800
 8009434:	40000c00 	.word	0x40000c00
 8009438:	40001800 	.word	0x40001800

0800943c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800946c:	bf00      	nop
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d101      	bne.n	800948a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e042      	b.n	8009510 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009490:	2b00      	cmp	r3, #0
 8009492:	d106      	bne.n	80094a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7f8 f9d7 	bl	8001850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2224      	movs	r2, #36	; 0x24
 80094a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f022 0201 	bic.w	r2, r2, #1
 80094b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fc3c 	bl	8009d38 <UART_SetConfig>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d101      	bne.n	80094ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e022      	b.n	8009510 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d002      	beq.n	80094d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f002 fdae 	bl	800c034 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	685a      	ldr	r2, [r3, #4]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689a      	ldr	r2, [r3, #8]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f042 0201 	orr.w	r2, r2, #1
 8009506:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f002 fe35 	bl	800c178 <UART_CheckIdleState>
 800950e:	4603      	mov	r3, r0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b08a      	sub	sp, #40	; 0x28
 800951c:	af02      	add	r7, sp, #8
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	603b      	str	r3, [r7, #0]
 8009524:	4613      	mov	r3, r2
 8009526:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800952e:	2b20      	cmp	r3, #32
 8009530:	f040 8083 	bne.w	800963a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d002      	beq.n	8009540 <HAL_UART_Transmit+0x28>
 800953a:	88fb      	ldrh	r3, [r7, #6]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d101      	bne.n	8009544 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e07b      	b.n	800963c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800954a:	2b01      	cmp	r3, #1
 800954c:	d101      	bne.n	8009552 <HAL_UART_Transmit+0x3a>
 800954e:	2302      	movs	r3, #2
 8009550:	e074      	b.n	800963c <HAL_UART_Transmit+0x124>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2221      	movs	r2, #33	; 0x21
 8009566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800956a:	f7f8 fe7b 	bl	8002264 <HAL_GetTick>
 800956e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	88fa      	ldrh	r2, [r7, #6]
 8009574:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	88fa      	ldrh	r2, [r7, #6]
 800957c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009588:	d108      	bne.n	800959c <HAL_UART_Transmit+0x84>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d104      	bne.n	800959c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009592:	2300      	movs	r3, #0
 8009594:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	61bb      	str	r3, [r7, #24]
 800959a:	e003      	b.n	80095a4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80095a0:	2300      	movs	r3, #0
 80095a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80095a4:	e02c      	b.n	8009600 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	2200      	movs	r2, #0
 80095ae:	2180      	movs	r1, #128	; 0x80
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f002 fe29 	bl	800c208 <UART_WaitOnFlagUntilTimeout>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	e03d      	b.n	800963c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10b      	bne.n	80095de <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	881b      	ldrh	r3, [r3, #0]
 80095ca:	461a      	mov	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	3302      	adds	r3, #2
 80095da:	61bb      	str	r3, [r7, #24]
 80095dc:	e007      	b.n	80095ee <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	781a      	ldrb	r2, [r3, #0]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	3301      	adds	r3, #1
 80095ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	3b01      	subs	r3, #1
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009606:	b29b      	uxth	r3, r3
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1cc      	bne.n	80095a6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	2200      	movs	r2, #0
 8009614:	2140      	movs	r1, #64	; 0x40
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f002 fdf6 	bl	800c208 <UART_WaitOnFlagUntilTimeout>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009622:	2303      	movs	r3, #3
 8009624:	e00a      	b.n	800963c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2220      	movs	r2, #32
 800962a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009636:	2300      	movs	r3, #0
 8009638:	e000      	b.n	800963c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800963a:	2302      	movs	r3, #2
  }
}
 800963c:	4618      	mov	r0, r3
 800963e:	3720      	adds	r7, #32
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	4613      	mov	r3, r2
 8009650:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009658:	2b20      	cmp	r3, #32
 800965a:	d168      	bne.n	800972e <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d002      	beq.n	8009668 <HAL_UART_Transmit_IT+0x24>
 8009662:	88fb      	ldrh	r3, [r7, #6]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d101      	bne.n	800966c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	e061      	b.n	8009730 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009672:	2b01      	cmp	r3, #1
 8009674:	d101      	bne.n	800967a <HAL_UART_Transmit_IT+0x36>
 8009676:	2302      	movs	r3, #2
 8009678:	e05a      	b.n	8009730 <HAL_UART_Transmit_IT+0xec>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2201      	movs	r2, #1
 800967e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	88fa      	ldrh	r2, [r7, #6]
 800968c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	88fa      	ldrh	r2, [r7, #6]
 8009694:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2221      	movs	r2, #33	; 0x21
 80096aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096b6:	d11c      	bne.n	80096f2 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096c0:	d107      	bne.n	80096d2 <HAL_UART_Transmit_IT+0x8e>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d103      	bne.n	80096d2 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	4a1b      	ldr	r2, [pc, #108]	; (800973c <HAL_UART_Transmit_IT+0xf8>)
 80096ce:	671a      	str	r2, [r3, #112]	; 0x70
 80096d0:	e002      	b.n	80096d8 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	4a1a      	ldr	r2, [pc, #104]	; (8009740 <HAL_UART_Transmit_IT+0xfc>)
 80096d6:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689a      	ldr	r2, [r3, #8]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80096ee:	609a      	str	r2, [r3, #8]
 80096f0:	e01b      	b.n	800972a <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096fa:	d107      	bne.n	800970c <HAL_UART_Transmit_IT+0xc8>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d103      	bne.n	800970c <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	4a0f      	ldr	r2, [pc, #60]	; (8009744 <HAL_UART_Transmit_IT+0x100>)
 8009708:	671a      	str	r2, [r3, #112]	; 0x70
 800970a:	e002      	b.n	8009712 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	4a0e      	ldr	r2, [pc, #56]	; (8009748 <HAL_UART_Transmit_IT+0x104>)
 8009710:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009728:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	e000      	b.n	8009730 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800972e:	2302      	movs	r3, #2
  }
}
 8009730:	4618      	mov	r0, r3
 8009732:	3714      	adds	r7, #20
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	0800c647 	.word	0x0800c647
 8009740:	0800c5ad 	.word	0x0800c5ad
 8009744:	0800c52f 	.word	0x0800c52f
 8009748:	0800c4bb 	.word	0x0800c4bb

0800974c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	4613      	mov	r3, r2
 8009758:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009760:	2b20      	cmp	r3, #32
 8009762:	f040 80bc 	bne.w	80098de <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d002      	beq.n	8009772 <HAL_UART_Receive_IT+0x26>
 800976c:	88fb      	ldrh	r3, [r7, #6]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d101      	bne.n	8009776 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e0b4      	b.n	80098e0 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800977c:	2b01      	cmp	r3, #1
 800977e:	d101      	bne.n	8009784 <HAL_UART_Receive_IT+0x38>
 8009780:	2302      	movs	r3, #2
 8009782:	e0ad      	b.n	80098e0 <HAL_UART_Receive_IT+0x194>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	88fa      	ldrh	r2, [r7, #6]
 8009796:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	88fa      	ldrh	r2, [r7, #6]
 800979e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097b0:	d10e      	bne.n	80097d0 <HAL_UART_Receive_IT+0x84>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d105      	bne.n	80097c6 <HAL_UART_Receive_IT+0x7a>
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80097c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80097c4:	e02d      	b.n	8009822 <HAL_UART_Receive_IT+0xd6>
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	22ff      	movs	r2, #255	; 0xff
 80097ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80097ce:	e028      	b.n	8009822 <HAL_UART_Receive_IT+0xd6>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d10d      	bne.n	80097f4 <HAL_UART_Receive_IT+0xa8>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d104      	bne.n	80097ea <HAL_UART_Receive_IT+0x9e>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	22ff      	movs	r2, #255	; 0xff
 80097e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80097e8:	e01b      	b.n	8009822 <HAL_UART_Receive_IT+0xd6>
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	227f      	movs	r2, #127	; 0x7f
 80097ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80097f2:	e016      	b.n	8009822 <HAL_UART_Receive_IT+0xd6>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097fc:	d10d      	bne.n	800981a <HAL_UART_Receive_IT+0xce>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d104      	bne.n	8009810 <HAL_UART_Receive_IT+0xc4>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	227f      	movs	r2, #127	; 0x7f
 800980a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800980e:	e008      	b.n	8009822 <HAL_UART_Receive_IT+0xd6>
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	223f      	movs	r2, #63	; 0x3f
 8009814:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009818:	e003      	b.n	8009822 <HAL_UART_Receive_IT+0xd6>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2200      	movs	r2, #0
 800981e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2222      	movs	r2, #34	; 0x22
 800982e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	689a      	ldr	r2, [r3, #8]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f042 0201 	orr.w	r2, r2, #1
 8009840:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009846:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800984a:	d12a      	bne.n	80098a2 <HAL_UART_Receive_IT+0x156>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009852:	88fa      	ldrh	r2, [r7, #6]
 8009854:	429a      	cmp	r2, r3
 8009856:	d324      	bcc.n	80098a2 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009860:	d107      	bne.n	8009872 <HAL_UART_Receive_IT+0x126>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d103      	bne.n	8009872 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	4a1f      	ldr	r2, [pc, #124]	; (80098ec <HAL_UART_Receive_IT+0x1a0>)
 800986e:	66da      	str	r2, [r3, #108]	; 0x6c
 8009870:	e002      	b.n	8009878 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	4a1e      	ldr	r2, [pc, #120]	; (80098f0 <HAL_UART_Receive_IT+0x1a4>)
 8009876:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800988e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	689a      	ldr	r2, [r3, #8]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800989e:	609a      	str	r2, [r3, #8]
 80098a0:	e01b      	b.n	80098da <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098aa:	d107      	bne.n	80098bc <HAL_UART_Receive_IT+0x170>
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d103      	bne.n	80098bc <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	4a0f      	ldr	r2, [pc, #60]	; (80098f4 <HAL_UART_Receive_IT+0x1a8>)
 80098b8:	66da      	str	r2, [r3, #108]	; 0x6c
 80098ba:	e002      	b.n	80098c2 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	4a0e      	ldr	r2, [pc, #56]	; (80098f8 <HAL_UART_Receive_IT+0x1ac>)
 80098c0:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80098d8:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	e000      	b.n	80098e0 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80098de:	2302      	movs	r3, #2
  }
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3714      	adds	r7, #20
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr
 80098ec:	0800c97d 	.word	0x0800c97d
 80098f0:	0800c875 	.word	0x0800c875
 80098f4:	0800c7c9 	.word	0x0800c7c9
 80098f8:	0800c71f 	.word	0x0800c71f

080098fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	4613      	mov	r3, r2
 8009908:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009910:	2b20      	cmp	r3, #32
 8009912:	d170      	bne.n	80099f6 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d002      	beq.n	8009920 <HAL_UART_Receive_DMA+0x24>
 800991a:	88fb      	ldrh	r3, [r7, #6]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d101      	bne.n	8009924 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	e069      	b.n	80099f8 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800992a:	2b01      	cmp	r3, #1
 800992c:	d101      	bne.n	8009932 <HAL_UART_Receive_DMA+0x36>
 800992e:	2302      	movs	r3, #2
 8009930:	e062      	b.n	80099f8 <HAL_UART_Receive_DMA+0xfc>
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	88fa      	ldrh	r2, [r7, #6]
 8009944:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2222      	movs	r2, #34	; 0x22
 8009954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800995c:	2b00      	cmp	r3, #0
 800995e:	d02c      	beq.n	80099ba <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009964:	4a26      	ldr	r2, [pc, #152]	; (8009a00 <HAL_UART_Receive_DMA+0x104>)
 8009966:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800996c:	4a25      	ldr	r2, [pc, #148]	; (8009a04 <HAL_UART_Receive_DMA+0x108>)
 800996e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009974:	4a24      	ldr	r2, [pc, #144]	; (8009a08 <HAL_UART_Receive_DMA+0x10c>)
 8009976:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800997c:	2200      	movs	r2, #0
 800997e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	3324      	adds	r3, #36	; 0x24
 800998a:	4619      	mov	r1, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009990:	461a      	mov	r2, r3
 8009992:	88fb      	ldrh	r3, [r7, #6]
 8009994:	f7fa faa4 	bl	8003ee0 <HAL_DMA_Start_IT>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00d      	beq.n	80099ba <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2210      	movs	r2, #16
 80099a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2220      	movs	r2, #32
 80099b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e01e      	b.n	80099f8 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2200      	movs	r2, #0
 80099be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099d0:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	689a      	ldr	r2, [r3, #8]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f042 0201 	orr.w	r2, r2, #1
 80099e0:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	689a      	ldr	r2, [r3, #8]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099f0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80099f2:	2300      	movs	r3, #0
 80099f4:	e000      	b.n	80099f8 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 80099f6:	2302      	movs	r3, #2
  }
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	0800c38d 	.word	0x0800c38d
 8009a04:	0800c3f3 	.word	0x0800c3f3
 8009a08:	0800c40f 	.word	0x0800c40f

08009a0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b088      	sub	sp, #32
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	69db      	ldr	r3, [r3, #28]
 8009a1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a2c:	69fa      	ldr	r2, [r7, #28]
 8009a2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009a32:	4013      	ands	r3, r2
 8009a34:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d118      	bne.n	8009a6e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	f003 0320 	and.w	r3, r3, #32
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d013      	beq.n	8009a6e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	f003 0320 	and.w	r3, r3, #32
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d104      	bne.n	8009a5a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d009      	beq.n	8009a6e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f000 8145 	beq.w	8009cee <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	4798      	blx	r3
      }
      return;
 8009a6c:	e13f      	b.n	8009cee <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f000 80e8 	beq.w	8009c46 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009a76:	697a      	ldr	r2, [r7, #20]
 8009a78:	4ba1      	ldr	r3, [pc, #644]	; (8009d00 <HAL_UART_IRQHandler+0x2f4>)
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d105      	bne.n	8009a8c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009a80:	69ba      	ldr	r2, [r7, #24]
 8009a82:	4ba0      	ldr	r3, [pc, #640]	; (8009d04 <HAL_UART_IRQHandler+0x2f8>)
 8009a84:	4013      	ands	r3, r2
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f000 80dd 	beq.w	8009c46 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d010      	beq.n	8009ab8 <HAL_UART_IRQHandler+0xac>
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d00b      	beq.n	8009ab8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aae:	f043 0201 	orr.w	r2, r3, #1
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	f003 0302 	and.w	r3, r3, #2
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d010      	beq.n	8009ae4 <HAL_UART_IRQHandler+0xd8>
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	f003 0301 	and.w	r3, r3, #1
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00b      	beq.n	8009ae4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ada:	f043 0204 	orr.w	r2, r3, #4
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	f003 0304 	and.w	r3, r3, #4
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d010      	beq.n	8009b10 <HAL_UART_IRQHandler+0x104>
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	f003 0301 	and.w	r3, r3, #1
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00b      	beq.n	8009b10 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2204      	movs	r2, #4
 8009afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b06:	f043 0202 	orr.w	r2, r3, #2
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	f003 0308 	and.w	r3, r3, #8
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d015      	beq.n	8009b46 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	f003 0320 	and.w	r3, r3, #32
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d104      	bne.n	8009b2e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009b24:	697a      	ldr	r2, [r7, #20]
 8009b26:	4b76      	ldr	r3, [pc, #472]	; (8009d00 <HAL_UART_IRQHandler+0x2f4>)
 8009b28:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00b      	beq.n	8009b46 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2208      	movs	r2, #8
 8009b34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b3c:	f043 0208 	orr.w	r2, r3, #8
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d011      	beq.n	8009b74 <HAL_UART_IRQHandler+0x168>
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00c      	beq.n	8009b74 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b6a:	f043 0220 	orr.w	r2, r3, #32
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f000 80b9 	beq.w	8009cf2 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	f003 0320 	and.w	r3, r3, #32
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d011      	beq.n	8009bae <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	f003 0320 	and.w	r3, r3, #32
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d104      	bne.n	8009b9e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d007      	beq.n	8009bae <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d003      	beq.n	8009bae <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bb4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc0:	2b40      	cmp	r3, #64	; 0x40
 8009bc2:	d004      	beq.n	8009bce <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d031      	beq.n	8009c32 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f002 fbb8 	bl	800c344 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bde:	2b40      	cmp	r3, #64	; 0x40
 8009be0:	d123      	bne.n	8009c2a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689a      	ldr	r2, [r3, #8]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bf0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d013      	beq.n	8009c22 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bfe:	4a42      	ldr	r2, [pc, #264]	; (8009d08 <HAL_UART_IRQHandler+0x2fc>)
 8009c00:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7fa fbd4 	bl	80043b4 <HAL_DMA_Abort_IT>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d017      	beq.n	8009c42 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c20:	e00f      	b.n	8009c42 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f87c 	bl	8009d20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c28:	e00b      	b.n	8009c42 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f878 	bl	8009d20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c30:	e007      	b.n	8009c42 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f874 	bl	8009d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009c40:	e057      	b.n	8009cf2 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c42:	bf00      	nop
    return;
 8009c44:	e055      	b.n	8009cf2 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00d      	beq.n	8009c6c <HAL_UART_IRQHandler+0x260>
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d008      	beq.n	8009c6c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009c62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f002 ff0d 	bl	800ca84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c6a:	e045      	b.n	8009cf8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d012      	beq.n	8009c9c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d104      	bne.n	8009c8a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d008      	beq.n	8009c9c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d031      	beq.n	8009cf6 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	4798      	blx	r3
    }
    return;
 8009c9a:	e02c      	b.n	8009cf6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d008      	beq.n	8009cb8 <HAL_UART_IRQHandler+0x2ac>
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d003      	beq.n	8009cb8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f002 fd1a 	bl	800c6ea <UART_EndTransmit_IT>
    return;
 8009cb6:	e01f      	b.n	8009cf8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d008      	beq.n	8009cd4 <HAL_UART_IRQHandler+0x2c8>
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d003      	beq.n	8009cd4 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f002 feed 	bl	800caac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009cd2:	e011      	b.n	8009cf8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00c      	beq.n	8009cf8 <HAL_UART_IRQHandler+0x2ec>
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	da09      	bge.n	8009cf8 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f002 fed7 	bl	800ca98 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009cea:	bf00      	nop
 8009cec:	e004      	b.n	8009cf8 <HAL_UART_IRQHandler+0x2ec>
      return;
 8009cee:	bf00      	nop
 8009cf0:	e002      	b.n	8009cf8 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009cf2:	bf00      	nop
 8009cf4:	e000      	b.n	8009cf8 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009cf6:	bf00      	nop
  }
}
 8009cf8:	3720      	adds	r7, #32
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	10000001 	.word	0x10000001
 8009d04:	04000120 	.word	0x04000120
 8009d08:	0800c48f 	.word	0x0800c48f

08009d0c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	0000      	movs	r0, r0
	...

08009d38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d38:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009d3c:	b090      	sub	sp, #64	; 0x40
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009d42:	2300      	movs	r3, #0
 8009d44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d46:	2300      	movs	r3, #0
 8009d48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	689a      	ldr	r2, [r3, #8]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	431a      	orrs	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	695b      	ldr	r3, [r3, #20]
 8009d5e:	431a      	orrs	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	69db      	ldr	r3, [r3, #28]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	4bc1      	ldr	r3, [pc, #772]	; (800a080 <UART_SetConfig+0x348>)
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	6812      	ldr	r2, [r2, #0]
 8009d80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d82:	430b      	orrs	r3, r1
 8009d84:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	68da      	ldr	r2, [r3, #12]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	430a      	orrs	r2, r1
 8009d9a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	699b      	ldr	r3, [r3, #24]
 8009da0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4ab7      	ldr	r2, [pc, #732]	; (800a084 <UART_SetConfig+0x34c>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d004      	beq.n	8009db6 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a1b      	ldr	r3, [r3, #32]
 8009db0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009db2:	4313      	orrs	r3, r2
 8009db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	689a      	ldr	r2, [r3, #8]
 8009dbc:	4bb2      	ldr	r3, [pc, #712]	; (800a088 <UART_SetConfig+0x350>)
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	6812      	ldr	r2, [r2, #0]
 8009dc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009dc6:	430b      	orrs	r3, r1
 8009dc8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd0:	f023 010f 	bic.w	r1, r3, #15
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	430a      	orrs	r2, r1
 8009dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4aa9      	ldr	r2, [pc, #676]	; (800a08c <UART_SetConfig+0x354>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d177      	bne.n	8009eda <UART_SetConfig+0x1a2>
 8009dea:	4ba9      	ldr	r3, [pc, #676]	; (800a090 <UART_SetConfig+0x358>)
 8009dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009df2:	2b28      	cmp	r3, #40	; 0x28
 8009df4:	d86c      	bhi.n	8009ed0 <UART_SetConfig+0x198>
 8009df6:	a201      	add	r2, pc, #4	; (adr r2, 8009dfc <UART_SetConfig+0xc4>)
 8009df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfc:	08009ea1 	.word	0x08009ea1
 8009e00:	08009ed1 	.word	0x08009ed1
 8009e04:	08009ed1 	.word	0x08009ed1
 8009e08:	08009ed1 	.word	0x08009ed1
 8009e0c:	08009ed1 	.word	0x08009ed1
 8009e10:	08009ed1 	.word	0x08009ed1
 8009e14:	08009ed1 	.word	0x08009ed1
 8009e18:	08009ed1 	.word	0x08009ed1
 8009e1c:	08009ea9 	.word	0x08009ea9
 8009e20:	08009ed1 	.word	0x08009ed1
 8009e24:	08009ed1 	.word	0x08009ed1
 8009e28:	08009ed1 	.word	0x08009ed1
 8009e2c:	08009ed1 	.word	0x08009ed1
 8009e30:	08009ed1 	.word	0x08009ed1
 8009e34:	08009ed1 	.word	0x08009ed1
 8009e38:	08009ed1 	.word	0x08009ed1
 8009e3c:	08009eb1 	.word	0x08009eb1
 8009e40:	08009ed1 	.word	0x08009ed1
 8009e44:	08009ed1 	.word	0x08009ed1
 8009e48:	08009ed1 	.word	0x08009ed1
 8009e4c:	08009ed1 	.word	0x08009ed1
 8009e50:	08009ed1 	.word	0x08009ed1
 8009e54:	08009ed1 	.word	0x08009ed1
 8009e58:	08009ed1 	.word	0x08009ed1
 8009e5c:	08009eb9 	.word	0x08009eb9
 8009e60:	08009ed1 	.word	0x08009ed1
 8009e64:	08009ed1 	.word	0x08009ed1
 8009e68:	08009ed1 	.word	0x08009ed1
 8009e6c:	08009ed1 	.word	0x08009ed1
 8009e70:	08009ed1 	.word	0x08009ed1
 8009e74:	08009ed1 	.word	0x08009ed1
 8009e78:	08009ed1 	.word	0x08009ed1
 8009e7c:	08009ec1 	.word	0x08009ec1
 8009e80:	08009ed1 	.word	0x08009ed1
 8009e84:	08009ed1 	.word	0x08009ed1
 8009e88:	08009ed1 	.word	0x08009ed1
 8009e8c:	08009ed1 	.word	0x08009ed1
 8009e90:	08009ed1 	.word	0x08009ed1
 8009e94:	08009ed1 	.word	0x08009ed1
 8009e98:	08009ed1 	.word	0x08009ed1
 8009e9c:	08009ec9 	.word	0x08009ec9
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ea6:	e233      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009ea8:	2304      	movs	r3, #4
 8009eaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009eae:	e22f      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009eb0:	2308      	movs	r3, #8
 8009eb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009eb6:	e22b      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009eb8:	2310      	movs	r3, #16
 8009eba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ebe:	e227      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009ec0:	2320      	movs	r3, #32
 8009ec2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ec6:	e223      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009ec8:	2340      	movs	r3, #64	; 0x40
 8009eca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ece:	e21f      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009ed0:	2380      	movs	r3, #128	; 0x80
 8009ed2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ed6:	bf00      	nop
 8009ed8:	e21a      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a6d      	ldr	r2, [pc, #436]	; (800a094 <UART_SetConfig+0x35c>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d132      	bne.n	8009f4a <UART_SetConfig+0x212>
 8009ee4:	4b6a      	ldr	r3, [pc, #424]	; (800a090 <UART_SetConfig+0x358>)
 8009ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee8:	f003 0307 	and.w	r3, r3, #7
 8009eec:	2b05      	cmp	r3, #5
 8009eee:	d827      	bhi.n	8009f40 <UART_SetConfig+0x208>
 8009ef0:	a201      	add	r2, pc, #4	; (adr r2, 8009ef8 <UART_SetConfig+0x1c0>)
 8009ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef6:	bf00      	nop
 8009ef8:	08009f11 	.word	0x08009f11
 8009efc:	08009f19 	.word	0x08009f19
 8009f00:	08009f21 	.word	0x08009f21
 8009f04:	08009f29 	.word	0x08009f29
 8009f08:	08009f31 	.word	0x08009f31
 8009f0c:	08009f39 	.word	0x08009f39
 8009f10:	2300      	movs	r3, #0
 8009f12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f16:	e1fb      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009f18:	2304      	movs	r3, #4
 8009f1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f1e:	e1f7      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009f20:	2308      	movs	r3, #8
 8009f22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f26:	e1f3      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009f28:	2310      	movs	r3, #16
 8009f2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f2e:	e1ef      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009f30:	2320      	movs	r3, #32
 8009f32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f36:	e1eb      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009f38:	2340      	movs	r3, #64	; 0x40
 8009f3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f3e:	e1e7      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009f40:	2380      	movs	r3, #128	; 0x80
 8009f42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f46:	bf00      	nop
 8009f48:	e1e2      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a52      	ldr	r2, [pc, #328]	; (800a098 <UART_SetConfig+0x360>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d132      	bne.n	8009fba <UART_SetConfig+0x282>
 8009f54:	4b4e      	ldr	r3, [pc, #312]	; (800a090 <UART_SetConfig+0x358>)
 8009f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f58:	f003 0307 	and.w	r3, r3, #7
 8009f5c:	2b05      	cmp	r3, #5
 8009f5e:	d827      	bhi.n	8009fb0 <UART_SetConfig+0x278>
 8009f60:	a201      	add	r2, pc, #4	; (adr r2, 8009f68 <UART_SetConfig+0x230>)
 8009f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f66:	bf00      	nop
 8009f68:	08009f81 	.word	0x08009f81
 8009f6c:	08009f89 	.word	0x08009f89
 8009f70:	08009f91 	.word	0x08009f91
 8009f74:	08009f99 	.word	0x08009f99
 8009f78:	08009fa1 	.word	0x08009fa1
 8009f7c:	08009fa9 	.word	0x08009fa9
 8009f80:	2300      	movs	r3, #0
 8009f82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f86:	e1c3      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009f88:	2304      	movs	r3, #4
 8009f8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f8e:	e1bf      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009f90:	2308      	movs	r3, #8
 8009f92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f96:	e1bb      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009f98:	2310      	movs	r3, #16
 8009f9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009f9e:	e1b7      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009fa0:	2320      	movs	r3, #32
 8009fa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009fa6:	e1b3      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009fa8:	2340      	movs	r3, #64	; 0x40
 8009faa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009fae:	e1af      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009fb0:	2380      	movs	r3, #128	; 0x80
 8009fb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009fb6:	bf00      	nop
 8009fb8:	e1aa      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a37      	ldr	r2, [pc, #220]	; (800a09c <UART_SetConfig+0x364>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d132      	bne.n	800a02a <UART_SetConfig+0x2f2>
 8009fc4:	4b32      	ldr	r3, [pc, #200]	; (800a090 <UART_SetConfig+0x358>)
 8009fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fc8:	f003 0307 	and.w	r3, r3, #7
 8009fcc:	2b05      	cmp	r3, #5
 8009fce:	d827      	bhi.n	800a020 <UART_SetConfig+0x2e8>
 8009fd0:	a201      	add	r2, pc, #4	; (adr r2, 8009fd8 <UART_SetConfig+0x2a0>)
 8009fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd6:	bf00      	nop
 8009fd8:	08009ff1 	.word	0x08009ff1
 8009fdc:	08009ff9 	.word	0x08009ff9
 8009fe0:	0800a001 	.word	0x0800a001
 8009fe4:	0800a009 	.word	0x0800a009
 8009fe8:	0800a011 	.word	0x0800a011
 8009fec:	0800a019 	.word	0x0800a019
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ff6:	e18b      	b.n	800a310 <UART_SetConfig+0x5d8>
 8009ff8:	2304      	movs	r3, #4
 8009ffa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ffe:	e187      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a000:	2308      	movs	r3, #8
 800a002:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a006:	e183      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a008:	2310      	movs	r3, #16
 800a00a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a00e:	e17f      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a010:	2320      	movs	r3, #32
 800a012:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a016:	e17b      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a018:	2340      	movs	r3, #64	; 0x40
 800a01a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a01e:	e177      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a020:	2380      	movs	r3, #128	; 0x80
 800a022:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a026:	bf00      	nop
 800a028:	e172      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a1c      	ldr	r2, [pc, #112]	; (800a0a0 <UART_SetConfig+0x368>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d144      	bne.n	800a0be <UART_SetConfig+0x386>
 800a034:	4b16      	ldr	r3, [pc, #88]	; (800a090 <UART_SetConfig+0x358>)
 800a036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a038:	f003 0307 	and.w	r3, r3, #7
 800a03c:	2b05      	cmp	r3, #5
 800a03e:	d839      	bhi.n	800a0b4 <UART_SetConfig+0x37c>
 800a040:	a201      	add	r2, pc, #4	; (adr r2, 800a048 <UART_SetConfig+0x310>)
 800a042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a046:	bf00      	nop
 800a048:	0800a061 	.word	0x0800a061
 800a04c:	0800a069 	.word	0x0800a069
 800a050:	0800a071 	.word	0x0800a071
 800a054:	0800a079 	.word	0x0800a079
 800a058:	0800a0a5 	.word	0x0800a0a5
 800a05c:	0800a0ad 	.word	0x0800a0ad
 800a060:	2300      	movs	r3, #0
 800a062:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a066:	e153      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a068:	2304      	movs	r3, #4
 800a06a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a06e:	e14f      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a070:	2308      	movs	r3, #8
 800a072:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a076:	e14b      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a078:	2310      	movs	r3, #16
 800a07a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a07e:	e147      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a080:	cfff69f3 	.word	0xcfff69f3
 800a084:	58000c00 	.word	0x58000c00
 800a088:	11fff4ff 	.word	0x11fff4ff
 800a08c:	40011000 	.word	0x40011000
 800a090:	58024400 	.word	0x58024400
 800a094:	40004400 	.word	0x40004400
 800a098:	40004800 	.word	0x40004800
 800a09c:	40004c00 	.word	0x40004c00
 800a0a0:	40005000 	.word	0x40005000
 800a0a4:	2320      	movs	r3, #32
 800a0a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0aa:	e131      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a0ac:	2340      	movs	r3, #64	; 0x40
 800a0ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0b2:	e12d      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a0b4:	2380      	movs	r3, #128	; 0x80
 800a0b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a0ba:	bf00      	nop
 800a0bc:	e128      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4ac3      	ldr	r2, [pc, #780]	; (800a3d0 <UART_SetConfig+0x698>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d178      	bne.n	800a1ba <UART_SetConfig+0x482>
 800a0c8:	4bc2      	ldr	r3, [pc, #776]	; (800a3d4 <UART_SetConfig+0x69c>)
 800a0ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0d0:	2b28      	cmp	r3, #40	; 0x28
 800a0d2:	d86d      	bhi.n	800a1b0 <UART_SetConfig+0x478>
 800a0d4:	a201      	add	r2, pc, #4	; (adr r2, 800a0dc <UART_SetConfig+0x3a4>)
 800a0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0da:	bf00      	nop
 800a0dc:	0800a181 	.word	0x0800a181
 800a0e0:	0800a1b1 	.word	0x0800a1b1
 800a0e4:	0800a1b1 	.word	0x0800a1b1
 800a0e8:	0800a1b1 	.word	0x0800a1b1
 800a0ec:	0800a1b1 	.word	0x0800a1b1
 800a0f0:	0800a1b1 	.word	0x0800a1b1
 800a0f4:	0800a1b1 	.word	0x0800a1b1
 800a0f8:	0800a1b1 	.word	0x0800a1b1
 800a0fc:	0800a189 	.word	0x0800a189
 800a100:	0800a1b1 	.word	0x0800a1b1
 800a104:	0800a1b1 	.word	0x0800a1b1
 800a108:	0800a1b1 	.word	0x0800a1b1
 800a10c:	0800a1b1 	.word	0x0800a1b1
 800a110:	0800a1b1 	.word	0x0800a1b1
 800a114:	0800a1b1 	.word	0x0800a1b1
 800a118:	0800a1b1 	.word	0x0800a1b1
 800a11c:	0800a191 	.word	0x0800a191
 800a120:	0800a1b1 	.word	0x0800a1b1
 800a124:	0800a1b1 	.word	0x0800a1b1
 800a128:	0800a1b1 	.word	0x0800a1b1
 800a12c:	0800a1b1 	.word	0x0800a1b1
 800a130:	0800a1b1 	.word	0x0800a1b1
 800a134:	0800a1b1 	.word	0x0800a1b1
 800a138:	0800a1b1 	.word	0x0800a1b1
 800a13c:	0800a199 	.word	0x0800a199
 800a140:	0800a1b1 	.word	0x0800a1b1
 800a144:	0800a1b1 	.word	0x0800a1b1
 800a148:	0800a1b1 	.word	0x0800a1b1
 800a14c:	0800a1b1 	.word	0x0800a1b1
 800a150:	0800a1b1 	.word	0x0800a1b1
 800a154:	0800a1b1 	.word	0x0800a1b1
 800a158:	0800a1b1 	.word	0x0800a1b1
 800a15c:	0800a1a1 	.word	0x0800a1a1
 800a160:	0800a1b1 	.word	0x0800a1b1
 800a164:	0800a1b1 	.word	0x0800a1b1
 800a168:	0800a1b1 	.word	0x0800a1b1
 800a16c:	0800a1b1 	.word	0x0800a1b1
 800a170:	0800a1b1 	.word	0x0800a1b1
 800a174:	0800a1b1 	.word	0x0800a1b1
 800a178:	0800a1b1 	.word	0x0800a1b1
 800a17c:	0800a1a9 	.word	0x0800a1a9
 800a180:	2301      	movs	r3, #1
 800a182:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a186:	e0c3      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a188:	2304      	movs	r3, #4
 800a18a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a18e:	e0bf      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a190:	2308      	movs	r3, #8
 800a192:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a196:	e0bb      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a198:	2310      	movs	r3, #16
 800a19a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a19e:	e0b7      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a1a0:	2320      	movs	r3, #32
 800a1a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1a6:	e0b3      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a1a8:	2340      	movs	r3, #64	; 0x40
 800a1aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1ae:	e0af      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a1b0:	2380      	movs	r3, #128	; 0x80
 800a1b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1b6:	bf00      	nop
 800a1b8:	e0aa      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a86      	ldr	r2, [pc, #536]	; (800a3d8 <UART_SetConfig+0x6a0>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d132      	bne.n	800a22a <UART_SetConfig+0x4f2>
 800a1c4:	4b83      	ldr	r3, [pc, #524]	; (800a3d4 <UART_SetConfig+0x69c>)
 800a1c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1c8:	f003 0307 	and.w	r3, r3, #7
 800a1cc:	2b05      	cmp	r3, #5
 800a1ce:	d827      	bhi.n	800a220 <UART_SetConfig+0x4e8>
 800a1d0:	a201      	add	r2, pc, #4	; (adr r2, 800a1d8 <UART_SetConfig+0x4a0>)
 800a1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d6:	bf00      	nop
 800a1d8:	0800a1f1 	.word	0x0800a1f1
 800a1dc:	0800a1f9 	.word	0x0800a1f9
 800a1e0:	0800a201 	.word	0x0800a201
 800a1e4:	0800a209 	.word	0x0800a209
 800a1e8:	0800a211 	.word	0x0800a211
 800a1ec:	0800a219 	.word	0x0800a219
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1f6:	e08b      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a1f8:	2304      	movs	r3, #4
 800a1fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a1fe:	e087      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a200:	2308      	movs	r3, #8
 800a202:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a206:	e083      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a208:	2310      	movs	r3, #16
 800a20a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a20e:	e07f      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a210:	2320      	movs	r3, #32
 800a212:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a216:	e07b      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a218:	2340      	movs	r3, #64	; 0x40
 800a21a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a21e:	e077      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a220:	2380      	movs	r3, #128	; 0x80
 800a222:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a226:	bf00      	nop
 800a228:	e072      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a6b      	ldr	r2, [pc, #428]	; (800a3dc <UART_SetConfig+0x6a4>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d132      	bne.n	800a29a <UART_SetConfig+0x562>
 800a234:	4b67      	ldr	r3, [pc, #412]	; (800a3d4 <UART_SetConfig+0x69c>)
 800a236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a238:	f003 0307 	and.w	r3, r3, #7
 800a23c:	2b05      	cmp	r3, #5
 800a23e:	d827      	bhi.n	800a290 <UART_SetConfig+0x558>
 800a240:	a201      	add	r2, pc, #4	; (adr r2, 800a248 <UART_SetConfig+0x510>)
 800a242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a246:	bf00      	nop
 800a248:	0800a261 	.word	0x0800a261
 800a24c:	0800a269 	.word	0x0800a269
 800a250:	0800a271 	.word	0x0800a271
 800a254:	0800a279 	.word	0x0800a279
 800a258:	0800a281 	.word	0x0800a281
 800a25c:	0800a289 	.word	0x0800a289
 800a260:	2300      	movs	r3, #0
 800a262:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a266:	e053      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a268:	2304      	movs	r3, #4
 800a26a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a26e:	e04f      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a270:	2308      	movs	r3, #8
 800a272:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a276:	e04b      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a278:	2310      	movs	r3, #16
 800a27a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a27e:	e047      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a280:	2320      	movs	r3, #32
 800a282:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a286:	e043      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a288:	2340      	movs	r3, #64	; 0x40
 800a28a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a28e:	e03f      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a290:	2380      	movs	r3, #128	; 0x80
 800a292:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a296:	bf00      	nop
 800a298:	e03a      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a50      	ldr	r2, [pc, #320]	; (800a3e0 <UART_SetConfig+0x6a8>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d132      	bne.n	800a30a <UART_SetConfig+0x5d2>
 800a2a4:	4b4b      	ldr	r3, [pc, #300]	; (800a3d4 <UART_SetConfig+0x69c>)
 800a2a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2a8:	f003 0307 	and.w	r3, r3, #7
 800a2ac:	2b05      	cmp	r3, #5
 800a2ae:	d827      	bhi.n	800a300 <UART_SetConfig+0x5c8>
 800a2b0:	a201      	add	r2, pc, #4	; (adr r2, 800a2b8 <UART_SetConfig+0x580>)
 800a2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b6:	bf00      	nop
 800a2b8:	0800a2d1 	.word	0x0800a2d1
 800a2bc:	0800a2d9 	.word	0x0800a2d9
 800a2c0:	0800a2e1 	.word	0x0800a2e1
 800a2c4:	0800a2e9 	.word	0x0800a2e9
 800a2c8:	0800a2f1 	.word	0x0800a2f1
 800a2cc:	0800a2f9 	.word	0x0800a2f9
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2d6:	e01b      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a2d8:	2304      	movs	r3, #4
 800a2da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2de:	e017      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a2e0:	2308      	movs	r3, #8
 800a2e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2e6:	e013      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a2e8:	2310      	movs	r3, #16
 800a2ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2ee:	e00f      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a2f0:	2320      	movs	r3, #32
 800a2f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2f6:	e00b      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a2f8:	2340      	movs	r3, #64	; 0x40
 800a2fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a2fe:	e007      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a300:	2380      	movs	r3, #128	; 0x80
 800a302:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800a306:	bf00      	nop
 800a308:	e002      	b.n	800a310 <UART_SetConfig+0x5d8>
 800a30a:	2380      	movs	r3, #128	; 0x80
 800a30c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a32      	ldr	r2, [pc, #200]	; (800a3e0 <UART_SetConfig+0x6a8>)
 800a316:	4293      	cmp	r3, r2
 800a318:	f040 86f7 	bne.w	800b10a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a31c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a320:	2b08      	cmp	r3, #8
 800a322:	f000 80c0 	beq.w	800a4a6 <UART_SetConfig+0x76e>
 800a326:	2b08      	cmp	r3, #8
 800a328:	dc04      	bgt.n	800a334 <UART_SetConfig+0x5fc>
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d00c      	beq.n	800a348 <UART_SetConfig+0x610>
 800a32e:	2b04      	cmp	r3, #4
 800a330:	d065      	beq.n	800a3fe <UART_SetConfig+0x6c6>
 800a332:	e27a      	b.n	800a82a <UART_SetConfig+0xaf2>
 800a334:	2b20      	cmp	r3, #32
 800a336:	f000 81b0 	beq.w	800a69a <UART_SetConfig+0x962>
 800a33a:	2b40      	cmp	r3, #64	; 0x40
 800a33c:	f000 821e 	beq.w	800a77c <UART_SetConfig+0xa44>
 800a340:	2b10      	cmp	r3, #16
 800a342:	f000 8104 	beq.w	800a54e <UART_SetConfig+0x816>
 800a346:	e270      	b.n	800a82a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a348:	f7fe f85a 	bl	8008400 <HAL_RCCEx_GetD3PCLK1Freq>
 800a34c:	4602      	mov	r2, r0
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a352:	2b00      	cmp	r3, #0
 800a354:	d04e      	beq.n	800a3f4 <UART_SetConfig+0x6bc>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d048      	beq.n	800a3f0 <UART_SetConfig+0x6b8>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a362:	2b02      	cmp	r3, #2
 800a364:	d042      	beq.n	800a3ec <UART_SetConfig+0x6b4>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36a:	2b03      	cmp	r3, #3
 800a36c:	d03c      	beq.n	800a3e8 <UART_SetConfig+0x6b0>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a372:	2b04      	cmp	r3, #4
 800a374:	d036      	beq.n	800a3e4 <UART_SetConfig+0x6ac>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37a:	2b05      	cmp	r3, #5
 800a37c:	d026      	beq.n	800a3cc <UART_SetConfig+0x694>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a382:	2b06      	cmp	r3, #6
 800a384:	d020      	beq.n	800a3c8 <UART_SetConfig+0x690>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38a:	2b07      	cmp	r3, #7
 800a38c:	d01a      	beq.n	800a3c4 <UART_SetConfig+0x68c>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a392:	2b08      	cmp	r3, #8
 800a394:	d014      	beq.n	800a3c0 <UART_SetConfig+0x688>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39a:	2b09      	cmp	r3, #9
 800a39c:	d00e      	beq.n	800a3bc <UART_SetConfig+0x684>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a2:	2b0a      	cmp	r3, #10
 800a3a4:	d008      	beq.n	800a3b8 <UART_SetConfig+0x680>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3aa:	2b0b      	cmp	r3, #11
 800a3ac:	d102      	bne.n	800a3b4 <UART_SetConfig+0x67c>
 800a3ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3b2:	e020      	b.n	800a3f6 <UART_SetConfig+0x6be>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e01e      	b.n	800a3f6 <UART_SetConfig+0x6be>
 800a3b8:	2380      	movs	r3, #128	; 0x80
 800a3ba:	e01c      	b.n	800a3f6 <UART_SetConfig+0x6be>
 800a3bc:	2340      	movs	r3, #64	; 0x40
 800a3be:	e01a      	b.n	800a3f6 <UART_SetConfig+0x6be>
 800a3c0:	2320      	movs	r3, #32
 800a3c2:	e018      	b.n	800a3f6 <UART_SetConfig+0x6be>
 800a3c4:	2310      	movs	r3, #16
 800a3c6:	e016      	b.n	800a3f6 <UART_SetConfig+0x6be>
 800a3c8:	230c      	movs	r3, #12
 800a3ca:	e014      	b.n	800a3f6 <UART_SetConfig+0x6be>
 800a3cc:	230a      	movs	r3, #10
 800a3ce:	e012      	b.n	800a3f6 <UART_SetConfig+0x6be>
 800a3d0:	40011400 	.word	0x40011400
 800a3d4:	58024400 	.word	0x58024400
 800a3d8:	40007800 	.word	0x40007800
 800a3dc:	40007c00 	.word	0x40007c00
 800a3e0:	58000c00 	.word	0x58000c00
 800a3e4:	2308      	movs	r3, #8
 800a3e6:	e006      	b.n	800a3f6 <UART_SetConfig+0x6be>
 800a3e8:	2306      	movs	r3, #6
 800a3ea:	e004      	b.n	800a3f6 <UART_SetConfig+0x6be>
 800a3ec:	2304      	movs	r3, #4
 800a3ee:	e002      	b.n	800a3f6 <UART_SetConfig+0x6be>
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	e000      	b.n	800a3f6 <UART_SetConfig+0x6be>
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3fc:	e219      	b.n	800a832 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3fe:	f107 0318 	add.w	r3, r7, #24
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe f812 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a408:	69fa      	ldr	r2, [r7, #28]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d044      	beq.n	800a49c <UART_SetConfig+0x764>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a416:	2b01      	cmp	r3, #1
 800a418:	d03e      	beq.n	800a498 <UART_SetConfig+0x760>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d038      	beq.n	800a494 <UART_SetConfig+0x75c>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a426:	2b03      	cmp	r3, #3
 800a428:	d032      	beq.n	800a490 <UART_SetConfig+0x758>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42e:	2b04      	cmp	r3, #4
 800a430:	d02c      	beq.n	800a48c <UART_SetConfig+0x754>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a436:	2b05      	cmp	r3, #5
 800a438:	d026      	beq.n	800a488 <UART_SetConfig+0x750>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43e:	2b06      	cmp	r3, #6
 800a440:	d020      	beq.n	800a484 <UART_SetConfig+0x74c>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a446:	2b07      	cmp	r3, #7
 800a448:	d01a      	beq.n	800a480 <UART_SetConfig+0x748>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44e:	2b08      	cmp	r3, #8
 800a450:	d014      	beq.n	800a47c <UART_SetConfig+0x744>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a456:	2b09      	cmp	r3, #9
 800a458:	d00e      	beq.n	800a478 <UART_SetConfig+0x740>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45e:	2b0a      	cmp	r3, #10
 800a460:	d008      	beq.n	800a474 <UART_SetConfig+0x73c>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a466:	2b0b      	cmp	r3, #11
 800a468:	d102      	bne.n	800a470 <UART_SetConfig+0x738>
 800a46a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a46e:	e016      	b.n	800a49e <UART_SetConfig+0x766>
 800a470:	2301      	movs	r3, #1
 800a472:	e014      	b.n	800a49e <UART_SetConfig+0x766>
 800a474:	2380      	movs	r3, #128	; 0x80
 800a476:	e012      	b.n	800a49e <UART_SetConfig+0x766>
 800a478:	2340      	movs	r3, #64	; 0x40
 800a47a:	e010      	b.n	800a49e <UART_SetConfig+0x766>
 800a47c:	2320      	movs	r3, #32
 800a47e:	e00e      	b.n	800a49e <UART_SetConfig+0x766>
 800a480:	2310      	movs	r3, #16
 800a482:	e00c      	b.n	800a49e <UART_SetConfig+0x766>
 800a484:	230c      	movs	r3, #12
 800a486:	e00a      	b.n	800a49e <UART_SetConfig+0x766>
 800a488:	230a      	movs	r3, #10
 800a48a:	e008      	b.n	800a49e <UART_SetConfig+0x766>
 800a48c:	2308      	movs	r3, #8
 800a48e:	e006      	b.n	800a49e <UART_SetConfig+0x766>
 800a490:	2306      	movs	r3, #6
 800a492:	e004      	b.n	800a49e <UART_SetConfig+0x766>
 800a494:	2304      	movs	r3, #4
 800a496:	e002      	b.n	800a49e <UART_SetConfig+0x766>
 800a498:	2302      	movs	r3, #2
 800a49a:	e000      	b.n	800a49e <UART_SetConfig+0x766>
 800a49c:	2301      	movs	r3, #1
 800a49e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4a4:	e1c5      	b.n	800a832 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4a6:	f107 030c 	add.w	r3, r7, #12
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fe f90a 	bl	80086c4 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d044      	beq.n	800a544 <UART_SetConfig+0x80c>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d03e      	beq.n	800a540 <UART_SetConfig+0x808>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c6:	2b02      	cmp	r3, #2
 800a4c8:	d038      	beq.n	800a53c <UART_SetConfig+0x804>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ce:	2b03      	cmp	r3, #3
 800a4d0:	d032      	beq.n	800a538 <UART_SetConfig+0x800>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d6:	2b04      	cmp	r3, #4
 800a4d8:	d02c      	beq.n	800a534 <UART_SetConfig+0x7fc>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4de:	2b05      	cmp	r3, #5
 800a4e0:	d026      	beq.n	800a530 <UART_SetConfig+0x7f8>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e6:	2b06      	cmp	r3, #6
 800a4e8:	d020      	beq.n	800a52c <UART_SetConfig+0x7f4>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ee:	2b07      	cmp	r3, #7
 800a4f0:	d01a      	beq.n	800a528 <UART_SetConfig+0x7f0>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f6:	2b08      	cmp	r3, #8
 800a4f8:	d014      	beq.n	800a524 <UART_SetConfig+0x7ec>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fe:	2b09      	cmp	r3, #9
 800a500:	d00e      	beq.n	800a520 <UART_SetConfig+0x7e8>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a506:	2b0a      	cmp	r3, #10
 800a508:	d008      	beq.n	800a51c <UART_SetConfig+0x7e4>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50e:	2b0b      	cmp	r3, #11
 800a510:	d102      	bne.n	800a518 <UART_SetConfig+0x7e0>
 800a512:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a516:	e016      	b.n	800a546 <UART_SetConfig+0x80e>
 800a518:	2301      	movs	r3, #1
 800a51a:	e014      	b.n	800a546 <UART_SetConfig+0x80e>
 800a51c:	2380      	movs	r3, #128	; 0x80
 800a51e:	e012      	b.n	800a546 <UART_SetConfig+0x80e>
 800a520:	2340      	movs	r3, #64	; 0x40
 800a522:	e010      	b.n	800a546 <UART_SetConfig+0x80e>
 800a524:	2320      	movs	r3, #32
 800a526:	e00e      	b.n	800a546 <UART_SetConfig+0x80e>
 800a528:	2310      	movs	r3, #16
 800a52a:	e00c      	b.n	800a546 <UART_SetConfig+0x80e>
 800a52c:	230c      	movs	r3, #12
 800a52e:	e00a      	b.n	800a546 <UART_SetConfig+0x80e>
 800a530:	230a      	movs	r3, #10
 800a532:	e008      	b.n	800a546 <UART_SetConfig+0x80e>
 800a534:	2308      	movs	r3, #8
 800a536:	e006      	b.n	800a546 <UART_SetConfig+0x80e>
 800a538:	2306      	movs	r3, #6
 800a53a:	e004      	b.n	800a546 <UART_SetConfig+0x80e>
 800a53c:	2304      	movs	r3, #4
 800a53e:	e002      	b.n	800a546 <UART_SetConfig+0x80e>
 800a540:	2302      	movs	r3, #2
 800a542:	e000      	b.n	800a546 <UART_SetConfig+0x80e>
 800a544:	2301      	movs	r3, #1
 800a546:	fbb2 f3f3 	udiv	r3, r2, r3
 800a54a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a54c:	e171      	b.n	800a832 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a54e:	4b7a      	ldr	r3, [pc, #488]	; (800a738 <UART_SetConfig+0xa00>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0320 	and.w	r3, r3, #32
 800a556:	2b00      	cmp	r3, #0
 800a558:	d054      	beq.n	800a604 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a55a:	4b77      	ldr	r3, [pc, #476]	; (800a738 <UART_SetConfig+0xa00>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	08db      	lsrs	r3, r3, #3
 800a560:	f003 0303 	and.w	r3, r3, #3
 800a564:	4a75      	ldr	r2, [pc, #468]	; (800a73c <UART_SetConfig+0xa04>)
 800a566:	40da      	lsrs	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d044      	beq.n	800a5fa <UART_SetConfig+0x8c2>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a574:	2b01      	cmp	r3, #1
 800a576:	d03e      	beq.n	800a5f6 <UART_SetConfig+0x8be>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d038      	beq.n	800a5f2 <UART_SetConfig+0x8ba>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a584:	2b03      	cmp	r3, #3
 800a586:	d032      	beq.n	800a5ee <UART_SetConfig+0x8b6>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58c:	2b04      	cmp	r3, #4
 800a58e:	d02c      	beq.n	800a5ea <UART_SetConfig+0x8b2>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a594:	2b05      	cmp	r3, #5
 800a596:	d026      	beq.n	800a5e6 <UART_SetConfig+0x8ae>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59c:	2b06      	cmp	r3, #6
 800a59e:	d020      	beq.n	800a5e2 <UART_SetConfig+0x8aa>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a4:	2b07      	cmp	r3, #7
 800a5a6:	d01a      	beq.n	800a5de <UART_SetConfig+0x8a6>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ac:	2b08      	cmp	r3, #8
 800a5ae:	d014      	beq.n	800a5da <UART_SetConfig+0x8a2>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b4:	2b09      	cmp	r3, #9
 800a5b6:	d00e      	beq.n	800a5d6 <UART_SetConfig+0x89e>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5bc:	2b0a      	cmp	r3, #10
 800a5be:	d008      	beq.n	800a5d2 <UART_SetConfig+0x89a>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c4:	2b0b      	cmp	r3, #11
 800a5c6:	d102      	bne.n	800a5ce <UART_SetConfig+0x896>
 800a5c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5cc:	e016      	b.n	800a5fc <UART_SetConfig+0x8c4>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e014      	b.n	800a5fc <UART_SetConfig+0x8c4>
 800a5d2:	2380      	movs	r3, #128	; 0x80
 800a5d4:	e012      	b.n	800a5fc <UART_SetConfig+0x8c4>
 800a5d6:	2340      	movs	r3, #64	; 0x40
 800a5d8:	e010      	b.n	800a5fc <UART_SetConfig+0x8c4>
 800a5da:	2320      	movs	r3, #32
 800a5dc:	e00e      	b.n	800a5fc <UART_SetConfig+0x8c4>
 800a5de:	2310      	movs	r3, #16
 800a5e0:	e00c      	b.n	800a5fc <UART_SetConfig+0x8c4>
 800a5e2:	230c      	movs	r3, #12
 800a5e4:	e00a      	b.n	800a5fc <UART_SetConfig+0x8c4>
 800a5e6:	230a      	movs	r3, #10
 800a5e8:	e008      	b.n	800a5fc <UART_SetConfig+0x8c4>
 800a5ea:	2308      	movs	r3, #8
 800a5ec:	e006      	b.n	800a5fc <UART_SetConfig+0x8c4>
 800a5ee:	2306      	movs	r3, #6
 800a5f0:	e004      	b.n	800a5fc <UART_SetConfig+0x8c4>
 800a5f2:	2304      	movs	r3, #4
 800a5f4:	e002      	b.n	800a5fc <UART_SetConfig+0x8c4>
 800a5f6:	2302      	movs	r3, #2
 800a5f8:	e000      	b.n	800a5fc <UART_SetConfig+0x8c4>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a600:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a602:	e116      	b.n	800a832 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d043      	beq.n	800a694 <UART_SetConfig+0x95c>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a610:	2b01      	cmp	r3, #1
 800a612:	d03d      	beq.n	800a690 <UART_SetConfig+0x958>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d037      	beq.n	800a68c <UART_SetConfig+0x954>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a620:	2b03      	cmp	r3, #3
 800a622:	d031      	beq.n	800a688 <UART_SetConfig+0x950>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a628:	2b04      	cmp	r3, #4
 800a62a:	d02b      	beq.n	800a684 <UART_SetConfig+0x94c>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a630:	2b05      	cmp	r3, #5
 800a632:	d025      	beq.n	800a680 <UART_SetConfig+0x948>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a638:	2b06      	cmp	r3, #6
 800a63a:	d01f      	beq.n	800a67c <UART_SetConfig+0x944>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a640:	2b07      	cmp	r3, #7
 800a642:	d019      	beq.n	800a678 <UART_SetConfig+0x940>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a648:	2b08      	cmp	r3, #8
 800a64a:	d013      	beq.n	800a674 <UART_SetConfig+0x93c>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	2b09      	cmp	r3, #9
 800a652:	d00d      	beq.n	800a670 <UART_SetConfig+0x938>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a658:	2b0a      	cmp	r3, #10
 800a65a:	d007      	beq.n	800a66c <UART_SetConfig+0x934>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	2b0b      	cmp	r3, #11
 800a662:	d101      	bne.n	800a668 <UART_SetConfig+0x930>
 800a664:	4b36      	ldr	r3, [pc, #216]	; (800a740 <UART_SetConfig+0xa08>)
 800a666:	e016      	b.n	800a696 <UART_SetConfig+0x95e>
 800a668:	4b34      	ldr	r3, [pc, #208]	; (800a73c <UART_SetConfig+0xa04>)
 800a66a:	e014      	b.n	800a696 <UART_SetConfig+0x95e>
 800a66c:	4b35      	ldr	r3, [pc, #212]	; (800a744 <UART_SetConfig+0xa0c>)
 800a66e:	e012      	b.n	800a696 <UART_SetConfig+0x95e>
 800a670:	4b35      	ldr	r3, [pc, #212]	; (800a748 <UART_SetConfig+0xa10>)
 800a672:	e010      	b.n	800a696 <UART_SetConfig+0x95e>
 800a674:	4b35      	ldr	r3, [pc, #212]	; (800a74c <UART_SetConfig+0xa14>)
 800a676:	e00e      	b.n	800a696 <UART_SetConfig+0x95e>
 800a678:	4b35      	ldr	r3, [pc, #212]	; (800a750 <UART_SetConfig+0xa18>)
 800a67a:	e00c      	b.n	800a696 <UART_SetConfig+0x95e>
 800a67c:	4b35      	ldr	r3, [pc, #212]	; (800a754 <UART_SetConfig+0xa1c>)
 800a67e:	e00a      	b.n	800a696 <UART_SetConfig+0x95e>
 800a680:	4b35      	ldr	r3, [pc, #212]	; (800a758 <UART_SetConfig+0xa20>)
 800a682:	e008      	b.n	800a696 <UART_SetConfig+0x95e>
 800a684:	4b35      	ldr	r3, [pc, #212]	; (800a75c <UART_SetConfig+0xa24>)
 800a686:	e006      	b.n	800a696 <UART_SetConfig+0x95e>
 800a688:	4b35      	ldr	r3, [pc, #212]	; (800a760 <UART_SetConfig+0xa28>)
 800a68a:	e004      	b.n	800a696 <UART_SetConfig+0x95e>
 800a68c:	4b35      	ldr	r3, [pc, #212]	; (800a764 <UART_SetConfig+0xa2c>)
 800a68e:	e002      	b.n	800a696 <UART_SetConfig+0x95e>
 800a690:	4b35      	ldr	r3, [pc, #212]	; (800a768 <UART_SetConfig+0xa30>)
 800a692:	e000      	b.n	800a696 <UART_SetConfig+0x95e>
 800a694:	4b29      	ldr	r3, [pc, #164]	; (800a73c <UART_SetConfig+0xa04>)
 800a696:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a698:	e0cb      	b.n	800a832 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d046      	beq.n	800a730 <UART_SetConfig+0x9f8>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d040      	beq.n	800a72c <UART_SetConfig+0x9f4>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d03a      	beq.n	800a728 <UART_SetConfig+0x9f0>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	d034      	beq.n	800a724 <UART_SetConfig+0x9ec>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6be:	2b04      	cmp	r3, #4
 800a6c0:	d02e      	beq.n	800a720 <UART_SetConfig+0x9e8>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c6:	2b05      	cmp	r3, #5
 800a6c8:	d028      	beq.n	800a71c <UART_SetConfig+0x9e4>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ce:	2b06      	cmp	r3, #6
 800a6d0:	d022      	beq.n	800a718 <UART_SetConfig+0x9e0>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d6:	2b07      	cmp	r3, #7
 800a6d8:	d01c      	beq.n	800a714 <UART_SetConfig+0x9dc>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6de:	2b08      	cmp	r3, #8
 800a6e0:	d016      	beq.n	800a710 <UART_SetConfig+0x9d8>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e6:	2b09      	cmp	r3, #9
 800a6e8:	d00f      	beq.n	800a70a <UART_SetConfig+0x9d2>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ee:	2b0a      	cmp	r3, #10
 800a6f0:	d008      	beq.n	800a704 <UART_SetConfig+0x9cc>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f6:	2b0b      	cmp	r3, #11
 800a6f8:	d102      	bne.n	800a700 <UART_SetConfig+0x9c8>
 800a6fa:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a6fe:	e018      	b.n	800a732 <UART_SetConfig+0x9fa>
 800a700:	4b13      	ldr	r3, [pc, #76]	; (800a750 <UART_SetConfig+0xa18>)
 800a702:	e016      	b.n	800a732 <UART_SetConfig+0x9fa>
 800a704:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a708:	e013      	b.n	800a732 <UART_SetConfig+0x9fa>
 800a70a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a70e:	e010      	b.n	800a732 <UART_SetConfig+0x9fa>
 800a710:	4b16      	ldr	r3, [pc, #88]	; (800a76c <UART_SetConfig+0xa34>)
 800a712:	e00e      	b.n	800a732 <UART_SetConfig+0x9fa>
 800a714:	4b0a      	ldr	r3, [pc, #40]	; (800a740 <UART_SetConfig+0xa08>)
 800a716:	e00c      	b.n	800a732 <UART_SetConfig+0x9fa>
 800a718:	4b15      	ldr	r3, [pc, #84]	; (800a770 <UART_SetConfig+0xa38>)
 800a71a:	e00a      	b.n	800a732 <UART_SetConfig+0x9fa>
 800a71c:	4b15      	ldr	r3, [pc, #84]	; (800a774 <UART_SetConfig+0xa3c>)
 800a71e:	e008      	b.n	800a732 <UART_SetConfig+0x9fa>
 800a720:	4b08      	ldr	r3, [pc, #32]	; (800a744 <UART_SetConfig+0xa0c>)
 800a722:	e006      	b.n	800a732 <UART_SetConfig+0x9fa>
 800a724:	4b14      	ldr	r3, [pc, #80]	; (800a778 <UART_SetConfig+0xa40>)
 800a726:	e004      	b.n	800a732 <UART_SetConfig+0x9fa>
 800a728:	4b07      	ldr	r3, [pc, #28]	; (800a748 <UART_SetConfig+0xa10>)
 800a72a:	e002      	b.n	800a732 <UART_SetConfig+0x9fa>
 800a72c:	4b07      	ldr	r3, [pc, #28]	; (800a74c <UART_SetConfig+0xa14>)
 800a72e:	e000      	b.n	800a732 <UART_SetConfig+0x9fa>
 800a730:	4b07      	ldr	r3, [pc, #28]	; (800a750 <UART_SetConfig+0xa18>)
 800a732:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a734:	e07d      	b.n	800a832 <UART_SetConfig+0xafa>
 800a736:	bf00      	nop
 800a738:	58024400 	.word	0x58024400
 800a73c:	03d09000 	.word	0x03d09000
 800a740:	0003d090 	.word	0x0003d090
 800a744:	0007a120 	.word	0x0007a120
 800a748:	000f4240 	.word	0x000f4240
 800a74c:	001e8480 	.word	0x001e8480
 800a750:	003d0900 	.word	0x003d0900
 800a754:	00516155 	.word	0x00516155
 800a758:	0061a800 	.word	0x0061a800
 800a75c:	007a1200 	.word	0x007a1200
 800a760:	00a2c2aa 	.word	0x00a2c2aa
 800a764:	00f42400 	.word	0x00f42400
 800a768:	01e84800 	.word	0x01e84800
 800a76c:	0001e848 	.word	0x0001e848
 800a770:	00051615 	.word	0x00051615
 800a774:	00061a80 	.word	0x00061a80
 800a778:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a780:	2b00      	cmp	r3, #0
 800a782:	d04e      	beq.n	800a822 <UART_SetConfig+0xaea>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d047      	beq.n	800a81c <UART_SetConfig+0xae4>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a790:	2b02      	cmp	r3, #2
 800a792:	d040      	beq.n	800a816 <UART_SetConfig+0xade>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a798:	2b03      	cmp	r3, #3
 800a79a:	d039      	beq.n	800a810 <UART_SetConfig+0xad8>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a0:	2b04      	cmp	r3, #4
 800a7a2:	d032      	beq.n	800a80a <UART_SetConfig+0xad2>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a8:	2b05      	cmp	r3, #5
 800a7aa:	d02b      	beq.n	800a804 <UART_SetConfig+0xacc>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b0:	2b06      	cmp	r3, #6
 800a7b2:	d024      	beq.n	800a7fe <UART_SetConfig+0xac6>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b8:	2b07      	cmp	r3, #7
 800a7ba:	d01d      	beq.n	800a7f8 <UART_SetConfig+0xac0>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c0:	2b08      	cmp	r3, #8
 800a7c2:	d016      	beq.n	800a7f2 <UART_SetConfig+0xaba>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c8:	2b09      	cmp	r3, #9
 800a7ca:	d00f      	beq.n	800a7ec <UART_SetConfig+0xab4>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d0:	2b0a      	cmp	r3, #10
 800a7d2:	d008      	beq.n	800a7e6 <UART_SetConfig+0xaae>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d8:	2b0b      	cmp	r3, #11
 800a7da:	d101      	bne.n	800a7e0 <UART_SetConfig+0xaa8>
 800a7dc:	2380      	movs	r3, #128	; 0x80
 800a7de:	e022      	b.n	800a826 <UART_SetConfig+0xaee>
 800a7e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7e4:	e01f      	b.n	800a826 <UART_SetConfig+0xaee>
 800a7e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7ea:	e01c      	b.n	800a826 <UART_SetConfig+0xaee>
 800a7ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7f0:	e019      	b.n	800a826 <UART_SetConfig+0xaee>
 800a7f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7f6:	e016      	b.n	800a826 <UART_SetConfig+0xaee>
 800a7f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7fc:	e013      	b.n	800a826 <UART_SetConfig+0xaee>
 800a7fe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a802:	e010      	b.n	800a826 <UART_SetConfig+0xaee>
 800a804:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a808:	e00d      	b.n	800a826 <UART_SetConfig+0xaee>
 800a80a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a80e:	e00a      	b.n	800a826 <UART_SetConfig+0xaee>
 800a810:	f241 5355 	movw	r3, #5461	; 0x1555
 800a814:	e007      	b.n	800a826 <UART_SetConfig+0xaee>
 800a816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a81a:	e004      	b.n	800a826 <UART_SetConfig+0xaee>
 800a81c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a820:	e001      	b.n	800a826 <UART_SetConfig+0xaee>
 800a822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a826:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a828:	e003      	b.n	800a832 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a830:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a834:	2b00      	cmp	r3, #0
 800a836:	f001 83e8 	beq.w	800c00a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	685a      	ldr	r2, [r3, #4]
 800a83e:	4613      	mov	r3, r2
 800a840:	005b      	lsls	r3, r3, #1
 800a842:	4413      	add	r3, r2
 800a844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a846:	429a      	cmp	r2, r3
 800a848:	d305      	bcc.n	800a856 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a852:	429a      	cmp	r2, r3
 800a854:	d904      	bls.n	800a860 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a85c:	f001 bbd5 	b.w	800c00a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800a860:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a864:	2b08      	cmp	r3, #8
 800a866:	f000 8154 	beq.w	800ab12 <UART_SetConfig+0xdda>
 800a86a:	2b08      	cmp	r3, #8
 800a86c:	dc06      	bgt.n	800a87c <UART_SetConfig+0xb44>
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d00f      	beq.n	800a892 <UART_SetConfig+0xb5a>
 800a872:	2b04      	cmp	r3, #4
 800a874:	f000 80ac 	beq.w	800a9d0 <UART_SetConfig+0xc98>
 800a878:	f000 bc30 	b.w	800b0dc <UART_SetConfig+0x13a4>
 800a87c:	2b20      	cmp	r3, #32
 800a87e:	f000 832d 	beq.w	800aedc <UART_SetConfig+0x11a4>
 800a882:	2b40      	cmp	r3, #64	; 0x40
 800a884:	f000 83a5 	beq.w	800afd2 <UART_SetConfig+0x129a>
 800a888:	2b10      	cmp	r3, #16
 800a88a:	f000 81e3 	beq.w	800ac54 <UART_SetConfig+0xf1c>
 800a88e:	f000 bc25 	b.w	800b0dc <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a892:	f7fd fdb5 	bl	8008400 <HAL_RCCEx_GetD3PCLK1Freq>
 800a896:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89a:	4618      	mov	r0, r3
 800a89c:	f04f 0100 	mov.w	r1, #0
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d067      	beq.n	800a978 <UART_SetConfig+0xc40>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d05e      	beq.n	800a96e <UART_SetConfig+0xc36>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d055      	beq.n	800a964 <UART_SetConfig+0xc2c>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8bc:	2b03      	cmp	r3, #3
 800a8be:	d04c      	beq.n	800a95a <UART_SetConfig+0xc22>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	2b04      	cmp	r3, #4
 800a8c6:	d043      	beq.n	800a950 <UART_SetConfig+0xc18>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8cc:	2b05      	cmp	r3, #5
 800a8ce:	d03a      	beq.n	800a946 <UART_SetConfig+0xc0e>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d4:	2b06      	cmp	r3, #6
 800a8d6:	d031      	beq.n	800a93c <UART_SetConfig+0xc04>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8dc:	2b07      	cmp	r3, #7
 800a8de:	d028      	beq.n	800a932 <UART_SetConfig+0xbfa>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e4:	2b08      	cmp	r3, #8
 800a8e6:	d01f      	beq.n	800a928 <UART_SetConfig+0xbf0>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ec:	2b09      	cmp	r3, #9
 800a8ee:	d016      	beq.n	800a91e <UART_SetConfig+0xbe6>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f4:	2b0a      	cmp	r3, #10
 800a8f6:	d00d      	beq.n	800a914 <UART_SetConfig+0xbdc>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fc:	2b0b      	cmp	r3, #11
 800a8fe:	d104      	bne.n	800a90a <UART_SetConfig+0xbd2>
 800a900:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a904:	f04f 0400 	mov.w	r4, #0
 800a908:	e03a      	b.n	800a980 <UART_SetConfig+0xc48>
 800a90a:	f04f 0301 	mov.w	r3, #1
 800a90e:	f04f 0400 	mov.w	r4, #0
 800a912:	e035      	b.n	800a980 <UART_SetConfig+0xc48>
 800a914:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a918:	f04f 0400 	mov.w	r4, #0
 800a91c:	e030      	b.n	800a980 <UART_SetConfig+0xc48>
 800a91e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a922:	f04f 0400 	mov.w	r4, #0
 800a926:	e02b      	b.n	800a980 <UART_SetConfig+0xc48>
 800a928:	f04f 0320 	mov.w	r3, #32
 800a92c:	f04f 0400 	mov.w	r4, #0
 800a930:	e026      	b.n	800a980 <UART_SetConfig+0xc48>
 800a932:	f04f 0310 	mov.w	r3, #16
 800a936:	f04f 0400 	mov.w	r4, #0
 800a93a:	e021      	b.n	800a980 <UART_SetConfig+0xc48>
 800a93c:	f04f 030c 	mov.w	r3, #12
 800a940:	f04f 0400 	mov.w	r4, #0
 800a944:	e01c      	b.n	800a980 <UART_SetConfig+0xc48>
 800a946:	f04f 030a 	mov.w	r3, #10
 800a94a:	f04f 0400 	mov.w	r4, #0
 800a94e:	e017      	b.n	800a980 <UART_SetConfig+0xc48>
 800a950:	f04f 0308 	mov.w	r3, #8
 800a954:	f04f 0400 	mov.w	r4, #0
 800a958:	e012      	b.n	800a980 <UART_SetConfig+0xc48>
 800a95a:	f04f 0306 	mov.w	r3, #6
 800a95e:	f04f 0400 	mov.w	r4, #0
 800a962:	e00d      	b.n	800a980 <UART_SetConfig+0xc48>
 800a964:	f04f 0304 	mov.w	r3, #4
 800a968:	f04f 0400 	mov.w	r4, #0
 800a96c:	e008      	b.n	800a980 <UART_SetConfig+0xc48>
 800a96e:	f04f 0302 	mov.w	r3, #2
 800a972:	f04f 0400 	mov.w	r4, #0
 800a976:	e003      	b.n	800a980 <UART_SetConfig+0xc48>
 800a978:	f04f 0301 	mov.w	r3, #1
 800a97c:	f04f 0400 	mov.w	r4, #0
 800a980:	461a      	mov	r2, r3
 800a982:	4623      	mov	r3, r4
 800a984:	f7f5 fca8 	bl	80002d8 <__aeabi_uldivmod>
 800a988:	4603      	mov	r3, r0
 800a98a:	460c      	mov	r4, r1
 800a98c:	4619      	mov	r1, r3
 800a98e:	4622      	mov	r2, r4
 800a990:	f04f 0300 	mov.w	r3, #0
 800a994:	f04f 0400 	mov.w	r4, #0
 800a998:	0214      	lsls	r4, r2, #8
 800a99a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a99e:	020b      	lsls	r3, r1, #8
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	6852      	ldr	r2, [r2, #4]
 800a9a4:	0852      	lsrs	r2, r2, #1
 800a9a6:	4611      	mov	r1, r2
 800a9a8:	f04f 0200 	mov.w	r2, #0
 800a9ac:	eb13 0b01 	adds.w	fp, r3, r1
 800a9b0:	eb44 0c02 	adc.w	ip, r4, r2
 800a9b4:	4658      	mov	r0, fp
 800a9b6:	4661      	mov	r1, ip
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	f04f 0400 	mov.w	r4, #0
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	4623      	mov	r3, r4
 800a9c4:	f7f5 fc88 	bl	80002d8 <__aeabi_uldivmod>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a9ce:	e389      	b.n	800b0e4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9d0:	f107 0318 	add.w	r3, r7, #24
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7fd fd29 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f04f 0100 	mov.w	r1, #0
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d067      	beq.n	800aaba <UART_SetConfig+0xd82>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d05e      	beq.n	800aab0 <UART_SetConfig+0xd78>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	d055      	beq.n	800aaa6 <UART_SetConfig+0xd6e>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fe:	2b03      	cmp	r3, #3
 800aa00:	d04c      	beq.n	800aa9c <UART_SetConfig+0xd64>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa06:	2b04      	cmp	r3, #4
 800aa08:	d043      	beq.n	800aa92 <UART_SetConfig+0xd5a>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0e:	2b05      	cmp	r3, #5
 800aa10:	d03a      	beq.n	800aa88 <UART_SetConfig+0xd50>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa16:	2b06      	cmp	r3, #6
 800aa18:	d031      	beq.n	800aa7e <UART_SetConfig+0xd46>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1e:	2b07      	cmp	r3, #7
 800aa20:	d028      	beq.n	800aa74 <UART_SetConfig+0xd3c>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa26:	2b08      	cmp	r3, #8
 800aa28:	d01f      	beq.n	800aa6a <UART_SetConfig+0xd32>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2e:	2b09      	cmp	r3, #9
 800aa30:	d016      	beq.n	800aa60 <UART_SetConfig+0xd28>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa36:	2b0a      	cmp	r3, #10
 800aa38:	d00d      	beq.n	800aa56 <UART_SetConfig+0xd1e>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3e:	2b0b      	cmp	r3, #11
 800aa40:	d104      	bne.n	800aa4c <UART_SetConfig+0xd14>
 800aa42:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa46:	f04f 0400 	mov.w	r4, #0
 800aa4a:	e03a      	b.n	800aac2 <UART_SetConfig+0xd8a>
 800aa4c:	f04f 0301 	mov.w	r3, #1
 800aa50:	f04f 0400 	mov.w	r4, #0
 800aa54:	e035      	b.n	800aac2 <UART_SetConfig+0xd8a>
 800aa56:	f04f 0380 	mov.w	r3, #128	; 0x80
 800aa5a:	f04f 0400 	mov.w	r4, #0
 800aa5e:	e030      	b.n	800aac2 <UART_SetConfig+0xd8a>
 800aa60:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aa64:	f04f 0400 	mov.w	r4, #0
 800aa68:	e02b      	b.n	800aac2 <UART_SetConfig+0xd8a>
 800aa6a:	f04f 0320 	mov.w	r3, #32
 800aa6e:	f04f 0400 	mov.w	r4, #0
 800aa72:	e026      	b.n	800aac2 <UART_SetConfig+0xd8a>
 800aa74:	f04f 0310 	mov.w	r3, #16
 800aa78:	f04f 0400 	mov.w	r4, #0
 800aa7c:	e021      	b.n	800aac2 <UART_SetConfig+0xd8a>
 800aa7e:	f04f 030c 	mov.w	r3, #12
 800aa82:	f04f 0400 	mov.w	r4, #0
 800aa86:	e01c      	b.n	800aac2 <UART_SetConfig+0xd8a>
 800aa88:	f04f 030a 	mov.w	r3, #10
 800aa8c:	f04f 0400 	mov.w	r4, #0
 800aa90:	e017      	b.n	800aac2 <UART_SetConfig+0xd8a>
 800aa92:	f04f 0308 	mov.w	r3, #8
 800aa96:	f04f 0400 	mov.w	r4, #0
 800aa9a:	e012      	b.n	800aac2 <UART_SetConfig+0xd8a>
 800aa9c:	f04f 0306 	mov.w	r3, #6
 800aaa0:	f04f 0400 	mov.w	r4, #0
 800aaa4:	e00d      	b.n	800aac2 <UART_SetConfig+0xd8a>
 800aaa6:	f04f 0304 	mov.w	r3, #4
 800aaaa:	f04f 0400 	mov.w	r4, #0
 800aaae:	e008      	b.n	800aac2 <UART_SetConfig+0xd8a>
 800aab0:	f04f 0302 	mov.w	r3, #2
 800aab4:	f04f 0400 	mov.w	r4, #0
 800aab8:	e003      	b.n	800aac2 <UART_SetConfig+0xd8a>
 800aaba:	f04f 0301 	mov.w	r3, #1
 800aabe:	f04f 0400 	mov.w	r4, #0
 800aac2:	461a      	mov	r2, r3
 800aac4:	4623      	mov	r3, r4
 800aac6:	f7f5 fc07 	bl	80002d8 <__aeabi_uldivmod>
 800aaca:	4603      	mov	r3, r0
 800aacc:	460c      	mov	r4, r1
 800aace:	4619      	mov	r1, r3
 800aad0:	4622      	mov	r2, r4
 800aad2:	f04f 0300 	mov.w	r3, #0
 800aad6:	f04f 0400 	mov.w	r4, #0
 800aada:	0214      	lsls	r4, r2, #8
 800aadc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800aae0:	020b      	lsls	r3, r1, #8
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	6852      	ldr	r2, [r2, #4]
 800aae6:	0852      	lsrs	r2, r2, #1
 800aae8:	4611      	mov	r1, r2
 800aaea:	f04f 0200 	mov.w	r2, #0
 800aaee:	eb13 0b01 	adds.w	fp, r3, r1
 800aaf2:	eb44 0c02 	adc.w	ip, r4, r2
 800aaf6:	4658      	mov	r0, fp
 800aaf8:	4661      	mov	r1, ip
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	f04f 0400 	mov.w	r4, #0
 800ab02:	461a      	mov	r2, r3
 800ab04:	4623      	mov	r3, r4
 800ab06:	f7f5 fbe7 	bl	80002d8 <__aeabi_uldivmod>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	460c      	mov	r4, r1
 800ab0e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ab10:	e2e8      	b.n	800b0e4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab12:	f107 030c 	add.w	r3, r7, #12
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7fd fdd4 	bl	80086c4 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f04f 0100 	mov.w	r1, #0
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d067      	beq.n	800abfc <UART_SetConfig+0xec4>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d05e      	beq.n	800abf2 <UART_SetConfig+0xeba>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d055      	beq.n	800abe8 <UART_SetConfig+0xeb0>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab40:	2b03      	cmp	r3, #3
 800ab42:	d04c      	beq.n	800abde <UART_SetConfig+0xea6>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab48:	2b04      	cmp	r3, #4
 800ab4a:	d043      	beq.n	800abd4 <UART_SetConfig+0xe9c>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab50:	2b05      	cmp	r3, #5
 800ab52:	d03a      	beq.n	800abca <UART_SetConfig+0xe92>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab58:	2b06      	cmp	r3, #6
 800ab5a:	d031      	beq.n	800abc0 <UART_SetConfig+0xe88>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab60:	2b07      	cmp	r3, #7
 800ab62:	d028      	beq.n	800abb6 <UART_SetConfig+0xe7e>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab68:	2b08      	cmp	r3, #8
 800ab6a:	d01f      	beq.n	800abac <UART_SetConfig+0xe74>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab70:	2b09      	cmp	r3, #9
 800ab72:	d016      	beq.n	800aba2 <UART_SetConfig+0xe6a>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab78:	2b0a      	cmp	r3, #10
 800ab7a:	d00d      	beq.n	800ab98 <UART_SetConfig+0xe60>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab80:	2b0b      	cmp	r3, #11
 800ab82:	d104      	bne.n	800ab8e <UART_SetConfig+0xe56>
 800ab84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab88:	f04f 0400 	mov.w	r4, #0
 800ab8c:	e03a      	b.n	800ac04 <UART_SetConfig+0xecc>
 800ab8e:	f04f 0301 	mov.w	r3, #1
 800ab92:	f04f 0400 	mov.w	r4, #0
 800ab96:	e035      	b.n	800ac04 <UART_SetConfig+0xecc>
 800ab98:	f04f 0380 	mov.w	r3, #128	; 0x80
 800ab9c:	f04f 0400 	mov.w	r4, #0
 800aba0:	e030      	b.n	800ac04 <UART_SetConfig+0xecc>
 800aba2:	f04f 0340 	mov.w	r3, #64	; 0x40
 800aba6:	f04f 0400 	mov.w	r4, #0
 800abaa:	e02b      	b.n	800ac04 <UART_SetConfig+0xecc>
 800abac:	f04f 0320 	mov.w	r3, #32
 800abb0:	f04f 0400 	mov.w	r4, #0
 800abb4:	e026      	b.n	800ac04 <UART_SetConfig+0xecc>
 800abb6:	f04f 0310 	mov.w	r3, #16
 800abba:	f04f 0400 	mov.w	r4, #0
 800abbe:	e021      	b.n	800ac04 <UART_SetConfig+0xecc>
 800abc0:	f04f 030c 	mov.w	r3, #12
 800abc4:	f04f 0400 	mov.w	r4, #0
 800abc8:	e01c      	b.n	800ac04 <UART_SetConfig+0xecc>
 800abca:	f04f 030a 	mov.w	r3, #10
 800abce:	f04f 0400 	mov.w	r4, #0
 800abd2:	e017      	b.n	800ac04 <UART_SetConfig+0xecc>
 800abd4:	f04f 0308 	mov.w	r3, #8
 800abd8:	f04f 0400 	mov.w	r4, #0
 800abdc:	e012      	b.n	800ac04 <UART_SetConfig+0xecc>
 800abde:	f04f 0306 	mov.w	r3, #6
 800abe2:	f04f 0400 	mov.w	r4, #0
 800abe6:	e00d      	b.n	800ac04 <UART_SetConfig+0xecc>
 800abe8:	f04f 0304 	mov.w	r3, #4
 800abec:	f04f 0400 	mov.w	r4, #0
 800abf0:	e008      	b.n	800ac04 <UART_SetConfig+0xecc>
 800abf2:	f04f 0302 	mov.w	r3, #2
 800abf6:	f04f 0400 	mov.w	r4, #0
 800abfa:	e003      	b.n	800ac04 <UART_SetConfig+0xecc>
 800abfc:	f04f 0301 	mov.w	r3, #1
 800ac00:	f04f 0400 	mov.w	r4, #0
 800ac04:	461a      	mov	r2, r3
 800ac06:	4623      	mov	r3, r4
 800ac08:	f7f5 fb66 	bl	80002d8 <__aeabi_uldivmod>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	460c      	mov	r4, r1
 800ac10:	4619      	mov	r1, r3
 800ac12:	4622      	mov	r2, r4
 800ac14:	f04f 0300 	mov.w	r3, #0
 800ac18:	f04f 0400 	mov.w	r4, #0
 800ac1c:	0214      	lsls	r4, r2, #8
 800ac1e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ac22:	020b      	lsls	r3, r1, #8
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	6852      	ldr	r2, [r2, #4]
 800ac28:	0852      	lsrs	r2, r2, #1
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	f04f 0200 	mov.w	r2, #0
 800ac30:	eb13 0b01 	adds.w	fp, r3, r1
 800ac34:	eb44 0c02 	adc.w	ip, r4, r2
 800ac38:	4658      	mov	r0, fp
 800ac3a:	4661      	mov	r1, ip
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	f04f 0400 	mov.w	r4, #0
 800ac44:	461a      	mov	r2, r3
 800ac46:	4623      	mov	r3, r4
 800ac48:	f7f5 fb46 	bl	80002d8 <__aeabi_uldivmod>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	460c      	mov	r4, r1
 800ac50:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ac52:	e247      	b.n	800b0e4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac54:	4b96      	ldr	r3, [pc, #600]	; (800aeb0 <UART_SetConfig+0x1178>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f003 0320 	and.w	r3, r3, #32
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	f000 80a3 	beq.w	800ada8 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac62:	4b93      	ldr	r3, [pc, #588]	; (800aeb0 <UART_SetConfig+0x1178>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	08db      	lsrs	r3, r3, #3
 800ac68:	f003 0303 	and.w	r3, r3, #3
 800ac6c:	4a91      	ldr	r2, [pc, #580]	; (800aeb4 <UART_SetConfig+0x117c>)
 800ac6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac72:	4618      	mov	r0, r3
 800ac74:	f04f 0100 	mov.w	r1, #0
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d067      	beq.n	800ad50 <UART_SetConfig+0x1018>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d05e      	beq.n	800ad46 <UART_SetConfig+0x100e>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8c:	2b02      	cmp	r3, #2
 800ac8e:	d055      	beq.n	800ad3c <UART_SetConfig+0x1004>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac94:	2b03      	cmp	r3, #3
 800ac96:	d04c      	beq.n	800ad32 <UART_SetConfig+0xffa>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9c:	2b04      	cmp	r3, #4
 800ac9e:	d043      	beq.n	800ad28 <UART_SetConfig+0xff0>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca4:	2b05      	cmp	r3, #5
 800aca6:	d03a      	beq.n	800ad1e <UART_SetConfig+0xfe6>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acac:	2b06      	cmp	r3, #6
 800acae:	d031      	beq.n	800ad14 <UART_SetConfig+0xfdc>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb4:	2b07      	cmp	r3, #7
 800acb6:	d028      	beq.n	800ad0a <UART_SetConfig+0xfd2>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbc:	2b08      	cmp	r3, #8
 800acbe:	d01f      	beq.n	800ad00 <UART_SetConfig+0xfc8>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc4:	2b09      	cmp	r3, #9
 800acc6:	d016      	beq.n	800acf6 <UART_SetConfig+0xfbe>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800accc:	2b0a      	cmp	r3, #10
 800acce:	d00d      	beq.n	800acec <UART_SetConfig+0xfb4>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd4:	2b0b      	cmp	r3, #11
 800acd6:	d104      	bne.n	800ace2 <UART_SetConfig+0xfaa>
 800acd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acdc:	f04f 0400 	mov.w	r4, #0
 800ace0:	e03a      	b.n	800ad58 <UART_SetConfig+0x1020>
 800ace2:	f04f 0301 	mov.w	r3, #1
 800ace6:	f04f 0400 	mov.w	r4, #0
 800acea:	e035      	b.n	800ad58 <UART_SetConfig+0x1020>
 800acec:	f04f 0380 	mov.w	r3, #128	; 0x80
 800acf0:	f04f 0400 	mov.w	r4, #0
 800acf4:	e030      	b.n	800ad58 <UART_SetConfig+0x1020>
 800acf6:	f04f 0340 	mov.w	r3, #64	; 0x40
 800acfa:	f04f 0400 	mov.w	r4, #0
 800acfe:	e02b      	b.n	800ad58 <UART_SetConfig+0x1020>
 800ad00:	f04f 0320 	mov.w	r3, #32
 800ad04:	f04f 0400 	mov.w	r4, #0
 800ad08:	e026      	b.n	800ad58 <UART_SetConfig+0x1020>
 800ad0a:	f04f 0310 	mov.w	r3, #16
 800ad0e:	f04f 0400 	mov.w	r4, #0
 800ad12:	e021      	b.n	800ad58 <UART_SetConfig+0x1020>
 800ad14:	f04f 030c 	mov.w	r3, #12
 800ad18:	f04f 0400 	mov.w	r4, #0
 800ad1c:	e01c      	b.n	800ad58 <UART_SetConfig+0x1020>
 800ad1e:	f04f 030a 	mov.w	r3, #10
 800ad22:	f04f 0400 	mov.w	r4, #0
 800ad26:	e017      	b.n	800ad58 <UART_SetConfig+0x1020>
 800ad28:	f04f 0308 	mov.w	r3, #8
 800ad2c:	f04f 0400 	mov.w	r4, #0
 800ad30:	e012      	b.n	800ad58 <UART_SetConfig+0x1020>
 800ad32:	f04f 0306 	mov.w	r3, #6
 800ad36:	f04f 0400 	mov.w	r4, #0
 800ad3a:	e00d      	b.n	800ad58 <UART_SetConfig+0x1020>
 800ad3c:	f04f 0304 	mov.w	r3, #4
 800ad40:	f04f 0400 	mov.w	r4, #0
 800ad44:	e008      	b.n	800ad58 <UART_SetConfig+0x1020>
 800ad46:	f04f 0302 	mov.w	r3, #2
 800ad4a:	f04f 0400 	mov.w	r4, #0
 800ad4e:	e003      	b.n	800ad58 <UART_SetConfig+0x1020>
 800ad50:	f04f 0301 	mov.w	r3, #1
 800ad54:	f04f 0400 	mov.w	r4, #0
 800ad58:	461a      	mov	r2, r3
 800ad5a:	4623      	mov	r3, r4
 800ad5c:	f7f5 fabc 	bl	80002d8 <__aeabi_uldivmod>
 800ad60:	4603      	mov	r3, r0
 800ad62:	460c      	mov	r4, r1
 800ad64:	4619      	mov	r1, r3
 800ad66:	4622      	mov	r2, r4
 800ad68:	f04f 0300 	mov.w	r3, #0
 800ad6c:	f04f 0400 	mov.w	r4, #0
 800ad70:	0214      	lsls	r4, r2, #8
 800ad72:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800ad76:	020b      	lsls	r3, r1, #8
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	6852      	ldr	r2, [r2, #4]
 800ad7c:	0852      	lsrs	r2, r2, #1
 800ad7e:	4611      	mov	r1, r2
 800ad80:	f04f 0200 	mov.w	r2, #0
 800ad84:	eb13 0b01 	adds.w	fp, r3, r1
 800ad88:	eb44 0c02 	adc.w	ip, r4, r2
 800ad8c:	4658      	mov	r0, fp
 800ad8e:	4661      	mov	r1, ip
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	f04f 0400 	mov.w	r4, #0
 800ad98:	461a      	mov	r2, r3
 800ad9a:	4623      	mov	r3, r4
 800ad9c:	f7f5 fa9c 	bl	80002d8 <__aeabi_uldivmod>
 800ada0:	4603      	mov	r3, r0
 800ada2:	460c      	mov	r4, r1
 800ada4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800ada6:	e19d      	b.n	800b0e4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adac:	2b00      	cmp	r3, #0
 800adae:	d05b      	beq.n	800ae68 <UART_SetConfig+0x1130>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d053      	beq.n	800ae60 <UART_SetConfig+0x1128>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d04b      	beq.n	800ae58 <UART_SetConfig+0x1120>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc4:	2b03      	cmp	r3, #3
 800adc6:	d043      	beq.n	800ae50 <UART_SetConfig+0x1118>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adcc:	2b04      	cmp	r3, #4
 800adce:	d03b      	beq.n	800ae48 <UART_SetConfig+0x1110>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add4:	2b05      	cmp	r3, #5
 800add6:	d033      	beq.n	800ae40 <UART_SetConfig+0x1108>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800addc:	2b06      	cmp	r3, #6
 800adde:	d02b      	beq.n	800ae38 <UART_SetConfig+0x1100>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade4:	2b07      	cmp	r3, #7
 800ade6:	d023      	beq.n	800ae30 <UART_SetConfig+0x10f8>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adec:	2b08      	cmp	r3, #8
 800adee:	d01b      	beq.n	800ae28 <UART_SetConfig+0x10f0>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf4:	2b09      	cmp	r3, #9
 800adf6:	d013      	beq.n	800ae20 <UART_SetConfig+0x10e8>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfc:	2b0a      	cmp	r3, #10
 800adfe:	d00b      	beq.n	800ae18 <UART_SetConfig+0x10e0>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae04:	2b0b      	cmp	r3, #11
 800ae06:	d103      	bne.n	800ae10 <UART_SetConfig+0x10d8>
 800ae08:	4b2a      	ldr	r3, [pc, #168]	; (800aeb4 <UART_SetConfig+0x117c>)
 800ae0a:	f04f 0400 	mov.w	r4, #0
 800ae0e:	e02e      	b.n	800ae6e <UART_SetConfig+0x1136>
 800ae10:	4b29      	ldr	r3, [pc, #164]	; (800aeb8 <UART_SetConfig+0x1180>)
 800ae12:	f04f 0403 	mov.w	r4, #3
 800ae16:	e02a      	b.n	800ae6e <UART_SetConfig+0x1136>
 800ae18:	4b28      	ldr	r3, [pc, #160]	; (800aebc <UART_SetConfig+0x1184>)
 800ae1a:	f04f 0400 	mov.w	r4, #0
 800ae1e:	e026      	b.n	800ae6e <UART_SetConfig+0x1136>
 800ae20:	4b27      	ldr	r3, [pc, #156]	; (800aec0 <UART_SetConfig+0x1188>)
 800ae22:	f04f 0400 	mov.w	r4, #0
 800ae26:	e022      	b.n	800ae6e <UART_SetConfig+0x1136>
 800ae28:	4b26      	ldr	r3, [pc, #152]	; (800aec4 <UART_SetConfig+0x118c>)
 800ae2a:	f04f 0400 	mov.w	r4, #0
 800ae2e:	e01e      	b.n	800ae6e <UART_SetConfig+0x1136>
 800ae30:	4b25      	ldr	r3, [pc, #148]	; (800aec8 <UART_SetConfig+0x1190>)
 800ae32:	f04f 0400 	mov.w	r4, #0
 800ae36:	e01a      	b.n	800ae6e <UART_SetConfig+0x1136>
 800ae38:	a419      	add	r4, pc, #100	; (adr r4, 800aea0 <UART_SetConfig+0x1168>)
 800ae3a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ae3e:	e016      	b.n	800ae6e <UART_SetConfig+0x1136>
 800ae40:	4b22      	ldr	r3, [pc, #136]	; (800aecc <UART_SetConfig+0x1194>)
 800ae42:	f04f 0400 	mov.w	r4, #0
 800ae46:	e012      	b.n	800ae6e <UART_SetConfig+0x1136>
 800ae48:	4b21      	ldr	r3, [pc, #132]	; (800aed0 <UART_SetConfig+0x1198>)
 800ae4a:	f04f 0400 	mov.w	r4, #0
 800ae4e:	e00e      	b.n	800ae6e <UART_SetConfig+0x1136>
 800ae50:	a415      	add	r4, pc, #84	; (adr r4, 800aea8 <UART_SetConfig+0x1170>)
 800ae52:	e9d4 3400 	ldrd	r3, r4, [r4]
 800ae56:	e00a      	b.n	800ae6e <UART_SetConfig+0x1136>
 800ae58:	4b1e      	ldr	r3, [pc, #120]	; (800aed4 <UART_SetConfig+0x119c>)
 800ae5a:	f04f 0400 	mov.w	r4, #0
 800ae5e:	e006      	b.n	800ae6e <UART_SetConfig+0x1136>
 800ae60:	4b1d      	ldr	r3, [pc, #116]	; (800aed8 <UART_SetConfig+0x11a0>)
 800ae62:	f04f 0401 	mov.w	r4, #1
 800ae66:	e002      	b.n	800ae6e <UART_SetConfig+0x1136>
 800ae68:	4b13      	ldr	r3, [pc, #76]	; (800aeb8 <UART_SetConfig+0x1180>)
 800ae6a:	f04f 0403 	mov.w	r4, #3
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	6852      	ldr	r2, [r2, #4]
 800ae72:	0852      	lsrs	r2, r2, #1
 800ae74:	4611      	mov	r1, r2
 800ae76:	f04f 0200 	mov.w	r2, #0
 800ae7a:	eb13 0b01 	adds.w	fp, r3, r1
 800ae7e:	eb44 0c02 	adc.w	ip, r4, r2
 800ae82:	4658      	mov	r0, fp
 800ae84:	4661      	mov	r1, ip
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	f04f 0400 	mov.w	r4, #0
 800ae8e:	461a      	mov	r2, r3
 800ae90:	4623      	mov	r3, r4
 800ae92:	f7f5 fa21 	bl	80002d8 <__aeabi_uldivmod>
 800ae96:	4603      	mov	r3, r0
 800ae98:	460c      	mov	r4, r1
 800ae9a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ae9c:	e122      	b.n	800b0e4 <UART_SetConfig+0x13ac>
 800ae9e:	bf00      	nop
 800aea0:	51615500 	.word	0x51615500
 800aea4:	00000000 	.word	0x00000000
 800aea8:	a2c2aa00 	.word	0xa2c2aa00
 800aeac:	00000000 	.word	0x00000000
 800aeb0:	58024400 	.word	0x58024400
 800aeb4:	03d09000 	.word	0x03d09000
 800aeb8:	d0900000 	.word	0xd0900000
 800aebc:	07a12000 	.word	0x07a12000
 800aec0:	0f424000 	.word	0x0f424000
 800aec4:	1e848000 	.word	0x1e848000
 800aec8:	3d090000 	.word	0x3d090000
 800aecc:	61a80000 	.word	0x61a80000
 800aed0:	7a120000 	.word	0x7a120000
 800aed4:	f4240000 	.word	0xf4240000
 800aed8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d05b      	beq.n	800af9c <UART_SetConfig+0x1264>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d053      	beq.n	800af94 <UART_SetConfig+0x125c>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d04b      	beq.n	800af8c <UART_SetConfig+0x1254>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef8:	2b03      	cmp	r3, #3
 800aefa:	d043      	beq.n	800af84 <UART_SetConfig+0x124c>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af00:	2b04      	cmp	r3, #4
 800af02:	d03b      	beq.n	800af7c <UART_SetConfig+0x1244>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af08:	2b05      	cmp	r3, #5
 800af0a:	d033      	beq.n	800af74 <UART_SetConfig+0x123c>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af10:	2b06      	cmp	r3, #6
 800af12:	d02b      	beq.n	800af6c <UART_SetConfig+0x1234>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af18:	2b07      	cmp	r3, #7
 800af1a:	d023      	beq.n	800af64 <UART_SetConfig+0x122c>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af20:	2b08      	cmp	r3, #8
 800af22:	d01b      	beq.n	800af5c <UART_SetConfig+0x1224>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af28:	2b09      	cmp	r3, #9
 800af2a:	d013      	beq.n	800af54 <UART_SetConfig+0x121c>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af30:	2b0a      	cmp	r3, #10
 800af32:	d00b      	beq.n	800af4c <UART_SetConfig+0x1214>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af38:	2b0b      	cmp	r3, #11
 800af3a:	d103      	bne.n	800af44 <UART_SetConfig+0x120c>
 800af3c:	4bc0      	ldr	r3, [pc, #768]	; (800b240 <UART_SetConfig+0x1508>)
 800af3e:	f04f 0400 	mov.w	r4, #0
 800af42:	e02e      	b.n	800afa2 <UART_SetConfig+0x126a>
 800af44:	4bbf      	ldr	r3, [pc, #764]	; (800b244 <UART_SetConfig+0x150c>)
 800af46:	f04f 0400 	mov.w	r4, #0
 800af4a:	e02a      	b.n	800afa2 <UART_SetConfig+0x126a>
 800af4c:	4bbe      	ldr	r3, [pc, #760]	; (800b248 <UART_SetConfig+0x1510>)
 800af4e:	f04f 0400 	mov.w	r4, #0
 800af52:	e026      	b.n	800afa2 <UART_SetConfig+0x126a>
 800af54:	4bbd      	ldr	r3, [pc, #756]	; (800b24c <UART_SetConfig+0x1514>)
 800af56:	f04f 0400 	mov.w	r4, #0
 800af5a:	e022      	b.n	800afa2 <UART_SetConfig+0x126a>
 800af5c:	4bbc      	ldr	r3, [pc, #752]	; (800b250 <UART_SetConfig+0x1518>)
 800af5e:	f04f 0400 	mov.w	r4, #0
 800af62:	e01e      	b.n	800afa2 <UART_SetConfig+0x126a>
 800af64:	4bbb      	ldr	r3, [pc, #748]	; (800b254 <UART_SetConfig+0x151c>)
 800af66:	f04f 0400 	mov.w	r4, #0
 800af6a:	e01a      	b.n	800afa2 <UART_SetConfig+0x126a>
 800af6c:	a4b0      	add	r4, pc, #704	; (adr r4, 800b230 <UART_SetConfig+0x14f8>)
 800af6e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800af72:	e016      	b.n	800afa2 <UART_SetConfig+0x126a>
 800af74:	4bb8      	ldr	r3, [pc, #736]	; (800b258 <UART_SetConfig+0x1520>)
 800af76:	f04f 0400 	mov.w	r4, #0
 800af7a:	e012      	b.n	800afa2 <UART_SetConfig+0x126a>
 800af7c:	4bb7      	ldr	r3, [pc, #732]	; (800b25c <UART_SetConfig+0x1524>)
 800af7e:	f04f 0400 	mov.w	r4, #0
 800af82:	e00e      	b.n	800afa2 <UART_SetConfig+0x126a>
 800af84:	a4ac      	add	r4, pc, #688	; (adr r4, 800b238 <UART_SetConfig+0x1500>)
 800af86:	e9d4 3400 	ldrd	r3, r4, [r4]
 800af8a:	e00a      	b.n	800afa2 <UART_SetConfig+0x126a>
 800af8c:	4bb4      	ldr	r3, [pc, #720]	; (800b260 <UART_SetConfig+0x1528>)
 800af8e:	f04f 0400 	mov.w	r4, #0
 800af92:	e006      	b.n	800afa2 <UART_SetConfig+0x126a>
 800af94:	4bb3      	ldr	r3, [pc, #716]	; (800b264 <UART_SetConfig+0x152c>)
 800af96:	f04f 0400 	mov.w	r4, #0
 800af9a:	e002      	b.n	800afa2 <UART_SetConfig+0x126a>
 800af9c:	4ba9      	ldr	r3, [pc, #676]	; (800b244 <UART_SetConfig+0x150c>)
 800af9e:	f04f 0400 	mov.w	r4, #0
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	6852      	ldr	r2, [r2, #4]
 800afa6:	0852      	lsrs	r2, r2, #1
 800afa8:	4611      	mov	r1, r2
 800afaa:	f04f 0200 	mov.w	r2, #0
 800afae:	eb13 0b01 	adds.w	fp, r3, r1
 800afb2:	eb44 0c02 	adc.w	ip, r4, r2
 800afb6:	4658      	mov	r0, fp
 800afb8:	4661      	mov	r1, ip
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	f04f 0400 	mov.w	r4, #0
 800afc2:	461a      	mov	r2, r3
 800afc4:	4623      	mov	r3, r4
 800afc6:	f7f5 f987 	bl	80002d8 <__aeabi_uldivmod>
 800afca:	4603      	mov	r3, r0
 800afcc:	460c      	mov	r4, r1
 800afce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800afd0:	e088      	b.n	800b0e4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d064      	beq.n	800b0a4 <UART_SetConfig+0x136c>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d05b      	beq.n	800b09a <UART_SetConfig+0x1362>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	d052      	beq.n	800b090 <UART_SetConfig+0x1358>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afee:	2b03      	cmp	r3, #3
 800aff0:	d04a      	beq.n	800b088 <UART_SetConfig+0x1350>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff6:	2b04      	cmp	r3, #4
 800aff8:	d041      	beq.n	800b07e <UART_SetConfig+0x1346>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affe:	2b05      	cmp	r3, #5
 800b000:	d039      	beq.n	800b076 <UART_SetConfig+0x133e>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b006:	2b06      	cmp	r3, #6
 800b008:	d031      	beq.n	800b06e <UART_SetConfig+0x1336>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00e:	2b07      	cmp	r3, #7
 800b010:	d028      	beq.n	800b064 <UART_SetConfig+0x132c>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b016:	2b08      	cmp	r3, #8
 800b018:	d01f      	beq.n	800b05a <UART_SetConfig+0x1322>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01e:	2b09      	cmp	r3, #9
 800b020:	d016      	beq.n	800b050 <UART_SetConfig+0x1318>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b026:	2b0a      	cmp	r3, #10
 800b028:	d00d      	beq.n	800b046 <UART_SetConfig+0x130e>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02e:	2b0b      	cmp	r3, #11
 800b030:	d104      	bne.n	800b03c <UART_SetConfig+0x1304>
 800b032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b036:	f04f 0400 	mov.w	r4, #0
 800b03a:	e037      	b.n	800b0ac <UART_SetConfig+0x1374>
 800b03c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b040:	f04f 0400 	mov.w	r4, #0
 800b044:	e032      	b.n	800b0ac <UART_SetConfig+0x1374>
 800b046:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b04a:	f04f 0400 	mov.w	r4, #0
 800b04e:	e02d      	b.n	800b0ac <UART_SetConfig+0x1374>
 800b050:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b054:	f04f 0400 	mov.w	r4, #0
 800b058:	e028      	b.n	800b0ac <UART_SetConfig+0x1374>
 800b05a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b05e:	f04f 0400 	mov.w	r4, #0
 800b062:	e023      	b.n	800b0ac <UART_SetConfig+0x1374>
 800b064:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b068:	f04f 0400 	mov.w	r4, #0
 800b06c:	e01e      	b.n	800b0ac <UART_SetConfig+0x1374>
 800b06e:	4b7e      	ldr	r3, [pc, #504]	; (800b268 <UART_SetConfig+0x1530>)
 800b070:	f04f 0400 	mov.w	r4, #0
 800b074:	e01a      	b.n	800b0ac <UART_SetConfig+0x1374>
 800b076:	4b7d      	ldr	r3, [pc, #500]	; (800b26c <UART_SetConfig+0x1534>)
 800b078:	f04f 0400 	mov.w	r4, #0
 800b07c:	e016      	b.n	800b0ac <UART_SetConfig+0x1374>
 800b07e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b082:	f04f 0400 	mov.w	r4, #0
 800b086:	e011      	b.n	800b0ac <UART_SetConfig+0x1374>
 800b088:	4b79      	ldr	r3, [pc, #484]	; (800b270 <UART_SetConfig+0x1538>)
 800b08a:	f04f 0400 	mov.w	r4, #0
 800b08e:	e00d      	b.n	800b0ac <UART_SetConfig+0x1374>
 800b090:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b094:	f04f 0400 	mov.w	r4, #0
 800b098:	e008      	b.n	800b0ac <UART_SetConfig+0x1374>
 800b09a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b09e:	f04f 0400 	mov.w	r4, #0
 800b0a2:	e003      	b.n	800b0ac <UART_SetConfig+0x1374>
 800b0a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b0a8:	f04f 0400 	mov.w	r4, #0
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	6852      	ldr	r2, [r2, #4]
 800b0b0:	0852      	lsrs	r2, r2, #1
 800b0b2:	4611      	mov	r1, r2
 800b0b4:	f04f 0200 	mov.w	r2, #0
 800b0b8:	eb13 0b01 	adds.w	fp, r3, r1
 800b0bc:	eb44 0c02 	adc.w	ip, r4, r2
 800b0c0:	4658      	mov	r0, fp
 800b0c2:	4661      	mov	r1, ip
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	f04f 0400 	mov.w	r4, #0
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	4623      	mov	r3, r4
 800b0d0:	f7f5 f902 	bl	80002d8 <__aeabi_uldivmod>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	460c      	mov	r4, r1
 800b0d8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b0da:	e003      	b.n	800b0e4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800b0e2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b0ea:	d309      	bcc.n	800b100 <UART_SetConfig+0x13c8>
 800b0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0f2:	d205      	bcs.n	800b100 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0fa:	60da      	str	r2, [r3, #12]
 800b0fc:	f000 bf85 	b.w	800c00a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800b100:	2301      	movs	r3, #1
 800b102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b106:	f000 bf80 	b.w	800c00a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	69db      	ldr	r3, [r3, #28]
 800b10e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b112:	f040 83da 	bne.w	800b8ca <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800b116:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b11a:	2b40      	cmp	r3, #64	; 0x40
 800b11c:	f200 83b3 	bhi.w	800b886 <UART_SetConfig+0x1b4e>
 800b120:	a201      	add	r2, pc, #4	; (adr r2, 800b128 <UART_SetConfig+0x13f0>)
 800b122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b126:	bf00      	nop
 800b128:	0800b275 	.word	0x0800b275
 800b12c:	0800b32d 	.word	0x0800b32d
 800b130:	0800b887 	.word	0x0800b887
 800b134:	0800b887 	.word	0x0800b887
 800b138:	0800b3e5 	.word	0x0800b3e5
 800b13c:	0800b887 	.word	0x0800b887
 800b140:	0800b887 	.word	0x0800b887
 800b144:	0800b887 	.word	0x0800b887
 800b148:	0800b4a1 	.word	0x0800b4a1
 800b14c:	0800b887 	.word	0x0800b887
 800b150:	0800b887 	.word	0x0800b887
 800b154:	0800b887 	.word	0x0800b887
 800b158:	0800b887 	.word	0x0800b887
 800b15c:	0800b887 	.word	0x0800b887
 800b160:	0800b887 	.word	0x0800b887
 800b164:	0800b887 	.word	0x0800b887
 800b168:	0800b55d 	.word	0x0800b55d
 800b16c:	0800b887 	.word	0x0800b887
 800b170:	0800b887 	.word	0x0800b887
 800b174:	0800b887 	.word	0x0800b887
 800b178:	0800b887 	.word	0x0800b887
 800b17c:	0800b887 	.word	0x0800b887
 800b180:	0800b887 	.word	0x0800b887
 800b184:	0800b887 	.word	0x0800b887
 800b188:	0800b887 	.word	0x0800b887
 800b18c:	0800b887 	.word	0x0800b887
 800b190:	0800b887 	.word	0x0800b887
 800b194:	0800b887 	.word	0x0800b887
 800b198:	0800b887 	.word	0x0800b887
 800b19c:	0800b887 	.word	0x0800b887
 800b1a0:	0800b887 	.word	0x0800b887
 800b1a4:	0800b887 	.word	0x0800b887
 800b1a8:	0800b6cf 	.word	0x0800b6cf
 800b1ac:	0800b887 	.word	0x0800b887
 800b1b0:	0800b887 	.word	0x0800b887
 800b1b4:	0800b887 	.word	0x0800b887
 800b1b8:	0800b887 	.word	0x0800b887
 800b1bc:	0800b887 	.word	0x0800b887
 800b1c0:	0800b887 	.word	0x0800b887
 800b1c4:	0800b887 	.word	0x0800b887
 800b1c8:	0800b887 	.word	0x0800b887
 800b1cc:	0800b887 	.word	0x0800b887
 800b1d0:	0800b887 	.word	0x0800b887
 800b1d4:	0800b887 	.word	0x0800b887
 800b1d8:	0800b887 	.word	0x0800b887
 800b1dc:	0800b887 	.word	0x0800b887
 800b1e0:	0800b887 	.word	0x0800b887
 800b1e4:	0800b887 	.word	0x0800b887
 800b1e8:	0800b887 	.word	0x0800b887
 800b1ec:	0800b887 	.word	0x0800b887
 800b1f0:	0800b887 	.word	0x0800b887
 800b1f4:	0800b887 	.word	0x0800b887
 800b1f8:	0800b887 	.word	0x0800b887
 800b1fc:	0800b887 	.word	0x0800b887
 800b200:	0800b887 	.word	0x0800b887
 800b204:	0800b887 	.word	0x0800b887
 800b208:	0800b887 	.word	0x0800b887
 800b20c:	0800b887 	.word	0x0800b887
 800b210:	0800b887 	.word	0x0800b887
 800b214:	0800b887 	.word	0x0800b887
 800b218:	0800b887 	.word	0x0800b887
 800b21c:	0800b887 	.word	0x0800b887
 800b220:	0800b887 	.word	0x0800b887
 800b224:	0800b887 	.word	0x0800b887
 800b228:	0800b7c5 	.word	0x0800b7c5
 800b22c:	f3af 8000 	nop.w
 800b230:	05161500 	.word	0x05161500
 800b234:	00000000 	.word	0x00000000
 800b238:	0a2c2a00 	.word	0x0a2c2a00
 800b23c:	00000000 	.word	0x00000000
 800b240:	003d0900 	.word	0x003d0900
 800b244:	3d090000 	.word	0x3d090000
 800b248:	007a1200 	.word	0x007a1200
 800b24c:	00f42400 	.word	0x00f42400
 800b250:	01e84800 	.word	0x01e84800
 800b254:	03d09000 	.word	0x03d09000
 800b258:	061a8000 	.word	0x061a8000
 800b25c:	07a12000 	.word	0x07a12000
 800b260:	0f424000 	.word	0x0f424000
 800b264:	1e848000 	.word	0x1e848000
 800b268:	000aaa00 	.word	0x000aaa00
 800b26c:	000ccc00 	.word	0x000ccc00
 800b270:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b274:	f7fb ff42 	bl	80070fc <HAL_RCC_GetPCLK1Freq>
 800b278:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d044      	beq.n	800b30c <UART_SetConfig+0x15d4>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b286:	2b01      	cmp	r3, #1
 800b288:	d03e      	beq.n	800b308 <UART_SetConfig+0x15d0>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28e:	2b02      	cmp	r3, #2
 800b290:	d038      	beq.n	800b304 <UART_SetConfig+0x15cc>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b296:	2b03      	cmp	r3, #3
 800b298:	d032      	beq.n	800b300 <UART_SetConfig+0x15c8>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29e:	2b04      	cmp	r3, #4
 800b2a0:	d02c      	beq.n	800b2fc <UART_SetConfig+0x15c4>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a6:	2b05      	cmp	r3, #5
 800b2a8:	d026      	beq.n	800b2f8 <UART_SetConfig+0x15c0>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ae:	2b06      	cmp	r3, #6
 800b2b0:	d020      	beq.n	800b2f4 <UART_SetConfig+0x15bc>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b6:	2b07      	cmp	r3, #7
 800b2b8:	d01a      	beq.n	800b2f0 <UART_SetConfig+0x15b8>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2be:	2b08      	cmp	r3, #8
 800b2c0:	d014      	beq.n	800b2ec <UART_SetConfig+0x15b4>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c6:	2b09      	cmp	r3, #9
 800b2c8:	d00e      	beq.n	800b2e8 <UART_SetConfig+0x15b0>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ce:	2b0a      	cmp	r3, #10
 800b2d0:	d008      	beq.n	800b2e4 <UART_SetConfig+0x15ac>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d6:	2b0b      	cmp	r3, #11
 800b2d8:	d102      	bne.n	800b2e0 <UART_SetConfig+0x15a8>
 800b2da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2de:	e016      	b.n	800b30e <UART_SetConfig+0x15d6>
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	e014      	b.n	800b30e <UART_SetConfig+0x15d6>
 800b2e4:	2380      	movs	r3, #128	; 0x80
 800b2e6:	e012      	b.n	800b30e <UART_SetConfig+0x15d6>
 800b2e8:	2340      	movs	r3, #64	; 0x40
 800b2ea:	e010      	b.n	800b30e <UART_SetConfig+0x15d6>
 800b2ec:	2320      	movs	r3, #32
 800b2ee:	e00e      	b.n	800b30e <UART_SetConfig+0x15d6>
 800b2f0:	2310      	movs	r3, #16
 800b2f2:	e00c      	b.n	800b30e <UART_SetConfig+0x15d6>
 800b2f4:	230c      	movs	r3, #12
 800b2f6:	e00a      	b.n	800b30e <UART_SetConfig+0x15d6>
 800b2f8:	230a      	movs	r3, #10
 800b2fa:	e008      	b.n	800b30e <UART_SetConfig+0x15d6>
 800b2fc:	2308      	movs	r3, #8
 800b2fe:	e006      	b.n	800b30e <UART_SetConfig+0x15d6>
 800b300:	2306      	movs	r3, #6
 800b302:	e004      	b.n	800b30e <UART_SetConfig+0x15d6>
 800b304:	2304      	movs	r3, #4
 800b306:	e002      	b.n	800b30e <UART_SetConfig+0x15d6>
 800b308:	2302      	movs	r3, #2
 800b30a:	e000      	b.n	800b30e <UART_SetConfig+0x15d6>
 800b30c:	2301      	movs	r3, #1
 800b30e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b310:	fbb2 f3f3 	udiv	r3, r2, r3
 800b314:	005a      	lsls	r2, r3, #1
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	085b      	lsrs	r3, r3, #1
 800b31c:	441a      	add	r2, r3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	fbb2 f3f3 	udiv	r3, r2, r3
 800b326:	b29b      	uxth	r3, r3
 800b328:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b32a:	e2b0      	b.n	800b88e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b32c:	f7fb fefc 	bl	8007128 <HAL_RCC_GetPCLK2Freq>
 800b330:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b336:	2b00      	cmp	r3, #0
 800b338:	d044      	beq.n	800b3c4 <UART_SetConfig+0x168c>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d03e      	beq.n	800b3c0 <UART_SetConfig+0x1688>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b346:	2b02      	cmp	r3, #2
 800b348:	d038      	beq.n	800b3bc <UART_SetConfig+0x1684>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b34e:	2b03      	cmp	r3, #3
 800b350:	d032      	beq.n	800b3b8 <UART_SetConfig+0x1680>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b356:	2b04      	cmp	r3, #4
 800b358:	d02c      	beq.n	800b3b4 <UART_SetConfig+0x167c>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35e:	2b05      	cmp	r3, #5
 800b360:	d026      	beq.n	800b3b0 <UART_SetConfig+0x1678>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b366:	2b06      	cmp	r3, #6
 800b368:	d020      	beq.n	800b3ac <UART_SetConfig+0x1674>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36e:	2b07      	cmp	r3, #7
 800b370:	d01a      	beq.n	800b3a8 <UART_SetConfig+0x1670>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b376:	2b08      	cmp	r3, #8
 800b378:	d014      	beq.n	800b3a4 <UART_SetConfig+0x166c>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37e:	2b09      	cmp	r3, #9
 800b380:	d00e      	beq.n	800b3a0 <UART_SetConfig+0x1668>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b386:	2b0a      	cmp	r3, #10
 800b388:	d008      	beq.n	800b39c <UART_SetConfig+0x1664>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38e:	2b0b      	cmp	r3, #11
 800b390:	d102      	bne.n	800b398 <UART_SetConfig+0x1660>
 800b392:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b396:	e016      	b.n	800b3c6 <UART_SetConfig+0x168e>
 800b398:	2301      	movs	r3, #1
 800b39a:	e014      	b.n	800b3c6 <UART_SetConfig+0x168e>
 800b39c:	2380      	movs	r3, #128	; 0x80
 800b39e:	e012      	b.n	800b3c6 <UART_SetConfig+0x168e>
 800b3a0:	2340      	movs	r3, #64	; 0x40
 800b3a2:	e010      	b.n	800b3c6 <UART_SetConfig+0x168e>
 800b3a4:	2320      	movs	r3, #32
 800b3a6:	e00e      	b.n	800b3c6 <UART_SetConfig+0x168e>
 800b3a8:	2310      	movs	r3, #16
 800b3aa:	e00c      	b.n	800b3c6 <UART_SetConfig+0x168e>
 800b3ac:	230c      	movs	r3, #12
 800b3ae:	e00a      	b.n	800b3c6 <UART_SetConfig+0x168e>
 800b3b0:	230a      	movs	r3, #10
 800b3b2:	e008      	b.n	800b3c6 <UART_SetConfig+0x168e>
 800b3b4:	2308      	movs	r3, #8
 800b3b6:	e006      	b.n	800b3c6 <UART_SetConfig+0x168e>
 800b3b8:	2306      	movs	r3, #6
 800b3ba:	e004      	b.n	800b3c6 <UART_SetConfig+0x168e>
 800b3bc:	2304      	movs	r3, #4
 800b3be:	e002      	b.n	800b3c6 <UART_SetConfig+0x168e>
 800b3c0:	2302      	movs	r3, #2
 800b3c2:	e000      	b.n	800b3c6 <UART_SetConfig+0x168e>
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3cc:	005a      	lsls	r2, r3, #1
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	085b      	lsrs	r3, r3, #1
 800b3d4:	441a      	add	r2, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b3e2:	e254      	b.n	800b88e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3e4:	f107 0318 	add.w	r3, r7, #24
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7fd f81f 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3ee:	69fa      	ldr	r2, [r7, #28]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d044      	beq.n	800b482 <UART_SetConfig+0x174a>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d03e      	beq.n	800b47e <UART_SetConfig+0x1746>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b404:	2b02      	cmp	r3, #2
 800b406:	d038      	beq.n	800b47a <UART_SetConfig+0x1742>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40c:	2b03      	cmp	r3, #3
 800b40e:	d032      	beq.n	800b476 <UART_SetConfig+0x173e>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b414:	2b04      	cmp	r3, #4
 800b416:	d02c      	beq.n	800b472 <UART_SetConfig+0x173a>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41c:	2b05      	cmp	r3, #5
 800b41e:	d026      	beq.n	800b46e <UART_SetConfig+0x1736>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b424:	2b06      	cmp	r3, #6
 800b426:	d020      	beq.n	800b46a <UART_SetConfig+0x1732>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42c:	2b07      	cmp	r3, #7
 800b42e:	d01a      	beq.n	800b466 <UART_SetConfig+0x172e>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b434:	2b08      	cmp	r3, #8
 800b436:	d014      	beq.n	800b462 <UART_SetConfig+0x172a>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43c:	2b09      	cmp	r3, #9
 800b43e:	d00e      	beq.n	800b45e <UART_SetConfig+0x1726>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b444:	2b0a      	cmp	r3, #10
 800b446:	d008      	beq.n	800b45a <UART_SetConfig+0x1722>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44c:	2b0b      	cmp	r3, #11
 800b44e:	d102      	bne.n	800b456 <UART_SetConfig+0x171e>
 800b450:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b454:	e016      	b.n	800b484 <UART_SetConfig+0x174c>
 800b456:	2301      	movs	r3, #1
 800b458:	e014      	b.n	800b484 <UART_SetConfig+0x174c>
 800b45a:	2380      	movs	r3, #128	; 0x80
 800b45c:	e012      	b.n	800b484 <UART_SetConfig+0x174c>
 800b45e:	2340      	movs	r3, #64	; 0x40
 800b460:	e010      	b.n	800b484 <UART_SetConfig+0x174c>
 800b462:	2320      	movs	r3, #32
 800b464:	e00e      	b.n	800b484 <UART_SetConfig+0x174c>
 800b466:	2310      	movs	r3, #16
 800b468:	e00c      	b.n	800b484 <UART_SetConfig+0x174c>
 800b46a:	230c      	movs	r3, #12
 800b46c:	e00a      	b.n	800b484 <UART_SetConfig+0x174c>
 800b46e:	230a      	movs	r3, #10
 800b470:	e008      	b.n	800b484 <UART_SetConfig+0x174c>
 800b472:	2308      	movs	r3, #8
 800b474:	e006      	b.n	800b484 <UART_SetConfig+0x174c>
 800b476:	2306      	movs	r3, #6
 800b478:	e004      	b.n	800b484 <UART_SetConfig+0x174c>
 800b47a:	2304      	movs	r3, #4
 800b47c:	e002      	b.n	800b484 <UART_SetConfig+0x174c>
 800b47e:	2302      	movs	r3, #2
 800b480:	e000      	b.n	800b484 <UART_SetConfig+0x174c>
 800b482:	2301      	movs	r3, #1
 800b484:	fbb2 f3f3 	udiv	r3, r2, r3
 800b488:	005a      	lsls	r2, r3, #1
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	085b      	lsrs	r3, r3, #1
 800b490:	441a      	add	r2, r3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	fbb2 f3f3 	udiv	r3, r2, r3
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b49e:	e1f6      	b.n	800b88e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4a0:	f107 030c 	add.w	r3, r7, #12
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7fd f90d 	bl	80086c4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4aa:	693a      	ldr	r2, [r7, #16]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d044      	beq.n	800b53e <UART_SetConfig+0x1806>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d03e      	beq.n	800b53a <UART_SetConfig+0x1802>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c0:	2b02      	cmp	r3, #2
 800b4c2:	d038      	beq.n	800b536 <UART_SetConfig+0x17fe>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c8:	2b03      	cmp	r3, #3
 800b4ca:	d032      	beq.n	800b532 <UART_SetConfig+0x17fa>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d0:	2b04      	cmp	r3, #4
 800b4d2:	d02c      	beq.n	800b52e <UART_SetConfig+0x17f6>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d8:	2b05      	cmp	r3, #5
 800b4da:	d026      	beq.n	800b52a <UART_SetConfig+0x17f2>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e0:	2b06      	cmp	r3, #6
 800b4e2:	d020      	beq.n	800b526 <UART_SetConfig+0x17ee>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e8:	2b07      	cmp	r3, #7
 800b4ea:	d01a      	beq.n	800b522 <UART_SetConfig+0x17ea>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f0:	2b08      	cmp	r3, #8
 800b4f2:	d014      	beq.n	800b51e <UART_SetConfig+0x17e6>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f8:	2b09      	cmp	r3, #9
 800b4fa:	d00e      	beq.n	800b51a <UART_SetConfig+0x17e2>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b500:	2b0a      	cmp	r3, #10
 800b502:	d008      	beq.n	800b516 <UART_SetConfig+0x17de>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b508:	2b0b      	cmp	r3, #11
 800b50a:	d102      	bne.n	800b512 <UART_SetConfig+0x17da>
 800b50c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b510:	e016      	b.n	800b540 <UART_SetConfig+0x1808>
 800b512:	2301      	movs	r3, #1
 800b514:	e014      	b.n	800b540 <UART_SetConfig+0x1808>
 800b516:	2380      	movs	r3, #128	; 0x80
 800b518:	e012      	b.n	800b540 <UART_SetConfig+0x1808>
 800b51a:	2340      	movs	r3, #64	; 0x40
 800b51c:	e010      	b.n	800b540 <UART_SetConfig+0x1808>
 800b51e:	2320      	movs	r3, #32
 800b520:	e00e      	b.n	800b540 <UART_SetConfig+0x1808>
 800b522:	2310      	movs	r3, #16
 800b524:	e00c      	b.n	800b540 <UART_SetConfig+0x1808>
 800b526:	230c      	movs	r3, #12
 800b528:	e00a      	b.n	800b540 <UART_SetConfig+0x1808>
 800b52a:	230a      	movs	r3, #10
 800b52c:	e008      	b.n	800b540 <UART_SetConfig+0x1808>
 800b52e:	2308      	movs	r3, #8
 800b530:	e006      	b.n	800b540 <UART_SetConfig+0x1808>
 800b532:	2306      	movs	r3, #6
 800b534:	e004      	b.n	800b540 <UART_SetConfig+0x1808>
 800b536:	2304      	movs	r3, #4
 800b538:	e002      	b.n	800b540 <UART_SetConfig+0x1808>
 800b53a:	2302      	movs	r3, #2
 800b53c:	e000      	b.n	800b540 <UART_SetConfig+0x1808>
 800b53e:	2301      	movs	r3, #1
 800b540:	fbb2 f3f3 	udiv	r3, r2, r3
 800b544:	005a      	lsls	r2, r3, #1
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	085b      	lsrs	r3, r3, #1
 800b54c:	441a      	add	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	fbb2 f3f3 	udiv	r3, r2, r3
 800b556:	b29b      	uxth	r3, r3
 800b558:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b55a:	e198      	b.n	800b88e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b55c:	4b87      	ldr	r3, [pc, #540]	; (800b77c <UART_SetConfig+0x1a44>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 0320 	and.w	r3, r3, #32
 800b564:	2b00      	cmp	r3, #0
 800b566:	d05e      	beq.n	800b626 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b568:	4b84      	ldr	r3, [pc, #528]	; (800b77c <UART_SetConfig+0x1a44>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	08db      	lsrs	r3, r3, #3
 800b56e:	f003 0303 	and.w	r3, r3, #3
 800b572:	4a83      	ldr	r2, [pc, #524]	; (800b780 <UART_SetConfig+0x1a48>)
 800b574:	40da      	lsrs	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d044      	beq.n	800b608 <UART_SetConfig+0x18d0>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b582:	2b01      	cmp	r3, #1
 800b584:	d03e      	beq.n	800b604 <UART_SetConfig+0x18cc>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	d038      	beq.n	800b600 <UART_SetConfig+0x18c8>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b592:	2b03      	cmp	r3, #3
 800b594:	d032      	beq.n	800b5fc <UART_SetConfig+0x18c4>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59a:	2b04      	cmp	r3, #4
 800b59c:	d02c      	beq.n	800b5f8 <UART_SetConfig+0x18c0>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a2:	2b05      	cmp	r3, #5
 800b5a4:	d026      	beq.n	800b5f4 <UART_SetConfig+0x18bc>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5aa:	2b06      	cmp	r3, #6
 800b5ac:	d020      	beq.n	800b5f0 <UART_SetConfig+0x18b8>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b2:	2b07      	cmp	r3, #7
 800b5b4:	d01a      	beq.n	800b5ec <UART_SetConfig+0x18b4>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ba:	2b08      	cmp	r3, #8
 800b5bc:	d014      	beq.n	800b5e8 <UART_SetConfig+0x18b0>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c2:	2b09      	cmp	r3, #9
 800b5c4:	d00e      	beq.n	800b5e4 <UART_SetConfig+0x18ac>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ca:	2b0a      	cmp	r3, #10
 800b5cc:	d008      	beq.n	800b5e0 <UART_SetConfig+0x18a8>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d2:	2b0b      	cmp	r3, #11
 800b5d4:	d102      	bne.n	800b5dc <UART_SetConfig+0x18a4>
 800b5d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5da:	e016      	b.n	800b60a <UART_SetConfig+0x18d2>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e014      	b.n	800b60a <UART_SetConfig+0x18d2>
 800b5e0:	2380      	movs	r3, #128	; 0x80
 800b5e2:	e012      	b.n	800b60a <UART_SetConfig+0x18d2>
 800b5e4:	2340      	movs	r3, #64	; 0x40
 800b5e6:	e010      	b.n	800b60a <UART_SetConfig+0x18d2>
 800b5e8:	2320      	movs	r3, #32
 800b5ea:	e00e      	b.n	800b60a <UART_SetConfig+0x18d2>
 800b5ec:	2310      	movs	r3, #16
 800b5ee:	e00c      	b.n	800b60a <UART_SetConfig+0x18d2>
 800b5f0:	230c      	movs	r3, #12
 800b5f2:	e00a      	b.n	800b60a <UART_SetConfig+0x18d2>
 800b5f4:	230a      	movs	r3, #10
 800b5f6:	e008      	b.n	800b60a <UART_SetConfig+0x18d2>
 800b5f8:	2308      	movs	r3, #8
 800b5fa:	e006      	b.n	800b60a <UART_SetConfig+0x18d2>
 800b5fc:	2306      	movs	r3, #6
 800b5fe:	e004      	b.n	800b60a <UART_SetConfig+0x18d2>
 800b600:	2304      	movs	r3, #4
 800b602:	e002      	b.n	800b60a <UART_SetConfig+0x18d2>
 800b604:	2302      	movs	r3, #2
 800b606:	e000      	b.n	800b60a <UART_SetConfig+0x18d2>
 800b608:	2301      	movs	r3, #1
 800b60a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b60e:	005a      	lsls	r2, r3, #1
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	085b      	lsrs	r3, r3, #1
 800b616:	441a      	add	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b620:	b29b      	uxth	r3, r3
 800b622:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b624:	e133      	b.n	800b88e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d043      	beq.n	800b6b6 <UART_SetConfig+0x197e>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b632:	2b01      	cmp	r3, #1
 800b634:	d03d      	beq.n	800b6b2 <UART_SetConfig+0x197a>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63a:	2b02      	cmp	r3, #2
 800b63c:	d037      	beq.n	800b6ae <UART_SetConfig+0x1976>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b642:	2b03      	cmp	r3, #3
 800b644:	d031      	beq.n	800b6aa <UART_SetConfig+0x1972>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64a:	2b04      	cmp	r3, #4
 800b64c:	d02b      	beq.n	800b6a6 <UART_SetConfig+0x196e>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b652:	2b05      	cmp	r3, #5
 800b654:	d025      	beq.n	800b6a2 <UART_SetConfig+0x196a>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65a:	2b06      	cmp	r3, #6
 800b65c:	d01f      	beq.n	800b69e <UART_SetConfig+0x1966>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b662:	2b07      	cmp	r3, #7
 800b664:	d019      	beq.n	800b69a <UART_SetConfig+0x1962>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66a:	2b08      	cmp	r3, #8
 800b66c:	d013      	beq.n	800b696 <UART_SetConfig+0x195e>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b672:	2b09      	cmp	r3, #9
 800b674:	d00d      	beq.n	800b692 <UART_SetConfig+0x195a>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67a:	2b0a      	cmp	r3, #10
 800b67c:	d007      	beq.n	800b68e <UART_SetConfig+0x1956>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b682:	2b0b      	cmp	r3, #11
 800b684:	d101      	bne.n	800b68a <UART_SetConfig+0x1952>
 800b686:	4b3f      	ldr	r3, [pc, #252]	; (800b784 <UART_SetConfig+0x1a4c>)
 800b688:	e016      	b.n	800b6b8 <UART_SetConfig+0x1980>
 800b68a:	4b3f      	ldr	r3, [pc, #252]	; (800b788 <UART_SetConfig+0x1a50>)
 800b68c:	e014      	b.n	800b6b8 <UART_SetConfig+0x1980>
 800b68e:	4b3f      	ldr	r3, [pc, #252]	; (800b78c <UART_SetConfig+0x1a54>)
 800b690:	e012      	b.n	800b6b8 <UART_SetConfig+0x1980>
 800b692:	4b3f      	ldr	r3, [pc, #252]	; (800b790 <UART_SetConfig+0x1a58>)
 800b694:	e010      	b.n	800b6b8 <UART_SetConfig+0x1980>
 800b696:	4b3f      	ldr	r3, [pc, #252]	; (800b794 <UART_SetConfig+0x1a5c>)
 800b698:	e00e      	b.n	800b6b8 <UART_SetConfig+0x1980>
 800b69a:	4b3f      	ldr	r3, [pc, #252]	; (800b798 <UART_SetConfig+0x1a60>)
 800b69c:	e00c      	b.n	800b6b8 <UART_SetConfig+0x1980>
 800b69e:	4b3f      	ldr	r3, [pc, #252]	; (800b79c <UART_SetConfig+0x1a64>)
 800b6a0:	e00a      	b.n	800b6b8 <UART_SetConfig+0x1980>
 800b6a2:	4b3f      	ldr	r3, [pc, #252]	; (800b7a0 <UART_SetConfig+0x1a68>)
 800b6a4:	e008      	b.n	800b6b8 <UART_SetConfig+0x1980>
 800b6a6:	4b3f      	ldr	r3, [pc, #252]	; (800b7a4 <UART_SetConfig+0x1a6c>)
 800b6a8:	e006      	b.n	800b6b8 <UART_SetConfig+0x1980>
 800b6aa:	4b3f      	ldr	r3, [pc, #252]	; (800b7a8 <UART_SetConfig+0x1a70>)
 800b6ac:	e004      	b.n	800b6b8 <UART_SetConfig+0x1980>
 800b6ae:	4b3f      	ldr	r3, [pc, #252]	; (800b7ac <UART_SetConfig+0x1a74>)
 800b6b0:	e002      	b.n	800b6b8 <UART_SetConfig+0x1980>
 800b6b2:	4b33      	ldr	r3, [pc, #204]	; (800b780 <UART_SetConfig+0x1a48>)
 800b6b4:	e000      	b.n	800b6b8 <UART_SetConfig+0x1980>
 800b6b6:	4b34      	ldr	r3, [pc, #208]	; (800b788 <UART_SetConfig+0x1a50>)
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	6852      	ldr	r2, [r2, #4]
 800b6bc:	0852      	lsrs	r2, r2, #1
 800b6be:	441a      	add	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c8:	b29b      	uxth	r3, r3
 800b6ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6cc:	e0df      	b.n	800b88e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d045      	beq.n	800b762 <UART_SetConfig+0x1a2a>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d03f      	beq.n	800b75e <UART_SetConfig+0x1a26>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d039      	beq.n	800b75a <UART_SetConfig+0x1a22>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ea:	2b03      	cmp	r3, #3
 800b6ec:	d033      	beq.n	800b756 <UART_SetConfig+0x1a1e>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f2:	2b04      	cmp	r3, #4
 800b6f4:	d02d      	beq.n	800b752 <UART_SetConfig+0x1a1a>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fa:	2b05      	cmp	r3, #5
 800b6fc:	d027      	beq.n	800b74e <UART_SetConfig+0x1a16>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b702:	2b06      	cmp	r3, #6
 800b704:	d021      	beq.n	800b74a <UART_SetConfig+0x1a12>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70a:	2b07      	cmp	r3, #7
 800b70c:	d01b      	beq.n	800b746 <UART_SetConfig+0x1a0e>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b712:	2b08      	cmp	r3, #8
 800b714:	d015      	beq.n	800b742 <UART_SetConfig+0x1a0a>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71a:	2b09      	cmp	r3, #9
 800b71c:	d00f      	beq.n	800b73e <UART_SetConfig+0x1a06>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b722:	2b0a      	cmp	r3, #10
 800b724:	d008      	beq.n	800b738 <UART_SetConfig+0x1a00>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72a:	2b0b      	cmp	r3, #11
 800b72c:	d102      	bne.n	800b734 <UART_SetConfig+0x19fc>
 800b72e:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b732:	e017      	b.n	800b764 <UART_SetConfig+0x1a2c>
 800b734:	4b18      	ldr	r3, [pc, #96]	; (800b798 <UART_SetConfig+0x1a60>)
 800b736:	e015      	b.n	800b764 <UART_SetConfig+0x1a2c>
 800b738:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b73c:	e012      	b.n	800b764 <UART_SetConfig+0x1a2c>
 800b73e:	4b1c      	ldr	r3, [pc, #112]	; (800b7b0 <UART_SetConfig+0x1a78>)
 800b740:	e010      	b.n	800b764 <UART_SetConfig+0x1a2c>
 800b742:	4b1c      	ldr	r3, [pc, #112]	; (800b7b4 <UART_SetConfig+0x1a7c>)
 800b744:	e00e      	b.n	800b764 <UART_SetConfig+0x1a2c>
 800b746:	4b0f      	ldr	r3, [pc, #60]	; (800b784 <UART_SetConfig+0x1a4c>)
 800b748:	e00c      	b.n	800b764 <UART_SetConfig+0x1a2c>
 800b74a:	4b1b      	ldr	r3, [pc, #108]	; (800b7b8 <UART_SetConfig+0x1a80>)
 800b74c:	e00a      	b.n	800b764 <UART_SetConfig+0x1a2c>
 800b74e:	4b1b      	ldr	r3, [pc, #108]	; (800b7bc <UART_SetConfig+0x1a84>)
 800b750:	e008      	b.n	800b764 <UART_SetConfig+0x1a2c>
 800b752:	4b0e      	ldr	r3, [pc, #56]	; (800b78c <UART_SetConfig+0x1a54>)
 800b754:	e006      	b.n	800b764 <UART_SetConfig+0x1a2c>
 800b756:	4b1a      	ldr	r3, [pc, #104]	; (800b7c0 <UART_SetConfig+0x1a88>)
 800b758:	e004      	b.n	800b764 <UART_SetConfig+0x1a2c>
 800b75a:	4b0d      	ldr	r3, [pc, #52]	; (800b790 <UART_SetConfig+0x1a58>)
 800b75c:	e002      	b.n	800b764 <UART_SetConfig+0x1a2c>
 800b75e:	4b0d      	ldr	r3, [pc, #52]	; (800b794 <UART_SetConfig+0x1a5c>)
 800b760:	e000      	b.n	800b764 <UART_SetConfig+0x1a2c>
 800b762:	4b0d      	ldr	r3, [pc, #52]	; (800b798 <UART_SetConfig+0x1a60>)
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	6852      	ldr	r2, [r2, #4]
 800b768:	0852      	lsrs	r2, r2, #1
 800b76a:	441a      	add	r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	fbb2 f3f3 	udiv	r3, r2, r3
 800b774:	b29b      	uxth	r3, r3
 800b776:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b778:	e089      	b.n	800b88e <UART_SetConfig+0x1b56>
 800b77a:	bf00      	nop
 800b77c:	58024400 	.word	0x58024400
 800b780:	03d09000 	.word	0x03d09000
 800b784:	0007a120 	.word	0x0007a120
 800b788:	07a12000 	.word	0x07a12000
 800b78c:	000f4240 	.word	0x000f4240
 800b790:	001e8480 	.word	0x001e8480
 800b794:	003d0900 	.word	0x003d0900
 800b798:	007a1200 	.word	0x007a1200
 800b79c:	00a2c2aa 	.word	0x00a2c2aa
 800b7a0:	00c35000 	.word	0x00c35000
 800b7a4:	00f42400 	.word	0x00f42400
 800b7a8:	01458554 	.word	0x01458554
 800b7ac:	01e84800 	.word	0x01e84800
 800b7b0:	0001e848 	.word	0x0001e848
 800b7b4:	0003d090 	.word	0x0003d090
 800b7b8:	000a2c2a 	.word	0x000a2c2a
 800b7bc:	000c3500 	.word	0x000c3500
 800b7c0:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d04f      	beq.n	800b86c <UART_SetConfig+0x1b34>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d048      	beq.n	800b866 <UART_SetConfig+0x1b2e>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d041      	beq.n	800b860 <UART_SetConfig+0x1b28>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e0:	2b03      	cmp	r3, #3
 800b7e2:	d03a      	beq.n	800b85a <UART_SetConfig+0x1b22>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e8:	2b04      	cmp	r3, #4
 800b7ea:	d033      	beq.n	800b854 <UART_SetConfig+0x1b1c>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f0:	2b05      	cmp	r3, #5
 800b7f2:	d02c      	beq.n	800b84e <UART_SetConfig+0x1b16>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f8:	2b06      	cmp	r3, #6
 800b7fa:	d025      	beq.n	800b848 <UART_SetConfig+0x1b10>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b800:	2b07      	cmp	r3, #7
 800b802:	d01e      	beq.n	800b842 <UART_SetConfig+0x1b0a>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b808:	2b08      	cmp	r3, #8
 800b80a:	d017      	beq.n	800b83c <UART_SetConfig+0x1b04>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b810:	2b09      	cmp	r3, #9
 800b812:	d010      	beq.n	800b836 <UART_SetConfig+0x1afe>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b818:	2b0a      	cmp	r3, #10
 800b81a:	d009      	beq.n	800b830 <UART_SetConfig+0x1af8>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b820:	2b0b      	cmp	r3, #11
 800b822:	d102      	bne.n	800b82a <UART_SetConfig+0x1af2>
 800b824:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b828:	e022      	b.n	800b870 <UART_SetConfig+0x1b38>
 800b82a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b82e:	e01f      	b.n	800b870 <UART_SetConfig+0x1b38>
 800b830:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b834:	e01c      	b.n	800b870 <UART_SetConfig+0x1b38>
 800b836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b83a:	e019      	b.n	800b870 <UART_SetConfig+0x1b38>
 800b83c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b840:	e016      	b.n	800b870 <UART_SetConfig+0x1b38>
 800b842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b846:	e013      	b.n	800b870 <UART_SetConfig+0x1b38>
 800b848:	f241 5354 	movw	r3, #5460	; 0x1554
 800b84c:	e010      	b.n	800b870 <UART_SetConfig+0x1b38>
 800b84e:	f641 1398 	movw	r3, #6552	; 0x1998
 800b852:	e00d      	b.n	800b870 <UART_SetConfig+0x1b38>
 800b854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b858:	e00a      	b.n	800b870 <UART_SetConfig+0x1b38>
 800b85a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800b85e:	e007      	b.n	800b870 <UART_SetConfig+0x1b38>
 800b860:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b864:	e004      	b.n	800b870 <UART_SetConfig+0x1b38>
 800b866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b86a:	e001      	b.n	800b870 <UART_SetConfig+0x1b38>
 800b86c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	6852      	ldr	r2, [r2, #4]
 800b874:	0852      	lsrs	r2, r2, #1
 800b876:	441a      	add	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b880:	b29b      	uxth	r3, r3
 800b882:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b884:	e003      	b.n	800b88e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800b886:	2301      	movs	r3, #1
 800b888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b88c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b890:	2b0f      	cmp	r3, #15
 800b892:	d916      	bls.n	800b8c2 <UART_SetConfig+0x1b8a>
 800b894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b89a:	d212      	bcs.n	800b8c2 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	f023 030f 	bic.w	r3, r3, #15
 800b8a4:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a8:	085b      	lsrs	r3, r3, #1
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	f003 0307 	and.w	r3, r3, #7
 800b8b0:	b29a      	uxth	r2, r3
 800b8b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b8be:	60da      	str	r2, [r3, #12]
 800b8c0:	e3a3      	b.n	800c00a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8c8:	e39f      	b.n	800c00a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800b8ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b8ce:	2b40      	cmp	r3, #64	; 0x40
 800b8d0:	f200 8388 	bhi.w	800bfe4 <UART_SetConfig+0x22ac>
 800b8d4:	a201      	add	r2, pc, #4	; (adr r2, 800b8dc <UART_SetConfig+0x1ba4>)
 800b8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8da:	bf00      	nop
 800b8dc:	0800b9e1 	.word	0x0800b9e1
 800b8e0:	0800ba97 	.word	0x0800ba97
 800b8e4:	0800bfe5 	.word	0x0800bfe5
 800b8e8:	0800bfe5 	.word	0x0800bfe5
 800b8ec:	0800bb4d 	.word	0x0800bb4d
 800b8f0:	0800bfe5 	.word	0x0800bfe5
 800b8f4:	0800bfe5 	.word	0x0800bfe5
 800b8f8:	0800bfe5 	.word	0x0800bfe5
 800b8fc:	0800bc07 	.word	0x0800bc07
 800b900:	0800bfe5 	.word	0x0800bfe5
 800b904:	0800bfe5 	.word	0x0800bfe5
 800b908:	0800bfe5 	.word	0x0800bfe5
 800b90c:	0800bfe5 	.word	0x0800bfe5
 800b910:	0800bfe5 	.word	0x0800bfe5
 800b914:	0800bfe5 	.word	0x0800bfe5
 800b918:	0800bfe5 	.word	0x0800bfe5
 800b91c:	0800bcc1 	.word	0x0800bcc1
 800b920:	0800bfe5 	.word	0x0800bfe5
 800b924:	0800bfe5 	.word	0x0800bfe5
 800b928:	0800bfe5 	.word	0x0800bfe5
 800b92c:	0800bfe5 	.word	0x0800bfe5
 800b930:	0800bfe5 	.word	0x0800bfe5
 800b934:	0800bfe5 	.word	0x0800bfe5
 800b938:	0800bfe5 	.word	0x0800bfe5
 800b93c:	0800bfe5 	.word	0x0800bfe5
 800b940:	0800bfe5 	.word	0x0800bfe5
 800b944:	0800bfe5 	.word	0x0800bfe5
 800b948:	0800bfe5 	.word	0x0800bfe5
 800b94c:	0800bfe5 	.word	0x0800bfe5
 800b950:	0800bfe5 	.word	0x0800bfe5
 800b954:	0800bfe5 	.word	0x0800bfe5
 800b958:	0800bfe5 	.word	0x0800bfe5
 800b95c:	0800be31 	.word	0x0800be31
 800b960:	0800bfe5 	.word	0x0800bfe5
 800b964:	0800bfe5 	.word	0x0800bfe5
 800b968:	0800bfe5 	.word	0x0800bfe5
 800b96c:	0800bfe5 	.word	0x0800bfe5
 800b970:	0800bfe5 	.word	0x0800bfe5
 800b974:	0800bfe5 	.word	0x0800bfe5
 800b978:	0800bfe5 	.word	0x0800bfe5
 800b97c:	0800bfe5 	.word	0x0800bfe5
 800b980:	0800bfe5 	.word	0x0800bfe5
 800b984:	0800bfe5 	.word	0x0800bfe5
 800b988:	0800bfe5 	.word	0x0800bfe5
 800b98c:	0800bfe5 	.word	0x0800bfe5
 800b990:	0800bfe5 	.word	0x0800bfe5
 800b994:	0800bfe5 	.word	0x0800bfe5
 800b998:	0800bfe5 	.word	0x0800bfe5
 800b99c:	0800bfe5 	.word	0x0800bfe5
 800b9a0:	0800bfe5 	.word	0x0800bfe5
 800b9a4:	0800bfe5 	.word	0x0800bfe5
 800b9a8:	0800bfe5 	.word	0x0800bfe5
 800b9ac:	0800bfe5 	.word	0x0800bfe5
 800b9b0:	0800bfe5 	.word	0x0800bfe5
 800b9b4:	0800bfe5 	.word	0x0800bfe5
 800b9b8:	0800bfe5 	.word	0x0800bfe5
 800b9bc:	0800bfe5 	.word	0x0800bfe5
 800b9c0:	0800bfe5 	.word	0x0800bfe5
 800b9c4:	0800bfe5 	.word	0x0800bfe5
 800b9c8:	0800bfe5 	.word	0x0800bfe5
 800b9cc:	0800bfe5 	.word	0x0800bfe5
 800b9d0:	0800bfe5 	.word	0x0800bfe5
 800b9d4:	0800bfe5 	.word	0x0800bfe5
 800b9d8:	0800bfe5 	.word	0x0800bfe5
 800b9dc:	0800bf25 	.word	0x0800bf25
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9e0:	f7fb fb8c 	bl	80070fc <HAL_RCC_GetPCLK1Freq>
 800b9e4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d044      	beq.n	800ba78 <UART_SetConfig+0x1d40>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d03e      	beq.n	800ba74 <UART_SetConfig+0x1d3c>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	d038      	beq.n	800ba70 <UART_SetConfig+0x1d38>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba02:	2b03      	cmp	r3, #3
 800ba04:	d032      	beq.n	800ba6c <UART_SetConfig+0x1d34>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0a:	2b04      	cmp	r3, #4
 800ba0c:	d02c      	beq.n	800ba68 <UART_SetConfig+0x1d30>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba12:	2b05      	cmp	r3, #5
 800ba14:	d026      	beq.n	800ba64 <UART_SetConfig+0x1d2c>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1a:	2b06      	cmp	r3, #6
 800ba1c:	d020      	beq.n	800ba60 <UART_SetConfig+0x1d28>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba22:	2b07      	cmp	r3, #7
 800ba24:	d01a      	beq.n	800ba5c <UART_SetConfig+0x1d24>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2a:	2b08      	cmp	r3, #8
 800ba2c:	d014      	beq.n	800ba58 <UART_SetConfig+0x1d20>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba32:	2b09      	cmp	r3, #9
 800ba34:	d00e      	beq.n	800ba54 <UART_SetConfig+0x1d1c>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3a:	2b0a      	cmp	r3, #10
 800ba3c:	d008      	beq.n	800ba50 <UART_SetConfig+0x1d18>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba42:	2b0b      	cmp	r3, #11
 800ba44:	d102      	bne.n	800ba4c <UART_SetConfig+0x1d14>
 800ba46:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba4a:	e016      	b.n	800ba7a <UART_SetConfig+0x1d42>
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e014      	b.n	800ba7a <UART_SetConfig+0x1d42>
 800ba50:	2380      	movs	r3, #128	; 0x80
 800ba52:	e012      	b.n	800ba7a <UART_SetConfig+0x1d42>
 800ba54:	2340      	movs	r3, #64	; 0x40
 800ba56:	e010      	b.n	800ba7a <UART_SetConfig+0x1d42>
 800ba58:	2320      	movs	r3, #32
 800ba5a:	e00e      	b.n	800ba7a <UART_SetConfig+0x1d42>
 800ba5c:	2310      	movs	r3, #16
 800ba5e:	e00c      	b.n	800ba7a <UART_SetConfig+0x1d42>
 800ba60:	230c      	movs	r3, #12
 800ba62:	e00a      	b.n	800ba7a <UART_SetConfig+0x1d42>
 800ba64:	230a      	movs	r3, #10
 800ba66:	e008      	b.n	800ba7a <UART_SetConfig+0x1d42>
 800ba68:	2308      	movs	r3, #8
 800ba6a:	e006      	b.n	800ba7a <UART_SetConfig+0x1d42>
 800ba6c:	2306      	movs	r3, #6
 800ba6e:	e004      	b.n	800ba7a <UART_SetConfig+0x1d42>
 800ba70:	2304      	movs	r3, #4
 800ba72:	e002      	b.n	800ba7a <UART_SetConfig+0x1d42>
 800ba74:	2302      	movs	r3, #2
 800ba76:	e000      	b.n	800ba7a <UART_SetConfig+0x1d42>
 800ba78:	2301      	movs	r3, #1
 800ba7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba7c:	fbb2 f2f3 	udiv	r2, r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	085b      	lsrs	r3, r3, #1
 800ba86:	441a      	add	r2, r3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba94:	e2aa      	b.n	800bfec <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba96:	f7fb fb47 	bl	8007128 <HAL_RCC_GetPCLK2Freq>
 800ba9a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d044      	beq.n	800bb2e <UART_SetConfig+0x1df6>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d03e      	beq.n	800bb2a <UART_SetConfig+0x1df2>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab0:	2b02      	cmp	r3, #2
 800bab2:	d038      	beq.n	800bb26 <UART_SetConfig+0x1dee>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab8:	2b03      	cmp	r3, #3
 800baba:	d032      	beq.n	800bb22 <UART_SetConfig+0x1dea>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac0:	2b04      	cmp	r3, #4
 800bac2:	d02c      	beq.n	800bb1e <UART_SetConfig+0x1de6>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac8:	2b05      	cmp	r3, #5
 800baca:	d026      	beq.n	800bb1a <UART_SetConfig+0x1de2>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad0:	2b06      	cmp	r3, #6
 800bad2:	d020      	beq.n	800bb16 <UART_SetConfig+0x1dde>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad8:	2b07      	cmp	r3, #7
 800bada:	d01a      	beq.n	800bb12 <UART_SetConfig+0x1dda>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae0:	2b08      	cmp	r3, #8
 800bae2:	d014      	beq.n	800bb0e <UART_SetConfig+0x1dd6>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae8:	2b09      	cmp	r3, #9
 800baea:	d00e      	beq.n	800bb0a <UART_SetConfig+0x1dd2>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf0:	2b0a      	cmp	r3, #10
 800baf2:	d008      	beq.n	800bb06 <UART_SetConfig+0x1dce>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf8:	2b0b      	cmp	r3, #11
 800bafa:	d102      	bne.n	800bb02 <UART_SetConfig+0x1dca>
 800bafc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb00:	e016      	b.n	800bb30 <UART_SetConfig+0x1df8>
 800bb02:	2301      	movs	r3, #1
 800bb04:	e014      	b.n	800bb30 <UART_SetConfig+0x1df8>
 800bb06:	2380      	movs	r3, #128	; 0x80
 800bb08:	e012      	b.n	800bb30 <UART_SetConfig+0x1df8>
 800bb0a:	2340      	movs	r3, #64	; 0x40
 800bb0c:	e010      	b.n	800bb30 <UART_SetConfig+0x1df8>
 800bb0e:	2320      	movs	r3, #32
 800bb10:	e00e      	b.n	800bb30 <UART_SetConfig+0x1df8>
 800bb12:	2310      	movs	r3, #16
 800bb14:	e00c      	b.n	800bb30 <UART_SetConfig+0x1df8>
 800bb16:	230c      	movs	r3, #12
 800bb18:	e00a      	b.n	800bb30 <UART_SetConfig+0x1df8>
 800bb1a:	230a      	movs	r3, #10
 800bb1c:	e008      	b.n	800bb30 <UART_SetConfig+0x1df8>
 800bb1e:	2308      	movs	r3, #8
 800bb20:	e006      	b.n	800bb30 <UART_SetConfig+0x1df8>
 800bb22:	2306      	movs	r3, #6
 800bb24:	e004      	b.n	800bb30 <UART_SetConfig+0x1df8>
 800bb26:	2304      	movs	r3, #4
 800bb28:	e002      	b.n	800bb30 <UART_SetConfig+0x1df8>
 800bb2a:	2302      	movs	r3, #2
 800bb2c:	e000      	b.n	800bb30 <UART_SetConfig+0x1df8>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb32:	fbb2 f2f3 	udiv	r2, r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	085b      	lsrs	r3, r3, #1
 800bb3c:	441a      	add	r2, r3
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb4a:	e24f      	b.n	800bfec <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb4c:	f107 0318 	add.w	r3, r7, #24
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7fc fc6b 	bl	800842c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb56:	69fa      	ldr	r2, [r7, #28]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d044      	beq.n	800bbea <UART_SetConfig+0x1eb2>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d03e      	beq.n	800bbe6 <UART_SetConfig+0x1eae>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	d038      	beq.n	800bbe2 <UART_SetConfig+0x1eaa>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb74:	2b03      	cmp	r3, #3
 800bb76:	d032      	beq.n	800bbde <UART_SetConfig+0x1ea6>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb7c:	2b04      	cmp	r3, #4
 800bb7e:	d02c      	beq.n	800bbda <UART_SetConfig+0x1ea2>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb84:	2b05      	cmp	r3, #5
 800bb86:	d026      	beq.n	800bbd6 <UART_SetConfig+0x1e9e>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb8c:	2b06      	cmp	r3, #6
 800bb8e:	d020      	beq.n	800bbd2 <UART_SetConfig+0x1e9a>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb94:	2b07      	cmp	r3, #7
 800bb96:	d01a      	beq.n	800bbce <UART_SetConfig+0x1e96>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9c:	2b08      	cmp	r3, #8
 800bb9e:	d014      	beq.n	800bbca <UART_SetConfig+0x1e92>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba4:	2b09      	cmp	r3, #9
 800bba6:	d00e      	beq.n	800bbc6 <UART_SetConfig+0x1e8e>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbac:	2b0a      	cmp	r3, #10
 800bbae:	d008      	beq.n	800bbc2 <UART_SetConfig+0x1e8a>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb4:	2b0b      	cmp	r3, #11
 800bbb6:	d102      	bne.n	800bbbe <UART_SetConfig+0x1e86>
 800bbb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbbc:	e016      	b.n	800bbec <UART_SetConfig+0x1eb4>
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	e014      	b.n	800bbec <UART_SetConfig+0x1eb4>
 800bbc2:	2380      	movs	r3, #128	; 0x80
 800bbc4:	e012      	b.n	800bbec <UART_SetConfig+0x1eb4>
 800bbc6:	2340      	movs	r3, #64	; 0x40
 800bbc8:	e010      	b.n	800bbec <UART_SetConfig+0x1eb4>
 800bbca:	2320      	movs	r3, #32
 800bbcc:	e00e      	b.n	800bbec <UART_SetConfig+0x1eb4>
 800bbce:	2310      	movs	r3, #16
 800bbd0:	e00c      	b.n	800bbec <UART_SetConfig+0x1eb4>
 800bbd2:	230c      	movs	r3, #12
 800bbd4:	e00a      	b.n	800bbec <UART_SetConfig+0x1eb4>
 800bbd6:	230a      	movs	r3, #10
 800bbd8:	e008      	b.n	800bbec <UART_SetConfig+0x1eb4>
 800bbda:	2308      	movs	r3, #8
 800bbdc:	e006      	b.n	800bbec <UART_SetConfig+0x1eb4>
 800bbde:	2306      	movs	r3, #6
 800bbe0:	e004      	b.n	800bbec <UART_SetConfig+0x1eb4>
 800bbe2:	2304      	movs	r3, #4
 800bbe4:	e002      	b.n	800bbec <UART_SetConfig+0x1eb4>
 800bbe6:	2302      	movs	r3, #2
 800bbe8:	e000      	b.n	800bbec <UART_SetConfig+0x1eb4>
 800bbea:	2301      	movs	r3, #1
 800bbec:	fbb2 f2f3 	udiv	r2, r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	085b      	lsrs	r3, r3, #1
 800bbf6:	441a      	add	r2, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc04:	e1f2      	b.n	800bfec <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc06:	f107 030c 	add.w	r3, r7, #12
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fc fd5a 	bl	80086c4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc10:	693a      	ldr	r2, [r7, #16]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d044      	beq.n	800bca4 <UART_SetConfig+0x1f6c>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d03e      	beq.n	800bca0 <UART_SetConfig+0x1f68>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	d038      	beq.n	800bc9c <UART_SetConfig+0x1f64>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2e:	2b03      	cmp	r3, #3
 800bc30:	d032      	beq.n	800bc98 <UART_SetConfig+0x1f60>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc36:	2b04      	cmp	r3, #4
 800bc38:	d02c      	beq.n	800bc94 <UART_SetConfig+0x1f5c>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc3e:	2b05      	cmp	r3, #5
 800bc40:	d026      	beq.n	800bc90 <UART_SetConfig+0x1f58>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc46:	2b06      	cmp	r3, #6
 800bc48:	d020      	beq.n	800bc8c <UART_SetConfig+0x1f54>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4e:	2b07      	cmp	r3, #7
 800bc50:	d01a      	beq.n	800bc88 <UART_SetConfig+0x1f50>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc56:	2b08      	cmp	r3, #8
 800bc58:	d014      	beq.n	800bc84 <UART_SetConfig+0x1f4c>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5e:	2b09      	cmp	r3, #9
 800bc60:	d00e      	beq.n	800bc80 <UART_SetConfig+0x1f48>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc66:	2b0a      	cmp	r3, #10
 800bc68:	d008      	beq.n	800bc7c <UART_SetConfig+0x1f44>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6e:	2b0b      	cmp	r3, #11
 800bc70:	d102      	bne.n	800bc78 <UART_SetConfig+0x1f40>
 800bc72:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc76:	e016      	b.n	800bca6 <UART_SetConfig+0x1f6e>
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e014      	b.n	800bca6 <UART_SetConfig+0x1f6e>
 800bc7c:	2380      	movs	r3, #128	; 0x80
 800bc7e:	e012      	b.n	800bca6 <UART_SetConfig+0x1f6e>
 800bc80:	2340      	movs	r3, #64	; 0x40
 800bc82:	e010      	b.n	800bca6 <UART_SetConfig+0x1f6e>
 800bc84:	2320      	movs	r3, #32
 800bc86:	e00e      	b.n	800bca6 <UART_SetConfig+0x1f6e>
 800bc88:	2310      	movs	r3, #16
 800bc8a:	e00c      	b.n	800bca6 <UART_SetConfig+0x1f6e>
 800bc8c:	230c      	movs	r3, #12
 800bc8e:	e00a      	b.n	800bca6 <UART_SetConfig+0x1f6e>
 800bc90:	230a      	movs	r3, #10
 800bc92:	e008      	b.n	800bca6 <UART_SetConfig+0x1f6e>
 800bc94:	2308      	movs	r3, #8
 800bc96:	e006      	b.n	800bca6 <UART_SetConfig+0x1f6e>
 800bc98:	2306      	movs	r3, #6
 800bc9a:	e004      	b.n	800bca6 <UART_SetConfig+0x1f6e>
 800bc9c:	2304      	movs	r3, #4
 800bc9e:	e002      	b.n	800bca6 <UART_SetConfig+0x1f6e>
 800bca0:	2302      	movs	r3, #2
 800bca2:	e000      	b.n	800bca6 <UART_SetConfig+0x1f6e>
 800bca4:	2301      	movs	r3, #1
 800bca6:	fbb2 f2f3 	udiv	r2, r2, r3
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	085b      	lsrs	r3, r3, #1
 800bcb0:	441a      	add	r2, r3
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bcbe:	e195      	b.n	800bfec <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcc0:	4b87      	ldr	r3, [pc, #540]	; (800bee0 <UART_SetConfig+0x21a8>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f003 0320 	and.w	r3, r3, #32
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d05d      	beq.n	800bd88 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bccc:	4b84      	ldr	r3, [pc, #528]	; (800bee0 <UART_SetConfig+0x21a8>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	08db      	lsrs	r3, r3, #3
 800bcd2:	f003 0303 	and.w	r3, r3, #3
 800bcd6:	4a83      	ldr	r2, [pc, #524]	; (800bee4 <UART_SetConfig+0x21ac>)
 800bcd8:	40da      	lsrs	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d044      	beq.n	800bd6c <UART_SetConfig+0x2034>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d03e      	beq.n	800bd68 <UART_SetConfig+0x2030>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	d038      	beq.n	800bd64 <UART_SetConfig+0x202c>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf6:	2b03      	cmp	r3, #3
 800bcf8:	d032      	beq.n	800bd60 <UART_SetConfig+0x2028>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfe:	2b04      	cmp	r3, #4
 800bd00:	d02c      	beq.n	800bd5c <UART_SetConfig+0x2024>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd06:	2b05      	cmp	r3, #5
 800bd08:	d026      	beq.n	800bd58 <UART_SetConfig+0x2020>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0e:	2b06      	cmp	r3, #6
 800bd10:	d020      	beq.n	800bd54 <UART_SetConfig+0x201c>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd16:	2b07      	cmp	r3, #7
 800bd18:	d01a      	beq.n	800bd50 <UART_SetConfig+0x2018>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1e:	2b08      	cmp	r3, #8
 800bd20:	d014      	beq.n	800bd4c <UART_SetConfig+0x2014>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd26:	2b09      	cmp	r3, #9
 800bd28:	d00e      	beq.n	800bd48 <UART_SetConfig+0x2010>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2e:	2b0a      	cmp	r3, #10
 800bd30:	d008      	beq.n	800bd44 <UART_SetConfig+0x200c>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd36:	2b0b      	cmp	r3, #11
 800bd38:	d102      	bne.n	800bd40 <UART_SetConfig+0x2008>
 800bd3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd3e:	e016      	b.n	800bd6e <UART_SetConfig+0x2036>
 800bd40:	2301      	movs	r3, #1
 800bd42:	e014      	b.n	800bd6e <UART_SetConfig+0x2036>
 800bd44:	2380      	movs	r3, #128	; 0x80
 800bd46:	e012      	b.n	800bd6e <UART_SetConfig+0x2036>
 800bd48:	2340      	movs	r3, #64	; 0x40
 800bd4a:	e010      	b.n	800bd6e <UART_SetConfig+0x2036>
 800bd4c:	2320      	movs	r3, #32
 800bd4e:	e00e      	b.n	800bd6e <UART_SetConfig+0x2036>
 800bd50:	2310      	movs	r3, #16
 800bd52:	e00c      	b.n	800bd6e <UART_SetConfig+0x2036>
 800bd54:	230c      	movs	r3, #12
 800bd56:	e00a      	b.n	800bd6e <UART_SetConfig+0x2036>
 800bd58:	230a      	movs	r3, #10
 800bd5a:	e008      	b.n	800bd6e <UART_SetConfig+0x2036>
 800bd5c:	2308      	movs	r3, #8
 800bd5e:	e006      	b.n	800bd6e <UART_SetConfig+0x2036>
 800bd60:	2306      	movs	r3, #6
 800bd62:	e004      	b.n	800bd6e <UART_SetConfig+0x2036>
 800bd64:	2304      	movs	r3, #4
 800bd66:	e002      	b.n	800bd6e <UART_SetConfig+0x2036>
 800bd68:	2302      	movs	r3, #2
 800bd6a:	e000      	b.n	800bd6e <UART_SetConfig+0x2036>
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	fbb2 f2f3 	udiv	r2, r2, r3
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	085b      	lsrs	r3, r3, #1
 800bd78:	441a      	add	r2, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800bd86:	e131      	b.n	800bfec <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d043      	beq.n	800be18 <UART_SetConfig+0x20e0>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d03d      	beq.n	800be14 <UART_SetConfig+0x20dc>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	d037      	beq.n	800be10 <UART_SetConfig+0x20d8>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda4:	2b03      	cmp	r3, #3
 800bda6:	d031      	beq.n	800be0c <UART_SetConfig+0x20d4>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdac:	2b04      	cmp	r3, #4
 800bdae:	d02b      	beq.n	800be08 <UART_SetConfig+0x20d0>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb4:	2b05      	cmp	r3, #5
 800bdb6:	d025      	beq.n	800be04 <UART_SetConfig+0x20cc>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdbc:	2b06      	cmp	r3, #6
 800bdbe:	d01f      	beq.n	800be00 <UART_SetConfig+0x20c8>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc4:	2b07      	cmp	r3, #7
 800bdc6:	d019      	beq.n	800bdfc <UART_SetConfig+0x20c4>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdcc:	2b08      	cmp	r3, #8
 800bdce:	d013      	beq.n	800bdf8 <UART_SetConfig+0x20c0>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd4:	2b09      	cmp	r3, #9
 800bdd6:	d00d      	beq.n	800bdf4 <UART_SetConfig+0x20bc>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bddc:	2b0a      	cmp	r3, #10
 800bdde:	d007      	beq.n	800bdf0 <UART_SetConfig+0x20b8>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde4:	2b0b      	cmp	r3, #11
 800bde6:	d101      	bne.n	800bdec <UART_SetConfig+0x20b4>
 800bde8:	4b3f      	ldr	r3, [pc, #252]	; (800bee8 <UART_SetConfig+0x21b0>)
 800bdea:	e016      	b.n	800be1a <UART_SetConfig+0x20e2>
 800bdec:	4b3d      	ldr	r3, [pc, #244]	; (800bee4 <UART_SetConfig+0x21ac>)
 800bdee:	e014      	b.n	800be1a <UART_SetConfig+0x20e2>
 800bdf0:	4b3e      	ldr	r3, [pc, #248]	; (800beec <UART_SetConfig+0x21b4>)
 800bdf2:	e012      	b.n	800be1a <UART_SetConfig+0x20e2>
 800bdf4:	4b3e      	ldr	r3, [pc, #248]	; (800bef0 <UART_SetConfig+0x21b8>)
 800bdf6:	e010      	b.n	800be1a <UART_SetConfig+0x20e2>
 800bdf8:	4b3e      	ldr	r3, [pc, #248]	; (800bef4 <UART_SetConfig+0x21bc>)
 800bdfa:	e00e      	b.n	800be1a <UART_SetConfig+0x20e2>
 800bdfc:	4b3e      	ldr	r3, [pc, #248]	; (800bef8 <UART_SetConfig+0x21c0>)
 800bdfe:	e00c      	b.n	800be1a <UART_SetConfig+0x20e2>
 800be00:	4b3e      	ldr	r3, [pc, #248]	; (800befc <UART_SetConfig+0x21c4>)
 800be02:	e00a      	b.n	800be1a <UART_SetConfig+0x20e2>
 800be04:	4b3e      	ldr	r3, [pc, #248]	; (800bf00 <UART_SetConfig+0x21c8>)
 800be06:	e008      	b.n	800be1a <UART_SetConfig+0x20e2>
 800be08:	4b3e      	ldr	r3, [pc, #248]	; (800bf04 <UART_SetConfig+0x21cc>)
 800be0a:	e006      	b.n	800be1a <UART_SetConfig+0x20e2>
 800be0c:	4b3e      	ldr	r3, [pc, #248]	; (800bf08 <UART_SetConfig+0x21d0>)
 800be0e:	e004      	b.n	800be1a <UART_SetConfig+0x20e2>
 800be10:	4b3e      	ldr	r3, [pc, #248]	; (800bf0c <UART_SetConfig+0x21d4>)
 800be12:	e002      	b.n	800be1a <UART_SetConfig+0x20e2>
 800be14:	4b3e      	ldr	r3, [pc, #248]	; (800bf10 <UART_SetConfig+0x21d8>)
 800be16:	e000      	b.n	800be1a <UART_SetConfig+0x20e2>
 800be18:	4b32      	ldr	r3, [pc, #200]	; (800bee4 <UART_SetConfig+0x21ac>)
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	6852      	ldr	r2, [r2, #4]
 800be1e:	0852      	lsrs	r2, r2, #1
 800be20:	441a      	add	r2, r3
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	fbb2 f3f3 	udiv	r3, r2, r3
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be2e:	e0dd      	b.n	800bfec <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be34:	2b00      	cmp	r3, #0
 800be36:	d046      	beq.n	800bec6 <UART_SetConfig+0x218e>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d040      	beq.n	800bec2 <UART_SetConfig+0x218a>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be44:	2b02      	cmp	r3, #2
 800be46:	d03a      	beq.n	800bebe <UART_SetConfig+0x2186>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be4c:	2b03      	cmp	r3, #3
 800be4e:	d034      	beq.n	800beba <UART_SetConfig+0x2182>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be54:	2b04      	cmp	r3, #4
 800be56:	d02e      	beq.n	800beb6 <UART_SetConfig+0x217e>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5c:	2b05      	cmp	r3, #5
 800be5e:	d028      	beq.n	800beb2 <UART_SetConfig+0x217a>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be64:	2b06      	cmp	r3, #6
 800be66:	d022      	beq.n	800beae <UART_SetConfig+0x2176>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6c:	2b07      	cmp	r3, #7
 800be6e:	d01c      	beq.n	800beaa <UART_SetConfig+0x2172>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be74:	2b08      	cmp	r3, #8
 800be76:	d016      	beq.n	800bea6 <UART_SetConfig+0x216e>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7c:	2b09      	cmp	r3, #9
 800be7e:	d00f      	beq.n	800bea0 <UART_SetConfig+0x2168>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be84:	2b0a      	cmp	r3, #10
 800be86:	d008      	beq.n	800be9a <UART_SetConfig+0x2162>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8c:	2b0b      	cmp	r3, #11
 800be8e:	d102      	bne.n	800be96 <UART_SetConfig+0x215e>
 800be90:	f643 5309 	movw	r3, #15625	; 0x3d09
 800be94:	e018      	b.n	800bec8 <UART_SetConfig+0x2190>
 800be96:	4b18      	ldr	r3, [pc, #96]	; (800bef8 <UART_SetConfig+0x21c0>)
 800be98:	e016      	b.n	800bec8 <UART_SetConfig+0x2190>
 800be9a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800be9e:	e013      	b.n	800bec8 <UART_SetConfig+0x2190>
 800bea0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800bea4:	e010      	b.n	800bec8 <UART_SetConfig+0x2190>
 800bea6:	4b1b      	ldr	r3, [pc, #108]	; (800bf14 <UART_SetConfig+0x21dc>)
 800bea8:	e00e      	b.n	800bec8 <UART_SetConfig+0x2190>
 800beaa:	4b0f      	ldr	r3, [pc, #60]	; (800bee8 <UART_SetConfig+0x21b0>)
 800beac:	e00c      	b.n	800bec8 <UART_SetConfig+0x2190>
 800beae:	4b1a      	ldr	r3, [pc, #104]	; (800bf18 <UART_SetConfig+0x21e0>)
 800beb0:	e00a      	b.n	800bec8 <UART_SetConfig+0x2190>
 800beb2:	4b1a      	ldr	r3, [pc, #104]	; (800bf1c <UART_SetConfig+0x21e4>)
 800beb4:	e008      	b.n	800bec8 <UART_SetConfig+0x2190>
 800beb6:	4b0d      	ldr	r3, [pc, #52]	; (800beec <UART_SetConfig+0x21b4>)
 800beb8:	e006      	b.n	800bec8 <UART_SetConfig+0x2190>
 800beba:	4b19      	ldr	r3, [pc, #100]	; (800bf20 <UART_SetConfig+0x21e8>)
 800bebc:	e004      	b.n	800bec8 <UART_SetConfig+0x2190>
 800bebe:	4b0c      	ldr	r3, [pc, #48]	; (800bef0 <UART_SetConfig+0x21b8>)
 800bec0:	e002      	b.n	800bec8 <UART_SetConfig+0x2190>
 800bec2:	4b0c      	ldr	r3, [pc, #48]	; (800bef4 <UART_SetConfig+0x21bc>)
 800bec4:	e000      	b.n	800bec8 <UART_SetConfig+0x2190>
 800bec6:	4b0c      	ldr	r3, [pc, #48]	; (800bef8 <UART_SetConfig+0x21c0>)
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	6852      	ldr	r2, [r2, #4]
 800becc:	0852      	lsrs	r2, r2, #1
 800bece:	441a      	add	r2, r3
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bed8:	b29b      	uxth	r3, r3
 800beda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bedc:	e086      	b.n	800bfec <UART_SetConfig+0x22b4>
 800bede:	bf00      	nop
 800bee0:	58024400 	.word	0x58024400
 800bee4:	03d09000 	.word	0x03d09000
 800bee8:	0003d090 	.word	0x0003d090
 800beec:	0007a120 	.word	0x0007a120
 800bef0:	000f4240 	.word	0x000f4240
 800bef4:	001e8480 	.word	0x001e8480
 800bef8:	003d0900 	.word	0x003d0900
 800befc:	00516155 	.word	0x00516155
 800bf00:	0061a800 	.word	0x0061a800
 800bf04:	007a1200 	.word	0x007a1200
 800bf08:	00a2c2aa 	.word	0x00a2c2aa
 800bf0c:	00f42400 	.word	0x00f42400
 800bf10:	01e84800 	.word	0x01e84800
 800bf14:	0001e848 	.word	0x0001e848
 800bf18:	00051615 	.word	0x00051615
 800bf1c:	00061a80 	.word	0x00061a80
 800bf20:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d04e      	beq.n	800bfca <UART_SetConfig+0x2292>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d047      	beq.n	800bfc4 <UART_SetConfig+0x228c>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf38:	2b02      	cmp	r3, #2
 800bf3a:	d040      	beq.n	800bfbe <UART_SetConfig+0x2286>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf40:	2b03      	cmp	r3, #3
 800bf42:	d039      	beq.n	800bfb8 <UART_SetConfig+0x2280>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf48:	2b04      	cmp	r3, #4
 800bf4a:	d032      	beq.n	800bfb2 <UART_SetConfig+0x227a>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf50:	2b05      	cmp	r3, #5
 800bf52:	d02b      	beq.n	800bfac <UART_SetConfig+0x2274>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf58:	2b06      	cmp	r3, #6
 800bf5a:	d024      	beq.n	800bfa6 <UART_SetConfig+0x226e>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf60:	2b07      	cmp	r3, #7
 800bf62:	d01d      	beq.n	800bfa0 <UART_SetConfig+0x2268>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf68:	2b08      	cmp	r3, #8
 800bf6a:	d016      	beq.n	800bf9a <UART_SetConfig+0x2262>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf70:	2b09      	cmp	r3, #9
 800bf72:	d00f      	beq.n	800bf94 <UART_SetConfig+0x225c>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf78:	2b0a      	cmp	r3, #10
 800bf7a:	d008      	beq.n	800bf8e <UART_SetConfig+0x2256>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf80:	2b0b      	cmp	r3, #11
 800bf82:	d101      	bne.n	800bf88 <UART_SetConfig+0x2250>
 800bf84:	2380      	movs	r3, #128	; 0x80
 800bf86:	e022      	b.n	800bfce <UART_SetConfig+0x2296>
 800bf88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf8c:	e01f      	b.n	800bfce <UART_SetConfig+0x2296>
 800bf8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf92:	e01c      	b.n	800bfce <UART_SetConfig+0x2296>
 800bf94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf98:	e019      	b.n	800bfce <UART_SetConfig+0x2296>
 800bf9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf9e:	e016      	b.n	800bfce <UART_SetConfig+0x2296>
 800bfa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bfa4:	e013      	b.n	800bfce <UART_SetConfig+0x2296>
 800bfa6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800bfaa:	e010      	b.n	800bfce <UART_SetConfig+0x2296>
 800bfac:	f640 43cc 	movw	r3, #3276	; 0xccc
 800bfb0:	e00d      	b.n	800bfce <UART_SetConfig+0x2296>
 800bfb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfb6:	e00a      	b.n	800bfce <UART_SetConfig+0x2296>
 800bfb8:	f241 5355 	movw	r3, #5461	; 0x1555
 800bfbc:	e007      	b.n	800bfce <UART_SetConfig+0x2296>
 800bfbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bfc2:	e004      	b.n	800bfce <UART_SetConfig+0x2296>
 800bfc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bfc8:	e001      	b.n	800bfce <UART_SetConfig+0x2296>
 800bfca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	6852      	ldr	r2, [r2, #4]
 800bfd2:	0852      	lsrs	r2, r2, #1
 800bfd4:	441a      	add	r2, r3
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bfe2:	e003      	b.n	800bfec <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800bfea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfee:	2b0f      	cmp	r3, #15
 800bff0:	d908      	bls.n	800c004 <UART_SetConfig+0x22cc>
 800bff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bff8:	d204      	bcs.n	800c004 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c000:	60da      	str	r2, [r3, #12]
 800c002:	e002      	b.n	800c00a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800c004:	2301      	movs	r3, #1
 800c006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2201      	movs	r2, #1
 800c00e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2201      	movs	r2, #1
 800c016:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2200      	movs	r2, #0
 800c01e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800c026:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3740      	adds	r7, #64	; 0x40
 800c02e:	46bd      	mov	sp, r7
 800c030:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800c034 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c040:	f003 0301 	and.w	r3, r3, #1
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00a      	beq.n	800c05e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	430a      	orrs	r2, r1
 800c05c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c062:	f003 0302 	and.w	r3, r3, #2
 800c066:	2b00      	cmp	r3, #0
 800c068:	d00a      	beq.n	800c080 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	430a      	orrs	r2, r1
 800c07e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c084:	f003 0304 	and.w	r3, r3, #4
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00a      	beq.n	800c0a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	430a      	orrs	r2, r1
 800c0a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a6:	f003 0308 	and.w	r3, r3, #8
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00a      	beq.n	800c0c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	430a      	orrs	r2, r1
 800c0c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c8:	f003 0310 	and.w	r3, r3, #16
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00a      	beq.n	800c0e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	430a      	orrs	r2, r1
 800c0e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ea:	f003 0320 	and.w	r3, r3, #32
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d00a      	beq.n	800c108 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	430a      	orrs	r2, r1
 800c106:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c110:	2b00      	cmp	r3, #0
 800c112:	d01a      	beq.n	800c14a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	430a      	orrs	r2, r1
 800c128:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c12e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c132:	d10a      	bne.n	800c14a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	430a      	orrs	r2, r1
 800c148:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c152:	2b00      	cmp	r3, #0
 800c154:	d00a      	beq.n	800c16c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	430a      	orrs	r2, r1
 800c16a:	605a      	str	r2, [r3, #4]
  }
}
 800c16c:	bf00      	nop
 800c16e:	370c      	adds	r7, #12
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b086      	sub	sp, #24
 800c17c:	af02      	add	r7, sp, #8
 800c17e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c188:	f7f6 f86c 	bl	8002264 <HAL_GetTick>
 800c18c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f003 0308 	and.w	r3, r3, #8
 800c198:	2b08      	cmp	r3, #8
 800c19a:	d10e      	bne.n	800c1ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c19c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c1a0:	9300      	str	r3, [sp, #0]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 f82c 	bl	800c208 <UART_WaitOnFlagUntilTimeout>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d001      	beq.n	800c1ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c1b6:	2303      	movs	r3, #3
 800c1b8:	e022      	b.n	800c200 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f003 0304 	and.w	r3, r3, #4
 800c1c4:	2b04      	cmp	r3, #4
 800c1c6:	d10e      	bne.n	800c1e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c1c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c1cc:	9300      	str	r3, [sp, #0]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f000 f816 	bl	800c208 <UART_WaitOnFlagUntilTimeout>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d001      	beq.n	800c1e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c1e2:	2303      	movs	r3, #3
 800c1e4:	e00c      	b.n	800c200 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2220      	movs	r2, #32
 800c1ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2220      	movs	r2, #32
 800c1f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c1fe:	2300      	movs	r3, #0
}
 800c200:	4618      	mov	r0, r3
 800c202:	3710      	adds	r7, #16
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	603b      	str	r3, [r7, #0]
 800c214:	4613      	mov	r3, r2
 800c216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c218:	e062      	b.n	800c2e0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c220:	d05e      	beq.n	800c2e0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c222:	f7f6 f81f 	bl	8002264 <HAL_GetTick>
 800c226:	4602      	mov	r2, r0
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	1ad3      	subs	r3, r2, r3
 800c22c:	69ba      	ldr	r2, [r7, #24]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d302      	bcc.n	800c238 <UART_WaitOnFlagUntilTimeout+0x30>
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d11d      	bne.n	800c274 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c246:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	689a      	ldr	r2, [r3, #8]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f022 0201 	bic.w	r2, r2, #1
 800c256:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2220      	movs	r2, #32
 800c25c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2220      	movs	r2, #32
 800c264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2200      	movs	r2, #0
 800c26c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c270:	2303      	movs	r3, #3
 800c272:	e045      	b.n	800c300 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f003 0304 	and.w	r3, r3, #4
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d02e      	beq.n	800c2e0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	69db      	ldr	r3, [r3, #28]
 800c288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c28c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c290:	d126      	bne.n	800c2e0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c29a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c2aa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	689a      	ldr	r2, [r3, #8]
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f022 0201 	bic.w	r2, r2, #1
 800c2ba:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2220      	movs	r2, #32
 800c2c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2220      	movs	r2, #32
 800c2c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2220      	movs	r2, #32
 800c2d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800c2dc:	2303      	movs	r3, #3
 800c2de:	e00f      	b.n	800c300 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	69da      	ldr	r2, [r3, #28]
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	bf0c      	ite	eq
 800c2f0:	2301      	moveq	r3, #1
 800c2f2:	2300      	movne	r3, #0
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	79fb      	ldrb	r3, [r7, #7]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d08d      	beq.n	800c21a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c2fe:	2300      	movs	r3, #0
}
 800c300:	4618      	mov	r0, r3
 800c302:	3710      	adds	r7, #16
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c31e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	689a      	ldr	r2, [r3, #8]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c32e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2220      	movs	r2, #32
 800c334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800c338:	bf00      	nop
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c35a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	6899      	ldr	r1, [r3, #8]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	4b08      	ldr	r3, [pc, #32]	; (800c388 <UART_EndRxTransfer+0x44>)
 800c368:	400b      	ands	r3, r1
 800c36a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2220      	movs	r2, #32
 800c370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800c37a:	bf00      	nop
 800c37c:	370c      	adds	r7, #12
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
 800c386:	bf00      	nop
 800c388:	effffffe 	.word	0xeffffffe

0800c38c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c398:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	69db      	ldr	r3, [r3, #28]
 800c39e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3a2:	d01f      	beq.n	800c3e4 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c3ba:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	689a      	ldr	r2, [r3, #8]
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f022 0201 	bic.w	r2, r2, #1
 800c3ca:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	689a      	ldr	r2, [r3, #8]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c3da:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2220      	movs	r2, #32
 800c3e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f7f4 f9af 	bl	8000748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3ea:	bf00      	nop
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b084      	sub	sp, #16
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f7fd fc83 	bl	8009d0c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c406:	bf00      	nop
 800c408:	3710      	adds	r7, #16
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b086      	sub	sp, #24
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c41a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c422:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c42a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	689b      	ldr	r3, [r3, #8]
 800c432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c436:	2b80      	cmp	r3, #128	; 0x80
 800c438:	d109      	bne.n	800c44e <UART_DMAError+0x40>
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	2b21      	cmp	r3, #33	; 0x21
 800c43e:	d106      	bne.n	800c44e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	2200      	movs	r2, #0
 800c444:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c448:	6978      	ldr	r0, [r7, #20]
 800c44a:	f7ff ff5d 	bl	800c308 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c458:	2b40      	cmp	r3, #64	; 0x40
 800c45a:	d109      	bne.n	800c470 <UART_DMAError+0x62>
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2b22      	cmp	r3, #34	; 0x22
 800c460:	d106      	bne.n	800c470 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	2200      	movs	r2, #0
 800c466:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c46a:	6978      	ldr	r0, [r7, #20]
 800c46c:	f7ff ff6a 	bl	800c344 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c476:	f043 0210 	orr.w	r2, r3, #16
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c480:	6978      	ldr	r0, [r7, #20]
 800c482:	f7fd fc4d 	bl	8009d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c486:	bf00      	nop
 800c488:	3718      	adds	r7, #24
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b084      	sub	sp, #16
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c49a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4ac:	68f8      	ldr	r0, [r7, #12]
 800c4ae:	f7fd fc37 	bl	8009d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4b2:	bf00      	nop
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c4ba:	b480      	push	{r7}
 800c4bc:	b083      	sub	sp, #12
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4c8:	2b21      	cmp	r3, #33	; 0x21
 800c4ca:	d12a      	bne.n	800c522 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d110      	bne.n	800c4fa <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c4e6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4f6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c4f8:	e013      	b.n	800c522 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4fe:	781a      	ldrb	r2, [r3, #0]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c50a:	1c5a      	adds	r2, r3, #1
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c516:	b29b      	uxth	r3, r3
 800c518:	3b01      	subs	r3, #1
 800c51a:	b29a      	uxth	r2, r3
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c522:	bf00      	nop
 800c524:	370c      	adds	r7, #12
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr

0800c52e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c52e:	b480      	push	{r7}
 800c530:	b085      	sub	sp, #20
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c53c:	2b21      	cmp	r3, #33	; 0x21
 800c53e:	d12f      	bne.n	800c5a0 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c546:	b29b      	uxth	r3, r3
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d110      	bne.n	800c56e <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c55a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c56a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c56c:	e018      	b.n	800c5a0 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c572:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	881b      	ldrh	r3, [r3, #0]
 800c578:	461a      	mov	r2, r3
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c582:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c588:	1c9a      	adds	r2, r3, #2
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c594:	b29b      	uxth	r3, r3
 800c596:	3b01      	subs	r3, #1
 800c598:	b29a      	uxth	r2, r3
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c5a0:	bf00      	nop
 800c5a2:	3714      	adds	r7, #20
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr

0800c5ac <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b085      	sub	sp, #20
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5ba:	2b21      	cmp	r3, #33	; 0x21
 800c5bc:	d13d      	bne.n	800c63a <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c5c4:	81fb      	strh	r3, [r7, #14]
 800c5c6:	e035      	b.n	800c634 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d111      	bne.n	800c5f8 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	689a      	ldr	r2, [r3, #8]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c5e2:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c5f2:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c5f4:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c5f6:	e020      	b.n	800c63a <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	69db      	ldr	r3, [r3, #28]
 800c5fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c602:	2b00      	cmp	r3, #0
 800c604:	d013      	beq.n	800c62e <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c60a:	781a      	ldrb	r2, [r3, #0]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c616:	1c5a      	adds	r2, r3, #1
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c622:	b29b      	uxth	r3, r3
 800c624:	3b01      	subs	r3, #1
 800c626:	b29a      	uxth	r2, r3
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c62e:	89fb      	ldrh	r3, [r7, #14]
 800c630:	3b01      	subs	r3, #1
 800c632:	81fb      	strh	r3, [r7, #14]
 800c634:	89fb      	ldrh	r3, [r7, #14]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d1c6      	bne.n	800c5c8 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800c63a:	bf00      	nop
 800c63c:	3714      	adds	r7, #20
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr

0800c646 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c646:	b480      	push	{r7}
 800c648:	b085      	sub	sp, #20
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c654:	2b21      	cmp	r3, #33	; 0x21
 800c656:	d142      	bne.n	800c6de <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c65e:	81fb      	strh	r3, [r7, #14]
 800c660:	e03a      	b.n	800c6d8 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c668:	b29b      	uxth	r3, r3
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d111      	bne.n	800c692 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	689a      	ldr	r2, [r3, #8]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c67c:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c68c:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800c68e:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800c690:	e025      	b.n	800c6de <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	69db      	ldr	r3, [r3, #28]
 800c698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d018      	beq.n	800c6d2 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6a4:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	881b      	ldrh	r3, [r3, #0]
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c6b4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6ba:	1c9a      	adds	r2, r3, #2
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	3b01      	subs	r3, #1
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c6d2:	89fb      	ldrh	r3, [r7, #14]
 800c6d4:	3b01      	subs	r3, #1
 800c6d6:	81fb      	strh	r3, [r7, #14]
 800c6d8:	89fb      	ldrh	r3, [r7, #14]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d1c1      	bne.n	800c662 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800c6de:	bf00      	nop
 800c6e0:	3714      	adds	r7, #20
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr

0800c6ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b082      	sub	sp, #8
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c700:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2220      	movs	r2, #32
 800c706:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2200      	movs	r2, #0
 800c70e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f7f3 ffd7 	bl	80006c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c716:	bf00      	nop
 800c718:	3708      	adds	r7, #8
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}

0800c71e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	b084      	sub	sp, #16
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c72c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c734:	2b22      	cmp	r3, #34	; 0x22
 800c736:	d13b      	bne.n	800c7b0 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c73e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c740:	89bb      	ldrh	r3, [r7, #12]
 800c742:	b2d9      	uxtb	r1, r3
 800c744:	89fb      	ldrh	r3, [r7, #14]
 800c746:	b2da      	uxtb	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c74c:	400a      	ands	r2, r1
 800c74e:	b2d2      	uxtb	r2, r2
 800c750:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c756:	1c5a      	adds	r2, r3, #1
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c762:	b29b      	uxth	r3, r3
 800c764:	3b01      	subs	r3, #1
 800c766:	b29a      	uxth	r2, r3
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c774:	b29b      	uxth	r3, r3
 800c776:	2b00      	cmp	r3, #0
 800c778:	d122      	bne.n	800c7c0 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c788:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	689a      	ldr	r2, [r3, #8]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f022 0201 	bic.w	r2, r2, #1
 800c798:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2220      	movs	r2, #32
 800c79e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f7f3 ffcd 	bl	8000748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c7ae:	e007      	b.n	800c7c0 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	699a      	ldr	r2, [r3, #24]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f042 0208 	orr.w	r2, r2, #8
 800c7be:	619a      	str	r2, [r3, #24]
}
 800c7c0:	bf00      	nop
 800c7c2:	3710      	adds	r7, #16
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c7d6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7de:	2b22      	cmp	r3, #34	; 0x22
 800c7e0:	d13b      	bne.n	800c85a <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7ee:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c7f0:	89ba      	ldrh	r2, [r7, #12]
 800c7f2:	89fb      	ldrh	r3, [r7, #14]
 800c7f4:	4013      	ands	r3, r2
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c800:	1c9a      	adds	r2, r3, #2
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	3b01      	subs	r3, #1
 800c810:	b29a      	uxth	r2, r3
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c81e:	b29b      	uxth	r3, r3
 800c820:	2b00      	cmp	r3, #0
 800c822:	d122      	bne.n	800c86a <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c832:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	689a      	ldr	r2, [r3, #8]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f022 0201 	bic.w	r2, r2, #1
 800c842:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2220      	movs	r2, #32
 800c848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7f3 ff78 	bl	8000748 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c858:	e007      	b.n	800c86a <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	699a      	ldr	r2, [r3, #24]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f042 0208 	orr.w	r2, r2, #8
 800c868:	619a      	str	r2, [r3, #24]
}
 800c86a:	bf00      	nop
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
	...

0800c874 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c882:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c88a:	2b22      	cmp	r3, #34	; 0x22
 800c88c:	d166      	bne.n	800c95c <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c894:	81fb      	strh	r3, [r7, #14]
 800c896:	e03d      	b.n	800c914 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89e:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c8a0:	893b      	ldrh	r3, [r7, #8]
 800c8a2:	b2d9      	uxtb	r1, r3
 800c8a4:	89bb      	ldrh	r3, [r7, #12]
 800c8a6:	b2da      	uxtb	r2, r3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8ac:	400a      	ands	r2, r1
 800c8ae:	b2d2      	uxtb	r2, r2
 800c8b0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8b6:	1c5a      	adds	r2, r3, #1
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	3b01      	subs	r3, #1
 800c8c6:	b29a      	uxth	r2, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d119      	bne.n	800c90e <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c8e8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	6899      	ldr	r1, [r3, #8]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	4b1f      	ldr	r3, [pc, #124]	; (800c974 <UART_RxISR_8BIT_FIFOEN+0x100>)
 800c8f6:	400b      	ands	r3, r1
 800c8f8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2220      	movs	r2, #32
 800c8fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2200      	movs	r2, #0
 800c906:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f7f3 ff1d 	bl	8000748 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c90e:	89fb      	ldrh	r3, [r7, #14]
 800c910:	3b01      	subs	r3, #1
 800c912:	81fb      	strh	r3, [r7, #14]
 800c914:	89fb      	ldrh	r3, [r7, #14]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d1be      	bne.n	800c898 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c920:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c922:	897b      	ldrh	r3, [r7, #10]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d021      	beq.n	800c96c <UART_RxISR_8BIT_FIFOEN+0xf8>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c92e:	897a      	ldrh	r2, [r7, #10]
 800c930:	429a      	cmp	r2, r3
 800c932:	d21b      	bcs.n	800c96c <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	689a      	ldr	r2, [r3, #8]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c942:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	4a0c      	ldr	r2, [pc, #48]	; (800c978 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800c948:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f042 0220 	orr.w	r2, r2, #32
 800c958:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c95a:	e007      	b.n	800c96c <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	699a      	ldr	r2, [r3, #24]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f042 0208 	orr.w	r2, r2, #8
 800c96a:	619a      	str	r2, [r3, #24]
}
 800c96c:	bf00      	nop
 800c96e:	3710      	adds	r7, #16
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	effffffe 	.word	0xeffffffe
 800c978:	0800c71f 	.word	0x0800c71f

0800c97c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b086      	sub	sp, #24
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c98a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c992:	2b22      	cmp	r3, #34	; 0x22
 800c994:	d166      	bne.n	800ca64 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c99c:	82fb      	strh	r3, [r7, #22]
 800c99e:	e03d      	b.n	800ca1c <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a6:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9ac:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800c9ae:	8a3a      	ldrh	r2, [r7, #16]
 800c9b0:	8abb      	ldrh	r3, [r7, #20]
 800c9b2:	4013      	ands	r3, r2
 800c9b4:	b29a      	uxth	r2, r3
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9be:	1c9a      	adds	r2, r3, #2
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d119      	bne.n	800ca16 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c9f0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	6899      	ldr	r1, [r3, #8]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	4b1f      	ldr	r3, [pc, #124]	; (800ca7c <UART_RxISR_16BIT_FIFOEN+0x100>)
 800c9fe:	400b      	ands	r3, r1
 800ca00:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2220      	movs	r2, #32
 800ca06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f7f3 fe99 	bl	8000748 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800ca16:	8afb      	ldrh	r3, [r7, #22]
 800ca18:	3b01      	subs	r3, #1
 800ca1a:	82fb      	strh	r3, [r7, #22]
 800ca1c:	8afb      	ldrh	r3, [r7, #22]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d1be      	bne.n	800c9a0 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca28:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ca2a:	8a7b      	ldrh	r3, [r7, #18]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d021      	beq.n	800ca74 <UART_RxISR_16BIT_FIFOEN+0xf8>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ca36:	8a7a      	ldrh	r2, [r7, #18]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d21b      	bcs.n	800ca74 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	689a      	ldr	r2, [r3, #8]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ca4a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	4a0c      	ldr	r2, [pc, #48]	; (800ca80 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800ca50:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f042 0220 	orr.w	r2, r2, #32
 800ca60:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca62:	e007      	b.n	800ca74 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	699a      	ldr	r2, [r3, #24]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f042 0208 	orr.w	r2, r2, #8
 800ca72:	619a      	str	r2, [r3, #24]
}
 800ca74:	bf00      	nop
 800ca76:	3718      	adds	r7, #24
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	effffffe 	.word	0xeffffffe
 800ca80:	0800c7c9 	.word	0x0800c7c9

0800ca84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b083      	sub	sp, #12
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ca8c:	bf00      	nop
 800ca8e:	370c      	adds	r7, #12
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr

0800ca98 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800caa0:	bf00      	nop
 800caa2:	370c      	adds	r7, #12
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr

0800caac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cab4:	bf00      	nop
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b085      	sub	sp, #20
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cace:	2b01      	cmp	r3, #1
 800cad0:	d101      	bne.n	800cad6 <HAL_UARTEx_DisableFifoMode+0x16>
 800cad2:	2302      	movs	r3, #2
 800cad4:	e027      	b.n	800cb26 <HAL_UARTEx_DisableFifoMode+0x66>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2201      	movs	r2, #1
 800cada:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2224      	movs	r2, #36	; 0x24
 800cae2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f022 0201 	bic.w	r2, r2, #1
 800cafc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cb04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2220      	movs	r2, #32
 800cb18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3714      	adds	r7, #20
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr

0800cb32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b084      	sub	sp, #16
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
 800cb3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d101      	bne.n	800cb4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cb46:	2302      	movs	r3, #2
 800cb48:	e02d      	b.n	800cba6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2224      	movs	r2, #36	; 0x24
 800cb56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f022 0201 	bic.w	r2, r2, #1
 800cb70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	689b      	ldr	r3, [r3, #8]
 800cb78:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	683a      	ldr	r2, [r7, #0]
 800cb82:	430a      	orrs	r2, r1
 800cb84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 f850 	bl	800cc2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	68fa      	ldr	r2, [r7, #12]
 800cb92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2220      	movs	r2, #32
 800cb98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cba4:	2300      	movs	r3, #0
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b084      	sub	sp, #16
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d101      	bne.n	800cbc6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cbc2:	2302      	movs	r3, #2
 800cbc4:	e02d      	b.n	800cc22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2201      	movs	r2, #1
 800cbca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2224      	movs	r2, #36	; 0x24
 800cbd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f022 0201 	bic.w	r2, r2, #1
 800cbec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	683a      	ldr	r2, [r7, #0]
 800cbfe:	430a      	orrs	r2, r1
 800cc00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f000 f812 	bl	800cc2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68fa      	ldr	r2, [r7, #12]
 800cc0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2220      	movs	r2, #32
 800cc14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cc20:	2300      	movs	r3, #0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
	...

0800cc2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b089      	sub	sp, #36	; 0x24
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800cc34:	4a2f      	ldr	r2, [pc, #188]	; (800ccf4 <UARTEx_SetNbDataToProcess+0xc8>)
 800cc36:	f107 0314 	add.w	r3, r7, #20
 800cc3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cc3e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800cc42:	4a2d      	ldr	r2, [pc, #180]	; (800ccf8 <UARTEx_SetNbDataToProcess+0xcc>)
 800cc44:	f107 030c 	add.w	r3, r7, #12
 800cc48:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cc4c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d108      	bne.n	800cc6a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2201      	movs	r2, #1
 800cc64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cc68:	e03d      	b.n	800cce6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cc6a:	2308      	movs	r3, #8
 800cc6c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cc6e:	2308      	movs	r3, #8
 800cc70:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	0e5b      	lsrs	r3, r3, #25
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	f003 0307 	and.w	r3, r3, #7
 800cc80:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	689b      	ldr	r3, [r3, #8]
 800cc88:	0f5b      	lsrs	r3, r3, #29
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	f003 0307 	and.w	r3, r3, #7
 800cc90:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800cc92:	7fbb      	ldrb	r3, [r7, #30]
 800cc94:	7f3a      	ldrb	r2, [r7, #28]
 800cc96:	f107 0120 	add.w	r1, r7, #32
 800cc9a:	440a      	add	r2, r1
 800cc9c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800cca0:	fb02 f303 	mul.w	r3, r2, r3
 800cca4:	7f3a      	ldrb	r2, [r7, #28]
 800cca6:	f107 0120 	add.w	r1, r7, #32
 800ccaa:	440a      	add	r2, r1
 800ccac:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ccb0:	fb93 f3f2 	sdiv	r3, r3, r2
 800ccb4:	b29a      	uxth	r2, r3
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ccbc:	7ffb      	ldrb	r3, [r7, #31]
 800ccbe:	7f7a      	ldrb	r2, [r7, #29]
 800ccc0:	f107 0120 	add.w	r1, r7, #32
 800ccc4:	440a      	add	r2, r1
 800ccc6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ccca:	fb02 f303 	mul.w	r3, r2, r3
 800ccce:	7f7a      	ldrb	r2, [r7, #29]
 800ccd0:	f107 0120 	add.w	r1, r7, #32
 800ccd4:	440a      	add	r2, r1
 800ccd6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ccda:	fb93 f3f2 	sdiv	r3, r3, r2
 800ccde:	b29a      	uxth	r2, r3
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cce6:	bf00      	nop
 800cce8:	3724      	adds	r7, #36	; 0x24
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr
 800ccf2:	bf00      	nop
 800ccf4:	0800cd6c 	.word	0x0800cd6c
 800ccf8:	0800cd74 	.word	0x0800cd74

0800ccfc <__libc_init_array>:
 800ccfc:	b570      	push	{r4, r5, r6, lr}
 800ccfe:	4e0d      	ldr	r6, [pc, #52]	; (800cd34 <__libc_init_array+0x38>)
 800cd00:	4c0d      	ldr	r4, [pc, #52]	; (800cd38 <__libc_init_array+0x3c>)
 800cd02:	1ba4      	subs	r4, r4, r6
 800cd04:	10a4      	asrs	r4, r4, #2
 800cd06:	2500      	movs	r5, #0
 800cd08:	42a5      	cmp	r5, r4
 800cd0a:	d109      	bne.n	800cd20 <__libc_init_array+0x24>
 800cd0c:	4e0b      	ldr	r6, [pc, #44]	; (800cd3c <__libc_init_array+0x40>)
 800cd0e:	4c0c      	ldr	r4, [pc, #48]	; (800cd40 <__libc_init_array+0x44>)
 800cd10:	f000 f820 	bl	800cd54 <_init>
 800cd14:	1ba4      	subs	r4, r4, r6
 800cd16:	10a4      	asrs	r4, r4, #2
 800cd18:	2500      	movs	r5, #0
 800cd1a:	42a5      	cmp	r5, r4
 800cd1c:	d105      	bne.n	800cd2a <__libc_init_array+0x2e>
 800cd1e:	bd70      	pop	{r4, r5, r6, pc}
 800cd20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cd24:	4798      	blx	r3
 800cd26:	3501      	adds	r5, #1
 800cd28:	e7ee      	b.n	800cd08 <__libc_init_array+0xc>
 800cd2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cd2e:	4798      	blx	r3
 800cd30:	3501      	adds	r5, #1
 800cd32:	e7f2      	b.n	800cd1a <__libc_init_array+0x1e>
 800cd34:	0800cd9c 	.word	0x0800cd9c
 800cd38:	0800cd9c 	.word	0x0800cd9c
 800cd3c:	0800cd9c 	.word	0x0800cd9c
 800cd40:	0800cda0 	.word	0x0800cda0

0800cd44 <memset>:
 800cd44:	4402      	add	r2, r0
 800cd46:	4603      	mov	r3, r0
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d100      	bne.n	800cd4e <memset+0xa>
 800cd4c:	4770      	bx	lr
 800cd4e:	f803 1b01 	strb.w	r1, [r3], #1
 800cd52:	e7f9      	b.n	800cd48 <memset+0x4>

0800cd54 <_init>:
 800cd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd56:	bf00      	nop
 800cd58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd5a:	bc08      	pop	{r3}
 800cd5c:	469e      	mov	lr, r3
 800cd5e:	4770      	bx	lr

0800cd60 <_fini>:
 800cd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd62:	bf00      	nop
 800cd64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd66:	bc08      	pop	{r3}
 800cd68:	469e      	mov	lr, r3
 800cd6a:	4770      	bx	lr
